_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   986k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   986k|  chars_format const fmt = options.format;
  277|   986k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   986k|  parsed_number_string_t<UC> answer;
  280|   986k|  answer.valid = false;
  281|   986k|  answer.too_many_digits = false;
  282|   986k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   986k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 986k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   986k|  UC const * const start_digits = p;
  303|       |
  304|   986k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  5.20M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 4.71M, False: 492k]
  |  Branch (306:25): [True: 4.21M, False: 493k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  4.21M|    i = 10 * i +
  310|  4.21M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  4.21M|    ++p;
  312|  4.21M|  }
  313|   986k|  UC const * const end_of_integer_part = p;
  314|   986k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   986k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   986k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   986k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 986k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   986k|  int64_t exponent = 0;
  324|   986k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 493k, False: 492k]
  |  Branch (324:49): [True: 185k, False: 308k]
  ------------------
  325|   986k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 185k, False: 800k]
  ------------------
  326|   185k|    ++p;
  327|   185k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   185k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|   767k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 650k, False: 116k]
  |  Branch (332:27): [True: 582k, False: 68.5k]
  ------------------
  333|   582k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|   582k|      ++p;
  335|   582k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|   582k|    }
  337|   185k|    exponent = before - p;
  338|   185k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   185k|    digit_count -= exponent;
  340|   185k|  }
  341|   986k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   986k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 986k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   986k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 986k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   986k|  int64_t exp_number = 0;            // explicit exponential part
  351|   986k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 850k, False: 135k]
  ------------------
  352|   986k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 376k, False: 473k]
  ------------------
  353|   986k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 79.3k, False: 297k]
  |  Branch (353:29): [True: 49.6k, False: 247k]
  ------------------
  354|   986k|       ||
  355|   986k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   857k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 857k]
  ------------------
  356|   857k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   857k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   128k|    UC const * location_of_e = p;
  359|   128k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 79.3k, False: 49.6k]
  |  Branch (359:28): [True: 49.6k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   128k|      ++p;
  361|   128k|    }
  362|   128k|    bool neg_exp = false;
  363|   128k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 128k, False: 135]
  |  Branch (363:24): [True: 7.69k, False: 121k]
  ------------------
  364|  7.69k|      neg_exp = true;
  365|  7.69k|      ++p;
  366|   121k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 121k, False: 135]
  |  Branch (366:31): [True: 32.6k, False: 88.4k]
  ------------------
  367|  32.6k|      ++p;
  368|  32.6k|    }
  369|   128k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 185, False: 128k]
  |  Branch (369:24): [True: 495, False: 128k]
  ------------------
  370|    680|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 680]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    680|      p = location_of_e;
  376|   128k|    } else {
  377|   401k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 308k, False: 93.1k]
  |  Branch (377:29): [True: 273k, False: 35.1k]
  ------------------
  378|   273k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   273k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 250k, False: 22.3k]
  ------------------
  380|   250k|          exp_number = 10 * exp_number + digit;
  381|   250k|        }
  382|   273k|        ++p;
  383|   273k|      }
  384|   128k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 7.65k, False: 120k]
  ------------------
  385|   128k|      exponent += exp_number;
  386|   128k|    }
  387|   857k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   857k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 721k, False: 135k]
  |  Branch (389:44): [True: 0, False: 721k]
  ------------------
  390|   857k|  }
  391|   986k|  answer.lastmatch = p;
  392|   986k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   986k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 166k, False: 819k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   166k|    UC const * start = start_digits;
  405|   668k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 667k, False: 1.28k]
  |  Branch (405:32): [True: 493k, False: 173k]
  |  Branch (405:53): [True: 7.80k, False: 165k]
  ------------------
  406|   501k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 493k, False: 7.80k]
  ------------------
  407|   501k|      start++;
  408|   501k|    }
  409|       |
  410|   166k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 161k, False: 5.09k]
  ------------------
  411|   161k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   161k|      i = 0;
  416|   161k|      p = answer.integer.ptr;
  417|   161k|      UC const* int_end = p + answer.integer.len();
  418|   161k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  1.62M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 1.58M, False: 42.0k]
  |  Branch (419:54): [True: 1.46M, False: 119k]
  ------------------
  420|  1.46M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  1.46M|        ++p;
  422|  1.46M|      }
  423|   161k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 42.0k, False: 119k]
  ------------------
  424|  42.0k|        exponent = end_of_integer_part - p + exp_number;
  425|  42.0k|      }
  426|   119k|      else { // We have a value with a fractional component.
  427|   119k|        p = answer.fraction.ptr;
  428|   119k|        UC const* frac_end = p + answer.fraction.len();
  429|  2.11M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 1.99M, False: 119k]
  |  Branch (429:56): [True: 1.99M, False: 0]
  ------------------
  430|  1.99M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  1.99M|          ++p;
  432|  1.99M|        }
  433|   119k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   119k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   161k|    }
  437|   166k|  }
  438|   986k|  answer.exponent = exponent;
  439|   986k|  answer.mantissa = i;
  440|   986k|  return answer;
  441|   986k|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  5.79M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  5.79M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 148k, False: 5.65M]
  |  Branch (36:27): [True: 449k, False: 5.20M]
  ------------------
   37|  5.79M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   185k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|   661k|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 531k, False: 130k]
  |  Branch (249:43): [True: 476k, False: 55.4k]
  ------------------
  250|   476k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|   476k|    p += 8;
  252|   476k|  }
  253|   185k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|   531k|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|   531k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|   531k|     0x8080808080808080));
  172|   531k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  1.21M|uint64_t read8_to_u64(const UC *chars) {
   54|  1.21M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  1.21M|  uint64_t val;
   63|  1.21M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  1.21M|  return val;
   69|  1.21M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|   680k|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|   680k|  const uint64_t mask = 0x000000FF000000FF;
  148|   680k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|   680k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|   680k|  val -= 0x3030303030303030;
  151|   680k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|   680k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|   680k|  return uint32_t(val);
  154|   680k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   204k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   204k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   204k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   204k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   204k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   248k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   248k|  chars_format const fmt = options.format;
  277|   248k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   248k|  parsed_number_string_t<UC> answer;
  280|   248k|  answer.valid = false;
  281|   248k|  answer.too_many_digits = false;
  282|   248k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   248k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 248k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   248k|  UC const * const start_digits = p;
  303|       |
  304|   248k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   521k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 348k, False: 173k]
  |  Branch (306:25): [True: 272k, False: 75.0k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   272k|    i = 10 * i +
  310|   272k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   272k|    ++p;
  312|   272k|  }
  313|   248k|  UC const * const end_of_integer_part = p;
  314|   248k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   248k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   248k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   248k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 248k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   248k|  int64_t exponent = 0;
  324|   248k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 75.0k, False: 173k]
  |  Branch (324:49): [True: 648, False: 74.4k]
  ------------------
  325|   248k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 648, False: 248k]
  ------------------
  326|    648|    ++p;
  327|    648|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|    648|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  3.24k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 2.73k, False: 508]
  |  Branch (332:27): [True: 2.59k, False: 140]
  ------------------
  333|  2.59k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  2.59k|      ++p;
  335|  2.59k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  2.59k|    }
  337|    648|    exponent = before - p;
  338|    648|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|    648|    digit_count -= exponent;
  340|    648|  }
  341|   248k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   248k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 248k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   248k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 248k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   248k|  int64_t exp_number = 0;            // explicit exponential part
  351|   248k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 195k, False: 52.8k]
  ------------------
  352|   248k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 74.5k, False: 121k]
  ------------------
  353|   248k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 107, False: 74.4k]
  |  Branch (353:29): [True: 7.86k, False: 66.5k]
  ------------------
  354|   248k|       ||
  355|   248k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   240k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 240k]
  ------------------
  356|   240k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   240k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  7.97k|    UC const * location_of_e = p;
  359|  7.97k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 107, False: 7.86k]
  |  Branch (359:28): [True: 7.86k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  7.97k|      ++p;
  361|  7.97k|    }
  362|  7.97k|    bool neg_exp = false;
  363|  7.97k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 7.95k, False: 20]
  |  Branch (363:24): [True: 1.83k, False: 6.11k]
  ------------------
  364|  1.83k|      neg_exp = true;
  365|  1.83k|      ++p;
  366|  6.13k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 6.11k, False: 20]
  |  Branch (366:31): [True: 211, False: 5.90k]
  ------------------
  367|    211|      ++p;
  368|    211|    }
  369|  7.97k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 30, False: 7.94k]
  |  Branch (369:24): [True: 340, False: 7.60k]
  ------------------
  370|    370|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 370]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    370|      p = location_of_e;
  376|  7.60k|    } else {
  377|  28.1k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 22.8k, False: 5.31k]
  |  Branch (377:29): [True: 20.5k, False: 2.28k]
  ------------------
  378|  20.5k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  20.5k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 19.5k, False: 964]
  ------------------
  380|  19.5k|          exp_number = 10 * exp_number + digit;
  381|  19.5k|        }
  382|  20.5k|        ++p;
  383|  20.5k|      }
  384|  7.60k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 1.81k, False: 5.78k]
  ------------------
  385|  7.60k|      exponent += exp_number;
  386|  7.60k|    }
  387|   240k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   240k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 187k, False: 52.8k]
  |  Branch (389:44): [True: 0, False: 187k]
  ------------------
  390|   240k|  }
  391|   248k|  answer.lastmatch = p;
  392|   248k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   248k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 216, False: 248k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|    216|    UC const * start = start_digits;
  405|    216|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 216, False: 0]
  |  Branch (405:32): [True: 0, False: 216]
  |  Branch (405:53): [True: 0, False: 216]
  ------------------
  406|      0|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 0, False: 0]
  ------------------
  407|      0|      start++;
  408|      0|    }
  409|       |
  410|    216|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 216, False: 0]
  ------------------
  411|    216|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|    216|      i = 0;
  416|    216|      p = answer.integer.ptr;
  417|    216|      UC const* int_end = p + answer.integer.len();
  418|    216|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  3.81k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 3.67k, False: 144]
  |  Branch (419:54): [True: 3.60k, False: 72]
  ------------------
  420|  3.60k|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  3.60k|        ++p;
  422|  3.60k|      }
  423|    216|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 144, False: 72]
  ------------------
  424|    144|        exponent = end_of_integer_part - p + exp_number;
  425|    144|      }
  426|     72|      else { // We have a value with a fractional component.
  427|     72|        p = answer.fraction.ptr;
  428|     72|        UC const* frac_end = p + answer.fraction.len();
  429|    576|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 504, False: 72]
  |  Branch (429:56): [True: 504, False: 0]
  ------------------
  430|    504|          i = i * 10 + uint64_t(*p - UC('0'));
  431|    504|          ++p;
  432|    504|        }
  433|     72|        exponent = answer.fraction.ptr - p + exp_number;
  434|     72|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|    216|    }
  437|    216|  }
  438|   248k|  answer.exponent = exponent;
  439|   248k|  answer.mantissa = i;
  440|   248k|  return answer;
  441|   248k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|   381k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   381k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 76.7k, False: 304k]
  |  Branch (36:27): [True: 1.04k, False: 303k]
  ------------------
   37|   381k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiLi0EEEvRPKT_S3_Rm:
  237|    648|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|    648|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|    648|    return;
  240|    648|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}

_ZN10fast_float6bigintC2Ev:
  412|  56.6k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   121k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   186k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   186k|    return small_mul(vec, y);
  565|   186k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   273k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   273k|  limb carry = 0;
  284|  1.05M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 778k, False: 273k]
  ------------------
  285|   778k|    vec[index] = scalar_mul(vec[index], y, carry);
  286|   778k|  }
  287|   273k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 154k, False: 118k]
  ------------------
  288|   154k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   154k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
  289|   154k|  }
  290|   273k|  return true;
  291|   273k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  2.06M|  constexpr size_t len() const noexcept {
   77|  2.06M|    return length;
   78|  2.06M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|   778k|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|   778k|#ifdef FASTFLOAT_64BIT_LIMB
  231|   778k|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|   778k|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|   778k|  carry = limb(z >> limb_bits);
  235|   778k|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|   778k|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  2.16M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  2.16M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  2.16M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  2.16M|    return data[index];
   60|  2.16M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   222k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   222k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 222k, False: 0]
  ------------------
   93|   222k|      push_unchecked(value);
   94|   222k|      return true;
   95|   222k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   222k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   255k|  constexpr size_t capacity() const noexcept {
   83|   255k|    return size;
   84|   255k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   275k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   275k|    data[length] = value;
   88|   275k|    length++;
   89|   275k|  }
_ZN10fast_float6bigint3addEm:
  567|   186k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   186k|    return small_add(vec, y);
  569|   186k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   186k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   186k|  return small_add_from(vec, y, 0);
  277|   186k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   186k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   186k|  size_t index = start;
  259|   186k|  limb carry = y;
  260|   186k|  bool overflow;
  261|   284k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 154k, False: 130k]
  |  Branch (261:24): [True: 98.1k, False: 56.6k]
  ------------------
  262|  98.1k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|  98.1k|    carry = limb(overflow);
  264|  98.1k|    index += 1;
  265|  98.1k|  }
  266|   186k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 56.6k, False: 130k]
  ------------------
  267|  56.6k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  56.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 56.6k]
  |  |  ------------------
  ------------------
  268|  56.6k|  }
  269|   186k|  return true;
  270|   186k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   221k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   221k|  limb z;
  211|       |// gcc and clang
  212|   221k|#if defined(__has_builtin)
  213|   221k|  #if __has_builtin(__builtin_add_overflow)
  214|   221k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   221k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   221k|      return z;
  217|   221k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   221k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  4.23k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  4.23k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  4.23k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 4.23k]
  |  |  ------------------
  ------------------
  611|  4.23k|    return pow2(exp);
  612|  4.23k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  56.6k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  56.6k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  56.6k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  59.6k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 3.00k, False: 56.6k]
  ------------------
  582|  3.00k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  3.00k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.00k]
  |  |  ------------------
  ------------------
  583|  3.00k|      exp -= large_step;
  584|  3.00k|    }
  585|  56.6k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  56.6k|    uint32_t small_step = 27;
  587|  56.6k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|  78.8k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 22.2k, False: 56.6k]
  ------------------
  593|  22.2k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  22.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 22.2k]
  |  |  ------------------
  ------------------
  594|  22.2k|      exp -= small_step;
  595|  22.2k|    }
  596|  56.6k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 49.3k, False: 7.26k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  49.3k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  49.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 49.3k]
  |  |  ------------------
  ------------------
  601|  49.3k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  49.3k|      );
  603|  49.3k|    }
  604|       |
  605|  56.6k|    return true;
  606|  56.6k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  3.00k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  3.00k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 3.00k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  3.00k|  } else {
  368|  3.00k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  3.00k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.00k]
  |  |  ------------------
  ------------------
  369|  3.00k|  }
  370|  3.00k|  return true;
  371|  3.00k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  3.00k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  3.00k|  limb_span xs = limb_span(x.data, x.len());
  337|  3.00k|  stackvec<size> z(xs);
  338|  3.00k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  3.00k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 3.00k, False: 0]
  ------------------
  341|  3.00k|    limb y0 = y[0];
  342|  3.00k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  3.00k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.00k]
  |  |  ------------------
  ------------------
  343|  15.0k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 12.0k, False: 3.00k]
  ------------------
  344|  12.0k|      limb yi = y[index];
  345|  12.0k|      stackvec<size> zi;
  346|  12.0k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 12.0k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  12.0k|        zi.set_len(0);
  349|  12.0k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  12.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.0k]
  |  |  ------------------
  ------------------
  350|  12.0k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  12.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.0k]
  |  |  ------------------
  ------------------
  351|  12.0k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  12.0k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  12.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 12.0k]
  |  |  ------------------
  ------------------
  353|  12.0k|      }
  354|  12.0k|    }
  355|  3.00k|  }
  356|       |
  357|  3.00k|  x.normalize();
  358|  3.00k|  return true;
  359|  3.00k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  3.00k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  3.00k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  3.00k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  3.00k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|  44.4k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|  44.4k|    length = uint16_t(len);
   75|  44.4k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  15.0k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  15.0k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 15.0k, False: 0]
  ------------------
  108|  15.0k|      extend_unchecked(s);
  109|  15.0k|      return true;
  110|  15.0k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  15.0k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  15.0k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  15.0k|    limb* ptr = data + length;
  102|  15.0k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  15.0k|    set_len(len() + s.len());
  104|  15.0k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  12.0k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  12.0k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 12.0k]
  |  Branch (300:26): [True: 11.8k, False: 182]
  ------------------
  301|  11.8k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  11.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 11.8k]
  |  |  ------------------
  ------------------
  302|  11.8k|  }
  303|       |
  304|  12.0k|  bool carry = false;
  305|   101k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 89.0k, False: 12.0k]
  ------------------
  306|  89.0k|    limb xi = x[index + start];
  307|  89.0k|    limb yi = y[index];
  308|  89.0k|    bool c1 = false;
  309|  89.0k|    bool c2 = false;
  310|  89.0k|    xi = scalar_add(xi, yi, c1);
  311|  89.0k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 33.8k, False: 55.1k]
  ------------------
  312|  33.8k|      xi = scalar_add(xi, 1, c2);
  313|  33.8k|    }
  314|  89.0k|    x[index + start] = xi;
  315|  89.0k|    carry = c1 | c2;
  316|  89.0k|  }
  317|       |
  318|       |  // handle overflow
  319|  12.0k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 12.0k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  12.0k|  return true;
  323|  12.0k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  11.8k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  11.8k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 11.8k]
  ------------------
  132|      0|      return false;
  133|  11.8k|    } else {
  134|  11.8k|      resize_unchecked(new_len, value);
  135|  11.8k|      return true;
  136|  11.8k|    }
  137|  11.8k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  11.8k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  11.8k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 11.8k, False: 0]
  ------------------
  120|  11.8k|      size_t count = new_len - len();
  121|  11.8k|      limb* first = data + len();
  122|  11.8k|      limb* last = first + count;
  123|  11.8k|      ::std::fill(first, last, value);
  124|  11.8k|      set_len(new_len);
  125|  11.8k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  11.8k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  55.3k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  55.3k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 55.3k, False: 0]
  |  Branch (152:25): [True: 0, False: 55.3k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  55.3k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|  67.3k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|  67.3k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  67.3k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|  67.3k|    size_t rindex = length - index - 1;
   69|  67.3k|    return data[rindex];
   70|  67.3k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  56.5k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  56.5k|    return shl(exp);
  574|  56.5k|  }
_ZN10fast_float6bigint3shlEm:
  530|  56.5k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  56.5k|    size_t rem = n % limb_bits;
  532|  56.5k|    size_t div = n / limb_bits;
  533|  56.5k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 52.3k, False: 4.15k]
  ------------------
  534|  52.3k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  52.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 52.3k]
  |  |  ------------------
  ------------------
  535|  52.3k|    }
  536|  56.5k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 5.56k, False: 50.9k]
  ------------------
  537|  5.56k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  5.56k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 5.56k]
  |  |  ------------------
  ------------------
  538|  5.56k|    }
  539|  56.5k|    return true;
  540|  56.5k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  52.3k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  52.3k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  52.3k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  52.3k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  52.3k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  52.3k|    size_t shl = n;
  493|  52.3k|    size_t shr = limb_bits - shl;
  494|  52.3k|    limb prev = 0;
  495|   168k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 116k, False: 52.3k]
  ------------------
  496|   116k|      limb xi = vec[index];
  497|   116k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   116k|      prev = xi;
  499|   116k|    }
  500|       |
  501|  52.3k|    limb carry = prev >> shr;
  502|  52.3k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 11.8k, False: 40.5k]
  ------------------
  503|  11.8k|      return vec.try_push(carry);
  504|  11.8k|    }
  505|  40.5k|    return true;
  506|  52.3k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  5.56k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  5.56k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  5.56k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  5.56k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 5.56k]
  ------------------
  512|      0|      return false;
  513|  5.56k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 5.56k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  5.56k|      limb* dst = vec.data + n;
  516|  5.56k|      const limb* src = vec.data;
  517|  5.56k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  5.56k|      limb* first = vec.data;
  520|  5.56k|      limb* last = first + n;
  521|  5.56k|      ::std::fill(first, last, 0);
  522|  5.56k|      vec.set_len(n + vec.len());
  523|  5.56k|      return true;
  524|  5.56k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  5.56k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  9.79k|  constexpr bool is_empty() const noexcept {
   80|  9.79k|    return length == 0;
   81|  9.79k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  4.23k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  4.23k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  4.23k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 4.23k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  4.23k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 1.22k, False: 3.00k]
  ------------------
  435|  1.22k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  3.00k|    } else {
  437|  3.00k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  3.00k|      truncated |= vec.nonzero(2);
  439|  3.00k|      return result;
  440|  3.00k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  4.23k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  1.22k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  1.22k|  truncated = false;
  167|  1.22k|  int shl = leading_zeroes(r0);
  168|  1.22k|  return r0 << shl;
  169|  1.22k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  3.00k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  3.00k|  int shl = leading_zeroes(r0);
  174|  3.00k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 36, False: 2.96k]
  ------------------
  175|     36|    truncated = r1 != 0;
  176|     36|    return r0;
  177|  2.96k|  } else {
  178|  2.96k|    int shr = 64 - shl;
  179|  2.96k|    truncated = (r1 << shl) != 0;
  180|  2.96k|    return (r0 << shl) | (r1 >> shr);
  181|  2.96k|  }
  182|  3.00k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  3.00k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  3.04k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 479, False: 2.56k]
  ------------------
  143|    479|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 441, False: 38]
  ------------------
  144|    441|        return true;
  145|    441|      }
  146|     38|      index++;
  147|     38|    }
  148|  2.56k|    return false;
  149|  3.00k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  4.23k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  4.23k|    int lz = ctlz();
  560|  4.23k|    return int(limb_bits * vec.len()) - lz;
  561|  4.23k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  4.23k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  4.23k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 4.23k]
  ------------------
  545|      0|      return 0;
  546|  4.23k|    } else {
  547|  4.23k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  4.23k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  4.23k|    }
  555|  4.23k|  }
_ZN10fast_float6bigintC2Em:
  418|  52.3k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  52.3k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  52.3k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  52.3k|    vec.normalize();
  426|  52.3k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  52.3k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  52.3k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 52.3k]
  ------------------
  464|      0|      return 1;
  465|  52.3k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 52.3k]
  ------------------
  466|      0|      return -1;
  467|  52.3k|    } else {
  468|   102k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 98.4k, False: 3.63k]
  ------------------
  469|  98.4k|        limb xi = vec[index - 1];
  470|  98.4k|        limb yi = other.vec[index - 1];
  471|  98.4k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 12.3k, False: 86.0k]
  ------------------
  472|  12.3k|          return 1;
  473|  86.0k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 36.3k, False: 49.6k]
  ------------------
  474|  36.3k|          return -1;
  475|  36.3k|        }
  476|  98.4k|      }
  477|  3.63k|      return 0;
  478|  52.3k|    }
  479|  52.3k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   196k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   196k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   196k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   196k|    return data[index];
   64|   196k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   214k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   214k|  adjusted_mantissa answer;
   96|   214k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 3.54k, False: 210k]
  |  Branch (96:19): [True: 1.03k, False: 209k]
  ------------------
   97|  4.57k|    answer.power2 = 0;
   98|  4.57k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  4.57k|    return answer;
  101|  4.57k|  }
  102|   209k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 6.49k, False: 202k]
  ------------------
  103|       |    // we want to get infinity:
  104|  6.49k|    answer.power2 = binary::infinite_power();
  105|  6.49k|    answer.mantissa = 0;
  106|  6.49k|    return answer;
  107|  6.49k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   202k|  int lz = leading_zeroes(w);
  112|   202k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   202k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   202k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   202k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   202k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   202k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 888, False: 202k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|    888|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 124, False: 764]
  ------------------
  137|    124|      answer.power2 = 0;
  138|    124|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|    124|      return answer;
  141|    124|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    764|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    764|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    764|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    764|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 764, False: 0]
  ------------------
  156|    764|    return answer;
  157|    888|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   202k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 69.4k, False: 132k]
  |  Branch (162:30): [True: 67.4k, False: 1.96k]
  |  Branch (162:77): [True: 61.8k, False: 5.63k]
  ------------------
  163|   202k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 7.90k, False: 53.9k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  7.90k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 3.82k, False: 4.08k]
  ------------------
  168|  3.82k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  3.82k|    }
  170|  7.90k|  }
  171|       |
  172|   202k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   202k|  answer.mantissa >>= 1;
  174|   202k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 13.9k, False: 188k]
  ------------------
  175|  13.9k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  13.9k|    answer.power2++; // undo previous addition
  177|  13.9k|  }
  178|       |
  179|   202k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   202k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 1.03k, False: 201k]
  ------------------
  181|  1.03k|    answer.power2 = binary::infinite_power();
  182|  1.03k|    answer.mantissa = 0;
  183|  1.03k|  }
  184|   202k|  return answer;
  185|   202k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   226k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   226k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   226k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   226k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   226k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   226k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   226k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 44.0k, False: 182k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  44.0k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  44.0k|    firstproduct.low += secondproduct.high;
   35|  44.0k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 31.7k, False: 12.3k]
  ------------------
   36|  31.7k|      firstproduct.high++;
   37|  31.7k|    }
   38|  44.0k|  }
   39|   226k|  return firstproduct;
   40|   226k|}
_ZN10fast_float6detail5powerEi:
   58|   450k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   450k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   450k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  23.4k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  23.4k|  int lz = leading_zeroes(w);
   82|  23.4k|  w <<= lz;
   83|  23.4k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  23.4k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  23.4k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  23.4k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  23.4k|  int hilz = int(w >> 63) ^ 1;
   69|  23.4k|  adjusted_mantissa answer;
   70|  23.4k|  answer.mantissa = w << hilz;
   71|  23.4k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  23.4k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  23.4k|  return answer;
   74|  23.4k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   197k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   197k|  adjusted_mantissa answer;
   96|   197k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 3.21k, False: 193k]
  |  Branch (96:19): [True: 272, False: 193k]
  ------------------
   97|  3.48k|    answer.power2 = 0;
   98|  3.48k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  3.48k|    return answer;
  101|  3.48k|  }
  102|   193k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 3.26k, False: 190k]
  ------------------
  103|       |    // we want to get infinity:
  104|  3.26k|    answer.power2 = binary::infinite_power();
  105|  3.26k|    answer.mantissa = 0;
  106|  3.26k|    return answer;
  107|  3.26k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   190k|  int lz = leading_zeroes(w);
  112|   190k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   190k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   190k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   190k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   190k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   190k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 3.39k, False: 187k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  3.39k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 54, False: 3.34k]
  ------------------
  137|     54|      answer.power2 = 0;
  138|     54|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     54|      return answer;
  141|     54|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  3.34k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  3.34k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  3.34k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  3.34k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 3.34k, False: 0]
  ------------------
  156|  3.34k|    return answer;
  157|  3.39k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   187k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 56.7k, False: 130k]
  |  Branch (162:30): [True: 30.7k, False: 26.0k]
  |  Branch (162:77): [True: 27.4k, False: 3.25k]
  ------------------
  163|   187k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 5.18k, False: 22.2k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  5.18k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 4.15k, False: 1.02k]
  ------------------
  168|  4.15k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  4.15k|    }
  170|  5.18k|  }
  171|       |
  172|   187k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   187k|  answer.mantissa >>= 1;
  174|   187k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 13.5k, False: 173k]
  ------------------
  175|  13.5k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  13.5k|    answer.power2++; // undo previous addition
  177|  13.5k|  }
  178|       |
  179|   187k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   187k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 264, False: 186k]
  ------------------
  181|    264|    answer.power2 = binary::infinite_power();
  182|    264|    answer.mantissa = 0;
  183|    264|  }
  184|   187k|  return answer;
  185|   190k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   223k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   223k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   223k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   223k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   223k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   223k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   223k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 90.3k, False: 133k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  90.3k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  90.3k|    firstproduct.low += secondproduct.high;
   35|  90.3k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 28.6k, False: 61.6k]
  ------------------
   36|  28.6k|      firstproduct.high++;
   37|  28.6k|    }
   38|  90.3k|  }
   39|   223k|  return firstproduct;
   40|   223k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  33.1k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  33.1k|  int lz = leading_zeroes(w);
   82|  33.1k|  w <<= lz;
   83|  33.1k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  33.1k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  33.1k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  33.1k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  33.1k|  int hilz = int(w >> 63) ^ 1;
   69|  33.1k|  adjusted_mantissa answer;
   70|  33.1k|  answer.mantissa = w << hilz;
   71|  33.1k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  33.1k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  33.1k|  return answer;
   74|  33.1k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  23.4k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  23.4k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  23.4k|  int32_t sci_exp = scientific_exponent(num);
  411|  23.4k|  size_t max_digits = binary_format<T>::max_digits();
  412|  23.4k|  size_t digits = 0;
  413|  23.4k|  bigint bigmant;
  414|  23.4k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  23.4k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  23.4k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 534, False: 22.8k]
  ------------------
  418|    534|    return positive_digit_comp<T>(bigmant, exponent);
  419|  22.8k|  } else {
  420|  22.8k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  22.8k|  }
  422|  23.4k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  56.6k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  56.6k|  uint64_t mantissa = num.mantissa;
   30|  56.6k|  int32_t exponent = int32_t(num.exponent);
   31|   283k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 226k, False: 56.6k]
  ------------------
   32|   226k|    mantissa /= 10000;
   33|   226k|    exponent += 4;
   34|   226k|  }
   35|   113k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 56.6k, False: 56.6k]
  ------------------
   36|  56.6k|    mantissa /= 100;
   37|  56.6k|    exponent += 2;
   38|  56.6k|  }
   39|  56.6k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 56.6k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  56.6k|  return exponent;
   44|  56.6k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  56.6k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  56.6k|  size_t counter = 0;
  245|  56.6k|  digits = 0;
  246|  56.6k|  limb value = 0;
  247|  56.6k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  56.6k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  56.6k|  UC const * p = num.integer.ptr;
  255|  56.6k|  UC const * pend = p + num.integer.len();
  256|  56.6k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   127k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 70.7k, False: 56.3k]
  ------------------
  259|   119k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 63.1k, False: 56.6k]
  |  Branch (259:45): [True: 49.2k, False: 13.8k]
  |  Branch (259:70): [True: 49.0k, False: 281]
  ------------------
  260|  49.0k|      parse_eight_digits(p, value, counter, digits);
  261|  49.0k|    }
  262|   220k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 204k, False: 16.3k]
  |  Branch (262:30): [True: 150k, False: 54.1k]
  |  Branch (262:43): [True: 149k, False: 281]
  ------------------
  263|   149k|      parse_one_digit(p, value, counter, digits);
  264|   149k|    }
  265|  70.7k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 281, False: 70.4k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    281|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    281|      bool truncated = is_truncated(p, pend);
  269|    281|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 249, False: 32]
  ------------------
  270|    249|        truncated |= is_truncated(num.fraction);
  271|    249|      }
  272|    281|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 179, False: 102]
  ------------------
  273|    179|        round_up_bigint(result, digits);
  274|    179|      }
  275|    281|      return;
  276|  70.4k|    } else {
  277|  70.4k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  70.4k|      counter = 0;
  279|  70.4k|      value = 0;
  280|  70.4k|    }
  281|  70.7k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  56.3k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 52.7k, False: 3.56k]
  ------------------
  285|  52.7k|    p = num.fraction.ptr;
  286|  52.7k|    pend = p + num.fraction.len();
  287|  52.7k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 2.21k, False: 50.5k]
  ------------------
  288|  2.21k|      skip_zeros(p, pend);
  289|  2.21k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   164k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 114k, False: 50.2k]
  ------------------
  292|   269k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 205k, False: 63.8k]
  |  Branch (292:47): [True: 156k, False: 49.1k]
  |  Branch (292:72): [True: 155k, False: 1.16k]
  ------------------
  293|   155k|        parse_eight_digits(p, value, counter, digits);
  294|   155k|      }
  295|   476k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 412k, False: 63.6k]
  |  Branch (295:32): [True: 363k, False: 48.5k]
  |  Branch (295:45): [True: 362k, False: 1.92k]
  ------------------
  296|   362k|        parse_one_digit(p, value, counter, digits);
  297|   362k|      }
  298|   114k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 2.46k, False: 111k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  2.46k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  2.46k|        bool truncated = is_truncated(p, pend);
  302|  2.46k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 1.70k, False: 762]
  ------------------
  303|  1.70k|          round_up_bigint(result, digits);
  304|  1.70k|        }
  305|  2.46k|        return;
  306|   111k|      } else {
  307|   111k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   111k|        counter = 0;
  309|   111k|        value = 0;
  310|   111k|      }
  311|   114k|    }
  312|  52.7k|  }
  313|       |
  314|  53.8k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 53.8k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  53.8k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  58.8k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  58.8k|  uint64_t val;
  161|  70.4k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 33.2k, False: 37.1k]
  ------------------
  162|  33.2k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|  33.2k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 21.6k, False: 11.6k]
  ------------------
  164|  21.6k|      break;
  165|  21.6k|    }
  166|  11.6k|    first += int_cmp_len<UC>();
  167|  11.6k|  }
  168|   112k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 110k, False: 2.21k]
  ------------------
  169|   110k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 56.6k, False: 53.9k]
  ------------------
  170|  56.6k|      break;
  171|  56.6k|    }
  172|  53.9k|    first++;
  173|  53.9k|  }
  174|  58.8k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   204k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   204k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   204k|  p += 8;
  210|   204k|  counter += 8;
  211|   204k|  count += 8;
  212|   204k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   511k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   511k|  value = value * 10 + limb(*p - UC('0'));
  218|   511k|  p++;
  219|   511k|  counter++;
  220|   511k|  count++;
  221|   511k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   186k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   186k|  big.mul(power);
  226|   186k|  big.add(value);
  227|   186k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  2.99k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  2.99k|  uint64_t val;
  183|  7.03k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 5.01k, False: 2.02k]
  ------------------
  184|  5.01k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  5.01k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 973, False: 4.03k]
  ------------------
  186|    973|      return true;
  187|    973|    }
  188|  4.03k|    first += int_cmp_len<UC>();
  189|  4.03k|  }
  190|  3.51k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 2.48k, False: 1.03k]
  ------------------
  191|  2.48k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 996, False: 1.49k]
  ------------------
  192|    996|      return true;
  193|    996|    }
  194|  1.49k|    ++first;
  195|  1.49k|  }
  196|  1.03k|  return false;
  197|  2.02k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    249|bool is_truncated(span<const UC> s) noexcept {
  201|    249|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    249|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  1.88k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  1.88k|  add_native(big, 10, 1);
  234|  1.88k|  count++;
  235|  1.88k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    534|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    534|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    534|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    534|  adjusted_mantissa answer;
  324|    534|  bool truncated;
  325|    534|  answer.mantissa = bigmant.hi64(truncated);
  326|    534|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    534|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    534|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    534|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    534|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    534|    });
  333|    534|  });
  334|       |
  335|    534|  return answer;
  336|    534|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    534|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    534|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    534|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 534]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    534|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    534|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 534]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    534|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    534|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 534]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    534|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    534|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    534|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    534|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    534|    });
  333|    534|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    534|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    534|  const uint64_t mask
  125|    534|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 534]
  ------------------
  126|    534|    ? UINT64_MAX
  127|    534|    : (uint64_t(1) << shift) - 1;
  128|    534|  const uint64_t halfway
  129|    534|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 534]
  ------------------
  130|    534|    ? 0
  131|    534|    : uint64_t(1) << (shift - 1);
  132|    534|  uint64_t truncated_bits = am.mantissa & mask;
  133|    534|  bool is_above = truncated_bits > halfway;
  134|    534|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    534|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 534]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    534|  } else {
  140|    534|    am.mantissa >>= shift;
  141|    534|  }
  142|    534|  am.power2 += shift;
  143|       |
  144|    534|  bool is_odd = (am.mantissa & 1) == 1;
  145|    534|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    534|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    534|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    534|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 74, False: 460]
  |  Branch (331:27): [True: 368, False: 92]
  |  Branch (331:41): [True: 60, False: 308]
  |  Branch (331:56): [True: 56, False: 344]
  |  Branch (331:66): [True: 32, False: 24]
  ------------------
  332|    534|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  22.8k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  22.8k|  bigint& real_digits = bigmant;
  347|  22.8k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  22.8k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  22.8k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  22.8k|  T b;
  354|  22.8k|  to_float(false, am_b, b);
  355|  22.8k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  22.8k|  bigint theor_digits(theor.mantissa);
  357|  22.8k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  22.8k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  22.8k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  22.8k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 22.8k, False: 0]
  ------------------
  363|  22.8k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  22.8k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  22.8k|  }
  365|  22.8k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 22.8k, False: 0]
  ------------------
  366|  22.8k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  22.8k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  22.8k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  22.8k|  int ord = real_digits.compare(theor_digits);
  373|  22.8k|  adjusted_mantissa answer = am;
  374|  22.8k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  22.8k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  22.8k|      (void)_;  // not needed, since we've done our comparison
  377|  22.8k|      (void)__; // not needed, since we've done our comparison
  378|  22.8k|      if (ord > 0) {
  379|  22.8k|        return true;
  380|  22.8k|      } else if (ord < 0) {
  381|  22.8k|        return false;
  382|  22.8k|      } else {
  383|  22.8k|        return is_odd;
  384|  22.8k|      }
  385|  22.8k|    });
  386|  22.8k|  });
  387|       |
  388|  22.8k|  return answer;
  389|  22.8k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  22.8k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  22.8k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  22.8k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 22.8k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  22.8k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  22.8k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 22.8k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  22.8k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  22.8k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 22.8k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  22.8k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  22.8k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  52.3k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  52.3k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 52.3k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  52.3k|  } else {
  153|  52.3k|    am.mantissa >>= shift;
  154|  52.3k|  }
  155|  52.3k|  am.power2 += shift;
  156|  52.3k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  22.8k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  22.8k|  adjusted_mantissa am = to_extended(value);
   84|  22.8k|  am.mantissa <<= 1;
   85|  22.8k|  am.mantissa += 1;
   86|  22.8k|  am.power2 -= 1;
   87|  22.8k|  return am;
   88|  22.8k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  22.8k|adjusted_mantissa to_extended(T value) noexcept {
   50|  22.8k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  22.8k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  22.8k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  22.8k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  22.8k|  adjusted_mantissa am;
   56|  22.8k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  22.8k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  22.8k|  ::memcpy(&bits, &value, sizeof(T));
   62|  22.8k|#endif
   63|  22.8k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 22.8k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  22.8k|  } else {
   68|       |    // normal
   69|  22.8k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  22.8k|    am.power2 -= bias;
   71|  22.8k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  22.8k|  }
   73|       |
   74|  22.8k|  return am;
   75|  22.8k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  22.8k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  22.8k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  22.8k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 22.8k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  22.8k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  22.8k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 22.8k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  22.8k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  22.8k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 22.8k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  22.8k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  22.8k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  22.8k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  22.8k|      (void)_;  // not needed, since we've done our comparison
  377|  22.8k|      (void)__; // not needed, since we've done our comparison
  378|  22.8k|      if (ord > 0) {
  379|  22.8k|        return true;
  380|  22.8k|      } else if (ord < 0) {
  381|  22.8k|        return false;
  382|  22.8k|      } else {
  383|  22.8k|        return is_odd;
  384|  22.8k|      }
  385|  22.8k|    });
  386|  22.8k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  22.8k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  22.8k|  const uint64_t mask
  125|  22.8k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 22.8k]
  ------------------
  126|  22.8k|    ? UINT64_MAX
  127|  22.8k|    : (uint64_t(1) << shift) - 1;
  128|  22.8k|  const uint64_t halfway
  129|  22.8k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 22.8k]
  ------------------
  130|  22.8k|    ? 0
  131|  22.8k|    : uint64_t(1) << (shift - 1);
  132|  22.8k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  22.8k|  bool is_above = truncated_bits > halfway;
  134|  22.8k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  22.8k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 22.8k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  22.8k|  } else {
  140|  22.8k|    am.mantissa >>= shift;
  141|  22.8k|  }
  142|  22.8k|  am.power2 += shift;
  143|       |
  144|  22.8k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  22.8k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  22.8k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  22.8k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  22.8k|      (void)_;  // not needed, since we've done our comparison
  377|  22.8k|      (void)__; // not needed, since we've done our comparison
  378|  22.8k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 210, False: 22.6k]
  ------------------
  379|    210|        return true;
  380|  22.6k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 19.5k, False: 3.14k]
  ------------------
  381|  19.5k|        return false;
  382|  19.5k|      } else {
  383|  3.14k|        return is_odd;
  384|  3.14k|      }
  385|  22.8k|    });
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  33.1k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  33.1k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  33.1k|  int32_t sci_exp = scientific_exponent(num);
  411|  33.1k|  size_t max_digits = binary_format<T>::max_digits();
  412|  33.1k|  size_t digits = 0;
  413|  33.1k|  bigint bigmant;
  414|  33.1k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  33.1k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  33.1k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 3.69k, False: 29.4k]
  ------------------
  418|  3.69k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  29.4k|  } else {
  420|  29.4k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  29.4k|  }
  422|  33.1k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  3.69k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  3.69k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  3.69k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  3.69k|  adjusted_mantissa answer;
  324|  3.69k|  bool truncated;
  325|  3.69k|  answer.mantissa = bigmant.hi64(truncated);
  326|  3.69k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  3.69k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  3.69k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  3.69k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  3.69k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  3.69k|    });
  333|  3.69k|  });
  334|       |
  335|  3.69k|  return answer;
  336|  3.69k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  3.69k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  3.69k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  3.69k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 3.69k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  3.69k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  3.69k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 690, False: 3.00k]
  ------------------
  109|    690|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    690|    am.power2++;
  111|    690|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  3.69k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  3.69k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 3.69k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  3.69k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  3.69k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  3.69k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  3.69k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  3.69k|    });
  333|  3.69k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  3.69k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  3.69k|  const uint64_t mask
  125|  3.69k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 3.69k]
  ------------------
  126|  3.69k|    ? UINT64_MAX
  127|  3.69k|    : (uint64_t(1) << shift) - 1;
  128|  3.69k|  const uint64_t halfway
  129|  3.69k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 3.69k]
  ------------------
  130|  3.69k|    ? 0
  131|  3.69k|    : uint64_t(1) << (shift - 1);
  132|  3.69k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  3.69k|  bool is_above = truncated_bits > halfway;
  134|  3.69k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  3.69k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 3.69k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  3.69k|  } else {
  140|  3.69k|    am.mantissa >>= shift;
  141|  3.69k|  }
  142|  3.69k|  am.power2 += shift;
  143|       |
  144|  3.69k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  3.69k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  3.69k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  3.69k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  3.69k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 748, False: 2.95k]
  |  Branch (331:27): [True: 2.37k, False: 577]
  |  Branch (331:41): [True: 677, False: 1.69k]
  |  Branch (331:56): [True: 287, False: 1.98k]
  |  Branch (331:66): [True: 60, False: 227]
  ------------------
  332|  3.69k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  29.4k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  29.4k|  bigint& real_digits = bigmant;
  347|  29.4k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  29.4k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  29.4k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  29.4k|  T b;
  354|  29.4k|  to_float(false, am_b, b);
  355|  29.4k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  29.4k|  bigint theor_digits(theor.mantissa);
  357|  29.4k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  29.4k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  29.4k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  29.4k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 29.4k, False: 0]
  ------------------
  363|  29.4k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  29.4k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  29.4k|  }
  365|  29.4k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 2.55k, False: 26.9k]
  ------------------
  366|  2.55k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  2.55k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  26.9k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 26.8k, False: 74]
  ------------------
  368|  26.8k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  26.8k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  26.8k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  29.4k|  int ord = real_digits.compare(theor_digits);
  373|  29.4k|  adjusted_mantissa answer = am;
  374|  29.4k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  29.4k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  29.4k|      (void)_;  // not needed, since we've done our comparison
  377|  29.4k|      (void)__; // not needed, since we've done our comparison
  378|  29.4k|      if (ord > 0) {
  379|  29.4k|        return true;
  380|  29.4k|      } else if (ord < 0) {
  381|  29.4k|        return false;
  382|  29.4k|      } else {
  383|  29.4k|        return is_odd;
  384|  29.4k|      }
  385|  29.4k|    });
  386|  29.4k|  });
  387|       |
  388|  29.4k|  return answer;
  389|  29.4k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  29.4k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  29.4k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  29.4k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 106, False: 29.3k]
  ------------------
   96|       |    // have a denormal float
   97|    106|    int32_t shift = -am.power2 + 1;
   98|    106|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    106|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 106, False: 0]
  ------------------
  101|    106|    return;
  102|    106|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  29.3k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  29.3k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 29.3k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  29.3k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  29.3k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 29.3k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  29.3k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  29.4k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  29.4k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  29.4k|  adjusted_mantissa am = to_extended(value);
   84|  29.4k|  am.mantissa <<= 1;
   85|  29.4k|  am.mantissa += 1;
   86|  29.4k|  am.power2 -= 1;
   87|  29.4k|  return am;
   88|  29.4k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  29.4k|adjusted_mantissa to_extended(T value) noexcept {
   50|  29.4k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  29.4k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  29.4k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  29.4k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  29.4k|  adjusted_mantissa am;
   56|  29.4k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  29.4k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  29.4k|  ::memcpy(&bits, &value, sizeof(T));
   62|  29.4k|#endif
   63|  29.4k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 106, False: 29.3k]
  ------------------
   64|       |    // denormal
   65|    106|    am.power2 = 1 - bias;
   66|    106|    am.mantissa = bits & mantissa_mask;
   67|  29.3k|  } else {
   68|       |    // normal
   69|  29.3k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  29.3k|    am.power2 -= bias;
   71|  29.3k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  29.3k|  }
   73|       |
   74|  29.4k|  return am;
   75|  29.4k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  29.4k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  29.4k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  29.4k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 106, False: 29.3k]
  ------------------
   96|       |    // have a denormal float
   97|    106|    int32_t shift = -am.power2 + 1;
   98|    106|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    106|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 106, False: 0]
  ------------------
  101|    106|    return;
  102|    106|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  29.3k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  29.3k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 90, False: 29.2k]
  ------------------
  109|     90|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|     90|    am.power2++;
  111|     90|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  29.3k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  29.3k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 29.3k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  29.3k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  29.4k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  29.4k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  29.4k|      (void)_;  // not needed, since we've done our comparison
  377|  29.4k|      (void)__; // not needed, since we've done our comparison
  378|  29.4k|      if (ord > 0) {
  379|  29.4k|        return true;
  380|  29.4k|      } else if (ord < 0) {
  381|  29.4k|        return false;
  382|  29.4k|      } else {
  383|  29.4k|        return is_odd;
  384|  29.4k|      }
  385|  29.4k|    });
  386|  29.4k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  29.4k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  29.4k|  const uint64_t mask
  125|  29.4k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 29.4k]
  ------------------
  126|  29.4k|    ? UINT64_MAX
  127|  29.4k|    : (uint64_t(1) << shift) - 1;
  128|  29.4k|  const uint64_t halfway
  129|  29.4k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 29.4k]
  ------------------
  130|  29.4k|    ? 0
  131|  29.4k|    : uint64_t(1) << (shift - 1);
  132|  29.4k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  29.4k|  bool is_above = truncated_bits > halfway;
  134|  29.4k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  29.4k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 29.4k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  29.4k|  } else {
  140|  29.4k|    am.mantissa >>= shift;
  141|  29.4k|  }
  142|  29.4k|  am.power2 += shift;
  143|       |
  144|  29.4k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  29.4k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  29.4k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  29.4k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  29.4k|      (void)_;  // not needed, since we've done our comparison
  377|  29.4k|      (void)__; // not needed, since we've done our comparison
  378|  29.4k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 12.1k, False: 17.3k]
  ------------------
  379|  12.1k|        return true;
  380|  17.3k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 16.8k, False: 488]
  ------------------
  381|  16.8k|        return false;
  382|  16.8k|      } else {
  383|    488|        return is_odd;
  384|    488|      }
  385|  29.4k|    });

_ZN10fast_float4spanIKcEC2Ev:
  235|  1.97M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  1.17M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   391k|  constexpr size_t len() const noexcept {
  238|   391k|    return length;
  239|   391k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|   603k|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|   603k|  return -10;
  469|   603k|#endif
  470|   603k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|   561k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|   561k|  return 10;
  517|   561k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   491k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   491k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   491k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  1.48M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  1.48M|  return 23;
  477|  1.48M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   468k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   468k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   468k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   524k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   210k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   210k|  return -65;
  568|   210k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   209k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   209k|  return 38;
  559|   209k|}
_ZN10fast_float14leading_zeroesEm:
  268|   458k|int leading_zeroes(uint64_t input_num) {
  269|   458k|  assert(input_num > 0);
  270|   458k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   458k|  return __builtin_clzll(input_num);
  285|   458k|#endif
  286|   458k|}
_ZN10fast_float19full_multiplicationEmm:
  320|   584k|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|   584k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|   584k|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|   584k|  answer.low = uint64_t(r);
  337|   584k|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|   584k|  return answer;
  342|   584k|}
_ZN10fast_float8value128C2Ev:
  251|   584k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   249k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   249k|  return -127;
  500|   249k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|  69.4k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|  69.4k|  return -17;
  493|  69.4k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|  67.4k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|  67.4k|  return 10;
  485|  67.4k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   161k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   161k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 56.6k, False: 105k]
  |  Branch (352:38): [True: 0, False: 105k]
  ------------------
  353|   161k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  23.4k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  23.4k|  return 114;
  575|  23.4k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|  93.2k|{
  650|  93.2k|    return sizeof(uint64_t) / sizeof(UC);
  651|  93.2k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|  38.3k|{
  644|  38.3k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|  38.3k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|  38.3k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|  74.6k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   191k|  constexpr size_t len() const noexcept {
  238|   191k|    return length;
  239|   191k|  }
_ZNK10fast_float4spanImEixEm:
  241|   104k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   104k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   104k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   104k|    return ptr[index];
  244|   104k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   157k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   157k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   157k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   157k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   157k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   157k|  ::memcpy(&value, &word, sizeof(T));
  615|   157k|#endif
  616|   157k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   157k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   389k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   389k|  return 0xFF;
  507|   389k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|   986k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|   497k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|   249k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  237|    288|  constexpr size_t len() const noexcept {
  238|    288|    return length;
  239|    288|  }
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|   248k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|   631k|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|   631k|  return -22;
  461|   631k|#endif
  462|   631k|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|   624k|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|   624k|  return 22;
  514|   624k|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   521k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   521k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   521k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  1.53M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  1.53M|  return 52;
  474|  1.53M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   517k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   517k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   517k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   193k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   193k|  return -342;
  564|   193k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   193k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   193k|  return 308;
  555|   193k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   256k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   256k|  return -1023;
  497|   256k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|  56.7k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|  56.7k|  return -4;
  489|  56.7k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  30.7k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  30.7k|  return 23;
  481|  30.7k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  33.1k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  33.1k|  return 769;
  572|  33.1k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   143k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   143k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   143k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   143k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   143k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   143k|  ::memcpy(&value, &word, sizeof(T));
  615|   143k|#endif
  616|   143k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   143k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   367k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   367k|  return 0x7FF;
  504|   367k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   481k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   481k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   481k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   481k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   481k|    return from_chars_advanced(first, last, value, options);
  143|   481k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   481k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   481k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   481k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   481k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   481k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 481k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   481k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   481k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 481k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   481k|  answer.ec = std::errc(); // be optimistic
  221|   481k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   481k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 440k, False: 40.7k]
  |  Branch (227:69): [True: 416k, False: 24.1k]
  |  Branch (227:131): [True: 372k, False: 43.8k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   372k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 372k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   372k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 349k, False: 22.9k]
  ------------------
  239|   349k|        value = T(pns.mantissa);
  240|   349k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 8.13k, False: 341k]
  ------------------
  241|   341k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   349k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 349k]
  ------------------
  243|   349k|        return answer;
  244|   349k|      }
  245|   372k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   372k|  }
  262|   131k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   131k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 79.1k, False: 52.4k]
  |  Branch (263:29): [True: 79.1k, False: 0]
  ------------------
  264|  79.1k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 23.4k, False: 55.7k]
  ------------------
  265|  23.4k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  23.4k|    }
  267|  79.1k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   131k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 23.4k, False: 108k]
  ------------------
  271|   131k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   131k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 128k, False: 3.27k]
  |  Branch (273:29): [True: 14.5k, False: 113k]
  |  Branch (273:49): [True: 764, False: 13.7k]
  |  Branch (273:68): [True: 4.17k, False: 126k]
  ------------------
  274|  4.93k|    answer.ec = std::errc::result_out_of_range;
  275|  4.93k|  }
  276|   131k|  return answer;
  277|   481k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.01M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.01M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.01M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.01M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.01M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.01M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   121k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   121k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   121k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   121k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   121k|    return from_chars_advanced(first, last, value, options);
  143|   121k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   121k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   121k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   121k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   121k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   121k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 121k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   121k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   121k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 121k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   121k|  answer.ec = std::errc(); // be optimistic
  221|   121k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   121k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 120k, False: 802]
  |  Branch (227:69): [True: 118k, False: 2.05k]
  |  Branch (227:131): [True: 118k, False: 108]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   118k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 118k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   118k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 118k, False: 144]
  ------------------
  239|   118k|        value = T(pns.mantissa);
  240|   118k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 204, False: 118k]
  ------------------
  241|   118k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   118k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 118k]
  ------------------
  243|   118k|        return answer;
  244|   118k|      }
  245|   118k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   118k|  }
  262|  3.11k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  3.11k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 108, False: 3.00k]
  |  Branch (263:29): [True: 108, False: 0]
  ------------------
  264|    108|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 108]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|    108|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  3.11k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 3.11k]
  ------------------
  271|  3.11k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  3.11k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 2.84k, False: 268]
  |  Branch (273:29): [True: 2.31k, False: 528]
  |  Branch (273:49): [True: 590, False: 1.72k]
  |  Branch (273:68): [True: 1.72k, False: 796]
  ------------------
  274|  2.31k|    answer.ec = std::errc::result_out_of_range;
  275|  2.31k|  }
  276|  3.11k|  return answer;
  277|   121k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   504k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   504k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   504k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   504k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   504k|    return from_chars_advanced(first, last, value, options);
  143|   504k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   504k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   504k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   504k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   504k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   504k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 504k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   504k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   504k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 504k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   504k|  answer.ec = std::errc(); // be optimistic
  221|   504k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   504k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 498k, False: 6.52k]
  |  Branch (227:69): [True: 474k, False: 23.1k]
  |  Branch (227:131): [True: 397k, False: 77.3k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   397k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 397k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   397k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 393k, False: 4.36k]
  ------------------
  239|   393k|        value = T(pns.mantissa);
  240|   393k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 22.3k, False: 370k]
  ------------------
  241|   370k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   393k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 393k]
  ------------------
  243|   393k|        return answer;
  244|   393k|      }
  245|   397k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   397k|  }
  262|   111k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   111k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 82.5k, False: 28.7k]
  |  Branch (263:29): [True: 82.5k, False: 0]
  ------------------
  264|  82.5k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 33.1k, False: 49.4k]
  ------------------
  265|  33.1k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  33.1k|    }
  267|  82.5k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   111k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 33.1k, False: 78.2k]
  ------------------
  271|   111k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   111k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 108k, False: 2.96k]
  |  Branch (273:29): [True: 9.45k, False: 98.9k]
  |  Branch (273:49): [True: 188, False: 9.26k]
  |  Branch (273:68): [True: 2.05k, False: 109k]
  ------------------
  274|  2.24k|    answer.ec = std::errc::result_out_of_range;
  275|  2.24k|  }
  276|   111k|  return answer;
  277|   504k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   126k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   126k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   126k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   126k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   126k|    return from_chars_advanced(first, last, value, options);
  143|   126k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   126k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   126k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   126k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   126k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   126k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 126k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   126k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   126k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 126k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   126k|  answer.ec = std::errc(); // be optimistic
  221|   126k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   126k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 126k, False: 822]
  |  Branch (227:69): [True: 124k, False: 2.09k]
  |  Branch (227:131): [True: 123k, False: 108]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   123k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 123k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   123k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 123k, False: 72]
  ------------------
  239|   123k|        value = T(pns.mantissa);
  240|   123k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 300, False: 123k]
  ------------------
  241|   123k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   123k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 123k]
  ------------------
  243|   123k|        return answer;
  244|   123k|      }
  245|   123k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   123k|  }
  262|  3.10k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  3.10k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 108, False: 2.99k]
  |  Branch (263:29): [True: 108, False: 0]
  ------------------
  264|    108|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 108]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|    108|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  3.10k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 3.10k]
  ------------------
  271|  3.10k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  3.10k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 2.84k, False: 254]
  |  Branch (273:29): [True: 1.22k, False: 1.62k]
  |  Branch (273:49): [True: 82, False: 1.14k]
  |  Branch (273:68): [True: 1.14k, False: 1.87k]
  ------------------
  274|  1.22k|    answer.ec = std::errc::result_out_of_range;
  275|  1.22k|  }
  276|  3.10k|  return answer;
  277|   126k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  3.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  3.20M|{
 3807|  3.20M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  3.20M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  3.20M|    }
 3810|  3.20M|    else if constexpr (sizeof(U) == 2) {
 3811|  3.20M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  3.20M|    }
 3813|  3.20M|    else {
 3814|       |        // utf-32
 3815|  3.20M|        static_assert(sizeof(U) == 4);
 3816|  3.20M|        SCN_UNUSED(ch);
 3817|  3.20M|        return 1;
 3818|  3.20M|    }
 3819|  3.20M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  3.20M|{
 3771|  3.20M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  3.20M|    SCN_GCC_COMPAT_PUSH
 3774|  3.20M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  3.20M|    constexpr char lengths[] =
 3776|  3.20M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  3.20M|        "\1\1\1\1\1\1\1\1"
 3778|  3.20M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  3.20M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  3.20M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  3.20M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  3.20M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  3.20M|    SCN_GCC_COMPAT_POP
 3785|  3.20M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  2.86M|{
 4013|  2.86M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  2.86M|        return decode_utf8_code_point_exhaustive(input);
 4015|  2.86M|    }
 4016|  2.86M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  2.86M|        return decode_utf16_code_point_exhaustive(input);
 4018|  2.86M|    }
 4019|  2.86M|    else {
 4020|  2.86M|        SCN_EXPECT(input.size() == 1);
 4021|  2.86M|        auto cp = static_cast<char32_t>(input.front());
 4022|  2.86M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  2.86M|            return invalid_code_point;
 4024|  2.86M|        }
 4025|  2.86M|        return cp;
 4026|  2.86M|    }
 4027|  2.86M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  2.86M|{
 3826|  2.86M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  2.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  2.86M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  2.86M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  2.86M|    };
 3831|       |
 3832|  2.86M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 2.79M, False: 73.8k]
  ------------------
 3833|  2.79M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 711, False: 2.79M]
  ------------------
 3834|    711|            SCN_UNLIKELY_ATTR
 3835|    711|            return invalid_code_point;
 3836|    711|        }
 3837|  2.79M|        return static_cast<char32_t>(input[0]);
 3838|  2.79M|    }
 3839|       |
 3840|  73.8k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 63.6k, False: 10.1k]
  ------------------
 3841|  63.6k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 140, False: 63.5k]
  ------------------
 3842|    140|            SCN_UNLIKELY_ATTR
 3843|    140|            return invalid_code_point;
 3844|    140|        }
 3845|  63.5k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 5.02k, False: 58.5k]
  ------------------
 3846|  5.02k|            SCN_UNLIKELY_ATTR
 3847|  5.02k|            return invalid_code_point;
 3848|  5.02k|        }
 3849|       |
 3850|  58.5k|        char32_t cp{};
 3851|  58.5k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|  58.5k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|  58.5k|        return cp;
 3854|  63.5k|    }
 3855|       |
 3856|  10.1k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 7.52k, False: 2.59k]
  ------------------
 3857|  7.52k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 137, False: 7.39k]
  ------------------
 3858|    137|            SCN_UNLIKELY_ATTR
 3859|    137|            return invalid_code_point;
 3860|    137|        }
 3861|  7.39k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 5.64k, False: 1.74k]
  ------------------
 3862|  7.39k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 597, False: 1.14k]
  ------------------
 3863|  6.24k|            SCN_UNLIKELY_ATTR
 3864|  6.24k|            return invalid_code_point;
 3865|  6.24k|        }
 3866|       |
 3867|  1.14k|        char32_t cp{};
 3868|  1.14k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  1.14k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  1.14k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  1.14k|        return cp;
 3872|  7.39k|    }
 3873|       |
 3874|  2.59k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 2.59k, False: 0]
  ------------------
 3875|  2.59k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 2.59k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  2.59k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 488, False: 2.11k]
  ------------------
 3880|    488|            SCN_UNLIKELY_ATTR
 3881|    488|            return invalid_code_point;
 3882|    488|        }
 3883|  2.11k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 698, False: 1.41k]
  ------------------
 3884|  2.11k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 565, False: 848]
  ------------------
 3885|  2.11k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 543, False: 305]
  ------------------
 3886|  1.80k|            SCN_UNLIKELY_ATTR
 3887|  1.80k|            return invalid_code_point;
 3888|  1.80k|        }
 3889|       |
 3890|    305|        char32_t cp{};
 3891|    305|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|    305|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|    305|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|    305|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|    305|        return cp;
 3896|  2.11k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|  77.0k|    const auto is_trailing_code_unit = [](char ch) {
 3829|  77.0k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  77.0k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  4.79M|{
 3699|  4.79M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  4.79M|                                          decltype(first), decltype(last)> &&
 3701|  4.79M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  4.79M|        return {first, last};
 3703|  4.79M|    }
 3704|  4.79M|    else {
 3705|  4.79M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  4.79M|                                       to_address(first), to_address(last)))};
 3707|  4.79M|    }
 3708|  4.79M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  14.5M|{
  326|  14.5M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  14.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  14.5M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  16.7M|{
  304|  16.7M|    return p;
  305|  16.7M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  7.65M|{
 3730|  7.65M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  7.65M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  7.65M|                      decltype(it)> &&
 3733|  7.65M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  7.65M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  7.65M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  7.65M|        return it;
 3736|  7.65M|    }
 3737|  7.65M|    else {
 3738|  7.65M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  7.65M|    }
 3740|  7.65M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  83.6k|    {
 2724|  83.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  83.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  83.6k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  83.6k|    {
 2705|  83.6k|        return decay_copy(t.begin());
 2706|  83.6k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  11.2M|{
 1949|  11.2M|    return SCN_FWD(t);
  ------------------
  |  |  930|  11.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  11.2M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.12M|    {
 2781|  2.12M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.12M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.12M|    {
 2763|  2.12M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.12M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   154k|{
 8867|   154k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   154k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   154k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   154k|    static_cast<    \
  |  |  929|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   154k|    static_cast<    \
  |  |  929|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   154k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5395|   659k|{
 5396|   659k|    detail::check_scan_arg_types<Args...>();
 5397|   659k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   659k|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5134|   987k|{
 5135|   987k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   987k|                  "Scan argument types must be default constructible");
 5137|   987k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   987k|                  "Scan argument types must be Destructible");
 5139|   987k|    static_assert(
 5140|   987k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   987k|        "Scan argument types must not be references");
 5142|   987k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5348|   659k|    {
 5349|   659k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   659k|    {
 5360|   659k|        return {detail::make_arg<
 5361|   659k|            kind, Context,
 5362|   659k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   659k|                                 typename Context::char_type>::value>(args)...};
 5364|   659k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   659k|{
 5170|   659k|    return make_value<Context>(value).ref_value;
 5171|   659k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5119|   728k|{
 5120|   728k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   728k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   728k|                                  needs_context_tag>) {
 5124|   728k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   728k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   728k|    }
 5126|   728k|    else {
 5127|   728k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   728k|            value, context_tag<Context>{}));
 5129|   728k|    }
 5130|   728k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4958|   728k|    {                                                                        \
 4959|   728k|        return val;                                                          \
 4960|   728k|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5088|   987k|{
 5089|   987k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   987k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   987k|    constexpr bool scannable_char =
 5093|   987k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   987k|    static_assert(scannable_char,
 5095|   987k|                  "Cannot scan an argument of an unsupported character "
 5096|   987k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   987k|    constexpr bool scannable_const =
 5099|   987k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   987k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   987k|    constexpr bool scannable_disabled =
 5103|   987k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   987k|    static_assert(scannable_disabled,
 5105|   987k|                  "Cannot scan an argument that has been disabled by "
 5106|   987k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   987k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   987k|    static_assert(
 5110|   987k|        scannable,
 5111|   987k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   987k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   987k|    return arg_value{arg};
 5115|   987k|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4901|   987k|    {
 4902|   987k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   477k|{
 8654|   477k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   477k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   477k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   477k|{
 8591|   477k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   477k|    auto result = vscan_impl(buffer, format, args);
 8594|   477k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   477k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.6k, False: 440k]
  |  |  ------------------
  ------------------
 8595|  37.6k|        return unexpected(result.error());
 8596|  37.6k|    }
 8597|   440k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   440k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   477k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|  1.05M|{
 4720|  1.05M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.05M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.05M|                  "\n"
 4724|  1.05M|                  "Unsupported range type given as input to a scanning "
 4725|  1.05M|                  "function.\n"
 4726|  1.05M|                  "A range needs to have a character type (value type) "
 4727|  1.05M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.05M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.05M|                  "to be included.\n"
 4730|  1.05M|                  "See the scnlib documentation for more details.");
 4731|  1.05M|    static_assert(
 4732|  1.05M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.05M|        "\n"
 4734|  1.05M|        "Unsupported range type given as input to a scanning "
 4735|  1.05M|        "function.\n"
 4736|  1.05M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.05M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.05M|        "not supported.");
 4739|  1.05M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.05M|                  "\n"
 4741|  1.05M|                  "Unsupported range type given as input to a scanning "
 4742|  1.05M|                  "function.\n"
 4743|  1.05M|                  "file_marker_found cannot be used as an "
 4744|  1.05M|                  "source range type to scn::scan.\n"
 4745|  1.05M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.05M|                  "and do not provide an explicit source range, "
 4747|  1.05M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.05M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.05M|                  "\n"
 4750|  1.05M|                  "Unsupported range type given as input to a scanning "
 4751|  1.05M|                  "function.\n"
 4752|  1.05M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.05M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.05M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.05M|                  "\n"
 4756|  1.05M|                  "Unsupported range type given as input to a scanning "
 4757|  1.05M|                  "function.\n"
 4758|  1.05M|                  "A range needs to model forward_range and have a valid "
 4759|  1.05M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.05M|                  "Examples of scannable ranges are std::string, "
 4761|  1.05M|                  "std::string_view, "
 4762|  1.05M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.05M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.05M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.05M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|  1.05M|{
 4659|  1.05M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|  1.05M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|  1.05M|    }
 4662|  1.05M|    else {
 4663|  1.05M|        return invalid_char_type{};
 4664|  1.05M|    }
 4665|  1.05M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.05M|    {
 2855|  1.05M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.05M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.05M|    {
 2836|  1.05M|        return t.data();
 2837|  1.05M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|  1.05M|    {
 3231|  1.05M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 14.1k, False: 1.04M]
  ------------------
 3232|  1.05M|                   ? nullptr
 3233|  1.05M|                   : std::addressof(*ranges::begin(derived()));
 3234|  1.05M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  1.05M|    {
 3005|  1.05M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  1.05M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  1.05M|    {
 2978|  1.05M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  1.05M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  5.81M|    {
 3339|  5.81M|        return m_iterator == m_sentinel;
 3340|  5.81M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|  2.10M|    {
 3185|  2.10M|        return static_cast<const D&>(*this);
 3186|  2.10M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.02M|    {
 2724|  2.02M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.02M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.02M|    {
 2705|  2.02M|        return decay_copy(t.begin());
 2706|  2.02M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  25.5M|    {
 3330|  25.5M|        return m_iterator;
 3331|  25.5M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  1.05M|    {
 2930|  1.05M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  1.05M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  1.05M|    {
 2896|  1.05M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  1.05M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  4.02M|{
 1949|  4.02M|    return SCN_FWD(t);
  ------------------
  |  |  930|  4.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  4.02M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|  5.85M|    {
 3346|  5.85M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  5.85M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  10.0M|    {
 1598|  10.0M|        return has_value();
 1599|  10.0M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  19.8M|    {
  485|  19.8M|        return m_has_value;
  486|  19.8M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   740k|    {
 1604|   740k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   740k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   740k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   740k|        return this->get_unexpected().error();
 1606|   740k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   740k|    {
  468|   740k|        return m_unexpected;
  469|   740k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  5.72M|    {
  361|  5.72M|        return m_unexpected;
  362|  5.72M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|  2.79M|    {
  347|  2.79M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.79M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.79M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  81.5k|    {
 1476|  81.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|  81.5k|    {
  447|  81.5k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|  6.16M|    {
  356|  6.16M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  6.16M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  6.16M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.05M|    {
 1177|  1.05M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   978k|{
 5923|   978k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   978k|                      ranges::iterator_t<SourceRange>>) {
 5925|   978k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   978k|    }
 5927|   978k|    else {
 5928|   978k|        auto it = ranges::begin(source);
 5929|   978k|        while (n > 0) {
 5930|   978k|            --n;
 5931|   978k|            ++it;
 5932|   978k|        }
 5933|   978k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   978k|    }
 5935|   978k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  6.01M|    {
 2724|  6.01M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  6.01M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  6.01M|    {
 2705|  6.01M|        return decay_copy(t.begin());
 2706|  6.01M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|   978k|{
 5910|   978k|    return ranges::end(source);
 5911|   978k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   978k|    {
 2781|   978k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   978k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   978k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   978k|    {
 2763|   978k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   978k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   978k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  12.4M|    {
 3334|  12.4M|        return m_sentinel;
 3335|  12.4M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  3.92M|    {
 1653|  3.92M|        return value();
 1654|  3.92M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  9.05M|    {
 1627|  9.05M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.05M|        return this->get_value();
 1629|  9.05M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  9.05M|    {
  451|  9.05M|        return m_value;
  452|  9.05M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   978k|    {
 1430|   978k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|   978k|    {
  437|   978k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   308k|    {
 7975|   308k|        return m_str;
 7976|   308k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   659k|    {
 5426|   659k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5378|   659k|    {
 5379|   659k|        return m_argptrs;
 5380|   659k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|  2.04M|    {
 5478|  2.04M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   308k|{
 8820|   308k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.0k, False: 283k]
  |  |  ------------------
  ------------------
 8821|  25.0k|        return unexpected(result.error());
 8822|  25.0k|    }
 8823|   283k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   283k|    static_cast<    \
  |  |  929|   283k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   283k|    static_cast<    \
  |  |  929|   283k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   308k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  1.05M|    {
 1598|  1.05M|        return has_value();
 1599|  1.05M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.11M|    {
  485|  2.11M|        return m_has_value;
  486|  2.11M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  81.5k|    {
 1604|  81.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  81.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  81.5k|        return this->get_unexpected().error();
 1606|  81.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  81.5k|    {
  468|  81.5k|        return m_unexpected;
  469|  81.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  27.1k|    {
 1476|  27.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  27.1k|    {
  447|  27.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   341k|    {
 1177|   341k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|   880k|    {
 1653|   880k|        return value();
 1654|   880k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   978k|    {
 1627|   978k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   978k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   978k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   978k|        return this->get_value();
 1629|   978k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   978k|    {
  451|   978k|        return m_value;
  452|   978k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|   314k|    {
 5830|   314k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|   978k|    {
 5681|   978k|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5615|   824k|    {
 5616|   824k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   314k|    {
 1430|   314k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   314k|    {
  437|   314k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5373|   659k|    {
 5374|   659k|        return m_args;
 5375|   659k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  9.97M|    {
 3316|  9.97M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|  2.04M|{
 7691|  2.04M|    return s;
 7692|  2.04M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|  2.04M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   308k|    {
 7971|   308k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   341k|    {
 1598|   341k|        return has_value();
 1599|   341k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   656k|    {
  485|   656k|        return m_has_value;
  486|   656k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   314k|    {
 1673|   314k|        return &value();
 1674|   314k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   314k|    {
 1627|   314k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   314k|        return this->get_value();
 1629|   314k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   314k|    {
  451|   314k|        return m_value;
  452|   314k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|   978k|    {
 5698|   978k|        return ranges::begin(m_range);
 5699|   978k|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   154k|{
 8934|   154k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   154k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   154k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   154k|    static_cast<    \
  |  |  929|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   154k|    static_cast<    \
  |  |  929|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   154k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   477k|{
 8672|   477k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   477k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   477k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   477k|{
 8607|   477k|#if !SCN_DISABLE_LOCALE
 8608|   477k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   477k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   477k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   477k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   477k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   477k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.6k, False: 440k]
  |  |  ------------------
  ------------------
 8615|  37.6k|        return unexpected(result.error());
 8616|  37.6k|    }
 8617|   440k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   440k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   477k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  33.3k|{
 8973|  33.3k|    T value;
 8974|  33.3k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  33.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  33.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  33.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  33.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.09k, False: 31.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.09k|    }                                                  \
  |  |  |  | 3671|  33.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  31.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.2k|    static_cast<    \
  |  |  929|  31.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.2k|    static_cast<    \
  |  |  929|  31.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  33.3k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  69.1k|{
 5155|  69.1k|    check_scan_arg_types<T>();
 5156|       |
 5157|  69.1k|    basic_scan_arg<Context> arg;
 5158|  69.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  69.1k|    arg.m_value = make_value<Context>(value);
 5160|  69.1k|    return arg;
 5161|  69.1k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|  2.26M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  3.05M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   104k|{
 8685|   104k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   104k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   104k|{
 8631|   104k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   104k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   104k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.27k, False: 98.0k]
  |  |  ------------------
  ------------------
 8635|  6.27k|        return unexpected(result.error());
 8636|  6.27k|    }
 8637|  98.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  98.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   104k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  98.0k|    {
 1663|  98.0k|        return std::move(value());
 1664|  98.0k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   160k|{
 8867|   160k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   160k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   160k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   160k|    static_cast<    \
  |  |  929|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   160k|    static_cast<    \
  |  |  929|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   160k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|   689k|{
 5396|   689k|    detail::check_scan_arg_types<Args...>();
 5397|   689k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   689k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  1.02M|{
 5135|  1.02M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.02M|                  "Scan argument types must be default constructible");
 5137|  1.02M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.02M|                  "Scan argument types must be Destructible");
 5139|  1.02M|    static_assert(
 5140|  1.02M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.02M|        "Scan argument types must not be references");
 5142|  1.02M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5348|   689k|    {
 5349|   689k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   689k|    {
 5360|   689k|        return {detail::make_arg<
 5361|   689k|            kind, Context,
 5362|   689k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   689k|                                 typename Context::char_type>::value>(args)...};
 5364|   689k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   689k|{
 5170|   689k|    return make_value<Context>(value).ref_value;
 5171|   689k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|   762k|{
 5120|   762k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   762k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   762k|                                  needs_context_tag>) {
 5124|   762k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   762k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   762k|    }
 5126|   762k|    else {
 5127|   762k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   762k|            value, context_tag<Context>{}));
 5129|   762k|    }
 5130|   762k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|   762k|    {                                                                        \
 4959|   762k|        return val;                                                          \
 4960|   762k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  1.02M|{
 5089|  1.02M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.02M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.02M|    constexpr bool scannable_char =
 5093|  1.02M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.02M|    static_assert(scannable_char,
 5095|  1.02M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.02M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.02M|    constexpr bool scannable_const =
 5099|  1.02M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.02M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.02M|    constexpr bool scannable_disabled =
 5103|  1.02M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.02M|    static_assert(scannable_disabled,
 5105|  1.02M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.02M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.02M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.02M|    static_assert(
 5110|  1.02M|        scannable,
 5111|  1.02M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.02M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.02M|    return arg_value{arg};
 5115|  1.02M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4901|  1.02M|    {
 4902|  1.02M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   321k|    {
 7975|   321k|        return m_str;
 7976|   321k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   689k|    {
 5426|   689k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|   689k|    {
 5379|   689k|        return m_argptrs;
 5380|   689k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   321k|{
 8820|   321k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.0k, False: 296k]
  |  |  ------------------
  ------------------
 8821|  25.0k|        return unexpected(result.error());
 8822|  25.0k|    }
 8823|   296k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   296k|    static_cast<    \
  |  |  929|   296k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   296k|    static_cast<    \
  |  |  929|   296k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   321k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  27.1k|    {
 1476|  27.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  27.1k|    {
  447|  27.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   356k|    {
 1177|   356k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|   329k|    {
 5830|   329k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5615|   864k|    {
 5616|   864k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   329k|    {
 1430|   329k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   329k|    {
  437|   329k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|   689k|    {
 5374|   689k|        return m_args;
 5375|   689k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   321k|    {
 7971|   321k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   356k|    {
 1598|   356k|        return has_value();
 1599|   356k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   686k|    {
  485|   686k|        return m_has_value;
  486|   686k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   329k|    {
 1673|   329k|        return &value();
 1674|   329k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   329k|    {
 1627|   329k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   329k|        return this->get_value();
 1629|   329k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   329k|    {
  451|   329k|        return m_value;
  452|   329k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   160k|{
 8934|   160k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   160k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   160k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   160k|    static_cast<    \
  |  |  929|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   160k|    static_cast<    \
  |  |  929|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   160k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  35.2k|{
 8973|  35.2k|    T value;
 8974|  35.2k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  35.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  35.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  35.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  35.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.09k, False: 33.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.09k|    }                                                  \
  |  |  |  | 3671|  35.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  33.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  33.1k|    static_cast<    \
  |  |  929|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  33.1k|    static_cast<    \
  |  |  929|  33.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  35.2k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  72.9k|{
 5155|  72.9k|    check_scan_arg_types<T>();
 5156|       |
 5157|  72.9k|    basic_scan_arg<Context> arg;
 5158|  72.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  72.9k|    arg.m_value = make_value<Context>(value);
 5160|  72.9k|    return arg;
 5161|  72.9k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   162k|{
 8867|   162k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   162k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   162k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   162k|    static_cast<    \
  |  |  929|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   162k|    static_cast<    \
  |  |  929|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   162k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5395|   697k|{
 5396|   697k|    detail::check_scan_arg_types<Args...>();
 5397|   697k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   697k|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5134|  1.03M|{
 5135|  1.03M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.03M|                  "Scan argument types must be default constructible");
 5137|  1.03M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.03M|                  "Scan argument types must be Destructible");
 5139|  1.03M|    static_assert(
 5140|  1.03M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.03M|        "Scan argument types must not be references");
 5142|  1.03M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5348|   697k|    {
 5349|   697k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   697k|    {
 5360|   697k|        return {detail::make_arg<
 5361|   697k|            kind, Context,
 5362|   697k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   697k|                                 typename Context::char_type>::value>(args)...};
 5364|   697k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   697k|{
 5170|   697k|    return make_value<Context>(value).ref_value;
 5171|   697k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5119|   771k|{
 5120|   771k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   771k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   771k|                                  needs_context_tag>) {
 5124|   771k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   771k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   771k|    }
 5126|   771k|    else {
 5127|   771k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   771k|            value, context_tag<Context>{}));
 5129|   771k|    }
 5130|   771k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4958|   771k|    {                                                                        \
 4959|   771k|        return val;                                                          \
 4960|   771k|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5088|  1.03M|{
 5089|  1.03M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.03M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.03M|    constexpr bool scannable_char =
 5093|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.03M|    static_assert(scannable_char,
 5095|  1.03M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.03M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.03M|    constexpr bool scannable_const =
 5099|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.03M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.03M|    constexpr bool scannable_disabled =
 5103|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.03M|    static_assert(scannable_disabled,
 5105|  1.03M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.03M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.03M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.03M|    static_assert(
 5110|  1.03M|        scannable,
 5111|  1.03M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.03M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.03M|    return arg_value{arg};
 5115|  1.03M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4901|  1.03M|    {
 4902|  1.03M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   325k|    {
 7975|   325k|        return m_str;
 7976|   325k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   697k|    {
 5426|   697k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5378|   697k|    {
 5379|   697k|        return m_argptrs;
 5380|   697k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   325k|{
 8820|   325k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.0k, False: 300k]
  |  |  ------------------
  ------------------
 8821|  25.0k|        return unexpected(result.error());
 8822|  25.0k|    }
 8823|   300k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   300k|    static_cast<    \
  |  |  929|   300k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   300k|    static_cast<    \
  |  |  929|   300k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   325k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  27.1k|    {
 1476|  27.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  27.1k|    {
  447|  27.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   361k|    {
 1177|   361k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|   334k|    {
 5830|   334k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5615|   876k|    {
 5616|   876k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   334k|    {
 1430|   334k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|   334k|    {
  437|   334k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5373|   697k|    {
 5374|   697k|        return m_args;
 5375|   697k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   325k|    {
 7971|   325k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   361k|    {
 1598|   361k|        return has_value();
 1599|   361k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   695k|    {
  485|   695k|        return m_has_value;
  486|   695k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   334k|    {
 1673|   334k|        return &value();
 1674|   334k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   334k|    {
 1627|   334k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   334k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   334k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   334k|        return this->get_value();
 1629|   334k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   334k|    {
  451|   334k|        return m_value;
  452|   334k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   162k|{
 8934|   162k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   162k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   162k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   162k|    static_cast<    \
  |  |  929|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   162k|    static_cast<    \
  |  |  929|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   162k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  35.8k|{
 8973|  35.8k|    T value;
 8974|  35.8k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  35.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  35.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  35.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  35.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.09k, False: 33.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.09k|    }                                                  \
  |  |  |  | 3671|  35.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  33.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  33.7k|    static_cast<    \
  |  |  929|  33.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  33.7k|    static_cast<    \
  |  |  929|  33.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  35.8k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  73.9k|{
 5155|  73.9k|    check_scan_arg_types<T>();
 5156|       |
 5157|  73.9k|    basic_scan_arg<Context> arg;
 5158|  73.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  73.9k|    arg.m_value = make_value<Context>(value);
 5160|  73.9k|    return arg;
 5161|  73.9k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  81.5k|    {
 2724|  81.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  81.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  81.5k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  81.5k|    {
 2705|  81.5k|        return decay_copy(t.begin());
 2706|  81.5k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  50.9M|{
 1949|  50.9M|    return SCN_FWD(t);
  ------------------
  |  |  930|  50.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  50.9M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.40M|    {
 2781|  2.40M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.40M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.40M|    {
 2763|  2.40M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.40M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   175k|{
 8867|   175k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   175k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   175k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   175k|    static_cast<    \
  |  |  929|   175k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   175k|    static_cast<    \
  |  |  929|   175k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   175k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   545k|{
 8654|   545k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   545k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   545k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   545k|{
 8591|   545k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   545k|    auto result = vscan_impl(buffer, format, args);
 8594|   545k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   545k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.6k, False: 508k]
  |  |  ------------------
  ------------------
 8595|  37.6k|        return unexpected(result.error());
 8596|  37.6k|    }
 8597|   508k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   508k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   545k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|  1.20M|{
 4720|  1.20M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.20M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.20M|                  "\n"
 4724|  1.20M|                  "Unsupported range type given as input to a scanning "
 4725|  1.20M|                  "function.\n"
 4726|  1.20M|                  "A range needs to have a character type (value type) "
 4727|  1.20M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.20M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.20M|                  "to be included.\n"
 4730|  1.20M|                  "See the scnlib documentation for more details.");
 4731|  1.20M|    static_assert(
 4732|  1.20M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.20M|        "\n"
 4734|  1.20M|        "Unsupported range type given as input to a scanning "
 4735|  1.20M|        "function.\n"
 4736|  1.20M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.20M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.20M|        "not supported.");
 4739|  1.20M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.20M|                  "\n"
 4741|  1.20M|                  "Unsupported range type given as input to a scanning "
 4742|  1.20M|                  "function.\n"
 4743|  1.20M|                  "file_marker_found cannot be used as an "
 4744|  1.20M|                  "source range type to scn::scan.\n"
 4745|  1.20M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.20M|                  "and do not provide an explicit source range, "
 4747|  1.20M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.20M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.20M|                  "\n"
 4750|  1.20M|                  "Unsupported range type given as input to a scanning "
 4751|  1.20M|                  "function.\n"
 4752|  1.20M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.20M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.20M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.20M|                  "\n"
 4756|  1.20M|                  "Unsupported range type given as input to a scanning "
 4757|  1.20M|                  "function.\n"
 4758|  1.20M|                  "A range needs to model forward_range and have a valid "
 4759|  1.20M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.20M|                  "Examples of scannable ranges are std::string, "
 4761|  1.20M|                  "std::string_view, "
 4762|  1.20M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.20M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.20M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.20M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  1.20M|{
 4690|  1.20M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|  1.20M|        return file_marker_found{};
 4692|  1.20M|    }
 4693|  1.20M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|  1.20M|        if constexpr (ranges::range<Range>) {
 4695|  1.20M|            return insufficient_range{};
 4696|  1.20M|        }
 4697|  1.20M|        else {
 4698|  1.20M|            return invalid_input_range{};
 4699|  1.20M|        }
 4700|  1.20M|    }
 4701|  1.20M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|  1.20M|        return invalid_char_type{};
 4703|  1.20M|    }
 4704|  1.20M|    else {
 4705|  1.20M|        return make_forward_scan_buffer(r);
 4706|  1.20M|    }
 4707|  1.20M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|  1.20M|{
 4524|  1.20M|    return basic_scan_forward_buffer_impl(range);
 4525|  1.20M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|  1.20M|    {
 4411|  1.20M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4381|  1.20M|    {
 4382|  1.20M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4150|  1.20M|    {
 4151|  1.20M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|  1.20M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.32M|    {
 2724|  2.32M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.32M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.32M|    {
 2705|  2.32M|        return decay_copy(t.begin());
 2706|  2.32M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|  3.44M|    {
 3330|  3.44M|        return m_iterator;
 3331|  3.44M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  14.8M|    {
 4415|  14.8M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 278k, False: 14.5M]
  ------------------
 4416|   278k|            return false;
 4417|   278k|        }
 4418|  14.5M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  14.5M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  14.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  14.5M|        }
 4421|  14.5M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 13.3M, False: 1.18M]
  ------------------
 4422|  13.3M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  13.3M|                                          this->m_current_view.begin(),
 4424|  13.3M|                                          this->m_current_view.end());
 4425|  13.3M|        }
 4426|  14.5M|        m_latest = *m_cursor;
 4427|  14.5M|        ++m_cursor;
 4428|  14.5M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  14.5M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  14.5M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  14.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  14.5M|        }
 4432|  14.5M|        return true;
 4433|  14.5M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  43.8M|    {
 2781|  43.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  43.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  43.8M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  43.8M|    {
 2763|  43.8M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  43.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  43.8M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|  45.0M|    {
 3334|  45.0M|        return m_sentinel;
 3335|  45.0M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|  1.20M|    {
 4071|  1.20M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  1.20M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  1.20M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|  81.5k|    {
 1476|  81.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|  81.5k|    {
  447|  81.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.20M|    {
 1177|  1.20M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  1.12M|{
 5923|  1.12M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  1.12M|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.12M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  1.12M|    }
 5927|  1.12M|    else {
 5928|  1.12M|        auto it = ranges::begin(source);
 5929|  1.12M|        while (n > 0) {
 5930|  1.12M|            --n;
 5931|  1.12M|            ++it;
 5932|  1.12M|        }
 5933|  1.12M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  1.12M|    }
 5935|  1.12M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.12M|    {
 2724|  1.12M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.12M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.12M|    {
 2705|  1.12M|        return decay_copy(t.begin());
 2706|  1.12M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|  1.12M|{
 5910|  1.12M|    return ranges::end(source);
 5911|  1.12M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.12M|    {
 2781|  1.12M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.12M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.12M|    {
 2763|  1.12M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.12M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|  1.12M|    {
 1430|  1.12M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|  1.12M|    {
  437|  1.12M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   351k|    {
 7975|   351k|        return m_str;
 7976|   351k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   351k|{
 8820|   351k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.0k, False: 326k]
  |  |  ------------------
  ------------------
 8821|  25.0k|        return unexpected(result.error());
 8822|  25.0k|    }
 8823|   326k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   326k|    static_cast<    \
  |  |  929|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   326k|    static_cast<    \
  |  |  929|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   351k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  1.20M|    {
 1598|  1.20M|        return has_value();
 1599|  1.20M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.40M|    {
  485|  2.40M|        return m_has_value;
  486|  2.40M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  81.5k|    {
 1604|  81.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  81.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  81.5k|        return this->get_unexpected().error();
 1606|  81.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  81.5k|    {
  468|  81.5k|        return m_unexpected;
  469|  81.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  27.1k|    {
 1476|  27.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  27.1k|    {
  447|  27.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   387k|    {
 1177|   387k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|  1.01M|    {
 1653|  1.01M|        return value();
 1654|  1.01M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|  1.12M|    {
 1627|  1.12M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.12M|        return this->get_value();
 1629|  1.12M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.12M|    {
  451|  1.12M|        return m_value;
  452|  1.12M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|   360k|    {
 5830|   360k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5680|  1.12M|    {
 5681|  1.12M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   360k|    {
 1430|   360k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   360k|    {
  437|   360k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3315|  2.32M|    {
 3316|  2.32M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   351k|    {
 7971|   351k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   387k|    {
 1598|   387k|        return has_value();
 1599|   387k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   747k|    {
  485|   747k|        return m_has_value;
  486|   747k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   360k|    {
 1673|   360k|        return &value();
 1674|   360k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   360k|    {
 1627|   360k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   360k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   360k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   360k|        return this->get_value();
 1629|   360k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   360k|    {
  451|   360k|        return m_value;
  452|   360k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|  1.12M|    {
 5698|  1.12M|        return ranges::begin(m_range);
 5699|  1.12M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   175k|{
 8934|   175k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   175k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   175k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   175k|    static_cast<    \
  |  |  929|   175k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   175k|    static_cast<    \
  |  |  929|   175k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   175k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   545k|{
 8672|   545k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   545k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   545k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   545k|{
 8607|   545k|#if !SCN_DISABLE_LOCALE
 8608|   545k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   545k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   545k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   545k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   545k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   545k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.6k, False: 508k]
  |  |  ------------------
  ------------------
 8615|  37.6k|        return unexpected(result.error());
 8616|  37.6k|    }
 8617|   508k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   508k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   545k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  35.8k|{
 8973|  35.8k|    T value;
 8974|  35.8k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  35.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  35.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  35.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  35.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.09k, False: 33.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.09k|    }                                                  \
  |  |  |  | 3671|  35.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  33.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  33.7k|    static_cast<    \
  |  |  929|  33.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  33.7k|    static_cast<    \
  |  |  929|  33.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  35.8k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   111k|{
 8685|   111k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   111k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   111k|{
 8631|   111k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   111k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   111k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.27k, False: 105k]
  |  |  ------------------
  ------------------
 8635|  6.27k|        return unexpected(result.error());
 8636|  6.27k|    }
 8637|   105k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   111k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|   105k|    {
 1663|   105k|        return std::move(value());
 1664|   105k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   184k|{
 8867|   184k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   184k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   184k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   184k|    static_cast<    \
  |  |  929|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   184k|    static_cast<    \
  |  |  929|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   184k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   368k|    {
 7975|   368k|        return m_str;
 7976|   368k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   368k|{
 8820|   368k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.0k, False: 343k]
  |  |  ------------------
  ------------------
 8821|  25.0k|        return unexpected(result.error());
 8822|  25.0k|    }
 8823|   343k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   343k|    static_cast<    \
  |  |  929|   343k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   343k|    static_cast<    \
  |  |  929|   343k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   368k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  27.1k|    {
 1476|  27.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  27.1k|    {
  447|  27.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   406k|    {
 1177|   406k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|   378k|    {
 5830|   378k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   378k|    {
 1430|   378k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   378k|    {
  437|   378k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   368k|    {
 7971|   368k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   406k|    {
 1598|   406k|        return has_value();
 1599|   406k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   784k|    {
  485|   784k|        return m_has_value;
  486|   784k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   378k|    {
 1673|   378k|        return &value();
 1674|   378k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   378k|    {
 1627|   378k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   378k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   378k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   378k|        return this->get_value();
 1629|   378k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   378k|    {
  451|   378k|        return m_value;
  452|   378k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   184k|{
 8934|   184k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   184k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   184k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   184k|    static_cast<    \
  |  |  929|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   184k|    static_cast<    \
  |  |  929|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   184k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  37.7k|{
 8973|  37.7k|    T value;
 8974|  37.7k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  37.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  37.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  37.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  37.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  37.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.09k, False: 35.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.09k|    }                                                  \
  |  |  |  | 3671|  37.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  35.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  35.6k|    static_cast<    \
  |  |  929|  35.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  35.6k|    static_cast<    \
  |  |  929|  35.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  37.7k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   186k|{
 8867|   186k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   186k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   186k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   186k|    static_cast<    \
  |  |  929|   186k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   186k|    static_cast<    \
  |  |  929|   186k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   186k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   372k|    {
 7975|   372k|        return m_str;
 7976|   372k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   372k|{
 8820|   372k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.0k, False: 347k]
  |  |  ------------------
  ------------------
 8821|  25.0k|        return unexpected(result.error());
 8822|  25.0k|    }
 8823|   347k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   347k|    static_cast<    \
  |  |  929|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   347k|    static_cast<    \
  |  |  929|   347k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   372k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  27.1k|    {
 1476|  27.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  27.1k|    {
  447|  27.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   410k|    {
 1177|   410k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|   383k|    {
 5830|   383k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|   383k|    {
 1430|   383k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|   383k|    {
  437|   383k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   372k|    {
 7971|   372k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   410k|    {
 1598|   410k|        return has_value();
 1599|   410k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   793k|    {
  485|   793k|        return m_has_value;
  486|   793k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   383k|    {
 1673|   383k|        return &value();
 1674|   383k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|   383k|    {
 1627|   383k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   383k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   383k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   383k|        return this->get_value();
 1629|   383k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   383k|    {
  451|   383k|        return m_value;
  452|   383k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   186k|{
 8934|   186k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   186k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   186k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   186k|    static_cast<    \
  |  |  929|   186k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   186k|    static_cast<    \
  |  |  929|   186k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   186k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  38.1k|{
 8973|  38.1k|    T value;
 8974|  38.1k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  38.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  38.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  38.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  38.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.09k, False: 36.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.09k|    }                                                  \
  |  |  |  | 3671|  38.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  36.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  36.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  36.0k|    static_cast<    \
  |  |  929|  36.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  36.0k|    static_cast<    \
  |  |  929|  36.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  38.1k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   167k|    {
 2724|   167k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   167k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   167k|    {
 2705|   167k|        return decay_copy(t.begin());
 2706|   167k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  2.53M|{
 1949|  2.53M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  2.53M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   795k|    {
 2781|   795k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   795k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   795k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   795k|    {
 2763|   795k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   795k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   795k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5395|   236k|{
 5396|   236k|    detail::check_scan_arg_types<Args...>();
 5397|   236k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   236k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5348|   236k|    {
 5349|   236k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   236k|    {
 5360|   236k|        return {detail::make_arg<
 5361|   236k|            kind, Context,
 5362|   236k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   236k|                                 typename Context::char_type>::value>(args)...};
 5364|   236k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   236k|{
 5170|   236k|    return make_value<Context>(value).ref_value;
 5171|   236k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5119|   258k|{
 5120|   258k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   258k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   258k|                                  needs_context_tag>) {
 5124|   258k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   258k|    }
 5126|   258k|    else {
 5127|   258k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   258k|            value, context_tag<Context>{}));
 5129|   258k|    }
 5130|   258k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4958|   258k|    {                                                                        \
 4959|   258k|        return val;                                                          \
 4960|   258k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   181k|{
 8591|   181k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   181k|    auto result = vscan_impl(buffer, format, args);
 8594|   181k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 75.2k, False: 105k]
  |  |  ------------------
  ------------------
 8595|  75.2k|        return unexpected(result.error());
 8596|  75.2k|    }
 8597|   105k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   181k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|   395k|{
 4720|   395k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   395k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   395k|                  "\n"
 4724|   395k|                  "Unsupported range type given as input to a scanning "
 4725|   395k|                  "function.\n"
 4726|   395k|                  "A range needs to have a character type (value type) "
 4727|   395k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   395k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   395k|                  "to be included.\n"
 4730|   395k|                  "See the scnlib documentation for more details.");
 4731|   395k|    static_assert(
 4732|   395k|        !std::is_same_v<T, custom_char_traits>,
 4733|   395k|        "\n"
 4734|   395k|        "Unsupported range type given as input to a scanning "
 4735|   395k|        "function.\n"
 4736|   395k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   395k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   395k|        "not supported.");
 4739|   395k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   395k|                  "\n"
 4741|   395k|                  "Unsupported range type given as input to a scanning "
 4742|   395k|                  "function.\n"
 4743|   395k|                  "file_marker_found cannot be used as an "
 4744|   395k|                  "source range type to scn::scan.\n"
 4745|   395k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   395k|                  "and do not provide an explicit source range, "
 4747|   395k|                  "or use scn::scan with a FILE* directly.");
 4748|   395k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   395k|                  "\n"
 4750|   395k|                  "Unsupported range type given as input to a scanning "
 4751|   395k|                  "function.\n"
 4752|   395k|                  "In order to be scannable, a range needs to satisfy "
 4753|   395k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   395k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   395k|                  "\n"
 4756|   395k|                  "Unsupported range type given as input to a scanning "
 4757|   395k|                  "function.\n"
 4758|   395k|                  "A range needs to model forward_range and have a valid "
 4759|   395k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   395k|                  "Examples of scannable ranges are std::string, "
 4761|   395k|                  "std::string_view, "
 4762|   395k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   395k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   395k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   395k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|   395k|{
 4659|   395k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|   395k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|   395k|    }
 4662|   395k|    else {
 4663|   395k|        return invalid_char_type{};
 4664|   395k|    }
 4665|   395k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   395k|    {
 2855|   395k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   395k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   395k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   395k|    {
 2836|   395k|        return t.data();
 2837|   395k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|   395k|    {
 3231|   395k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 1.24k, False: 394k]
  ------------------
 3232|   395k|                   ? nullptr
 3233|   395k|                   : std::addressof(*ranges::begin(derived()));
 3234|   395k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   395k|    {
 3005|   395k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   395k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   395k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   395k|    {
 2978|   395k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   395k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   395k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|   714k|    {
 3339|   714k|        return m_iterator == m_sentinel;
 3340|   714k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|   790k|    {
 3185|   790k|        return static_cast<const D&>(*this);
 3186|   790k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   627k|    {
 2724|   627k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   627k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   627k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   627k|    {
 2705|   627k|        return decay_copy(t.begin());
 2706|   627k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  13.1M|    {
 3330|  13.1M|        return m_iterator;
 3331|  13.1M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   395k|    {
 2930|   395k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   395k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   395k|    {
 2896|   395k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   395k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   395k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  1.73M|    {
 3346|  1.73M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  1.73M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   163k|    {
 1476|   163k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   163k|    {
  447|   163k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   395k|    {
 1177|   395k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   232k|{
 5923|   232k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   232k|                      ranges::iterator_t<SourceRange>>) {
 5925|   232k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   232k|    }
 5927|   232k|    else {
 5928|   232k|        auto it = ranges::begin(source);
 5929|   232k|        while (n > 0) {
 5930|   232k|            --n;
 5931|   232k|            ++it;
 5932|   232k|        }
 5933|   232k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   232k|    }
 5935|   232k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   708k|    {
 2724|   708k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   708k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   708k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   708k|    {
 2705|   708k|        return decay_copy(t.begin());
 2706|   708k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|   232k|{
 5910|   232k|    return ranges::end(source);
 5911|   232k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   232k|    {
 2781|   232k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   232k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   232k|    {
 2763|   232k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   232k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  7.40M|    {
 3334|  7.40M|        return m_sentinel;
 3335|  7.40M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   232k|    {
 1430|   232k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|   232k|    {
  437|   232k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   118k|    {
 7975|   118k|        return m_str;
 7976|   118k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   236k|    {
 5426|   236k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5378|   236k|    {
 5379|   236k|        return m_argptrs;
 5380|   236k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|   724k|    {
 5478|   724k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   118k|{
 8820|   118k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.1k, False: 68.2k]
  |  |  ------------------
  ------------------
 8821|  50.1k|        return unexpected(result.error());
 8822|  50.1k|    }
 8823|  68.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  68.2k|    static_cast<    \
  |  |  929|  68.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  68.2k|    static_cast<    \
  |  |  929|  68.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   118k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   395k|    {
 1598|   395k|        return has_value();
 1599|   395k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   791k|    {
  485|   791k|        return m_has_value;
  486|   791k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   163k|    {
 1604|   163k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   163k|        return this->get_unexpected().error();
 1606|   163k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   163k|    {
  468|   163k|        return m_unexpected;
  469|   163k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  54.3k|    {
 1476|  54.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  54.3k|    {
  447|  54.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   129k|    {
 1177|   129k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|   211k|    {
 1653|   211k|        return value();
 1654|   211k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   232k|    {
 1627|   232k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   232k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   232k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   232k|        return this->get_value();
 1629|   232k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   232k|    {
  451|   232k|        return m_value;
  452|   232k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5829|  74.8k|    {
 5830|  74.8k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|   232k|    {
 5681|   232k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  74.8k|    {
 1430|  74.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  74.8k|    {
  437|  74.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5373|   236k|    {
 5374|   236k|        return m_args;
 5375|   236k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|  4.68M|    {
 3316|  4.68M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   724k|{
 7696|   724k|    return s;
 7697|   724k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   724k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   118k|    {
 7971|   118k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   129k|    {
 1598|   129k|        return has_value();
 1599|   129k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   204k|    {
  485|   204k|        return m_has_value;
  486|   204k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|  74.8k|    {
 1673|  74.8k|        return &value();
 1674|  74.8k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  74.8k|    {
 1627|  74.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  74.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  74.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  74.8k|        return this->get_value();
 1629|  74.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  74.8k|    {
  451|  74.8k|        return m_value;
  452|  74.8k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|   232k|    {
 5698|   232k|        return ranges::begin(m_range);
 5699|   232k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   181k|{
 8607|   181k|#if !SCN_DISABLE_LOCALE
 8608|   181k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   181k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   181k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   181k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   181k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 75.2k, False: 105k]
  |  |  ------------------
  ------------------
 8615|  75.2k|        return unexpected(result.error());
 8616|  75.2k|    }
 8617|   105k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   181k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  21.6k|{
 5155|  21.6k|    check_scan_arg_types<T>();
 5156|       |
 5157|  21.6k|    basic_scan_arg<Context> arg;
 5158|  21.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  21.6k|    arg.m_value = make_value<Context>(value);
 5160|  21.6k|    return arg;
 5161|  21.6k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|   791k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  33.6k|{
 8631|  33.6k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  33.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  33.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  33.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 21.0k]
  |  |  ------------------
  ------------------
 8635|  12.5k|        return unexpected(result.error());
 8636|  12.5k|    }
 8637|  21.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  21.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  33.6k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  21.0k|    {
 1663|  21.0k|        return std::move(value());
 1664|  21.0k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|   242k|{
 5396|   242k|    detail::check_scan_arg_types<Args...>();
 5397|   242k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   242k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5348|   242k|    {
 5349|   242k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   242k|    {
 5360|   242k|        return {detail::make_arg<
 5361|   242k|            kind, Context,
 5362|   242k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   242k|                                 typename Context::char_type>::value>(args)...};
 5364|   242k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   242k|{
 5170|   242k|    return make_value<Context>(value).ref_value;
 5171|   242k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|   264k|{
 5120|   264k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   264k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   264k|                                  needs_context_tag>) {
 5124|   264k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   264k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   264k|    }
 5126|   264k|    else {
 5127|   264k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   264k|            value, context_tag<Context>{}));
 5129|   264k|    }
 5130|   264k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|   264k|    {                                                                        \
 4959|   264k|        return val;                                                          \
 4960|   264k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   121k|    {
 7975|   121k|        return m_str;
 7976|   121k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   242k|    {
 5426|   242k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|   242k|    {
 5379|   242k|        return m_argptrs;
 5380|   242k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   121k|{
 8820|   121k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.1k, False: 70.9k]
  |  |  ------------------
  ------------------
 8821|  50.1k|        return unexpected(result.error());
 8822|  50.1k|    }
 8823|  70.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  70.9k|    static_cast<    \
  |  |  929|  70.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  70.9k|    static_cast<    \
  |  |  929|  70.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   121k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  54.3k|    {
 1476|  54.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  54.3k|    {
  447|  54.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   132k|    {
 1177|   132k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5829|  78.0k|    {
 5830|  78.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  78.0k|    {
 1430|  78.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  78.0k|    {
  437|  78.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|   242k|    {
 5374|   242k|        return m_args;
 5375|   242k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   121k|    {
 7971|   121k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   132k|    {
 1598|   132k|        return has_value();
 1599|   132k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   210k|    {
  485|   210k|        return m_has_value;
  486|   210k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|  78.0k|    {
 1673|  78.0k|        return &value();
 1674|  78.0k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  78.0k|    {
 1627|  78.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  78.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  78.0k|        return this->get_value();
 1629|  78.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  78.0k|    {
  451|  78.0k|        return m_value;
  452|  78.0k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  22.5k|{
 5155|  22.5k|    check_scan_arg_types<T>();
 5156|       |
 5157|  22.5k|    basic_scan_arg<Context> arg;
 5158|  22.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  22.5k|    arg.m_value = make_value<Context>(value);
 5160|  22.5k|    return arg;
 5161|  22.5k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5395|   245k|{
 5396|   245k|    detail::check_scan_arg_types<Args...>();
 5397|   245k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   245k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5348|   245k|    {
 5349|   245k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   245k|    {
 5360|   245k|        return {detail::make_arg<
 5361|   245k|            kind, Context,
 5362|   245k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   245k|                                 typename Context::char_type>::value>(args)...};
 5364|   245k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   245k|{
 5170|   245k|    return make_value<Context>(value).ref_value;
 5171|   245k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5119|   268k|{
 5120|   268k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   268k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   268k|                                  needs_context_tag>) {
 5124|   268k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   268k|    }
 5126|   268k|    else {
 5127|   268k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   268k|            value, context_tag<Context>{}));
 5129|   268k|    }
 5130|   268k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4958|   268k|    {                                                                        \
 4959|   268k|        return val;                                                          \
 4960|   268k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   122k|    {
 7975|   122k|        return m_str;
 7976|   122k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   245k|    {
 5426|   245k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5378|   245k|    {
 5379|   245k|        return m_argptrs;
 5380|   245k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   122k|{
 8820|   122k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.1k, False: 72.5k]
  |  |  ------------------
  ------------------
 8821|  50.1k|        return unexpected(result.error());
 8822|  50.1k|    }
 8823|  72.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  72.5k|    static_cast<    \
  |  |  929|  72.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  72.5k|    static_cast<    \
  |  |  929|  72.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   122k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  54.3k|    {
 1476|  54.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  54.3k|    {
  447|  54.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   134k|    {
 1177|   134k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5829|  79.8k|    {
 5830|  79.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  79.8k|    {
 1430|  79.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|  79.8k|    {
  437|  79.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5373|   245k|    {
 5374|   245k|        return m_args;
 5375|   245k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   122k|    {
 7971|   122k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   134k|    {
 1598|   134k|        return has_value();
 1599|   134k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   214k|    {
  485|   214k|        return m_has_value;
  486|   214k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|  79.8k|    {
 1673|  79.8k|        return &value();
 1674|  79.8k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  79.8k|    {
 1627|  79.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  79.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  79.8k|        return this->get_value();
 1629|  79.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  79.8k|    {
  451|  79.8k|        return m_value;
  452|  79.8k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  23.0k|{
 5155|  23.0k|    check_scan_arg_types<T>();
 5156|       |
 5157|  23.0k|    basic_scan_arg<Context> arg;
 5158|  23.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  23.0k|    arg.m_value = make_value<Context>(value);
 5160|  23.0k|    return arg;
 5161|  23.0k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   163k|    {
 2724|   163k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   163k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   163k|    {
 2705|   163k|        return decay_copy(t.begin());
 2706|   163k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  7.53M|{
 1949|  7.53M|    return SCN_FWD(t);
  ------------------
  |  |  930|  7.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  7.53M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   791k|    {
 2781|   791k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   791k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   791k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   791k|    {
 2763|   791k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   791k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   791k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   180k|{
 8591|   180k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   180k|    auto result = vscan_impl(buffer, format, args);
 8594|   180k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 75.2k, False: 105k]
  |  |  ------------------
  ------------------
 8595|  75.2k|        return unexpected(result.error());
 8596|  75.2k|    }
 8597|   105k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   180k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|   395k|{
 4720|   395k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   395k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   395k|                  "\n"
 4724|   395k|                  "Unsupported range type given as input to a scanning "
 4725|   395k|                  "function.\n"
 4726|   395k|                  "A range needs to have a character type (value type) "
 4727|   395k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   395k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   395k|                  "to be included.\n"
 4730|   395k|                  "See the scnlib documentation for more details.");
 4731|   395k|    static_assert(
 4732|   395k|        !std::is_same_v<T, custom_char_traits>,
 4733|   395k|        "\n"
 4734|   395k|        "Unsupported range type given as input to a scanning "
 4735|   395k|        "function.\n"
 4736|   395k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   395k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   395k|        "not supported.");
 4739|   395k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   395k|                  "\n"
 4741|   395k|                  "Unsupported range type given as input to a scanning "
 4742|   395k|                  "function.\n"
 4743|   395k|                  "file_marker_found cannot be used as an "
 4744|   395k|                  "source range type to scn::scan.\n"
 4745|   395k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   395k|                  "and do not provide an explicit source range, "
 4747|   395k|                  "or use scn::scan with a FILE* directly.");
 4748|   395k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   395k|                  "\n"
 4750|   395k|                  "Unsupported range type given as input to a scanning "
 4751|   395k|                  "function.\n"
 4752|   395k|                  "In order to be scannable, a range needs to satisfy "
 4753|   395k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   395k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   395k|                  "\n"
 4756|   395k|                  "Unsupported range type given as input to a scanning "
 4757|   395k|                  "function.\n"
 4758|   395k|                  "A range needs to model forward_range and have a valid "
 4759|   395k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   395k|                  "Examples of scannable ranges are std::string, "
 4761|   395k|                  "std::string_view, "
 4762|   395k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   395k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   395k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   395k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   395k|{
 4690|   395k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|   395k|        return file_marker_found{};
 4692|   395k|    }
 4693|   395k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|   395k|        if constexpr (ranges::range<Range>) {
 4695|   395k|            return insufficient_range{};
 4696|   395k|        }
 4697|   395k|        else {
 4698|   395k|            return invalid_input_range{};
 4699|   395k|        }
 4700|   395k|    }
 4701|   395k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|   395k|        return invalid_char_type{};
 4703|   395k|    }
 4704|   395k|    else {
 4705|   395k|        return make_forward_scan_buffer(r);
 4706|   395k|    }
 4707|   395k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|   395k|{
 4524|   395k|    return basic_scan_forward_buffer_impl(range);
 4525|   395k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|   395k|    {
 4411|   395k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4381|   395k|    {
 4382|   395k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4150|   395k|    {
 4151|   395k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|   395k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   628k|    {
 2724|   628k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   628k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   628k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   628k|    {
 2705|   628k|        return decay_copy(t.begin());
 2706|   628k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|   860k|    {
 3330|   860k|        return m_iterator;
 3331|   860k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|  1.93M|    {
 4415|  1.93M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 154k, False: 1.77M]
  ------------------
 4416|   154k|            return false;
 4417|   154k|        }
 4418|  1.77M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  1.77M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  1.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  1.77M|        }
 4421|  1.77M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 1.38M, False: 394k]
  ------------------
 4422|  1.38M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  1.38M|                                          this->m_current_view.begin(),
 4424|  1.38M|                                          this->m_current_view.end());
 4425|  1.38M|        }
 4426|  1.77M|        m_latest = *m_cursor;
 4427|  1.77M|        ++m_cursor;
 4428|  1.77M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  1.77M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  1.77M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  1.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  1.77M|        }
 4432|  1.77M|        return true;
 4433|  1.77M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  5.49M|    {
 2781|  5.49M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  5.49M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  5.49M|    {
 2763|  5.49M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  5.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  5.49M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|  5.72M|    {
 3334|  5.72M|        return m_sentinel;
 3335|  5.72M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|   395k|    {
 4071|   395k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   395k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   395k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|   163k|    {
 1476|   163k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|   163k|    {
  447|   163k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   395k|    {
 1177|   395k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|   232k|{
 5923|   232k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   232k|                      ranges::iterator_t<SourceRange>>) {
 5925|   232k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   232k|    }
 5927|   232k|    else {
 5928|   232k|        auto it = ranges::begin(source);
 5929|   232k|        while (n > 0) {
 5930|   232k|            --n;
 5931|   232k|            ++it;
 5932|   232k|        }
 5933|   232k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   232k|    }
 5935|   232k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   232k|    {
 2724|   232k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   232k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   232k|    {
 2705|   232k|        return decay_copy(t.begin());
 2706|   232k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|   232k|{
 5910|   232k|    return ranges::end(source);
 5911|   232k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   232k|    {
 2781|   232k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   232k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   232k|    {
 2763|   232k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   232k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|   232k|    {
 1430|   232k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|   232k|    {
  437|   232k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   118k|    {
 7975|   118k|        return m_str;
 7976|   118k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   118k|{
 8820|   118k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.1k, False: 68.1k]
  |  |  ------------------
  ------------------
 8821|  50.1k|        return unexpected(result.error());
 8822|  50.1k|    }
 8823|  68.1k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  68.1k|    static_cast<    \
  |  |  929|  68.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  68.1k|    static_cast<    \
  |  |  929|  68.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   118k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   395k|    {
 1598|   395k|        return has_value();
 1599|   395k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   791k|    {
  485|   791k|        return m_has_value;
  486|   791k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   163k|    {
 1604|   163k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   163k|        return this->get_unexpected().error();
 1606|   163k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   163k|    {
  468|   163k|        return m_unexpected;
  469|   163k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  54.3k|    {
 1476|  54.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  54.3k|    {
  447|  54.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   129k|    {
 1177|   129k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|   211k|    {
 1653|   211k|        return value();
 1654|   211k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|   232k|    {
 1627|   232k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   232k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   232k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   232k|        return this->get_value();
 1629|   232k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   232k|    {
  451|   232k|        return m_value;
  452|   232k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5829|  74.7k|    {
 5830|  74.7k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5680|   232k|    {
 5681|   232k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  74.7k|    {
 1430|  74.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  74.7k|    {
  437|  74.7k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3315|   628k|    {
 3316|   628k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   118k|    {
 7971|   118k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   129k|    {
 1598|   129k|        return has_value();
 1599|   129k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   203k|    {
  485|   203k|        return m_has_value;
  486|   203k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|  74.7k|    {
 1673|  74.7k|        return &value();
 1674|  74.7k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  74.7k|    {
 1627|  74.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  74.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  74.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  74.7k|        return this->get_value();
 1629|  74.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  74.7k|    {
  451|  74.7k|        return m_value;
  452|  74.7k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|   232k|    {
 5698|   232k|        return ranges::begin(m_range);
 5699|   232k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   180k|{
 8607|   180k|#if !SCN_DISABLE_LOCALE
 8608|   180k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   180k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   180k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   180k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   180k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 75.2k, False: 105k]
  |  |  ------------------
  ------------------
 8615|  75.2k|        return unexpected(result.error());
 8616|  75.2k|    }
 8617|   105k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   180k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  33.5k|{
 8631|  33.5k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  33.5k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  33.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  33.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 21.0k]
  |  |  ------------------
  ------------------
 8635|  12.5k|        return unexpected(result.error());
 8636|  12.5k|    }
 8637|  21.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  21.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  33.5k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|  21.0k|    {
 1663|  21.0k|        return std::move(value());
 1664|  21.0k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   121k|    {
 7975|   121k|        return m_str;
 7976|   121k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   121k|{
 8820|   121k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.1k, False: 70.8k]
  |  |  ------------------
  ------------------
 8821|  50.1k|        return unexpected(result.error());
 8822|  50.1k|    }
 8823|  70.8k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  70.8k|    static_cast<    \
  |  |  929|  70.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  70.8k|    static_cast<    \
  |  |  929|  70.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   121k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  54.3k|    {
 1476|  54.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  54.3k|    {
  447|  54.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   132k|    {
 1177|   132k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5829|  77.9k|    {
 5830|  77.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  77.9k|    {
 1430|  77.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  77.9k|    {
  437|  77.9k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   121k|    {
 7971|   121k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   132k|    {
 1598|   132k|        return has_value();
 1599|   132k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   210k|    {
  485|   210k|        return m_has_value;
  486|   210k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|  77.9k|    {
 1673|  77.9k|        return &value();
 1674|  77.9k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  77.9k|    {
 1627|  77.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  77.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  77.9k|        return this->get_value();
 1629|  77.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  77.9k|    {
  451|  77.9k|        return m_value;
  452|  77.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   122k|    {
 7975|   122k|        return m_str;
 7976|   122k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   122k|{
 8820|   122k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.1k, False: 72.4k]
  |  |  ------------------
  ------------------
 8821|  50.1k|        return unexpected(result.error());
 8822|  50.1k|    }
 8823|  72.4k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  72.4k|    static_cast<    \
  |  |  929|  72.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  72.4k|    static_cast<    \
  |  |  929|  72.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   122k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|  54.3k|    {
 1476|  54.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  446|  54.3k|    {
  447|  54.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   134k|    {
 1177|   134k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5829|  79.7k|    {
 5830|  79.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1429|  79.7k|    {
 1430|  79.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  436|  79.7k|    {
  437|  79.7k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|   122k|    {
 7971|   122k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   134k|    {
 1598|   134k|        return has_value();
 1599|   134k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   213k|    {
  485|   213k|        return m_has_value;
  486|   213k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|  79.7k|    {
 1673|  79.7k|        return &value();
 1674|  79.7k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1626|  79.7k|    {
 1627|  79.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  79.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  79.7k|        return this->get_value();
 1629|  79.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  79.7k|    {
  451|  79.7k|        return m_value;
  452|  79.7k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|  3.38M|    {
 3568|  3.38M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  3.38M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  3.38M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  14.0M|    {
 3574|  14.0M|        return m_code == good;
 3575|  14.0M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   376k|    {
 3585|   376k|        return m_code;
 3586|   376k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  54.4M|    {
 3330|  54.4M|        return m_iterator;
 3331|  54.4M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  15.8M|    {
 3330|  15.8M|        return m_iterator;
 3331|  15.8M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  2.20M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|   590k|    {
 6272|   590k|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|   590k|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6272:23): [Folded - Ignored]
  ------------------
 6273|   590k|            m_specs.localized = true;
 6274|   590k|        }
 6275|      0|        else {
 6276|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|      0|        }
 6278|   590k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  1.61M|    {
 6303|  1.61M|        m_specs.type = type;
 6304|  1.61M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  2.20M|    {
 6376|  2.20M|        return static_cast<bool>(m_error);
 6377|  2.20M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   376k|{
 3609|   376k|    return a.code() == b;
 3610|   376k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   376k|{
 3613|   376k|    return !(a == b);
 3614|   376k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|   590k|{
 7063|   590k|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 590k]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 590k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 590k]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 590k]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 590k]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 590k]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 590k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 590k]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 590k]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 590k]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 590k]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 590k]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 590k]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 590k]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 590k]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 590k]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|   188k|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 188k, False: 401k]
  ------------------
 7091|   387k|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 199k, False: 391k]
  ------------------
 7092|   590k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 202k, False: 387k]
  ------------------
 7093|   590k|            return arg_type_category::floating;
 7094|       |
 7095|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 0, False: 590k]
  ------------------
 7096|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 590k]
  ------------------
 7097|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 590k]
  ------------------
 7098|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 590k]
  ------------------
 7099|      0|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 590k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 590k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|   590k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|   590k|            SCN_CLANG_POP
 7110|   590k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|   590k|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  2.56M|    {
 2896|  2.56M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  2.56M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2929|  2.56M|    {
 2930|  2.56M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  2.56M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2952|  2.56M|    {
 2953|  2.56M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|  2.56M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2961|  2.56M|    {
 2962|  2.56M|        return fn::impl(std::forward<T>(t));
 2963|  2.56M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3653|    967|{
 3654|    967|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    967|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    967|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  2.14k|{
 3654|  2.14k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.14k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3653|  25.9k|{
 3654|  25.9k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  25.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  25.9k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  2.20M|{
 7193|  2.20M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 1.61M, False: 590k]
  ------------------
 7194|  2.20M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 0, False: 1.61M]
  ------------------
 7195|  1.61M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 0, False: 1.61M]
  ------------------
 7196|      0|        SCN_UNLIKELY_ATTR
 7197|      0|        return handler.on_error("Invalid type specifier for float type");
 7198|      0|    }
 7199|  2.20M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|   337M|    {
 4195|   337M|        return m_end == nullptr;
 4196|   337M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   919k|{
 3715|   919k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   919k|                                          const CharT*, const CharT*>) {
 3717|   919k|        return {first, last};
 3718|   919k|    }
 3719|   919k|    else {
 3720|   919k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   919k|    }
 3722|   919k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|  4.54M|    {
 4211|  4.54M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 4.54M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  4.54M|        return parent()->get_segment_starting_at(position());
 4217|  4.54M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|   187M|    {
 4205|   187M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   187M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   187M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|   187M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|   187M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|  4.54M|    {
 4101|  4.54M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  4.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.98M, False: 2.55M]
  |  |  ------------------
  ------------------
 4102|  4.54M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  1.98M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  1.98M|        }
 4105|  2.55M|        const auto start = pos - m_putback_buffer.size();
 4106|  2.55M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  2.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|  2.55M|        return m_current_view.substr(start);
 4108|  2.55M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4199|  3.16M|    {
 4200|  3.16M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  3.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  3.16M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  3.16M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|  8.31M|    {
 4190|  8.31M|        return m_position;
 4191|  8.31M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|  3.61M|    {
 4123|  3.61M|        return m_is_contiguous;
 4124|  3.61M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|  49.5M|    {
 4195|  49.5M|        return m_end == nullptr;
 4196|  49.5M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   225k|{
 3715|   225k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   225k|                                          const CharT*, const CharT*>) {
 3717|   225k|        return {first, last};
 3718|   225k|    }
 3719|   225k|    else {
 3720|   225k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   225k|    }
 3722|   225k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|   864k|    {
 4211|   864k|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 864k]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|   864k|        return parent()->get_segment_starting_at(position());
 4217|   864k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|  26.5M|    {
 4205|  26.5M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  26.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  26.5M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  26.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|   864k|    {
 4101|   864k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   864k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 459k, False: 404k]
  |  |  ------------------
  ------------------
 4102|   864k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|   459k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|   459k|        }
 4105|   404k|        const auto start = pos - m_putback_buffer.size();
 4106|   404k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   404k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   404k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   404k|        return m_current_view.substr(start);
 4108|   404k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4199|  1.02M|    {
 4200|  1.02M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  1.02M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  1.02M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  1.96M|    {
 4190|  1.96M|        return m_position;
 4191|  1.96M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  1.18M|    {
 4123|  1.18M|        return m_is_contiguous;
 4124|  1.18M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  9.49M|    {
 3180|  9.49M|        return static_cast<D&>(*this);
 3181|  9.49M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  4.75M|    {
 2978|  4.75M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  4.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  4.75M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  4.75M|    {
 3005|  4.75M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  4.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  4.75M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  4.75M|    {
 3221|  4.75M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 11.3k, False: 4.74M]
  ------------------
 3222|  4.75M|                   ? nullptr
 3223|  4.75M|                   : std::addressof(*ranges::begin(derived()));
 3224|  4.75M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   638k|    {
 3180|   638k|        return static_cast<D&>(*this);
 3181|   638k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   319k|    {
 2978|   319k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   319k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   319k|    {
 3005|   319k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   319k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   319k|    {
 3221|   319k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 319k]
  ------------------
 3222|   319k|                   ? nullptr
 3223|   319k|                   : std::addressof(*ranges::begin(derived()));
 3224|   319k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|   868k|    {
 8169|   868k|        return ranges::subrange{begin(), end()};
 8170|   868k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|  2.54M|    {
 8153|  2.54M|        return m_current;
 8154|  2.54M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|   868k|    {
 8161|   868k|        return ranges::default_sentinel;
 8162|   868k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  13.2M|    {
 3316|  13.2M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  4.66M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.20M|    {
 1837|  1.20M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.20M|                                            std::forward<F>(f));
 1839|  1.20M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  1.20M|{
 1323|  1.20M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.20M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.20M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.20M|            return result(*std::forward<Exp>(exp));
 1327|  1.20M|        }
 1328|       |
 1329|  1.20M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.20M|        return result(unexpect, monostate{});
 1331|  1.20M|    }
 1332|  1.20M|    else {
 1333|  1.20M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.20M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.20M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.18M, False: 18.4k]
  |  |  ------------------
  ------------------
 1335|  1.20M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.20M|                   : result(unexpect,
 1337|  18.4k|                            trivial_invoke(std::forward<F>(f),
 1338|  18.4k|                                           std::forward<Exp>(exp).error()));
 1339|  1.20M|    }
 1340|  1.20M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  12.7M|    {
  485|  12.7M|        return m_has_value;
  486|  12.7M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  4.31M|    {
 1663|  4.31M|        return std::move(value());
 1664|  4.31M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  4.93M|    {
 1627|  4.93M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.93M|        return this->get_value();
 1629|  4.93M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  4.93M|    {
  451|  4.93M|        return m_value;
  452|  4.93M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  5.35M|    {
 1430|  5.35M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  5.35M|    {
  437|  5.35M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.80M|    {
 1177|  6.80M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  40.6k|{
 1211|  40.6k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  40.6k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  53.8k|    {
 1614|  53.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  53.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  53.8k|        return std::move(this->get_unexpected().error());
 1616|  53.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  72.4k|    {
  468|  72.4k|        return m_unexpected;
  469|  72.4k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   390k|    {
  361|   390k|        return m_unexpected;
  362|   390k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.18M|    {
 1486|  1.18M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.38M|    {
  447|  1.38M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|   294k|    {
 8169|   294k|        return ranges::subrange{begin(), end()};
 8170|   294k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|   759k|    {
 8153|   759k|        return m_current;
 8154|   759k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|   294k|    {
 8161|   294k|        return ranges::default_sentinel;
 8162|   294k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  3.81M|    {
 3316|  3.81M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   395k|    {
 1837|   395k|        return detail::transform_error_impl(std::move(*this),
 1838|   395k|                                            std::forward<F>(f));
 1839|   395k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|   395k|{
 1323|   395k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   395k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   395k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   395k|            return result(*std::forward<Exp>(exp));
 1327|   395k|        }
 1328|       |
 1329|   395k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   395k|        return result(unexpect, monostate{});
 1331|   395k|    }
 1332|   395k|    else {
 1333|   395k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   395k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   395k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 392k, False: 3.06k]
  |  |  ------------------
  ------------------
 1335|   395k|                   ? result(*std::forward<Exp>(exp))
 1336|   395k|                   : result(unexpect,
 1337|  3.06k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.06k|                                           std::forward<Exp>(exp).error()));
 1339|   395k|    }
 1340|   395k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.67M|    {
  485|  3.67M|        return m_has_value;
  486|  3.67M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  1.36M|    {
 1663|  1.36M|        return std::move(value());
 1664|  1.36M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.37M|    {
 1627|  1.37M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.37M|        return this->get_value();
 1629|  1.37M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.37M|    {
  451|  1.37M|        return m_value;
  452|  1.37M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  1.26M|    {
 1430|  1.26M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.26M|    {
  437|  1.26M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.26M|    {
 1177|  2.26M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  49.8k|    {
 1614|  49.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  49.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  49.8k|        return std::move(this->get_unexpected().error());
 1616|  49.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  51.4k|    {
  468|  51.4k|        return m_unexpected;
  469|  51.4k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|   551k|    {
 1486|   551k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|   998k|    {
  447|   998k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|   141k|    {
  347|   141k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   141k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   141k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   179k|    {
 1476|   179k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  1.19M|    {
  447|  1.19M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.97M|    {
 1177|  5.97M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  4.71M|    {
 1430|  4.71M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  4.71M|    {
  437|  4.71M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  7.00M|    {
 1598|  7.00M|        return has_value();
 1599|  7.00M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  10.9M|    {
  485|  10.9M|        return m_has_value;
  486|  10.9M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   216k|    {
 1604|   216k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   216k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   216k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   216k|        return this->get_unexpected().error();
 1606|   216k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   216k|    {
  468|   216k|        return m_unexpected;
  469|   216k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  3.03M|    {
 1663|  3.03M|        return std::move(value());
 1664|  3.03M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  3.76M|    {
 1627|  3.76M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.76M|        return this->get_value();
 1629|  3.76M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  3.76M|    {
  451|  3.76M|        return m_value;
  452|  3.76M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   362k|    {
 1476|   362k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|   829k|    {
  447|   829k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.26M|    {
 1177|  2.26M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  1.43M|    {
 1430|  1.43M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.43M|    {
  437|  1.43M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  2.65M|    {
 1598|  2.65M|        return has_value();
 1599|  2.65M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  4.20M|    {
  485|  4.20M|        return m_has_value;
  486|  4.20M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   436k|    {
 1604|   436k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   436k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   436k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   436k|        return this->get_unexpected().error();
 1606|   436k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   436k|    {
  468|   436k|        return m_unexpected;
  469|   436k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|   944k|    {
 1663|   944k|        return std::move(value());
 1664|   944k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.11M|    {
 1627|  1.11M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.11M|        return this->get_value();
 1629|  1.11M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  1.11M|    {
  451|  1.11M|        return m_value;
  452|  1.11M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.05M|    {
 1837|  1.05M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.05M|                                            std::forward<F>(f));
 1839|  1.05M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  1.05M|{
 1323|  1.05M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.05M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.05M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.05M|            return result(*std::forward<Exp>(exp));
 1327|  1.05M|        }
 1328|       |
 1329|  1.05M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.05M|        return result(unexpect, monostate{});
 1331|  1.05M|    }
 1332|  1.05M|    else {
 1333|  1.05M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.05M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.05M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.04M, False: 15.9k]
  |  |  ------------------
  ------------------
 1335|  1.05M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.05M|                   : result(unexpect,
 1337|  15.9k|                            trivial_invoke(std::forward<F>(f),
 1338|  15.9k|                                           std::forward<Exp>(exp).error()));
 1339|  1.05M|    }
 1340|  1.05M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  4.03M|    {
  485|  4.03M|        return m_has_value;
  486|  4.03M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.04M|    {
 1663|  1.04M|        return std::move(value());
 1664|  1.04M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.38M|    {
 1627|  1.38M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.38M|        return this->get_value();
 1629|  1.38M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.38M|    {
  451|  1.38M|        return m_value;
  452|  1.38M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  15.9k|    {
 1614|  15.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  15.9k|        return std::move(this->get_unexpected().error());
 1616|  15.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  20.7k|    {
  468|  20.7k|        return m_unexpected;
  469|  20.7k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.02M|    {
 1486|  1.02M|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  9.66M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   201k|    {
 1476|   201k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  10.5M|    {
 4280|  10.5M|        return x.is_at_end();
 4281|  10.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  25.7M|    {
 4324|  25.7M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 25.7M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  25.7M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 25.7M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  25.7M|        return !read_at_position();
 4331|  25.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|   110M|    {
 4304|   110M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   110M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   110M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   110M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 110M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   110M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   110M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 95.5M, False: 14.8M]
  |  |  ------------------
  ------------------
 4311|  95.5M|            return true;
 4312|  95.5M|        }
 4313|       |
 4314|  29.3M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 14.8M, False: 14.5M]
  ------------------
 4315|  14.8M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 278k, False: 14.5M]
  ------------------
 4316|   278k|                return false;
 4317|   278k|            }
 4318|  14.8M|        }
 4319|  14.5M|        return true;
 4320|  14.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|   142M|    {
 4081|   142M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   142M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  28.7M|    {
 4239|  28.7M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  28.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  28.7M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 28.7M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  28.7M|        auto res = read_at_position();
 4248|  28.7M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  28.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  28.7M|        return parent()->get_character_at(m_position);
 4250|  28.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  28.7M|    {
 4112|  28.7M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  28.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.3M, False: 10.4M]
  |  |  ------------------
  ------------------
 4113|  28.7M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  18.3M|            return m_putback_buffer[pos];
 4115|  18.3M|        }
 4116|  10.4M|        const auto start = pos - m_putback_buffer.size();
 4117|  10.4M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  10.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  10.4M|        return m_current_view[start];
 4119|  10.4M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  7.69M|    {
 1430|  7.69M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  7.69M|    {
  437|  7.69M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.76M|    {
 1177|  7.76M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  346|   129k|    {
  347|   129k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   129k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   129k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  72.4k|    {
 1476|  72.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  72.4k|    {
  447|  72.4k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|   195k|    {
  356|   195k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   195k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   195k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  3.39M|    {
 1598|  3.39M|        return has_value();
 1599|  3.39M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|   626k|    {
 1653|   626k|        return value();
 1654|   626k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  26.8M|    {
 4274|  26.8M|        return !(lhs == rhs);
 4275|  26.8M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  29.9M|    {
 4269|  29.9M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 29.9M, False: 0]
  |  Branch (4269:46): [True: 4.00M, False: 25.9M]
  ------------------
 4270|  29.9M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|  55.8M|    {
 4225|  55.8M|        ++m_position;
 4226|  55.8M|        (void)read_at_position();
 4227|  55.8M|        return *this;
 4228|  55.8M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|  65.9k|    {
  347|  65.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  65.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  65.9k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  13.9k|    {
 1476|  13.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  13.9k|    {
  447|  13.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.66M|    {
 1177|  1.66M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.64M|    {
 1430|  1.64M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|  1.64M|    {
  437|  1.64M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  1.66M|    {
 1598|  1.66M|        return has_value();
 1599|  1.66M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.32M|    {
  485|  3.32M|        return m_has_value;
  486|  3.32M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  13.9k|    {
 1604|  13.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  13.9k|        return this->get_unexpected().error();
 1606|  13.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  13.9k|    {
  468|  13.9k|        return m_unexpected;
  469|  13.9k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.64M|    {
 1663|  1.64M|        return std::move(value());
 1664|  1.64M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.64M|    {
 1627|  1.64M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.64M|        return this->get_value();
 1629|  1.64M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.64M|    {
  451|  1.64M|        return m_value;
  452|  1.64M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  36.8M|    {
 3334|  36.8M|        return m_sentinel;
 3335|  36.8M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  346|  60.8k|    {
  347|  60.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  60.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  60.8k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  12.0M|    {
  361|  12.0M|        return m_unexpected;
  362|  12.0M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  3.30M|    {
  356|  3.30M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.30M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  3.30M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  346|  14.6M|    {
  347|  14.6M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  14.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  14.6M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  14.6M|    {
  361|  14.6M|        return m_unexpected;
  362|  14.6M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  355|  14.6M|    {
  356|  14.6M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  14.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  14.6M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|   129k|{
 1211|   129k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   129k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  346|  3.11M|    {
  347|  3.11M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.11M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  3.11M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  18.6k|    {
 1604|  18.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  18.6k|        return this->get_unexpected().error();
 1606|  18.6k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  1.22M|    {
 1476|  1.22M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  1.26M|    {
  447|  1.26M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  13.2M|    {
 1177|  13.2M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|   632k|    {
 1430|   632k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|   632k|    {
  437|   632k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  6.71M|    {
 1476|  6.71M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  6.71M|    {
  447|  6.71M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  14.4M|    {
 1598|  14.4M|        return has_value();
 1599|  14.4M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  25.4M|    {
  485|  25.4M|        return m_has_value;
  486|  25.4M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  3.37M|    {
 1604|  3.37M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.37M|        return this->get_unexpected().error();
 1606|  3.37M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  3.37M|    {
  468|  3.37M|        return m_unexpected;
  469|  3.37M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|  1.29M|    {
 1430|  1.29M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  1.29M|    {
  437|  1.29M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.29M|    {
 1177|  1.29M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|    336|    {
 1476|    336|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|    336|    {
  447|    336|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|  3.38M|    {
 1653|  3.38M|        return value();
 1654|  3.38M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  6.50M|    {
 1627|  6.50M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.50M|        return this->get_value();
 1629|  6.50M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  6.50M|    {
  451|  6.50M|        return m_value;
  452|  6.50M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   114k|    {
 1598|   114k|        return has_value();
 1599|   114k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  2.59M|    {
  485|  2.59M|        return m_has_value;
  486|  2.59M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|  1.18M|    {
 1663|  1.18M|        return std::move(value());
 1664|  1.18M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|  1.29M|    {
 1627|  1.29M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.29M|        return this->get_value();
 1629|  1.29M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|  1.29M|    {
  451|  1.29M|        return m_value;
  452|  1.29M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  3.16M|    {
 1837|  3.16M|        return detail::transform_error_impl(std::move(*this),
 1838|  3.16M|                                            std::forward<F>(f));
 1839|  3.16M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  3.16M|{
 1323|  3.16M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.16M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.16M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.16M|            return result(*std::forward<Exp>(exp));
 1327|  3.16M|        }
 1328|       |
 1329|  3.16M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.16M|        return result(unexpect, monostate{});
 1331|  3.16M|    }
 1332|  3.16M|    else {
 1333|  3.16M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.16M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.16M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.12M, False: 35.3k]
  |  |  ------------------
  ------------------
 1335|  3.16M|                   ? result(*std::forward<Exp>(exp))
 1336|  3.16M|                   : result(unexpect,
 1337|  35.3k|                            trivial_invoke(std::forward<F>(f),
 1338|  35.3k|                                           std::forward<Exp>(exp).error()));
 1339|  3.16M|    }
 1340|  3.16M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|  4.61M|    {
 1430|  4.61M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  4.61M|    {
  437|  4.61M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  35.3k|    {
 1486|  35.3k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|  3.12M|    {
 1663|  3.12M|        return std::move(value());
 1664|  3.12M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|  1.36M|    {
 3330|  1.36M|        return m_iterator;
 3331|  1.36M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|  1.36M|    {
 3334|  1.36M|        return m_sentinel;
 3335|  1.36M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  7.97M|    {
 1598|  7.97M|        return has_value();
 1599|  7.97M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  12.5M|    {
  485|  12.5M|        return m_has_value;
  486|  12.5M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   266k|    {
 1604|   266k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   266k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   266k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   266k|        return this->get_unexpected().error();
 1606|   266k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   266k|    {
  468|   266k|        return m_unexpected;
  469|   266k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|  3.43M|    {
 1663|  3.43M|        return std::move(value());
 1664|  3.43M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  4.28M|    {
 1627|  4.28M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.28M|        return this->get_value();
 1629|  4.28M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.28M|    {
  451|  4.28M|        return m_value;
  452|  4.28M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.13M|{
  326|  2.13M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.13M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|  1.06M|    {
 3316|  1.06M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  15.1M|    {
 4291|  15.1M|        return !x.is_at_end();
 4292|  15.1M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  20.7k|    {
 1476|  20.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  20.7k|    {
  447|  20.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.62M|    {
 1177|  2.62M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  2.60M|    {
 1430|  2.60M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.60M|    {
  437|  2.60M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  1.56M|    {
 1598|  1.56M|        return has_value();
 1599|  1.56M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|   341k|    {
 1653|   341k|        return value();
 1654|   341k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  11.5k|    {
 1476|  11.5k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  11.5k|    {
  447|  11.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.42M|    {
 1177|  1.42M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  1.40M|    {
 1430|  1.40M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  1.40M|    {
  437|  1.40M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  1.42M|    {
 1598|  1.42M|        return has_value();
 1599|  1.42M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.84M|    {
  485|  2.84M|        return m_has_value;
  486|  2.84M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  11.5k|    {
 1604|  11.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  11.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  11.5k|        return this->get_unexpected().error();
 1606|  11.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  11.5k|    {
  468|  11.5k|        return m_unexpected;
  469|  11.5k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  1.40M|    {
 1663|  1.40M|        return std::move(value());
 1664|  1.40M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  1.40M|    {
 1627|  1.40M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.40M|        return this->get_value();
 1629|  1.40M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.40M|    {
  451|  1.40M|        return m_value;
  452|  1.40M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|  4.72k|    {
 1604|  4.72k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.72k|        return this->get_unexpected().error();
 1606|  4.72k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  1.07M|    {
 1476|  1.07M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.07M|    {
  447|  1.07M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.97M|    {
 1177|  5.97M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|   346k|    {
 1430|   346k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|   346k|    {
  437|   346k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  4.10M|    {
 1476|  4.10M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  4.10M|    {
  447|  4.10M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  7.02M|    {
 1598|  7.02M|        return has_value();
 1599|  7.02M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  11.9M|    {
  485|  11.9M|        return m_has_value;
  486|  11.9M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  2.84M|    {
 1604|  2.84M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.84M|        return this->get_unexpected().error();
 1606|  2.84M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  2.84M|    {
  468|  2.84M|        return m_unexpected;
  469|  2.84M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  1.07M|    {
 1430|  1.07M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  1.07M|    {
  437|  1.07M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.07M|    {
 1177|  1.07M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|    108|    {
 1476|    108|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|    108|    {
  447|    108|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|  1.11M|    {
 1653|  1.11M|        return value();
 1654|  1.11M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.11M|    {
 1627|  1.11M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.11M|        return this->get_value();
 1629|  1.11M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.11M|    {
  451|  1.11M|        return m_value;
  452|  1.11M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  28.6k|    {
 1598|  28.6k|        return has_value();
 1599|  28.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  2.14M|    {
  485|  2.14M|        return m_has_value;
  486|  2.14M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.04M|    {
 1663|  1.04M|        return std::move(value());
 1664|  1.04M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.07M|    {
 1627|  1.07M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.07M|        return this->get_value();
 1629|  1.07M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  1.07M|    {
  451|  1.07M|        return m_value;
  452|  1.07M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|   449k|    {
 1430|   449k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   449k|    {
  437|   449k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  2.00M|    {
 2855|  2.00M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  2.00M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  2.00M|    {
 2836|  2.00M|        return t.data();
 2837|  2.00M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|   740k|    {
 1476|   740k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|   740k|    {
  447|   740k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.43M|    {
 1177|  8.43M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  7.57M|    {
 1430|  7.57M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  7.57M|    {
  437|  7.57M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1662|  5.13M|    {
 1663|  5.13M|        return std::move(value());
 1664|  5.13M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  3.18M|{
 1211|  3.18M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  3.18M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|  1.18M|    {
 1837|  1.18M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.18M|                                            std::forward<F>(f));
 1839|  1.18M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|  1.18M|{
 1323|  1.18M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.18M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.18M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.18M|            return result(*std::forward<Exp>(exp));
 1327|  1.18M|        }
 1328|       |
 1329|  1.18M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.18M|        return result(unexpect, monostate{});
 1331|  1.18M|    }
 1332|  1.18M|    else {
 1333|  1.18M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.18M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.18M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.18M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.18M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.18M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.18M|    }
 1340|  1.18M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  1.18M|    {
 1430|  1.18M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|  1.18M|    {
  437|  1.18M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.18M|    {
 1177|  1.18M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.18M|    {
 1598|  1.18M|        return has_value();
 1599|  1.18M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.37M|    {
  485|  2.37M|        return m_has_value;
  486|  2.37M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  1.18M|    {
 1663|  1.18M|        return std::move(value());
 1664|  1.18M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  1.18M|    {
 1627|  1.18M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.18M|        return this->get_value();
 1629|  1.18M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.18M|    {
  451|  1.18M|        return m_value;
  452|  1.18M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  1.16M|    {
 1823|  1.16M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.16M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|  1.16M|{
 1323|  1.16M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.16M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.16M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.16M|            return result(*std::forward<Exp>(exp));
 1327|  1.16M|        }
 1328|       |
 1329|  1.16M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.16M|        return result(unexpect, monostate{});
 1331|  1.16M|    }
 1332|  1.16M|    else {
 1333|  1.16M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.16M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.16M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.16M]
  |  |  ------------------
  ------------------
 1335|  1.16M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.16M|                   : result(unexpect,
 1337|  1.16M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.16M|                                           std::forward<Exp>(exp).error()));
 1339|  1.16M|    }
 1340|  1.16M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1429|  62.1k|    {
 1430|  62.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  62.1k|    {
  437|  62.1k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|   853k|    {
 1653|   853k|        return value();
 1654|   853k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|   273k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|   113k|    {
 1673|   113k|        return &value();
 1674|   113k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   849k|    {
 2724|   849k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   849k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   849k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   849k|    {
 2705|   849k|        return decay_copy(t.begin());
 2706|   849k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   849k|{
 1949|   849k|    return SCN_FWD(t);
  ------------------
  |  |  930|   849k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   849k|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   518k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  1.04M|    {
 1837|  1.04M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.04M|                                            std::forward<F>(f));
 1839|  1.04M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|  1.04M|{
 1323|  1.04M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.04M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.04M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.04M|            return result(*std::forward<Exp>(exp));
 1327|  1.04M|        }
 1328|       |
 1329|  1.04M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.04M|        return result(unexpect, monostate{});
 1331|  1.04M|    }
 1332|  1.04M|    else {
 1333|  1.04M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.04M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.04M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.04M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.04M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.04M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.04M|    }
 1340|  1.04M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.04M|    {
 1430|  1.04M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  1.04M|    {
  437|  1.04M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.04M|    {
 1177|  1.04M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.04M|    {
 1598|  1.04M|        return has_value();
 1599|  1.04M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.08M|    {
  485|  2.08M|        return m_has_value;
  486|  2.08M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.04M|    {
 1663|  1.04M|        return std::move(value());
 1664|  1.04M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.04M|    {
 1627|  1.04M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.04M|        return this->get_value();
 1629|  1.04M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.04M|    {
  451|  1.04M|        return m_value;
  452|  1.04M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|  1.00M|    {
 1823|  1.00M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.00M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|  1.00M|{
 1323|  1.00M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.00M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.00M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.00M|            return result(*std::forward<Exp>(exp));
 1327|  1.00M|        }
 1328|       |
 1329|  1.00M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.00M|        return result(unexpect, monostate{});
 1331|  1.00M|    }
 1332|  1.00M|    else {
 1333|  1.00M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.00M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.00M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 1335|  1.00M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.00M|                   : result(unexpect,
 1337|  1.00M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.00M|                                           std::forward<Exp>(exp).error()));
 1339|  1.00M|    }
 1340|  1.00M|}
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1429|  60.9k|    {
 1430|  60.9k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|  60.9k|    {
  437|  60.9k|    }
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|  1.00M|    {
 3648|  1.00M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|   731k|    {
 1653|   731k|        return value();
 1654|   731k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  28.5k|    {
 1673|  28.5k|        return &value();
 1674|  28.5k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|  1.16M|    {
 3648|  1.16M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|   446k|    {
 1476|   446k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  3.18M|    {
 4280|  3.18M|        return x.is_at_end();
 4281|  3.18M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|  4.91M|    {
 4324|  4.91M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 4.91M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  4.91M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 4.91M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  4.91M|        return !read_at_position();
 4331|  4.91M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|  15.2M|    {
 4304|  15.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  15.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  15.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 15.2M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  15.2M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  15.2M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 13.3M, False: 1.93M]
  |  |  ------------------
  ------------------
 4311|  13.3M|            return true;
 4312|  13.3M|        }
 4313|       |
 4314|  3.71M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 1.93M, False: 1.77M]
  ------------------
 4315|  1.93M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 154k, False: 1.77M]
  ------------------
 4316|   154k|                return false;
 4317|   154k|            }
 4318|  1.93M|        }
 4319|  1.77M|        return true;
 4320|  1.93M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|  20.0M|    {
 4081|  20.0M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  20.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|  4.76M|    {
 4239|  4.76M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  4.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  4.76M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 4.76M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  4.76M|        auto res = read_at_position();
 4248|  4.76M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  4.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  4.76M|        return parent()->get_character_at(m_position);
 4250|  4.76M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|  4.76M|    {
 4112|  4.76M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  4.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.03M, False: 723k]
  |  |  ------------------
  ------------------
 4113|  4.76M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  4.03M|            return m_putback_buffer[pos];
 4115|  4.03M|        }
 4116|   723k|        const auto start = pos - m_putback_buffer.size();
 4117|   723k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   723k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   723k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|   723k|        return m_current_view[start];
 4119|   723k|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|  1.66M|{
 3807|  1.66M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  1.66M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  1.66M|    }
 3810|  1.66M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|  1.66M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  1.66M|    }
 3813|  1.66M|    else {
 3814|       |        // utf-32
 3815|  1.66M|        static_assert(sizeof(U) == 4);
 3816|  1.66M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  1.66M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|  1.66M|        return 1;
 3818|  1.66M|    }
 3819|  1.66M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  2.19M|    {
 1430|  2.19M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  2.19M|    {
  437|  2.19M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.25M|    {
 1177|  2.25M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  51.4k|    {
 1476|  51.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  51.4k|    {
  447|  51.4k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|   833k|    {
 1598|   833k|        return has_value();
 1599|   833k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1652|  10.2k|    {
 1653|  10.2k|        return value();
 1654|  10.2k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|  2.20M|    {
 4274|  2.20M|        return !(lhs == rhs);
 4275|  2.20M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|  3.03M|    {
 4269|  3.03M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 3.03M, False: 0]
  |  Branch (4269:46): [True: 994k, False: 2.04M]
  ------------------
 4270|  3.03M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|  5.60M|    {
 4225|  5.60M|        ++m_position;
 4226|  5.60M|        (void)read_at_position();
 4227|  5.60M|        return *this;
 4228|  5.60M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  1.66M|{
 4013|  1.66M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  1.66M|        return decode_utf8_code_point_exhaustive(input);
 4015|  1.66M|    }
 4016|  1.66M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|  1.66M|        return decode_utf16_code_point_exhaustive(input);
 4018|  1.66M|    }
 4019|  1.66M|    else {
 4020|  1.66M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  1.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|  1.66M|        auto cp = static_cast<char32_t>(input.front());
 4022|  1.66M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 168k, False: 1.49M]
  |  |  ------------------
  ------------------
 4023|   168k|            return invalid_code_point;
 4024|   168k|        }
 4025|  1.49M|        return cp;
 4026|  1.66M|    }
 4027|  1.66M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  2.29k|    {
 1476|  2.29k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  2.29k|    {
  447|  2.29k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   463k|    {
 1177|   463k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   460k|    {
 1430|   460k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|   460k|    {
  437|   460k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   463k|    {
 1598|   463k|        return has_value();
 1599|   463k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   926k|    {
  485|   926k|        return m_has_value;
  486|   926k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  2.29k|    {
 1604|  2.29k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.29k|        return this->get_unexpected().error();
 1606|  2.29k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.29k|    {
  468|  2.29k|        return m_unexpected;
  469|  2.29k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   460k|    {
 1663|   460k|        return std::move(value());
 1664|   460k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   460k|    {
 1627|   460k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   460k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   460k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   460k|        return this->get_value();
 1629|   460k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   460k|    {
  451|   460k|        return m_value;
  452|   460k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  8.04M|    {
 3334|  8.04M|        return m_sentinel;
 3335|  8.04M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  1.58k|    {
 1604|  1.58k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.58k|        return this->get_unexpected().error();
 1606|  1.58k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|   440k|    {
 1476|   440k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|   487k|    {
  447|   487k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.90M|    {
 1177|  3.90M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1429|  10.2k|    {
 1430|  10.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  436|  10.2k|    {
  437|  10.2k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  2.18M|    {
 1476|  2.18M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  2.18M|    {
  447|  2.18M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  4.29M|    {
 1598|  4.29M|        return has_value();
 1599|  4.29M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  7.69M|    {
  485|  7.69M|        return m_has_value;
  486|  7.69M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  1.38M|    {
 1604|  1.38M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.38M|        return this->get_unexpected().error();
 1606|  1.38M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.38M|    {
  468|  1.38M|        return m_unexpected;
  469|  1.38M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1429|   399k|    {
 1430|   399k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   399k|    {
  437|   399k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   399k|    {
 1177|   399k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|     70|    {
 1476|     70|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  446|     70|    {
  447|     70|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1652|   491k|    {
 1653|   491k|        return value();
 1654|   491k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.46M|    {
 1627|  1.46M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.46M|        return this->get_value();
 1629|  1.46M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.46M|    {
  451|  1.46M|        return m_value;
  452|  1.46M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|  7.01k|    {
 1598|  7.01k|        return has_value();
 1599|  7.01k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|   798k|    {
  485|   798k|        return m_has_value;
  486|   798k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1662|   392k|    {
 1663|   392k|        return std::move(value());
 1664|   392k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1626|   399k|    {
 1627|   399k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   399k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   399k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   399k|        return this->get_value();
 1629|   399k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   399k|    {
  451|   399k|        return m_value;
  452|   399k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.02M|    {
 1837|  1.02M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.02M|                                            std::forward<F>(f));
 1839|  1.02M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  1.02M|{
 1323|  1.02M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.02M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.02M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.02M|            return result(*std::forward<Exp>(exp));
 1327|  1.02M|        }
 1328|       |
 1329|  1.02M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.02M|        return result(unexpect, monostate{});
 1331|  1.02M|    }
 1332|  1.02M|    else {
 1333|  1.02M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.02M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.02M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 974k, False: 46.8k]
  |  |  ------------------
  ------------------
 1335|  1.02M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.02M|                   : result(unexpect,
 1337|  46.8k|                            trivial_invoke(std::forward<F>(f),
 1338|  46.8k|                                           std::forward<Exp>(exp).error()));
 1339|  1.02M|    }
 1340|  1.02M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1429|  1.21M|    {
 1430|  1.21M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  1.21M|    {
  437|  1.21M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1485|  46.8k|    {
 1486|  46.8k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1662|   974k|    {
 1663|   974k|        return std::move(value());
 1664|   974k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|   251k|    {
 3330|   251k|        return m_iterator;
 3331|   251k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|   251k|    {
 3334|   251k|        return m_sentinel;
 3335|   251k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  2.65M|    {
 1598|  2.65M|        return has_value();
 1599|  2.65M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.28M|    {
  485|  4.28M|        return m_has_value;
  486|  4.28M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   605k|    {
 1604|   605k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   605k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   605k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   605k|        return this->get_unexpected().error();
 1606|   605k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   605k|    {
  468|   605k|        return m_unexpected;
  469|   605k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|   859k|    {
 1663|   859k|        return std::move(value());
 1664|   859k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  1.02M|    {
 1627|  1.02M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.02M|        return this->get_value();
 1629|  1.02M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.02M|    {
  451|  1.02M|        return m_value;
  452|  1.02M|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   468k|{
  304|   468k|    return p;
  305|   468k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   468k|{
  326|   468k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   468k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   468k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|   234k|    {
 3316|   234k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  1.72M|    {
 4291|  1.72M|        return !x.is_at_end();
 4292|  1.72M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  50.3k|    {
 1476|  50.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  50.3k|    {
  447|  50.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.94M|    {
 1177|  1.94M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  1.89M|    {
 1430|  1.89M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.89M|    {
  437|  1.89M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   526k|    {
 1598|   526k|        return has_value();
 1599|   526k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.36M|    {
  485|  3.36M|        return m_has_value;
  486|  3.36M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  4.09k|    {
 1653|  4.09k|        return value();
 1654|  4.09k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.37M|    {
 1627|  1.37M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.37M|        return this->get_value();
 1629|  1.37M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.37M|    {
  451|  1.37M|        return m_value;
  452|  1.37M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  2.29k|    {
 1476|  2.29k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  2.29k|    {
  447|  2.29k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   463k|    {
 1177|   463k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|   461k|    {
 1430|   461k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|   461k|    {
  437|   461k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   395k|    {
 1837|   395k|        return detail::transform_error_impl(std::move(*this),
 1838|   395k|                                            std::forward<F>(f));
 1839|   395k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   395k|{
 1323|   395k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   395k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   395k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   395k|            return result(*std::forward<Exp>(exp));
 1327|   395k|        }
 1328|       |
 1329|   395k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   395k|        return result(unexpect, monostate{});
 1331|   395k|    }
 1332|   395k|    else {
 1333|   395k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   395k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   395k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 392k, False: 3.06k]
  |  |  ------------------
  ------------------
 1335|   395k|                   ? result(*std::forward<Exp>(exp))
 1336|   395k|                   : result(unexpect,
 1337|  3.06k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.06k|                                           std::forward<Exp>(exp).error()));
 1339|   395k|    }
 1340|   395k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  1.36M|    {
 1663|  1.36M|        return std::move(value());
 1664|  1.36M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  49.9k|    {
 1614|  49.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  49.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  49.9k|        return std::move(this->get_unexpected().error());
 1616|  49.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  50.3k|    {
  468|  50.3k|        return m_unexpected;
  469|  50.3k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|   466k|    {
 1486|   466k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|   463k|    {
 1598|   463k|        return has_value();
 1599|   463k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|   927k|    {
  485|   927k|        return m_has_value;
  486|   927k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.29k|    {
 1604|  2.29k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.29k|        return this->get_unexpected().error();
 1606|  2.29k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.29k|    {
  468|  2.29k|        return m_unexpected;
  469|  2.29k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|   461k|    {
 1663|   461k|        return std::move(value());
 1664|   461k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|   461k|    {
 1627|   461k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   461k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   461k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   461k|        return this->get_value();
 1629|   461k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|   461k|    {
  451|   461k|        return m_value;
  452|   461k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|    398|    {
 1604|    398|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    398|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    398|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    398|        return this->get_unexpected().error();
 1606|    398|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|   440k|    {
 1476|   440k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|   486k|    {
  447|   486k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.20M|    {
 1177|  3.20M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1429|  4.09k|    {
 1430|  4.09k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  436|  4.09k|    {
  437|  4.09k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  1.65M|    {
 1476|  1.65M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  1.65M|    {
  447|  1.65M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  3.59M|    {
 1598|  3.59M|        return has_value();
 1599|  3.59M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  6.51M|    {
  485|  6.51M|        return m_has_value;
  486|  6.51M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  1.29M|    {
 1604|  1.29M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.29M|        return this->get_unexpected().error();
 1606|  1.29M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.29M|    {
  468|  1.29M|        return m_unexpected;
  469|  1.29M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|   395k|    {
 1430|   395k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   395k|    {
  437|   395k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   395k|    {
 1177|   395k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|     24|    {
 1476|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|     24|    {
  447|     24|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1652|   177k|    {
 1653|   177k|        return value();
 1654|   177k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  1.15M|    {
 1627|  1.15M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.15M|        return this->get_value();
 1629|  1.15M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.15M|    {
  451|  1.15M|        return m_value;
  452|  1.15M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.44k|    {
 1598|  2.44k|        return has_value();
 1599|  2.44k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|   790k|    {
  485|   790k|        return m_has_value;
  486|   790k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|   392k|    {
 1663|   392k|        return std::move(value());
 1664|   392k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|   395k|    {
 1627|   395k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   395k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   395k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   395k|        return this->get_value();
 1629|   395k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   395k|    {
  451|   395k|        return m_value;
  452|   395k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.02M|    {
 1837|  1.02M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.02M|                                            std::forward<F>(f));
 1839|  1.02M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  1.02M|{
 1323|  1.02M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.02M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.02M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.02M|            return result(*std::forward<Exp>(exp));
 1327|  1.02M|        }
 1328|       |
 1329|  1.02M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.02M|        return result(unexpect, monostate{});
 1331|  1.02M|    }
 1332|  1.02M|    else {
 1333|  1.02M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.02M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.02M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 974k, False: 46.8k]
  |  |  ------------------
  ------------------
 1335|  1.02M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.02M|                   : result(unexpect,
 1337|  46.8k|                            trivial_invoke(std::forward<F>(f),
 1338|  46.8k|                                           std::forward<Exp>(exp).error()));
 1339|  1.02M|    }
 1340|  1.02M|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  1.06M|    {
 1430|  1.06M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.06M|    {
  437|  1.06M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|  46.8k|    {
 1486|  46.8k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|   974k|    {
 1663|   974k|        return std::move(value());
 1664|   974k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   319k|    {
 2855|   319k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   319k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   319k|    {
 2836|   319k|        return t.data();
 2837|   319k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|   392k|    {
 1837|   392k|        return detail::transform_error_impl(std::move(*this),
 1838|   392k|                                            std::forward<F>(f));
 1839|   392k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|   392k|{
 1323|   392k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   392k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   392k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   392k|            return result(*std::forward<Exp>(exp));
 1327|   392k|        }
 1328|       |
 1329|   392k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   392k|        return result(unexpect, monostate{});
 1331|   392k|    }
 1332|   392k|    else {
 1333|   392k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   392k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   392k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 392k, False: 0]
  |  |  ------------------
  ------------------
 1335|   392k|                   ? result(*std::forward<Exp>(exp))
 1336|   392k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   392k|    }
 1340|   392k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|   392k|    {
 1430|   392k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  436|   392k|    {
  437|   392k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   392k|    {
 1177|   392k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   392k|    {
 1598|   392k|        return has_value();
 1599|   392k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   784k|    {
  485|   784k|        return m_has_value;
  486|   784k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|   392k|    {
 1663|   392k|        return std::move(value());
 1664|   392k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|   392k|    {
 1627|   392k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   392k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   392k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   392k|        return this->get_value();
 1629|   392k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   392k|    {
  451|   392k|        return m_value;
  452|   392k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|   548k|    {
 1823|   548k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   548k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1322|   548k|{
 1323|   548k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   548k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   548k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   548k|            return result(*std::forward<Exp>(exp));
 1327|   548k|        }
 1328|       |
 1329|   548k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   548k|        return result(unexpect, monostate{});
 1331|   548k|    }
 1332|   548k|    else {
 1333|   548k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   548k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   548k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 548k]
  |  |  ------------------
  ------------------
 1335|   548k|                   ? result(*std::forward<Exp>(exp))
 1336|   548k|                   : result(unexpect,
 1337|   548k|                            trivial_invoke(std::forward<F>(f),
 1338|   548k|                                           std::forward<Exp>(exp).error()));
 1339|   548k|    }
 1340|   548k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|   169k|    {
 1653|   169k|        return value();
 1654|   169k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|  69.7k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|  6.94k|    {
 1673|  6.94k|        return &value();
 1674|  6.94k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   322k|    {
 2724|   322k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   322k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   322k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   322k|    {
 2705|   322k|        return decay_copy(t.begin());
 2706|   322k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   322k|{
 1949|   322k|    return SCN_FWD(t);
  ------------------
  |  |  930|   322k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   322k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   166k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   392k|    {
 1837|   392k|        return detail::transform_error_impl(std::move(*this),
 1838|   392k|                                            std::forward<F>(f));
 1839|   392k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|   392k|{
 1323|   392k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   392k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   392k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   392k|            return result(*std::forward<Exp>(exp));
 1327|   392k|        }
 1328|       |
 1329|   392k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   392k|        return result(unexpect, monostate{});
 1331|   392k|    }
 1332|   392k|    else {
 1333|   392k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   392k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   392k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 392k, False: 0]
  |  |  ------------------
  ------------------
 1335|   392k|                   ? result(*std::forward<Exp>(exp))
 1336|   392k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   392k|    }
 1340|   392k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   392k|    {
 1430|   392k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|   392k|    {
  437|   392k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   392k|    {
 1177|   392k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   392k|    {
 1598|   392k|        return has_value();
 1599|   392k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   785k|    {
  485|   785k|        return m_has_value;
  486|   785k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   392k|    {
 1663|   392k|        return std::move(value());
 1664|   392k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   392k|    {
 1627|   392k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   392k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   392k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   392k|        return this->get_value();
 1629|   392k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   392k|    {
  451|   392k|        return m_value;
  452|   392k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|   463k|    {
 1823|   463k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   463k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|   463k|{
 1323|   463k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   463k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   463k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   463k|            return result(*std::forward<Exp>(exp));
 1327|   463k|        }
 1328|       |
 1329|   463k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   463k|        return result(unexpect, monostate{});
 1331|   463k|    }
 1332|   463k|    else {
 1333|   463k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   463k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   463k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 463k]
  |  |  ------------------
  ------------------
 1335|   463k|                   ? result(*std::forward<Exp>(exp))
 1336|   463k|                   : result(unexpect,
 1337|   463k|                            trivial_invoke(std::forward<F>(f),
 1338|   463k|                                           std::forward<Exp>(exp).error()));
 1339|   463k|    }
 1340|   463k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|   463k|    {
 3648|   463k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|   169k|    {
 1653|   169k|        return value();
 1654|   169k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  2.42k|    {
 1673|  2.42k|        return &value();
 1674|  2.42k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3647|   548k|    {
 3648|   548k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1429|   117k|    {
 1430|   117k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  436|   117k|    {
  437|   117k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|   112k|{
 3654|   112k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|   112k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   952k|    {
 2855|   952k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   952k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   952k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   952k|    {
 2836|   952k|        return t.data();
 2837|   952k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|  2.04M|    {
 5466|  2.04M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  2.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.04M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  2.04M|        return static_cast<std::size_t>(m_desc &
 5471|  2.04M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  2.04M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|  4.09M|    {
 5491|  4.09M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  4.09M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|  2.04M|    {
 5434|  2.04M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  2.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.04M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  2.04M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  2.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.04M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  2.04M|        const auto t = type(id);
 5446|  2.04M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  2.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.04M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  2.04M|        basic_scan_arg<Context> arg;
 5451|  2.04M|        arg.m_type = t;
 5452|  2.04M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 2.04M, False: 0]
  ------------------
 5453|  2.04M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  2.04M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  2.04M|        return arg;
 5459|  2.04M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|  2.04M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  2.04M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  2.04M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  2.04M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  2.04M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|  2.04M|    {
 5495|  2.04M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  2.04M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|  3.87M|    {
 5247|  3.87M|        return m_type != detail::arg_type::none_type;
 5248|  3.87M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   313k|{
 8417|   313k|#define SCN_VISIT(Type)                                         \
 8418|   313k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   313k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   313k|    }                                                           \
 8421|   313k|    else {                                                      \
 8422|   313k|        return vis(monostate_val);                              \
 8423|   313k|    }
 8424|       |
 8425|   313k|    monostate monostate_val{};
 8426|       |
 8427|   313k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 313k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 313k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 313k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 313k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 313k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 313k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 313k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 313k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 313k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 313k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 313k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 313k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 313k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 313k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 313k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   100k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 100k, False: 213k]
  ------------------
 8459|   100k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   100k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   100k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   100k|    }                                                           \
  |  | 8421|   100k|    else {                                                      \
  |  | 8422|   100k|        return vis(monostate_val);                              \
  |  | 8423|   100k|    }
  ------------------
 8460|   105k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 105k, False: 207k]
  ------------------
 8461|   105k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   105k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   105k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   105k|    }                                                           \
  |  | 8421|   105k|    else {                                                      \
  |  | 8422|   105k|        return vis(monostate_val);                              \
  |  | 8423|   105k|    }
  ------------------
 8462|   107k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 107k, False: 205k]
  ------------------
 8463|   107k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   107k|    }                                                           \
  |  | 8421|   107k|    else {                                                      \
  |  | 8422|   107k|        return vis(monostate_val);                              \
  |  | 8423|   107k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 313k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 313k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 313k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 313k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 313k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 313k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 313k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 313k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 313k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   313k|            SCN_CLANG_POP
 8495|   313k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|  1.61M|    {
 5545|  1.61M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|   868k|    {
 8138|   868k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|  1.61M|    {
 8056|  1.61M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|  1.20M|{
 4344|  1.20M|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 1.20M]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  1.20M|    return ranges::subrange{forward_iterator{this, 0},
 4349|  1.20M|                            ranges::default_sentinel};
 4350|  1.20M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4176|  1.20M|    {
 4177|  1.20M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  1.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  1.20M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  1.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  1.20M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   335k|{
 8417|   335k|#define SCN_VISIT(Type)                                         \
 8418|   335k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   335k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   335k|    }                                                           \
 8421|   335k|    else {                                                      \
 8422|   335k|        return vis(monostate_val);                              \
 8423|   335k|    }
 8424|       |
 8425|   335k|    monostate monostate_val{};
 8426|       |
 8427|   335k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 335k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 335k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 335k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 335k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 335k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 335k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 335k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 335k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 335k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 335k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 335k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 335k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 335k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 335k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 335k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   107k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 107k, False: 227k]
  ------------------
 8459|   107k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   107k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   107k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   107k|    }                                                           \
  |  | 8421|   107k|    else {                                                      \
  |  | 8422|   107k|        return vis(monostate_val);                              \
  |  | 8423|   107k|    }
  ------------------
 8460|   113k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 113k, False: 221k]
  ------------------
 8461|   113k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   113k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   113k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   113k|    }                                                           \
  |  | 8421|   113k|    else {                                                      \
  |  | 8422|   113k|        return vis(monostate_val);                              \
  |  | 8423|   113k|    }
  ------------------
 8462|   114k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 114k, False: 220k]
  ------------------
 8463|   114k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   114k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   114k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   114k|    }                                                           \
  |  | 8421|   114k|    else {                                                      \
  |  | 8422|   114k|        return vis(monostate_val);                              \
  |  | 8423|   114k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 335k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 335k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 335k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 335k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 335k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 335k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 335k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 335k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 335k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   335k|            SCN_CLANG_POP
 8495|   335k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   746k|{
 7044|   746k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   746k|    handler.check_args_exhausted();
 7046|   746k|    return handler.get_error();
 7047|   746k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   746k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   746k|    auto begin = format.data();
 7013|   746k|    auto it = begin;
 7014|   746k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.43M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 746k, False: 684k]
  ------------------
 7017|   746k|        const auto ch = *it++;
 7018|   746k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 746k, False: 0]
  ------------------
 7019|   746k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   746k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   746k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 62.7k, False: 684k]
  ------------------
 7023|  62.7k|                return;
 7024|  62.7k|            }
 7025|   746k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   746k|    }
 7036|       |
 7037|   684k|    handler.on_literal_text(begin, end);
 7038|   684k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|   746k|{
 6942|   746k|    struct id_adapter {
 6943|   746k|        constexpr void operator()()
 6944|   746k|        {
 6945|   746k|            arg_id = handler.on_arg_id();
 6946|   746k|        }
 6947|   746k|        constexpr void operator()(std::size_t id)
 6948|   746k|        {
 6949|   746k|            arg_id = handler.on_arg_id(id);
 6950|   746k|        }
 6951|       |
 6952|   746k|        constexpr void on_error(const char* msg)
 6953|   746k|        {
 6954|   746k|            SCN_UNLIKELY_ATTR
 6955|   746k|            handler.on_error(msg);
 6956|   746k|        }
 6957|       |
 6958|   746k|        Handler& handler;
 6959|   746k|        std::size_t arg_id;
 6960|   746k|    };
 6961|       |
 6962|   746k|    ++begin;
 6963|   746k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   746k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 746k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   746k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 746k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   746k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 746k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   746k|    else {
 6975|   746k|        auto adapter = id_adapter{handler, 0};
 6976|   746k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   746k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   746k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 746k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   746k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 746k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   746k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 746k, False: 0]
  ------------------
 6987|   746k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   746k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 746k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   746k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   746k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 746k]
  |  |  |  Branch (859:45): [True: 0, False: 746k]
  |  |  |  Branch (859:45): [True: 0, False: 746k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   746k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   746k|    }
 7003|   746k|    return begin + 1;
 7004|   746k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|  1.61M|    {
 8039|  1.61M|        return m_args.get(id);
 8040|  1.61M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  1.61M|    {
 8049|  1.61M|        return m_locale;
 8050|  1.61M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  1.61M|    {
 5566|  1.61M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.61M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  1.61M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  1.61M|        do_check_arg_id(id);
 5574|  1.61M|        return id;
 5575|  1.61M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|  1.61M|{
 6054|  1.61M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  1.61M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  1.61M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   746k|{
 6443|   746k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   746k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   746k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   746k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 746k, False: 0]
  |  Branch (6444:26): [True: 0, False: 746k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   746k|    handler();
 6449|   746k|    return begin;
 6450|   746k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   746k|        {
 6945|   746k|            arg_id = handler.on_arg_id();
 6946|   746k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|  3.23M|    {
 5252|  3.23M|        return m_type;
 5253|  3.23M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  1.61M|    {
 5561|  1.61M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  1.61M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|  3.23M|    {
 5550|  3.23M|        return m_format.data();
 5551|  3.23M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   746k|    {
 7122|   746k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   746k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   746k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   746k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|   746k|{
 6858|   746k|    auto do_presentation = [&]() -> const CharT* {
 6859|   746k|        if (*begin == CharT{'['}) {
 6860|   746k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   746k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   746k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   746k|                return begin;
 6866|   746k|            }
 6867|   746k|            handler.on_character_set_string(set);
 6868|   746k|            return begin;
 6869|   746k|        }
 6870|   746k|        if (*begin == CharT{'/'}) {
 6871|   746k|            return parse_presentation_regex(begin, end, handler);
 6872|   746k|        }
 6873|   746k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   746k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   746k|            handler.on_error("Invalid type specifier in format string");
 6876|   746k|            return begin;
 6877|   746k|        }
 6878|   746k|        handler.on_type(type);
 6879|   746k|        return begin;
 6880|   746k|    };
 6881|       |
 6882|   746k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 746k, False: 0]
  |  Branch (6882:28): [True: 746k, False: 0]
  ------------------
 6883|   746k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 746k, False: 0]
  |  Branch (6883:36): [True: 538k, False: 208k]
  ------------------
 6884|   538k|        return do_presentation();
 6885|   538k|    }
 6886|       |
 6887|   208k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 208k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   208k|    begin = parse_align(begin, end, handler);
 6893|   208k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 208k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   208k|    begin = parse_width(begin, end, handler);
 6899|   208k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 208k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   208k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 208k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   208k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 208k, False: 0]
  ------------------
 6918|   208k|        handler.on_localized();
 6919|   208k|        ++begin;
 6920|   208k|    }
 6921|   208k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 208k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   208k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 208k, False: 0]
  |  Branch (6926:25): [True: 0, False: 208k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   208k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 208k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   208k|    return begin;
 6935|   208k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  1.61M|{
 6507|  1.61M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 1.15M, False: 456k]
  |  Branch (6507:33): [True: 1.15M, False: 0]
  ------------------
 6508|  1.61M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 456k, False: 0]
  |  Branch (6508:33): [True: 456k, False: 0]
  ------------------
 6509|  1.61M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   538k|    auto do_presentation = [&]() -> const CharT* {
 6859|   538k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 538k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   538k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 538k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   538k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   538k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   538k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 538k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   538k|        handler.on_type(type);
 6879|   538k|        return begin;
 6880|   538k|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  1.15M|{
 6455|  1.15M|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 1.15M]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 1.15M]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 1.15M]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 1.15M]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 1.15M]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 1.15M]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 1.15M]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 1.15M]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 1.15M]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 1.15M]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   494k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 494k, False: 664k]
  ------------------
 6474|   494k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 1.15M]
  ------------------
 6475|   494k|            return presentation_type::float_hex;
 6476|  40.5k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 40.5k, False: 1.11M]
  ------------------
 6477|  40.5k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 1.15M]
  ------------------
 6478|  40.5k|            return presentation_type::float_scientific;
 6479|   235k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 235k, False: 923k]
  ------------------
 6480|   235k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 1.15M]
  ------------------
 6481|   235k|            return presentation_type::float_fixed;
 6482|   388k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 388k, False: 770k]
  ------------------
 6483|   388k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 1.15M]
  ------------------
 6484|   388k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 1.15M]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 1.15M]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 1.15M]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 1.15M]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 1.15M]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 1.15M]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 1.15M]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|  1.15M|    }
 6502|  1.15M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|   208k|{
 6532|   208k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   208k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   208k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   208k|    auto check_align = [](wchar_t ch) {
 6535|   208k|        switch (ch) {
 6536|   208k|            case L'<':
 6537|   208k|                return align_type::left;
 6538|   208k|            case L'>':
 6539|   208k|                return align_type::right;
 6540|   208k|            case L'^':
 6541|   208k|                return align_type::center;
 6542|   208k|            default:
 6543|   208k|                return align_type::none;
 6544|   208k|        }
 6545|   208k|    };
 6546|       |
 6547|   208k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   208k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   417k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 208k]
  |  |  |  Branch (859:45): [True: 0, False: 208k]
  |  |  |  Branch (859:45): [True: 0, False: 208k]
  |  |  ------------------
  ------------------
 6549|   208k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   208k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   208k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   208k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   208k|    const auto begin_before_fill = begin;
 6559|   208k|    begin += potential_fill_len;
 6560|       |
 6561|   208k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 208k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   208k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   208k|    const auto begin_after_fill = begin;
 6567|   208k|    ++begin;
 6568|       |
 6569|   208k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 208k, False: 0]
  ------------------
 6570|   208k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 208k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   208k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 208k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   208k|    }
 6578|       |
 6579|   208k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 208k, False: 0]
  ------------------
 6580|   208k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 208k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   208k|        return begin_before_fill;
 6585|   208k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   208k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|   456k|{
 6514|   456k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   456k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   456k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   456k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   456k|        return 1;
 6517|   456k|    }
 6518|   456k|    else {
 6519|   456k|        const auto lengths =
 6520|   456k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   456k|            "\3\4";
 6522|   456k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   456k|        return len;
 6524|   456k|    }
 6525|   456k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   417k|    auto check_align = [](wchar_t ch) {
 6535|   417k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 417k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 417k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 417k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   417k|            default:
  ------------------
  |  Branch (6542:13): [True: 417k, False: 0]
  ------------------
 6543|   417k|                return align_type::none;
 6544|   417k|        }
 6545|   417k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|   208k|{
 6597|   208k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   208k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   208k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   208k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 208k, False: 0]
  |  Branch (6599:33): [True: 0, False: 208k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   208k|    return begin;
 6610|   208k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|   208k|    {
 7127|   208k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   208k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 208k, False: 0]
  ------------------
 7129|   208k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 208k, False: 0]
  ------------------
 7130|   208k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 208k]
  ------------------
 7131|   208k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   208k|        Handler::on_localized();
 7139|   208k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   746k|{
 8417|   746k|#define SCN_VISIT(Type)                                         \
 8418|   746k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   746k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   746k|    }                                                           \
 8421|   746k|    else {                                                      \
 8422|   746k|        return vis(monostate_val);                              \
 8423|   746k|    }
 8424|       |
 8425|   746k|    monostate monostate_val{};
 8426|       |
 8427|   746k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 746k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 746k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 746k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 746k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 746k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 746k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 746k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 746k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 746k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 746k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 746k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 746k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 746k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 746k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 746k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   241k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 241k, False: 505k]
  ------------------
 8459|   241k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   241k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   241k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   241k|    }                                                           \
  |  | 8421|   241k|    else {                                                      \
  |  | 8422|   241k|        return vis(monostate_val);                              \
  |  | 8423|   241k|    }
  ------------------
 8460|   251k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 251k, False: 495k]
  ------------------
 8461|   251k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   251k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   251k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   251k|    }                                                           \
  |  | 8421|   251k|    else {                                                      \
  |  | 8422|   251k|        return vis(monostate_val);                              \
  |  | 8423|   251k|    }
  ------------------
 8462|   253k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 253k, False: 492k]
  ------------------
 8463|   253k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   253k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   253k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   253k|    }                                                           \
  |  | 8421|   253k|    else {                                                      \
  |  | 8422|   253k|        return vis(monostate_val);                              \
  |  | 8423|   253k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 746k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 746k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 746k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 746k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 746k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 746k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 746k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 746k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 746k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   746k|            SCN_CLANG_POP
 8495|   746k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   868k|{
 7044|   868k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   868k|    handler.check_args_exhausted();
 7046|   868k|    return handler.get_error();
 7047|   868k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   868k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   868k|    auto begin = format.data();
 7013|   868k|    auto it = begin;
 7014|   868k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.67M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 868k, False: 805k]
  ------------------
 7017|   868k|        const auto ch = *it++;
 7018|   868k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 868k, False: 0]
  ------------------
 7019|   868k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   868k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   868k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 62.7k, False: 805k]
  ------------------
 7023|  62.7k|                return;
 7024|  62.7k|            }
 7025|   868k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   868k|    }
 7036|       |
 7037|   805k|    handler.on_literal_text(begin, end);
 7038|   805k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|   805k|    {
 8175|   805k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   805k|    static_cast<    \
  |  |  929|   805k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   805k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|   868k|{
 6942|   868k|    struct id_adapter {
 6943|   868k|        constexpr void operator()()
 6944|   868k|        {
 6945|   868k|            arg_id = handler.on_arg_id();
 6946|   868k|        }
 6947|   868k|        constexpr void operator()(std::size_t id)
 6948|   868k|        {
 6949|   868k|            arg_id = handler.on_arg_id(id);
 6950|   868k|        }
 6951|       |
 6952|   868k|        constexpr void on_error(const char* msg)
 6953|   868k|        {
 6954|   868k|            SCN_UNLIKELY_ATTR
 6955|   868k|            handler.on_error(msg);
 6956|   868k|        }
 6957|       |
 6958|   868k|        Handler& handler;
 6959|   868k|        std::size_t arg_id;
 6960|   868k|    };
 6961|       |
 6962|   868k|    ++begin;
 6963|   868k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   868k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 868k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   868k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 868k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   868k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 868k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   868k|    else {
 6975|   868k|        auto adapter = id_adapter{handler, 0};
 6976|   868k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   868k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   868k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 868k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   868k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 868k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   868k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 868k, False: 0]
  ------------------
 6987|   868k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   868k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 868k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   868k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   868k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 868k]
  |  |  |  Branch (859:45): [True: 0, False: 868k]
  |  |  |  Branch (859:45): [True: 0, False: 868k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   868k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   868k|    }
 7003|   868k|    return begin + 1;
 7004|   868k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   868k|{
 6443|   868k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   868k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   868k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   868k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 868k, False: 0]
  |  Branch (6444:26): [True: 0, False: 868k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   868k|    handler();
 6449|   868k|    return begin;
 6450|   868k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   868k|        {
 6945|   868k|            arg_id = handler.on_arg_id();
 6946|   868k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|   868k|    {
 7122|   868k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   868k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   868k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   868k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|   868k|{
 6858|   868k|    auto do_presentation = [&]() -> const CharT* {
 6859|   868k|        if (*begin == CharT{'['}) {
 6860|   868k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   868k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   868k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   868k|                return begin;
 6866|   868k|            }
 6867|   868k|            handler.on_character_set_string(set);
 6868|   868k|            return begin;
 6869|   868k|        }
 6870|   868k|        if (*begin == CharT{'/'}) {
 6871|   868k|            return parse_presentation_regex(begin, end, handler);
 6872|   868k|        }
 6873|   868k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   868k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   868k|            handler.on_error("Invalid type specifier in format string");
 6876|   868k|            return begin;
 6877|   868k|        }
 6878|   868k|        handler.on_type(type);
 6879|   868k|        return begin;
 6880|   868k|    };
 6881|       |
 6882|   868k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 868k, False: 0]
  |  Branch (6882:28): [True: 868k, False: 0]
  ------------------
 6883|   868k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 868k, False: 0]
  |  Branch (6883:36): [True: 621k, False: 247k]
  ------------------
 6884|   621k|        return do_presentation();
 6885|   621k|    }
 6886|       |
 6887|   247k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 247k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   247k|    begin = parse_align(begin, end, handler);
 6893|   247k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 247k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   247k|    begin = parse_width(begin, end, handler);
 6899|   247k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 247k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   247k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 247k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   247k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 247k, False: 0]
  ------------------
 6918|   247k|        handler.on_localized();
 6919|   247k|        ++begin;
 6920|   247k|    }
 6921|   247k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 247k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   247k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 247k, False: 0]
  |  Branch (6926:25): [True: 0, False: 247k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   247k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 247k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   247k|    return begin;
 6935|   247k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   621k|    auto do_presentation = [&]() -> const CharT* {
 6859|   621k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 621k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   621k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 621k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   621k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   621k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   621k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 621k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   621k|        handler.on_type(type);
 6879|   621k|        return begin;
 6880|   621k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|   247k|{
 6532|   247k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   247k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   247k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   247k|    auto check_align = [](wchar_t ch) {
 6535|   247k|        switch (ch) {
 6536|   247k|            case L'<':
 6537|   247k|                return align_type::left;
 6538|   247k|            case L'>':
 6539|   247k|                return align_type::right;
 6540|   247k|            case L'^':
 6541|   247k|                return align_type::center;
 6542|   247k|            default:
 6543|   247k|                return align_type::none;
 6544|   247k|        }
 6545|   247k|    };
 6546|       |
 6547|   247k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   247k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   494k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 247k]
  |  |  |  Branch (859:45): [True: 0, False: 247k]
  |  |  |  Branch (859:45): [True: 0, False: 247k]
  |  |  ------------------
  ------------------
 6549|   247k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   247k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   247k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   247k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   247k|    const auto begin_before_fill = begin;
 6559|   247k|    begin += potential_fill_len;
 6560|       |
 6561|   247k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 247k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   247k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   247k|    const auto begin_after_fill = begin;
 6567|   247k|    ++begin;
 6568|       |
 6569|   247k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 247k, False: 0]
  ------------------
 6570|   247k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 247k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   247k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 247k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   247k|    }
 6578|       |
 6579|   247k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 247k, False: 0]
  ------------------
 6580|   247k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 247k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   247k|        return begin_before_fill;
 6585|   247k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   247k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   494k|    auto check_align = [](wchar_t ch) {
 6535|   494k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 494k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 494k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 494k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   494k|            default:
  ------------------
  |  Branch (6542:13): [True: 494k, False: 0]
  ------------------
 6543|   494k|                return align_type::none;
 6544|   494k|        }
 6545|   494k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|   247k|{
 6597|   247k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   247k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   247k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   247k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 247k, False: 0]
  |  Branch (6599:33): [True: 0, False: 247k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   247k|    return begin;
 6610|   247k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|   247k|    {
 7127|   247k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   247k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 247k, False: 0]
  ------------------
 7129|   247k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 247k, False: 0]
  ------------------
 7130|   247k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 247k]
  ------------------
 7131|   247k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   247k|        Handler::on_localized();
 7139|   247k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   868k|{
 8417|   868k|#define SCN_VISIT(Type)                                         \
 8418|   868k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   868k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   868k|    }                                                           \
 8421|   868k|    else {                                                      \
 8422|   868k|        return vis(monostate_val);                              \
 8423|   868k|    }
 8424|       |
 8425|   868k|    monostate monostate_val{};
 8426|       |
 8427|   868k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 868k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 868k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 868k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 868k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 868k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 868k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 868k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 868k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 868k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 868k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 868k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 868k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 868k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 868k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 868k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   279k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 279k, False: 588k]
  ------------------
 8459|   279k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   279k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   279k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   279k|    }                                                           \
  |  | 8421|   279k|    else {                                                      \
  |  | 8422|   279k|        return vis(monostate_val);                              \
  |  | 8423|   279k|    }
  ------------------
 8460|   292k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 292k, False: 575k]
  ------------------
 8461|   292k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   292k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   292k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   292k|    }                                                           \
  |  | 8421|   292k|    else {                                                      \
  |  | 8422|   292k|        return vis(monostate_val);                              \
  |  | 8423|   292k|    }
  ------------------
 8462|   295k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 295k, False: 572k]
  ------------------
 8463|   295k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   295k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   295k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   295k|    }                                                           \
  |  | 8421|   295k|    else {                                                      \
  |  | 8422|   295k|        return vis(monostate_val);                              \
  |  | 8423|   295k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 868k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 868k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 868k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 868k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 868k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 868k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 868k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 868k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 868k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   868k|            SCN_CLANG_POP
 8495|   868k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|  81.5k|    {
 4076|  81.5k|        sync(0);
 4077|  81.5k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   724k|    {
 5466|   724k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   724k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 724k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   724k|        return static_cast<std::size_t>(m_desc &
 5471|   724k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   724k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  1.44M|    {
 5491|  1.44M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  1.44M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|   724k|    {
 5434|   724k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   724k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 724k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   724k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   724k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 724k]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|   724k|        const auto t = type(id);
 5446|   724k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   724k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 724k]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|   724k|        basic_scan_arg<Context> arg;
 5451|   724k|        arg.m_type = t;
 5452|   724k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 724k, False: 0]
  ------------------
 5453|   724k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   724k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   724k|        return arg;
 5459|   724k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|   724k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   724k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   724k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   724k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   724k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|   724k|    {
 5495|   724k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   724k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  1.38M|    {
 5247|  1.38M|        return m_type != detail::arg_type::none_type;
 5248|  1.38M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   100k|{
 8417|   100k|#define SCN_VISIT(Type)                                         \
 8418|   100k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   100k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   100k|    }                                                           \
 8421|   100k|    else {                                                      \
 8422|   100k|        return vis(monostate_val);                              \
 8423|   100k|    }
 8424|       |
 8425|   100k|    monostate monostate_val{};
 8426|       |
 8427|   100k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 100k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 100k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 100k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 100k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 100k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 100k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 100k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 100k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 100k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 100k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 100k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 100k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 100k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 100k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 100k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  32.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 32.4k, False: 68.3k]
  ------------------
 8459|  32.4k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  32.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  32.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  32.4k|    }                                                           \
  |  | 8421|  32.4k|    else {                                                      \
  |  | 8422|  32.4k|        return vis(monostate_val);                              \
  |  | 8423|  32.4k|    }
  ------------------
 8460|  33.8k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 33.8k, False: 67.0k]
  ------------------
 8461|  33.8k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  33.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  33.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  33.8k|    }                                                           \
  |  | 8421|  33.8k|    else {                                                      \
  |  | 8422|  33.8k|        return vis(monostate_val);                              \
  |  | 8423|  33.8k|    }
  ------------------
 8462|  34.5k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 34.5k, False: 66.2k]
  ------------------
 8463|  34.5k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  34.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  34.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  34.5k|    }                                                           \
  |  | 8421|  34.5k|    else {                                                      \
  |  | 8422|  34.5k|        return vis(monostate_val);                              \
  |  | 8423|  34.5k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 100k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 100k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 100k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 100k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 100k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 100k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 100k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 100k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 100k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   100k|            SCN_CLANG_POP
 8495|   100k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   589k|    {
 5545|   589k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|   294k|    {
 8138|   294k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   589k|    {
 8056|   589k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   294k|{
 7044|   294k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   294k|    handler.check_args_exhausted();
 7046|   294k|    return handler.get_error();
 7047|   294k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   294k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   294k|    auto begin = format.data();
 7013|   294k|    auto it = begin;
 7014|   294k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   464k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 294k, False: 169k]
  ------------------
 7017|   294k|        const auto ch = *it++;
 7018|   294k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 294k, False: 0]
  ------------------
 7019|   294k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   294k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   294k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 125k, False: 169k]
  ------------------
 7023|   125k|                return;
 7024|   125k|            }
 7025|   294k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   294k|    }
 7036|       |
 7037|   169k|    handler.on_literal_text(begin, end);
 7038|   169k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   294k|{
 6942|   294k|    struct id_adapter {
 6943|   294k|        constexpr void operator()()
 6944|   294k|        {
 6945|   294k|            arg_id = handler.on_arg_id();
 6946|   294k|        }
 6947|   294k|        constexpr void operator()(std::size_t id)
 6948|   294k|        {
 6949|   294k|            arg_id = handler.on_arg_id(id);
 6950|   294k|        }
 6951|       |
 6952|   294k|        constexpr void on_error(const char* msg)
 6953|   294k|        {
 6954|   294k|            SCN_UNLIKELY_ATTR
 6955|   294k|            handler.on_error(msg);
 6956|   294k|        }
 6957|       |
 6958|   294k|        Handler& handler;
 6959|   294k|        std::size_t arg_id;
 6960|   294k|    };
 6961|       |
 6962|   294k|    ++begin;
 6963|   294k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   294k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 294k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   294k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 294k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   294k|    else {
 6975|   294k|        auto adapter = id_adapter{handler, 0};
 6976|   294k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   294k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   294k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 294k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   294k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 294k, False: 0]
  ------------------
 6987|   294k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   294k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   294k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   589k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 294k]
  |  |  |  Branch (859:45): [True: 0, False: 294k]
  |  |  |  Branch (859:45): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   294k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   294k|    }
 7003|   294k|    return begin + 1;
 7004|   294k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|   589k|    {
 8039|   589k|        return m_args.get(id);
 8040|   589k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|   589k|    {
 8049|   589k|        return m_locale;
 8050|   589k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|   589k|    {
 5566|   589k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   589k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 589k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   589k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   589k|        do_check_arg_id(id);
 5574|   589k|        return id;
 5575|   589k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|   589k|{
 6054|   589k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   589k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   589k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   294k|{
 6443|   294k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   294k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   294k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   294k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 294k, False: 0]
  |  Branch (6444:26): [True: 0, False: 294k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   294k|    handler();
 6449|   294k|    return begin;
 6450|   294k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   294k|        {
 6945|   294k|            arg_id = handler.on_arg_id();
 6946|   294k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  1.17M|    {
 5252|  1.17M|        return m_type;
 5253|  1.17M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|   589k|    {
 5561|   589k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   589k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|   395k|{
 4344|   395k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 395k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   395k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   395k|                            ranges::default_sentinel};
 4350|   395k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4176|   395k|    {
 4177|   395k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   395k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   395k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   395k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   395k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   395k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   395k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  1.17M|    {
 5550|  1.17M|        return m_format.data();
 5551|  1.17M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   294k|    {
 7122|   294k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   294k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   294k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   294k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|   294k|{
 6858|   294k|    auto do_presentation = [&]() -> const CharT* {
 6859|   294k|        if (*begin == CharT{'['}) {
 6860|   294k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   294k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   294k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   294k|                return begin;
 6866|   294k|            }
 6867|   294k|            handler.on_character_set_string(set);
 6868|   294k|            return begin;
 6869|   294k|        }
 6870|   294k|        if (*begin == CharT{'/'}) {
 6871|   294k|            return parse_presentation_regex(begin, end, handler);
 6872|   294k|        }
 6873|   294k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   294k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   294k|            handler.on_error("Invalid type specifier in format string");
 6876|   294k|            return begin;
 6877|   294k|        }
 6878|   294k|        handler.on_type(type);
 6879|   294k|        return begin;
 6880|   294k|    };
 6881|       |
 6882|   294k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 294k, False: 0]
  |  Branch (6882:28): [True: 294k, False: 0]
  ------------------
 6883|   294k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 294k, False: 0]
  |  Branch (6883:36): [True: 227k, False: 67.2k]
  ------------------
 6884|   227k|        return do_presentation();
 6885|   227k|    }
 6886|       |
 6887|  67.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.2k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  67.2k|    begin = parse_align(begin, end, handler);
 6893|  67.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.2k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  67.2k|    begin = parse_width(begin, end, handler);
 6899|  67.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.2k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  67.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 67.2k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  67.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 67.2k, False: 0]
  ------------------
 6918|  67.2k|        handler.on_localized();
 6919|  67.2k|        ++begin;
 6920|  67.2k|    }
 6921|  67.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.2k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  67.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 67.2k, False: 0]
  |  Branch (6926:25): [True: 0, False: 67.2k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  67.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.2k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  67.2k|    return begin;
 6935|  67.2k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|   589k|{
 6507|   589k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 455k, False: 134k]
  |  Branch (6507:33): [True: 455k, False: 0]
  ------------------
 6508|   589k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 134k, False: 0]
  |  Branch (6508:33): [True: 134k, False: 0]
  ------------------
 6509|   589k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   227k|    auto do_presentation = [&]() -> const CharT* {
 6859|   227k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 227k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   227k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 227k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   227k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   227k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 227k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   227k|        handler.on_type(type);
 6879|   227k|        return begin;
 6880|   227k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|   455k|{
 6455|   455k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 455k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 455k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 455k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 455k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 455k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 455k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 455k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 455k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 455k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 455k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   140k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 140k, False: 314k]
  ------------------
 6474|   140k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 455k]
  ------------------
 6475|   140k|            return presentation_type::float_hex;
 6476|  50.9k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 50.9k, False: 404k]
  ------------------
 6477|  50.9k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 455k]
  ------------------
 6478|  50.9k|            return presentation_type::float_scientific;
 6479|   129k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 129k, False: 325k]
  ------------------
 6480|   129k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 455k]
  ------------------
 6481|   129k|            return presentation_type::float_fixed;
 6482|   134k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 134k, False: 321k]
  ------------------
 6483|   134k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 455k]
  ------------------
 6484|   134k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 455k]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 455k]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 455k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 455k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 455k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 455k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 455k]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|   455k|    }
 6502|   455k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  67.2k|{
 6532|  67.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  67.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  67.2k|    auto check_align = [](wchar_t ch) {
 6535|  67.2k|        switch (ch) {
 6536|  67.2k|            case L'<':
 6537|  67.2k|                return align_type::left;
 6538|  67.2k|            case L'>':
 6539|  67.2k|                return align_type::right;
 6540|  67.2k|            case L'^':
 6541|  67.2k|                return align_type::center;
 6542|  67.2k|            default:
 6543|  67.2k|                return align_type::none;
 6544|  67.2k|        }
 6545|  67.2k|    };
 6546|       |
 6547|  67.2k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  67.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.2k]
  |  |  |  Branch (859:45): [True: 0, False: 67.2k]
  |  |  |  Branch (859:45): [True: 0, False: 67.2k]
  |  |  ------------------
  ------------------
 6549|  67.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  67.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  67.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  67.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  67.2k|    const auto begin_before_fill = begin;
 6559|  67.2k|    begin += potential_fill_len;
 6560|       |
 6561|  67.2k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 67.2k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  67.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  67.2k|    const auto begin_after_fill = begin;
 6567|  67.2k|    ++begin;
 6568|       |
 6569|  67.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 67.2k, False: 0]
  ------------------
 6570|  67.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.2k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  67.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 67.2k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  67.2k|    }
 6578|       |
 6579|  67.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 67.2k, False: 0]
  ------------------
 6580|  67.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 67.2k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  67.2k|        return begin_before_fill;
 6585|  67.2k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  67.2k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|   134k|{
 6514|   134k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   134k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   134k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   134k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   134k|        return 1;
 6517|   134k|    }
 6518|   134k|    else {
 6519|   134k|        const auto lengths =
 6520|   134k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   134k|            "\3\4";
 6522|   134k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   134k|        return len;
 6524|   134k|    }
 6525|   134k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   134k|    auto check_align = [](wchar_t ch) {
 6535|   134k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 134k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 134k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 134k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   134k|            default:
  ------------------
  |  Branch (6542:13): [True: 134k, False: 0]
  ------------------
 6543|   134k|                return align_type::none;
 6544|   134k|        }
 6545|   134k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  67.2k|{
 6597|  67.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  67.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  67.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 67.2k, False: 0]
  |  Branch (6599:33): [True: 0, False: 67.2k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  67.2k|    return begin;
 6610|  67.2k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|  67.2k|    {
 7127|  67.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  67.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 67.2k, False: 0]
  ------------------
 7129|  67.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 67.2k, False: 0]
  ------------------
 7130|  67.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 67.2k]
  ------------------
 7131|  67.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  67.2k|        Handler::on_localized();
 7139|  67.2k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   294k|{
 8417|   294k|#define SCN_VISIT(Type)                                         \
 8418|   294k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   294k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   294k|    }                                                           \
 8421|   294k|    else {                                                      \
 8422|   294k|        return vis(monostate_val);                              \
 8423|   294k|    }
 8424|       |
 8425|   294k|    monostate monostate_val{};
 8426|       |
 8427|   294k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 294k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 294k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 294k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 294k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 294k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 294k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 294k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 294k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 294k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 294k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 294k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 294k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 294k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 294k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 294k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  96.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 96.7k, False: 198k]
  ------------------
 8459|  96.7k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  96.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  96.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  96.7k|    }                                                           \
  |  | 8421|  96.7k|    else {                                                      \
  |  | 8422|  96.7k|        return vis(monostate_val);                              \
  |  | 8423|  96.7k|    }
  ------------------
 8460|  98.5k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 98.5k, False: 196k]
  ------------------
 8461|  98.5k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  98.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  98.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  98.5k|    }                                                           \
  |  | 8421|  98.5k|    else {                                                      \
  |  | 8422|  98.5k|        return vis(monostate_val);                              \
  |  | 8423|  98.5k|    }
  ------------------
 8462|  99.6k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 99.6k, False: 195k]
  ------------------
 8463|  99.6k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  99.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  99.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  99.6k|    }                                                           \
  |  | 8421|  99.6k|    else {                                                      \
  |  | 8422|  99.6k|        return vis(monostate_val);                              \
  |  | 8423|  99.6k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 294k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 294k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 294k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 294k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 294k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 294k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 294k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 294k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 294k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   294k|            SCN_CLANG_POP
 8495|   294k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   100k|{
 8417|   100k|#define SCN_VISIT(Type)                                         \
 8418|   100k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   100k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   100k|    }                                                           \
 8421|   100k|    else {                                                      \
 8422|   100k|        return vis(monostate_val);                              \
 8423|   100k|    }
 8424|       |
 8425|   100k|    monostate monostate_val{};
 8426|       |
 8427|   100k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 100k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 100k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 100k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 100k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 100k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 100k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 100k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 100k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 100k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 100k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 100k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 100k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 100k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 100k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 100k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  32.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 32.4k, False: 68.2k]
  ------------------
 8459|  32.4k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  32.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  32.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  32.4k|    }                                                           \
  |  | 8421|  32.4k|    else {                                                      \
  |  | 8422|  32.4k|        return vis(monostate_val);                              \
  |  | 8423|  32.4k|    }
  ------------------
 8460|  33.7k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 33.7k, False: 66.9k]
  ------------------
 8461|  33.7k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  33.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  33.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  33.7k|    }                                                           \
  |  | 8421|  33.7k|    else {                                                      \
  |  | 8422|  33.7k|        return vis(monostate_val);                              \
  |  | 8423|  33.7k|    }
  ------------------
 8462|  34.5k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 34.5k, False: 66.2k]
  ------------------
 8463|  34.5k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  34.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  34.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  34.5k|    }                                                           \
  |  | 8421|  34.5k|    else {                                                      \
  |  | 8422|  34.5k|        return vis(monostate_val);                              \
  |  | 8423|  34.5k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 100k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 100k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 100k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 100k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 100k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 100k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 100k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 100k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 100k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   100k|            SCN_CLANG_POP
 8495|   100k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   294k|{
 7044|   294k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   294k|    handler.check_args_exhausted();
 7046|   294k|    return handler.get_error();
 7047|   294k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   294k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   294k|    auto begin = format.data();
 7013|   294k|    auto it = begin;
 7014|   294k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   464k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 294k, False: 169k]
  ------------------
 7017|   294k|        const auto ch = *it++;
 7018|   294k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 294k, False: 0]
  ------------------
 7019|   294k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   294k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   294k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 125k, False: 169k]
  ------------------
 7023|   125k|                return;
 7024|   125k|            }
 7025|   294k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   294k|    }
 7036|       |
 7037|   169k|    handler.on_literal_text(begin, end);
 7038|   169k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|   169k|    {
 8175|   169k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   169k|    static_cast<    \
  |  |  929|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   169k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|   294k|{
 6942|   294k|    struct id_adapter {
 6943|   294k|        constexpr void operator()()
 6944|   294k|        {
 6945|   294k|            arg_id = handler.on_arg_id();
 6946|   294k|        }
 6947|   294k|        constexpr void operator()(std::size_t id)
 6948|   294k|        {
 6949|   294k|            arg_id = handler.on_arg_id(id);
 6950|   294k|        }
 6951|       |
 6952|   294k|        constexpr void on_error(const char* msg)
 6953|   294k|        {
 6954|   294k|            SCN_UNLIKELY_ATTR
 6955|   294k|            handler.on_error(msg);
 6956|   294k|        }
 6957|       |
 6958|   294k|        Handler& handler;
 6959|   294k|        std::size_t arg_id;
 6960|   294k|    };
 6961|       |
 6962|   294k|    ++begin;
 6963|   294k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   294k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 294k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   294k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 294k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   294k|    else {
 6975|   294k|        auto adapter = id_adapter{handler, 0};
 6976|   294k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   294k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   294k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 294k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   294k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 294k, False: 0]
  ------------------
 6987|   294k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   294k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   294k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   589k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 294k]
  |  |  |  Branch (859:45): [True: 0, False: 294k]
  |  |  |  Branch (859:45): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   294k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   294k|    }
 7003|   294k|    return begin + 1;
 7004|   294k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   294k|{
 6443|   294k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   294k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   294k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   294k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 294k, False: 0]
  |  Branch (6444:26): [True: 0, False: 294k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   294k|    handler();
 6449|   294k|    return begin;
 6450|   294k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   294k|        {
 6945|   294k|            arg_id = handler.on_arg_id();
 6946|   294k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|   294k|    {
 7122|   294k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   294k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   294k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   294k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|   294k|{
 6858|   294k|    auto do_presentation = [&]() -> const CharT* {
 6859|   294k|        if (*begin == CharT{'['}) {
 6860|   294k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   294k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   294k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   294k|                return begin;
 6866|   294k|            }
 6867|   294k|            handler.on_character_set_string(set);
 6868|   294k|            return begin;
 6869|   294k|        }
 6870|   294k|        if (*begin == CharT{'/'}) {
 6871|   294k|            return parse_presentation_regex(begin, end, handler);
 6872|   294k|        }
 6873|   294k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   294k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   294k|            handler.on_error("Invalid type specifier in format string");
 6876|   294k|            return begin;
 6877|   294k|        }
 6878|   294k|        handler.on_type(type);
 6879|   294k|        return begin;
 6880|   294k|    };
 6881|       |
 6882|   294k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 294k, False: 0]
  |  Branch (6882:28): [True: 294k, False: 0]
  ------------------
 6883|   294k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 294k, False: 0]
  |  Branch (6883:36): [True: 227k, False: 67.1k]
  ------------------
 6884|   227k|        return do_presentation();
 6885|   227k|    }
 6886|       |
 6887|  67.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.1k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  67.1k|    begin = parse_align(begin, end, handler);
 6893|  67.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.1k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  67.1k|    begin = parse_width(begin, end, handler);
 6899|  67.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.1k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  67.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 67.1k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  67.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 67.1k, False: 0]
  ------------------
 6918|  67.1k|        handler.on_localized();
 6919|  67.1k|        ++begin;
 6920|  67.1k|    }
 6921|  67.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.1k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  67.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 67.1k, False: 0]
  |  Branch (6926:25): [True: 0, False: 67.1k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|  67.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  67.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.1k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  67.1k|    return begin;
 6935|  67.1k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   227k|    auto do_presentation = [&]() -> const CharT* {
 6859|   227k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 227k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   227k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 227k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   227k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   227k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 227k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   227k|        handler.on_type(type);
 6879|   227k|        return begin;
 6880|   227k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|  67.1k|{
 6532|  67.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  67.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  67.1k|    auto check_align = [](wchar_t ch) {
 6535|  67.1k|        switch (ch) {
 6536|  67.1k|            case L'<':
 6537|  67.1k|                return align_type::left;
 6538|  67.1k|            case L'>':
 6539|  67.1k|                return align_type::right;
 6540|  67.1k|            case L'^':
 6541|  67.1k|                return align_type::center;
 6542|  67.1k|            default:
 6543|  67.1k|                return align_type::none;
 6544|  67.1k|        }
 6545|  67.1k|    };
 6546|       |
 6547|  67.1k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  67.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.1k]
  |  |  |  Branch (859:45): [True: 0, False: 67.1k]
  |  |  |  Branch (859:45): [True: 0, False: 67.1k]
  |  |  ------------------
  ------------------
 6549|  67.1k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  67.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  67.1k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  67.1k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  67.1k|    const auto begin_before_fill = begin;
 6559|  67.1k|    begin += potential_fill_len;
 6560|       |
 6561|  67.1k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 67.1k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  67.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  67.1k|    const auto begin_after_fill = begin;
 6567|  67.1k|    ++begin;
 6568|       |
 6569|  67.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 67.1k, False: 0]
  ------------------
 6570|  67.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  67.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.1k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  67.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 67.1k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|  67.1k|    }
 6578|       |
 6579|  67.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 67.1k, False: 0]
  ------------------
 6580|  67.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 67.1k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  67.1k|        return begin_before_fill;
 6585|  67.1k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  67.1k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   134k|    auto check_align = [](wchar_t ch) {
 6535|   134k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 134k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 134k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 134k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   134k|            default:
  ------------------
  |  Branch (6542:13): [True: 134k, False: 0]
  ------------------
 6543|   134k|                return align_type::none;
 6544|   134k|        }
 6545|   134k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|  67.1k|{
 6597|  67.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  67.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  67.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 67.1k, False: 0]
  |  Branch (6599:33): [True: 0, False: 67.1k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|  67.1k|    return begin;
 6610|  67.1k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|  67.1k|    {
 7127|  67.1k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  67.1k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 67.1k, False: 0]
  ------------------
 7129|  67.1k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 67.1k, False: 0]
  ------------------
 7130|  67.1k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 67.1k]
  ------------------
 7131|  67.1k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|  67.1k|        Handler::on_localized();
 7139|  67.1k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   294k|{
 8417|   294k|#define SCN_VISIT(Type)                                         \
 8418|   294k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   294k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   294k|    }                                                           \
 8421|   294k|    else {                                                      \
 8422|   294k|        return vis(monostate_val);                              \
 8423|   294k|    }
 8424|       |
 8425|   294k|    monostate monostate_val{};
 8426|       |
 8427|   294k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 294k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 294k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 294k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 294k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 294k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 294k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 294k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 294k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 294k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 294k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 294k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 294k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 294k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 294k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 294k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  96.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 96.7k, False: 198k]
  ------------------
 8459|  96.7k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  96.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  96.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  96.7k|    }                                                           \
  |  | 8421|  96.7k|    else {                                                      \
  |  | 8422|  96.7k|        return vis(monostate_val);                              \
  |  | 8423|  96.7k|    }
  ------------------
 8460|  98.5k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 98.5k, False: 196k]
  ------------------
 8461|  98.5k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  98.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  98.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  98.5k|    }                                                           \
  |  | 8421|  98.5k|    else {                                                      \
  |  | 8422|  98.5k|        return vis(monostate_val);                              \
  |  | 8423|  98.5k|    }
  ------------------
 8462|  99.5k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 99.5k, False: 195k]
  ------------------
 8463|  99.5k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  99.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  99.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  99.5k|    }                                                           \
  |  | 8421|  99.5k|    else {                                                      \
  |  | 8422|  99.5k|        return vis(monostate_val);                              \
  |  | 8423|  99.5k|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 294k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 294k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 294k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 294k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 294k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 294k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 294k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 294k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 294k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   294k|            SCN_CLANG_POP
 8495|   294k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|   163k|    {
 4076|   163k|        sync(0);
 4077|   163k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|   216k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|  67.1k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  59.1k|{
   89|  59.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  59.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  59.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  59.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.1k|    static_cast<    \
  |  |  929|  59.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.1k|    static_cast<    \
  |  |  929|  59.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  59.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   181k|{
   44|   181k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   181k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  59.1k|{
  127|  59.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  59.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  59.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  59.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.1k|    static_cast<    \
  |  |  929|  59.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.1k|    static_cast<    \
  |  |  929|  59.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  59.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   181k|{
   60|   181k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   181k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  10.8k|{
  163|  10.8k|    T value;
  164|  10.8k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  10.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  10.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.18k, False: 6.63k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.18k|    }                                                  \
  |  |  |  | 3671|  10.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  6.63k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.63k|    static_cast<    \
  |  |  929|  6.63k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.63k|    static_cast<    \
  |  |  929|  6.63k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  10.8k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  33.6k|{
   72|  33.6k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  33.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  33.6k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  60.5k|{
   89|  60.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  60.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  60.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  60.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  60.5k|    static_cast<    \
  |  |  929|  60.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  60.5k|    static_cast<    \
  |  |  929|  60.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  60.5k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  60.5k|{
  127|  60.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  60.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  60.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  60.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  60.5k|    static_cast<    \
  |  |  929|  60.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  60.5k|    static_cast<    \
  |  |  929|  60.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  60.5k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  11.2k|{
  163|  11.2k|    T value;
  164|  11.2k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  11.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  11.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.18k, False: 7.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.18k|    }                                                  \
  |  |  |  | 3671|  11.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  7.09k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  7.09k|    static_cast<    \
  |  |  929|  7.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  7.09k|    static_cast<    \
  |  |  929|  7.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  11.2k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  61.3k|{
   89|  61.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  61.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  61.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  61.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.3k|    static_cast<    \
  |  |  929|  61.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.3k|    static_cast<    \
  |  |  929|  61.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  61.3k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  61.3k|{
  127|  61.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  61.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  61.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  61.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.3k|    static_cast<    \
  |  |  929|  61.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.3k|    static_cast<    \
  |  |  929|  61.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  61.3k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  11.5k|{
  163|  11.5k|    T value;
  164|  11.5k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  11.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  11.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.18k, False: 7.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.18k|    }                                                  \
  |  |  |  | 3671|  11.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  7.33k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  7.33k|    static_cast<    \
  |  |  929|  7.33k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  7.33k|    static_cast<    \
  |  |  929|  7.33k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  11.5k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  59.1k|{
   89|  59.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  59.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  59.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  59.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.1k|    static_cast<    \
  |  |  929|  59.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.1k|    static_cast<    \
  |  |  929|  59.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  59.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   180k|{
   44|   180k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   180k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  59.1k|{
  127|  59.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  59.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  59.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  59.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.1k|    static_cast<    \
  |  |  929|  59.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  59.1k|    static_cast<    \
  |  |  929|  59.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  59.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   180k|{
   60|   180k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   180k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  10.8k|{
  163|  10.8k|    T value;
  164|  10.8k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  10.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  10.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.18k, False: 6.62k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.18k|    }                                                  \
  |  |  |  | 3671|  10.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  6.62k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.62k|    static_cast<    \
  |  |  929|  6.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.62k|    static_cast<    \
  |  |  929|  6.62k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  10.8k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  33.5k|{
   72|  33.5k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  33.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  33.5k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  60.5k|{
   89|  60.5k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  60.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  60.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  60.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  60.5k|    static_cast<    \
  |  |  929|  60.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  60.5k|    static_cast<    \
  |  |  929|  60.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  60.5k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  60.5k|{
  127|  60.5k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  60.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  60.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  60.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  60.5k|    static_cast<    \
  |  |  929|  60.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  60.5k|    static_cast<    \
  |  |  929|  60.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  60.5k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  11.2k|{
  163|  11.2k|    T value;
  164|  11.2k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  11.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  11.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.18k, False: 7.07k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.18k|    }                                                  \
  |  |  |  | 3671|  11.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  7.07k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  7.07k|    static_cast<    \
  |  |  929|  7.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  7.07k|    static_cast<    \
  |  |  929|  7.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  11.2k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  61.3k|{
   89|  61.3k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  61.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  61.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  61.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.3k|    static_cast<    \
  |  |  929|  61.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.3k|    static_cast<    \
  |  |  929|  61.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  61.3k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  61.3k|{
  127|  61.3k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  61.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  61.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  61.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.3k|    static_cast<    \
  |  |  929|  61.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  61.3k|    static_cast<    \
  |  |  929|  61.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  61.3k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  11.5k|{
  163|  11.5k|    T value;
  164|  11.5k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  11.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  11.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  11.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  11.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.18k, False: 7.32k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.18k|    }                                                  \
  |  |  |  | 3671|  11.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.32k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  7.32k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  7.32k|    static_cast<    \
  |  |  929|  7.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  7.32k|    static_cast<    \
  |  |  929|  7.32k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  11.5k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  1.38M|{
  653|  1.38M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  1.38M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|   582k|{
  659|   582k|    static_assert(std::is_same_v<Locale, std::locale>);
  660|   582k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 291k, False: 291k]
  ------------------
  661|   582k|                    : std::locale{};
  662|   582k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   689k|{
 1221|   689k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   689k|                                  m_nan_payload_buffer, value);
 1223|   689k|    value = this->setsign(value);
 1224|   689k|    return n;
 1225|   689k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   179k|{
 1221|   179k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   179k|                                  m_nan_payload_buffer, value);
 1223|   179k|    value = this->setsign(value);
 1224|   179k|    return n;
 1225|   179k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   720k|{
 1221|   720k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   720k|                                  m_nan_payload_buffer, value);
 1223|   720k|    value = this->setsign(value);
 1224|   720k|    return n;
 1225|   720k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   185k|{
 1221|   185k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   185k|                                  m_nan_payload_buffer, value);
 1223|   185k|    value = this->setsign(value);
 1224|   185k|    return n;
 1225|   185k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   727k|{
 1221|   727k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   727k|                                  m_nan_payload_buffer, value);
 1223|   727k|    value = this->setsign(value);
 1224|   727k|    return n;
 1225|   727k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   188k|{
 1221|   188k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   188k|                                  m_nan_payload_buffer, value);
 1223|   188k|    value = this->setsign(value);
 1224|   188k|    return n;
 1225|   188k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   477k|{
 2184|   477k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   477k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|   545k|{
 2192|   545k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|   545k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   545k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 508k, False: 37.6k]
  |  |  ------------------
  ------------------
 2194|   508k|        source.sync(*n);
 2195|   508k|    }
 2196|  37.6k|    else {
 2197|  37.6k|        source.sync_all();
 2198|  37.6k|    }
 2199|   545k|    return n;
 2200|   545k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   181k|{
 2208|   181k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   181k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   180k|{
 2216|   180k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   180k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   180k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 105k, False: 75.2k]
  |  |  ------------------
  ------------------
 2218|   105k|        source.sync(*n);
 2219|   105k|    }
 2220|  75.2k|    else {
 2221|  75.2k|        source.sync_all();
 2222|  75.2k|    }
 2223|   180k|    return n;
 2224|   180k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   952k|{
  194|   952k|    return find_classic_impl(
  195|   952k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   952k|        [](char32_t cp) { return is_cp_space(cp); });
  197|   952k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  2.25M|{
  202|  2.25M|    return find_classic_impl(
  203|  2.25M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  2.25M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  2.25M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   477k|{
 2141|   477k|    return vscan_internal(source, format, args);
 2142|   477k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|   545k|{
 2147|   545k|    auto n = vscan_internal(source, format, args);
 2148|   545k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   545k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 508k, False: 37.6k]
  |  |  ------------------
  ------------------
 2149|   508k|        source.sync(*n);
 2150|   508k|    }
 2151|  37.6k|    else {
 2152|  37.6k|        source.sync_all();
 2153|  37.6k|    }
 2154|   545k|    return n;
 2155|   545k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   181k|{
 2161|   181k|    return vscan_internal(source, format, args);
 2162|   181k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   180k|{
 2167|   180k|    auto n = vscan_internal(source, format, args);
 2168|   180k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   180k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 105k, False: 75.2k]
  |  |  ------------------
  ------------------
 2169|   105k|        source.sync(*n);
 2170|   105k|    }
 2171|  75.2k|    else {
 2172|  75.2k|        source.sync_all();
 2173|  75.2k|    }
 2174|   180k|    return n;
 2175|   180k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|   104k|{
 2251|   104k|    return vscan_value_internal(source, arg);
 2252|   104k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|   111k|{
 2256|   111k|    auto n = vscan_value_internal(source, arg);
 2257|   111k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   111k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 105k, False: 6.27k]
  |  |  ------------------
  ------------------
 2258|   105k|        source.sync(*n);
 2259|   105k|    }
 2260|  6.27k|    else {
 2261|  6.27k|        source.sync_all();
 2262|  6.27k|    }
 2263|   111k|    return n;
 2264|   111k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  33.6k|{
 2270|  33.6k|    return vscan_value_internal(source, arg);
 2271|  33.6k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  33.5k|{
 2276|  33.5k|    auto n = vscan_value_internal(source, arg);
 2277|  33.5k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  33.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 21.0k, False: 12.5k]
  |  |  ------------------
  ------------------
 2278|  21.0k|        source.sync(*n);
 2279|  21.0k|    }
 2280|  12.5k|    else {
 2281|  12.5k|        source.sync_all();
 2282|  12.5k|    }
 2283|  33.5k|    return n;
 2284|  33.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   952k|{
  118|   952k|    auto it = source.begin();
  119|       |
  120|  3.11M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 2.50M, False: 609k]
  ------------------
  121|  2.50M|        auto sv =
  122|  2.50M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  2.50M|                .substr(0, 8);
  124|       |
  125|  2.50M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.44M, False: 61.6k]
  ------------------
  126|  2.44M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.44M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.44M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 317k, False: 2.12M]
  ------------------
  129|   317k|                break;
  130|   317k|            }
  131|  2.12M|            continue;
  132|  2.44M|        }
  133|       |
  134|   204k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 168k, False: 35.7k]
  ------------------
  135|   168k|            auto tmp =
  136|   168k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   168k|            auto res = get_next_code_point(tmp);
  138|   168k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 25.8k, False: 142k]
  ------------------
  139|  25.8k|                return it;
  140|  25.8k|            }
  141|   142k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   142k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   142k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   142k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   142k|        }
  145|  61.6k|    }
  146|       |
  147|   926k|    return detail::make_string_view_iterator(source, it);
  148|   952k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  3.89M|{
  105|  3.89M|    static_assert(sizeof(*source.data()) == 1);
  106|  3.89M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  3.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  3.89M|    uint64_t word{};
  108|  3.89M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  3.89M|    return has_byte_greater(word, 127) != 0;
  111|  3.89M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  14.9M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   168k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  2.25M|{
  118|  2.25M|    auto it = source.begin();
  119|       |
  120|  2.46M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 1.38M, False: 1.07M]
  ------------------
  121|  1.38M|        auto sv =
  122|  1.38M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  1.38M|                .substr(0, 8);
  124|       |
  125|  1.38M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 1.30M, False: 82.6k]
  ------------------
  126|  1.30M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  1.30M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  1.30M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 1.10M, False: 201k]
  ------------------
  129|  1.10M|                break;
  130|  1.10M|            }
  131|   201k|            continue;
  132|  1.30M|        }
  133|       |
  134|   157k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 149k, False: 8.21k]
  ------------------
  135|   149k|            auto tmp =
  136|   149k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   149k|            auto res = get_next_code_point(tmp);
  138|   149k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 74.4k, False: 74.8k]
  ------------------
  139|  74.4k|                return it;
  140|  74.4k|            }
  141|  74.8k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  74.8k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  74.8k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  74.8k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  74.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  74.8k|        }
  145|  82.6k|    }
  146|       |
  147|  2.18M|    return detail::make_string_view_iterator(source, it);
  148|  2.25M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  2.02M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   149k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   689k|{
 1138|   689k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 4.16k, False: 685k]
  ------------------
 1139|  4.16k|        value = std::numeric_limits<T>::infinity();
 1140|  4.16k|        return 3;
 1141|  4.16k|    }
 1142|   685k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 3.55k, False: 681k]
  ------------------
 1143|  3.55k|        value = std::numeric_limits<T>::infinity();
 1144|  3.55k|        return 8;
 1145|  3.55k|    }
 1146|   681k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 30.2k, False: 651k]
  ------------------
 1147|  30.2k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  30.2k|        return 3;
 1149|  30.2k|    }
 1150|   651k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 920, False: 650k]
  ------------------
 1151|    920|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|    920|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|    920|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|    920|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|    920|    }
 1182|       |
 1183|   650k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   650k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   650k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   650k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 141k, False: 509k]
  ------------------
 1185|   141k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.40k, False: 138k]
  |  |  ------------------
  ------------------
 1186|  2.40k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.40k|                                         "Invalid floating-point digit");
 1188|  2.40k|        }
 1189|   141k|    }
 1190|   648k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   648k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.49k, False: 641k]
  |  |  ------------------
  ------------------
 1191|  6.49k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  6.49k|                                     "Invalid floating-point digit");
 1193|  6.49k|    }
 1194|       |
 1195|   641k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   641k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   641k|            double tmp{};
 1200|   641k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   641k|            value = tmp;
 1202|   641k|            return ret;
 1203|   641k|        }
 1204|   641k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   641k|            return fast_float_fallback(data, value);
 1208|   641k|        }
 1209|   641k|    }
 1210|   641k|    else {
 1211|       |        // Default to fast_float
 1212|   641k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   641k|    }
 1214|   641k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1077|   641k|    {
 1078|   641k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  2.32M|    {
  712|  2.32M|        return {kind, options};
  713|  2.32M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|   641k|    {
 1082|   641k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 138k, False: 503k]
  ------------------
 1083|   641k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 21.4k, False: 481k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   160k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   160k|                                              value);
 1087|   160k|        }
 1088|       |
 1089|   481k|        const auto flags = get_flags();
 1090|   481k|        const auto view = get_view();
 1091|   481k|        const auto result = fast_float::from_chars(
 1092|   481k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   481k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 481k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   481k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.93k, False: 476k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  4.93k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  4.93k|                                              value);
 1102|  4.93k|        }
 1103|       |
 1104|   476k|        return result.ptr - view.data();
 1105|   481k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   164k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   164k|    {
 1048|   164k|#if !SCN_DISABLE_STRTOD
 1049|   164k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   164k|    }
 1056|   164k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  893|   164k|    {
  894|   164k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   197k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   164k|    {
  898|   164k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   164k|                           generic_strtod);
  900|   164k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   164k|    {
  732|   164k|        CharT* end{};
  733|   164k|        errno = 0;
  734|   164k|        value = strtod_cb(src, &end);
  735|   164k|        const auto saved_errno = errno;
  736|   164k|        auto chars_read = end - src;
  737|       |
  738|   164k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   164k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.85k, False: 159k]
  |  |  ------------------
  ------------------
  740|  5.85k|            return unexpected(e);
  741|  5.85k|        }
  742|       |
  743|   159k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 137k, False: 21.2k]
  ------------------
  744|   159k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 137k, False: 0]
  ------------------
  745|   137k|            chars_read -= 2;
  746|   137k|        }
  747|       |
  748|   159k|        return chars_read;
  749|   164k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   197k|    {
  778|   197k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 67.1k, False: 130k]
  |  Branch (778:37): [True: 0, False: 67.1k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   197k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 21.6k, False: 175k]
  ------------------
  785|   197k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 21.6k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   197k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 8.26k, False: 189k]
  |  Branch (791:34): [True: 1.47k, False: 6.78k]
  ------------------
  792|  1.47k|            SCN_UNLIKELY_ATTR
  793|  1.47k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  1.47k|        }
  795|       |
  796|   196k|        SCN_GCC_COMPAT_PUSH
  797|   196k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   196k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 196k, False: 0]
  ------------------
  800|   196k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 196k, False: 0]
  ------------------
  801|   196k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 6.74k, False: 189k]
  ------------------
  802|  6.74k|            SCN_UNLIKELY_ATTR
  803|  6.74k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  6.74k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   189k|            return {};
  809|   196k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   205k|{
  687|   205k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 68.5k, False: 137k]
  |  Branch (687:25): [True: 0, False: 137k]
  ------------------
  688|   205k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   164k|    {
  755|   164k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 161k, False: 3.97k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   161k|            auto first_space = read_until_classic_space(input.view());
  758|   161k|            input.assign(
  759|   161k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   161k|        }
  761|       |
  762|   164k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 138k, False: 26.4k]
  ------------------
  763|   138k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   138k|                input.get_allocated_string().insert(0, "0x");
  765|   138k|            }
  766|   138k|            else {
  767|   138k|                input.get_allocated_string().insert(0, L"0x");
  768|   138k|            }
  769|   138k|        }
  770|       |
  771|   164k|        return input.get_allocated_string().c_str();
  772|   164k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   164k|    {
  905|   164k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   164k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   164k|        }
  908|   164k|        else {
  909|   164k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   164k|        }
  911|   164k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   164k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   164k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   164k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   164k|            return std::strtof(str, str_end);
  839|   164k|        }
  840|   164k|        else if constexpr (std::is_same_v<T, double>) {
  841|   164k|            return std::strtod(str, str_end);
  842|   164k|        }
  843|   164k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   164k|            return std::strtold(str, str_end);
  845|   164k|        }
  846|   164k|#endif
  847|   164k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  1.23M|    {
 1061|  1.23M|        unsigned format_flags{};
 1062|  1.23M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 1.22M, False: 10.0k]
  ------------------
 1063|  1.22M|            format_flags |= fast_float::fixed;
 1064|  1.22M|        }
 1065|  1.23M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 1.04M, False: 188k]
  ------------------
 1066|  1.04M|            format_flags |= fast_float::scientific;
 1067|  1.04M|        }
 1068|       |
 1069|  1.23M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  1.23M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|   481k|    {
 1110|   481k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   481k|            return m_input.view();
 1112|   481k|        }
 1113|   481k|        else if constexpr (sizeof(CharT) == 2) {
 1114|   481k|            return std::u16string_view{
 1115|   481k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   481k|                m_input.view().size()};
 1117|   481k|        }
 1118|   481k|        else {
 1119|   481k|            return std::u32string_view{
 1120|   481k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   481k|                m_input.view().size()};
 1122|   481k|        }
 1123|   481k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   179k|{
 1138|   179k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 179k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   179k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 179k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   179k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 179k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   179k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 179k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   179k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   179k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   179k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   179k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 38.1k, False: 141k]
  ------------------
 1185|  38.1k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.06k, False: 30.1k]
  |  |  ------------------
  ------------------
 1186|  8.06k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.06k|                                         "Invalid floating-point digit");
 1188|  8.06k|        }
 1189|  38.1k|    }
 1190|   171k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.7k, False: 151k]
  |  |  ------------------
  ------------------
 1191|  19.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  19.7k|                                     "Invalid floating-point digit");
 1193|  19.7k|    }
 1194|       |
 1195|   151k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   151k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   151k|            double tmp{};
 1200|   151k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   151k|            value = tmp;
 1202|   151k|            return ret;
 1203|   151k|        }
 1204|   151k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   151k|            return fast_float_fallback(data, value);
 1208|   151k|        }
 1209|   151k|    }
 1210|   151k|    else {
 1211|       |        // Default to fast_float
 1212|   151k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   151k|    }
 1214|   151k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1077|   151k|    {
 1078|   151k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|   533k|    {
  712|   533k|        return {kind, options};
  713|   533k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|   151k|    {
 1082|   151k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 30.0k, False: 121k]
  ------------------
 1083|   151k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 184, False: 121k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  30.2k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  30.2k|                                              value);
 1087|  30.2k|        }
 1088|       |
 1089|   121k|        const auto flags = get_flags();
 1090|   121k|        const auto view = get_view();
 1091|   121k|        const auto result = fast_float::from_chars(
 1092|   121k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   121k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 121k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   121k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.31k, False: 119k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  2.31k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  2.31k|                                              value);
 1102|  2.31k|        }
 1103|       |
 1104|   119k|        return result.ptr - view.data();
 1105|   121k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  32.5k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  32.5k|    {
 1048|  32.5k|#if !SCN_DISABLE_STRTOD
 1049|  32.5k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  32.5k|    }
 1056|  32.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  893|  32.5k|    {
  894|  32.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  32.5k|    {
  898|  32.5k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  32.5k|                           generic_strtod);
  900|  32.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  32.5k|    {
  732|  32.5k|        CharT* end{};
  733|  32.5k|        errno = 0;
  734|  32.5k|        value = strtod_cb(src, &end);
  735|  32.5k|        const auto saved_errno = errno;
  736|  32.5k|        auto chars_read = end - src;
  737|       |
  738|  32.5k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  32.5k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  32.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.36k, False: 30.2k]
  |  |  ------------------
  ------------------
  740|  2.36k|            return unexpected(e);
  741|  2.36k|        }
  742|       |
  743|  30.2k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 30.0k, False: 184]
  ------------------
  744|  30.2k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 30.0k, False: 0]
  ------------------
  745|  30.0k|            chars_read -= 2;
  746|  30.0k|        }
  747|       |
  748|  30.2k|        return chars_read;
  749|  32.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  32.5k|    {
  755|  32.5k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 31.1k, False: 1.46k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  31.1k|            auto first_space = read_until_classic_space(input.view());
  758|  31.1k|            input.assign(
  759|  31.1k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  31.1k|        }
  761|       |
  762|  32.5k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 30.0k, False: 2.49k]
  ------------------
  763|  30.0k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  30.0k|                input.get_allocated_string().insert(0, "0x");
  765|  30.0k|            }
  766|  30.0k|            else {
  767|  30.0k|                input.get_allocated_string().insert(0, L"0x");
  768|  30.0k|            }
  769|  30.0k|        }
  770|       |
  771|  32.5k|        return input.get_allocated_string().c_str();
  772|  32.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  32.5k|    {
  905|  32.5k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  32.5k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  32.5k|        }
  908|  32.5k|        else {
  909|  32.5k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  32.5k|        }
  911|  32.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  32.5k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  32.5k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  32.5k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  32.5k|            return std::wcstof(str, str_end);
  877|  32.5k|        }
  878|  32.5k|        else if constexpr (std::is_same_v<T, double>) {
  879|  32.5k|            return std::wcstod(str, str_end);
  880|  32.5k|        }
  881|  32.5k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  32.5k|            return std::wcstold(str, str_end);
  883|  32.5k|        }
  884|  32.5k|#endif
  885|  32.5k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|   121k|    {
 1110|   121k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   121k|            return m_input.view();
 1112|   121k|        }
 1113|   121k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|   121k|            return std::u16string_view{
 1115|   121k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   121k|                m_input.view().size()};
 1117|   121k|        }
 1118|   121k|        else {
 1119|   121k|            return std::u32string_view{
 1120|   121k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   121k|                m_input.view().size()};
 1122|   121k|        }
 1123|   121k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   720k|{
 1138|   720k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 4.50k, False: 716k]
  ------------------
 1139|  4.50k|        value = std::numeric_limits<T>::infinity();
 1140|  4.50k|        return 3;
 1141|  4.50k|    }
 1142|   716k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 3.90k, False: 712k]
  ------------------
 1143|  3.90k|        value = std::numeric_limits<T>::infinity();
 1144|  3.90k|        return 8;
 1145|  3.90k|    }
 1146|   712k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 30.9k, False: 681k]
  ------------------
 1147|  30.9k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  30.9k|        return 3;
 1149|  30.9k|    }
 1150|   681k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 990, False: 680k]
  ------------------
 1151|    990|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|    990|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|    990|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|    990|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|    990|    }
 1182|       |
 1183|   680k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   680k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   680k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   680k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 145k, False: 535k]
  ------------------
 1185|   145k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.49k, False: 142k]
  |  |  ------------------
  ------------------
 1186|  2.49k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.49k|                                         "Invalid floating-point digit");
 1188|  2.49k|        }
 1189|   145k|    }
 1190|   677k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   677k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.00k, False: 670k]
  |  |  ------------------
  ------------------
 1191|  7.00k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  7.00k|                                     "Invalid floating-point digit");
 1193|  7.00k|    }
 1194|       |
 1195|   670k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   670k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   670k|            double tmp{};
 1200|   670k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   670k|            value = tmp;
 1202|   670k|            return ret;
 1203|   670k|        }
 1204|   670k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   670k|            return fast_float_fallback(data, value);
 1208|   670k|        }
 1209|   670k|    }
 1210|   670k|    else {
 1211|       |        // Default to fast_float
 1212|   670k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   670k|    }
 1214|   670k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1077|   670k|    {
 1078|   670k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|   670k|    {
 1082|   670k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 142k, False: 528k]
  ------------------
 1083|   670k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 23.6k, False: 504k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   166k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   166k|                                              value);
 1087|   166k|        }
 1088|       |
 1089|   504k|        const auto flags = get_flags();
 1090|   504k|        const auto view = get_view();
 1091|   504k|        const auto result = fast_float::from_chars(
 1092|   504k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   504k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   504k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 504k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   504k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   504k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.24k, False: 502k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  2.24k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  2.24k|                                              value);
 1102|  2.24k|        }
 1103|       |
 1104|   502k|        return result.ptr - view.data();
 1105|   504k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   168k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   168k|    {
 1048|   168k|#if !SCN_DISABLE_STRTOD
 1049|   168k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   168k|    }
 1056|   168k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  893|   168k|    {
  894|   168k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   199k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   168k|    {
  898|   168k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   168k|                           generic_strtod);
  900|   168k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   168k|    {
  732|   168k|        CharT* end{};
  733|   168k|        errno = 0;
  734|   168k|        value = strtod_cb(src, &end);
  735|   168k|        const auto saved_errno = errno;
  736|   168k|        auto chars_read = end - src;
  737|       |
  738|   168k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   168k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.69k, False: 165k]
  |  |  ------------------
  ------------------
  740|  2.69k|            return unexpected(e);
  741|  2.69k|        }
  742|       |
  743|   165k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 142k, False: 23.6k]
  ------------------
  744|   165k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 142k, False: 0]
  ------------------
  745|   142k|            chars_read -= 2;
  746|   142k|        }
  747|       |
  748|   165k|        return chars_read;
  749|   168k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   199k|    {
  778|   199k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 66.6k, False: 133k]
  |  Branch (778:37): [True: 0, False: 66.6k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   199k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 23.8k, False: 176k]
  ------------------
  785|   199k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 23.8k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   199k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 3.97k, False: 195k]
  |  Branch (791:34): [True: 350, False: 3.62k]
  ------------------
  792|    350|            SCN_UNLIKELY_ATTR
  793|    350|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    350|        }
  795|       |
  796|   199k|        SCN_GCC_COMPAT_PUSH
  797|   199k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   199k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 199k, False: 0]
  ------------------
  800|   199k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 199k, False: 0]
  ------------------
  801|   199k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 3.62k, False: 195k]
  ------------------
  802|  3.62k|            SCN_UNLIKELY_ATTR
  803|  3.62k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  3.62k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   195k|            return {};
  809|   199k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   203k|{
  691|   203k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 66.9k, False: 136k]
  |  Branch (691:24): [True: 0, False: 136k]
  ------------------
  692|   203k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   168k|    {
  755|   168k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 165k, False: 2.89k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   165k|            auto first_space = read_until_classic_space(input.view());
  758|   165k|            input.assign(
  759|   165k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   165k|        }
  761|       |
  762|   168k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 142k, False: 25.9k]
  ------------------
  763|   142k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   142k|                input.get_allocated_string().insert(0, "0x");
  765|   142k|            }
  766|   142k|            else {
  767|   142k|                input.get_allocated_string().insert(0, L"0x");
  768|   142k|            }
  769|   142k|        }
  770|       |
  771|   168k|        return input.get_allocated_string().c_str();
  772|   168k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   168k|    {
  905|   168k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   168k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   168k|        }
  908|   168k|        else {
  909|   168k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   168k|        }
  911|   168k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   168k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   168k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   168k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   168k|            return std::strtof(str, str_end);
  839|   168k|        }
  840|   168k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   168k|            return std::strtod(str, str_end);
  842|   168k|        }
  843|   168k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   168k|            return std::strtold(str, str_end);
  845|   168k|        }
  846|   168k|#endif
  847|   168k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|   504k|    {
 1110|   504k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   504k|            return m_input.view();
 1112|   504k|        }
 1113|   504k|        else if constexpr (sizeof(CharT) == 2) {
 1114|   504k|            return std::u16string_view{
 1115|   504k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   504k|                m_input.view().size()};
 1117|   504k|        }
 1118|   504k|        else {
 1119|   504k|            return std::u32string_view{
 1120|   504k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   504k|                m_input.view().size()};
 1122|   504k|        }
 1123|   504k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   185k|{
 1138|   185k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 185k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   185k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 185k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   185k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 185k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   185k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 185k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   185k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   185k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 38.1k, False: 147k]
  ------------------
 1185|  38.1k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.06k, False: 30.1k]
  |  |  ------------------
  ------------------
 1186|  8.06k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.06k|                                         "Invalid floating-point digit");
 1188|  8.06k|        }
 1189|  38.1k|    }
 1190|   177k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.0k, False: 157k]
  |  |  ------------------
  ------------------
 1191|  20.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  20.0k|                                     "Invalid floating-point digit");
 1193|  20.0k|    }
 1194|       |
 1195|   157k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   157k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   157k|            double tmp{};
 1200|   157k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   157k|            value = tmp;
 1202|   157k|            return ret;
 1203|   157k|        }
 1204|   157k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   157k|            return fast_float_fallback(data, value);
 1208|   157k|        }
 1209|   157k|    }
 1210|   157k|    else {
 1211|       |        // Default to fast_float
 1212|   157k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   157k|    }
 1214|   157k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1077|   157k|    {
 1078|   157k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|   157k|    {
 1082|   157k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 30.0k, False: 127k]
  ------------------
 1083|   157k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 189, False: 126k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  30.2k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  30.2k|                                              value);
 1087|  30.2k|        }
 1088|       |
 1089|   126k|        const auto flags = get_flags();
 1090|   126k|        const auto view = get_view();
 1091|   126k|        const auto result = fast_float::from_chars(
 1092|   126k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   126k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 126k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   126k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.22k, False: 125k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  1.22k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  1.22k|                                              value);
 1102|  1.22k|        }
 1103|       |
 1104|   125k|        return result.ptr - view.data();
 1105|   126k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  31.5k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  31.5k|    {
 1048|  31.5k|#if !SCN_DISABLE_STRTOD
 1049|  31.5k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  31.5k|    }
 1056|  31.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  893|  31.5k|    {
  894|  31.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  31.5k|    {
  898|  31.5k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  31.5k|                           generic_strtod);
  900|  31.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  31.5k|    {
  732|  31.5k|        CharT* end{};
  733|  31.5k|        errno = 0;
  734|  31.5k|        value = strtod_cb(src, &end);
  735|  31.5k|        const auto saved_errno = errno;
  736|  31.5k|        auto chars_read = end - src;
  737|       |
  738|  31.5k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  31.5k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.27k, False: 30.2k]
  |  |  ------------------
  ------------------
  740|  1.27k|            return unexpected(e);
  741|  1.27k|        }
  742|       |
  743|  30.2k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 30.0k, False: 189]
  ------------------
  744|  30.2k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 30.0k, False: 0]
  ------------------
  745|  30.0k|            chars_read -= 2;
  746|  30.0k|        }
  747|       |
  748|  30.2k|        return chars_read;
  749|  31.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  31.5k|    {
  755|  31.5k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 30.5k, False: 922]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  30.5k|            auto first_space = read_until_classic_space(input.view());
  758|  30.5k|            input.assign(
  759|  30.5k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  30.5k|        }
  761|       |
  762|  31.5k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 30.0k, False: 1.41k]
  ------------------
  763|  30.0k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  30.0k|                input.get_allocated_string().insert(0, "0x");
  765|  30.0k|            }
  766|  30.0k|            else {
  767|  30.0k|                input.get_allocated_string().insert(0, L"0x");
  768|  30.0k|            }
  769|  30.0k|        }
  770|       |
  771|  31.5k|        return input.get_allocated_string().c_str();
  772|  31.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  31.5k|    {
  905|  31.5k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  31.5k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  31.5k|        }
  908|  31.5k|        else {
  909|  31.5k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  31.5k|        }
  911|  31.5k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  31.5k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  31.5k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  31.5k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  31.5k|            return std::wcstof(str, str_end);
  877|  31.5k|        }
  878|  31.5k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  31.5k|            return std::wcstod(str, str_end);
  880|  31.5k|        }
  881|  31.5k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  31.5k|            return std::wcstold(str, str_end);
  883|  31.5k|        }
  884|  31.5k|#endif
  885|  31.5k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|   126k|    {
 1110|   126k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   126k|            return m_input.view();
 1112|   126k|        }
 1113|   126k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|   126k|            return std::u16string_view{
 1115|   126k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   126k|                m_input.view().size()};
 1117|   126k|        }
 1118|   126k|        else {
 1119|   126k|            return std::u32string_view{
 1120|   126k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   126k|                m_input.view().size()};
 1122|   126k|        }
 1123|   126k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   727k|{
 1138|   727k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 4.64k, False: 722k]
  ------------------
 1139|  4.64k|        value = std::numeric_limits<T>::infinity();
 1140|  4.64k|        return 3;
 1141|  4.64k|    }
 1142|   722k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 4.00k, False: 718k]
  ------------------
 1143|  4.00k|        value = std::numeric_limits<T>::infinity();
 1144|  4.00k|        return 8;
 1145|  4.00k|    }
 1146|   718k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 31.2k, False: 687k]
  ------------------
 1147|  31.2k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  31.2k|        return 3;
 1149|  31.2k|    }
 1150|   687k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.02k, False: 686k]
  ------------------
 1151|  1.02k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.02k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.02k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.02k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.02k|    }
 1182|       |
 1183|   686k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   686k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   686k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   686k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 145k, False: 540k]
  ------------------
 1185|   145k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.57k, False: 143k]
  |  |  ------------------
  ------------------
 1186|  2.57k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  2.57k|                                         "Invalid floating-point digit");
 1188|  2.57k|        }
 1189|   145k|    }
 1190|   684k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   684k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.28k, False: 676k]
  |  |  ------------------
  ------------------
 1191|  7.28k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  7.28k|                                     "Invalid floating-point digit");
 1193|  7.28k|    }
 1194|       |
 1195|   676k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   676k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   676k|            double tmp{};
 1200|   676k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   676k|            value = tmp;
 1202|   676k|            return ret;
 1203|   676k|        }
 1204|   676k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   676k|            return fast_float_fallback(data, value);
 1208|   676k|        }
 1209|   676k|    }
 1210|   676k|    else {
 1211|       |        // Default to fast_float
 1212|   676k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   676k|    }
 1214|   676k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   676k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   676k|    {
 1048|   676k|#if !SCN_DISABLE_STRTOD
 1049|   676k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   676k|    }
 1056|   676k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  893|   676k|    {
  894|   676k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|   836k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|   676k|    {
  898|   676k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   676k|                           generic_strtod);
  900|   676k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   676k|    {
  732|   676k|        CharT* end{};
  733|   676k|        errno = 0;
  734|   676k|        value = strtod_cb(src, &end);
  735|   676k|        const auto saved_errno = errno;
  736|   676k|        auto chars_read = end - src;
  737|       |
  738|   676k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   676k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   676k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 544, False: 676k]
  |  |  ------------------
  ------------------
  740|    544|            return unexpected(e);
  741|    544|        }
  742|       |
  743|   676k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 142k, False: 533k]
  ------------------
  744|   676k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 142k, False: 0]
  ------------------
  745|   142k|            chars_read -= 2;
  746|   142k|        }
  747|       |
  748|   676k|        return chars_read;
  749|   676k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|   836k|    {
  778|   836k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 312k, False: 524k]
  |  Branch (778:37): [True: 0, False: 312k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   836k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 23.9k, False: 812k]
  ------------------
  785|   836k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 23.9k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   836k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 644, False: 835k]
  |  Branch (791:34): [True: 64, False: 580]
  ------------------
  792|     64|            SCN_UNLIKELY_ATTR
  793|     64|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|     64|        }
  795|       |
  796|   836k|        SCN_GCC_COMPAT_PUSH
  797|   836k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   836k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 836k, False: 0]
  ------------------
  800|   836k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 836k, False: 0]
  ------------------
  801|   836k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 580, False: 835k]
  ------------------
  802|    580|            SCN_UNLIKELY_ATTR
  803|    580|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|    580|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   835k|            return {};
  809|   836k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|   837k|{
  695|   837k|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 312k, False: 524k]
  |  Branch (695:26): [True: 0, False: 524k]
  ------------------
  696|   837k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   676k|    {
  755|   676k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 625k, False: 50.8k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   625k|            auto first_space = read_until_classic_space(input.view());
  758|   625k|            input.assign(
  759|   625k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   625k|        }
  761|       |
  762|   676k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 143k, False: 533k]
  ------------------
  763|   143k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   143k|                input.get_allocated_string().insert(0, "0x");
  765|   143k|            }
  766|   143k|            else {
  767|   143k|                input.get_allocated_string().insert(0, L"0x");
  768|   143k|            }
  769|   143k|        }
  770|       |
  771|   676k|        return input.get_allocated_string().c_str();
  772|   676k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|   676k|    {
  905|   676k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   676k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   676k|        }
  908|   676k|        else {
  909|   676k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   676k|        }
  911|   676k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|   676k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   676k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   676k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   676k|            return std::strtof(str, str_end);
  839|   676k|        }
  840|   676k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   676k|            return std::strtod(str, str_end);
  842|   676k|        }
  843|   676k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (843:28): [Folded - Ignored]
  ------------------
  844|   676k|            return std::strtold(str, str_end);
  845|   676k|        }
  846|   676k|#endif
  847|   676k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   188k|{
 1138|   188k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 188k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   188k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 188k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   188k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 188k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   188k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 188k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   188k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   188k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   188k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   188k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 38.2k, False: 149k]
  ------------------
 1185|  38.2k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.08k, False: 30.1k]
  |  |  ------------------
  ------------------
 1186|  8.08k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  8.08k|                                         "Invalid floating-point digit");
 1188|  8.08k|        }
 1189|  38.2k|    }
 1190|   180k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.4k, False: 159k]
  |  |  ------------------
  ------------------
 1191|  20.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  20.4k|                                     "Invalid floating-point digit");
 1193|  20.4k|    }
 1194|       |
 1195|   159k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|   159k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|   159k|            double tmp{};
 1200|   159k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|   159k|            value = tmp;
 1202|   159k|            return ret;
 1203|   159k|        }
 1204|   159k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   159k|            return fast_float_fallback(data, value);
 1208|   159k|        }
 1209|   159k|    }
 1210|   159k|    else {
 1211|       |        // Default to fast_float
 1212|   159k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   159k|    }
 1214|   159k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   159k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   159k|    {
 1048|   159k|#if !SCN_DISABLE_STRTOD
 1049|   159k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   159k|    }
 1056|   159k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  893|   159k|    {
  894|   159k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|   159k|    {
  898|   159k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   159k|                           generic_strtod);
  900|   159k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   159k|    {
  732|   159k|        CharT* end{};
  733|   159k|        errno = 0;
  734|   159k|        value = strtod_cb(src, &end);
  735|   159k|        const auto saved_errno = errno;
  736|   159k|        auto chars_read = end - src;
  737|       |
  738|   159k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   159k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100, False: 159k]
  |  |  ------------------
  ------------------
  740|    100|            return unexpected(e);
  741|    100|        }
  742|       |
  743|   159k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 30.1k, False: 129k]
  ------------------
  744|   159k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 30.1k, False: 0]
  ------------------
  745|  30.1k|            chars_read -= 2;
  746|  30.1k|        }
  747|       |
  748|   159k|        return chars_read;
  749|   159k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   159k|    {
  755|   159k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 156k, False: 2.92k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   156k|            auto first_space = read_until_classic_space(input.view());
  758|   156k|            input.assign(
  759|   156k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   156k|        }
  761|       |
  762|   159k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 30.1k, False: 129k]
  ------------------
  763|  30.1k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  30.1k|                input.get_allocated_string().insert(0, "0x");
  765|  30.1k|            }
  766|  30.1k|            else {
  767|  30.1k|                input.get_allocated_string().insert(0, L"0x");
  768|  30.1k|            }
  769|  30.1k|        }
  770|       |
  771|   159k|        return input.get_allocated_string().c_str();
  772|   159k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|   159k|    {
  905|   159k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   159k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   159k|        }
  908|   159k|        else {
  909|   159k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   159k|        }
  911|   159k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|   159k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|   159k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|   159k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|   159k|            return std::wcstof(str, str_end);
  877|   159k|        }
  878|   159k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|   159k|            return std::wcstod(str, str_end);
  880|   159k|        }
  881|   159k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (881:28): [Folded - Ignored]
  ------------------
  882|   159k|            return std::wcstold(str, str_end);
  883|   159k|        }
  884|   159k|#endif
  885|   159k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  1.09M|{
 2073|  1.09M|    const auto argcount = args.size();
 2074|  1.09M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 223k, False: 868k]
  |  Branch (2074:60): [True: 223k, False: 0]
  ------------------
 2075|   223k|        auto arg = args.get(0);
 2076|   223k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   223k|    static_cast<    \
  |  |  929|   223k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   223k|    }
 2078|       |
 2079|   868k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 868k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   868k|    SCN_UNLIKELY_ATTR
 2087|   868k|    {
 2088|   868k|        auto handler = format_handler<false, CharT>{
 2089|   868k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   868k|    static_cast<    \
  |  |  929|   868k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   868k|    static_cast<    \
  |  |  929|   868k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   868k|        return vscan_parse_format_string(format, handler);
 2091|   868k|    }
 2092|   868k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  2.04M|{
 1625|  2.04M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 1.61M, False: 432k]
  ------------------
 1626|  1.61M|        return false;
 1627|  1.61M|    }
 1628|   432k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 432k, False: 0]
  |  Branch (1628:39): [True: 432k, False: 0]
  ------------------
 1629|  2.04M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   335k|{
 1658|   335k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 335k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   335k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   335k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 335k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   335k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   335k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   335k|    static_cast<    \
  |  |  929|   335k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   335k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   335k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   335k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   335k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.8k, False: 316k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  18.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  18.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  18.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  18.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  18.8k|    }                                                  \
  |  |  |  | 3671|   335k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   316k|    return it.position();
 1675|   335k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|   746k|    {
 1903|   746k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  2.20M|    {
 1722|  2.20M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  2.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.20M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  2.20M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   746k|    {
 1853|   746k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   746k|{
 2038|   746k|    const auto beg = handler.get_ctx().begin();
 2039|   746k|    detail::parse_format_string<false>(format, handler);
 2040|   746k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   746k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62.7k, False: 684k]
  |  |  ------------------
  ------------------
 2041|  62.7k|        return unexpected(handler.error);
 2042|  62.7k|    }
 2043|   684k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   746k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  5.10M|    {
 2022|  5.10M|        return ctx.get();
 2023|  5.10M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  5.10M|    {
 1857|  5.10M|        return contiguous_ctx;
 1858|  5.10M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  1.43M|    {
 1907|  1.43M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.43M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.43M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   746k|{
 1681|   746k|    auto arg = ctx.arg(id);
 1682|   746k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   746k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 746k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   746k|    return arg;
 1686|   746k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  2.20M|    {
 1797|  2.20M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  2.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.20M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  2.20M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  2.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.20M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  2.20M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  2.20M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.20M, False: 0]
  |  |  ------------------
  ------------------
 1807|  2.20M|            visited_args_lower64 |= (1ull << id);
 1808|  2.20M|            return;
 1809|  2.20M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  2.20M|    {
 1782|  2.20M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  2.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.20M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  2.20M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  2.20M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.20M, False: 0]
  |  |  ------------------
  ------------------
 1788|  2.20M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  2.20M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  2.20M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   376k|    {
 1766|   376k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 376k, False: 0]
  |  |  ------------------
  ------------------
 1767|   376k|            error = err;
 1768|   376k|        }
 1769|   376k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   746k|    {
 1944|   746k|        return parse_ctx.next_arg_id();
 1945|   746k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   746k|    {
 1985|   746k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   746k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   746k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 746k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   746k|        auto specs = detail::format_specs{};
 1998|   746k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   746k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   746k|            arg.type()};
 2001|       |
 2002|   746k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   746k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 746k]
  |  Branch (2003:29): [True: 0, False: 746k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   746k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   746k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 746k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   746k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   746k|        on_visit_scan_arg(
 2014|   746k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   746k|                                           get_ctx().locale()},
 2016|   746k|            arg);
 2017|   746k|        return parse_ctx.begin();
 2018|   746k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   746k|    {
 1701|   746k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   746k|    {
 1956|   746k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 746k]
  |  Branch (1956:23): [True: 0, False: 746k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   746k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   746k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   746k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   746k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62.7k, False: 684k]
  |  |  ------------------
  ------------------
 1963|  62.7k|            on_error(r.error());
 1964|  62.7k|        }
 1965|   684k|        else {
 1966|   684k|            get_ctx().advance_to(*r);
 1967|   684k|        }
 1968|   746k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  2.20M|    {
 1729|  2.20M|        {
 1730|  2.20M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 2.20M]
  ------------------
 1731|  2.20M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 2.20M]
  ------------------
 1732|  2.20M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  2.20M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  2.20M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 2.20M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  2.20M|        }
 1739|       |
 1740|  2.20M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 2.20M, False: 0]
  ------------------
 1741|  2.20M|            return;
 1742|  2.20M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  2.20M|    {
 1777|  2.20M|        return error;
 1778|  2.20M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  6.61M|    {
 1773|  6.61M|        return static_cast<bool>(error);
 1774|  6.61M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|   868k|    {
 1903|   868k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|   868k|    {
 1830|   868k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   868k|{
 2038|   868k|    const auto beg = handler.get_ctx().begin();
 2039|   868k|    detail::parse_format_string<false>(format, handler);
 2040|   868k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   868k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62.7k, False: 805k]
  |  |  ------------------
  ------------------
 2041|  62.7k|        return unexpected(handler.error);
 2042|  62.7k|    }
 2043|   805k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   868k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  5.95M|    {
 2022|  5.95M|        return ctx.get();
 2023|  5.95M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  5.95M|    {
 1834|  5.95M|        return ctx;
 1835|  5.95M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  1.67M|    {
 1907|  1.67M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.67M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.67M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   868k|{
 1681|   868k|    auto arg = ctx.arg(id);
 1682|   868k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   868k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 868k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   868k|    return arg;
 1686|   868k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|   868k|    {
 1944|   868k|        return parse_ctx.next_arg_id();
 1945|   868k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|   868k|    {
 1985|   868k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   868k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   868k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 868k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   868k|        auto specs = detail::format_specs{};
 1998|   868k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   868k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   868k|            arg.type()};
 2001|       |
 2002|   868k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   868k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 868k]
  |  Branch (2003:29): [True: 0, False: 868k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   868k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   868k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 868k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   868k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   868k|        on_visit_scan_arg(
 2014|   868k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   868k|                                           get_ctx().locale()},
 2016|   868k|            arg);
 2017|   868k|        return parse_ctx.begin();
 2018|   868k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|   868k|    {
 1701|   868k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   868k|    {
 1956|   868k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 868k]
  |  Branch (1956:23): [True: 0, False: 868k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   868k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   868k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   868k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   868k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62.7k, False: 805k]
  |  |  ------------------
  ------------------
 1963|  62.7k|            on_error(r.error());
 1964|  62.7k|        }
 1965|   805k|        else {
 1966|   805k|            get_ctx().advance_to(*r);
 1967|   805k|        }
 1968|   868k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   955k|{
 2053|   955k|    const auto argcount = args.size();
 2054|   955k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 208k, False: 746k]
  |  Branch (2054:60): [True: 208k, False: 0]
  ------------------
 2055|   208k|        auto arg = args.get(0);
 2056|   208k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   208k|    static_cast<    \
  |  |  929|   208k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   208k|    }
 2058|       |
 2059|   746k|    auto handler = format_handler<true, CharT>{
 2060|   746k|        ranges::subrange<const CharT*>{source.data(),
 2061|   746k|                                       source.data() + source.size()},
 2062|   746k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   746k|    static_cast<    \
  |  |  929|   746k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   746k|    static_cast<    \
  |  |  929|   746k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   746k|    return vscan_parse_format_string(format, handler);
 2064|   955k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   313k|{
 1638|   313k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 313k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   313k|    auto reader =
 1644|   313k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   313k|            ranges::subrange<const CharT*>{source.data(),
 1646|   313k|                                           source.data() + source.size()},
 1647|   313k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   313k|    static_cast<    \
  |  |  929|   313k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   313k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   313k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   313k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   313k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.8k, False: 294k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  18.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  18.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  18.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  18.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  18.8k|    }                                                  \
  |  |  |  | 3671|   313k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   294k|    return ranges::distance(source.data(), it);
 1650|   313k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   362k|{
 2053|   362k|    const auto argcount = args.size();
 2054|   362k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 67.2k, False: 294k]
  |  Branch (2054:60): [True: 67.2k, False: 0]
  ------------------
 2055|  67.2k|        auto arg = args.get(0);
 2056|  67.2k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  67.2k|    static_cast<    \
  |  |  929|  67.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  67.2k|    }
 2058|       |
 2059|   294k|    auto handler = format_handler<true, CharT>{
 2060|   294k|        ranges::subrange<const CharT*>{source.data(),
 2061|   294k|                                       source.data() + source.size()},
 2062|   294k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   294k|    static_cast<    \
  |  |  929|   294k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   294k|    static_cast<    \
  |  |  929|   294k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   294k|    return vscan_parse_format_string(format, handler);
 2064|   362k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   724k|{
 1625|   724k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 589k, False: 134k]
  ------------------
 1626|   589k|        return false;
 1627|   589k|    }
 1628|   134k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 134k, False: 0]
  |  Branch (1628:39): [True: 134k, False: 0]
  ------------------
 1629|   724k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   100k|{
 1638|   100k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   100k|    auto reader =
 1644|   100k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   100k|            ranges::subrange<const CharT*>{source.data(),
 1646|   100k|                                           source.data() + source.size()},
 1647|   100k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   100k|    static_cast<    \
  |  |  929|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   100k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.6k, False: 63.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  37.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  37.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  37.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  37.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  37.6k|    }                                                  \
  |  |  |  | 3671|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  63.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  63.1k|    return ranges::distance(source.data(), it);
 1650|   100k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   294k|    {
 1903|   294k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   294k|    {
 1853|   294k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   294k|{
 2038|   294k|    const auto beg = handler.get_ctx().begin();
 2039|   294k|    detail::parse_format_string<false>(format, handler);
 2040|   294k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 125k, False: 169k]
  |  |  ------------------
  ------------------
 2041|   125k|        return unexpected(handler.error);
 2042|   125k|    }
 2043|   169k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   294k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  1.81M|    {
 2022|  1.81M|        return ctx.get();
 2023|  1.81M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.81M|    {
 1857|  1.81M|        return contiguous_ctx;
 1858|  1.81M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   464k|    {
 1907|   464k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 464k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   464k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   294k|{
 1681|   294k|    auto arg = ctx.arg(id);
 1682|   294k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   294k|    return arg;
 1686|   294k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   294k|    {
 1944|   294k|        return parse_ctx.next_arg_id();
 1945|   294k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   294k|    {
 1985|   294k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   294k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   294k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 294k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   294k|        auto specs = detail::format_specs{};
 1998|   294k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   294k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   294k|            arg.type()};
 2001|       |
 2002|   294k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   294k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 294k]
  |  Branch (2003:29): [True: 0, False: 294k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   294k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   294k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   294k|        on_visit_scan_arg(
 2014|   294k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   294k|                                           get_ctx().locale()},
 2016|   294k|            arg);
 2017|   294k|        return parse_ctx.begin();
 2018|   294k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   294k|    {
 1701|   294k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   294k|    {
 1956|   294k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 294k]
  |  Branch (1956:23): [True: 0, False: 294k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   294k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   294k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 125k, False: 169k]
  |  |  ------------------
  ------------------
 1963|   125k|            on_error(r.error());
 1964|   125k|        }
 1965|   169k|        else {
 1966|   169k|            get_ctx().advance_to(*r);
 1967|   169k|        }
 1968|   294k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   361k|{
 2073|   361k|    const auto argcount = args.size();
 2074|   361k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 67.1k, False: 294k]
  |  Branch (2074:60): [True: 67.1k, False: 0]
  ------------------
 2075|  67.1k|        auto arg = args.get(0);
 2076|  67.1k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  67.1k|    static_cast<    \
  |  |  929|  67.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  67.1k|    }
 2078|       |
 2079|   294k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 294k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   294k|    SCN_UNLIKELY_ATTR
 2087|   294k|    {
 2088|   294k|        auto handler = format_handler<false, CharT>{
 2089|   294k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   294k|    static_cast<    \
  |  |  929|   294k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   294k|    static_cast<    \
  |  |  929|   294k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   294k|        return vscan_parse_format_string(format, handler);
 2091|   294k|    }
 2092|   294k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   100k|{
 1658|   100k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   100k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   100k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   100k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   100k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   100k|    static_cast<    \
  |  |  929|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   100k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.6k, False: 63.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  37.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  37.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  37.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  37.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  37.6k|    }                                                  \
  |  |  |  | 3671|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  63.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  63.0k|    return it.position();
 1675|   100k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|   294k|    {
 1903|   294k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   294k|    {
 1830|   294k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   294k|{
 2038|   294k|    const auto beg = handler.get_ctx().begin();
 2039|   294k|    detail::parse_format_string<false>(format, handler);
 2040|   294k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 125k, False: 169k]
  |  |  ------------------
  ------------------
 2041|   125k|        return unexpected(handler.error);
 2042|   125k|    }
 2043|   169k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   294k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  1.81M|    {
 2022|  1.81M|        return ctx.get();
 2023|  1.81M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  1.81M|    {
 1834|  1.81M|        return ctx;
 1835|  1.81M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   464k|    {
 1907|   464k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 464k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   464k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   294k|{
 1681|   294k|    auto arg = ctx.arg(id);
 1682|   294k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   294k|    return arg;
 1686|   294k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   294k|    {
 1944|   294k|        return parse_ctx.next_arg_id();
 1945|   294k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   294k|    {
 1985|   294k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   294k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   294k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 294k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   294k|        auto specs = detail::format_specs{};
 1998|   294k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   294k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   294k|            arg.type()};
 2001|       |
 2002|   294k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   294k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 294k]
  |  Branch (2003:29): [True: 0, False: 294k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   294k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   294k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   294k|        on_visit_scan_arg(
 2014|   294k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   294k|                                           get_ctx().locale()},
 2016|   294k|            arg);
 2017|   294k|        return parse_ctx.begin();
 2018|   294k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   294k|    {
 1701|   294k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   294k|    {
 1956|   294k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 294k]
  |  Branch (1956:23): [True: 0, False: 294k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   294k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   294k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 125k, False: 169k]
  |  |  ------------------
  ------------------
 1963|   125k|            on_error(r.error());
 1964|   125k|        }
 1965|   169k|        else {
 1966|   169k|            get_ctx().advance_to(*r);
 1967|   169k|        }
 1968|   294k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   104k|{
 2099|   104k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   104k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   111k|{
 2099|   111k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   111k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  33.6k|{
 2099|  33.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  33.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  33.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  33.5k|{
 2099|  33.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  33.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  33.5k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  2.09k|{
 1363|  2.09k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  2.09k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  2.09k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  2.09k|            std::u32string tmp;
 1368|  2.09k|            transcode_to_string_impl_to32(src, tmp);
 1369|  2.09k|            return transcode_to_string_impl_32to16<false>(
 1370|  2.09k|                std::u32string_view{tmp}, dest);
 1371|  2.09k|        }
 1372|  2.09k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  2.09k|            return transcode_to_string_impl_to32(src, dest);
 1374|  2.09k|        }
 1375|  2.09k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  2.09k|{
 1256|  2.09k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  2.09k|    auto it = src.begin();
 1259|   584k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 582k, False: 2.09k]
  ------------------
 1260|   582k|        auto res = get_next_code_point(
 1261|   582k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   582k|                                                                 src.end()));
 1263|   582k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   582k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 580k]
  |  |  ------------------
  ------------------
 1264|  2.00k|            dest.push_back(DestCharT{0xfffd});
 1265|  2.00k|        }
 1266|   580k|        else {
 1267|   580k|            dest.push_back(res.value);
 1268|   580k|        }
 1269|   582k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   582k|    }
 1271|  2.09k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   900k|{
 1169|   900k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   900k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   900k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   900k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   900k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   900k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.0k, False: 877k]
  |  |  ------------------
  ------------------
 1173|  23.0k|        return {get_start_for_next_code_point(input),
 1174|  23.0k|                detail::invalid_code_point};
 1175|  23.0k|    }
 1176|   877k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   877k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.35k, False: 873k]
  |  |  ------------------
  ------------------
 1177|  3.35k|        return {input.end(), detail::invalid_code_point};
 1178|  3.35k|    }
 1179|       |
 1180|   873k|    return {input.begin() + len,
 1181|   873k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   877k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  23.0k|{
 1155|  23.0k|    auto it = input.begin();
 1156|   186k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 179k, False: 6.31k]
  ------------------
 1157|   179k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 16.7k, False: 163k]
  ------------------
 1158|  16.7k|            break;
 1159|  16.7k|        }
 1160|   179k|    }
 1161|  23.0k|    return it;
 1162|  23.0k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  23.8M|    {
  809|  23.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  23.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  23.8M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  8.97M|    {
  823|  8.97M|        return a.m_code == b.m_code;
  824|  8.97M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1727|  1.23M|    {
 1728|  1.23M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  1.23M|        std::strcpy(m_locbuf, loc);
 1730|  1.23M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  1.23M|    {
 1733|       |        // Restore locale to what it was before
 1734|  1.23M|        std::setlocale(m_category, m_locbuf);
 1735|  1.23M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1756|  1.23M|    {
 1757|  1.23M|        std::setlocale(cat, "C");
 1758|  1.23M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  2.20M|    {
 2936|  2.20M|        return m_msg == nullptr;
 2937|  2.20M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  2.17M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  16.9M|{
  458|  16.9M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  16.9M|        static_cast<unsigned char>(ch))];
  460|  16.9M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  41.8k|{
  469|  41.8k|    return static_cast<unsigned char>(ch) <= 127;
  470|  41.8k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  3.89M|{
  539|  3.89M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  3.89M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  10.2M|{
  784|  10.2M|    return e != eof_error::good;
  785|  10.2M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  40.6k|{
  798|  40.6k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  40.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  40.6k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  40.6k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   189k|{
  845|   189k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   189k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   189k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   189k|    return parse_error::eof;
  847|   189k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.18M|{
  854|  3.18M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.18M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.18M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 69.8k, False: 3.11M]
  ------------------
  859|  69.8k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  69.8k|    }
  861|       |
  862|  3.11M|    return scan_error{code, msg};
  863|  3.18M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.18M|{
  868|  3.18M|    return [code, msg](parse_error err) {
  869|  3.18M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.18M|    };
  871|  3.18M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  3.97M|{
 1200|       |    // Pattern_White_Space property
 1201|  3.97M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 3.79M, False: 187k]
  |  Branch (1201:27): [True: 938k, False: 2.85M]
  ------------------
 1202|  3.97M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 54.5k, False: 2.98M]
  ------------------
 1203|  3.97M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 55.6k, False: 2.92M]
  ------------------
 1204|  3.97M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 3.82k, False: 2.92M]
  ------------------
 1205|  3.97M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 20.4k, False: 2.90M]
  ------------------
 1206|  3.97M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 529k, False: 2.37M]
  ------------------
 1207|  3.97M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 154, False: 2.37M]
  ------------------
 1208|  3.97M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  2.74M|{
 2220|  2.74M|    unsigned char running_diff{0};
 2221|  10.3M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 7.57M, False: 2.74M]
  ------------------
 2222|  7.57M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  7.57M|    }
 2224|  2.74M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 84.5k, False: 2.66M]
  |  Branch (2224:33): [True: 15.9k, False: 2.64M]
  ------------------
 2225|  2.74M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  18.7M|{
 3123|  18.7M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  18.7M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  1.90M|{
 3127|  1.90M|#if WCHAR_MIN < 0
 3128|  1.90M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 1.89M, False: 12.5k]
  |  Branch (3128:20): [True: 1.15M, False: 739k]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  1.15M|        return char_to_int(static_cast<char>(ch));
 3133|  1.15M|    }
 3134|   752k|    return 255;
 3135|  1.90M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  1.82M|{
 6008|  1.82M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 1.82M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  1.82M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 1.82M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  1.82M|    return {};
 6023|  1.82M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  3.08M|    {
  304|  3.08M|        ranges::advance(x, n);
  305|  3.08M|        return x;
  306|  3.08M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  3.08M|    {
  268|  3.08M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.08M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  3.08M|    {
  151|  3.08M|        i += n;
  152|  3.08M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  3.65M|    {
  108|  3.65M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.65M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  3.65M|    {
   87|  3.65M|        return s - i;
   88|  3.65M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.20M|    {
  304|  1.20M|        ranges::advance(x, n);
  305|  1.20M|        return x;
  306|  1.20M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.20M|    {
  268|  1.20M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.20M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.20M|    {
  151|  1.20M|        i += n;
  152|  1.20M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   318k|    {
  108|   318k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   318k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   318k|    {
   87|   318k|        return s - i;
   88|   318k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  1.20M|{
  981|  1.20M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  1.20M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  1.20M|        return true;
  984|  1.20M|    }
  985|  1.20M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  1.20M|                           ranges::const_iterator_t<Range>,
  987|  1.20M|                           typename detail::basic_scan_buffer<
  988|  1.20M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  1.20M|        auto beg = r.begin();
  990|  1.20M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 1.20M, False: 0]
  ------------------
  991|  1.20M|            return false;
  992|  1.20M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  1.20M|    else {
 1006|  1.20M|        return false;
 1007|  1.20M|    }
 1008|  1.20M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  30.3M|    {
  763|  30.3M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  30.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  30.3M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  3.16M|{
 1857|  3.16M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  3.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  3.16M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  3.16M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  3.16M|        if (sz < count) {
 1862|  3.16M|            return unexpected(eof_error::eof);
 1863|  3.16M|        }
 1864|       |
 1865|  3.16M|        return ranges::next(range.begin(), count);
 1866|  3.16M|    }
 1867|  3.16M|    else {
 1868|  3.16M|        auto it = range.begin();
 1869|  3.16M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 1.94M, False: 1.21M]
  ------------------
 1870|  1.94M|            return ranges::next(it, count);
 1871|  1.94M|        }
 1872|       |
 1873|  4.82M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 3.64M, False: 1.18M]
  ------------------
 1874|  3.64M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 35.3k, False: 3.61M]
  ------------------
 1875|  35.3k|                return unexpected(eof_error::eof);
 1876|  35.3k|            }
 1877|  3.64M|        }
 1878|       |
 1879|  1.18M|        return it;
 1880|  1.21M|    }
 1881|  3.16M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  3.16M|{
 1095|  3.16M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  3.16M|        return r.size();
 1097|  3.16M|    }
 1098|  3.16M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  3.16M|                           ranges::const_iterator_t<Range>,
 1100|  3.16M|                           typename detail::basic_scan_buffer<
 1101|  3.16M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  3.16M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  3.16M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  3.16M|        }
 1105|  3.16M|        else {
 1106|  3.16M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 3.16M, False: 0]
  ------------------
 1107|  3.16M|                return static_cast<size_t>(
 1108|  3.16M|                    r.begin().parent()->chars_available() -
 1109|  3.16M|                    r.begin().position());
 1110|  3.16M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  3.16M|        }
 1113|  3.16M|    }
 1114|  3.16M|    else {
 1115|  3.16M|        return 0;
 1116|  3.16M|    }
 1117|  3.16M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  2.90M|    {
  754|  2.90M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  15.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.1M|              cvref<T> obj = *get<T>(fn);
  745|  15.1M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  15.1M|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.1M|              }
  748|  15.1M|              else {
  749|  15.1M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.1M|              }
  751|  15.1M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  15.1M|    {
  684|  15.1M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  15.1M|            return static_cast<T*>(s.m_cp);
  686|  15.1M|        }
  687|  15.1M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  15.1M|            return static_cast<T*>(s.m_p);
  689|  15.1M|        }
  690|  15.1M|        else {
  691|  15.1M|            return reinterpret_cast<T*>(s.m_fp);
  692|  15.1M|        }
  693|  15.1M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  2.90M|        {
  662|  2.90M|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  6.91M|    {
  763|  6.91M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  6.91M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  6.91M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  1.85M|    {
  754|  1.85M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  3.25M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.25M|              cvref<T> obj = *get<T>(fn);
  745|  3.25M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.25M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.25M|              }
  748|  3.25M|              else {
  749|  3.25M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.25M|              }
  751|  3.25M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  3.25M|    {
  684|  3.25M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.25M|            return static_cast<T*>(s.m_cp);
  686|  3.25M|        }
  687|  3.25M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.25M|            return static_cast<T*>(s.m_p);
  689|  3.25M|        }
  690|  3.25M|        else {
  691|  3.25M|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.25M|        }
  693|  3.25M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  1.85M|        {
  662|  1.85M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   868k|    {
 6037|   868k|        const bool need_skipped_width =
 6038|   868k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 868k]
  |  Branch (6038:33): [True: 0, False: 868k]
  ------------------
 6039|   868k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   868k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 868k]
  ------------------
 6043|   868k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 868k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   868k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 868k, False: 0]
  |  Branch (6047:56): [True: 868k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   868k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 868k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  1.72M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   868k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   868k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   868k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   868k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.9k, False: 854k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  13.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  13.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  13.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  13.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  13.9k|    }                                                  \
  |  |  |  | 3671|   868k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   854k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  1.72M|                            make_eof_scan_error));
 6058|       |
 6059|  1.72M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 854k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   854k|            return result_type{it, 0};
 6067|  1.72M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   868k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  2.31M|{
 1976|  2.31M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.31M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  2.31M|{
 1957|  2.31M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.31M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.31M|    }
 1960|  2.31M|    else {
 1961|  2.31M|        auto first = range.begin();
 1962|  12.1M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 12.1M, False: 25.8k]
  ------------------
 1963|  12.1M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.29M, False: 9.82M]
  ------------------
 1964|  2.29M|                return first;
 1965|  2.29M|            }
 1966|  12.1M|        }
 1967|  25.8k|        return first;
 1968|  2.31M|    }
 1969|  2.31M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  2.06M|    {
  108|  2.06M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.06M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  2.06M|    {
   94|  2.06M|        iter_difference_t<I> counter{0};
   95|  19.6M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 17.5M, False: 2.06M]
  ------------------
   96|  17.5M|            ++i;
   97|  17.5M|            ++counter;
   98|  17.5M|        }
   99|  2.06M|        return counter;
  100|  2.06M|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.18M|    return [code, msg](parse_error err) {
  869|  3.18M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.18M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|   449k|    {
 1780|   449k|        auto stdloc = loc.get<std::locale>();
 1781|   449k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   449k|        grouping = numpunct.grouping();
 1783|   449k|        thousands_sep =
 1784|   449k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 449k]
  ------------------
 1785|   449k|        decimal_point = numpunct.decimal_point();
 1786|   449k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|   449k|{
 1717|   449k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 449k, False: 0]
  ------------------
 1718|   449k|        return std::use_facet<Facet>(stdloc);
 1719|   449k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   449k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  3.39M|{
 1846|  3.39M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.6k, False: 3.37M]
  |  |  ------------------
  ------------------
 1847|  18.6k|        return unexpected(e);
 1848|  18.6k|    }
 1849|       |
 1850|  3.37M|    return ranges::next(range.begin());
 1851|  3.39M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  4.93M|{
  950|  4.93M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  4.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.1k, False: 4.89M]
  |  |  ------------------
  ------------------
  951|  37.1k|        return eof_error::eof;
  952|  37.1k|    }
  953|  4.89M|    return eof_error::good;
  954|  4.93M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  6.93M|{
  944|  6.93M|    return is_range_eof(r.begin(), r.end());
  945|  6.93M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  6.93M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  6.93M|    {
  937|  6.93M|        return begin == end;
  938|  6.93M|    }
  939|  6.93M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  3.37M|    {
  296|  3.37M|        ++x;
  297|  3.37M|        return x;
  298|  3.37M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  1.29M|{
 3141|  1.29M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.29M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 994k, False: 304k]
  ------------------
 3143|   994k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 994k, False: 336]
  ------------------
 3144|   994k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   994k|        }
 3146|    336|        return unexpected(eof_error::eof);
 3147|   994k|    }
 3148|       |
 3149|   304k|    auto& it = *r;
 3150|   304k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 129k, False: 175k]
  ------------------
 3151|   129k|        return std::pair{it, sign_type::minus_sign};
 3152|   129k|    }
 3153|   175k|    return std::pair{it, sign_type::plus_sign};
 3154|   304k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  2.26M|{
 2272|  2.26M|    auto it = read_code_unit(range);
 2273|  2.26M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.8k, False: 2.25M]
  |  |  ------------------
  ------------------
 2274|  10.8k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  10.8k|    }
 2276|       |
 2277|  4.26M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 4.26M, False: 1.83M]
  ------------------
 2278|  4.26M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 418k, False: 3.85M]
  ------------------
 2279|   418k|            return *it;
 2280|   418k|        }
 2281|  4.26M|    }
 2282|       |
 2283|  1.83M|    return unexpected(parse_error::error);
 2284|  2.25M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  3.16M|{
 2231|  3.16M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.16M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.16M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.16M|        if (range.size() < str.size()) {
 2236|  3.16M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  3.16M|        }
 2238|  3.16M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  3.16M|            return unexpected(parse_error::error);
 2240|  3.16M|        }
 2241|  3.16M|        return ranges::next(range.begin(), str.size());
 2242|  3.16M|    }
 2243|  3.16M|    else {
 2244|  3.16M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.16M|            if (ch < 'A' || ch > 'Z') {
 2246|  3.16M|                return ch;
 2247|  3.16M|            }
 2248|  3.16M|            return static_cast<char_type>(ch +
 2249|  3.16M|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.16M|        };
 2251|       |
 2252|  3.16M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  3.16M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.16M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.16M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 35.3k, False: 3.12M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  35.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  35.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  35.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  35.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  35.3k|    }                                                  \
  |  |  |  | 3671|  3.16M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  3.12M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.12M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.12M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  3.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.02M, False: 102k]
  |  |  ------------------
  ------------------
 2257|  3.12M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.12M|                    return ascii_tolower(a) ==
 2259|  3.12M|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.12M|                }))) {
 2261|  3.02M|            return unexpected(parse_error::error);
 2262|  3.02M|        }
 2263|       |
 2264|   102k|        return it;
 2265|  3.12M|    }
 2266|  3.16M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  3.60M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.60M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 3.25M, False: 346k]
  |  Branch (2245:29): [True: 290k, False: 55.5k]
  ------------------
 2246|  3.54M|                return ch;
 2247|  3.54M|            }
 2248|  55.5k|            return static_cast<char_type>(ch +
 2249|  55.5k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.60M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  1.12M|{
 2146|  1.12M|    auto it = read_code_unit(range);
 2147|  1.12M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.82k, False: 1.12M]
  |  |  ------------------
  ------------------
 2148|  7.82k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  7.82k|    }
 2150|       |
 2151|  1.12M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 913k, False: 207k]
  |  |  ------------------
  ------------------
 2152|  1.12M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   913k|        return unexpected(parse_error::error);
 2154|   913k|    }
 2155|       |
 2156|   207k|    return *it;
 2157|  1.12M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  2.31M|{
 1996|  2.31M|    auto it = read_while_code_unit(range, pred);
 1997|  2.31M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 937k, False: 1.37M]
  ------------------
 1998|   937k|        return unexpected(parse_error::error);
 1999|   937k|    }
 2000|  1.37M|    return it;
 2001|  2.31M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  1.06M|    {
 1621|  1.06M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.06M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.06M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.06M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.06M|            m_storage.reset();
 1627|  1.06M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.06M|        }
 1629|  1.06M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  1.06M|                                          std::basic_string<CharT>>) {
 1631|  1.06M|            m_storage.emplace(SCN_FWD(range));
 1632|  1.06M|            m_view = string_view_type{*m_storage};
 1633|  1.06M|        }
 1634|  1.06M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  1.06M|                                          typename detail::basic_scan_buffer<
 1636|  1.06M|                                              value_t>::forward_iterator> &&
 1637|  1.06M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  1.06M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.06M|            auto end_seg = range.end().contiguous_segment();
 1640|  1.06M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 149k, False: 919k]
  |  |  ------------------
  ------------------
 1641|  1.06M|                             detail::to_address(end_seg.end()))) {
 1642|   149k|                auto& str = m_storage.emplace();
 1643|   149k|                str.reserve(range.end().position() - range.begin().position());
 1644|   149k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   149k|                m_view = string_view_type{str};
 1646|   149k|                return;
 1647|   149k|            }
 1648|       |
 1649|   919k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   919k|                                                            end_seg.data());
 1651|   919k|            m_storage.reset();
 1652|   919k|        }
 1653|  1.06M|        else {
 1654|  1.06M|            auto& str = m_storage.emplace();
 1655|  1.06M|            if constexpr (ranges::sized_range<Range>) {
 1656|  1.06M|                str.reserve(range.size());
 1657|  1.06M|            }
 1658|  1.06M|            if constexpr (ranges::common_range<Range>) {
 1659|  1.06M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.06M|                          std::back_inserter(str));
 1661|  1.06M|            }
 1662|  1.06M|            else {
 1663|  1.06M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.06M|                     ++it) {
 1665|  1.06M|                    str.push_back(*it);
 1666|  1.06M|                }
 1667|  1.06M|            }
 1668|  1.06M|            m_view = string_view_type{str};
 1669|  1.06M|        }
 1670|  1.06M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  7.35M|    {
 1582|  7.35M|        return m_view;
 1583|  7.35M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  4.45M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   794k|    {
 6079|   794k|        const bool need_skipped_width =
 6080|   794k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 794k]
  |  Branch (6080:33): [True: 0, False: 794k]
  ------------------
 6081|   794k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   794k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 794k]
  ------------------
 6084|   794k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 794k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   794k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 794k, False: 0]
  ------------------
 6093|   794k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 794k]
  ------------------
 6094|   794k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   794k|        return result_type{rng.begin(), 0};
 6118|   794k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  1.56M|{
 1846|  1.56M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.72k, False: 1.56M]
  |  |  ------------------
  ------------------
 1847|  4.72k|        return unexpected(e);
 1848|  4.72k|    }
 1849|       |
 1850|  1.56M|    return ranges::next(range.begin());
 1851|  1.56M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  2.93M|{
  950|  2.93M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.7k, False: 2.91M]
  |  |  ------------------
  ------------------
  951|  20.7k|        return eof_error::eof;
  952|  20.7k|    }
  953|  2.91M|    return eof_error::good;
  954|  2.93M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  2.93M|{
  944|  2.93M|    return is_range_eof(r.begin(), r.end());
  945|  2.93M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  2.93M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.93M|    {
  937|  2.93M|        return begin == end;
  938|  2.93M|    }
  939|  2.93M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.56M|    {
  296|  1.56M|        ++x;
  297|  1.56M|        return x;
  298|  1.56M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  1.07M|{
 3141|  1.07M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.07M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 813k, False: 258k]
  ------------------
 3143|   813k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 813k, False: 108]
  ------------------
 3144|   813k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   813k|        }
 3146|    108|        return unexpected(eof_error::eof);
 3147|   813k|    }
 3148|       |
 3149|   258k|    auto& it = *r;
 3150|   258k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 120k, False: 137k]
  ------------------
 3151|   120k|        return std::pair{it, sign_type::minus_sign};
 3152|   120k|    }
 3153|   137k|    return std::pair{it, sign_type::plus_sign};
 3154|   258k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  1.24M|{
 2272|  1.24M|    auto it = read_code_unit(range);
 2273|  1.24M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.01k, False: 1.24M]
  |  |  ------------------
  ------------------
 2274|  2.01k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  2.01k|    }
 2276|       |
 2277|  2.32M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.32M, False: 955k]
  ------------------
 2278|  2.32M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 287k, False: 2.04M]
  ------------------
 2279|   287k|            return *it;
 2280|   287k|        }
 2281|  2.32M|    }
 2282|       |
 2283|   955k|    return unexpected(parse_error::error);
 2284|  1.24M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  2.78M|{
 2231|  2.78M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  2.78M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  2.78M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  2.78M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 35.5k, False: 2.74M]
  ------------------
 2236|  35.5k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  35.5k|        }
 2238|  2.74M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 2.64M, False: 100k]
  ------------------
 2239|  2.64M|            return unexpected(parse_error::error);
 2240|  2.64M|        }
 2241|   100k|        return ranges::next(range.begin(), str.size());
 2242|  2.74M|    }
 2243|  2.78M|    else {
 2244|  2.78M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  2.78M|            if (ch < 'A' || ch > 'Z') {
 2246|  2.78M|                return ch;
 2247|  2.78M|            }
 2248|  2.78M|            return static_cast<char_type>(ch +
 2249|  2.78M|                                          static_cast<char_type>('a' - 'A'));
 2250|  2.78M|        };
 2251|       |
 2252|  2.78M|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  2.78M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  2.78M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  2.78M|        if (SCN_UNLIKELY(!std::equal(
 2257|  2.78M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  2.78M|                    return ascii_tolower(a) ==
 2259|  2.78M|                           static_cast<detail::char_t<Range>>(b);
 2260|  2.78M|                }))) {
 2261|  2.78M|            return unexpected(parse_error::error);
 2262|  2.78M|        }
 2263|       |
 2264|  2.78M|        return it;
 2265|  2.78M|    }
 2266|  2.78M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   319k|{
 2146|   319k|    auto it = read_code_unit(range);
 2147|   319k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.70k, False: 317k]
  |  |  ------------------
  ------------------
 2148|  2.70k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  2.70k|    }
 2150|       |
 2151|   317k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 263k, False: 54.0k]
  |  |  ------------------
  ------------------
 2152|   317k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   263k|        return unexpected(parse_error::error);
 2154|   263k|    }
 2155|       |
 2156|  54.0k|    return *it;
 2157|   317k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  4.01M|    {
 1503|  4.01M|        return sv;
 1504|  4.01M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   589k|{
 1976|   589k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   589k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   589k|{
 1957|   589k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   589k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   589k|    }
 1960|   589k|    else {
 1961|   589k|        auto first = range.begin();
 1962|   589k|        for (; first != range.end(); ++first) {
 1963|   589k|            if (pred(*first)) {
 1964|   589k|                return first;
 1965|   589k|            }
 1966|   589k|        }
 1967|   589k|        return first;
 1968|   589k|    }
 1969|   589k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  1.05M|{
 2951|  1.05M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.05M, False: 0]
  ------------------
 2952|  1.05M|        auto it = read_while_classic_space(range);
 2953|  1.05M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.05M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 1.04M]
  |  |  ------------------
  ------------------
 2955|  11.9k|            return unexpected(e);
 2956|  11.9k|        }
 2957|       |
 2958|  1.04M|        return it;
 2959|  1.05M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.05M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  1.05M|{
 2117|  1.05M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.05M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.05M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.05M|        auto buf = make_contiguous_buffer(range);
 2121|  1.05M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.05M|        return ranges::next(range.begin(),
 2123|  1.05M|                            ranges::distance(buf.view().begin(), it));
 2124|  1.05M|    }
 2125|  1.05M|    else {
 2126|  1.05M|        auto it = range.begin();
 2127|       |
 2128|  1.05M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  1.05M|            auto seg = get_contiguous_beginning(range);
 2130|  1.05M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.05M|                seg_it != seg.end()) {
 2132|  1.05M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  1.05M|            }
 2134|  1.05M|            ranges::advance(it, seg.size());
 2135|  1.05M|        }
 2136|       |
 2137|  1.05M|        return read_while_code_point(
 2138|  1.05M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.05M|    }
 2140|  1.05M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  1.05M|{
 1683|  1.05M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  1.05M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  1.05M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  1.05M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  1.05M|    }
 1688|  1.05M|    else {
 1689|  1.05M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  1.05M|    }
 1691|  1.05M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  1.05M|    {
 1490|  1.05M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  3.20M|    {
  304|  3.20M|        ranges::advance(x, n);
  305|  3.20M|        return x;
  306|  3.20M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  4.26M|    {
  268|  4.26M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  4.26M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  4.26M|    {
  181|  19.6M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 15.3M, False: 4.26M]
  ------------------
  182|  15.3M|            ++i;
  183|  15.3M|        }
  184|  4.26M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   279k|    {
 6193|   279k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   279k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   279k|            auto rd = make_reader<T, char_type>();
 6198|   279k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   279k|                return unexpected(e);
 6200|   279k|            }
 6201|       |
 6202|   279k|            return impl(rd, range, value);
 6203|   279k|        }
 6204|   279k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   279k|            auto rd = make_reader<T, char_type>();
 6206|   279k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 279k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   279k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 279k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   279k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   279k|                return impl(rd, range, value);
 6213|   279k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   279k|        else {
 6221|   279k|            SCN_EXPECT(false);
 6222|   279k|            SCN_UNREACHABLE;
 6223|   279k|        }
 6224|   279k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  1.61M|    {
 3040|  1.61M|        reader_error_handler eh{};
 3041|  1.61M|        get_derived().check_specs_impl(specs, eh);
 3042|  1.61M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.61M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  1.61M|        return {};
 3046|  1.61M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  1.61M|    {
 3051|  1.61M|        return static_cast<Derived&>(*this);
 3052|  1.61M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  1.61M|    {
 4145|  1.61M|        detail::check_float_type_specs(specs, eh);
 4146|  1.61M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   279k|    {
 6124|   279k|        const bool need_skipped_width =
 6125|   279k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 279k]
  |  Branch (6125:33): [True: 0, False: 279k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   279k|        auto it = rng.begin();
 6129|   279k|        std::ptrdiff_t prefix_width = 0;
 6130|   279k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 279k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   279k|        else {
 6138|   279k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   279k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   279k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   279k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.18k, False: 275k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.18k|    }                                                  \
  |  |  |  | 3671|   279k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   275k|            std::tie(it, prefix_width) = prefix_result;
 6140|   275k|        }
 6141|   275k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   275k|        std::ptrdiff_t value_width = 0;
 6145|   275k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 275k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   275k|        else {
 6161|   275k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   275k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   275k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   275k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.7k, False: 258k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  16.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  16.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  16.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  16.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  16.7k|    }                                                  \
  |  | 3671|   275k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   258k|                                             specs, value, loc));
 6163|       |
 6164|   258k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 258k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   258k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   258k|        std::ptrdiff_t postfix_width = 0;
 6173|   258k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 255k, False: 3.38k]
  ------------------
 6174|   255k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   255k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   255k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   255k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 255k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   255k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   255k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   255k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   255k|                                 value_width));
 6178|   255k|            std::tie(it, postfix_width) = postfix_result;
 6179|   255k|        }
 6180|       |
 6181|   258k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   258k|                                                 value_width, postfix_width);
 6183|   258k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 258k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   258k|        return it;
 6188|   258k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  3.73M|    {
 3035|  3.73M|        return true;
 3036|  3.73M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|  1.58M|    {
 4217|  1.58M|        unsigned options{};
 4218|  1.58M|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 449k, False: 1.14M]
  ------------------
 4219|   449k|            options |= float_reader_base::allow_thsep;
 4220|   449k|        }
 4221|       |
 4222|  1.58M|        SCN_GCC_COMPAT_PUSH
 4223|  1.58M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|  1.58M|        switch (specs.type) {
 4226|   232k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 232k, False: 1.35M]
  ------------------
 4227|   232k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  38.8k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 38.8k, False: 1.55M]
  ------------------
 4230|  38.8k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   486k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 486k, False: 1.10M]
  ------------------
 4233|   486k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   382k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 382k, False: 1.20M]
  ------------------
 4236|   382k|                return options | float_reader_base::allow_scientific |
 4237|   382k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   449k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 449k, False: 1.14M]
  ------------------
 4240|   449k|                return options | float_reader_base::allow_scientific |
 4241|   449k|                       float_reader_base::allow_fixed |
 4242|   449k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 1.58M]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|  1.58M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|  1.58M|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|  1.58M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|  1.58M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  2.22M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  4.45M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   689k|    {
 3691|   689k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   689k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   689k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   689k|        const std::ptrdiff_t sign_len =
 3694|   689k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 165k, False: 523k]
  ------------------
 3695|       |
 3696|   689k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   689k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   689k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   689k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   689k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.7k, False: 674k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  14.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  14.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  14.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  14.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  14.7k|    }                                                  \
  |  |  |  | 3671|   689k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   674k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   674k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   689k|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  2.13M|    {
 4057|  2.13M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 2.13M, False: 0]
  ------------------
 4058|  2.13M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 2.13M, False: 0]
  ------------------
 4059|  2.13M|            return;
 4060|  2.13M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  2.44M|    {
 1587|  2.44M|        return m_storage.has_value();
 1588|  2.44M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  1.43M|    {
 1592|  1.43M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  1.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  1.43M|        return *m_storage;
 1594|  1.43M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   275k|    {
 4170|   275k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   275k|#if !SCN_DISABLE_LOCALE
 4173|   275k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 77.6k, False: 197k]
  ------------------
 4174|  77.6k|            return read_impl<Range>(
 4175|  77.6k|                range, rd,
 4176|  77.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  77.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  77.6k|                },
 4179|  77.6k|                value, loc);
 4180|  77.6k|        }
 4181|   197k|#endif
 4182|       |
 4183|   197k|        return read_impl<Range>(
 4184|   197k|            range, rd,
 4185|   197k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   197k|                return r.read_source(SCN_FWD(args)...);
 4187|   197k|            },
 4188|   197k|            value);
 4189|   275k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   381k|    {
 4206|   381k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   381k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   381k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.4k, False: 363k]
  |  |  ------------------
  ------------------
 4208|  18.4k|            return unexpected(r.error());
 4209|  18.4k|        }
 4210|       |
 4211|   363k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   363k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   363k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   363k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   363k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.14k, False: 360k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.14k|    }                                                  \
  |  |  |  | 3671|   363k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   360k|        return ranges::next(range.begin(), n);
 4213|   363k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.18M|    {
  763|  1.18M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.18M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  77.6k|    {
  754|  77.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  77.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  77.6k|              cvref<T> obj = *get<T>(fn);
  745|  77.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  77.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  77.6k|              }
  748|  77.6k|              else {
  749|  77.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  77.6k|              }
  751|  77.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  77.6k|    {
  684|  77.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  77.6k|            return static_cast<T*>(s.m_cp);
  686|  77.6k|        }
  687|  77.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  77.6k|            return static_cast<T*>(s.m_p);
  689|  77.6k|        }
  690|  77.6k|        else {
  691|  77.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  77.6k|        }
  693|  77.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  77.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  77.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  77.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  77.6k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   243k|    {
 3679|   243k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   243k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   243k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 243k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   243k|        return read_source_impl(range);
 3685|   243k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|  1.18M|    {
 3705|  1.18M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.18M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.18M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.18M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.18M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.18M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.18M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.18M|        auto it = sign_result.first;
 3708|  1.18M|        m_sign = sign_result.second;
 3709|       |
 3710|  1.18M|        auto digits_begin = it;
 3711|  1.18M|        auto r = ranges::subrange{it, range.end()};
 3712|  1.18M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  1.18M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  1.18M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|  1.18M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|  1.18M|                SCN_TRY_ASSIGN(
 3717|  1.18M|                    it,
 3718|  1.18M|                    do_read_source_impl(
 3719|  1.18M|                        r,
 3720|  1.18M|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|  1.18M|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|  1.18M|            }
 3723|  1.18M|            else {
 3724|  1.18M|                auto cb = [&](const auto& rr)
 3725|  1.18M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.18M|                    auto res = read_all(rr);
 3727|  1.18M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.18M|                        return unexpected_scan_error(
 3729|  1.18M|                            scan_error::invalid_scanned_value,
 3730|  1.18M|                            "Invalid float value");
 3731|  1.18M|                    }
 3732|  1.18M|                    return res;
 3733|  1.18M|                };
 3734|  1.18M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|  1.18M|            }
 3736|  1.18M|        }
 3737|  1.18M|        else {
 3738|  1.18M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|  1.18M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.18M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 58.0k, False: 1.12M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  58.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  58.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  58.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  58.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  58.0k|    }                                                  \
  |  | 3671|  1.18M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  1.12M|                it,
 3740|  1.12M|                do_read_source_impl(
 3741|  1.12M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  1.12M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  1.12M|        }
 3744|       |
 3745|  1.12M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.12M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.12M, False: 6.76k]
  |  Branch (3747:48): [True: 1.11M, False: 5.89k]
  ------------------
 3748|  1.12M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 1.06M, False: 46.5k]
  ------------------
 3749|  1.12M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 1.06M, False: 1.46k]
  ------------------
 3750|  1.06M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  1.06M|        }
 3752|       |
 3753|  1.12M|        handle_separators();
 3754|       |
 3755|  1.12M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.12M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.12M|        return it;
 3768|  1.12M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|  1.18M|    {
 4000|  1.18M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.18M|        const bool allowed_nonhex =
 4002|  1.18M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.18M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.18M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.17M, False: 12.6k]
  |  Branch (4005:45): [True: 0, False: 1.17M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.18M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 12.6k, False: 1.17M]
  ------------------
 4011|  12.6k|            return *r;
 4012|  12.6k|        }
 4013|       |
 4014|  1.17M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.12M, False: 48.0k]
  |  Branch (4014:45): [True: 1.07k, False: 1.12M]
  ------------------
 4015|  1.07k|            return unexpected(r.error());
 4016|  1.07k|        }
 4017|  1.17M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 48.0k, False: 1.12M]
  ------------------
 4018|  48.0k|            return *r;
 4019|  48.0k|        }
 4020|       |
 4021|  1.12M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 791k, False: 331k]
  |  Branch (4021:28): [True: 249k, False: 542k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   249k|            auto it = range.begin();
 4025|       |
 4026|   249k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 10.8k, False: 238k]
  ------------------
 4027|  10.8k|                m_kind = float_kind::hex_with_prefix;
 4028|  10.8k|                it = *r;
 4029|  10.8k|            }
 4030|   238k|            else {
 4031|   238k|                m_kind = float_kind::hex_without_prefix;
 4032|   238k|            }
 4033|       |
 4034|   249k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   249k|        }
 4036|   874k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 331k, False: 542k]
  |  Branch (4036:29): [True: 331k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   331k|            m_kind = float_kind::generic;
 4040|   331k|            return read_regular_float(range);
 4041|   331k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   542k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   542k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.2k, False: 518k]
  |  |  ------------------
  ------------------
 4047|  24.2k|            m_kind = float_kind::hex_with_prefix;
 4048|  24.2k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  24.2k|        }
 4050|       |
 4051|   518k|        m_kind = float_kind::generic;
 4052|   518k|        return read_regular(range);
 4053|   542k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|  1.18M|    {
 3811|  1.18M|        auto it = range.begin();
 3812|  1.18M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.17M, False: 12.6k]
  ------------------
 3813|  1.17M|            return unexpected(r.error());
 3814|  1.17M|        }
 3815|  12.6k|        else {
 3816|  12.6k|            it = *r;
 3817|  12.6k|        }
 3818|       |
 3819|  12.6k|        if (auto r = read_matching_string_classic_nocase(
 3820|  12.6k|                ranges::subrange{it, range.end()}, "inity");
 3821|  12.6k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 6.76k, False: 5.89k]
  ------------------
 3822|  6.76k|            m_kind = float_kind::inf_short;
 3823|  6.76k|            return it;
 3824|  6.76k|        }
 3825|  5.89k|        else {
 3826|  5.89k|            m_kind = float_kind::inf_long;
 3827|  5.89k|            return *r;
 3828|  5.89k|        }
 3829|  12.6k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|  1.17M|    {
 3834|  1.17M|        auto it = range.begin();
 3835|  1.17M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.12M, False: 49.1k]
  ------------------
 3836|  1.12M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.12M|                scan_error::invalid_scanned_value,
 3838|  1.12M|                "Invalid floating-point NaN value"));
 3839|  1.12M|        }
 3840|  49.1k|        else {
 3841|  49.1k|            it = *r;
 3842|  49.1k|        }
 3843|       |
 3844|  49.1k|        if (auto r =
 3845|  49.1k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  49.1k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 46.5k, False: 2.54k]
  ------------------
 3847|  46.5k|            m_kind = float_kind::nan_simple;
 3848|  46.5k|            return it;
 3849|  46.5k|        }
 3850|  2.54k|        else {
 3851|  2.54k|            it = *r;
 3852|  2.54k|        }
 3853|       |
 3854|  2.54k|        auto payload_beg_it = it;
 3855|  2.54k|        it = read_while_code_unit(
 3856|  2.54k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  2.54k|                return is_ascii_char(ch) &&
 3858|  2.54k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  2.54k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  2.54k|            });
 3861|  2.54k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  2.54k|        m_kind = float_kind::nan_with_payload;
 3864|  2.54k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 1.46k, False: 1.07k]
  ------------------
 3865|  2.54k|                                             ')')) {
 3866|  1.46k|            return *r;
 3867|  1.46k|        }
 3868|  1.07k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.07k|                                     "Invalid floating-point NaN payload");
 3870|  2.54k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_:
  753|  2.54k|    {
  754|  2.54k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  20.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.9k|              cvref<T> obj = *get<T>(fn);
  745|  20.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.9k|              }
  748|  20.9k|              else {
  749|  20.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.9k|              }
  751|  20.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  20.9k|    {
  684|  20.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.9k|            return static_cast<T*>(s.m_cp);
  686|  20.9k|        }
  687|  20.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.9k|            return static_cast<T*>(s.m_p);
  689|  20.9k|        }
  690|  20.9k|        else {
  691|  20.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.9k|        }
  693|  20.9k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3856|  20.9k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  20.9k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 20.8k, False: 89]
  ------------------
 3858|  20.9k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 19.3k, False: 1.52k]
  |  Branch (3858:39): [True: 11.5k, False: 7.78k]
  |  Branch (3858:54): [True: 2.53k, False: 6.77k]
  |  Branch (3858:67): [True: 2.45k, False: 83]
  ------------------
 3859|  20.8k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 1.52k]
  |  Branch (3859:39): [True: 2.52k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 1.61k]
  ------------------
 3860|  20.9k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_LPv0EEEPSM_:
  661|  2.54k|        {
  662|  2.54k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   791k|    {
 3804|   791k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   791k|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   273k|    {
 3904|   273k|        auto it = range.begin();
 3905|       |
 3906|   273k|        std::ptrdiff_t digits_count = 0;
 3907|   273k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   273k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.08k, False: 266k]
  |  |  ------------------
  ------------------
 3909|  7.08k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  7.08k|                scan_error::invalid_scanned_value,
 3911|  7.08k|                "Invalid hexadecimal floating-point value"));
 3912|  7.08k|        }
 3913|   266k|        else {
 3914|   266k|            digits_count += ranges::distance(it, *r);
 3915|   266k|            it = *r;
 3916|   266k|        }
 3917|       |
 3918|   266k|        m_integral_part_length = digits_count;
 3919|   266k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 42.6k, False: 223k]
  ------------------
 3920|   266k|                                             m_locale_options.decimal_point)) {
 3921|  42.6k|            it = *r;
 3922|  42.6k|        }
 3923|       |
 3924|   266k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 38.6k, False: 227k]
  ------------------
 3925|   266k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|  38.6k|            digits_count += ranges::distance(it, *r);
 3927|  38.6k|            it = *r;
 3928|  38.6k|        }
 3929|       |
 3930|   266k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 266k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|   266k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|   266k|        return it;
 3938|   266k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   539k|    {
 3789|   539k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   539k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 539k]
  |  |  |  Branch (859:45): [True: 0, False: 539k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   539k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   539k|        return read_while1_code_unit(
 3798|   539k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   539k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|   539k|    {
  754|   539k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  2.73M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.73M|              cvref<T> obj = *get<T>(fn);
  745|  2.73M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.73M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.73M|              }
  748|  2.73M|              else {
  749|  2.73M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.73M|              }
  751|  2.73M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  2.73M|    {
  684|  2.73M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.73M|            return static_cast<T*>(s.m_cp);
  686|  2.73M|        }
  687|  2.73M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.73M|            return static_cast<T*>(s.m_p);
  689|  2.73M|        }
  690|  2.73M|        else {
  691|  2.73M|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.73M|        }
  693|  2.73M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3798|  2.73M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|   539k|        {
  662|   539k|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|   969k|    {
 3876|   969k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 114k, False: 855k]
  ------------------
 3877|   114k|            auto beg_exp_it = range.begin();
 3878|   114k|            auto it = *r;
 3879|       |
 3880|   114k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 113k, False: 336]
  ------------------
 3881|   114k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|   113k|                it = r_sign->first;
 3883|   113k|            }
 3884|       |
 3885|   114k|            if (auto r_exp = read_while1_code_unit(
 3886|   114k|                    ranges::subrange{it, range.end()},
 3887|   114k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   114k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.83k, False: 112k]
  |  |  ------------------
  ------------------
 3889|  1.83k|                it = beg_exp_it;
 3890|  1.83k|            }
 3891|   112k|            else {
 3892|   112k|                it = *r_exp;
 3893|   112k|            }
 3894|       |
 3895|   114k|            return it;
 3896|   114k|        }
 3897|   855k|        return range.begin();
 3898|   969k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_:
  753|   114k|    {
  754|   114k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|   358k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   358k|              cvref<T> obj = *get<T>(fn);
  745|   358k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   358k|                  obj(static_cast<decltype(args)>(args)...);
  747|   358k|              }
  748|   358k|              else {
  749|   358k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   358k|              }
  751|   358k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   358k|    {
  684|   358k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   358k|            return static_cast<T*>(s.m_cp);
  686|   358k|        }
  687|   358k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   358k|            return static_cast<T*>(s.m_p);
  689|   358k|        }
  690|   358k|        else {
  691|   358k|            return reinterpret_cast<T*>(s.m_fp);
  692|   358k|        }
  693|   358k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   358k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_LPv0EEEPSL_:
  661|   114k|        {
  662|   114k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   849k|    {
 3944|   849k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   849k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 731k, False: 118k]
  |  Branch (3945:50): [True: 19.2k, False: 712k]
  ------------------
 3946|       |
 3947|   849k|        auto it = ranges::begin(range);
 3948|   849k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   849k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   849k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   849k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.3k, False: 810k]
  |  |  ------------------
  ------------------
 3952|  39.3k|            return r.transform_error(
 3953|  39.3k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  39.3k|                                              "Invalid floating-point value"));
 3955|  39.3k|        }
 3956|   810k|        else {
 3957|   810k|            digits_count += ranges::distance(it, *r);
 3958|   810k|            it = *r;
 3959|   810k|        }
 3960|       |
 3961|   810k|        m_integral_part_length = digits_count;
 3962|   810k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 160k, False: 649k]
  ------------------
 3963|   810k|                                             m_locale_options.decimal_point)) {
 3964|   160k|            it = *r;
 3965|   160k|        }
 3966|       |
 3967|   810k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 148k, False: 661k]
  ------------------
 3968|   810k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   148k|            digits_count += ranges::distance(it, *r);
 3970|   148k|            it = *r;
 3971|   148k|        }
 3972|       |
 3973|   810k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   810k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 810k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   810k|        auto beg_exp_it = it;
 3979|   810k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 702k, False: 107k]
  ------------------
 3980|   702k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   702k|        }
 3982|   810k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 18.5k, False: 791k]
  |  Branch (3982:29): [True: 10.5k, False: 8.04k]
  ------------------
 3983|  10.5k|            return unexpected_scan_error(
 3984|  10.5k|                scan_error::invalid_scanned_value,
 3985|  10.5k|                "No exponent given to scientific float");
 3986|  10.5k|        }
 3987|       |
 3988|   799k|        m_kind =
 3989|   799k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 688k, False: 111k]
  ------------------
 3990|       |
 3991|   799k|        return it;
 3992|   810k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|  1.66M|    {
 3774|  1.66M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66M]
  |  |  |  Branch (859:45): [True: 0, False: 1.66M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  1.66M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  1.66M|        return read_while1_code_unit(
 3783|  1.66M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  1.66M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  1.66M|    {
  754|  1.66M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  9.00M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.00M|              cvref<T> obj = *get<T>(fn);
  745|  9.00M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  9.00M|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.00M|              }
  748|  9.00M|              else {
  749|  9.00M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.00M|              }
  751|  9.00M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  9.00M|    {
  684|  9.00M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  9.00M|            return static_cast<T*>(s.m_cp);
  686|  9.00M|        }
  687|  9.00M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  9.00M|            return static_cast<T*>(s.m_p);
  689|  9.00M|        }
  690|  9.00M|        else {
  691|  9.00M|            return reinterpret_cast<T*>(s.m_fp);
  692|  9.00M|        }
  693|  9.00M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3783|  9.00M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  1.66M|        {
  662|  1.66M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  1.06M|    {
 1577|  1.06M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.06M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  77.6k|        {
  662|  77.6k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   197k|    {
  754|   197k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   197k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   197k|              cvref<T> obj = *get<T>(fn);
  745|   197k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   197k|                  obj(static_cast<decltype(args)>(args)...);
  747|   197k|              }
  748|   197k|              else {
  749|   197k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   197k|              }
  751|   197k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   197k|    {
  684|   197k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   197k|            return static_cast<T*>(s.m_cp);
  686|   197k|        }
  687|   197k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   197k|            return static_cast<T*>(s.m_p);
  689|   197k|        }
  690|   197k|        else {
  691|   197k|            return reinterpret_cast<T*>(s.m_fp);
  692|   197k|        }
  693|   197k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   197k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   197k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   197k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   941k|    {
 3665|   941k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   941k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 941k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   941k|        return read_source_impl(range);
 3671|   941k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   197k|        {
  662|   197k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   238k|    {
 4170|   238k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   238k|#if !SCN_DISABLE_LOCALE
 4173|   238k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 65.7k, False: 172k]
  ------------------
 4174|  65.7k|            return read_impl<Range>(
 4175|  65.7k|                range, rd,
 4176|  65.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  65.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  65.7k|                },
 4179|  65.7k|                value, loc);
 4180|  65.7k|        }
 4181|   172k|#endif
 4182|       |
 4183|   172k|        return read_impl<Range>(
 4184|   172k|            range, rd,
 4185|   172k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   172k|                return r.read_source(SCN_FWD(args)...);
 4187|   172k|            },
 4188|   172k|            value);
 4189|   238k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   336k|    {
 4206|   336k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   336k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.7k, False: 326k]
  |  |  ------------------
  ------------------
 4208|  10.7k|            return unexpected(r.error());
 4209|  10.7k|        }
 4210|       |
 4211|   326k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   326k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   326k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   326k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.6k, False: 314k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  11.6k|    }                                                  \
  |  |  |  | 3671|   326k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   314k|        return ranges::next(range.begin(), n);
 4213|   326k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.04M|    {
  763|  1.04M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.04M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  65.7k|    {
  754|  65.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  65.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  65.7k|              cvref<T> obj = *get<T>(fn);
  745|  65.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  65.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  65.7k|              }
  748|  65.7k|              else {
  749|  65.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  65.7k|              }
  751|  65.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  65.7k|    {
  684|  65.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  65.7k|            return static_cast<T*>(s.m_cp);
  686|  65.7k|        }
  687|  65.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  65.7k|            return static_cast<T*>(s.m_p);
  689|  65.7k|        }
  690|  65.7k|        else {
  691|  65.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  65.7k|        }
  693|  65.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  65.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  65.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  65.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  65.7k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   205k|    {
 3679|   205k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   205k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   205k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 205k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   205k|        return read_source_impl(range);
 3685|   205k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  1.04M|    {
 3705|  1.04M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.04M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.04M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.04M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.04M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.04M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.04M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.04M|        auto it = sign_result.first;
 3708|  1.04M|        m_sign = sign_result.second;
 3709|       |
 3710|  1.04M|        auto digits_begin = it;
 3711|  1.04M|        auto r = ranges::subrange{it, range.end()};
 3712|  1.04M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  1.04M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  1.04M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  2.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.04M]
  |  |  |  Branch (859:45): [True: 0, False: 1.04M]
  |  |  |  Branch (859:45): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 3715|  1.04M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  1.04M|            else {
 3724|  1.04M|                auto cb = [&](const auto& rr)
 3725|  1.04M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.04M|                    auto res = read_all(rr);
 3727|  1.04M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.04M|                        return unexpected_scan_error(
 3729|  1.04M|                            scan_error::invalid_scanned_value,
 3730|  1.04M|                            "Invalid float value");
 3731|  1.04M|                    }
 3732|  1.04M|                    return res;
 3733|  1.04M|                };
 3734|  1.04M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  1.04M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.04M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 33.1k, False: 1.01M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  33.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  33.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  33.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  33.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  33.1k|    }                                                  \
  |  | 3671|  1.04M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  1.01M|            }
 3736|  1.04M|        }
 3737|  1.01M|        else {
 3738|  1.01M|            SCN_TRY_ASSIGN(
 3739|  1.01M|                it,
 3740|  1.01M|                do_read_source_impl(
 3741|  1.01M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  1.01M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  1.01M|        }
 3744|       |
 3745|  1.01M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.01M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.00M, False: 6.54k]
  |  Branch (3747:48): [True: 998k, False: 5.56k]
  ------------------
 3748|  1.01M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 952k, False: 45.9k]
  ------------------
 3749|  1.01M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 951k, False: 1.46k]
  ------------------
 3750|   951k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   951k|        }
 3752|       |
 3753|  1.01M|        handle_separators();
 3754|       |
 3755|  1.01M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.01M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.01M|        return it;
 3768|  1.01M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  1.04M|    {
 3811|  1.04M|        auto it = range.begin();
 3812|  1.04M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.03M, False: 12.1k]
  ------------------
 3813|  1.03M|            return unexpected(r.error());
 3814|  1.03M|        }
 3815|  12.1k|        else {
 3816|  12.1k|            it = *r;
 3817|  12.1k|        }
 3818|       |
 3819|  12.1k|        if (auto r = read_matching_string_classic_nocase(
 3820|  12.1k|                ranges::subrange{it, range.end()}, "inity");
 3821|  12.1k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 6.54k, False: 5.56k]
  ------------------
 3822|  6.54k|            m_kind = float_kind::inf_short;
 3823|  6.54k|            return it;
 3824|  6.54k|        }
 3825|  5.56k|        else {
 3826|  5.56k|            m_kind = float_kind::inf_long;
 3827|  5.56k|            return *r;
 3828|  5.56k|        }
 3829|  12.1k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  1.03M|    {
 3834|  1.03M|        auto it = range.begin();
 3835|  1.03M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 983k, False: 48.4k]
  ------------------
 3836|   983k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   983k|                scan_error::invalid_scanned_value,
 3838|   983k|                "Invalid floating-point NaN value"));
 3839|   983k|        }
 3840|  48.4k|        else {
 3841|  48.4k|            it = *r;
 3842|  48.4k|        }
 3843|       |
 3844|  48.4k|        if (auto r =
 3845|  48.4k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  48.4k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 45.9k, False: 2.53k]
  ------------------
 3847|  45.9k|            m_kind = float_kind::nan_simple;
 3848|  45.9k|            return it;
 3849|  45.9k|        }
 3850|  2.53k|        else {
 3851|  2.53k|            it = *r;
 3852|  2.53k|        }
 3853|       |
 3854|  2.53k|        auto payload_beg_it = it;
 3855|  2.53k|        it = read_while_code_unit(
 3856|  2.53k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  2.53k|                return is_ascii_char(ch) &&
 3858|  2.53k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  2.53k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  2.53k|            });
 3861|  2.53k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  2.53k|        m_kind = float_kind::nan_with_payload;
 3864|  2.53k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 1.46k, False: 1.07k]
  ------------------
 3865|  2.53k|                                             ')')) {
 3866|  1.46k|            return *r;
 3867|  1.46k|        }
 3868|  1.07k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.07k|                                     "Invalid floating-point NaN payload");
 3870|  2.53k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_:
  753|  2.53k|    {
  754|  2.53k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  20.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.9k|              cvref<T> obj = *get<T>(fn);
  745|  20.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.9k|              }
  748|  20.9k|              else {
  749|  20.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.9k|              }
  751|  20.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  20.9k|    {
  684|  20.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.9k|            return static_cast<T*>(s.m_cp);
  686|  20.9k|        }
  687|  20.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.9k|            return static_cast<T*>(s.m_p);
  689|  20.9k|        }
  690|  20.9k|        else {
  691|  20.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.9k|        }
  693|  20.9k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3856|  20.9k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  20.9k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 20.8k, False: 83]
  ------------------
 3858|  20.9k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 19.3k, False: 1.52k]
  |  Branch (3858:39): [True: 11.5k, False: 7.76k]
  |  Branch (3858:54): [True: 2.52k, False: 6.76k]
  |  Branch (3858:67): [True: 2.44k, False: 83]
  ------------------
 3859|  20.8k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 1.52k]
  |  Branch (3859:39): [True: 2.52k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 1.60k]
  ------------------
 3860|  20.9k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_LPv0EEEPSJ_:
  661|  2.53k|        {
  662|  2.53k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   693k|    {
 3804|   693k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   693k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   587k|{
 1996|   587k|    auto it = read_while_code_unit(range, pred);
 1997|   587k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 244k, False: 342k]
  ------------------
 1998|   244k|        return unexpected(parse_error::error);
 1999|   244k|    }
 2000|   342k|    return it;
 2001|   587k|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|   172k|    {
 3876|   172k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 28.6k, False: 143k]
  ------------------
 3877|  28.6k|            auto beg_exp_it = range.begin();
 3878|  28.6k|            auto it = *r;
 3879|       |
 3880|  28.6k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 28.5k, False: 108]
  ------------------
 3881|  28.6k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  28.5k|                it = r_sign->first;
 3883|  28.5k|            }
 3884|       |
 3885|  28.6k|            if (auto r_exp = read_while1_code_unit(
 3886|  28.6k|                    ranges::subrange{it, range.end()},
 3887|  28.6k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  28.6k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  28.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 652, False: 27.9k]
  |  |  ------------------
  ------------------
 3889|    652|                it = beg_exp_it;
 3890|    652|            }
 3891|  27.9k|            else {
 3892|  27.9k|                it = *r_exp;
 3893|  27.9k|            }
 3894|       |
 3895|  28.6k|            return it;
 3896|  28.6k|        }
 3897|   143k|        return range.begin();
 3898|   172k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_:
  753|  28.6k|    {
  754|  28.6k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  743|  83.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  83.4k|              cvref<T> obj = *get<T>(fn);
  745|  83.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  83.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  83.4k|              }
  748|  83.4k|              else {
  749|  83.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  83.4k|              }
  751|  83.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  83.4k|    {
  684|  83.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  83.4k|            return static_cast<T*>(s.m_cp);
  686|  83.4k|        }
  687|  83.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  83.4k|            return static_cast<T*>(s.m_p);
  689|  83.4k|        }
  690|  83.4k|        else {
  691|  83.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  83.4k|        }
  693|  83.4k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3887|  83.4k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  661|  28.6k|        {
  662|  28.6k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   289k|    {
 3944|   289k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   289k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 182k, False: 107k]
  |  Branch (3945:50): [True: 17.4k, False: 164k]
  ------------------
 3946|       |
 3947|   289k|        auto it = ranges::begin(range);
 3948|   289k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   289k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   289k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   289k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.9k, False: 268k]
  |  |  ------------------
  ------------------
 3952|  20.9k|            return r.transform_error(
 3953|  20.9k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  20.9k|                                              "Invalid floating-point value"));
 3955|  20.9k|        }
 3956|   268k|        else {
 3957|   268k|            digits_count += ranges::distance(it, *r);
 3958|   268k|            it = *r;
 3959|   268k|        }
 3960|       |
 3961|   268k|        m_integral_part_length = digits_count;
 3962|   268k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 50.0k, False: 218k]
  ------------------
 3963|   268k|                                             m_locale_options.decimal_point)) {
 3964|  50.0k|            it = *r;
 3965|  50.0k|        }
 3966|       |
 3967|   268k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 45.6k, False: 223k]
  ------------------
 3968|   268k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|  45.6k|            digits_count += ranges::distance(it, *r);
 3970|  45.6k|            it = *r;
 3971|  45.6k|        }
 3972|       |
 3973|   268k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   268k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 268k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   268k|        auto beg_exp_it = it;
 3979|   268k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 172k, False: 96.4k]
  ------------------
 3980|   172k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   172k|        }
 3982|   268k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 16.4k, False: 252k]
  |  Branch (3982:29): [True: 10.3k, False: 6.12k]
  ------------------
 3983|  10.3k|            return unexpected_scan_error(
 3984|  10.3k|                scan_error::invalid_scanned_value,
 3985|  10.3k|                "No exponent given to scientific float");
 3986|  10.3k|        }
 3987|       |
 3988|   258k|        m_kind =
 3989|   258k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 230k, False: 27.9k]
  ------------------
 3990|       |
 3991|   258k|        return it;
 3992|   268k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   558k|    {
 3774|   558k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   558k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 558k]
  |  |  |  Branch (859:45): [True: 0, False: 558k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   558k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   558k|        return read_while1_code_unit(
 3783|   558k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   558k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|   558k|    {
  754|   558k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  2.93M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.93M|              cvref<T> obj = *get<T>(fn);
  745|  2.93M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.93M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.93M|              }
  748|  2.93M|              else {
  749|  2.93M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.93M|              }
  751|  2.93M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  2.93M|    {
  684|  2.93M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.93M|            return static_cast<T*>(s.m_cp);
  686|  2.93M|        }
  687|  2.93M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.93M|            return static_cast<T*>(s.m_p);
  689|  2.93M|        }
  690|  2.93M|        else {
  691|  2.93M|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.93M|        }
  693|  2.93M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|  2.93M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|   558k|        {
  662|   558k|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  1.04M|    {
 4000|  1.04M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.04M|        const bool allowed_nonhex =
 4002|  1.04M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.04M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.04M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.03M, False: 12.1k]
  |  Branch (4005:45): [True: 0, False: 1.03M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.04M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 12.1k, False: 1.03M]
  ------------------
 4011|  12.1k|            return *r;
 4012|  12.1k|        }
 4013|       |
 4014|  1.03M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 984k, False: 47.3k]
  |  Branch (4014:45): [True: 1.07k, False: 983k]
  ------------------
 4015|  1.07k|            return unexpected(r.error());
 4016|  1.07k|        }
 4017|  1.03M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 47.3k, False: 983k]
  ------------------
 4018|  47.3k|            return *r;
 4019|  47.3k|        }
 4020|       |
 4021|   983k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 693k, False: 289k]
  |  Branch (4021:28): [True: 210k, False: 483k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   210k|            auto it = range.begin();
 4025|       |
 4026|   210k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 9.99k, False: 200k]
  ------------------
 4027|  9.99k|                m_kind = float_kind::hex_with_prefix;
 4028|  9.99k|                it = *r;
 4029|  9.99k|            }
 4030|   200k|            else {
 4031|   200k|                m_kind = float_kind::hex_without_prefix;
 4032|   200k|            }
 4033|       |
 4034|   210k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   210k|        }
 4036|   772k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 289k, False: 483k]
  |  Branch (4036:29): [True: 289k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   289k|            m_kind = float_kind::generic;
 4040|   289k|            return read_regular_float(range);
 4041|   289k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   483k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   483k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.3k, False: 458k]
  |  |  ------------------
  ------------------
 4047|  24.3k|            m_kind = float_kind::hex_with_prefix;
 4048|  24.3k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  24.3k|        }
 4050|       |
 4051|   458k|        m_kind = float_kind::generic;
 4052|   458k|        return read_regular(range);
 4053|   483k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   693k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   693k|                    auto res = read_all(rr);
 3727|   693k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   693k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 869, False: 692k]
  |  |  ------------------
  ------------------
 3728|    869|                        return unexpected_scan_error(
 3729|    869|                            scan_error::invalid_scanned_value,
 3730|    869|                            "Invalid float value");
 3731|    869|                    }
 3732|   692k|                    return res;
 3733|   693k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   693k|{
 1839|   693k|    return ranges::next(range.begin(), range.end());
 1840|   693k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   693k|    {
  313|   693k|        ranges::advance(x, bound);
  314|   693k|        return x;
  315|   693k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   693k|    {
  275|   693k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   693k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   693k|    {
  190|   693k|        i = std::move(bound);
  191|   693k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|   953k|    {
 1577|   953k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   953k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   953k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|   953k|    {
 1621|   953k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   953k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   953k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   953k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   953k|            m_storage.reset();
 1627|   953k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   953k|        }
 1629|   953k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   953k|                                          std::basic_string<CharT>>) {
 1631|   953k|            m_storage.emplace(SCN_FWD(range));
 1632|   953k|            m_view = string_view_type{*m_storage};
 1633|   953k|        }
 1634|   953k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   953k|                                          typename detail::basic_scan_buffer<
 1636|   953k|                                              value_t>::forward_iterator> &&
 1637|   953k|                           ranges::common_range<Range>) {
 1638|   953k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   953k|            auto end_seg = range.end().contiguous_segment();
 1640|   953k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   953k|                             detail::to_address(end_seg.end()))) {
 1642|   953k|                auto& str = m_storage.emplace();
 1643|   953k|                str.reserve(range.end().position() - range.begin().position());
 1644|   953k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   953k|                m_view = string_view_type{str};
 1646|   953k|                return;
 1647|   953k|            }
 1648|       |
 1649|   953k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   953k|                                                            end_seg.data());
 1651|   953k|            m_storage.reset();
 1652|   953k|        }
 1653|   953k|        else {
 1654|   953k|            auto& str = m_storage.emplace();
 1655|   953k|            if constexpr (ranges::sized_range<Range>) {
 1656|   953k|                str.reserve(range.size());
 1657|   953k|            }
 1658|   953k|            if constexpr (ranges::common_range<Range>) {
 1659|   953k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   953k|                          std::back_inserter(str));
 1661|   953k|            }
 1662|   953k|            else {
 1663|   953k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   953k|                     ++it) {
 1665|   953k|                    str.push_back(*it);
 1666|   953k|                }
 1667|   953k|            }
 1668|   953k|            m_view = string_view_type{str};
 1669|   953k|        }
 1670|   953k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  65.7k|        {
  662|  65.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   172k|    {
  754|   172k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   172k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   172k|              cvref<T> obj = *get<T>(fn);
  745|   172k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   172k|                  obj(static_cast<decltype(args)>(args)...);
  747|   172k|              }
  748|   172k|              else {
  749|   172k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   172k|              }
  751|   172k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   172k|    {
  684|   172k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   172k|            return static_cast<T*>(s.m_cp);
  686|   172k|        }
  687|   172k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   172k|            return static_cast<T*>(s.m_p);
  689|   172k|        }
  690|   172k|        else {
  691|   172k|            return reinterpret_cast<T*>(s.m_fp);
  692|   172k|        }
  693|   172k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   172k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   172k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   172k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   838k|    {
 3665|   838k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   838k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 838k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   838k|        return read_source_impl(range);
 3671|   838k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   172k|        {
  662|   172k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   292k|    {
 6193|   292k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   292k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   292k|            auto rd = make_reader<T, char_type>();
 6198|   292k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   292k|                return unexpected(e);
 6200|   292k|            }
 6201|       |
 6202|   292k|            return impl(rd, range, value);
 6203|   292k|        }
 6204|   292k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   292k|            auto rd = make_reader<T, char_type>();
 6206|   292k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 292k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   292k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 292k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   292k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   292k|                return impl(rd, range, value);
 6213|   292k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   292k|        else {
 6221|   292k|            SCN_EXPECT(false);
 6222|   292k|            SCN_UNREACHABLE;
 6223|   292k|        }
 6224|   292k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   292k|    {
 6124|   292k|        const bool need_skipped_width =
 6125|   292k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 292k]
  |  Branch (6125:33): [True: 0, False: 292k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   292k|        auto it = rng.begin();
 6129|   292k|        std::ptrdiff_t prefix_width = 0;
 6130|   292k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 292k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   292k|        else {
 6138|   292k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   292k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   292k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   292k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   292k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.71k, False: 287k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.71k|    }                                                  \
  |  |  |  | 3671|   292k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   287k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   287k|            std::tie(it, prefix_width) = prefix_result;
 6140|   287k|        }
 6141|   287k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   287k|        std::ptrdiff_t value_width = 0;
 6145|   287k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 287k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   287k|        else {
 6161|   287k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   287k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   287k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.1k, False: 271k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  16.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  16.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  16.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  16.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  16.1k|    }                                                  \
  |  | 3671|   287k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   287k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   271k|                                             specs, value, loc));
 6163|       |
 6164|   271k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 271k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   271k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   271k|        std::ptrdiff_t postfix_width = 0;
 6173|   271k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 267k, False: 3.82k]
  ------------------
 6174|   267k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   267k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   267k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   267k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 267k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   267k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   267k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   267k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   267k|                                 value_width));
 6178|   267k|            std::tie(it, postfix_width) = postfix_result;
 6179|   267k|        }
 6180|       |
 6181|   271k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   271k|                                                 value_width, postfix_width);
 6183|   271k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 271k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   271k|        return it;
 6188|   271k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   720k|    {
 3691|   720k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   720k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   720k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   720k|        const std::ptrdiff_t sign_len =
 3694|   720k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 173k, False: 546k]
  ------------------
 3695|       |
 3696|   720k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   720k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   720k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   720k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   720k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.1k, False: 708k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.1k|    }                                                  \
  |  |  |  | 3671|   720k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   708k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   708k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   720k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   287k|    {
 4170|   287k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   287k|#if !SCN_DISABLE_LOCALE
 4173|   287k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 82.3k, False: 205k]
  ------------------
 4174|  82.3k|            return read_impl<Range>(
 4175|  82.3k|                range, rd,
 4176|  82.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  82.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  82.3k|                },
 4179|  82.3k|                value, loc);
 4180|  82.3k|        }
 4181|   205k|#endif
 4182|       |
 4183|   205k|        return read_impl<Range>(
 4184|   205k|            range, rd,
 4185|   205k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   205k|                return r.read_source(SCN_FWD(args)...);
 4187|   205k|            },
 4188|   205k|            value);
 4189|   287k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   399k|    {
 4206|   399k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   399k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.4k, False: 380k]
  |  |  ------------------
  ------------------
 4208|  19.4k|            return unexpected(r.error());
 4209|  19.4k|        }
 4210|       |
 4211|   380k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   380k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   380k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   380k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   380k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.46k, False: 378k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.46k|    }                                                  \
  |  |  |  | 3671|   380k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   378k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   378k|        return ranges::next(range.begin(), n);
 4213|   380k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  82.3k|    {
  754|  82.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  82.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  82.3k|              cvref<T> obj = *get<T>(fn);
  745|  82.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  82.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  82.3k|              }
  748|  82.3k|              else {
  749|  82.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  82.3k|              }
  751|  82.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  82.3k|    {
  684|  82.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  82.3k|            return static_cast<T*>(s.m_cp);
  686|  82.3k|        }
  687|  82.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  82.3k|            return static_cast<T*>(s.m_p);
  689|  82.3k|        }
  690|  82.3k|        else {
  691|  82.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  82.3k|        }
  693|  82.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  82.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  82.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  82.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  82.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  82.3k|        {
  662|  82.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   205k|    {
  754|   205k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   205k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   205k|              cvref<T> obj = *get<T>(fn);
  745|   205k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   205k|                  obj(static_cast<decltype(args)>(args)...);
  747|   205k|              }
  748|   205k|              else {
  749|   205k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   205k|              }
  751|   205k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   205k|    {
  684|   205k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   205k|            return static_cast<T*>(s.m_cp);
  686|   205k|        }
  687|   205k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   205k|            return static_cast<T*>(s.m_p);
  689|   205k|        }
  690|   205k|        else {
  691|   205k|            return reinterpret_cast<T*>(s.m_fp);
  692|   205k|        }
  693|   205k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   205k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   205k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   205k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   205k|        {
  662|   205k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   247k|    {
 4170|   247k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   247k|#if !SCN_DISABLE_LOCALE
 4173|   247k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 69.4k, False: 177k]
  ------------------
 4174|  69.4k|            return read_impl<Range>(
 4175|  69.4k|                range, rd,
 4176|  69.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  69.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  69.4k|                },
 4179|  69.4k|                value, loc);
 4180|  69.4k|        }
 4181|   177k|#endif
 4182|       |
 4183|   177k|        return read_impl<Range>(
 4184|   177k|            range, rd,
 4185|   177k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   177k|                return r.read_source(SCN_FWD(args)...);
 4187|   177k|            },
 4188|   177k|            value);
 4189|   247k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   351k|    {
 4206|   351k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   351k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.0k, False: 340k]
  |  |  ------------------
  ------------------
 4208|  11.0k|            return unexpected(r.error());
 4209|  11.0k|        }
 4210|       |
 4211|   340k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   340k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   340k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   340k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   340k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.7k, False: 329k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  10.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  10.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  10.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  10.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  10.7k|    }                                                  \
  |  |  |  | 3671|   340k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   329k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   329k|        return ranges::next(range.begin(), n);
 4213|   340k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  69.4k|    {
  754|  69.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  69.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  69.4k|              cvref<T> obj = *get<T>(fn);
  745|  69.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  69.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  69.4k|              }
  748|  69.4k|              else {
  749|  69.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  69.4k|              }
  751|  69.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  69.4k|    {
  684|  69.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  69.4k|            return static_cast<T*>(s.m_cp);
  686|  69.4k|        }
  687|  69.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  69.4k|            return static_cast<T*>(s.m_p);
  689|  69.4k|        }
  690|  69.4k|        else {
  691|  69.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  69.4k|        }
  693|  69.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  69.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  69.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  69.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  69.4k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  69.4k|        {
  662|  69.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   177k|    {
  754|   177k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   177k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   177k|              cvref<T> obj = *get<T>(fn);
  745|   177k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   177k|                  obj(static_cast<decltype(args)>(args)...);
  747|   177k|              }
  748|   177k|              else {
  749|   177k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   177k|              }
  751|   177k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   177k|    {
  684|   177k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   177k|            return static_cast<T*>(s.m_cp);
  686|   177k|        }
  687|   177k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   177k|            return static_cast<T*>(s.m_p);
  689|   177k|        }
  690|   177k|        else {
  691|   177k|            return reinterpret_cast<T*>(s.m_fp);
  692|   177k|        }
  693|   177k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   177k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   177k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   177k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   177k|        {
  662|   177k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   295k|    {
 6193|   295k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   295k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|   295k|            auto rd = make_reader<T, char_type>();
 6198|   295k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|   295k|                return unexpected(e);
 6200|   295k|            }
 6201|       |
 6202|   295k|            return impl(rd, range, value);
 6203|   295k|        }
 6204|   295k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|   295k|            auto rd = make_reader<T, char_type>();
 6206|   295k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 295k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   295k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 295k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   295k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   295k|                return impl(rd, range, value);
 6213|   295k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|   295k|        else {
 6221|   295k|            SCN_EXPECT(false);
 6222|   295k|            SCN_UNREACHABLE;
 6223|   295k|        }
 6224|   295k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   295k|    {
 6124|   295k|        const bool need_skipped_width =
 6125|   295k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 295k]
  |  Branch (6125:33): [True: 0, False: 295k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   295k|        auto it = rng.begin();
 6129|   295k|        std::ptrdiff_t prefix_width = 0;
 6130|   295k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 295k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   295k|        else {
 6138|   295k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   295k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   295k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   295k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.02k, False: 290k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.02k|    }                                                  \
  |  |  |  | 3671|   295k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   290k|            std::tie(it, prefix_width) = prefix_result;
 6140|   290k|        }
 6141|   290k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   290k|        std::ptrdiff_t value_width = 0;
 6145|   290k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 290k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   290k|        else {
 6161|   290k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   290k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   290k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 15.8k, False: 274k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  15.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  15.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  15.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  15.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  15.8k|    }                                                  \
  |  | 3671|   290k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   274k|                                             specs, value, loc));
 6163|       |
 6164|   274k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 274k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   274k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   274k|        std::ptrdiff_t postfix_width = 0;
 6173|   274k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 270k, False: 4.08k]
  ------------------
 6174|   270k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   270k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   270k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   270k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 270k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   270k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   270k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   270k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   270k|                                 value_width));
 6178|   270k|            std::tie(it, postfix_width) = postfix_result;
 6179|   270k|        }
 6180|       |
 6181|   274k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   274k|                                                 value_width, postfix_width);
 6183|   274k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 274k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   274k|        return it;
 6188|   274k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   727k|    {
 3691|   727k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   727k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   727k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   727k|        const std::ptrdiff_t sign_len =
 3694|   727k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 177k, False: 549k]
  ------------------
 3695|       |
 3696|   727k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   727k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   727k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   727k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   727k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.4k, False: 717k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  10.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  10.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  10.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  10.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  10.4k|    }                                                  \
  |  |  |  | 3671|   727k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   717k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   717k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   727k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   290k|    {
 4170|   290k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   290k|#if !SCN_DISABLE_LOCALE
 4173|   290k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 83.5k, False: 207k]
  ------------------
 4174|  83.5k|            return read_impl<Range>(
 4175|  83.5k|                range, rd,
 4176|  83.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  83.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  83.5k|                },
 4179|  83.5k|                value, loc);
 4180|  83.5k|        }
 4181|   207k|#endif
 4182|       |
 4183|   207k|        return read_impl<Range>(
 4184|   207k|            range, rd,
 4185|   207k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   207k|                return r.read_source(SCN_FWD(args)...);
 4187|   207k|            },
 4188|   207k|            value);
 4189|   290k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   403k|    {
 4206|   403k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   403k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   403k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.1k, False: 383k]
  |  |  ------------------
  ------------------
 4208|  20.1k|            return unexpected(r.error());
 4209|  20.1k|        }
 4210|       |
 4211|   383k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   383k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   383k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   383k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 364, False: 383k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    364|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    364|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    364|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    364|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    364|    }                                                  \
  |  |  |  | 3671|   383k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   383k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   383k|        return ranges::next(range.begin(), n);
 4213|   383k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  83.5k|    {
  754|  83.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  83.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  83.5k|              cvref<T> obj = *get<T>(fn);
  745|  83.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  83.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  83.5k|              }
  748|  83.5k|              else {
  749|  83.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  83.5k|              }
  751|  83.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  83.5k|    {
  684|  83.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  83.5k|            return static_cast<T*>(s.m_cp);
  686|  83.5k|        }
  687|  83.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  83.5k|            return static_cast<T*>(s.m_p);
  689|  83.5k|        }
  690|  83.5k|        else {
  691|  83.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  83.5k|        }
  693|  83.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  83.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  83.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  83.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  83.5k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  83.5k|        {
  662|  83.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   207k|    {
  754|   207k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   207k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   207k|              cvref<T> obj = *get<T>(fn);
  745|   207k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   207k|                  obj(static_cast<decltype(args)>(args)...);
  747|   207k|              }
  748|   207k|              else {
  749|   207k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   207k|              }
  751|   207k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   207k|    {
  684|   207k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   207k|            return static_cast<T*>(s.m_cp);
  686|   207k|        }
  687|   207k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   207k|            return static_cast<T*>(s.m_p);
  689|   207k|        }
  690|   207k|        else {
  691|   207k|            return reinterpret_cast<T*>(s.m_fp);
  692|   207k|        }
  693|   207k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   207k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   207k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   207k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   207k|        {
  662|   207k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   249k|    {
 4170|   249k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   249k|#if !SCN_DISABLE_LOCALE
 4173|   249k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 70.5k, False: 179k]
  ------------------
 4174|  70.5k|            return read_impl<Range>(
 4175|  70.5k|                range, rd,
 4176|  70.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  70.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  70.5k|                },
 4179|  70.5k|                value, loc);
 4180|  70.5k|        }
 4181|   179k|#endif
 4182|       |
 4183|   179k|        return read_impl<Range>(
 4184|   179k|            range, rd,
 4185|   179k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   179k|                return r.read_source(SCN_FWD(args)...);
 4187|   179k|            },
 4188|   179k|            value);
 4189|   249k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   355k|    {
 4206|   355k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   355k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.3k, False: 344k]
  |  |  ------------------
  ------------------
 4208|  11.3k|            return unexpected(r.error());
 4209|  11.3k|        }
 4210|       |
 4211|   344k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   344k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   344k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   344k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.0k, False: 334k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  10.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  10.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  10.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  10.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  10.0k|    }                                                  \
  |  |  |  | 3671|   344k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   334k|        return ranges::next(range.begin(), n);
 4213|   344k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  70.5k|    {
  754|  70.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  70.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  70.5k|              cvref<T> obj = *get<T>(fn);
  745|  70.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  70.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  70.5k|              }
  748|  70.5k|              else {
  749|  70.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  70.5k|              }
  751|  70.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  70.5k|    {
  684|  70.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  70.5k|            return static_cast<T*>(s.m_cp);
  686|  70.5k|        }
  687|  70.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  70.5k|            return static_cast<T*>(s.m_p);
  689|  70.5k|        }
  690|  70.5k|        else {
  691|  70.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  70.5k|        }
  693|  70.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  70.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  70.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  70.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  70.5k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  70.5k|        {
  662|  70.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   179k|    {
  754|   179k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   179k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   179k|              cvref<T> obj = *get<T>(fn);
  745|   179k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   179k|                  obj(static_cast<decltype(args)>(args)...);
  747|   179k|              }
  748|   179k|              else {
  749|   179k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   179k|              }
  751|   179k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   179k|    {
  684|   179k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   179k|            return static_cast<T*>(s.m_cp);
  686|   179k|        }
  687|   179k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   179k|            return static_cast<T*>(s.m_p);
  689|   179k|        }
  690|   179k|        else {
  691|   179k|            return reinterpret_cast<T*>(s.m_fp);
  692|   179k|        }
  693|   179k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   179k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   179k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   179k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   179k|        {
  662|   179k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  1.19M|{
 1039|  1.19M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  1.19M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  1.19M|        return r;
 1042|  1.19M|    }
 1043|  1.19M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  1.19M|                           ranges::const_iterator_t<Range>,
 1045|  1.19M|                           typename detail::basic_scan_buffer<
 1046|  1.19M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  1.19M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|  1.19M|            auto seg = r.begin().contiguous_segment();
 1049|  1.19M|            auto dist =
 1050|  1.19M|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  1.19M|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  1.19M|        }
 1053|  1.19M|        else {
 1054|  1.19M|            return r.begin().contiguous_segment();
 1055|  1.19M|        }
 1056|  1.19M|    }
 1057|  1.19M|    else {
 1058|  1.19M|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.19M|    }
 1060|  1.19M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.06M|{
 2061|  1.06M|    auto it = range.begin();
 2062|  2.02M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 2.00M, False: 14.4k]
  ------------------
 2063|  2.00M|        const auto val =
 2064|  2.00M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  2.00M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  2.00M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.99M, False: 10.7k]
  |  |  ------------------
  ------------------
 2066|  1.99M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.99M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.99M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.05M, False: 944k]
  ------------------
 2069|  1.05M|                return it;
 2070|  1.05M|            }
 2071|  1.99M|        }
 2072|   954k|        it = val.iterator;
 2073|   954k|    }
 2074|       |
 2075|  14.4k|    return it;
 2076|  1.06M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  2.00M|{
 1899|  2.00M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  2.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  2.00M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  2.00M|    auto it = range.begin();
 1903|  2.00M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  2.00M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.7k, False: 1.99M]
  |  |  ------------------
  ------------------
 1906|  10.7k|        ++it;
 1907|  10.7k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  10.7k|        return {it, {}};
 1909|  10.7k|    }
 1910|       |
 1911|  1.99M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.97M, False: 21.0k]
  ------------------
 1912|  1.97M|        ++it;
 1913|  1.97M|        return {it, string_type(1, *range.begin())};
 1914|  1.97M|    }
 1915|       |
 1916|  21.0k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  21.0k|    return {it, string_type{range.begin(), it}};
 1918|  1.99M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  10.7k|{
 1155|  10.7k|    auto it = input.begin();
 1156|   122k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 121k, False: 1.19k]
  ------------------
 1157|   121k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 9.58k, False: 111k]
  ------------------
 1158|  9.58k|            break;
 1159|  9.58k|        }
 1160|   121k|    }
 1161|  10.7k|    return it;
 1162|  10.7k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  21.0k|    {
  283|  21.0k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  21.0k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  21.0k|    {
  252|  21.0k|        constexpr iter_difference_t<I> zero{0};
  253|  21.0k|        iter_difference_t<I> counter{0};
  254|       |
  255|  63.8k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 43.7k, False: 20.1k]
  |  Branch (255:30): [True: 42.7k, False: 988]
  ------------------
  256|  42.7k|            ++i;
  257|  42.7k|            ++counter;
  258|  42.7k|        }
  259|       |
  260|  21.0k|        return counter;
  261|  21.0k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  2.00M|    {
 1890|  2.00M|        return !codepoint.empty();
 1891|  2.00M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.06M|{
 2082|  1.06M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.06M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  1.19M|{
 2951|  1.19M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.19M, False: 0]
  ------------------
 2952|  1.19M|        auto it = read_while_classic_space(range);
 2953|  1.19M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.19M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.4k, False: 1.18M]
  |  |  ------------------
  ------------------
 2955|  14.4k|            return unexpected(e);
 2956|  14.4k|        }
 2957|       |
 2958|  1.18M|        return it;
 2959|  1.19M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.19M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  1.19M|{
 2117|  1.19M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.19M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.19M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.19M|        auto buf = make_contiguous_buffer(range);
 2121|  1.19M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.19M|        return ranges::next(range.begin(),
 2123|  1.19M|                            ranges::distance(buf.view().begin(), it));
 2124|  1.19M|    }
 2125|  1.19M|    else {
 2126|  1.19M|        auto it = range.begin();
 2127|       |
 2128|  1.19M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.19M|            auto seg = get_contiguous_beginning(range);
 2130|  1.19M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.19M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 134k, False: 1.06M]
  ------------------
 2132|   134k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   134k|            }
 2134|  1.06M|            ranges::advance(it, seg.size());
 2135|  1.06M|        }
 2136|       |
 2137|  1.06M|        return read_while_code_point(
 2138|  1.06M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.19M|    }
 2140|  1.19M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  1.06M|    {
  754|  1.06M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  1.99M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.99M|              cvref<T> obj = *get<T>(fn);
  745|  1.99M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.99M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.99M|              }
  748|  1.99M|              else {
  749|  1.99M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.99M|              }
  751|  1.99M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.99M|    {
  684|  1.99M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.99M|            return static_cast<T*>(s.m_cp);
  686|  1.99M|        }
  687|  1.99M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.99M|            return static_cast<T*>(s.m_p);
  689|  1.99M|        }
  690|  1.99M|        else {
  691|  1.99M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.99M|        }
  693|  1.99M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  1.99M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  1.06M|        {
  662|  1.06M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   395k|{
  981|   395k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   395k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   395k|        return true;
  984|   395k|    }
  985|   395k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   395k|                           ranges::const_iterator_t<Range>,
  987|   395k|                           typename detail::basic_scan_buffer<
  988|   395k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   395k|        auto beg = r.begin();
  990|   395k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 395k, False: 0]
  ------------------
  991|   395k|            return false;
  992|   395k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   395k|    else {
 1006|   395k|        return false;
 1007|   395k|    }
 1008|   395k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  2.53M|    {
  763|  2.53M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.53M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  1.02M|{
 1857|  1.02M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.02M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.02M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.02M|        if (sz < count) {
 1862|  1.02M|            return unexpected(eof_error::eof);
 1863|  1.02M|        }
 1864|       |
 1865|  1.02M|        return ranges::next(range.begin(), count);
 1866|  1.02M|    }
 1867|  1.02M|    else {
 1868|  1.02M|        auto it = range.begin();
 1869|  1.02M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 601k, False: 419k]
  ------------------
 1870|   601k|            return ranges::next(it, count);
 1871|   601k|        }
 1872|       |
 1873|  1.60M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 1.22M, False: 372k]
  ------------------
 1874|  1.22M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 46.8k, False: 1.18M]
  ------------------
 1875|  46.8k|                return unexpected(eof_error::eof);
 1876|  46.8k|            }
 1877|  1.22M|        }
 1878|       |
 1879|   372k|        return it;
 1880|   419k|    }
 1881|  1.02M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  1.02M|{
 1095|  1.02M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  1.02M|        return r.size();
 1097|  1.02M|    }
 1098|  1.02M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  1.02M|                           ranges::const_iterator_t<Range>,
 1100|  1.02M|                           typename detail::basic_scan_buffer<
 1101|  1.02M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  1.02M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  1.02M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  1.02M|        }
 1105|  1.02M|        else {
 1106|  1.02M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 1.02M, False: 0]
  ------------------
 1107|  1.02M|                return static_cast<size_t>(
 1108|  1.02M|                    r.begin().parent()->chars_available() -
 1109|  1.02M|                    r.begin().position());
 1110|  1.02M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  1.02M|        }
 1113|  1.02M|    }
 1114|  1.02M|    else {
 1115|  1.02M|        return 0;
 1116|  1.02M|    }
 1117|  1.02M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|   880k|    {
  754|   880k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  1.26M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.26M|              cvref<T> obj = *get<T>(fn);
  745|  1.26M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.26M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.26M|              }
  748|  1.26M|              else {
  749|  1.26M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.26M|              }
  751|  1.26M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  1.26M|    {
  684|  1.26M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.26M|            return static_cast<T*>(s.m_cp);
  686|  1.26M|        }
  687|  1.26M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.26M|            return static_cast<T*>(s.m_p);
  689|  1.26M|        }
  690|  1.26M|        else {
  691|  1.26M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.26M|        }
  693|  1.26M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|   880k|        {
  662|   880k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   294k|    {
 6037|   294k|        const bool need_skipped_width =
 6038|   294k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 294k]
  |  Branch (6038:33): [True: 0, False: 294k]
  ------------------
 6039|   294k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   294k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 294k]
  ------------------
 6043|   294k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 294k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   294k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 294k, False: 0]
  |  Branch (6047:56): [True: 294k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   294k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 294k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   587k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   294k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   294k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   294k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.29k, False: 292k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.29k|    }                                                  \
  |  |  |  | 3671|   294k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   587k|                            make_eof_scan_error));
 6058|       |
 6059|   587k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 292k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   292k|            return result_type{it, 0};
 6067|   587k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   294k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|   636k|{
 1976|   636k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   636k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|   636k|{
 1957|   636k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   636k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   636k|    }
 1960|   636k|    else {
 1961|   636k|        auto first = range.begin();
 1962|   923k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 920k, False: 2.40k]
  ------------------
 1963|   920k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 634k, False: 286k]
  ------------------
 1964|   634k|                return first;
 1965|   634k|            }
 1966|   920k|        }
 1967|  2.40k|        return first;
 1968|   636k|    }
 1969|   636k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   406k|    {
  108|   406k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   406k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   406k|    {
   94|   406k|        iter_difference_t<I> counter{0};
   95|  1.05M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 644k, False: 406k]
  ------------------
   96|   644k|            ++i;
   97|   644k|            ++counter;
   98|   644k|        }
   99|   406k|        return counter;
  100|   406k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|   133k|    {
 1780|   133k|        auto stdloc = loc.get<std::locale>();
 1781|   133k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   133k|        grouping = numpunct.grouping();
 1783|   133k|        thousands_sep =
 1784|   133k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 133k]
  ------------------
 1785|   133k|        decimal_point = numpunct.decimal_point();
 1786|   133k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|   133k|{
 1717|   133k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 133k, False: 0]
  ------------------
 1718|   133k|        return std::use_facet<Facet>(stdloc);
 1719|   133k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   133k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|   833k|{
 1846|   833k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   833k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.58k, False: 832k]
  |  |  ------------------
  ------------------
 1847|  1.58k|        return unexpected(e);
 1848|  1.58k|    }
 1849|       |
 1850|   832k|    return ranges::next(range.begin());
 1851|   833k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.32M|{
  950|  1.32M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.65k, False: 1.32M]
  |  |  ------------------
  ------------------
  951|  4.65k|        return eof_error::eof;
  952|  4.65k|    }
  953|  1.32M|    return eof_error::good;
  954|  1.32M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.96M|{
  944|  1.96M|    return is_range_eof(r.begin(), r.end());
  945|  1.96M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.96M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.96M|    {
  937|  1.96M|        return begin == end;
  938|  1.96M|    }
  939|  1.96M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   832k|    {
  296|   832k|        ++x;
  297|   832k|        return x;
  298|   832k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   399k|{
 3141|   399k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   399k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 397k, False: 2.48k]
  ------------------
 3143|   397k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 396k, False: 70]
  ------------------
 3144|   396k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   396k|        }
 3146|     70|        return unexpected(eof_error::eof);
 3147|   397k|    }
 3148|       |
 3149|  2.48k|    auto& it = *r;
 3150|  2.48k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 2.13k, False: 347]
  ------------------
 3151|  2.13k|        return std::pair{it, sign_type::minus_sign};
 3152|  2.13k|    }
 3153|    347|    return std::pair{it, sign_type::plus_sign};
 3154|  2.48k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|   596k|{
 2272|   596k|    auto it = read_code_unit(range);
 2273|   596k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   596k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 851, False: 595k]
  |  |  ------------------
  ------------------
 2274|    851|        return unexpected(make_eof_parse_error(it.error()));
 2275|    851|    }
 2276|       |
 2277|  1.19M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.19M, False: 586k]
  ------------------
 2278|  1.19M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 9.50k, False: 1.18M]
  ------------------
 2279|  9.50k|            return *it;
 2280|  9.50k|        }
 2281|  1.19M|    }
 2282|       |
 2283|   586k|    return unexpected(parse_error::error);
 2284|   595k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  1.02M|{
 2231|  1.02M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.02M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.02M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.02M|        if (range.size() < str.size()) {
 2236|  1.02M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.02M|        }
 2238|  1.02M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.02M|            return unexpected(parse_error::error);
 2240|  1.02M|        }
 2241|  1.02M|        return ranges::next(range.begin(), str.size());
 2242|  1.02M|    }
 2243|  1.02M|    else {
 2244|  1.02M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.02M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.02M|                return ch;
 2247|  1.02M|            }
 2248|  1.02M|            return static_cast<char_type>(ch +
 2249|  1.02M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.02M|        };
 2251|       |
 2252|  1.02M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.02M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.02M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.02M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 46.8k, False: 974k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  46.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  46.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  46.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  46.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  46.8k|    }                                                  \
  |  |  |  | 3671|  1.02M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   974k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   974k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   974k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   974k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   974k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 973k, False: 415]
  |  |  ------------------
  ------------------
 2257|   974k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   974k|                    return ascii_tolower(a) ==
 2259|   974k|                           static_cast<detail::char_t<Range>>(b);
 2260|   974k|                }))) {
 2261|   973k|            return unexpected(parse_error::error);
 2262|   973k|        }
 2263|       |
 2264|    415|        return it;
 2265|   974k|    }
 2266|  1.02M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.11M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.11M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 847k, False: 262k]
  |  Branch (2245:29): [True: 254k, False: 8.40k]
  ------------------
 2246|  1.10M|                return ch;
 2247|  1.10M|            }
 2248|  8.40k|            return static_cast<char_type>(ch +
 2249|  8.40k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.11M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|   236k|{
 2146|   236k|    auto it = read_code_unit(range);
 2147|   236k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 733, False: 236k]
  |  |  ------------------
  ------------------
 2148|    733|        return unexpected(make_eof_parse_error(it.error()));
 2149|    733|    }
 2150|       |
 2151|   236k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 235k, False: 703]
  |  |  ------------------
  ------------------
 2152|   236k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   235k|        return unexpected(parse_error::error);
 2154|   235k|    }
 2155|       |
 2156|    703|    return *it;
 2157|   236k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|   636k|{
 1996|   636k|    auto it = read_while_code_unit(range, pred);
 1997|   636k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 393k, False: 243k]
  ------------------
 1998|   393k|        return unexpected(parse_error::error);
 1999|   393k|    }
 2000|   243k|    return it;
 2001|   636k|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|   234k|    {
 1621|   234k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   234k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   234k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   234k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   234k|            m_storage.reset();
 1627|   234k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   234k|        }
 1629|   234k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   234k|                                          std::basic_string<CharT>>) {
 1631|   234k|            m_storage.emplace(SCN_FWD(range));
 1632|   234k|            m_view = string_view_type{*m_storage};
 1633|   234k|        }
 1634|   234k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|   234k|                                          typename detail::basic_scan_buffer<
 1636|   234k|                                              value_t>::forward_iterator> &&
 1637|   234k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|   234k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   234k|            auto end_seg = range.end().contiguous_segment();
 1640|   234k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.37k, False: 225k]
  |  |  ------------------
  ------------------
 1641|   234k|                             detail::to_address(end_seg.end()))) {
 1642|  8.37k|                auto& str = m_storage.emplace();
 1643|  8.37k|                str.reserve(range.end().position() - range.begin().position());
 1644|  8.37k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  8.37k|                m_view = string_view_type{str};
 1646|  8.37k|                return;
 1647|  8.37k|            }
 1648|       |
 1649|   225k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   225k|                                                            end_seg.data());
 1651|   225k|            m_storage.reset();
 1652|   225k|        }
 1653|   234k|        else {
 1654|   234k|            auto& str = m_storage.emplace();
 1655|   234k|            if constexpr (ranges::sized_range<Range>) {
 1656|   234k|                str.reserve(range.size());
 1657|   234k|            }
 1658|   234k|            if constexpr (ranges::common_range<Range>) {
 1659|   234k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   234k|                          std::back_inserter(str));
 1661|   234k|            }
 1662|   234k|            else {
 1663|   234k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   234k|                     ++it) {
 1665|   234k|                    str.push_back(*it);
 1666|   234k|                }
 1667|   234k|            }
 1668|   234k|            m_view = string_view_type{str};
 1669|   234k|        }
 1670|   234k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  2.13M|    {
 1582|  2.13M|        return m_view;
 1583|  2.13M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  1.57M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   168k|    {
 6079|   168k|        const bool need_skipped_width =
 6080|   168k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 168k]
  |  Branch (6080:33): [True: 0, False: 168k]
  ------------------
 6081|   168k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   168k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 168k]
  ------------------
 6084|   168k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 168k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   168k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 168k, False: 0]
  ------------------
 6093|   168k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 168k]
  ------------------
 6094|   168k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   168k|        return result_type{rng.begin(), 0};
 6118|   168k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  1.02M|{
 1857|  1.02M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.02M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.02M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.02M|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 46.8k, False: 974k]
  ------------------
 1862|  46.8k|            return unexpected(eof_error::eof);
 1863|  46.8k|        }
 1864|       |
 1865|   974k|        return ranges::next(range.begin(), count);
 1866|  1.02M|    }
 1867|  1.02M|    else {
 1868|  1.02M|        auto it = range.begin();
 1869|  1.02M|        if (guaranteed_minimum_size(range) >= count) {
 1870|  1.02M|            return ranges::next(it, count);
 1871|  1.02M|        }
 1872|       |
 1873|  1.02M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  1.02M|            if (it == range.end()) {
 1875|  1.02M|                return unexpected(eof_error::eof);
 1876|  1.02M|            }
 1877|  1.02M|        }
 1878|       |
 1879|  1.02M|        return it;
 1880|  1.02M|    }
 1881|  1.02M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  1.03M|{
 1899|  1.03M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.03M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.03M|    auto it = range.begin();
 1903|  1.03M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.03M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  1.03M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.03M, False: 0]
  ------------------
 1912|  1.03M|        ++it;
 1913|  1.03M|        return {it, string_type(1, *range.begin())};
 1914|  1.03M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  1.03M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  2.05M|{
  944|  2.05M|    return is_range_eof(r.begin(), r.end());
  945|  2.05M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  2.05M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.05M|    {
  937|  2.05M|        return begin == end;
  938|  2.05M|    }
  939|  2.05M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   236k|    {
  190|   236k|        i = std::move(bound);
  191|   236k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  1.03M|    {
 1890|  1.03M|        return !codepoint.empty();
 1891|  1.03M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  1.02M|{
  950|  1.02M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.46k, False: 1.01M]
  |  |  ------------------
  ------------------
  951|  3.46k|        return eof_error::eof;
  952|  3.46k|    }
  953|  1.01M|    return eof_error::good;
  954|  1.02M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   526k|{
 1846|   526k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   526k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 398, False: 525k]
  |  |  ------------------
  ------------------
 1847|    398|        return unexpected(e);
 1848|    398|    }
 1849|       |
 1850|   525k|    return ranges::next(range.begin());
 1851|   526k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   525k|    {
  296|   525k|        ++x;
  297|   525k|        return x;
  298|   525k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   395k|{
 3141|   395k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   395k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 393k, False: 1.35k]
  ------------------
 3143|   393k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 393k, False: 24]
  ------------------
 3144|   393k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   393k|        }
 3146|     24|        return unexpected(eof_error::eof);
 3147|   393k|    }
 3148|       |
 3149|  1.35k|    auto& it = *r;
 3150|  1.35k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 1.14k, False: 211]
  ------------------
 3151|  1.14k|        return std::pair{it, sign_type::minus_sign};
 3152|  1.14k|    }
 3153|    211|    return std::pair{it, sign_type::plus_sign};
 3154|  1.35k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   440k|{
 2272|   440k|    auto it = read_code_unit(range);
 2273|   440k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   440k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 190, False: 440k]
  |  |  ------------------
  ------------------
 2274|    190|        return unexpected(make_eof_parse_error(it.error()));
 2275|    190|    }
 2276|       |
 2277|   881k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 881k, False: 436k]
  ------------------
 2278|   881k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 3.79k, False: 877k]
  ------------------
 2279|  3.79k|            return *it;
 2280|  3.79k|        }
 2281|   881k|    }
 2282|       |
 2283|   436k|    return unexpected(parse_error::error);
 2284|   440k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  1.02M|{
 2231|  1.02M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.02M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.02M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.02M|        if (range.size() < str.size()) {
 2236|  1.02M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.02M|        }
 2238|  1.02M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.02M|            return unexpected(parse_error::error);
 2240|  1.02M|        }
 2241|  1.02M|        return ranges::next(range.begin(), str.size());
 2242|  1.02M|    }
 2243|  1.02M|    else {
 2244|  1.02M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.02M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.02M|                return ch;
 2247|  1.02M|            }
 2248|  1.02M|            return static_cast<char_type>(ch +
 2249|  1.02M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.02M|        };
 2251|       |
 2252|  1.02M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.02M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.02M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.02M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 46.8k, False: 974k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  46.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  46.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  46.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  46.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  46.8k|    }                                                  \
  |  |  |  | 3671|  1.02M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   974k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   974k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   974k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   974k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   974k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 974k, False: 415]
  |  |  ------------------
  ------------------
 2257|   974k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   974k|                    return ascii_tolower(a) ==
 2259|   974k|                           static_cast<detail::char_t<Range>>(b);
 2260|   974k|                }))) {
 2261|   974k|            return unexpected(parse_error::error);
 2262|   974k|        }
 2263|       |
 2264|    415|        return it;
 2265|   974k|    }
 2266|  1.02M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.11M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.11M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 847k, False: 263k]
  |  Branch (2245:29): [True: 254k, False: 8.53k]
  ------------------
 2246|  1.10M|                return ch;
 2247|  1.10M|            }
 2248|  8.53k|            return static_cast<char_type>(ch +
 2249|  8.53k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.11M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  85.3k|{
 2146|  85.3k|    auto it = read_code_unit(range);
 2147|  85.3k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 208, False: 85.1k]
  |  |  ------------------
  ------------------
 2148|    208|        return unexpected(make_eof_parse_error(it.error()));
 2149|    208|    }
 2150|       |
 2151|  85.1k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  85.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84.8k, False: 296]
  |  |  ------------------
  ------------------
 2152|  85.1k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  84.8k|        return unexpected(parse_error::error);
 2154|  84.8k|    }
 2155|       |
 2156|    296|    return *it;
 2157|  85.1k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   244k|{
 1976|   244k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   244k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   244k|{
 1957|   244k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   244k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   244k|    }
 1960|   244k|    else {
 1961|   244k|        auto first = range.begin();
 1962|   244k|        for (; first != range.end(); ++first) {
 1963|   244k|            if (pred(*first)) {
 1964|   244k|                return first;
 1965|   244k|            }
 1966|   244k|        }
 1967|   244k|        return first;
 1968|   244k|    }
 1969|   244k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   395k|{
 2951|   395k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 395k, False: 0]
  ------------------
 2952|   395k|        auto it = read_while_classic_space(range);
 2953|   395k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   395k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.74k, False: 392k]
  |  |  ------------------
  ------------------
 2955|  2.74k|            return unexpected(e);
 2956|  2.74k|        }
 2957|       |
 2958|   392k|        return it;
 2959|   395k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   395k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   395k|{
 2117|   395k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   395k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   395k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   395k|        auto buf = make_contiguous_buffer(range);
 2121|   395k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   395k|        return ranges::next(range.begin(),
 2123|   395k|                            ranges::distance(buf.view().begin(), it));
 2124|   395k|    }
 2125|   395k|    else {
 2126|   395k|        auto it = range.begin();
 2127|       |
 2128|   395k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   395k|            auto seg = get_contiguous_beginning(range);
 2130|   395k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   395k|                seg_it != seg.end()) {
 2132|   395k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   395k|            }
 2134|   395k|            ranges::advance(it, seg.size());
 2135|   395k|        }
 2136|       |
 2137|   395k|        return read_while_code_point(
 2138|   395k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   395k|    }
 2140|   395k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   395k|{
 2082|   395k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   395k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   613k|{
 2061|   613k|    auto it = range.begin();
 2062|  1.17M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.03M, False: 141k]
  ------------------
 2063|  1.03M|        const auto val =
 2064|  1.03M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.03M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.03M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.03M, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.03M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.03M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.03M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 472k, False: 561k]
  ------------------
 2069|   472k|                return it;
 2070|   472k|            }
 2071|  1.03M|        }
 2072|   561k|        it = val.iterator;
 2073|   561k|    }
 2074|       |
 2075|   141k|    return it;
 2076|   613k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|   395k|    {
  754|   395k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   631k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   631k|              cvref<T> obj = *get<T>(fn);
  745|   631k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   631k|                  obj(static_cast<decltype(args)>(args)...);
  747|   631k|              }
  748|   631k|              else {
  749|   631k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   631k|              }
  751|   631k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   631k|    {
  684|   631k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   631k|            return static_cast<T*>(s.m_cp);
  686|   631k|        }
  687|   631k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   631k|            return static_cast<T*>(s.m_p);
  689|   631k|        }
  690|   631k|        else {
  691|   631k|            return reinterpret_cast<T*>(s.m_fp);
  692|   631k|        }
  693|   631k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   631k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|   395k|        {
  662|   395k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   834k|    {
  304|   834k|        ranges::advance(x, n);
  305|   834k|        return x;
  306|   834k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   834k|    {
  268|   834k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   834k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   834k|    {
  181|  2.69M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.85M, False: 834k]
  ------------------
  182|  1.85M|            ++i;
  183|  1.85M|        }
  184|   834k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  96.7k|    {
 6193|  96.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  96.7k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  96.7k|            auto rd = make_reader<T, char_type>();
 6198|  96.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  96.7k|                return unexpected(e);
 6200|  96.7k|            }
 6201|       |
 6202|  96.7k|            return impl(rd, range, value);
 6203|  96.7k|        }
 6204|  96.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  96.7k|            auto rd = make_reader<T, char_type>();
 6206|  96.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  96.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 96.7k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|  96.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 96.7k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  96.7k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  96.7k|                return impl(rd, range, value);
 6213|  96.7k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  96.7k|        else {
 6221|  96.7k|            SCN_EXPECT(false);
 6222|  96.7k|            SCN_UNREACHABLE;
 6223|  96.7k|        }
 6224|  96.7k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   589k|    {
 3040|   589k|        reader_error_handler eh{};
 3041|   589k|        get_derived().check_specs_impl(specs, eh);
 3042|   589k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   589k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 589k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   589k|        return {};
 3046|   589k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|   589k|    {
 3051|   589k|        return static_cast<Derived&>(*this);
 3052|   589k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|   589k|    {
 4145|   589k|        detail::check_float_type_specs(specs, eh);
 4146|   589k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|  96.7k|    {
 6124|  96.7k|        const bool need_skipped_width =
 6125|  96.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 96.7k]
  |  Branch (6125:33): [True: 0, False: 96.7k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  96.7k|        auto it = rng.begin();
 6129|  96.7k|        std::ptrdiff_t prefix_width = 0;
 6130|  96.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 96.7k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  96.7k|        else {
 6138|  96.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  96.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  96.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  96.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  96.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 724, False: 95.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    724|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    724|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    724|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    724|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    724|    }                                                  \
  |  |  |  | 3671|  96.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  95.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  95.9k|            std::tie(it, prefix_width) = prefix_result;
 6140|  95.9k|        }
 6141|  95.9k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  95.9k|        std::ptrdiff_t value_width = 0;
 6145|  95.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 95.9k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  95.9k|        else {
 6161|  95.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  95.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  95.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  95.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 41.0k, False: 54.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  41.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  41.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  41.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  41.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  41.0k|    }                                                  \
  |  | 3671|  95.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  95.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  54.8k|                                             specs, value, loc));
 6163|       |
 6164|  54.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 54.8k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  54.8k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  54.8k|        std::ptrdiff_t postfix_width = 0;
 6173|  54.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 54.5k, False: 284]
  ------------------
 6174|  54.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  54.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  54.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  54.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 54.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  54.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  54.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  54.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  54.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  54.5k|                                 value_width));
 6178|  54.5k|            std::tie(it, postfix_width) = postfix_result;
 6179|  54.5k|        }
 6180|       |
 6181|  54.8k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  54.8k|                                                 value_width, postfix_width);
 6183|  54.8k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 54.8k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  54.8k|        return it;
 6188|  54.8k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  1.12M|    {
 3035|  1.12M|        return true;
 3036|  1.12M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|   585k|    {
 4217|   585k|        unsigned options{};
 4218|   585k|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 133k, False: 451k]
  ------------------
 4219|   133k|            options |= float_reader_base::allow_thsep;
 4220|   133k|        }
 4221|       |
 4222|   585k|        SCN_GCC_COMPAT_PUSH
 4223|   585k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|   585k|        switch (specs.type) {
 4226|   128k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 128k, False: 456k]
  ------------------
 4227|   128k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  50.6k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 50.6k, False: 534k]
  ------------------
 4230|  50.6k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   139k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 139k, False: 446k]
  ------------------
 4233|   139k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   133k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 133k, False: 451k]
  ------------------
 4236|   133k|                return options | float_reader_base::allow_scientific |
 4237|   133k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   133k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 133k, False: 451k]
  ------------------
 4240|   133k|                return options | float_reader_base::allow_scientific |
 4241|   133k|                       float_reader_base::allow_fixed |
 4242|   133k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 585k]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|   585k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|   585k|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|   585k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|   585k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|   785k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  1.57M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   179k|    {
 3691|   179k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   179k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   179k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   179k|        const std::ptrdiff_t sign_len =
 3694|   179k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 375, False: 179k]
  ------------------
 3695|       |
 3696|   179k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   179k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   179k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   179k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30.1k, False: 149k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  30.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  30.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  30.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  30.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  30.1k|    }                                                  \
  |  |  |  | 3671|   179k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   149k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   179k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|   553k|    {
 4057|   553k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 553k, False: 0]
  ------------------
 4058|   553k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 553k, False: 0]
  ------------------
 4059|   553k|            return;
 4060|   553k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|   537k|    {
 1587|   537k|        return m_storage.has_value();
 1588|   537k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|   314k|    {
 1592|   314k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|   314k|        return *m_storage;
 1594|   314k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  95.9k|    {
 4170|  95.9k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  95.9k|#if !SCN_DISABLE_LOCALE
 4173|  95.9k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 21.4k, False: 74.5k]
  ------------------
 4174|  21.4k|            return read_impl<Range>(
 4175|  21.4k|                range, rd,
 4176|  21.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  21.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  21.4k|                },
 4179|  21.4k|                value, loc);
 4180|  21.4k|        }
 4181|  74.5k|#endif
 4182|       |
 4183|  74.5k|        return read_impl<Range>(
 4184|  74.5k|            range, rd,
 4185|  74.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  74.5k|                return r.read_source(SCN_FWD(args)...);
 4187|  74.5k|            },
 4188|  74.5k|            value);
 4189|  95.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   128k|    {
 4206|   128k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   128k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.2k, False: 75.9k]
  |  |  ------------------
  ------------------
 4208|  52.2k|            return unexpected(r.error());
 4209|  52.2k|        }
 4210|       |
 4211|  75.9k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  75.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  75.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  75.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  75.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.19k, False: 74.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.19k|    }                                                  \
  |  |  |  | 3671|  75.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  74.7k|        return ranges::next(range.begin(), n);
 4213|  75.9k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   392k|    {
  763|   392k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   392k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  21.4k|    {
  754|  21.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  21.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.4k|              cvref<T> obj = *get<T>(fn);
  745|  21.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  21.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  21.4k|              }
  748|  21.4k|              else {
  749|  21.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.4k|              }
  751|  21.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  21.4k|    {
  684|  21.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  21.4k|            return static_cast<T*>(s.m_cp);
  686|  21.4k|        }
  687|  21.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  21.4k|            return static_cast<T*>(s.m_p);
  689|  21.4k|        }
  690|  21.4k|        else {
  691|  21.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  21.4k|        }
  693|  21.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  21.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  21.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  21.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  21.4k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|  66.6k|    {
 3679|  66.6k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  66.6k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  66.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 66.6k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  66.6k|        return read_source_impl(range);
 3685|  66.6k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|   392k|    {
 3705|   392k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   392k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   392k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   392k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 392k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   392k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   392k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   392k|        auto it = sign_result.first;
 3708|   392k|        m_sign = sign_result.second;
 3709|       |
 3710|   392k|        auto digits_begin = it;
 3711|   392k|        auto r = ranges::subrange{it, range.end()};
 3712|   392k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   392k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   392k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|   392k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|   392k|                SCN_TRY_ASSIGN(
 3717|   392k|                    it,
 3718|   392k|                    do_read_source_impl(
 3719|   392k|                        r,
 3720|   392k|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|   392k|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|   392k|            }
 3723|   392k|            else {
 3724|   392k|                auto cb = [&](const auto& rr)
 3725|   392k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   392k|                    auto res = read_all(rr);
 3727|   392k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   392k|                        return unexpected_scan_error(
 3729|   392k|                            scan_error::invalid_scanned_value,
 3730|   392k|                            "Invalid float value");
 3731|   392k|                    }
 3732|   392k|                    return res;
 3733|   392k|                };
 3734|   392k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|   392k|            }
 3736|   392k|        }
 3737|   392k|        else {
 3738|   392k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|   392k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   392k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 158k, False: 234k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   158k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   158k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   158k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   158k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   158k|    }                                                  \
  |  | 3671|   392k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|   234k|                it,
 3740|   234k|                do_read_source_impl(
 3741|   234k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   234k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   234k|        }
 3744|       |
 3745|   234k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   234k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   234k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   234k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 234k, False: 0]
  |  Branch (3747:48): [True: 234k, False: 0]
  ------------------
 3748|   234k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 234k, False: 0]
  ------------------
 3749|   234k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 234k, False: 0]
  ------------------
 3750|   234k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   234k|        }
 3752|       |
 3753|   234k|        handle_separators();
 3754|       |
 3755|   234k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 234k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   234k|        return it;
 3768|   234k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|   392k|    {
 4000|   392k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   392k|        const bool allowed_nonhex =
 4002|   392k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   392k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   392k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 392k, False: 0]
  |  Branch (4005:45): [True: 0, False: 392k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   392k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 392k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   392k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 392k, False: 0]
  |  Branch (4014:45): [True: 0, False: 392k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   392k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 392k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   392k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 236k, False: 156k]
  |  Branch (4021:28): [True: 69.4k, False: 166k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  69.4k|            auto it = range.begin();
 4025|       |
 4026|  69.4k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 120, False: 69.3k]
  ------------------
 4027|    120|                m_kind = float_kind::hex_with_prefix;
 4028|    120|                it = *r;
 4029|    120|            }
 4030|  69.3k|            else {
 4031|  69.3k|                m_kind = float_kind::hex_without_prefix;
 4032|  69.3k|            }
 4033|       |
 4034|  69.4k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  69.4k|        }
 4036|   323k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 156k, False: 166k]
  |  Branch (4036:29): [True: 156k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   156k|            m_kind = float_kind::generic;
 4040|   156k|            return read_regular_float(range);
 4041|   156k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   166k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 295, False: 166k]
  |  |  ------------------
  ------------------
 4047|    295|            m_kind = float_kind::hex_with_prefix;
 4048|    295|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    295|        }
 4050|       |
 4051|   166k|        m_kind = float_kind::generic;
 4052|   166k|        return read_regular(range);
 4053|   166k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|   392k|    {
 3811|   392k|        auto it = range.begin();
 3812|   392k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 392k, False: 0]
  ------------------
 3813|   392k|            return unexpected(r.error());
 3814|   392k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   392k|    {
 3834|   392k|        auto it = range.begin();
 3835|   392k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 392k, False: 0]
  ------------------
 3836|   392k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   392k|                scan_error::invalid_scanned_value,
 3838|   392k|                "Invalid floating-point NaN value"));
 3839|   392k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   236k|    {
 3804|   236k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   236k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|  69.7k|    {
 3904|  69.7k|        auto it = range.begin();
 3905|       |
 3906|  69.7k|        std::ptrdiff_t digits_count = 0;
 3907|  69.7k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|  69.7k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  69.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.4k, False: 45.3k]
  |  |  ------------------
  ------------------
 3909|  24.4k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  24.4k|                scan_error::invalid_scanned_value,
 3911|  24.4k|                "Invalid hexadecimal floating-point value"));
 3912|  24.4k|        }
 3913|  45.3k|        else {
 3914|  45.3k|            digits_count += ranges::distance(it, *r);
 3915|  45.3k|            it = *r;
 3916|  45.3k|        }
 3917|       |
 3918|  45.3k|        m_integral_part_length = digits_count;
 3919|  45.3k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 132, False: 45.2k]
  ------------------
 3920|  45.3k|                                             m_locale_options.decimal_point)) {
 3921|    132|            it = *r;
 3922|    132|        }
 3923|       |
 3924|  45.3k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 84, False: 45.2k]
  ------------------
 3925|  45.3k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|     84|            digits_count += ranges::distance(it, *r);
 3927|     84|            it = *r;
 3928|     84|        }
 3929|       |
 3930|  45.3k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.3k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|  45.3k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|  45.3k|        return it;
 3938|  45.3k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   115k|    {
 3789|   115k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 115k]
  |  |  |  Branch (859:45): [True: 0, False: 115k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   115k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   115k|        return read_while1_code_unit(
 3798|   115k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   115k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   115k|    {
  754|   115k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   170k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   170k|              cvref<T> obj = *get<T>(fn);
  745|   170k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   170k|                  obj(static_cast<decltype(args)>(args)...);
  747|   170k|              }
  748|   170k|              else {
  749|   170k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   170k|              }
  751|   170k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   170k|    {
  684|   170k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   170k|            return static_cast<T*>(s.m_cp);
  686|   170k|        }
  687|   170k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   170k|            return static_cast<T*>(s.m_p);
  689|   170k|        }
  690|   170k|        else {
  691|   170k|            return reinterpret_cast<T*>(s.m_fp);
  692|   170k|        }
  693|   170k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3798|   170k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   115k|        {
  662|   115k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|   197k|    {
 3876|   197k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 7.01k, False: 190k]
  ------------------
 3877|  7.01k|            auto beg_exp_it = range.begin();
 3878|  7.01k|            auto it = *r;
 3879|       |
 3880|  7.01k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 6.94k, False: 70]
  ------------------
 3881|  7.01k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  6.94k|                it = r_sign->first;
 3883|  6.94k|            }
 3884|       |
 3885|  7.01k|            if (auto r_exp = read_while1_code_unit(
 3886|  7.01k|                    ranges::subrange{it, range.end()},
 3887|  7.01k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  7.01k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  7.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.01k, False: 5.99k]
  |  |  ------------------
  ------------------
 3889|  1.01k|                it = beg_exp_it;
 3890|  1.01k|            }
 3891|  5.99k|            else {
 3892|  5.99k|                it = *r_exp;
 3893|  5.99k|            }
 3894|       |
 3895|  7.01k|            return it;
 3896|  7.01k|        }
 3897|   190k|        return range.begin();
 3898|   197k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_:
  753|  7.01k|    {
  754|  7.01k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|  22.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.6k|              cvref<T> obj = *get<T>(fn);
  745|  22.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.6k|              }
  748|  22.6k|              else {
  749|  22.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.6k|              }
  751|  22.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  22.6k|    {
  684|  22.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.6k|            return static_cast<T*>(s.m_cp);
  686|  22.6k|        }
  687|  22.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.6k|            return static_cast<T*>(s.m_p);
  689|  22.6k|        }
  690|  22.6k|        else {
  691|  22.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.6k|        }
  693|  22.6k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  22.6k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_LPv0EEEPSL_:
  661|  7.01k|        {
  662|  7.01k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   322k|    {
 3944|   322k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   322k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 258k, False: 64.3k]
  |  Branch (3945:50): [True: 25.3k, False: 232k]
  ------------------
 3946|       |
 3947|   322k|        auto it = ranges::begin(range);
 3948|   322k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   322k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   322k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 131k, False: 191k]
  |  |  ------------------
  ------------------
 3952|   131k|            return r.transform_error(
 3953|   131k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   131k|                                              "Invalid floating-point value"));
 3955|   131k|        }
 3956|   191k|        else {
 3957|   191k|            digits_count += ranges::distance(it, *r);
 3958|   191k|            it = *r;
 3959|   191k|        }
 3960|       |
 3961|   191k|        m_integral_part_length = digits_count;
 3962|   191k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 571, False: 191k]
  ------------------
 3963|   191k|                                             m_locale_options.decimal_point)) {
 3964|    571|            it = *r;
 3965|    571|        }
 3966|       |
 3967|   191k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 399, False: 191k]
  ------------------
 3968|   191k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|    399|            digits_count += ranges::distance(it, *r);
 3970|    399|            it = *r;
 3971|    399|        }
 3972|       |
 3973|   191k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 191k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   191k|        auto beg_exp_it = it;
 3979|   191k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 151k, False: 39.6k]
  ------------------
 3980|   151k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   151k|        }
 3982|   191k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 3.07k, False: 188k]
  |  Branch (3982:29): [True: 2.57k, False: 504]
  ------------------
 3983|  2.57k|            return unexpected_scan_error(
 3984|  2.57k|                scan_error::invalid_scanned_value,
 3985|  2.57k|                "No exponent given to scientific float");
 3986|  2.57k|        }
 3987|       |
 3988|   189k|        m_kind =
 3989|   189k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 183k, False: 5.87k]
  ------------------
 3990|       |
 3991|   189k|        return it;
 3992|   191k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|   514k|    {
 3774|   514k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   514k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 514k]
  |  |  |  Branch (859:45): [True: 0, False: 514k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   514k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   514k|        return read_while1_code_unit(
 3783|   514k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   514k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   514k|    {
  754|   514k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   727k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   727k|              cvref<T> obj = *get<T>(fn);
  745|   727k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   727k|                  obj(static_cast<decltype(args)>(args)...);
  747|   727k|              }
  748|   727k|              else {
  749|   727k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   727k|              }
  751|   727k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   727k|    {
  684|   727k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   727k|            return static_cast<T*>(s.m_cp);
  686|   727k|        }
  687|   727k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   727k|            return static_cast<T*>(s.m_p);
  689|   727k|        }
  690|   727k|        else {
  691|   727k|            return reinterpret_cast<T*>(s.m_fp);
  692|   727k|        }
  693|   727k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3783|   727k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   514k|        {
  662|   514k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|   234k|    {
 1577|   234k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   234k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  21.4k|        {
  662|  21.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  74.5k|    {
  754|  74.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  74.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  74.5k|              cvref<T> obj = *get<T>(fn);
  745|  74.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  74.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  74.5k|              }
  748|  74.5k|              else {
  749|  74.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  74.5k|              }
  751|  74.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  74.5k|    {
  684|  74.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  74.5k|            return static_cast<T*>(s.m_cp);
  686|  74.5k|        }
  687|  74.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  74.5k|            return static_cast<T*>(s.m_p);
  689|  74.5k|        }
  690|  74.5k|        else {
  691|  74.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  74.5k|        }
  693|  74.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  74.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  74.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  74.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  74.5k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   325k|    {
 3665|   325k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 325k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   325k|        return read_source_impl(range);
 3671|   325k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  74.5k|        {
  662|  74.5k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  96.0k|    {
 4170|  96.0k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  96.0k|#if !SCN_DISABLE_LOCALE
 4173|  96.0k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 21.4k, False: 74.5k]
  ------------------
 4174|  21.4k|            return read_impl<Range>(
 4175|  21.4k|                range, rd,
 4176|  21.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  21.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  21.4k|                },
 4179|  21.4k|                value, loc);
 4180|  21.4k|        }
 4181|  74.5k|#endif
 4182|       |
 4183|  74.5k|        return read_impl<Range>(
 4184|  74.5k|            range, rd,
 4185|  74.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  74.5k|                return r.read_source(SCN_FWD(args)...);
 4187|  74.5k|            },
 4188|  74.5k|            value);
 4189|  96.0k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   128k|    {
 4206|   128k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   128k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.4k, False: 103k]
  |  |  ------------------
  ------------------
 4208|  24.4k|            return unexpected(r.error());
 4209|  24.4k|        }
 4210|       |
 4211|   103k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   103k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   103k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   103k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28.9k, False: 74.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  28.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  28.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  28.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  28.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  28.9k|    }                                                  \
  |  |  |  | 3671|   103k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  74.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  74.8k|        return ranges::next(range.begin(), n);
 4213|   103k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   392k|    {
  763|   392k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   392k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  21.4k|    {
  754|  21.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  21.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.4k|              cvref<T> obj = *get<T>(fn);
  745|  21.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  21.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  21.4k|              }
  748|  21.4k|              else {
  749|  21.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.4k|              }
  751|  21.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  21.4k|    {
  684|  21.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  21.4k|            return static_cast<T*>(s.m_cp);
  686|  21.4k|        }
  687|  21.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  21.4k|            return static_cast<T*>(s.m_p);
  689|  21.4k|        }
  690|  21.4k|        else {
  691|  21.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  21.4k|        }
  693|  21.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  21.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  21.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  21.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  21.4k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|  66.7k|    {
 3679|  66.7k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  66.7k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  66.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 66.7k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  66.7k|        return read_source_impl(range);
 3685|  66.7k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|   392k|    {
 3705|   392k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   392k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   392k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   392k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 392k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   392k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   392k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   392k|        auto it = sign_result.first;
 3708|   392k|        m_sign = sign_result.second;
 3709|       |
 3710|   392k|        auto digits_begin = it;
 3711|   392k|        auto r = ranges::subrange{it, range.end()};
 3712|   392k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   392k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   392k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|   785k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 392k]
  |  |  |  Branch (859:45): [True: 0, False: 392k]
  |  |  |  Branch (859:45): [True: 0, False: 392k]
  |  |  ------------------
  ------------------
 3715|   392k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|   392k|            else {
 3724|   392k|                auto cb = [&](const auto& rr)
 3725|   392k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   392k|                    auto res = read_all(rr);
 3727|   392k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   392k|                        return unexpected_scan_error(
 3729|   392k|                            scan_error::invalid_scanned_value,
 3730|   392k|                            "Invalid float value");
 3731|   392k|                    }
 3732|   392k|                    return res;
 3733|   392k|                };
 3734|   392k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|   392k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   392k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 73.7k, False: 319k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  73.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  73.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  73.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  73.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  73.7k|    }                                                  \
  |  | 3671|   392k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|   319k|            }
 3736|   392k|        }
 3737|   319k|        else {
 3738|   319k|            SCN_TRY_ASSIGN(
 3739|   319k|                it,
 3740|   319k|                do_read_source_impl(
 3741|   319k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   319k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   319k|        }
 3744|       |
 3745|   319k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   319k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   319k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   319k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 319k, False: 0]
  |  Branch (3747:48): [True: 319k, False: 0]
  ------------------
 3748|   319k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 319k, False: 0]
  ------------------
 3749|   319k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 319k, False: 0]
  ------------------
 3750|   319k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   319k|        }
 3752|       |
 3753|   319k|        handle_separators();
 3754|       |
 3755|   319k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 319k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   319k|        return it;
 3768|   319k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|   392k|    {
 3811|   392k|        auto it = range.begin();
 3812|   392k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 392k, False: 0]
  ------------------
 3813|   392k|            return unexpected(r.error());
 3814|   392k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   392k|    {
 3834|   392k|        auto it = range.begin();
 3835|   392k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 392k, False: 0]
  ------------------
 3836|   392k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   392k|                scan_error::invalid_scanned_value,
 3838|   392k|                "Invalid floating-point NaN value"));
 3839|   392k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   236k|    {
 3804|   236k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   236k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   244k|{
 1996|   244k|    auto it = read_while_code_unit(range, pred);
 1997|   244k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 156k, False: 87.5k]
  ------------------
 1998|   156k|        return unexpected(parse_error::error);
 1999|   156k|    }
 2000|  87.5k|    return it;
 2001|   244k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|  45.6k|    {
 3876|  45.6k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 2.44k, False: 43.2k]
  ------------------
 3877|  2.44k|            auto beg_exp_it = range.begin();
 3878|  2.44k|            auto it = *r;
 3879|       |
 3880|  2.44k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 2.42k, False: 24]
  ------------------
 3881|  2.44k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  2.42k|                it = r_sign->first;
 3883|  2.42k|            }
 3884|       |
 3885|  2.44k|            if (auto r_exp = read_while1_code_unit(
 3886|  2.44k|                    ranges::subrange{it, range.end()},
 3887|  2.44k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  2.44k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  2.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 410, False: 2.03k]
  |  |  ------------------
  ------------------
 3889|    410|                it = beg_exp_it;
 3890|    410|            }
 3891|  2.03k|            else {
 3892|  2.03k|                it = *r_exp;
 3893|  2.03k|            }
 3894|       |
 3895|  2.44k|            return it;
 3896|  2.44k|        }
 3897|  43.2k|        return range.begin();
 3898|  45.6k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_:
  753|  2.44k|    {
  754|  2.44k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clESW_w:
  743|  7.75k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.75k|              cvref<T> obj = *get<T>(fn);
  745|  7.75k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.75k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.75k|              }
  748|  7.75k|              else {
  749|  7.75k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.75k|              }
  751|  7.75k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  7.75k|    {
  684|  7.75k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.75k|            return static_cast<T*>(s.m_cp);
  686|  7.75k|        }
  687|  7.75k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.75k|            return static_cast<T*>(s.m_p);
  689|  7.75k|        }
  690|  7.75k|        else {
  691|  7.75k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.75k|        }
  693|  7.75k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  7.75k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  661|  2.44k|        {
  662|  2.44k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   156k|    {
 3944|   156k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   156k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 92.0k, False: 64.3k]
  |  Branch (3945:50): [True: 25.3k, False: 66.7k]
  ------------------
 3946|       |
 3947|   156k|        auto it = ranges::begin(range);
 3948|   156k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   156k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   156k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 71.0k, False: 85.3k]
  |  |  ------------------
  ------------------
 3952|  71.0k|            return r.transform_error(
 3953|  71.0k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  71.0k|                                              "Invalid floating-point value"));
 3955|  71.0k|        }
 3956|  85.3k|        else {
 3957|  85.3k|            digits_count += ranges::distance(it, *r);
 3958|  85.3k|            it = *r;
 3959|  85.3k|        }
 3960|       |
 3961|  85.3k|        m_integral_part_length = digits_count;
 3962|  85.3k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 296, False: 85.0k]
  ------------------
 3963|  85.3k|                                             m_locale_options.decimal_point)) {
 3964|    296|            it = *r;
 3965|    296|        }
 3966|       |
 3967|  85.3k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 204, False: 85.1k]
  ------------------
 3968|  85.3k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|    204|            digits_count += ranges::distance(it, *r);
 3970|    204|            it = *r;
 3971|    204|        }
 3972|       |
 3973|  85.3k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 85.3k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  85.3k|        auto beg_exp_it = it;
 3979|  85.3k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 45.6k, False: 39.6k]
  ------------------
 3980|  45.6k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  45.6k|        }
 3982|  85.3k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 3.07k, False: 82.2k]
  |  Branch (3982:29): [True: 2.57k, False: 504]
  ------------------
 3983|  2.57k|            return unexpected_scan_error(
 3984|  2.57k|                scan_error::invalid_scanned_value,
 3985|  2.57k|                "No exponent given to scientific float");
 3986|  2.57k|        }
 3987|       |
 3988|  82.7k|        m_kind =
 3989|  82.7k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 80.7k, False: 2.03k]
  ------------------
 3990|       |
 3991|  82.7k|        return it;
 3992|  85.3k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   241k|    {
 3774|   241k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 241k]
  |  |  |  Branch (859:45): [True: 0, False: 241k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   241k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   241k|        return read_while1_code_unit(
 3783|   241k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   241k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|   241k|    {
  754|   241k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|   337k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   337k|              cvref<T> obj = *get<T>(fn);
  745|   337k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   337k|                  obj(static_cast<decltype(args)>(args)...);
  747|   337k|              }
  748|   337k|              else {
  749|   337k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   337k|              }
  751|   337k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   337k|    {
  684|   337k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   337k|            return static_cast<T*>(s.m_cp);
  686|   337k|        }
  687|   337k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   337k|            return static_cast<T*>(s.m_p);
  689|   337k|        }
  690|   337k|        else {
  691|   337k|            return reinterpret_cast<T*>(s.m_fp);
  692|   337k|        }
  693|   337k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|   337k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|   241k|        {
  662|   241k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|   392k|    {
 4000|   392k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   392k|        const bool allowed_nonhex =
 4002|   392k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   392k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   392k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 392k, False: 0]
  |  Branch (4005:45): [True: 0, False: 392k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   392k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 392k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   392k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 392k, False: 0]
  |  Branch (4014:45): [True: 0, False: 392k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   392k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 392k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   392k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 236k, False: 156k]
  |  Branch (4021:28): [True: 69.5k, False: 166k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  69.5k|            auto it = range.begin();
 4025|       |
 4026|  69.5k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 120, False: 69.4k]
  ------------------
 4027|    120|                m_kind = float_kind::hex_with_prefix;
 4028|    120|                it = *r;
 4029|    120|            }
 4030|  69.4k|            else {
 4031|  69.4k|                m_kind = float_kind::hex_without_prefix;
 4032|  69.4k|            }
 4033|       |
 4034|  69.5k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  69.5k|        }
 4036|   323k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 156k, False: 166k]
  |  Branch (4036:29): [True: 156k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   156k|            m_kind = float_kind::generic;
 4040|   156k|            return read_regular_float(range);
 4041|   156k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   166k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 295, False: 166k]
  |  |  ------------------
  ------------------
 4047|    295|            m_kind = float_kind::hex_with_prefix;
 4048|    295|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    295|        }
 4050|       |
 4051|   166k|        m_kind = float_kind::generic;
 4052|   166k|        return read_regular(range);
 4053|   166k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   236k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   236k|                    auto res = read_all(rr);
 3727|   236k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 236k]
  |  |  ------------------
  ------------------
 3728|     98|                        return unexpected_scan_error(
 3729|     98|                            scan_error::invalid_scanned_value,
 3730|     98|                            "Invalid float value");
 3731|     98|                    }
 3732|   236k|                    return res;
 3733|   236k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   236k|{
 1839|   236k|    return ranges::next(range.begin(), range.end());
 1840|   236k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   236k|    {
  313|   236k|        ranges::advance(x, bound);
  314|   236k|        return x;
  315|   236k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   236k|    {
  275|   236k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   236k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|   319k|    {
 1577|   319k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   319k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   319k|    {
 1621|   319k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   319k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   319k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   319k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   319k|            m_storage.reset();
 1627|   319k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   319k|        }
 1629|   319k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   319k|                                          std::basic_string<CharT>>) {
 1631|   319k|            m_storage.emplace(SCN_FWD(range));
 1632|   319k|            m_view = string_view_type{*m_storage};
 1633|   319k|        }
 1634|   319k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   319k|                                          typename detail::basic_scan_buffer<
 1636|   319k|                                              value_t>::forward_iterator> &&
 1637|   319k|                           ranges::common_range<Range>) {
 1638|   319k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   319k|            auto end_seg = range.end().contiguous_segment();
 1640|   319k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   319k|                             detail::to_address(end_seg.end()))) {
 1642|   319k|                auto& str = m_storage.emplace();
 1643|   319k|                str.reserve(range.end().position() - range.begin().position());
 1644|   319k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   319k|                m_view = string_view_type{str};
 1646|   319k|                return;
 1647|   319k|            }
 1648|       |
 1649|   319k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   319k|                                                            end_seg.data());
 1651|   319k|            m_storage.reset();
 1652|   319k|        }
 1653|   319k|        else {
 1654|   319k|            auto& str = m_storage.emplace();
 1655|   319k|            if constexpr (ranges::sized_range<Range>) {
 1656|   319k|                str.reserve(range.size());
 1657|   319k|            }
 1658|   319k|            if constexpr (ranges::common_range<Range>) {
 1659|   319k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   319k|                          std::back_inserter(str));
 1661|   319k|            }
 1662|   319k|            else {
 1663|   319k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   319k|                     ++it) {
 1665|   319k|                    str.push_back(*it);
 1666|   319k|                }
 1667|   319k|            }
 1668|   319k|            m_view = string_view_type{str};
 1669|   319k|        }
 1670|   319k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  21.4k|        {
  662|  21.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  74.5k|    {
  754|  74.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  74.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  74.5k|              cvref<T> obj = *get<T>(fn);
  745|  74.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  74.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  74.5k|              }
  748|  74.5k|              else {
  749|  74.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  74.5k|              }
  751|  74.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  74.5k|    {
  684|  74.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  74.5k|            return static_cast<T*>(s.m_cp);
  686|  74.5k|        }
  687|  74.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  74.5k|            return static_cast<T*>(s.m_p);
  689|  74.5k|        }
  690|  74.5k|        else {
  691|  74.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  74.5k|        }
  693|  74.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  74.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  74.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  74.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  74.5k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   326k|    {
 3665|   326k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 326k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   326k|        return read_source_impl(range);
 3671|   326k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  74.5k|        {
  662|  74.5k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  98.5k|    {
 6193|  98.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  98.5k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  98.5k|            auto rd = make_reader<T, char_type>();
 6198|  98.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  98.5k|                return unexpected(e);
 6200|  98.5k|            }
 6201|       |
 6202|  98.5k|            return impl(rd, range, value);
 6203|  98.5k|        }
 6204|  98.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  98.5k|            auto rd = make_reader<T, char_type>();
 6206|  98.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  98.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.5k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|  98.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 98.5k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  98.5k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  98.5k|                return impl(rd, range, value);
 6213|  98.5k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  98.5k|        else {
 6221|  98.5k|            SCN_EXPECT(false);
 6222|  98.5k|            SCN_UNREACHABLE;
 6223|  98.5k|        }
 6224|  98.5k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|  98.5k|    {
 6124|  98.5k|        const bool need_skipped_width =
 6125|  98.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 98.5k]
  |  Branch (6125:33): [True: 0, False: 98.5k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  98.5k|        auto it = rng.begin();
 6129|  98.5k|        std::ptrdiff_t prefix_width = 0;
 6130|  98.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 98.5k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  98.5k|        else {
 6138|  98.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  98.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  98.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  98.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  98.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 770, False: 97.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    770|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    770|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    770|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    770|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    770|    }                                                  \
  |  |  |  | 3671|  98.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  97.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  97.7k|            std::tie(it, prefix_width) = prefix_result;
 6140|  97.7k|        }
 6141|  97.7k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  97.7k|        std::ptrdiff_t value_width = 0;
 6145|  97.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 97.7k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  97.7k|        else {
 6161|  97.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  97.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  97.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  97.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 41.0k, False: 56.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  41.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  41.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  41.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  41.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  41.0k|    }                                                  \
  |  | 3671|  97.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  97.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  56.7k|                                             specs, value, loc));
 6163|       |
 6164|  56.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 56.7k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  56.7k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  56.7k|        std::ptrdiff_t postfix_width = 0;
 6173|  56.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 56.4k, False: 310]
  ------------------
 6174|  56.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  56.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  56.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  56.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  56.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 56.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  56.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  56.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  56.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  56.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  56.4k|                                 value_width));
 6178|  56.4k|            std::tie(it, postfix_width) = postfix_result;
 6179|  56.4k|        }
 6180|       |
 6181|  56.7k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  56.7k|                                                 value_width, postfix_width);
 6183|  56.7k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 56.7k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  56.7k|        return it;
 6188|  56.7k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   185k|    {
 3691|   185k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   185k|        const std::ptrdiff_t sign_len =
 3694|   185k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 375, False: 185k]
  ------------------
 3695|       |
 3696|   185k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   185k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   185k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   185k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 29.4k, False: 155k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  29.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  29.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  29.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  29.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  29.4k|    }                                                  \
  |  |  |  | 3671|   185k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   155k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   185k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  97.7k|    {
 4170|  97.7k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  97.7k|#if !SCN_DISABLE_LOCALE
 4173|  97.7k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 22.3k, False: 75.4k]
  ------------------
 4174|  22.3k|            return read_impl<Range>(
 4175|  22.3k|                range, rd,
 4176|  22.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  22.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  22.3k|                },
 4179|  22.3k|                value, loc);
 4180|  22.3k|        }
 4181|  75.4k|#endif
 4182|       |
 4183|  75.4k|        return read_impl<Range>(
 4184|  75.4k|            range, rd,
 4185|  75.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  75.4k|                return r.read_source(SCN_FWD(args)...);
 4187|  75.4k|            },
 4188|  75.4k|            value);
 4189|  97.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   131k|    {
 4206|   131k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   131k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52.6k, False: 78.5k]
  |  |  ------------------
  ------------------
 4208|  52.6k|            return unexpected(r.error());
 4209|  52.6k|        }
 4210|       |
 4211|  78.5k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  78.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  78.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  78.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 649, False: 77.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    649|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    649|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    649|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    649|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    649|    }                                                  \
  |  |  |  | 3671|  78.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  77.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  77.9k|        return ranges::next(range.begin(), n);
 4213|  78.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  22.3k|    {
  754|  22.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  22.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.3k|              cvref<T> obj = *get<T>(fn);
  745|  22.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.3k|              }
  748|  22.3k|              else {
  749|  22.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.3k|              }
  751|  22.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  22.3k|    {
  684|  22.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.3k|            return static_cast<T*>(s.m_cp);
  686|  22.3k|        }
  687|  22.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.3k|            return static_cast<T*>(s.m_p);
  689|  22.3k|        }
  690|  22.3k|        else {
  691|  22.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.3k|        }
  693|  22.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  22.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  22.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  22.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  22.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  22.3k|        {
  662|  22.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  75.4k|    {
  754|  75.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  75.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  75.4k|              cvref<T> obj = *get<T>(fn);
  745|  75.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  75.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  75.4k|              }
  748|  75.4k|              else {
  749|  75.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  75.4k|              }
  751|  75.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  75.4k|    {
  684|  75.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  75.4k|            return static_cast<T*>(s.m_cp);
  686|  75.4k|        }
  687|  75.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  75.4k|            return static_cast<T*>(s.m_p);
  689|  75.4k|        }
  690|  75.4k|        else {
  691|  75.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  75.4k|        }
  693|  75.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  75.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  75.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  75.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  75.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  75.4k|        {
  662|  75.4k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  97.8k|    {
 4170|  97.8k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  97.8k|#if !SCN_DISABLE_LOCALE
 4173|  97.8k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 22.3k, False: 75.4k]
  ------------------
 4174|  22.3k|            return read_impl<Range>(
 4175|  22.3k|                range, rd,
 4176|  22.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  22.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  22.3k|                },
 4179|  22.3k|                value, loc);
 4180|  22.3k|        }
 4181|  75.4k|#endif
 4182|       |
 4183|  75.4k|        return read_impl<Range>(
 4184|  75.4k|            range, rd,
 4185|  75.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  75.4k|                return r.read_source(SCN_FWD(args)...);
 4187|  75.4k|            },
 4188|  75.4k|            value);
 4189|  97.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   131k|    {
 4206|   131k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   131k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.5k, False: 106k]
  |  |  ------------------
  ------------------
 4208|  24.5k|            return unexpected(r.error());
 4209|  24.5k|        }
 4210|       |
 4211|   106k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28.7k, False: 78.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  28.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  28.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  28.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  28.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  28.7k|    }                                                  \
  |  |  |  | 3671|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  78.0k|        return ranges::next(range.begin(), n);
 4213|   106k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  22.3k|    {
  754|  22.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  22.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.3k|              cvref<T> obj = *get<T>(fn);
  745|  22.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.3k|              }
  748|  22.3k|              else {
  749|  22.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.3k|              }
  751|  22.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  22.3k|    {
  684|  22.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.3k|            return static_cast<T*>(s.m_cp);
  686|  22.3k|        }
  687|  22.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.3k|            return static_cast<T*>(s.m_p);
  689|  22.3k|        }
  690|  22.3k|        else {
  691|  22.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.3k|        }
  693|  22.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  22.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  22.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  22.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  22.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  22.3k|        {
  662|  22.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  75.4k|    {
  754|  75.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  75.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  75.4k|              cvref<T> obj = *get<T>(fn);
  745|  75.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  75.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  75.4k|              }
  748|  75.4k|              else {
  749|  75.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  75.4k|              }
  751|  75.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  75.4k|    {
  684|  75.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  75.4k|            return static_cast<T*>(s.m_cp);
  686|  75.4k|        }
  687|  75.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  75.4k|            return static_cast<T*>(s.m_p);
  689|  75.4k|        }
  690|  75.4k|        else {
  691|  75.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  75.4k|        }
  693|  75.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  75.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  75.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  75.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  75.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  75.4k|        {
  662|  75.4k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  99.5k|    {
 6193|  99.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  99.5k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  99.5k|            auto rd = make_reader<T, char_type>();
 6198|  99.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  99.5k|                return unexpected(e);
 6200|  99.5k|            }
 6201|       |
 6202|  99.5k|            return impl(rd, range, value);
 6203|  99.5k|        }
 6204|  99.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  99.5k|            auto rd = make_reader<T, char_type>();
 6206|  99.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  99.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 99.5k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|  99.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 99.5k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  99.5k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  99.5k|                return impl(rd, range, value);
 6213|  99.5k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  99.5k|        else {
 6221|  99.5k|            SCN_EXPECT(false);
 6222|  99.5k|            SCN_UNREACHABLE;
 6223|  99.5k|        }
 6224|  99.5k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|  99.5k|    {
 6124|  99.5k|        const bool need_skipped_width =
 6125|  99.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 99.5k]
  |  Branch (6125:33): [True: 0, False: 99.5k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  99.5k|        auto it = rng.begin();
 6129|  99.5k|        std::ptrdiff_t prefix_width = 0;
 6130|  99.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 99.5k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  99.5k|        else {
 6138|  99.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  99.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  99.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  99.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  99.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 800, False: 98.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    800|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    800|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    800|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    800|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    800|    }                                                  \
  |  |  |  | 3671|  99.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  98.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  98.7k|            std::tie(it, prefix_width) = prefix_result;
 6140|  98.7k|        }
 6141|  98.7k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  98.7k|        std::ptrdiff_t value_width = 0;
 6145|  98.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 98.7k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  98.7k|        else {
 6161|  98.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  98.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  98.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  98.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 41.0k, False: 57.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  41.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  41.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  41.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  41.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  41.0k|    }                                                  \
  |  | 3671|  98.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  98.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  57.7k|                                             specs, value, loc));
 6163|       |
 6164|  57.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 57.7k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  57.7k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  57.7k|        std::ptrdiff_t postfix_width = 0;
 6173|  57.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 57.4k, False: 326]
  ------------------
 6174|  57.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  57.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  57.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  57.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  57.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 57.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  57.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  57.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  57.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  57.4k|                                 value_width));
 6178|  57.4k|            std::tie(it, postfix_width) = postfix_result;
 6179|  57.4k|        }
 6180|       |
 6181|  57.7k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  57.7k|                                                 value_width, postfix_width);
 6183|  57.7k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 57.7k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  57.7k|        return it;
 6188|  57.7k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   188k|    {
 3691|   188k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   188k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   188k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   188k|        const std::ptrdiff_t sign_len =
 3694|   188k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 380, False: 187k]
  ------------------
 3695|       |
 3696|   188k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   188k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   188k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   188k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28.6k, False: 159k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  28.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  28.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  28.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  28.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  28.6k|    }                                                  \
  |  |  |  | 3671|   188k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   159k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   188k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  98.7k|    {
 4170|  98.7k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  98.7k|#if !SCN_DISABLE_LOCALE
 4173|  98.7k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 22.8k, False: 75.9k]
  ------------------
 4174|  22.8k|            return read_impl<Range>(
 4175|  22.8k|                range, rd,
 4176|  22.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  22.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  22.8k|                },
 4179|  22.8k|                value, loc);
 4180|  22.8k|        }
 4181|  75.9k|#endif
 4182|       |
 4183|  75.9k|        return read_impl<Range>(
 4184|  75.9k|            range, rd,
 4185|  75.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  75.9k|                return r.read_source(SCN_FWD(args)...);
 4187|  75.9k|            },
 4188|  75.9k|            value);
 4189|  98.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   133k|    {
 4206|   133k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   133k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.2k, False: 79.8k]
  |  |  ------------------
  ------------------
 4208|  53.2k|            return unexpected(r.error());
 4209|  53.2k|        }
 4210|       |
 4211|  79.8k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  79.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  79.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  79.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  79.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 64, False: 79.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     64|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     64|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     64|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     64|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     64|    }                                                  \
  |  |  |  | 3671|  79.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  79.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  79.7k|        return ranges::next(range.begin(), n);
 4213|  79.8k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  22.8k|    {
  754|  22.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  22.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.8k|              cvref<T> obj = *get<T>(fn);
  745|  22.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.8k|              }
  748|  22.8k|              else {
  749|  22.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.8k|              }
  751|  22.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  22.8k|    {
  684|  22.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.8k|            return static_cast<T*>(s.m_cp);
  686|  22.8k|        }
  687|  22.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.8k|            return static_cast<T*>(s.m_p);
  689|  22.8k|        }
  690|  22.8k|        else {
  691|  22.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.8k|        }
  693|  22.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  22.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  22.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  22.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  22.8k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  22.8k|        {
  662|  22.8k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  75.9k|    {
  754|  75.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  75.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  75.9k|              cvref<T> obj = *get<T>(fn);
  745|  75.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  75.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  75.9k|              }
  748|  75.9k|              else {
  749|  75.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  75.9k|              }
  751|  75.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  75.9k|    {
  684|  75.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  75.9k|            return static_cast<T*>(s.m_cp);
  686|  75.9k|        }
  687|  75.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  75.9k|            return static_cast<T*>(s.m_p);
  689|  75.9k|        }
  690|  75.9k|        else {
  691|  75.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  75.9k|        }
  693|  75.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  75.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  75.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  75.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  75.9k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  75.9k|        {
  662|  75.9k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  98.8k|    {
 4170|  98.8k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  98.8k|#if !SCN_DISABLE_LOCALE
 4173|  98.8k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 22.8k, False: 75.9k]
  ------------------
 4174|  22.8k|            return read_impl<Range>(
 4175|  22.8k|                range, rd,
 4176|  22.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  22.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  22.8k|                },
 4179|  22.8k|                value, loc);
 4180|  22.8k|        }
 4181|  75.9k|#endif
 4182|       |
 4183|  75.9k|        return read_impl<Range>(
 4184|  75.9k|            range, rd,
 4185|  75.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  75.9k|                return r.read_source(SCN_FWD(args)...);
 4187|  75.9k|            },
 4188|  75.9k|            value);
 4189|  98.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   133k|    {
 4206|   133k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   133k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.7k, False: 108k]
  |  |  ------------------
  ------------------
 4208|  24.7k|            return unexpected(r.error());
 4209|  24.7k|        }
 4210|       |
 4211|   108k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28.5k, False: 79.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  28.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  28.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  28.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  28.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  28.5k|    }                                                  \
  |  |  |  | 3671|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  79.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  79.8k|        return ranges::next(range.begin(), n);
 4213|   108k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  22.8k|    {
  754|  22.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  22.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.8k|              cvref<T> obj = *get<T>(fn);
  745|  22.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.8k|              }
  748|  22.8k|              else {
  749|  22.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.8k|              }
  751|  22.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  22.8k|    {
  684|  22.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.8k|            return static_cast<T*>(s.m_cp);
  686|  22.8k|        }
  687|  22.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.8k|            return static_cast<T*>(s.m_p);
  689|  22.8k|        }
  690|  22.8k|        else {
  691|  22.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.8k|        }
  693|  22.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  22.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  22.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  22.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  22.8k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  22.8k|        {
  662|  22.8k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  75.9k|    {
  754|  75.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  75.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  75.9k|              cvref<T> obj = *get<T>(fn);
  745|  75.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  75.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  75.9k|              }
  748|  75.9k|              else {
  749|  75.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  75.9k|              }
  751|  75.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  75.9k|    {
  684|  75.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  75.9k|            return static_cast<T*>(s.m_cp);
  686|  75.9k|        }
  687|  75.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  75.9k|            return static_cast<T*>(s.m_p);
  689|  75.9k|        }
  690|  75.9k|        else {
  691|  75.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  75.9k|        }
  693|  75.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  75.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  75.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  75.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  75.9k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  75.9k|        {
  662|  75.9k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   395k|{
 2061|   395k|    auto it = range.begin();
 2062|   634k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 631k, False: 2.74k]
  ------------------
 2063|   631k|        const auto val =
 2064|   631k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   631k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   631k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 631k, False: 0]
  |  |  ------------------
  ------------------
 2066|   631k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   631k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   631k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 392k, False: 239k]
  ------------------
 2069|   392k|                return it;
 2070|   392k|            }
 2071|   631k|        }
 2072|   239k|        it = val.iterator;
 2073|   239k|    }
 2074|       |
 2075|  2.74k|    return it;
 2076|   395k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   631k|{
 1899|   631k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   631k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   631k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   631k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   631k|    auto it = range.begin();
 1903|   631k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   631k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   631k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 631k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   631k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 631k, False: 0]
  ------------------
 1912|   631k|        ++it;
 1913|   631k|        return {it, string_type(1, *range.begin())};
 1914|   631k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   631k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   631k|    {
 1890|   631k|        return !codepoint.empty();
 1891|   631k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   395k|{
 2082|   395k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   395k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   395k|{
 2951|   395k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 395k, False: 0]
  ------------------
 2952|   395k|        auto it = read_while_classic_space(range);
 2953|   395k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   395k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.74k, False: 392k]
  |  |  ------------------
  ------------------
 2955|  2.74k|            return unexpected(e);
 2956|  2.74k|        }
 2957|       |
 2958|   392k|        return it;
 2959|   395k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   395k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   395k|{
 2117|   395k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   395k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   395k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   395k|        auto buf = make_contiguous_buffer(range);
 2121|   395k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   395k|        return ranges::next(range.begin(),
 2123|   395k|                            ranges::distance(buf.view().begin(), it));
 2124|   395k|    }
 2125|   395k|    else {
 2126|   395k|        auto it = range.begin();
 2127|       |
 2128|   395k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   395k|            auto seg = get_contiguous_beginning(range);
 2130|   395k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   395k|                seg_it != seg.end()) {
 2132|   395k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   395k|            }
 2134|   395k|            ranges::advance(it, seg.size());
 2135|   395k|        }
 2136|       |
 2137|   395k|        return read_while_code_point(
 2138|   395k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   395k|    }
 2140|   395k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   395k|    {
  754|   395k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   631k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   631k|              cvref<T> obj = *get<T>(fn);
  745|   631k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   631k|                  obj(static_cast<decltype(args)>(args)...);
  747|   631k|              }
  748|   631k|              else {
  749|   631k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   631k|              }
  751|   631k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   631k|    {
  684|   631k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   631k|            return static_cast<T*>(s.m_cp);
  686|   631k|        }
  687|   631k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   631k|            return static_cast<T*>(s.m_p);
  689|   631k|        }
  690|   631k|        else {
  691|   631k|            return reinterpret_cast<T*>(s.m_fp);
  692|   631k|        }
  693|   631k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   631k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   395k|        {
  662|   395k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|   952k|{
 2088|   952k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   952k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   952k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   952k|        auto buf = make_contiguous_buffer(range);
 2092|   952k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   952k|        return ranges::next(range.begin(),
 2094|   952k|                            ranges::distance(buf.view().begin(), it));
 2095|   952k|    }
 2096|   952k|    else {
 2097|   952k|        auto it = range.begin();
 2098|       |
 2099|   952k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|   952k|            auto seg = get_contiguous_beginning(range);
 2101|   952k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   952k|                seg_it != seg.end()) {
 2103|   952k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   952k|            }
 2105|   952k|            ranges::advance(it, seg.size());
 2106|   952k|        }
 2107|       |
 2108|   952k|        return read_until_code_point(
 2109|   952k|            ranges::subrange{it, range.end()},
 2110|   952k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   952k|    }
 2112|   952k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|   952k|{
 1683|   952k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   952k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   952k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   952k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   952k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   952k|    }
 1688|   952k|    else {
 1689|   952k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   952k|    }
 1691|   952k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|   952k|    {
 1490|   952k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
 1576|   952k|    {
 1577|   952k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   952k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   952k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|   952k|    {
 1621|   952k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   952k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   952k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   952k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   952k|            m_storage.reset();
 1627|   952k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   952k|        }
 1629|   952k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   952k|                                          std::basic_string<CharT>>) {
 1631|   952k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   952k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|   952k|            m_view = string_view_type{*m_storage};
 1633|   952k|        }
 1634|   952k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   952k|                                          typename detail::basic_scan_buffer<
 1636|   952k|                                              value_t>::forward_iterator> &&
 1637|   952k|                           ranges::common_range<Range>) {
 1638|   952k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   952k|            auto end_seg = range.end().contiguous_segment();
 1640|   952k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   952k|                             detail::to_address(end_seg.end()))) {
 1642|   952k|                auto& str = m_storage.emplace();
 1643|   952k|                str.reserve(range.end().position() - range.begin().position());
 1644|   952k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   952k|                m_view = string_view_type{str};
 1646|   952k|                return;
 1647|   952k|            }
 1648|       |
 1649|   952k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   952k|                                                            end_seg.data());
 1651|   952k|            m_storage.reset();
 1652|   952k|        }
 1653|   952k|        else {
 1654|   952k|            auto& str = m_storage.emplace();
 1655|   952k|            if constexpr (ranges::sized_range<Range>) {
 1656|   952k|                str.reserve(range.size());
 1657|   952k|            }
 1658|   952k|            if constexpr (ranges::common_range<Range>) {
 1659|   952k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   952k|                          std::back_inserter(str));
 1661|   952k|            }
 1662|   952k|            else {
 1663|   952k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   952k|                     ++it) {
 1665|   952k|                    str.push_back(*it);
 1666|   952k|                }
 1667|   952k|            }
 1668|   952k|            m_view = string_view_type{str};
 1669|   952k|        }
 1670|   952k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4099|   689k|    {
 4100|   689k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 76.7k, False: 612k]
  ------------------
 4101|  76.7k|            return std::copysign(value, T{-1.0});
 4102|  76.7k|        }
 4103|   612k|        return std::copysign(value, T{1.0});
 4104|   689k|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|   218k|{
 2088|   218k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   218k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   218k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   218k|        auto buf = make_contiguous_buffer(range);
 2092|   218k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   218k|        return ranges::next(range.begin(),
 2094|   218k|                            ranges::distance(buf.view().begin(), it));
 2095|   218k|    }
 2096|   218k|    else {
 2097|   218k|        auto it = range.begin();
 2098|       |
 2099|   218k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|   218k|            auto seg = get_contiguous_beginning(range);
 2101|   218k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   218k|                seg_it != seg.end()) {
 2103|   218k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   218k|            }
 2105|   218k|            ranges::advance(it, seg.size());
 2106|   218k|        }
 2107|       |
 2108|   218k|        return read_until_code_point(
 2109|   218k|            ranges::subrange{it, range.end()},
 2110|   218k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   218k|    }
 2112|   218k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|   218k|    {
  754|   218k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|   402k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   402k|              cvref<T> obj = *get<T>(fn);
  745|   402k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   402k|                  obj(static_cast<decltype(args)>(args)...);
  747|   402k|              }
  748|   402k|              else {
  749|   402k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   402k|              }
  751|   402k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   402k|    {
  684|   402k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   402k|            return static_cast<T*>(s.m_cp);
  686|   402k|        }
  687|   402k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   402k|            return static_cast<T*>(s.m_p);
  689|   402k|        }
  690|   402k|        else {
  691|   402k|            return reinterpret_cast<T*>(s.m_fp);
  692|   402k|        }
  693|   402k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|   402k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|   218k|        {
  662|   218k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
 1576|   218k|    {
 1577|   218k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   218k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|   218k|    {
 1621|   218k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   218k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   218k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   218k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   218k|            m_storage.reset();
 1627|   218k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   218k|        }
 1629|   218k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   218k|                                          std::basic_string<CharT>>) {
 1631|   218k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|   218k|            m_view = string_view_type{*m_storage};
 1633|   218k|        }
 1634|   218k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   218k|                                          typename detail::basic_scan_buffer<
 1636|   218k|                                              value_t>::forward_iterator> &&
 1637|   218k|                           ranges::common_range<Range>) {
 1638|   218k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   218k|            auto end_seg = range.end().contiguous_segment();
 1640|   218k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   218k|                             detail::to_address(end_seg.end()))) {
 1642|   218k|                auto& str = m_storage.emplace();
 1643|   218k|                str.reserve(range.end().position() - range.begin().position());
 1644|   218k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   218k|                m_view = string_view_type{str};
 1646|   218k|                return;
 1647|   218k|            }
 1648|       |
 1649|   218k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   218k|                                                            end_seg.data());
 1651|   218k|            m_storage.reset();
 1652|   218k|        }
 1653|   218k|        else {
 1654|   218k|            auto& str = m_storage.emplace();
 1655|   218k|            if constexpr (ranges::sized_range<Range>) {
 1656|   218k|                str.reserve(range.size());
 1657|   218k|            }
 1658|   218k|            if constexpr (ranges::common_range<Range>) {
 1659|   218k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   218k|                          std::back_inserter(str));
 1661|   218k|            }
 1662|   218k|            else {
 1663|   218k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   218k|                     ++it) {
 1665|   218k|                    str.push_back(*it);
 1666|   218k|                }
 1667|   218k|            }
 1668|   218k|            m_view = string_view_type{str};
 1669|   218k|        }
 1670|   218k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4099|   179k|    {
 4100|   179k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 336, False: 179k]
  ------------------
 4101|    336|            return std::copysign(value, T{-1.0});
 4102|    336|        }
 4103|   179k|        return std::copysign(value, T{1.0});
 4104|   179k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|   720k|    {
 4100|   720k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 79.5k, False: 641k]
  ------------------
 4101|  79.5k|            return std::copysign(value, T{-1.0});
 4102|  79.5k|        }
 4103|   641k|        return std::copysign(value, T{1.0});
 4104|   720k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|   185k|    {
 4100|   185k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 336, False: 185k]
  ------------------
 4101|    336|            return std::copysign(value, T{-1.0});
 4102|    336|        }
 4103|   185k|        return std::copysign(value, T{1.0});
 4104|   185k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4099|   727k|    {
 4100|   727k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 81.7k, False: 645k]
  ------------------
 4101|  81.7k|            return std::copysign(value, T{-1.0});
 4102|  81.7k|        }
 4103|   645k|        return std::copysign(value, T{1.0});
 4104|   727k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4099|   188k|    {
 4100|   188k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 341, False: 187k]
  ------------------
 4101|    341|            return std::copysign(value, T{-1.0});
 4102|    341|        }
 4103|   187k|        return std::copysign(value, T{1.0});
 4104|   188k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   313k|{
 5795|   313k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.00k, False: 309k]
  |  |  ------------------
  ------------------
 5796|  4.00k|        return unexpected(e);
 5797|  4.00k|    }
 5798|       |
 5799|   309k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 309k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   309k|    return skip_classic_whitespace(range);
 5804|   309k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5870|   100k|    {
 5871|   100k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   100k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   100k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   100k|            auto rd = make_reader<T, char_type>();
 5876|   100k|            return impl(rd, range, value);
 5877|   100k|        }
 5878|   100k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   100k|            auto rd = make_reader<T, char_type>();
 5880|   100k|            if (!is_segment_contiguous(range)) {
 5881|   100k|                return impl(rd, range, value);
 5882|   100k|            }
 5883|   100k|            auto crange = get_as_contiguous(range);
 5884|   100k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   100k|            return ranges::next(range.begin(),
 5886|   100k|                                ranges::distance(crange.begin(), it));
 5887|   100k|        }
 5888|   100k|        else {
 5889|   100k|            SCN_EXPECT(false);
 5890|   100k|            SCN_UNREACHABLE;
 5891|   100k|        }
 5892|   100k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   100k|    {
 5863|   100k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.32k, False: 98.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.32k|    }                                                  \
  |  |  |  | 3671|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  98.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  98.6k|                        .transform_error(make_eof_scan_error));
 5865|  98.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   100k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  98.6k|    {
 4152|  98.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  98.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  98.6k|        float_reader<CharT> rd{};
 4155|  98.6k|        return read_impl<Range>(
 4156|  98.6k|            range, rd,
 4157|  98.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  98.6k|                return r.read_source(SCN_FWD(args)...);
 4159|  98.6k|            },
 4160|  98.6k|            value);
 4161|  98.6k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|   639k|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|   839k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  98.6k|    {
  754|  98.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  98.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.6k|              cvref<T> obj = *get<T>(fn);
  745|  98.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  98.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  98.6k|              }
  748|  98.6k|              else {
  749|  98.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.6k|              }
  751|  98.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  98.6k|    {
  684|  98.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  98.6k|            return static_cast<T*>(s.m_cp);
  686|  98.6k|        }
  687|  98.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  98.6k|            return static_cast<T*>(s.m_p);
  689|  98.6k|        }
  690|  98.6k|        else {
  691|  98.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  98.6k|        }
  693|  98.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  98.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  98.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  98.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  98.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  98.6k|        {
  662|  98.6k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|   105k|    {
 5871|   105k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   105k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   105k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   105k|            auto rd = make_reader<T, char_type>();
 5876|   105k|            return impl(rd, range, value);
 5877|   105k|        }
 5878|   105k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   105k|            auto rd = make_reader<T, char_type>();
 5880|   105k|            if (!is_segment_contiguous(range)) {
 5881|   105k|                return impl(rd, range, value);
 5882|   105k|            }
 5883|   105k|            auto crange = get_as_contiguous(range);
 5884|   105k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   105k|            return ranges::next(range.begin(),
 5886|   105k|                                ranges::distance(crange.begin(), it));
 5887|   105k|        }
 5888|   105k|        else {
 5889|   105k|            SCN_EXPECT(false);
 5890|   105k|            SCN_UNREACHABLE;
 5891|   105k|        }
 5892|   105k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   105k|    {
 5863|   105k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.51k, False: 104k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.51k|    }                                                  \
  |  |  |  | 3671|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   104k|                        .transform_error(make_eof_scan_error));
 5865|   104k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   105k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   104k|    {
 4152|   104k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   104k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   104k|        float_reader<CharT> rd{};
 4155|   104k|        return read_impl<Range>(
 4156|   104k|            range, rd,
 4157|   104k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   104k|                return r.read_source(SCN_FWD(args)...);
 4159|   104k|            },
 4160|   104k|            value);
 4161|   104k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   104k|    {
  754|   104k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   104k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   104k|              cvref<T> obj = *get<T>(fn);
  745|   104k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   104k|                  obj(static_cast<decltype(args)>(args)...);
  747|   104k|              }
  748|   104k|              else {
  749|   104k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   104k|              }
  751|   104k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   104k|    {
  684|   104k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   104k|            return static_cast<T*>(s.m_cp);
  686|   104k|        }
  687|   104k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   104k|            return static_cast<T*>(s.m_p);
  689|   104k|        }
  690|   104k|        else {
  691|   104k|            return reinterpret_cast<T*>(s.m_fp);
  692|   104k|        }
  693|   104k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   104k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   104k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   104k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   104k|        {
  662|   104k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5870|   107k|    {
 5871|   107k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   107k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   107k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   107k|            auto rd = make_reader<T, char_type>();
 5876|   107k|            return impl(rd, range, value);
 5877|   107k|        }
 5878|   107k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   107k|            auto rd = make_reader<T, char_type>();
 5880|   107k|            if (!is_segment_contiguous(range)) {
 5881|   107k|                return impl(rd, range, value);
 5882|   107k|            }
 5883|   107k|            auto crange = get_as_contiguous(range);
 5884|   107k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   107k|            return ranges::next(range.begin(),
 5886|   107k|                                ranges::distance(crange.begin(), it));
 5887|   107k|        }
 5888|   107k|        else {
 5889|   107k|            SCN_EXPECT(false);
 5890|   107k|            SCN_UNREACHABLE;
 5891|   107k|        }
 5892|   107k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   107k|    {
 5863|   107k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.64k, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.64k|    }                                                  \
  |  |  |  | 3671|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   105k|                        .transform_error(make_eof_scan_error));
 5865|   105k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   107k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   105k|    {
 4152|   105k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   105k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   105k|        float_reader<CharT> rd{};
 4155|   105k|        return read_impl<Range>(
 4156|   105k|            range, rd,
 4157|   105k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   105k|                return r.read_source(SCN_FWD(args)...);
 4159|   105k|            },
 4160|   105k|            value);
 4161|   105k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   105k|    {
  754|   105k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   105k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   105k|              cvref<T> obj = *get<T>(fn);
  745|   105k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   105k|                  obj(static_cast<decltype(args)>(args)...);
  747|   105k|              }
  748|   105k|              else {
  749|   105k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   105k|              }
  751|   105k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   105k|    {
  684|   105k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   105k|            return static_cast<T*>(s.m_cp);
  686|   105k|        }
  687|   105k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   105k|            return static_cast<T*>(s.m_p);
  689|   105k|        }
  690|   105k|        else {
  691|   105k|            return reinterpret_cast<T*>(s.m_fp);
  692|   105k|        }
  693|   105k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   105k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   105k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   105k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   105k|        {
  662|   105k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   335k|{
 5795|   335k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.08k, False: 331k]
  |  |  ------------------
  ------------------
 5796|  4.08k|        return unexpected(e);
 5797|  4.08k|    }
 5798|       |
 5799|   331k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 331k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   331k|    return skip_classic_whitespace(range);
 5804|   331k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   107k|    {
 5871|   107k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   107k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   107k|            auto rd = make_reader<T, char_type>();
 5876|   107k|            return impl(rd, range, value);
 5877|   107k|        }
 5878|   107k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   107k|            auto rd = make_reader<T, char_type>();
 5880|   107k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 107k, False: 0]
  ------------------
 5881|   107k|                return impl(rd, range, value);
 5882|   107k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   107k|        else {
 5889|   107k|            SCN_EXPECT(false);
 5890|   107k|            SCN_UNREACHABLE;
 5891|   107k|        }
 5892|   107k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   107k|    {
 5863|   107k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.35k, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.35k|    }                                                  \
  |  |  |  | 3671|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   106k|                        .transform_error(make_eof_scan_error));
 5865|   106k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   107k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   106k|    {
 4152|   106k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   106k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   106k|        float_reader<CharT> rd{};
 4155|   106k|        return read_impl<Range>(
 4156|   106k|            range, rd,
 4157|   106k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   106k|                return r.read_source(SCN_FWD(args)...);
 4159|   106k|            },
 4160|   106k|            value);
 4161|   106k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   106k|    {
  754|   106k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|   106k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   106k|                  obj(static_cast<decltype(args)>(args)...);
  747|   106k|              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   106k|    {
  684|   106k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   106k|            return static_cast<T*>(s.m_cp);
  686|   106k|        }
  687|   106k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   106k|            return static_cast<T*>(s.m_p);
  689|   106k|        }
  690|   106k|        else {
  691|   106k|            return reinterpret_cast<T*>(s.m_fp);
  692|   106k|        }
  693|   106k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   106k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   106k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   106k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   106k|        {
  662|   106k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   113k|    {
 5871|   113k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   113k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   113k|            auto rd = make_reader<T, char_type>();
 5876|   113k|            return impl(rd, range, value);
 5877|   113k|        }
 5878|   113k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   113k|            auto rd = make_reader<T, char_type>();
 5880|   113k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 113k, False: 0]
  ------------------
 5881|   113k|                return impl(rd, range, value);
 5882|   113k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   113k|        else {
 5889|   113k|            SCN_EXPECT(false);
 5890|   113k|            SCN_UNREACHABLE;
 5891|   113k|        }
 5892|   113k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   113k|    {
 5863|   113k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.54k, False: 111k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.54k|    }                                                  \
  |  |  |  | 3671|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   111k|                        .transform_error(make_eof_scan_error));
 5865|   111k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   113k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   111k|    {
 4152|   111k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   111k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   111k|        float_reader<CharT> rd{};
 4155|   111k|        return read_impl<Range>(
 4156|   111k|            range, rd,
 4157|   111k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   111k|                return r.read_source(SCN_FWD(args)...);
 4159|   111k|            },
 4160|   111k|            value);
 4161|   111k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   111k|    {
  754|   111k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   111k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   111k|              cvref<T> obj = *get<T>(fn);
  745|   111k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   111k|                  obj(static_cast<decltype(args)>(args)...);
  747|   111k|              }
  748|   111k|              else {
  749|   111k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   111k|              }
  751|   111k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   111k|    {
  684|   111k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   111k|            return static_cast<T*>(s.m_cp);
  686|   111k|        }
  687|   111k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   111k|            return static_cast<T*>(s.m_p);
  689|   111k|        }
  690|   111k|        else {
  691|   111k|            return reinterpret_cast<T*>(s.m_fp);
  692|   111k|        }
  693|   111k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   111k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   111k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   111k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   111k|        {
  662|   111k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   114k|    {
 5871|   114k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   114k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   114k|            auto rd = make_reader<T, char_type>();
 5876|   114k|            return impl(rd, range, value);
 5877|   114k|        }
 5878|   114k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   114k|            auto rd = make_reader<T, char_type>();
 5880|   114k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 114k, False: 0]
  ------------------
 5881|   114k|                return impl(rd, range, value);
 5882|   114k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   114k|        else {
 5889|   114k|            SCN_EXPECT(false);
 5890|   114k|            SCN_UNREACHABLE;
 5891|   114k|        }
 5892|   114k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   114k|    {
 5863|   114k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.67k, False: 112k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.67k|    }                                                  \
  |  |  |  | 3671|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   112k|                        .transform_error(make_eof_scan_error));
 5865|   112k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   114k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   112k|    {
 4152|   112k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   112k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   112k|        float_reader<CharT> rd{};
 4155|   112k|        return read_impl<Range>(
 4156|   112k|            range, rd,
 4157|   112k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   112k|                return r.read_source(SCN_FWD(args)...);
 4159|   112k|            },
 4160|   112k|            value);
 4161|   112k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   112k|    {
  754|   112k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   112k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   112k|              cvref<T> obj = *get<T>(fn);
  745|   112k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   112k|                  obj(static_cast<decltype(args)>(args)...);
  747|   112k|              }
  748|   112k|              else {
  749|   112k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   112k|              }
  751|   112k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   112k|    {
  684|   112k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   112k|            return static_cast<T*>(s.m_cp);
  686|   112k|        }
  687|   112k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   112k|            return static_cast<T*>(s.m_p);
  689|   112k|        }
  690|   112k|        else {
  691|   112k|            return reinterpret_cast<T*>(s.m_fp);
  692|   112k|        }
  693|   112k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   112k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   112k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   112k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   112k|        {
  662|   112k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|   746k|    {
 2879|   746k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  2.17M|    {
 2883|  2.17M|        return m_current;
 2884|  2.17M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  1.43M|    {
 2888|  1.43M|        return m_range.end();
 2889|  1.43M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   684k|    {
 2903|   684k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   684k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   684k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   684k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   684k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 684k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   684k|        }
 2909|   684k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   684k|    static_cast<    \
  |  |  929|   684k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   684k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   746k|    {
 2893|   746k|        return ranges::subrange{begin(), end()};
 2894|   746k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   746k|    {
 6037|   746k|        const bool need_skipped_width =
 6038|   746k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 746k]
  |  Branch (6038:33): [True: 0, False: 746k]
  ------------------
 6039|   746k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   746k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 746k]
  ------------------
 6043|   746k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 746k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   746k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 746k, False: 0]
  |  Branch (6047:56): [True: 746k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   746k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 746k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  1.48M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   746k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   746k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   746k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   746k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.5k, False: 735k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  11.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  11.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  11.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  11.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  11.5k|    }                                                  \
  |  |  |  | 3671|   746k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   735k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  1.48M|                            make_eof_scan_error));
 6058|       |
 6059|  1.48M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 735k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   735k|            return result_type{it, 0};
 6067|  1.48M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   746k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   673k|    {
 6079|   673k|        const bool need_skipped_width =
 6080|   673k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 673k]
  |  Branch (6080:33): [True: 0, False: 673k]
  ------------------
 6081|   673k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   673k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 673k]
  ------------------
 6084|   673k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 673k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   673k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 673k, False: 0]
  ------------------
 6093|   673k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 673k]
  ------------------
 6094|   673k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   673k|        return result_type{rng.begin(), 0};
 6118|   673k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6192|   241k|    {
 6193|   241k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   241k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   241k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   241k|            auto rd = make_reader<T, char_type>();
 6198|   241k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 241k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   241k|            return impl(rd, range, value);
 6203|   241k|        }
 6204|   241k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   241k|            auto rd = make_reader<T, char_type>();
 6206|   241k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   241k|                return unexpected(e);
 6208|   241k|            }
 6209|       |
 6210|   241k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   241k|                specs.width != 0) {
 6212|   241k|                return impl(rd, range, value);
 6213|   241k|            }
 6214|       |
 6215|   241k|            auto crange = get_as_contiguous(range);
 6216|   241k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   241k|            return ranges::next(range.begin(),
 6218|   241k|                                ranges::distance(crange.begin(), it));
 6219|   241k|        }
 6220|   241k|        else {
 6221|   241k|            SCN_EXPECT(false);
 6222|   241k|            SCN_UNREACHABLE;
 6223|   241k|        }
 6224|   241k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   241k|    {
 6124|   241k|        const bool need_skipped_width =
 6125|   241k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 241k]
  |  Branch (6125:33): [True: 0, False: 241k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   241k|        auto it = rng.begin();
 6129|   241k|        std::ptrdiff_t prefix_width = 0;
 6130|   241k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 241k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   241k|        else {
 6138|   241k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   241k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   241k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   241k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.49k, False: 238k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.49k|    }                                                  \
  |  |  |  | 3671|   241k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   238k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   238k|            std::tie(it, prefix_width) = prefix_result;
 6140|   238k|        }
 6141|   238k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   238k|        std::ptrdiff_t value_width = 0;
 6145|   238k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 238k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   238k|        else {
 6161|   238k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   238k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   238k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.4k, False: 220k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  17.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  17.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  17.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  17.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  17.4k|    }                                                  \
  |  | 3671|   238k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   238k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   220k|                                             specs, value, loc));
 6163|       |
 6164|   220k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 220k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   220k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   220k|        std::ptrdiff_t postfix_width = 0;
 6173|   220k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 217k, False: 3.08k]
  ------------------
 6174|   217k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   217k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   217k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   217k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   217k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   217k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   217k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   217k|                                 value_width));
 6178|   217k|            std::tie(it, postfix_width) = postfix_result;
 6179|   217k|        }
 6180|       |
 6181|   220k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   220k|                                                 value_width, postfix_width);
 6183|   220k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 220k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   220k|        return it;
 6188|   220k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|   251k|    {
 6193|   251k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   251k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   251k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   251k|            auto rd = make_reader<T, char_type>();
 6198|   251k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 251k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   251k|            return impl(rd, range, value);
 6203|   251k|        }
 6204|   251k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   251k|            auto rd = make_reader<T, char_type>();
 6206|   251k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   251k|                return unexpected(e);
 6208|   251k|            }
 6209|       |
 6210|   251k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   251k|                specs.width != 0) {
 6212|   251k|                return impl(rd, range, value);
 6213|   251k|            }
 6214|       |
 6215|   251k|            auto crange = get_as_contiguous(range);
 6216|   251k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   251k|            return ranges::next(range.begin(),
 6218|   251k|                                ranges::distance(crange.begin(), it));
 6219|   251k|        }
 6220|   251k|        else {
 6221|   251k|            SCN_EXPECT(false);
 6222|   251k|            SCN_UNREACHABLE;
 6223|   251k|        }
 6224|   251k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   251k|    {
 6124|   251k|        const bool need_skipped_width =
 6125|   251k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 251k]
  |  Branch (6125:33): [True: 0, False: 251k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   251k|        auto it = rng.begin();
 6129|   251k|        std::ptrdiff_t prefix_width = 0;
 6130|   251k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 251k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   251k|        else {
 6138|   251k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   251k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   251k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   251k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.87k, False: 247k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.87k|    }                                                  \
  |  |  |  | 3671|   251k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   247k|            std::tie(it, prefix_width) = prefix_result;
 6140|   247k|        }
 6141|   247k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   247k|        std::ptrdiff_t value_width = 0;
 6145|   247k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 247k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   247k|        else {
 6161|   247k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.0k, False: 230k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  17.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  17.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  17.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  17.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  17.0k|    }                                                  \
  |  | 3671|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   230k|                                             specs, value, loc));
 6163|       |
 6164|   230k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 230k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   230k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   230k|        std::ptrdiff_t postfix_width = 0;
 6173|   230k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 226k, False: 3.41k]
  ------------------
 6174|   226k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   226k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   226k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   226k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 226k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   226k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   226k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   226k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   226k|                                 value_width));
 6178|   226k|            std::tie(it, postfix_width) = postfix_result;
 6179|   226k|        }
 6180|       |
 6181|   230k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   230k|                                                 value_width, postfix_width);
 6183|   230k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 230k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   230k|        return it;
 6188|   230k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6192|   253k|    {
 6193|   253k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|   253k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|   253k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   253k|            auto rd = make_reader<T, char_type>();
 6198|   253k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 253k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   253k|            return impl(rd, range, value);
 6203|   253k|        }
 6204|   253k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   253k|            auto rd = make_reader<T, char_type>();
 6206|   253k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|   253k|                return unexpected(e);
 6208|   253k|            }
 6209|       |
 6210|   253k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|   253k|                specs.width != 0) {
 6212|   253k|                return impl(rd, range, value);
 6213|   253k|            }
 6214|       |
 6215|   253k|            auto crange = get_as_contiguous(range);
 6216|   253k|            SCN_TRY(it, impl(rd, crange, value));
 6217|   253k|            return ranges::next(range.begin(),
 6218|   253k|                                ranges::distance(crange.begin(), it));
 6219|   253k|        }
 6220|   253k|        else {
 6221|   253k|            SCN_EXPECT(false);
 6222|   253k|            SCN_UNREACHABLE;
 6223|   253k|        }
 6224|   253k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   253k|    {
 6124|   253k|        const bool need_skipped_width =
 6125|   253k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 253k]
  |  Branch (6125:33): [True: 0, False: 253k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   253k|        auto it = rng.begin();
 6129|   253k|        std::ptrdiff_t prefix_width = 0;
 6130|   253k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 253k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   253k|        else {
 6138|   253k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   253k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   253k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   253k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.13k, False: 249k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.13k|    }                                                  \
  |  |  |  | 3671|   253k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   249k|            std::tie(it, prefix_width) = prefix_result;
 6140|   249k|        }
 6141|   249k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   249k|        std::ptrdiff_t value_width = 0;
 6145|   249k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 249k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   249k|        else {
 6161|   249k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   249k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   249k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.7k, False: 232k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  16.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  16.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  16.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  16.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  16.7k|    }                                                  \
  |  | 3671|   249k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   232k|                                             specs, value, loc));
 6163|       |
 6164|   232k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 232k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   232k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   232k|        std::ptrdiff_t postfix_width = 0;
 6173|   232k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 229k, False: 3.64k]
  ------------------
 6174|   229k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   229k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   229k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   229k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 229k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   229k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   229k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   229k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   229k|                                 value_width));
 6178|   229k|            std::tie(it, postfix_width) = postfix_result;
 6179|   229k|        }
 6180|       |
 6181|   232k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   232k|                                                 value_width, postfix_width);
 6183|   232k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 232k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   232k|        return it;
 6188|   232k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   100k|{
 5795|   100k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 327, False: 100k]
  |  |  ------------------
  ------------------
 5796|    327|        return unexpected(e);
 5797|    327|    }
 5798|       |
 5799|   100k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 100k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   100k|    return skip_classic_whitespace(range);
 5804|   100k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5870|  32.4k|    {
 5871|  32.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  32.4k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  32.4k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  32.4k|            auto rd = make_reader<T, char_type>();
 5876|  32.4k|            return impl(rd, range, value);
 5877|  32.4k|        }
 5878|  32.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  32.4k|            auto rd = make_reader<T, char_type>();
 5880|  32.4k|            if (!is_segment_contiguous(range)) {
 5881|  32.4k|                return impl(rd, range, value);
 5882|  32.4k|            }
 5883|  32.4k|            auto crange = get_as_contiguous(range);
 5884|  32.4k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  32.4k|            return ranges::next(range.begin(),
 5886|  32.4k|                                ranges::distance(crange.begin(), it));
 5887|  32.4k|        }
 5888|  32.4k|        else {
 5889|  32.4k|            SCN_EXPECT(false);
 5890|  32.4k|            SCN_UNREACHABLE;
 5891|  32.4k|        }
 5892|  32.4k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  32.4k|    {
 5863|  32.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  32.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  32.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  32.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 234, False: 32.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    234|    }                                                  \
  |  |  |  | 3671|  32.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  32.2k|                        .transform_error(make_eof_scan_error));
 5865|  32.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  32.4k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  32.2k|    {
 4152|  32.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  32.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  32.2k|        float_reader<CharT> rd{};
 4155|  32.2k|        return read_impl<Range>(
 4156|  32.2k|            range, rd,
 4157|  32.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  32.2k|                return r.read_source(SCN_FWD(args)...);
 4159|  32.2k|            },
 4160|  32.2k|            value);
 4161|  32.2k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|   200k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  32.2k|    {
  754|  32.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  32.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.2k|              cvref<T> obj = *get<T>(fn);
  745|  32.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  32.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  32.2k|              }
  748|  32.2k|              else {
  749|  32.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.2k|              }
  751|  32.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  32.2k|    {
  684|  32.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  32.2k|            return static_cast<T*>(s.m_cp);
  686|  32.2k|        }
  687|  32.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  32.2k|            return static_cast<T*>(s.m_p);
  689|  32.2k|        }
  690|  32.2k|        else {
  691|  32.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  32.2k|        }
  693|  32.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  32.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  32.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  32.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  32.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  32.2k|        {
  662|  32.2k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|  33.8k|    {
 5871|  33.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  33.8k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  33.8k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  33.8k|            auto rd = make_reader<T, char_type>();
 5876|  33.8k|            return impl(rd, range, value);
 5877|  33.8k|        }
 5878|  33.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  33.8k|            auto rd = make_reader<T, char_type>();
 5880|  33.8k|            if (!is_segment_contiguous(range)) {
 5881|  33.8k|                return impl(rd, range, value);
 5882|  33.8k|            }
 5883|  33.8k|            auto crange = get_as_contiguous(range);
 5884|  33.8k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  33.8k|            return ranges::next(range.begin(),
 5886|  33.8k|                                ranges::distance(crange.begin(), it));
 5887|  33.8k|        }
 5888|  33.8k|        else {
 5889|  33.8k|            SCN_EXPECT(false);
 5890|  33.8k|            SCN_UNREACHABLE;
 5891|  33.8k|        }
 5892|  33.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  33.8k|    {
 5863|  33.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  33.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  33.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  33.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 261, False: 33.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    261|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    261|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    261|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    261|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    261|    }                                                  \
  |  |  |  | 3671|  33.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  33.5k|                        .transform_error(make_eof_scan_error));
 5865|  33.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  33.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  33.5k|    {
 4152|  33.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  33.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  33.5k|        float_reader<CharT> rd{};
 4155|  33.5k|        return read_impl<Range>(
 4156|  33.5k|            range, rd,
 4157|  33.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  33.5k|                return r.read_source(SCN_FWD(args)...);
 4159|  33.5k|            },
 4160|  33.5k|            value);
 4161|  33.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  33.5k|    {
  754|  33.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  33.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  33.5k|              cvref<T> obj = *get<T>(fn);
  745|  33.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  33.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  33.5k|              }
  748|  33.5k|              else {
  749|  33.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  33.5k|              }
  751|  33.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  33.5k|    {
  684|  33.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  33.5k|            return static_cast<T*>(s.m_cp);
  686|  33.5k|        }
  687|  33.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  33.5k|            return static_cast<T*>(s.m_p);
  689|  33.5k|        }
  690|  33.5k|        else {
  691|  33.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  33.5k|        }
  693|  33.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  33.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  33.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  33.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  33.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  33.5k|        {
  662|  33.5k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5870|  34.5k|    {
 5871|  34.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  34.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  34.5k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  34.5k|            auto rd = make_reader<T, char_type>();
 5876|  34.5k|            return impl(rd, range, value);
 5877|  34.5k|        }
 5878|  34.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  34.5k|            auto rd = make_reader<T, char_type>();
 5880|  34.5k|            if (!is_segment_contiguous(range)) {
 5881|  34.5k|                return impl(rd, range, value);
 5882|  34.5k|            }
 5883|  34.5k|            auto crange = get_as_contiguous(range);
 5884|  34.5k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  34.5k|            return ranges::next(range.begin(),
 5886|  34.5k|                                ranges::distance(crange.begin(), it));
 5887|  34.5k|        }
 5888|  34.5k|        else {
 5889|  34.5k|            SCN_EXPECT(false);
 5890|  34.5k|            SCN_UNREACHABLE;
 5891|  34.5k|        }
 5892|  34.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  34.5k|    {
 5863|  34.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  34.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  34.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  34.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  34.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 279, False: 34.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    279|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    279|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    279|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    279|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    279|    }                                                  \
  |  |  |  | 3671|  34.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  34.2k|                        .transform_error(make_eof_scan_error));
 5865|  34.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  34.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  34.2k|    {
 4152|  34.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  34.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  34.2k|        float_reader<CharT> rd{};
 4155|  34.2k|        return read_impl<Range>(
 4156|  34.2k|            range, rd,
 4157|  34.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  34.2k|                return r.read_source(SCN_FWD(args)...);
 4159|  34.2k|            },
 4160|  34.2k|            value);
 4161|  34.2k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  34.2k|    {
  754|  34.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  34.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.2k|              cvref<T> obj = *get<T>(fn);
  745|  34.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  34.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  34.2k|              }
  748|  34.2k|              else {
  749|  34.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.2k|              }
  751|  34.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  34.2k|    {
  684|  34.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  34.2k|            return static_cast<T*>(s.m_cp);
  686|  34.2k|        }
  687|  34.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  34.2k|            return static_cast<T*>(s.m_p);
  689|  34.2k|        }
  690|  34.2k|        else {
  691|  34.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  34.2k|        }
  693|  34.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  34.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  34.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  34.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  34.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  34.2k|        {
  662|  34.2k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   294k|    {
 2879|   294k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   759k|    {
 2883|   759k|        return m_current;
 2884|   759k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   464k|    {
 2888|   464k|        return m_range.end();
 2889|   464k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   169k|    {
 2903|   169k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   169k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   169k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 169k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   169k|        }
 2909|   169k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   169k|    static_cast<    \
  |  |  929|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   169k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   294k|    {
 2893|   294k|        return ranges::subrange{begin(), end()};
 2894|   294k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   294k|    {
 6037|   294k|        const bool need_skipped_width =
 6038|   294k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 294k]
  |  Branch (6038:33): [True: 0, False: 294k]
  ------------------
 6039|   294k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   294k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 294k]
  ------------------
 6043|   294k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 294k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   294k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 294k, False: 0]
  |  Branch (6047:56): [True: 294k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   294k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 294k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   587k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   294k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   294k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   294k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.29k, False: 292k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.29k|    }                                                  \
  |  |  |  | 3671|   294k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   587k|                            make_eof_scan_error));
 6058|       |
 6059|   587k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 292k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   292k|            return result_type{it, 0};
 6067|   587k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   294k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   168k|    {
 6079|   168k|        const bool need_skipped_width =
 6080|   168k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 168k]
  |  Branch (6080:33): [True: 0, False: 168k]
  ------------------
 6081|   168k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   168k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 168k]
  ------------------
 6084|   168k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 168k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   168k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 168k, False: 0]
  ------------------
 6093|   168k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 168k]
  ------------------
 6094|   168k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   168k|        return result_type{rng.begin(), 0};
 6118|   168k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6192|  96.7k|    {
 6193|  96.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  96.7k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  96.7k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  96.7k|            auto rd = make_reader<T, char_type>();
 6198|  96.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  96.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 96.7k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|  96.7k|            return impl(rd, range, value);
 6203|  96.7k|        }
 6204|  96.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  96.7k|            auto rd = make_reader<T, char_type>();
 6206|  96.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  96.7k|                return unexpected(e);
 6208|  96.7k|            }
 6209|       |
 6210|  96.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  96.7k|                specs.width != 0) {
 6212|  96.7k|                return impl(rd, range, value);
 6213|  96.7k|            }
 6214|       |
 6215|  96.7k|            auto crange = get_as_contiguous(range);
 6216|  96.7k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  96.7k|            return ranges::next(range.begin(),
 6218|  96.7k|                                ranges::distance(crange.begin(), it));
 6219|  96.7k|        }
 6220|  96.7k|        else {
 6221|  96.7k|            SCN_EXPECT(false);
 6222|  96.7k|            SCN_UNREACHABLE;
 6223|  96.7k|        }
 6224|  96.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  96.7k|    {
 6124|  96.7k|        const bool need_skipped_width =
 6125|  96.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 96.7k]
  |  Branch (6125:33): [True: 0, False: 96.7k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  96.7k|        auto it = rng.begin();
 6129|  96.7k|        std::ptrdiff_t prefix_width = 0;
 6130|  96.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 96.7k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  96.7k|        else {
 6138|  96.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  96.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  96.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  96.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  96.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 724, False: 96.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    724|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    724|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    724|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    724|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    724|    }                                                  \
  |  |  |  | 3671|  96.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  96.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  96.0k|            std::tie(it, prefix_width) = prefix_result;
 6140|  96.0k|        }
 6141|  96.0k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  96.0k|        std::ptrdiff_t value_width = 0;
 6145|  96.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 96.0k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  96.0k|        else {
 6161|  96.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  96.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  96.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  96.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 41.0k, False: 54.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  41.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  41.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  41.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  41.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  41.0k|    }                                                  \
  |  | 3671|  96.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  96.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  54.9k|                                             specs, value, loc));
 6163|       |
 6164|  54.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 54.9k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  54.9k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  54.9k|        std::ptrdiff_t postfix_width = 0;
 6173|  54.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 54.6k, False: 284]
  ------------------
 6174|  54.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  54.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  54.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  54.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 54.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  54.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  54.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  54.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  54.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  54.6k|                                 value_width));
 6178|  54.6k|            std::tie(it, postfix_width) = postfix_result;
 6179|  54.6k|        }
 6180|       |
 6181|  54.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  54.9k|                                                 value_width, postfix_width);
 6183|  54.9k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 54.9k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  54.9k|        return it;
 6188|  54.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|  98.5k|    {
 6193|  98.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  98.5k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  98.5k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  98.5k|            auto rd = make_reader<T, char_type>();
 6198|  98.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  98.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.5k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|  98.5k|            return impl(rd, range, value);
 6203|  98.5k|        }
 6204|  98.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  98.5k|            auto rd = make_reader<T, char_type>();
 6206|  98.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  98.5k|                return unexpected(e);
 6208|  98.5k|            }
 6209|       |
 6210|  98.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  98.5k|                specs.width != 0) {
 6212|  98.5k|                return impl(rd, range, value);
 6213|  98.5k|            }
 6214|       |
 6215|  98.5k|            auto crange = get_as_contiguous(range);
 6216|  98.5k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  98.5k|            return ranges::next(range.begin(),
 6218|  98.5k|                                ranges::distance(crange.begin(), it));
 6219|  98.5k|        }
 6220|  98.5k|        else {
 6221|  98.5k|            SCN_EXPECT(false);
 6222|  98.5k|            SCN_UNREACHABLE;
 6223|  98.5k|        }
 6224|  98.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  98.5k|    {
 6124|  98.5k|        const bool need_skipped_width =
 6125|  98.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 98.5k]
  |  Branch (6125:33): [True: 0, False: 98.5k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  98.5k|        auto it = rng.begin();
 6129|  98.5k|        std::ptrdiff_t prefix_width = 0;
 6130|  98.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 98.5k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  98.5k|        else {
 6138|  98.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  98.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  98.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  98.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  98.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 770, False: 97.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    770|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    770|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    770|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    770|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    770|    }                                                  \
  |  |  |  | 3671|  98.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  97.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  97.8k|            std::tie(it, prefix_width) = prefix_result;
 6140|  97.8k|        }
 6141|  97.8k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  97.8k|        std::ptrdiff_t value_width = 0;
 6145|  97.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 97.8k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  97.8k|        else {
 6161|  97.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  97.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  97.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  97.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 41.0k, False: 56.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  41.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  41.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  41.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  41.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  41.0k|    }                                                  \
  |  | 3671|  97.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  97.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  56.7k|                                             specs, value, loc));
 6163|       |
 6164|  56.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 56.7k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  56.7k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  56.7k|        std::ptrdiff_t postfix_width = 0;
 6173|  56.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 56.4k, False: 310]
  ------------------
 6174|  56.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  56.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  56.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  56.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  56.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 56.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  56.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  56.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  56.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  56.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  56.4k|                                 value_width));
 6178|  56.4k|            std::tie(it, postfix_width) = postfix_result;
 6179|  56.4k|        }
 6180|       |
 6181|  56.7k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  56.7k|                                                 value_width, postfix_width);
 6183|  56.7k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 56.7k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  56.7k|        return it;
 6188|  56.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6192|  99.6k|    {
 6193|  99.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  99.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  99.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  99.6k|            auto rd = make_reader<T, char_type>();
 6198|  99.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  99.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 99.6k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|  99.6k|            return impl(rd, range, value);
 6203|  99.6k|        }
 6204|  99.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  99.6k|            auto rd = make_reader<T, char_type>();
 6206|  99.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  99.6k|                return unexpected(e);
 6208|  99.6k|            }
 6209|       |
 6210|  99.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  99.6k|                specs.width != 0) {
 6212|  99.6k|                return impl(rd, range, value);
 6213|  99.6k|            }
 6214|       |
 6215|  99.6k|            auto crange = get_as_contiguous(range);
 6216|  99.6k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  99.6k|            return ranges::next(range.begin(),
 6218|  99.6k|                                ranges::distance(crange.begin(), it));
 6219|  99.6k|        }
 6220|  99.6k|        else {
 6221|  99.6k|            SCN_EXPECT(false);
 6222|  99.6k|            SCN_UNREACHABLE;
 6223|  99.6k|        }
 6224|  99.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|  99.6k|    {
 6124|  99.6k|        const bool need_skipped_width =
 6125|  99.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 99.6k]
  |  Branch (6125:33): [True: 0, False: 99.6k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  99.6k|        auto it = rng.begin();
 6129|  99.6k|        std::ptrdiff_t prefix_width = 0;
 6130|  99.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 99.6k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  99.6k|        else {
 6138|  99.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  99.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  99.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  99.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  99.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 800, False: 98.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    800|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    800|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    800|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    800|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    800|    }                                                  \
  |  |  |  | 3671|  99.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  98.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  98.8k|            std::tie(it, prefix_width) = prefix_result;
 6140|  98.8k|        }
 6141|  98.8k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  98.8k|        std::ptrdiff_t value_width = 0;
 6145|  98.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 98.8k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  98.8k|        else {
 6161|  98.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  98.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  98.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  98.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 41.0k, False: 57.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  41.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  41.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  41.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  41.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  41.0k|    }                                                  \
  |  | 3671|  98.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  98.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  57.8k|                                             specs, value, loc));
 6163|       |
 6164|  57.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 57.8k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  57.8k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  57.8k|        std::ptrdiff_t postfix_width = 0;
 6173|  57.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 57.5k, False: 326]
  ------------------
 6174|  57.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  57.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  57.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  57.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  57.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 57.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  57.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  57.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  57.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  57.5k|                                 value_width));
 6178|  57.5k|            std::tie(it, postfix_width) = postfix_result;
 6179|  57.5k|        }
 6180|       |
 6181|  57.8k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  57.8k|                                                 value_width, postfix_width);
 6183|  57.8k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 57.8k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  57.8k|        return it;
 6188|  57.8k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   100k|{
 5795|   100k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 327, False: 100k]
  |  |  ------------------
  ------------------
 5796|    327|        return unexpected(e);
 5797|    327|    }
 5798|       |
 5799|   100k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 100k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   100k|    return skip_classic_whitespace(range);
 5804|   100k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  32.4k|    {
 5871|  32.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  32.4k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  32.4k|            auto rd = make_reader<T, char_type>();
 5876|  32.4k|            return impl(rd, range, value);
 5877|  32.4k|        }
 5878|  32.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  32.4k|            auto rd = make_reader<T, char_type>();
 5880|  32.4k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 32.4k, False: 0]
  ------------------
 5881|  32.4k|                return impl(rd, range, value);
 5882|  32.4k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  32.4k|        else {
 5889|  32.4k|            SCN_EXPECT(false);
 5890|  32.4k|            SCN_UNREACHABLE;
 5891|  32.4k|        }
 5892|  32.4k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  32.4k|    {
 5863|  32.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  32.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  32.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  32.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 234, False: 32.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    234|    }                                                  \
  |  |  |  | 3671|  32.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  32.1k|                        .transform_error(make_eof_scan_error));
 5865|  32.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  32.4k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  32.1k|    {
 4152|  32.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  32.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  32.1k|        float_reader<CharT> rd{};
 4155|  32.1k|        return read_impl<Range>(
 4156|  32.1k|            range, rd,
 4157|  32.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  32.1k|                return r.read_source(SCN_FWD(args)...);
 4159|  32.1k|            },
 4160|  32.1k|            value);
 4161|  32.1k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  32.1k|    {
  754|  32.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  32.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.1k|              cvref<T> obj = *get<T>(fn);
  745|  32.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  32.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  32.1k|              }
  748|  32.1k|              else {
  749|  32.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.1k|              }
  751|  32.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  32.1k|    {
  684|  32.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  32.1k|            return static_cast<T*>(s.m_cp);
  686|  32.1k|        }
  687|  32.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  32.1k|            return static_cast<T*>(s.m_p);
  689|  32.1k|        }
  690|  32.1k|        else {
  691|  32.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  32.1k|        }
  693|  32.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  32.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  32.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  32.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  32.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  32.1k|        {
  662|  32.1k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  33.7k|    {
 5871|  33.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  33.7k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  33.7k|            auto rd = make_reader<T, char_type>();
 5876|  33.7k|            return impl(rd, range, value);
 5877|  33.7k|        }
 5878|  33.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  33.7k|            auto rd = make_reader<T, char_type>();
 5880|  33.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 33.7k, False: 0]
  ------------------
 5881|  33.7k|                return impl(rd, range, value);
 5882|  33.7k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  33.7k|        else {
 5889|  33.7k|            SCN_EXPECT(false);
 5890|  33.7k|            SCN_UNREACHABLE;
 5891|  33.7k|        }
 5892|  33.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  33.7k|    {
 5863|  33.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  33.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  33.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  33.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 261, False: 33.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    261|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    261|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    261|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    261|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    261|    }                                                  \
  |  |  |  | 3671|  33.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  33.5k|                        .transform_error(make_eof_scan_error));
 5865|  33.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  33.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  33.5k|    {
 4152|  33.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  33.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  33.5k|        float_reader<CharT> rd{};
 4155|  33.5k|        return read_impl<Range>(
 4156|  33.5k|            range, rd,
 4157|  33.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  33.5k|                return r.read_source(SCN_FWD(args)...);
 4159|  33.5k|            },
 4160|  33.5k|            value);
 4161|  33.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  33.5k|    {
  754|  33.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  33.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  33.5k|              cvref<T> obj = *get<T>(fn);
  745|  33.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  33.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  33.5k|              }
  748|  33.5k|              else {
  749|  33.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  33.5k|              }
  751|  33.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  33.5k|    {
  684|  33.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  33.5k|            return static_cast<T*>(s.m_cp);
  686|  33.5k|        }
  687|  33.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  33.5k|            return static_cast<T*>(s.m_p);
  689|  33.5k|        }
  690|  33.5k|        else {
  691|  33.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  33.5k|        }
  693|  33.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  33.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  33.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  33.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  33.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  33.5k|        {
  662|  33.5k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  34.5k|    {
 5871|  34.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  34.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  34.5k|            auto rd = make_reader<T, char_type>();
 5876|  34.5k|            return impl(rd, range, value);
 5877|  34.5k|        }
 5878|  34.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  34.5k|            auto rd = make_reader<T, char_type>();
 5880|  34.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 34.5k, False: 0]
  ------------------
 5881|  34.5k|                return impl(rd, range, value);
 5882|  34.5k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  34.5k|        else {
 5889|  34.5k|            SCN_EXPECT(false);
 5890|  34.5k|            SCN_UNREACHABLE;
 5891|  34.5k|        }
 5892|  34.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  34.5k|    {
 5863|  34.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  34.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  34.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  34.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  34.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 279, False: 34.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    279|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    279|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    279|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    279|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    279|    }                                                  \
  |  |  |  | 3671|  34.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  34.2k|                        .transform_error(make_eof_scan_error));
 5865|  34.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  34.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  34.2k|    {
 4152|  34.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  34.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  34.2k|        float_reader<CharT> rd{};
 4155|  34.2k|        return read_impl<Range>(
 4156|  34.2k|            range, rd,
 4157|  34.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  34.2k|                return r.read_source(SCN_FWD(args)...);
 4159|  34.2k|            },
 4160|  34.2k|            value);
 4161|  34.2k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  34.2k|    {
  754|  34.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  34.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.2k|              cvref<T> obj = *get<T>(fn);
  745|  34.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  34.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  34.2k|              }
  748|  34.2k|              else {
  749|  34.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.2k|              }
  751|  34.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  34.2k|    {
  684|  34.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  34.2k|            return static_cast<T*>(s.m_cp);
  686|  34.2k|        }
  687|  34.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  34.2k|            return static_cast<T*>(s.m_p);
  689|  34.2k|        }
  690|  34.2k|        else {
  691|  34.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  34.2k|        }
  693|  34.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  34.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  34.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  34.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  34.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  34.2k|        {
  662|  34.2k|        }

LLVMFuzzerTestOneInput:
   54|  2.09k|{
   55|  2.09k|    scn::fuzz::run(data, size);
   56|  2.09k|    return 0;
   57|  2.09k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  2.09k|{
   33|  2.09k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.09k]
  |  Branch (33:35): [True: 0, False: 2.09k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.09k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  2.09k|    const auto& f =
   40|  2.09k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.09k|    do_basic_run(sv, f);
   42|       |
   43|  2.09k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  2.09k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  2.09k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.09k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.09k, False: 0]
  ------------------
   47|  2.09k|        do_basic_run(wsv_transcode, wf);
   48|  2.09k|    }
   49|  2.09k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.09k|{
   25|  2.09k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.09k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.09k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.09k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.09k|{
   25|  2.09k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.09k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.09k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.09k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.18k|{
   25|  4.18k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.18k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.18k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.18k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.18k|{
   25|  4.18k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.18k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.18k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.18k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  2.09k|{
   52|  2.09k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  2.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.09k|    string_buffer.resize(size);
   56|  2.09k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  2.09k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  2.09k|    const auto wsv_reinterpret_size =
   61|  2.09k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 62, False: 2.02k]
  ------------------
   62|  2.09k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  2.09k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  2.09k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  2.09k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  2.09k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  2.09k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  2.09k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.09k|{
  122|  2.09k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.09k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.09k|    buf.resize(sizeof...(Args));
  125|  2.09k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.09k|    return buf;
  127|  2.09k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  2.09k|{
  108|  2.09k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  2.09k|        return format_string_view_buffer;
  110|  2.09k|    }
  111|  2.09k|    else {
  112|  2.09k|        return wformat_string_view_buffer;
  113|  2.09k|    }
  114|  2.09k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.09k|{
  185|  2.09k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.09k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.09k|                                   format_strings);
  188|  2.09k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.09k|{
  133|       |    // Regular scan
  134|  12.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.5k, False: 2.09k]
  ------------------
  135|  12.5k|        auto it = scn::ranges::begin(source);
  136|   154k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   154k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   154k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   154k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   154k|            auto result = scn::scan<T>(
  139|   154k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   154k|                scn::runtime_format(f));
  141|   154k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.5k, False: 141k]
  ------------------
  142|  12.5k|                break;
  143|  12.5k|            }
  144|   141k|            it = result->begin();
  145|   141k|        }
  146|  12.5k|    }
  147|       |
  148|       |    // scan localized
  149|  12.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.5k, False: 2.09k]
  ------------------
  150|  12.5k|        auto it = scn::ranges::begin(source);
  151|   154k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   154k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   154k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   154k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   154k|            auto result = scn::scan<T>(
  154|   154k|                global_locale,
  155|   154k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   154k|                scn::runtime_format(f));
  157|   154k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.5k, False: 141k]
  ------------------
  158|  12.5k|                break;
  159|  12.5k|            }
  160|   141k|            it = result->begin();
  161|   141k|        }
  162|  12.5k|    }
  163|       |
  164|       |    // scan_value
  165|  2.09k|    {
  166|  2.09k|        auto it = scn::ranges::begin(source);
  167|  33.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  33.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  33.3k|            auto result = scn::scan_value<T>(
  170|  33.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  33.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.09k, False: 31.2k]
  ------------------
  172|  2.09k|                break;
  173|  2.09k|            }
  174|  31.2k|            it = result->begin();
  175|  31.2k|        }
  176|  2.09k|    }
  177|  2.09k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.09k|{
  133|       |    // Regular scan
  134|  12.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.5k, False: 2.09k]
  ------------------
  135|  12.5k|        auto it = scn::ranges::begin(source);
  136|   160k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   160k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   160k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   160k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   160k|            auto result = scn::scan<T>(
  139|   160k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   160k|                scn::runtime_format(f));
  141|   160k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.5k, False: 148k]
  ------------------
  142|  12.5k|                break;
  143|  12.5k|            }
  144|   148k|            it = result->begin();
  145|   148k|        }
  146|  12.5k|    }
  147|       |
  148|       |    // scan localized
  149|  12.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.5k, False: 2.09k]
  ------------------
  150|  12.5k|        auto it = scn::ranges::begin(source);
  151|   160k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   160k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   160k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   160k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   160k|            auto result = scn::scan<T>(
  154|   160k|                global_locale,
  155|   160k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   160k|                scn::runtime_format(f));
  157|   160k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.5k, False: 148k]
  ------------------
  158|  12.5k|                break;
  159|  12.5k|            }
  160|   148k|            it = result->begin();
  161|   148k|        }
  162|  12.5k|    }
  163|       |
  164|       |    // scan_value
  165|  2.09k|    {
  166|  2.09k|        auto it = scn::ranges::begin(source);
  167|  35.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  35.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  35.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  35.2k|            auto result = scn::scan_value<T>(
  170|  35.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  35.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.09k, False: 33.1k]
  ------------------
  172|  2.09k|                break;
  173|  2.09k|            }
  174|  33.1k|            it = result->begin();
  175|  33.1k|        }
  176|  2.09k|    }
  177|  2.09k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.09k|{
  133|       |    // Regular scan
  134|  12.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.5k, False: 2.09k]
  ------------------
  135|  12.5k|        auto it = scn::ranges::begin(source);
  136|   162k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   162k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   162k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   162k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   162k|            auto result = scn::scan<T>(
  139|   162k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   162k|                scn::runtime_format(f));
  141|   162k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.5k, False: 150k]
  ------------------
  142|  12.5k|                break;
  143|  12.5k|            }
  144|   150k|            it = result->begin();
  145|   150k|        }
  146|  12.5k|    }
  147|       |
  148|       |    // scan localized
  149|  12.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.5k, False: 2.09k]
  ------------------
  150|  12.5k|        auto it = scn::ranges::begin(source);
  151|   162k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   162k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   162k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   162k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   162k|            auto result = scn::scan<T>(
  154|   162k|                global_locale,
  155|   162k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   162k|                scn::runtime_format(f));
  157|   162k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.5k, False: 150k]
  ------------------
  158|  12.5k|                break;
  159|  12.5k|            }
  160|   150k|            it = result->begin();
  161|   150k|        }
  162|  12.5k|    }
  163|       |
  164|       |    // scan_value
  165|  2.09k|    {
  166|  2.09k|        auto it = scn::ranges::begin(source);
  167|  35.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  35.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  35.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  35.8k|            auto result = scn::scan_value<T>(
  170|  35.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  35.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.09k, False: 33.7k]
  ------------------
  172|  2.09k|                break;
  173|  2.09k|            }
  174|  33.7k|            it = result->begin();
  175|  33.7k|        }
  176|  2.09k|    }
  177|  2.09k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.09k|{
  133|       |    // Regular scan
  134|  12.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.5k, False: 2.09k]
  ------------------
  135|  12.5k|        auto it = scn::ranges::begin(source);
  136|   175k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   175k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   175k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   175k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   175k|            auto result = scn::scan<T>(
  139|   175k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   175k|                scn::runtime_format(f));
  141|   175k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.5k, False: 163k]
  ------------------
  142|  12.5k|                break;
  143|  12.5k|            }
  144|   163k|            it = result->begin();
  145|   163k|        }
  146|  12.5k|    }
  147|       |
  148|       |    // scan localized
  149|  12.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.5k, False: 2.09k]
  ------------------
  150|  12.5k|        auto it = scn::ranges::begin(source);
  151|   175k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   175k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   175k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   175k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   175k|            auto result = scn::scan<T>(
  154|   175k|                global_locale,
  155|   175k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   175k|                scn::runtime_format(f));
  157|   175k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.5k, False: 163k]
  ------------------
  158|  12.5k|                break;
  159|  12.5k|            }
  160|   163k|            it = result->begin();
  161|   163k|        }
  162|  12.5k|    }
  163|       |
  164|       |    // scan_value
  165|  2.09k|    {
  166|  2.09k|        auto it = scn::ranges::begin(source);
  167|  35.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  35.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  35.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  35.8k|            auto result = scn::scan_value<T>(
  170|  35.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  35.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.09k, False: 33.7k]
  ------------------
  172|  2.09k|                break;
  173|  2.09k|            }
  174|  33.7k|            it = result->begin();
  175|  33.7k|        }
  176|  2.09k|    }
  177|  2.09k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.09k|{
  133|       |    // Regular scan
  134|  12.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.5k, False: 2.09k]
  ------------------
  135|  12.5k|        auto it = scn::ranges::begin(source);
  136|   184k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   184k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   184k|            auto result = scn::scan<T>(
  139|   184k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   184k|                scn::runtime_format(f));
  141|   184k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.5k, False: 171k]
  ------------------
  142|  12.5k|                break;
  143|  12.5k|            }
  144|   171k|            it = result->begin();
  145|   171k|        }
  146|  12.5k|    }
  147|       |
  148|       |    // scan localized
  149|  12.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.5k, False: 2.09k]
  ------------------
  150|  12.5k|        auto it = scn::ranges::begin(source);
  151|   184k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   184k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   184k|            auto result = scn::scan<T>(
  154|   184k|                global_locale,
  155|   184k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   184k|                scn::runtime_format(f));
  157|   184k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.5k, False: 171k]
  ------------------
  158|  12.5k|                break;
  159|  12.5k|            }
  160|   171k|            it = result->begin();
  161|   171k|        }
  162|  12.5k|    }
  163|       |
  164|       |    // scan_value
  165|  2.09k|    {
  166|  2.09k|        auto it = scn::ranges::begin(source);
  167|  37.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  37.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  37.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  37.7k|            auto result = scn::scan_value<T>(
  170|  37.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  37.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.09k, False: 35.6k]
  ------------------
  172|  2.09k|                break;
  173|  2.09k|            }
  174|  35.6k|            it = result->begin();
  175|  35.6k|        }
  176|  2.09k|    }
  177|  2.09k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.09k|{
  133|       |    // Regular scan
  134|  12.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.5k, False: 2.09k]
  ------------------
  135|  12.5k|        auto it = scn::ranges::begin(source);
  136|   186k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   186k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   186k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   186k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   186k|            auto result = scn::scan<T>(
  139|   186k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   186k|                scn::runtime_format(f));
  141|   186k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.5k, False: 173k]
  ------------------
  142|  12.5k|                break;
  143|  12.5k|            }
  144|   173k|            it = result->begin();
  145|   173k|        }
  146|  12.5k|    }
  147|       |
  148|       |    // scan localized
  149|  12.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.5k, False: 2.09k]
  ------------------
  150|  12.5k|        auto it = scn::ranges::begin(source);
  151|   186k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   186k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   186k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   186k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   186k|            auto result = scn::scan<T>(
  154|   186k|                global_locale,
  155|   186k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   186k|                scn::runtime_format(f));
  157|   186k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.5k, False: 173k]
  ------------------
  158|  12.5k|                break;
  159|  12.5k|            }
  160|   173k|            it = result->begin();
  161|   173k|        }
  162|  12.5k|    }
  163|       |
  164|       |    // scan_value
  165|  2.09k|    {
  166|  2.09k|        auto it = scn::ranges::begin(source);
  167|  38.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  38.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  38.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  38.1k|            auto result = scn::scan_value<T>(
  170|  38.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  38.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.09k, False: 36.0k]
  ------------------
  172|  2.09k|                break;
  173|  2.09k|            }
  174|  36.0k|            it = result->begin();
  175|  36.0k|        }
  176|  2.09k|    }
  177|  2.09k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  2.09k|{
   90|  2.09k|    using char_type = ranges::range_value_t<Source>;
   91|  2.09k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.09k|    deque.clear();
   93|  2.09k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.09k|              std::back_inserter(deque));
   95|  2.09k|    return deque;
   96|  2.09k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  2.09k|{
   79|  2.09k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  2.09k|        return noncontiguous_buffer;
   81|  2.09k|    }
   82|  2.09k|    else {
   83|  2.09k|        return wnoncontiguous_buffer;
   84|  2.09k|    }
   85|  2.09k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.09k|{
  122|  2.09k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.09k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.09k|    buf.resize(sizeof...(Args));
  125|  2.09k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.09k|    return buf;
  127|  2.09k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  2.09k|{
  108|  2.09k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  2.09k|        return format_string_view_buffer;
  110|  2.09k|    }
  111|  2.09k|    else {
  112|  2.09k|        return wformat_string_view_buffer;
  113|  2.09k|    }
  114|  2.09k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  4.18k|{
  185|  4.18k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  4.18k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  4.18k|                                   format_strings);
  188|  4.18k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.18k|{
  133|       |    // Regular scan
  134|  25.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.0k, False: 4.18k]
  ------------------
  135|  25.0k|        auto it = scn::ranges::begin(source);
  136|  59.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  59.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  59.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  59.1k|            auto result = scn::scan<T>(
  139|  59.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  59.1k|                scn::runtime_format(f));
  141|  59.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.0k, False: 34.1k]
  ------------------
  142|  25.0k|                break;
  143|  25.0k|            }
  144|  34.1k|            it = result->begin();
  145|  34.1k|        }
  146|  25.0k|    }
  147|       |
  148|       |    // scan localized
  149|  25.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.0k, False: 4.18k]
  ------------------
  150|  25.0k|        auto it = scn::ranges::begin(source);
  151|  59.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  59.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  59.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  59.1k|            auto result = scn::scan<T>(
  154|  59.1k|                global_locale,
  155|  59.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  59.1k|                scn::runtime_format(f));
  157|  59.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.0k, False: 34.1k]
  ------------------
  158|  25.0k|                break;
  159|  25.0k|            }
  160|  34.1k|            it = result->begin();
  161|  34.1k|        }
  162|  25.0k|    }
  163|       |
  164|       |    // scan_value
  165|  4.18k|    {
  166|  4.18k|        auto it = scn::ranges::begin(source);
  167|  10.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  10.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  10.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  10.8k|            auto result = scn::scan_value<T>(
  170|  10.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  10.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.18k, False: 6.63k]
  ------------------
  172|  4.18k|                break;
  173|  4.18k|            }
  174|  6.63k|            it = result->begin();
  175|  6.63k|        }
  176|  4.18k|    }
  177|  4.18k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.18k|{
  133|       |    // Regular scan
  134|  25.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.0k, False: 4.18k]
  ------------------
  135|  25.0k|        auto it = scn::ranges::begin(source);
  136|  60.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  60.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  60.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  60.5k|            auto result = scn::scan<T>(
  139|  60.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  60.5k|                scn::runtime_format(f));
  141|  60.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.0k, False: 35.4k]
  ------------------
  142|  25.0k|                break;
  143|  25.0k|            }
  144|  35.4k|            it = result->begin();
  145|  35.4k|        }
  146|  25.0k|    }
  147|       |
  148|       |    // scan localized
  149|  25.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.0k, False: 4.18k]
  ------------------
  150|  25.0k|        auto it = scn::ranges::begin(source);
  151|  60.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  60.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  60.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  60.5k|            auto result = scn::scan<T>(
  154|  60.5k|                global_locale,
  155|  60.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  60.5k|                scn::runtime_format(f));
  157|  60.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.0k, False: 35.4k]
  ------------------
  158|  25.0k|                break;
  159|  25.0k|            }
  160|  35.4k|            it = result->begin();
  161|  35.4k|        }
  162|  25.0k|    }
  163|       |
  164|       |    // scan_value
  165|  4.18k|    {
  166|  4.18k|        auto it = scn::ranges::begin(source);
  167|  11.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  11.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  11.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  11.2k|            auto result = scn::scan_value<T>(
  170|  11.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  11.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.18k, False: 7.09k]
  ------------------
  172|  4.18k|                break;
  173|  4.18k|            }
  174|  7.09k|            it = result->begin();
  175|  7.09k|        }
  176|  4.18k|    }
  177|  4.18k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.18k|{
  133|       |    // Regular scan
  134|  25.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.0k, False: 4.18k]
  ------------------
  135|  25.0k|        auto it = scn::ranges::begin(source);
  136|  61.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  61.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  61.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  61.3k|            auto result = scn::scan<T>(
  139|  61.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  61.3k|                scn::runtime_format(f));
  141|  61.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.0k, False: 36.2k]
  ------------------
  142|  25.0k|                break;
  143|  25.0k|            }
  144|  36.2k|            it = result->begin();
  145|  36.2k|        }
  146|  25.0k|    }
  147|       |
  148|       |    // scan localized
  149|  25.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.0k, False: 4.18k]
  ------------------
  150|  25.0k|        auto it = scn::ranges::begin(source);
  151|  61.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  61.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  61.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  61.3k|            auto result = scn::scan<T>(
  154|  61.3k|                global_locale,
  155|  61.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  61.3k|                scn::runtime_format(f));
  157|  61.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.0k, False: 36.2k]
  ------------------
  158|  25.0k|                break;
  159|  25.0k|            }
  160|  36.2k|            it = result->begin();
  161|  36.2k|        }
  162|  25.0k|    }
  163|       |
  164|       |    // scan_value
  165|  4.18k|    {
  166|  4.18k|        auto it = scn::ranges::begin(source);
  167|  11.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  11.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  11.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  11.5k|            auto result = scn::scan_value<T>(
  170|  11.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  11.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.18k, False: 7.33k]
  ------------------
  172|  4.18k|                break;
  173|  4.18k|            }
  174|  7.33k|            it = result->begin();
  175|  7.33k|        }
  176|  4.18k|    }
  177|  4.18k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.18k|{
  133|       |    // Regular scan
  134|  25.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.0k, False: 4.18k]
  ------------------
  135|  25.0k|        auto it = scn::ranges::begin(source);
  136|  59.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  59.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  59.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  59.1k|            auto result = scn::scan<T>(
  139|  59.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  59.1k|                scn::runtime_format(f));
  141|  59.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.0k, False: 34.0k]
  ------------------
  142|  25.0k|                break;
  143|  25.0k|            }
  144|  34.0k|            it = result->begin();
  145|  34.0k|        }
  146|  25.0k|    }
  147|       |
  148|       |    // scan localized
  149|  25.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.0k, False: 4.18k]
  ------------------
  150|  25.0k|        auto it = scn::ranges::begin(source);
  151|  59.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  59.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  59.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  59.1k|            auto result = scn::scan<T>(
  154|  59.1k|                global_locale,
  155|  59.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  59.1k|                scn::runtime_format(f));
  157|  59.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.0k, False: 34.0k]
  ------------------
  158|  25.0k|                break;
  159|  25.0k|            }
  160|  34.0k|            it = result->begin();
  161|  34.0k|        }
  162|  25.0k|    }
  163|       |
  164|       |    // scan_value
  165|  4.18k|    {
  166|  4.18k|        auto it = scn::ranges::begin(source);
  167|  10.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  10.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  10.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  10.8k|            auto result = scn::scan_value<T>(
  170|  10.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  10.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.18k, False: 6.62k]
  ------------------
  172|  4.18k|                break;
  173|  4.18k|            }
  174|  6.62k|            it = result->begin();
  175|  6.62k|        }
  176|  4.18k|    }
  177|  4.18k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.18k|{
  133|       |    // Regular scan
  134|  25.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.0k, False: 4.18k]
  ------------------
  135|  25.0k|        auto it = scn::ranges::begin(source);
  136|  60.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  60.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  60.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  60.5k|            auto result = scn::scan<T>(
  139|  60.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  60.5k|                scn::runtime_format(f));
  141|  60.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.0k, False: 35.4k]
  ------------------
  142|  25.0k|                break;
  143|  25.0k|            }
  144|  35.4k|            it = result->begin();
  145|  35.4k|        }
  146|  25.0k|    }
  147|       |
  148|       |    // scan localized
  149|  25.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.0k, False: 4.18k]
  ------------------
  150|  25.0k|        auto it = scn::ranges::begin(source);
  151|  60.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  60.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  60.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  60.5k|            auto result = scn::scan<T>(
  154|  60.5k|                global_locale,
  155|  60.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  60.5k|                scn::runtime_format(f));
  157|  60.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.0k, False: 35.4k]
  ------------------
  158|  25.0k|                break;
  159|  25.0k|            }
  160|  35.4k|            it = result->begin();
  161|  35.4k|        }
  162|  25.0k|    }
  163|       |
  164|       |    // scan_value
  165|  4.18k|    {
  166|  4.18k|        auto it = scn::ranges::begin(source);
  167|  11.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  11.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  11.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  11.2k|            auto result = scn::scan_value<T>(
  170|  11.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  11.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.18k, False: 7.07k]
  ------------------
  172|  4.18k|                break;
  173|  4.18k|            }
  174|  7.07k|            it = result->begin();
  175|  7.07k|        }
  176|  4.18k|    }
  177|  4.18k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.18k|{
  133|       |    // Regular scan
  134|  25.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 25.0k, False: 4.18k]
  ------------------
  135|  25.0k|        auto it = scn::ranges::begin(source);
  136|  61.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  61.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  61.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  61.3k|            auto result = scn::scan<T>(
  139|  61.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  61.3k|                scn::runtime_format(f));
  141|  61.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 25.0k, False: 36.2k]
  ------------------
  142|  25.0k|                break;
  143|  25.0k|            }
  144|  36.2k|            it = result->begin();
  145|  36.2k|        }
  146|  25.0k|    }
  147|       |
  148|       |    // scan localized
  149|  25.0k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 25.0k, False: 4.18k]
  ------------------
  150|  25.0k|        auto it = scn::ranges::begin(source);
  151|  61.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  61.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  61.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  61.3k|            auto result = scn::scan<T>(
  154|  61.3k|                global_locale,
  155|  61.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  61.3k|                scn::runtime_format(f));
  157|  61.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 25.0k, False: 36.2k]
  ------------------
  158|  25.0k|                break;
  159|  25.0k|            }
  160|  36.2k|            it = result->begin();
  161|  36.2k|        }
  162|  25.0k|    }
  163|       |
  164|       |    // scan_value
  165|  4.18k|    {
  166|  4.18k|        auto it = scn::ranges::begin(source);
  167|  11.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  11.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  11.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  11.5k|            auto result = scn::scan_value<T>(
  170|  11.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  11.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.18k, False: 7.32k]
  ------------------
  172|  4.18k|                break;
  173|  4.18k|            }
  174|  7.32k|            it = result->begin();
  175|  7.32k|        }
  176|  4.18k|    }
  177|  4.18k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  4.18k|{
   90|  4.18k|    using char_type = ranges::range_value_t<Source>;
   91|  4.18k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  4.18k|    deque.clear();
   93|  4.18k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  4.18k|              std::back_inserter(deque));
   95|  4.18k|    return deque;
   96|  4.18k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  4.18k|{
   79|  4.18k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  4.18k|        return noncontiguous_buffer;
   81|  4.18k|    }
   82|  4.18k|    else {
   83|  4.18k|        return wnoncontiguous_buffer;
   84|  4.18k|    }
   85|  4.18k|}

