_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  2.06M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  2.06M|  chars_format const fmt = options.format;
  277|  2.06M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  2.06M|  parsed_number_string_t<UC> answer;
  280|  2.06M|  answer.valid = false;
  281|  2.06M|  answer.too_many_digits = false;
  282|  2.06M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  2.06M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 2.06M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  2.06M|  UC const * const start_digits = p;
  303|       |
  304|  2.06M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  12.2M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 11.2M, False: 990k]
  |  Branch (306:25): [True: 10.1M, False: 1.07M]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  10.1M|    i = 10 * i +
  310|  10.1M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  10.1M|    ++p;
  312|  10.1M|  }
  313|  2.06M|  UC const * const end_of_integer_part = p;
  314|  2.06M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  2.06M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  2.06M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.06M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 2.06M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  2.06M|  int64_t exponent = 0;
  324|  2.06M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 1.07M, False: 990k]
  |  Branch (324:49): [True: 347k, False: 726k]
  ------------------
  325|  2.06M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 347k, False: 1.71M]
  ------------------
  326|   347k|    ++p;
  327|   347k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   347k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  1.39M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 1.18M, False: 203k]
  |  Branch (332:27): [True: 1.04M, False: 144k]
  ------------------
  333|  1.04M|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  1.04M|      ++p;
  335|  1.04M|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  1.04M|    }
  337|   347k|    exponent = before - p;
  338|   347k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   347k|    digit_count -= exponent;
  340|   347k|  }
  341|  2.06M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.06M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 2.06M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  2.06M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 2.06M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  2.06M|  int64_t exp_number = 0;            // explicit exponential part
  351|  2.06M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 1.81M, False: 248k]
  ------------------
  352|  2.06M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 870k, False: 944k]
  ------------------
  353|  2.06M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 231k, False: 639k]
  |  Branch (353:29): [True: 79.6k, False: 559k]
  ------------------
  354|  2.06M|       ||
  355|  2.06M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  1.75M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 1.75M]
  ------------------
  356|  1.75M|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  1.75M|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   310k|    UC const * location_of_e = p;
  359|   310k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 231k, False: 79.6k]
  |  Branch (359:28): [True: 79.6k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   310k|      ++p;
  361|   310k|    }
  362|   310k|    bool neg_exp = false;
  363|   310k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 310k, False: 205]
  |  Branch (363:24): [True: 20.6k, False: 290k]
  ------------------
  364|  20.6k|      neg_exp = true;
  365|  20.6k|      ++p;
  366|   290k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 290k, False: 205]
  |  Branch (366:31): [True: 57.8k, False: 232k]
  ------------------
  367|  57.8k|      ++p;
  368|  57.8k|    }
  369|   310k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 245, False: 310k]
  |  Branch (369:24): [True: 865, False: 309k]
  ------------------
  370|  1.11k|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 1.11k]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|  1.11k|      p = location_of_e;
  376|   309k|    } else {
  377|   991k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 783k, False: 207k]
  |  Branch (377:29): [True: 681k, False: 101k]
  ------------------
  378|   681k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   681k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 642k, False: 39.1k]
  ------------------
  380|   642k|          exp_number = 10 * exp_number + digit;
  381|   642k|        }
  382|   681k|        ++p;
  383|   681k|      }
  384|   309k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 20.5k, False: 289k]
  ------------------
  385|   309k|      exponent += exp_number;
  386|   309k|    }
  387|  1.75M|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  1.75M|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 1.50M, False: 248k]
  |  Branch (389:44): [True: 0, False: 1.50M]
  ------------------
  390|  1.75M|  }
  391|  2.06M|  answer.lastmatch = p;
  392|  2.06M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  2.06M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 323k, False: 1.74M]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   323k|    UC const * start = start_digits;
  405|  3.10M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 3.09M, False: 14.4k]
  |  Branch (405:32): [True: 2.71M, False: 372k]
  |  Branch (405:53): [True: 63.7k, False: 308k]
  ------------------
  406|  2.78M|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 2.71M, False: 63.7k]
  ------------------
  407|  2.78M|      start++;
  408|  2.78M|    }
  409|       |
  410|   323k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 272k, False: 50.7k]
  ------------------
  411|   272k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   272k|      i = 0;
  416|   272k|      p = answer.integer.ptr;
  417|   272k|      UC const* int_end = p + answer.integer.len();
  418|   272k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  3.75M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 3.66M, False: 91.2k]
  |  Branch (419:54): [True: 3.47M, False: 181k]
  ------------------
  420|  3.47M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  3.47M|        ++p;
  422|  3.47M|      }
  423|   272k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 91.2k, False: 181k]
  ------------------
  424|  91.2k|        exponent = end_of_integer_part - p + exp_number;
  425|  91.2k|      }
  426|   181k|      else { // We have a value with a fractional component.
  427|   181k|        p = answer.fraction.ptr;
  428|   181k|        UC const* frac_end = p + answer.fraction.len();
  429|  3.53M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 3.35M, False: 181k]
  |  Branch (429:56): [True: 3.35M, False: 0]
  ------------------
  430|  3.35M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  3.35M|          ++p;
  432|  3.35M|        }
  433|   181k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   181k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   272k|    }
  437|   323k|  }
  438|  2.06M|  answer.exponent = exponent;
  439|  2.06M|  answer.mantissa = i;
  440|  2.06M|  return answer;
  441|  2.06M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  13.5M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  13.5M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 353k, False: 13.1M]
  |  Branch (36:27): [True: 967k, False: 12.2M]
  ------------------
   37|  13.5M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   347k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|  1.43M|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 1.20M, False: 222k]
  |  Branch (249:43): [True: 1.08M, False: 124k]
  ------------------
  250|  1.08M|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|  1.08M|    p += 8;
  252|  1.08M|  }
  253|   347k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|  1.20M|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|  1.20M|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|  1.20M|     0x8080808080808080));
  172|  1.20M|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  2.71M|uint64_t read8_to_u64(const UC *chars) {
   54|  2.71M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  2.71M|  uint64_t val;
   63|  2.71M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  2.71M|  return val;
   69|  2.71M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|  1.50M|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|  1.50M|  const uint64_t mask = 0x000000FF000000FF;
  148|  1.50M|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|  1.50M|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|  1.50M|  val -= 0x3030303030303030;
  151|  1.50M|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|  1.50M|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|  1.50M|  return uint32_t(val);
  154|  1.50M|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   419k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   419k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   419k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   419k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   419k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  54.3k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  54.3k|  chars_format const fmt = options.format;
  277|  54.3k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  54.3k|  parsed_number_string_t<UC> answer;
  280|  54.3k|  answer.valid = false;
  281|  54.3k|  answer.too_many_digits = false;
  282|  54.3k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  54.3k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 54.3k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  54.3k|  UC const * const start_digits = p;
  303|       |
  304|  54.3k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   111k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 72.8k, False: 38.1k]
  |  Branch (306:25): [True: 56.6k, False: 16.1k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  56.6k|    i = 10 * i +
  310|  56.6k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  56.6k|    ++p;
  312|  56.6k|  }
  313|  54.3k|  UC const * const end_of_integer_part = p;
  314|  54.3k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  54.3k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  54.3k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  54.3k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 54.3k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  54.3k|  int64_t exponent = 0;
  324|  54.3k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 16.1k, False: 38.1k]
  |  Branch (324:49): [True: 0, False: 16.1k]
  ------------------
  325|  54.3k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 0, False: 54.3k]
  ------------------
  326|      0|    ++p;
  327|      0|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|      0|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|      0|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 0, False: 0]
  |  Branch (332:27): [True: 0, False: 0]
  ------------------
  333|      0|      uint8_t digit = uint8_t(*p - UC('0'));
  334|      0|      ++p;
  335|      0|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|      0|    }
  337|      0|    exponent = before - p;
  338|      0|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|      0|    digit_count -= exponent;
  340|      0|  }
  341|  54.3k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  54.3k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 54.3k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  54.3k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 54.3k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  54.3k|  int64_t exp_number = 0;            // explicit exponential part
  351|  54.3k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 42.3k, False: 11.9k]
  ------------------
  352|  54.3k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 16.1k, False: 26.1k]
  ------------------
  353|  54.3k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 56, False: 16.1k]
  |  Branch (353:29): [True: 2.15k, False: 13.9k]
  ------------------
  354|  54.3k|       ||
  355|  54.3k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  52.1k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 52.1k]
  ------------------
  356|  52.1k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  52.1k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  2.21k|    UC const * location_of_e = p;
  359|  2.21k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 56, False: 2.15k]
  |  Branch (359:28): [True: 2.15k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  2.21k|      ++p;
  361|  2.21k|    }
  362|  2.21k|    bool neg_exp = false;
  363|  2.21k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 2.20k, False: 10]
  |  Branch (363:24): [True: 200, False: 2.00k]
  ------------------
  364|    200|      neg_exp = true;
  365|    200|      ++p;
  366|  2.01k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 2.00k, False: 10]
  |  Branch (366:31): [True: 0, False: 2.00k]
  ------------------
  367|      0|      ++p;
  368|      0|    }
  369|  2.21k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 10, False: 2.20k]
  |  Branch (369:24): [True: 370, False: 1.83k]
  ------------------
  370|    380|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 380]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    380|      p = location_of_e;
  376|  1.83k|    } else {
  377|  5.69k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 4.34k, False: 1.35k]
  |  Branch (377:29): [True: 3.86k, False: 480]
  ------------------
  378|  3.86k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  3.86k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 3.86k, False: 0]
  ------------------
  380|  3.86k|          exp_number = 10 * exp_number + digit;
  381|  3.86k|        }
  382|  3.86k|        ++p;
  383|  3.86k|      }
  384|  1.83k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 180, False: 1.65k]
  ------------------
  385|  1.83k|      exponent += exp_number;
  386|  1.83k|    }
  387|  52.1k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  52.1k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 40.1k, False: 11.9k]
  |  Branch (389:44): [True: 0, False: 40.1k]
  ------------------
  390|  52.1k|  }
  391|  54.3k|  answer.lastmatch = p;
  392|  54.3k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  54.3k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 0, False: 54.3k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|      0|    UC const * start = start_digits;
  405|      0|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 0, False: 0]
  |  Branch (405:32): [True: 0, False: 0]
  |  Branch (405:53): [True: 0, False: 0]
  ------------------
  406|      0|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 0, False: 0]
  ------------------
  407|      0|      start++;
  408|      0|    }
  409|       |
  410|      0|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 0, False: 0]
  ------------------
  411|      0|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|      0|      i = 0;
  416|      0|      p = answer.integer.ptr;
  417|      0|      UC const* int_end = p + answer.integer.len();
  418|      0|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|      0|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 0, False: 0]
  |  Branch (419:54): [True: 0, False: 0]
  ------------------
  420|      0|        i = i * 10 + uint64_t(*p - UC('0'));
  421|      0|        ++p;
  422|      0|      }
  423|      0|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 0, False: 0]
  ------------------
  424|      0|        exponent = end_of_integer_part - p + exp_number;
  425|      0|      }
  426|      0|      else { // We have a value with a fractional component.
  427|      0|        p = answer.fraction.ptr;
  428|      0|        UC const* frac_end = p + answer.fraction.len();
  429|      0|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 0, False: 0]
  |  Branch (429:56): [True: 0, False: 0]
  ------------------
  430|      0|          i = i * 10 + uint64_t(*p - UC('0'));
  431|      0|          ++p;
  432|      0|        }
  433|      0|        exponent = answer.fraction.ptr - p + exp_number;
  434|      0|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|      0|    }
  437|      0|  }
  438|  54.3k|  answer.exponent = exponent;
  439|  54.3k|  answer.mantissa = i;
  440|  54.3k|  return answer;
  441|  54.3k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|  79.3k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  79.3k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 16.8k, False: 62.5k]
  |  Branch (36:27): [True: 210, False: 62.3k]
  ------------------
   37|  79.3k|}

_ZN10fast_float6bigintC2Ev:
  412|  90.1k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   199k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   323k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   323k|    return small_mul(vec, y);
  565|   323k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   497k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   497k|  limb carry = 0;
  284|  2.46M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 1.96M, False: 497k]
  ------------------
  285|  1.96M|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  1.96M|  }
  287|   497k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 324k, False: 172k]
  ------------------
  288|   324k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   324k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 324k]
  |  |  ------------------
  ------------------
  289|   324k|  }
  290|   497k|  return true;
  291|   497k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  4.32M|  constexpr size_t len() const noexcept {
   77|  4.32M|    return length;
   78|  4.32M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  1.96M|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  1.96M|#ifdef FASTFLOAT_64BIT_LIMB
  231|  1.96M|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  1.96M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  1.96M|  carry = limb(z >> limb_bits);
  235|  1.96M|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  1.96M|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  5.20M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  5.20M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  5.20M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  5.20M|    return data[index];
   60|  5.20M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   435k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   435k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 435k, False: 0]
  ------------------
   93|   435k|      push_unchecked(value);
   94|   435k|      return true;
   95|   435k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   435k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   533k|  constexpr size_t capacity() const noexcept {
   83|   533k|    return size;
   84|   533k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   510k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   510k|    data[length] = value;
   88|   510k|    length++;
   89|   510k|  }
_ZN10fast_float6bigint3addEm:
  567|   323k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   323k|    return small_add(vec, y);
  569|   323k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   323k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   323k|  return small_add_from(vec, y, 0);
  277|   323k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   323k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   323k|  size_t index = start;
  259|   323k|  limb carry = y;
  260|   323k|  bool overflow;
  261|   476k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 242k, False: 233k]
  |  Branch (261:24): [True: 152k, False: 90.1k]
  ------------------
  262|   152k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   152k|    carry = limb(overflow);
  264|   152k|    index += 1;
  265|   152k|  }
  266|   323k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 90.1k, False: 233k]
  ------------------
  267|  90.1k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  90.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 90.1k]
  |  |  ------------------
  ------------------
  268|  90.1k|  }
  269|   323k|  return true;
  270|   323k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   541k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   541k|  limb z;
  211|       |// gcc and clang
  212|   541k|#if defined(__has_builtin)
  213|   541k|  #if __has_builtin(__builtin_add_overflow)
  214|   541k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   541k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   541k|      return z;
  217|   541k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   541k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  14.9k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  14.9k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  14.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 14.9k]
  |  |  ------------------
  ------------------
  611|  14.9k|    return pow2(exp);
  612|  14.9k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  90.1k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  90.1k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  90.1k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  98.6k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 8.52k, False: 90.1k]
  ------------------
  582|  8.52k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  8.52k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.52k]
  |  |  ------------------
  ------------------
  583|  8.52k|      exp -= large_step;
  584|  8.52k|    }
  585|  90.1k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  90.1k|    uint32_t small_step = 27;
  587|  90.1k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|   150k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 59.9k, False: 90.1k]
  ------------------
  593|  59.9k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  59.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 59.9k]
  |  |  ------------------
  ------------------
  594|  59.9k|      exp -= small_step;
  595|  59.9k|    }
  596|  90.1k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 70.8k, False: 19.2k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  70.8k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  70.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 70.8k]
  |  |  ------------------
  ------------------
  601|  70.8k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  70.8k|      );
  603|  70.8k|    }
  604|       |
  605|  90.1k|    return true;
  606|  90.1k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  8.52k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  8.52k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 8.52k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  8.52k|  } else {
  368|  8.52k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  8.52k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.52k]
  |  |  ------------------
  ------------------
  369|  8.52k|  }
  370|  8.52k|  return true;
  371|  8.52k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  8.52k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  8.52k|  limb_span xs = limb_span(x.data, x.len());
  337|  8.52k|  stackvec<size> z(xs);
  338|  8.52k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  8.52k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 8.52k, False: 0]
  ------------------
  341|  8.52k|    limb y0 = y[0];
  342|  8.52k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  8.52k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.52k]
  |  |  ------------------
  ------------------
  343|  42.6k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 34.0k, False: 8.52k]
  ------------------
  344|  34.0k|      limb yi = y[index];
  345|  34.0k|      stackvec<size> zi;
  346|  34.0k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 34.0k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  34.0k|        zi.set_len(0);
  349|  34.0k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  34.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 34.0k]
  |  |  ------------------
  ------------------
  350|  34.0k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  34.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 34.0k]
  |  |  ------------------
  ------------------
  351|  34.0k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  34.0k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  34.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 34.0k]
  |  |  ------------------
  ------------------
  353|  34.0k|      }
  354|  34.0k|    }
  355|  8.52k|  }
  356|       |
  357|  8.52k|  x.normalize();
  358|  8.52k|  return true;
  359|  8.52k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  8.52k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  8.52k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  8.52k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  8.52k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|   132k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|   132k|    length = uint16_t(len);
   75|   132k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  42.6k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  42.6k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 42.6k, False: 0]
  ------------------
  108|  42.6k|      extend_unchecked(s);
  109|  42.6k|      return true;
  110|  42.6k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  42.6k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  42.6k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  42.6k|    limb* ptr = data + length;
  102|  42.6k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  42.6k|    set_len(len() + s.len());
  104|  42.6k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  34.0k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  34.0k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 34.0k]
  |  Branch (300:26): [True: 33.7k, False: 350]
  ------------------
  301|  33.7k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  33.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 33.7k]
  |  |  ------------------
  ------------------
  302|  33.7k|  }
  303|       |
  304|  34.0k|  bool carry = false;
  305|   316k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 282k, False: 34.0k]
  ------------------
  306|   282k|    limb xi = x[index + start];
  307|   282k|    limb yi = y[index];
  308|   282k|    bool c1 = false;
  309|   282k|    bool c2 = false;
  310|   282k|    xi = scalar_add(xi, yi, c1);
  311|   282k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 106k, False: 176k]
  ------------------
  312|   106k|      xi = scalar_add(xi, 1, c2);
  313|   106k|    }
  314|   282k|    x[index + start] = xi;
  315|   282k|    carry = c1 | c2;
  316|   282k|  }
  317|       |
  318|       |  // handle overflow
  319|  34.0k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 34.0k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  34.0k|  return true;
  323|  34.0k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  33.7k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  33.7k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 33.7k]
  ------------------
  132|      0|      return false;
  133|  33.7k|    } else {
  134|  33.7k|      resize_unchecked(new_len, value);
  135|  33.7k|      return true;
  136|  33.7k|    }
  137|  33.7k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  33.7k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  33.7k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 33.7k, False: 0]
  ------------------
  120|  33.7k|      size_t count = new_len - len();
  121|  33.7k|      limb* first = data + len();
  122|  33.7k|      limb* last = first + count;
  123|  33.7k|      ::std::fill(first, last, value);
  124|  33.7k|      set_len(new_len);
  125|  33.7k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  33.7k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  83.7k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  83.7k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 83.7k, False: 0]
  |  Branch (152:25): [True: 0, False: 83.7k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  83.7k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|   127k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|   127k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   127k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|   127k|    size_t rindex = length - index - 1;
   69|   127k|    return data[rindex];
   70|   127k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  89.9k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  89.9k|    return shl(exp);
  574|  89.9k|  }
_ZN10fast_float6bigint3shlEm:
  530|  89.9k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  89.9k|    size_t rem = n % limb_bits;
  532|  89.9k|    size_t div = n / limb_bits;
  533|  89.9k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 74.8k, False: 15.1k]
  ------------------
  534|  74.8k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  74.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 74.8k]
  |  |  ------------------
  ------------------
  535|  74.8k|    }
  536|  89.9k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 21.8k, False: 68.1k]
  ------------------
  537|  21.8k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  21.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 21.8k]
  |  |  ------------------
  ------------------
  538|  21.8k|    }
  539|  89.9k|    return true;
  540|  89.9k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  74.8k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  74.8k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  74.8k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  74.8k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  74.8k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  74.8k|    size_t shl = n;
  493|  74.8k|    size_t shr = limb_bits - shl;
  494|  74.8k|    limb prev = 0;
  495|   275k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 200k, False: 74.8k]
  ------------------
  496|   200k|      limb xi = vec[index];
  497|   200k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   200k|      prev = xi;
  499|   200k|    }
  500|       |
  501|  74.8k|    limb carry = prev >> shr;
  502|  74.8k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 20.5k, False: 54.2k]
  ------------------
  503|  20.5k|      return vec.try_push(carry);
  504|  20.5k|    }
  505|  54.2k|    return true;
  506|  74.8k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  21.8k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  21.8k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  21.8k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  21.8k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 21.8k]
  ------------------
  512|      0|      return false;
  513|  21.8k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 21.8k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  21.8k|      limb* dst = vec.data + n;
  516|  21.8k|      const limb* src = vec.data;
  517|  21.8k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  21.8k|      limb* first = vec.data;
  520|  21.8k|      limb* last = first + n;
  521|  21.8k|      ::std::fill(first, last, 0);
  522|  21.8k|      vec.set_len(n + vec.len());
  523|  21.8k|      return true;
  524|  21.8k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  21.8k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  36.7k|  constexpr bool is_empty() const noexcept {
   80|  36.7k|    return length == 0;
   81|  36.7k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  14.9k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  14.9k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  14.9k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 14.9k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  14.9k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 1.90k, False: 13.0k]
  ------------------
  435|  1.90k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  13.0k|    } else {
  437|  13.0k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  13.0k|      truncated |= vec.nonzero(2);
  439|  13.0k|      return result;
  440|  13.0k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  14.9k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  1.90k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  1.90k|  truncated = false;
  167|  1.90k|  int shl = leading_zeroes(r0);
  168|  1.90k|  return r0 << shl;
  169|  1.90k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  13.0k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  13.0k|  int shl = leading_zeroes(r0);
  174|  13.0k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 54, False: 12.9k]
  ------------------
  175|     54|    truncated = r1 != 0;
  176|     54|    return r0;
  177|  12.9k|  } else {
  178|  12.9k|    int shr = 64 - shl;
  179|  12.9k|    truncated = (r1 << shl) != 0;
  180|  12.9k|    return (r0 << shl) | (r1 >> shr);
  181|  12.9k|  }
  182|  13.0k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  13.0k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  13.0k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 784, False: 12.2k]
  ------------------
  143|    784|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 730, False: 54]
  ------------------
  144|    730|        return true;
  145|    730|      }
  146|     54|      index++;
  147|     54|    }
  148|  12.2k|    return false;
  149|  13.0k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  14.9k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  14.9k|    int lz = ctlz();
  560|  14.9k|    return int(limb_bits * vec.len()) - lz;
  561|  14.9k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  14.9k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  14.9k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 14.9k]
  ------------------
  545|      0|      return 0;
  546|  14.9k|    } else {
  547|  14.9k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  14.9k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  14.9k|    }
  555|  14.9k|  }
_ZN10fast_float6bigintC2Em:
  418|  75.2k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  75.2k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  75.2k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  75.2k|    vec.normalize();
  426|  75.2k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  75.2k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  75.2k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 75.2k]
  ------------------
  464|      0|      return 1;
  465|  75.2k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 75.2k]
  ------------------
  466|      0|      return -1;
  467|  75.2k|    } else {
  468|   149k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 140k, False: 8.88k]
  ------------------
  469|   140k|        limb xi = vec[index - 1];
  470|   140k|        limb yi = other.vec[index - 1];
  471|   140k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 11.2k, False: 128k]
  ------------------
  472|  11.2k|          return 1;
  473|   128k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 55.0k, False: 73.8k]
  ------------------
  474|  55.0k|          return -1;
  475|  55.0k|        }
  476|   140k|      }
  477|  8.88k|      return 0;
  478|  75.2k|    }
  479|  75.2k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   280k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   280k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   280k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   280k|    return data[index];
   64|   280k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   413k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   413k|  adjusted_mantissa answer;
   96|   413k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 12.0k, False: 401k]
  |  Branch (96:19): [True: 1.80k, False: 399k]
  ------------------
   97|  13.8k|    answer.power2 = 0;
   98|  13.8k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  13.8k|    return answer;
  101|  13.8k|  }
  102|   399k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 8.62k, False: 391k]
  ------------------
  103|       |    // we want to get infinity:
  104|  8.62k|    answer.power2 = binary::infinite_power();
  105|  8.62k|    answer.mantissa = 0;
  106|  8.62k|    return answer;
  107|  8.62k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   391k|  int lz = leading_zeroes(w);
  112|   391k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   391k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   391k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   391k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   391k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   391k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 858, False: 390k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|    858|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 36, False: 822]
  ------------------
  137|     36|      answer.power2 = 0;
  138|     36|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     36|      return answer;
  141|     36|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    822|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    822|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    822|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    822|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 822, False: 0]
  ------------------
  156|    822|    return answer;
  157|    858|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   390k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 144k, False: 245k]
  |  Branch (162:30): [True: 143k, False: 956]
  |  Branch (162:77): [True: 127k, False: 16.5k]
  ------------------
  163|   390k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 24.3k, False: 102k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  24.3k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 11.2k, False: 13.0k]
  ------------------
  168|  11.2k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  11.2k|    }
  170|  24.3k|  }
  171|       |
  172|   390k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   390k|  answer.mantissa >>= 1;
  174|   390k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 14.7k, False: 375k]
  ------------------
  175|  14.7k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  14.7k|    answer.power2++; // undo previous addition
  177|  14.7k|  }
  178|       |
  179|   390k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   390k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 2.75k, False: 387k]
  ------------------
  181|  2.75k|    answer.power2 = binary::infinite_power();
  182|  2.75k|    answer.mantissa = 0;
  183|  2.75k|  }
  184|   390k|  return answer;
  185|   391k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   429k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   429k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   429k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   429k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   429k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   429k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   429k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 66.5k, False: 362k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  66.5k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  66.5k|    firstproduct.low += secondproduct.high;
   35|  66.5k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 53.9k, False: 12.6k]
  ------------------
   36|  53.9k|      firstproduct.high++;
   37|  53.9k|    }
   38|  66.5k|  }
   39|   429k|  return firstproduct;
   40|   429k|}
_ZN10fast_float6detail5powerEi:
   58|   855k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   855k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   855k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  38.1k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  38.1k|  int lz = leading_zeroes(w);
   82|  38.1k|  w <<= lz;
   83|  38.1k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  38.1k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  38.1k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  38.1k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  38.1k|  int hilz = int(w >> 63) ^ 1;
   69|  38.1k|  adjusted_mantissa answer;
   70|  38.1k|  answer.mantissa = w << hilz;
   71|  38.1k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  38.1k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  38.1k|  return answer;
   74|  38.1k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   385k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   385k|  adjusted_mantissa answer;
   96|   385k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 6.77k, False: 379k]
  |  Branch (96:19): [True: 360, False: 378k]
  ------------------
   97|  7.13k|    answer.power2 = 0;
   98|  7.13k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  7.13k|    return answer;
  101|  7.13k|  }
  102|   378k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 4.31k, False: 374k]
  ------------------
  103|       |    // we want to get infinity:
  104|  4.31k|    answer.power2 = binary::infinite_power();
  105|  4.31k|    answer.mantissa = 0;
  106|  4.31k|    return answer;
  107|  4.31k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   374k|  int lz = leading_zeroes(w);
  112|   374k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   374k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   374k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   374k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   374k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   374k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 13.1k, False: 361k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  13.1k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 96, False: 13.0k]
  ------------------
  137|     96|      answer.power2 = 0;
  138|     96|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     96|      return answer;
  141|     96|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  13.0k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  13.0k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  13.0k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  13.0k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 13.0k, False: 0]
  ------------------
  156|  13.0k|    return answer;
  157|  13.1k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   361k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 110k, False: 250k]
  |  Branch (162:30): [True: 66.4k, False: 43.9k]
  |  Branch (162:77): [True: 58.6k, False: 7.89k]
  ------------------
  163|   361k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 21.8k, False: 36.7k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  21.8k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 14.5k, False: 7.26k]
  ------------------
  168|  14.5k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  14.5k|    }
  170|  21.8k|  }
  171|       |
  172|   361k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   361k|  answer.mantissa >>= 1;
  174|   361k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 11.5k, False: 349k]
  ------------------
  175|  11.5k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  11.5k|    answer.power2++; // undo previous addition
  177|  11.5k|  }
  178|       |
  179|   361k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   361k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 256, False: 361k]
  ------------------
  181|    256|    answer.power2 = binary::infinite_power();
  182|    256|    answer.mantissa = 0;
  183|    256|  }
  184|   361k|  return answer;
  185|   374k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   426k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   426k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   426k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   426k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   426k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   426k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   426k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 107k, False: 319k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|   107k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|   107k|    firstproduct.low += secondproduct.high;
   35|   107k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 50.4k, False: 56.8k]
  ------------------
   36|  50.4k|      firstproduct.high++;
   37|  50.4k|    }
   38|   107k|  }
   39|   426k|  return firstproduct;
   40|   426k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  51.9k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  51.9k|  int lz = leading_zeroes(w);
   82|  51.9k|  w <<= lz;
   83|  51.9k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  51.9k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  51.9k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  51.9k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  51.9k|  int hilz = int(w >> 63) ^ 1;
   69|  51.9k|  adjusted_mantissa answer;
   70|  51.9k|  answer.mantissa = w << hilz;
   71|  51.9k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  51.9k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  51.9k|  return answer;
   74|  51.9k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  38.1k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  38.1k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  38.1k|  int32_t sci_exp = scientific_exponent(num);
  411|  38.1k|  size_t max_digits = binary_format<T>::max_digits();
  412|  38.1k|  size_t digits = 0;
  413|  38.1k|  bigint bigmant;
  414|  38.1k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  38.1k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  38.1k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 878, False: 37.2k]
  ------------------
  418|    878|    return positive_digit_comp<T>(bigmant, exponent);
  419|  37.2k|  } else {
  420|  37.2k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  37.2k|  }
  422|  38.1k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  90.1k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  90.1k|  uint64_t mantissa = num.mantissa;
   30|  90.1k|  int32_t exponent = int32_t(num.exponent);
   31|   450k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 360k, False: 90.1k]
  ------------------
   32|   360k|    mantissa /= 10000;
   33|   360k|    exponent += 4;
   34|   360k|  }
   35|   180k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 90.1k, False: 90.1k]
  ------------------
   36|  90.1k|    mantissa /= 100;
   37|  90.1k|    exponent += 2;
   38|  90.1k|  }
   39|  90.1k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 90.1k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  90.1k|  return exponent;
   44|  90.1k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  90.1k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  90.1k|  size_t counter = 0;
  245|  90.1k|  digits = 0;
  246|  90.1k|  limb value = 0;
  247|  90.1k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  90.1k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  90.1k|  UC const * p = num.integer.ptr;
  255|  90.1k|  UC const * pend = p + num.integer.len();
  256|  90.1k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   197k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 107k, False: 89.7k]
  ------------------
  259|   202k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 121k, False: 80.5k]
  |  Branch (259:45): [True: 95.0k, False: 26.5k]
  |  Branch (259:70): [True: 94.6k, False: 408]
  ------------------
  260|  94.6k|      parse_eight_digits(p, value, counter, digits);
  261|  94.6k|    }
  262|   398k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 365k, False: 32.8k]
  |  Branch (262:30): [True: 291k, False: 74.2k]
  |  Branch (262:43): [True: 290k, False: 408]
  ------------------
  263|   290k|      parse_one_digit(p, value, counter, digits);
  264|   290k|    }
  265|   107k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 408, False: 107k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    408|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    408|      bool truncated = is_truncated(p, pend);
  269|    408|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 376, False: 32]
  ------------------
  270|    376|        truncated |= is_truncated(num.fraction);
  271|    376|      }
  272|    408|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 220, False: 188]
  ------------------
  273|    220|        round_up_bigint(result, digits);
  274|    220|      }
  275|    408|      return;
  276|   107k|    } else {
  277|   107k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|   107k|      counter = 0;
  279|   107k|      value = 0;
  280|   107k|    }
  281|   107k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  89.7k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 75.7k, False: 13.9k]
  ------------------
  285|  75.7k|    p = num.fraction.ptr;
  286|  75.7k|    pend = p + num.fraction.len();
  287|  75.7k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 15.4k, False: 60.3k]
  ------------------
  288|  15.4k|      skip_zeros(p, pend);
  289|  15.4k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   281k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 212k, False: 69.3k]
  ------------------
  292|   536k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 446k, False: 90.0k]
  |  Branch (292:47): [True: 326k, False: 120k]
  |  Branch (292:72): [True: 324k, False: 1.98k]
  ------------------
  293|   324k|        parse_eight_digits(p, value, counter, digits);
  294|   324k|      }
  295|   882k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 742k, False: 139k]
  |  Branch (295:32): [True: 674k, False: 68.4k]
  |  Branch (295:45): [True: 670k, False: 4.33k]
  ------------------
  296|   670k|        parse_one_digit(p, value, counter, digits);
  297|   670k|      }
  298|   212k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 6.46k, False: 206k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  6.46k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  6.46k|        bool truncated = is_truncated(p, pend);
  302|  6.46k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 3.47k, False: 2.98k]
  ------------------
  303|  3.47k|          round_up_bigint(result, digits);
  304|  3.47k|        }
  305|  6.46k|        return;
  306|   206k|      } else {
  307|   206k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   206k|        counter = 0;
  309|   206k|        value = 0;
  310|   206k|      }
  311|   212k|    }
  312|  75.7k|  }
  313|       |
  314|  83.2k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 83.2k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  83.2k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|   105k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|   105k|  uint64_t val;
  161|   176k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 127k, False: 48.6k]
  ------------------
  162|   127k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|   127k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 56.8k, False: 70.5k]
  ------------------
  164|  56.8k|      break;
  165|  56.8k|    }
  166|  70.5k|    first += int_cmp_len<UC>();
  167|  70.5k|  }
  168|   259k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 243k, False: 15.4k]
  ------------------
  169|   243k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 90.1k, False: 153k]
  ------------------
  170|  90.1k|      break;
  171|  90.1k|    }
  172|   153k|    first++;
  173|   153k|  }
  174|   105k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   419k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   419k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   419k|  p += 8;
  210|   419k|  counter += 8;
  211|   419k|  count += 8;
  212|   419k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   960k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   960k|  value = value * 10 + limb(*p - UC('0'));
  218|   960k|  p++;
  219|   960k|  counter++;
  220|   960k|  count++;
  221|   960k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   323k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   323k|  big.mul(power);
  226|   323k|  big.add(value);
  227|   323k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  7.24k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  7.24k|  uint64_t val;
  183|  18.0k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 12.3k, False: 5.65k]
  ------------------
  184|  12.3k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  12.3k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.59k, False: 10.7k]
  ------------------
  186|  1.59k|      return true;
  187|  1.59k|    }
  188|  10.7k|    first += int_cmp_len<UC>();
  189|  10.7k|  }
  190|  9.26k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 5.79k, False: 3.47k]
  ------------------
  191|  5.79k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 2.17k, False: 3.61k]
  ------------------
  192|  2.17k|      return true;
  193|  2.17k|    }
  194|  3.61k|    ++first;
  195|  3.61k|  }
  196|  3.47k|  return false;
  197|  5.65k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    376|bool is_truncated(span<const UC> s) noexcept {
  201|    376|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    376|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  3.69k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  3.69k|  add_native(big, 10, 1);
  234|  3.69k|  count++;
  235|  3.69k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    878|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    878|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    878|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    878|  adjusted_mantissa answer;
  324|    878|  bool truncated;
  325|    878|  answer.mantissa = bigmant.hi64(truncated);
  326|    878|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    878|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    878|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    878|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    878|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    878|    });
  333|    878|  });
  334|       |
  335|    878|  return answer;
  336|    878|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    878|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    878|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    878|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 878]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    878|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    878|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 878]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    878|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    878|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 878]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    878|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    878|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    878|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    878|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    878|    });
  333|    878|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    878|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    878|  const uint64_t mask
  125|    878|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 878]
  ------------------
  126|    878|    ? UINT64_MAX
  127|    878|    : (uint64_t(1) << shift) - 1;
  128|    878|  const uint64_t halfway
  129|    878|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 878]
  ------------------
  130|    878|    ? 0
  131|    878|    : uint64_t(1) << (shift - 1);
  132|    878|  uint64_t truncated_bits = am.mantissa & mask;
  133|    878|  bool is_above = truncated_bits > halfway;
  134|    878|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    878|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 878]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    878|  } else {
  140|    878|    am.mantissa >>= shift;
  141|    878|  }
  142|    878|  am.power2 += shift;
  143|       |
  144|    878|  bool is_odd = (am.mantissa & 1) == 1;
  145|    878|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    878|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    878|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    878|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 86, False: 792]
  |  Branch (331:27): [True: 644, False: 148]
  |  Branch (331:41): [True: 68, False: 576]
  |  Branch (331:56): [True: 94, False: 630]
  |  Branch (331:66): [True: 32, False: 62]
  ------------------
  332|    878|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  37.2k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  37.2k|  bigint& real_digits = bigmant;
  347|  37.2k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  37.2k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  37.2k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  37.2k|  T b;
  354|  37.2k|  to_float(false, am_b, b);
  355|  37.2k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  37.2k|  bigint theor_digits(theor.mantissa);
  357|  37.2k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  37.2k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  37.2k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  37.2k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 37.2k, False: 0]
  ------------------
  363|  37.2k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  37.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  37.2k|  }
  365|  37.2k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 37.2k, False: 0]
  ------------------
  366|  37.2k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  37.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  37.2k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  37.2k|  int ord = real_digits.compare(theor_digits);
  373|  37.2k|  adjusted_mantissa answer = am;
  374|  37.2k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  37.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  37.2k|      (void)_;  // not needed, since we've done our comparison
  377|  37.2k|      (void)__; // not needed, since we've done our comparison
  378|  37.2k|      if (ord > 0) {
  379|  37.2k|        return true;
  380|  37.2k|      } else if (ord < 0) {
  381|  37.2k|        return false;
  382|  37.2k|      } else {
  383|  37.2k|        return is_odd;
  384|  37.2k|      }
  385|  37.2k|    });
  386|  37.2k|  });
  387|       |
  388|  37.2k|  return answer;
  389|  37.2k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  37.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  37.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  37.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 37.2k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  37.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  37.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 37.2k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  37.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  37.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 37.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  37.2k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  37.2k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  75.2k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  75.2k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 75.2k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  75.2k|  } else {
  153|  75.2k|    am.mantissa >>= shift;
  154|  75.2k|  }
  155|  75.2k|  am.power2 += shift;
  156|  75.2k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  37.2k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  37.2k|  adjusted_mantissa am = to_extended(value);
   84|  37.2k|  am.mantissa <<= 1;
   85|  37.2k|  am.mantissa += 1;
   86|  37.2k|  am.power2 -= 1;
   87|  37.2k|  return am;
   88|  37.2k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  37.2k|adjusted_mantissa to_extended(T value) noexcept {
   50|  37.2k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  37.2k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  37.2k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  37.2k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  37.2k|  adjusted_mantissa am;
   56|  37.2k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  37.2k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  37.2k|  ::memcpy(&bits, &value, sizeof(T));
   62|  37.2k|#endif
   63|  37.2k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 37.2k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  37.2k|  } else {
   68|       |    // normal
   69|  37.2k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  37.2k|    am.power2 -= bias;
   71|  37.2k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  37.2k|  }
   73|       |
   74|  37.2k|  return am;
   75|  37.2k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  37.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  37.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  37.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 37.2k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  37.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  37.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 37.2k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  37.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  37.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 37.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  37.2k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  37.2k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  37.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  37.2k|      (void)_;  // not needed, since we've done our comparison
  377|  37.2k|      (void)__; // not needed, since we've done our comparison
  378|  37.2k|      if (ord > 0) {
  379|  37.2k|        return true;
  380|  37.2k|      } else if (ord < 0) {
  381|  37.2k|        return false;
  382|  37.2k|      } else {
  383|  37.2k|        return is_odd;
  384|  37.2k|      }
  385|  37.2k|    });
  386|  37.2k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  37.2k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  37.2k|  const uint64_t mask
  125|  37.2k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 37.2k]
  ------------------
  126|  37.2k|    ? UINT64_MAX
  127|  37.2k|    : (uint64_t(1) << shift) - 1;
  128|  37.2k|  const uint64_t halfway
  129|  37.2k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 37.2k]
  ------------------
  130|  37.2k|    ? 0
  131|  37.2k|    : uint64_t(1) << (shift - 1);
  132|  37.2k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  37.2k|  bool is_above = truncated_bits > halfway;
  134|  37.2k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  37.2k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 37.2k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  37.2k|  } else {
  140|  37.2k|    am.mantissa >>= shift;
  141|  37.2k|  }
  142|  37.2k|  am.power2 += shift;
  143|       |
  144|  37.2k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  37.2k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  37.2k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  37.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  37.2k|      (void)_;  // not needed, since we've done our comparison
  377|  37.2k|      (void)__; // not needed, since we've done our comparison
  378|  37.2k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 536, False: 36.7k]
  ------------------
  379|    536|        return true;
  380|  36.7k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 28.8k, False: 7.89k]
  ------------------
  381|  28.8k|        return false;
  382|  28.8k|      } else {
  383|  7.89k|        return is_odd;
  384|  7.89k|      }
  385|  37.2k|    });
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  51.9k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  51.9k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  51.9k|  int32_t sci_exp = scientific_exponent(num);
  411|  51.9k|  size_t max_digits = binary_format<T>::max_digits();
  412|  51.9k|  size_t digits = 0;
  413|  51.9k|  bigint bigmant;
  414|  51.9k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  51.9k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  51.9k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 14.0k, False: 37.9k]
  ------------------
  418|  14.0k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  37.9k|  } else {
  420|  37.9k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  37.9k|  }
  422|  51.9k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  14.0k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  14.0k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  14.0k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  14.0k|  adjusted_mantissa answer;
  324|  14.0k|  bool truncated;
  325|  14.0k|  answer.mantissa = bigmant.hi64(truncated);
  326|  14.0k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  14.0k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  14.0k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  14.0k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.0k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  14.0k|    });
  333|  14.0k|  });
  334|       |
  335|  14.0k|  return answer;
  336|  14.0k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  14.0k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  14.0k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  14.0k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 14.0k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  14.0k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  14.0k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 1.01k, False: 13.0k]
  ------------------
  109|  1.01k|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|  1.01k|    am.power2++;
  111|  1.01k|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  14.0k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  14.0k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 14.0k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  14.0k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  14.0k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  14.0k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.0k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  14.0k|    });
  333|  14.0k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  14.0k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  14.0k|  const uint64_t mask
  125|  14.0k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 14.0k]
  ------------------
  126|  14.0k|    ? UINT64_MAX
  127|  14.0k|    : (uint64_t(1) << shift) - 1;
  128|  14.0k|  const uint64_t halfway
  129|  14.0k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 14.0k]
  ------------------
  130|  14.0k|    ? 0
  131|  14.0k|    : uint64_t(1) << (shift - 1);
  132|  14.0k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  14.0k|  bool is_above = truncated_bits > halfway;
  134|  14.0k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  14.0k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 14.0k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  14.0k|  } else {
  140|  14.0k|    am.mantissa >>= shift;
  141|  14.0k|  }
  142|  14.0k|  am.power2 += shift;
  143|       |
  144|  14.0k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  14.0k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  14.0k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  14.0k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.0k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 1.16k, False: 12.8k]
  |  Branch (331:27): [True: 11.9k, False: 914]
  |  Branch (331:41): [True: 3.84k, False: 8.12k]
  |  Branch (331:56): [True: 354, False: 8.68k]
  |  Branch (331:66): [True: 80, False: 274]
  ------------------
  332|  14.0k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  37.9k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  37.9k|  bigint& real_digits = bigmant;
  347|  37.9k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  37.9k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  37.9k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  37.9k|  T b;
  354|  37.9k|  to_float(false, am_b, b);
  355|  37.9k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  37.9k|  bigint theor_digits(theor.mantissa);
  357|  37.9k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  37.9k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  37.9k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  37.9k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 37.9k, False: 0]
  ------------------
  363|  37.9k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  37.9k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  37.9k|  }
  365|  37.9k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 5.03k, False: 32.8k]
  ------------------
  366|  5.03k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  5.03k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  32.8k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 32.7k, False: 130]
  ------------------
  368|  32.7k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  32.7k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  32.7k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  37.9k|  int ord = real_digits.compare(theor_digits);
  373|  37.9k|  adjusted_mantissa answer = am;
  374|  37.9k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  37.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  37.9k|      (void)_;  // not needed, since we've done our comparison
  377|  37.9k|      (void)__; // not needed, since we've done our comparison
  378|  37.9k|      if (ord > 0) {
  379|  37.9k|        return true;
  380|  37.9k|      } else if (ord < 0) {
  381|  37.9k|        return false;
  382|  37.9k|      } else {
  383|  37.9k|        return is_odd;
  384|  37.9k|      }
  385|  37.9k|    });
  386|  37.9k|  });
  387|       |
  388|  37.9k|  return answer;
  389|  37.9k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  37.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  37.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  37.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 168, False: 37.7k]
  ------------------
   96|       |    // have a denormal float
   97|    168|    int32_t shift = -am.power2 + 1;
   98|    168|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    168|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 168, False: 0]
  ------------------
  101|    168|    return;
  102|    168|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  37.7k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  37.7k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 37.7k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  37.7k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  37.7k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 37.7k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  37.7k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  37.9k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  37.9k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  37.9k|  adjusted_mantissa am = to_extended(value);
   84|  37.9k|  am.mantissa <<= 1;
   85|  37.9k|  am.mantissa += 1;
   86|  37.9k|  am.power2 -= 1;
   87|  37.9k|  return am;
   88|  37.9k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  37.9k|adjusted_mantissa to_extended(T value) noexcept {
   50|  37.9k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  37.9k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  37.9k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  37.9k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  37.9k|  adjusted_mantissa am;
   56|  37.9k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  37.9k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  37.9k|  ::memcpy(&bits, &value, sizeof(T));
   62|  37.9k|#endif
   63|  37.9k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 168, False: 37.7k]
  ------------------
   64|       |    // denormal
   65|    168|    am.power2 = 1 - bias;
   66|    168|    am.mantissa = bits & mantissa_mask;
   67|  37.7k|  } else {
   68|       |    // normal
   69|  37.7k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  37.7k|    am.power2 -= bias;
   71|  37.7k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  37.7k|  }
   73|       |
   74|  37.9k|  return am;
   75|  37.9k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  37.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  37.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  37.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 168, False: 37.7k]
  ------------------
   96|       |    // have a denormal float
   97|    168|    int32_t shift = -am.power2 + 1;
   98|    168|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    168|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 168, False: 0]
  ------------------
  101|    168|    return;
  102|    168|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  37.7k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  37.7k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 118, False: 37.6k]
  ------------------
  109|    118|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    118|    am.power2++;
  111|    118|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  37.7k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  37.7k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 37.7k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  37.7k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  37.9k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  37.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  37.9k|      (void)_;  // not needed, since we've done our comparison
  377|  37.9k|      (void)__; // not needed, since we've done our comparison
  378|  37.9k|      if (ord > 0) {
  379|  37.9k|        return true;
  380|  37.9k|      } else if (ord < 0) {
  381|  37.9k|        return false;
  382|  37.9k|      } else {
  383|  37.9k|        return is_odd;
  384|  37.9k|      }
  385|  37.9k|    });
  386|  37.9k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  37.9k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  37.9k|  const uint64_t mask
  125|  37.9k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 37.9k]
  ------------------
  126|  37.9k|    ? UINT64_MAX
  127|  37.9k|    : (uint64_t(1) << shift) - 1;
  128|  37.9k|  const uint64_t halfway
  129|  37.9k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 37.9k]
  ------------------
  130|  37.9k|    ? 0
  131|  37.9k|    : uint64_t(1) << (shift - 1);
  132|  37.9k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  37.9k|  bool is_above = truncated_bits > halfway;
  134|  37.9k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  37.9k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 37.9k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  37.9k|  } else {
  140|  37.9k|    am.mantissa >>= shift;
  141|  37.9k|  }
  142|  37.9k|  am.power2 += shift;
  143|       |
  144|  37.9k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  37.9k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  37.9k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  37.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  37.9k|      (void)_;  // not needed, since we've done our comparison
  377|  37.9k|      (void)__; // not needed, since we've done our comparison
  378|  37.9k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 10.7k, False: 27.2k]
  ------------------
  379|  10.7k|        return true;
  380|  27.2k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 26.2k, False: 990]
  ------------------
  381|  26.2k|        return false;
  382|  26.2k|      } else {
  383|    990|        return is_odd;
  384|    990|      }
  385|  37.9k|    });

_ZN10fast_float4spanIKcEC2Ev:
  235|  4.12M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  2.41M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   619k|  constexpr size_t len() const noexcept {
  238|   619k|    return length;
  239|   619k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|  1.01M|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|  1.01M|  return -10;
  469|  1.01M|#endif
  470|  1.01M|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|   951k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|   951k|  return 10;
  517|   951k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   796k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   796k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   796k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  2.66M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  2.66M|  return 23;
  477|  2.66M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   730k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   730k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   730k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   979k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   401k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   401k|  return -65;
  568|   401k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   399k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   399k|  return 38;
  559|   399k|}
_ZN10fast_float14leading_zeroesEm:
  268|   885k|int leading_zeroes(uint64_t input_num) {
  269|   885k|  assert(input_num > 0);
  270|   885k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   885k|  return __builtin_clzll(input_num);
  285|   885k|#endif
  286|   885k|}
_ZN10fast_float19full_multiplicationEmm:
  320|  1.02M|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|  1.02M|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|  1.02M|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|  1.02M|  answer.low = uint64_t(r);
  337|  1.02M|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|  1.02M|  return answer;
  342|  1.02M|}
_ZN10fast_float8value128C2Ev:
  251|  1.02M|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   467k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   467k|  return -127;
  500|   467k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|   144k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|   144k|  return -17;
  493|   144k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|   143k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|   143k|  return 10;
  485|   143k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   272k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   272k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 90.1k, False: 182k]
  |  Branch (352:38): [True: 0, False: 182k]
  ------------------
  353|   272k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  38.1k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  38.1k|  return 114;
  575|  38.1k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|   275k|{
  650|   275k|    return sizeof(uint64_t) / sizeof(UC);
  651|   275k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|   139k|{
  644|   139k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|   139k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|   139k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|   141k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   571k|  constexpr size_t len() const noexcept {
  238|   571k|    return length;
  239|   571k|  }
_ZNK10fast_float4spanImEixEm:
  241|   325k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   325k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   325k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   325k|    return ptr[index];
  244|   325k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   320k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   320k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   320k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   320k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   320k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   320k|  ::memcpy(&value, &word, sizeof(T));
  615|   320k|#endif
  616|   320k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   320k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   758k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   758k|  return 0xFF;
  507|   758k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  2.06M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|   108k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|  54.3k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|  54.3k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|  1.10M|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|  1.10M|  return -22;
  461|  1.10M|#endif
  462|  1.10M|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|  1.06M|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|  1.06M|  return 22;
  514|  1.06M|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   879k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   879k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   879k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  2.71M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  2.71M|  return 52;
  474|  2.71M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   860k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   860k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   860k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   379k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   379k|  return -342;
  564|   379k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   378k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   378k|  return 308;
  555|   378k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   478k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   478k|  return -1023;
  497|   478k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|   110k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|   110k|  return -4;
  489|   110k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  66.4k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  66.4k|  return 23;
  481|  66.4k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  51.9k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  51.9k|  return 769;
  572|  51.9k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   281k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   281k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   281k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   281k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   281k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   281k|  ::memcpy(&value, &word, sizeof(T));
  615|   281k|#endif
  616|   281k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   281k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   699k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   699k|  return 0x7FF;
  504|   699k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   986k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   986k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   986k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   986k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   986k|    return from_chars_advanced(first, last, value, options);
  143|   986k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   986k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   986k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   986k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   986k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   986k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 986k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   986k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   986k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 986k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   986k|  answer.ec = std::errc(); // be optimistic
  221|   986k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   986k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 924k, False: 62.2k]
  |  Branch (227:69): [True: 855k, False: 69.0k]
  |  Branch (227:131): [True: 770k, False: 85.0k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   770k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 770k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   770k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 704k, False: 66.1k]
  ------------------
  239|   704k|        value = T(pns.mantissa);
  240|   704k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 11.1k, False: 692k]
  ------------------
  241|   692k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   704k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 704k]
  ------------------
  243|   704k|        return answer;
  244|   704k|      }
  245|   770k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   770k|  }
  262|   282k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   282k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 130k, False: 152k]
  |  Branch (263:29): [True: 130k, False: 0]
  ------------------
  264|   130k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 38.1k, False: 92.2k]
  ------------------
  265|  38.1k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  38.1k|    }
  267|   130k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   282k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 38.1k, False: 244k]
  ------------------
  271|   282k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   282k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 270k, False: 12.0k]
  |  Branch (273:29): [True: 19.6k, False: 250k]
  |  Branch (273:49): [True: 1.49k, False: 18.1k]
  |  Branch (273:68): [True: 7.98k, False: 273k]
  ------------------
  274|  9.47k|    answer.ec = std::errc::result_out_of_range;
  275|  9.47k|  }
  276|   282k|  return answer;
  277|   986k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.67M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.67M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.67M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.67M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.67M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.67M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  27.1k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  27.1k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  27.1k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|  27.1k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  27.1k|    return from_chars_advanced(first, last, value, options);
  143|  27.1k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  27.1k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  27.1k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  27.1k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  27.1k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  27.1k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 27.1k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  27.1k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  27.1k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 27.1k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  27.1k|  answer.ec = std::errc(); // be optimistic
  221|  27.1k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  27.1k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 27.1k, False: 54]
  |  Branch (227:69): [True: 26.5k, False: 560]
  |  Branch (227:131): [True: 26.5k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  26.5k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 26.5k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  26.5k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 26.5k, False: 0]
  ------------------
  239|  26.5k|        value = T(pns.mantissa);
  240|  26.5k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 36, False: 26.5k]
  ------------------
  241|  26.5k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  26.5k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 26.5k]
  ------------------
  243|  26.5k|        return answer;
  244|  26.5k|      }
  245|  26.5k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  26.5k|  }
  262|    614|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|    614|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 614]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|    614|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 614]
  ------------------
  271|    614|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|    614|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 596, False: 18]
  |  Branch (273:29): [True: 550, False: 46]
  |  Branch (273:49): [True: 54, False: 496]
  |  Branch (273:68): [True: 496, False: 64]
  ------------------
  274|    550|    answer.ec = std::errc::result_out_of_range;
  275|    550|  }
  276|    614|  return answer;
  277|  27.1k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  1.07M|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  1.07M|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  1.07M|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  1.07M|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  1.07M|    return from_chars_advanced(first, last, value, options);
  143|  1.07M|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  1.07M|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  1.07M|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  1.07M|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  1.07M|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  1.07M|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 1.07M]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  1.07M|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  1.07M|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 1.07M]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  1.07M|  answer.ec = std::errc(); // be optimistic
  221|  1.07M|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  1.07M|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 1.04M, False: 34.9k]
  |  Branch (227:69): [True: 970k, False: 72.0k]
  |  Branch (227:131): [True: 852k, False: 117k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   852k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 852k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   852k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 834k, False: 18.6k]
  ------------------
  239|   834k|        value = T(pns.mantissa);
  240|   834k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 43.3k, False: 790k]
  ------------------
  241|   790k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   834k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 834k]
  ------------------
  243|   834k|        return answer;
  244|   834k|      }
  245|   852k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   852k|  }
  262|   243k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   243k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 141k, False: 101k]
  |  Branch (263:29): [True: 141k, False: 0]
  ------------------
  264|   141k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 51.9k, False: 90.0k]
  ------------------
  265|  51.9k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  51.9k|    }
  267|   141k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   243k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 51.9k, False: 191k]
  ------------------
  271|   243k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   243k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 236k, False: 6.75k]
  |  Branch (273:29): [True: 10.6k, False: 226k]
  |  Branch (273:49): [True: 416, False: 10.2k]
  |  Branch (273:68): [True: 3.77k, False: 239k]
  ------------------
  274|  4.19k|    answer.ec = std::errc::result_out_of_range;
  275|  4.19k|  }
  276|   243k|  return answer;
  277|  1.07M|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  27.1k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  27.1k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  27.1k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  27.1k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  27.1k|    return from_chars_advanced(first, last, value, options);
  143|  27.1k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  27.1k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  27.1k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  27.1k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  27.1k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  27.1k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 27.1k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  27.1k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  27.1k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 27.1k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  27.1k|  answer.ec = std::errc(); // be optimistic
  221|  27.1k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  27.1k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 27.1k, False: 54]
  |  Branch (227:69): [True: 26.5k, False: 532]
  |  Branch (227:131): [True: 26.5k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  26.5k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 26.5k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  26.5k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 26.5k, False: 0]
  ------------------
  239|  26.5k|        value = T(pns.mantissa);
  240|  26.5k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 36, False: 26.5k]
  ------------------
  241|  26.5k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  26.5k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 26.5k]
  ------------------
  243|  26.5k|        return answer;
  244|  26.5k|      }
  245|  26.5k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  26.5k|  }
  262|    586|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|    586|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 586]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|    586|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 586]
  ------------------
  271|    586|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|    586|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 568, False: 18]
  |  Branch (273:29): [True: 304, False: 264]
  |  Branch (273:49): [True: 0, False: 304]
  |  Branch (273:68): [True: 304, False: 282]
  ------------------
  274|    304|    answer.ec = std::errc::result_out_of_range;
  275|    304|  }
  276|    586|  return answer;
  277|  27.1k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  7.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|   702k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|   703k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  6.07M|{
 3803|  6.07M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3803:19): [Folded - Ignored]
  ------------------
 3804|  6.07M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|  6.07M|    }
 3806|  6.07M|    else if constexpr (sizeof(U) == 2) {
 3807|  6.07M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|  6.07M|    }
 3809|  6.07M|    else {
 3810|       |        // utf-32
 3811|  6.07M|        static_assert(sizeof(U) == 4);
 3812|  6.07M|        SCN_UNUSED(ch);
 3813|  6.07M|        return 1;
 3814|  6.07M|    }
 3815|  6.07M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  6.07M|{
 3767|  6.07M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  6.07M|    SCN_GCC_COMPAT_PUSH
 3770|  6.07M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  6.07M|    constexpr char lengths[] =
 3772|  6.07M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  6.07M|        "\1\1\1\1\1\1\1\1"
 3774|  6.07M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  6.07M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  6.07M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  6.07M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  6.07M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  6.07M|    SCN_GCC_COMPAT_POP
 3781|  6.07M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  5.75M|{
 4009|  5.75M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4009:19): [Folded - Ignored]
  ------------------
 4010|  5.75M|        return decode_utf8_code_point_exhaustive(input);
 4011|  5.75M|    }
 4012|  5.75M|    else if constexpr (sizeof(CharT) == 2) {
 4013|  5.75M|        return decode_utf16_code_point_exhaustive(input);
 4014|  5.75M|    }
 4015|  5.75M|    else {
 4016|  5.75M|        SCN_EXPECT(input.size() == 1);
 4017|  5.75M|        auto cp = static_cast<char32_t>(input.front());
 4018|  5.75M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|  5.75M|            return invalid_code_point;
 4020|  5.75M|        }
 4021|  5.75M|        return cp;
 4022|  5.75M|    }
 4023|  5.75M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  5.75M|{
 3822|  5.75M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  5.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  5.75M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  5.75M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  5.75M|    };
 3827|       |
 3828|  5.75M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 5.49M, False: 256k]
  ------------------
 3829|  5.49M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 831, False: 5.49M]
  ------------------
 3830|    831|            SCN_UNLIKELY_ATTR
 3831|    831|            return invalid_code_point;
 3832|    831|        }
 3833|  5.49M|        return static_cast<char32_t>(input[0]);
 3834|  5.49M|    }
 3835|       |
 3836|   256k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 225k, False: 30.9k]
  ------------------
 3837|   225k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 139, False: 225k]
  ------------------
 3838|    139|            SCN_UNLIKELY_ATTR
 3839|    139|            return invalid_code_point;
 3840|    139|        }
 3841|   225k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 51.8k, False: 173k]
  ------------------
 3842|  51.8k|            SCN_UNLIKELY_ATTR
 3843|  51.8k|            return invalid_code_point;
 3844|  51.8k|        }
 3845|       |
 3846|   173k|        char32_t cp{};
 3847|   173k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|   173k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|   173k|        return cp;
 3850|   225k|    }
 3851|       |
 3852|  30.9k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 13.9k, False: 16.9k]
  ------------------
 3853|  13.9k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 89, False: 13.8k]
  ------------------
 3854|     89|            SCN_UNLIKELY_ATTR
 3855|     89|            return invalid_code_point;
 3856|     89|        }
 3857|  13.8k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 6.63k, False: 7.20k]
  ------------------
 3858|  13.8k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 1.10k, False: 6.10k]
  ------------------
 3859|  7.73k|            SCN_UNLIKELY_ATTR
 3860|  7.73k|            return invalid_code_point;
 3861|  7.73k|        }
 3862|       |
 3863|  6.10k|        char32_t cp{};
 3864|  6.10k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|  6.10k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|  6.10k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|  6.10k|        return cp;
 3868|  13.8k|    }
 3869|       |
 3870|  16.9k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 16.9k, False: 0]
  ------------------
 3871|  16.9k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 16.9k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  16.9k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 2.42k, False: 14.5k]
  ------------------
 3876|  2.42k|            SCN_UNLIKELY_ATTR
 3877|  2.42k|            return invalid_code_point;
 3878|  2.42k|        }
 3879|  14.5k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 3.53k, False: 11.0k]
  ------------------
 3880|  14.5k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 738, False: 10.2k]
  ------------------
 3881|  14.5k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 1.72k, False: 8.55k]
  ------------------
 3882|  5.99k|            SCN_UNLIKELY_ATTR
 3883|  5.99k|            return invalid_code_point;
 3884|  5.99k|        }
 3885|       |
 3886|  8.55k|        char32_t cp{};
 3887|  8.55k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|  8.55k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|  8.55k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|  8.55k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|  8.55k|        return cp;
 3892|  14.5k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|   282k|    const auto is_trailing_code_unit = [](char ch) {
 3825|   282k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|   282k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  12.3M|{
 3695|  12.3M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3695:19): [Folded - Ignored]
  |  Branch (3695:19): [Folded - Ignored]
  ------------------
 3696|  12.3M|                                          decltype(first), decltype(last)> &&
 3697|  12.3M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3697:19): [Folded - Ignored]
  ------------------
 3698|  12.3M|        return {first, last};
 3699|  12.3M|    }
 3700|  12.3M|    else {
 3701|  12.3M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  12.3M|                                       to_address(first), to_address(last)))};
 3703|  12.3M|    }
 3704|  12.3M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  37.7M|{
  322|  37.7M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  37.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  37.7M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  42.0M|{
  302|  42.0M|    return p;
  303|  42.0M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  18.4M|{
 3726|  18.4M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3726:19): [Folded - Ignored]
  |  Branch (3726:19): [Folded - Ignored]
  ------------------
 3727|  18.4M|                      typename std::basic_string_view<CharT>::iterator,
 3728|  18.4M|                      decltype(it)> &&
 3729|  18.4M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3729:19): [Folded - Ignored]
  ------------------
 3730|  18.4M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  18.4M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  18.4M|        return it;
 3732|  18.4M|    }
 3733|  18.4M|    else {
 3734|  18.4M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|  18.4M|    }
 3736|  18.4M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   120k|    {
 2720|   120k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   120k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   120k|    {
 2701|   120k|        return decay_copy(t.begin());
 2702|   120k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1944|  25.4M|{
 1945|  25.4M|    return SCN_FWD(t);
  ------------------
  |  |  930|  25.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  25.4M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  4.76M|    {
 2777|  4.76M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.76M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  4.76M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  4.76M|    {
 2759|  4.76M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  4.76M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  4.76M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8862|   337k|{
 8863|   337k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   337k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   337k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   337k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   337k|    static_cast<    \
  |  |  929|   337k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   337k|    static_cast<    \
  |  |  929|   337k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   337k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5391|  1.35M|{
 5392|  1.35M|    detail::check_scan_arg_types<Args...>();
 5393|  1.35M|    return detail::scan_arg_store<Context, Args...>{};
 5394|  1.35M|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5130|  1.68M|{
 5131|  1.68M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  1.68M|                  "Scan argument types must be default constructible");
 5133|  1.68M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  1.68M|                  "Scan argument types must be Destructible");
 5135|  1.68M|    static_assert(
 5136|  1.68M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  1.68M|        "Scan argument types must not be references");
 5138|  1.68M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5344|  1.35M|    {
 5345|  1.35M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  1.35M|    {
 5356|  1.35M|        return {detail::make_arg<
 5357|  1.35M|            kind, Context,
 5358|  1.35M|            mapped_type_constant<remove_cvref_t<A>,
 5359|  1.35M|                                 typename Context::char_type>::value>(args)...};
 5360|  1.35M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5165|  1.35M|{
 5166|  1.35M|    return make_value<Context>(value).ref_value;
 5167|  1.35M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5115|  1.49M|{
 5116|  1.49M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  1.49M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  1.49M|                                  needs_context_tag>) {
 5120|  1.49M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  1.49M|    }
 5122|  1.49M|    else {
 5123|  1.49M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  1.49M|            value, context_tag<Context>{}));
 5125|  1.49M|    }
 5126|  1.49M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4954|  1.49M|    {                                                                        \
 4955|  1.49M|        return val;                                                          \
 4956|  1.49M|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5084|  1.68M|{
 5085|  1.68M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  1.68M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  1.68M|    constexpr bool scannable_char =
 5089|  1.68M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  1.68M|    static_assert(scannable_char,
 5091|  1.68M|                  "Cannot scan an argument of an unsupported character "
 5092|  1.68M|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  1.68M|    constexpr bool scannable_const =
 5095|  1.68M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  1.68M|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  1.68M|    constexpr bool scannable_disabled =
 5099|  1.68M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  1.68M|    static_assert(scannable_disabled,
 5101|  1.68M|                  "Cannot scan an argument that has been disabled by "
 5102|  1.68M|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  1.68M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  1.68M|    static_assert(
 5106|  1.68M|        scannable,
 5107|  1.68M|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  1.68M|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  1.68M|    return arg_value{arg};
 5111|  1.68M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4897|  1.68M|    {
 4898|  1.68M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8649|  1.07M|{
 8650|  1.07M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8651|  1.07M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8586|  1.07M|{
 8587|  1.07M|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|  1.07M|    auto result = vscan_impl(buffer, format, args);
 8590|  1.07M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54.3k, False: 1.01M]
  |  |  ------------------
  ------------------
 8591|  54.3k|        return unexpected(result.error());
 8592|  54.3k|    }
 8593|  1.01M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|  1.07M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4715|  2.38M|{
 4716|  2.38M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|  2.38M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|  2.38M|                  "\n"
 4720|  2.38M|                  "Unsupported range type given as input to a scanning "
 4721|  2.38M|                  "function.\n"
 4722|  2.38M|                  "A range needs to have a character type (value type) "
 4723|  2.38M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|  2.38M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|  2.38M|                  "to be included.\n"
 4726|  2.38M|                  "See the scnlib documentation for more details.");
 4727|  2.38M|    static_assert(
 4728|  2.38M|        !std::is_same_v<T, custom_char_traits>,
 4729|  2.38M|        "\n"
 4730|  2.38M|        "Unsupported range type given as input to a scanning "
 4731|  2.38M|        "function.\n"
 4732|  2.38M|        "String types (std::basic_string, and std::basic_string_view) "
 4733|  2.38M|        "need to use std::char_traits. Strings with custom Traits are "
 4734|  2.38M|        "not supported.");
 4735|  2.38M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|  2.38M|                  "\n"
 4737|  2.38M|                  "Unsupported range type given as input to a scanning "
 4738|  2.38M|                  "function.\n"
 4739|  2.38M|                  "file_marker_found cannot be used as an "
 4740|  2.38M|                  "source range type to scn::scan.\n"
 4741|  2.38M|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|  2.38M|                  "and do not provide an explicit source range, "
 4743|  2.38M|                  "or use scn::scan with a FILE* directly.");
 4744|  2.38M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|  2.38M|                  "\n"
 4746|  2.38M|                  "Unsupported range type given as input to a scanning "
 4747|  2.38M|                  "function.\n"
 4748|  2.38M|                  "In order to be scannable, a range needs to satisfy "
 4749|  2.38M|                  "`forward_range`. `input_range` is not sufficient.");
 4750|  2.38M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|  2.38M|                  "\n"
 4752|  2.38M|                  "Unsupported range type given as input to a scanning "
 4753|  2.38M|                  "function.\n"
 4754|  2.38M|                  "A range needs to model forward_range and have a valid "
 4755|  2.38M|                  "character type (char or wchar_t) to be scannable.\n"
 4756|  2.38M|                  "Examples of scannable ranges are std::string, "
 4757|  2.38M|                  "std::string_view, "
 4758|  2.38M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|  2.38M|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|  2.38M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|  2.38M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4654|  2.38M|{
 4655|  2.38M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4655:19): [Folded - Ignored]
  ------------------
 4656|  2.38M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4657|  2.38M|    }
 4658|  2.38M|    else {
 4659|  2.38M|        return invalid_char_type{};
 4660|  2.38M|    }
 4661|  2.38M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|  2.38M|    {
 2851|  2.38M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|  2.38M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|  2.38M|    {
 2832|  2.38M|        return t.data();
 2833|  2.38M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3226|  2.38M|    {
 3227|  2.38M|        return ranges::empty(derived())
  ------------------
  |  Branch (3227:16): [True: 21.3k, False: 2.36M]
  ------------------
 3228|  2.38M|                   ? nullptr
 3229|  2.38M|                   : std::addressof(*ranges::begin(derived()));
 3230|  2.38M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|  2.38M|    {
 3001|  2.38M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  2.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|  2.38M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|  2.38M|    {
 2974|  2.38M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  2.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|  2.38M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3334|  13.2M|    {
 3335|  13.2M|        return m_iterator == m_sentinel;
 3336|  13.2M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3180|  4.74M|    {
 3181|  4.74M|        return static_cast<const D&>(*this);
 3182|  4.74M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  4.62M|    {
 2720|  4.62M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  4.62M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  4.62M|    {
 2701|  4.62M|        return decay_copy(t.begin());
 2702|  4.62M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  56.0M|    {
 3326|  56.0M|        return m_iterator;
 3327|  56.0M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2925|  2.38M|    {
 2926|  2.38M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2927|  2.38M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2891|  2.38M|    {
 2892|  2.38M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2893|  2.38M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1944|  7.28M|{
 1945|  7.28M|    return SCN_FWD(t);
  ------------------
  |  |  930|  7.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  7.28M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3341|  13.2M|    {
 3342|  13.2M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  13.2M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1593|  17.5M|    {
 1594|  17.5M|        return has_value();
 1595|  17.5M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  480|  34.8M|    {
  481|  34.8M|        return m_has_value;
  482|  34.8M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1599|  1.06M|    {
 1600|  1.06M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.06M|        return this->get_unexpected().error();
 1602|  1.06M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.06M|    {
  464|  1.06M|        return m_unexpected;
  465|  1.06M|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  356|  8.25M|    {
  357|  8.25M|        return m_unexpected;
  358|  8.25M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  342|  4.03M|    {
  343|  4.03M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.03M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  4.03M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|   117k|    {
 1472|   117k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   117k|    {
  443|   117k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  351|  9.73M|    {
  352|  9.73M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  9.73M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  9.73M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.38M|    {
 1173|  2.38M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5918|  2.26M|{
 5919|  2.26M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  2.26M|                      ranges::iterator_t<SourceRange>>) {
 5921|  2.26M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  2.26M|    }
 5923|  2.26M|    else {
 5924|  2.26M|        auto it = ranges::begin(source);
 5925|  2.26M|        while (n > 0) {
 5926|  2.26M|            --n;
 5927|  2.26M|            ++it;
 5928|  2.26M|        }
 5929|  2.26M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  2.26M|    }
 5931|  2.26M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  13.6M|    {
 2720|  13.6M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  13.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  13.6M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  13.6M|    {
 2701|  13.6M|        return decay_copy(t.begin());
 2702|  13.6M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5905|  2.26M|{
 5906|  2.26M|    return ranges::end(source);
 5907|  2.26M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  2.26M|    {
 2777|  2.26M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  2.26M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  2.26M|    {
 2759|  2.26M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  2.26M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  28.2M|    {
 3330|  28.2M|        return m_sentinel;
 3331|  28.2M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1648|  6.93M|    {
 1649|  6.93M|        return value();
 1650|  6.93M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1622|  16.1M|    {
 1623|  16.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  16.1M|        return this->get_value();
 1625|  16.1M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  446|  16.1M|    {
  447|  16.1M|        return m_value;
  448|  16.1M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  2.26M|    {
 1426|  2.26M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  2.26M|    {
  433|  2.26M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7970|   675k|    {
 7971|   675k|        return m_str;
 7972|   675k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  1.35M|    {
 5422|  1.35M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5374|  1.35M|    {
 5375|  1.35M|        return m_argptrs;
 5376|  1.35M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5473|  4.29M|    {
 5474|  4.29M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|   675k|{
 8816|   675k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   675k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.2k, False: 639k]
  |  |  ------------------
  ------------------
 8817|  36.2k|        return unexpected(result.error());
 8818|  36.2k|    }
 8819|   639k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   639k|    static_cast<    \
  |  |  929|   639k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   639k|    static_cast<    \
  |  |  929|   639k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   675k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1593|  2.38M|    {
 1594|  2.38M|        return has_value();
 1595|  2.38M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.76M|    {
  481|  4.76M|        return m_has_value;
  482|  4.76M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1599|   117k|    {
 1600|   117k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   117k|        return this->get_unexpected().error();
 1602|   117k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   117k|    {
  464|   117k|        return m_unexpected;
  465|   117k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  39.2k|    {
 1472|  39.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  39.2k|    {
  443|  39.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   749k|    {
 1173|   749k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1648|  2.03M|    {
 1649|  2.03M|        return value();
 1650|  2.03M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  2.26M|    {
 1623|  2.26M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.26M|        return this->get_value();
 1625|  2.26M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.26M|    {
  447|  2.26M|        return m_value;
  448|  2.26M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5825|   710k|    {
 5826|   710k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5676|  2.26M|    {
 5677|  2.26M|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5611|  1.45M|    {
 5612|  1.45M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   710k|    {
 1426|   710k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   710k|    {
  433|   710k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5369|  1.35M|    {
 5370|  1.35M|        return m_args;
 5371|  1.35M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3311|  22.5M|    {
 3312|  22.5M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7686|  4.29M|{
 7687|  4.29M|    return s;
 7688|  4.29M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7663|  4.29M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   675k|    {
 7967|   675k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1593|   749k|    {
 1594|   749k|        return has_value();
 1595|   749k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.45M|    {
  481|  1.45M|        return m_has_value;
  482|  1.45M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1668|   710k|    {
 1669|   710k|        return &value();
 1670|   710k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   710k|    {
 1623|   710k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   710k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   710k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   710k|        return this->get_value();
 1625|   710k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   710k|    {
  447|   710k|        return m_value;
  448|   710k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5693|  2.26M|    {
 5694|  2.26M|        return ranges::begin(m_range);
 5695|  2.26M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8929|   337k|{
 8930|   337k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   337k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   337k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   337k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   337k|    static_cast<    \
  |  |  929|   337k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   337k|    static_cast<    \
  |  |  929|   337k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   337k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8667|  1.07M|{
 8668|  1.07M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8669|  1.07M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8602|  1.07M|{
 8603|  1.07M|#if !SCN_DISABLE_LOCALE
 8604|  1.07M|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|  1.07M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|  1.07M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|  1.07M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|  1.07M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54.3k, False: 1.01M]
  |  |  ------------------
  ------------------
 8611|  54.3k|        return unexpected(result.error());
 8612|  54.3k|    }
 8613|  1.01M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|  1.07M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8968|  74.0k|{
 8969|  74.0k|    T value;
 8970|  74.0k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  74.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  74.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  74.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  74.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  74.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.01k, False: 71.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.01k|    }                                                  \
  |  |  |  | 3667|  74.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  71.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  71.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  71.0k|    static_cast<    \
  |  |  929|  71.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  71.0k|    static_cast<    \
  |  |  929|  71.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  74.0k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5150|   143k|{
 5151|   143k|    check_scan_arg_types<T>();
 5152|       |
 5153|   143k|    basic_scan_arg<Context> arg;
 5154|   143k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|   143k|    arg.m_value = make_value<Context>(value);
 5156|   143k|    return arg;
 5157|   143k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5236|  4.75M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4893|  5.32M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8680|   239k|{
 8681|   239k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8682|   239k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|   239k|{
 8627|   239k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|   239k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|   239k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.05k, False: 230k]
  |  |  ------------------
  ------------------
 8631|  9.05k|        return unexpected(result.error());
 8632|  9.05k|    }
 8633|   230k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|   239k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|   230k|    {
 1659|   230k|        return std::move(value());
 1660|   230k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8862|   364k|{
 8863|   364k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   364k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   364k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   364k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   364k|    static_cast<    \
  |  |  929|   364k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   364k|    static_cast<    \
  |  |  929|   364k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   364k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5391|  1.46M|{
 5392|  1.46M|    detail::check_scan_arg_types<Args...>();
 5393|  1.46M|    return detail::scan_arg_store<Context, Args...>{};
 5394|  1.46M|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5130|  1.81M|{
 5131|  1.81M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  1.81M|                  "Scan argument types must be default constructible");
 5133|  1.81M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  1.81M|                  "Scan argument types must be Destructible");
 5135|  1.81M|    static_assert(
 5136|  1.81M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  1.81M|        "Scan argument types must not be references");
 5138|  1.81M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5344|  1.46M|    {
 5345|  1.46M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  1.46M|    {
 5356|  1.46M|        return {detail::make_arg<
 5357|  1.46M|            kind, Context,
 5358|  1.46M|            mapped_type_constant<remove_cvref_t<A>,
 5359|  1.46M|                                 typename Context::char_type>::value>(args)...};
 5360|  1.46M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5165|  1.46M|{
 5166|  1.46M|    return make_value<Context>(value).ref_value;
 5167|  1.46M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5115|  1.61M|{
 5116|  1.61M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  1.61M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  1.61M|                                  needs_context_tag>) {
 5120|  1.61M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  1.61M|    }
 5122|  1.61M|    else {
 5123|  1.61M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  1.61M|            value, context_tag<Context>{}));
 5125|  1.61M|    }
 5126|  1.61M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4954|  1.61M|    {                                                                        \
 4955|  1.61M|        return val;                                                          \
 4956|  1.61M|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5084|  1.81M|{
 5085|  1.81M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  1.81M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  1.81M|    constexpr bool scannable_char =
 5089|  1.81M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  1.81M|    static_assert(scannable_char,
 5091|  1.81M|                  "Cannot scan an argument of an unsupported character "
 5092|  1.81M|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  1.81M|    constexpr bool scannable_const =
 5095|  1.81M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  1.81M|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  1.81M|    constexpr bool scannable_disabled =
 5099|  1.81M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  1.81M|    static_assert(scannable_disabled,
 5101|  1.81M|                  "Cannot scan an argument that has been disabled by "
 5102|  1.81M|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  1.81M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  1.81M|    static_assert(
 5106|  1.81M|        scannable,
 5107|  1.81M|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  1.81M|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  1.81M|    return arg_value{arg};
 5111|  1.81M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4897|  1.81M|    {
 4898|  1.81M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7970|   728k|    {
 7971|   728k|        return m_str;
 7972|   728k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  1.46M|    {
 5422|  1.46M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5374|  1.46M|    {
 5375|  1.46M|        return m_argptrs;
 5376|  1.46M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|   728k|{
 8816|   728k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   728k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.2k, False: 692k]
  |  |  ------------------
  ------------------
 8817|  36.2k|        return unexpected(result.error());
 8818|  36.2k|    }
 8819|   692k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   692k|    static_cast<    \
  |  |  929|   692k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   692k|    static_cast<    \
  |  |  929|   692k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   728k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  39.2k|    {
 1472|  39.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  39.2k|    {
  443|  39.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   810k|    {
 1173|   810k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5825|   771k|    {
 5826|   771k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5611|  1.57M|    {
 5612|  1.57M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   771k|    {
 1426|   771k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   771k|    {
  433|   771k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5369|  1.46M|    {
 5370|  1.46M|        return m_args;
 5371|  1.46M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   728k|    {
 7967|   728k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1593|   810k|    {
 1594|   810k|        return has_value();
 1595|   810k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.58M|    {
  481|  1.58M|        return m_has_value;
  482|  1.58M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1668|   771k|    {
 1669|   771k|        return &value();
 1670|   771k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   771k|    {
 1623|   771k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   771k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   771k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   771k|        return this->get_value();
 1625|   771k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   771k|    {
  447|   771k|        return m_value;
  448|   771k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8929|   364k|{
 8930|   364k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   364k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   364k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   364k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   364k|    static_cast<    \
  |  |  929|   364k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   364k|    static_cast<    \
  |  |  929|   364k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   364k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8968|  81.9k|{
 8969|  81.9k|    T value;
 8970|  81.9k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  81.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  81.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  81.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  81.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  81.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.01k, False: 78.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.01k|    }                                                  \
  |  |  |  | 3667|  81.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  78.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  78.9k|    static_cast<    \
  |  |  929|  78.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  78.9k|    static_cast<    \
  |  |  929|  78.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  81.9k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5150|   158k|{
 5151|   158k|    check_scan_arg_types<T>();
 5152|       |
 5153|   158k|    basic_scan_arg<Context> arg;
 5154|   158k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|   158k|    arg.m_value = make_value<Context>(value);
 5156|   158k|    return arg;
 5157|   158k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8862|   369k|{
 8863|   369k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   369k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   369k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   369k|    static_cast<    \
  |  |  929|   369k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   369k|    static_cast<    \
  |  |  929|   369k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   369k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5391|  1.47M|{
 5392|  1.47M|    detail::check_scan_arg_types<Args...>();
 5393|  1.47M|    return detail::scan_arg_store<Context, Args...>{};
 5394|  1.47M|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5130|  1.83M|{
 5131|  1.83M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  1.83M|                  "Scan argument types must be default constructible");
 5133|  1.83M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  1.83M|                  "Scan argument types must be Destructible");
 5135|  1.83M|    static_assert(
 5136|  1.83M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  1.83M|        "Scan argument types must not be references");
 5138|  1.83M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5344|  1.47M|    {
 5345|  1.47M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  1.47M|    {
 5356|  1.47M|        return {detail::make_arg<
 5357|  1.47M|            kind, Context,
 5358|  1.47M|            mapped_type_constant<remove_cvref_t<A>,
 5359|  1.47M|                                 typename Context::char_type>::value>(args)...};
 5360|  1.47M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5165|  1.47M|{
 5166|  1.47M|    return make_value<Context>(value).ref_value;
 5167|  1.47M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5115|  1.64M|{
 5116|  1.64M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  1.64M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  1.64M|                                  needs_context_tag>) {
 5120|  1.64M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  1.64M|    }
 5122|  1.64M|    else {
 5123|  1.64M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  1.64M|            value, context_tag<Context>{}));
 5125|  1.64M|    }
 5126|  1.64M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4954|  1.64M|    {                                                                        \
 4955|  1.64M|        return val;                                                          \
 4956|  1.64M|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5084|  1.83M|{
 5085|  1.83M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  1.83M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  1.83M|    constexpr bool scannable_char =
 5089|  1.83M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  1.83M|    static_assert(scannable_char,
 5091|  1.83M|                  "Cannot scan an argument of an unsupported character "
 5092|  1.83M|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  1.83M|    constexpr bool scannable_const =
 5095|  1.83M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  1.83M|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  1.83M|    constexpr bool scannable_disabled =
 5099|  1.83M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  1.83M|    static_assert(scannable_disabled,
 5101|  1.83M|                  "Cannot scan an argument that has been disabled by "
 5102|  1.83M|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  1.83M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  1.83M|    static_assert(
 5106|  1.83M|        scannable,
 5107|  1.83M|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  1.83M|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  1.83M|    return arg_value{arg};
 5111|  1.83M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4897|  1.83M|    {
 4898|  1.83M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7970|   738k|    {
 7971|   738k|        return m_str;
 7972|   738k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  1.47M|    {
 5422|  1.47M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5374|  1.47M|    {
 5375|  1.47M|        return m_argptrs;
 5376|  1.47M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|   738k|{
 8816|   738k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   738k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.2k, False: 701k]
  |  |  ------------------
  ------------------
 8817|  36.2k|        return unexpected(result.error());
 8818|  36.2k|    }
 8819|   701k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   701k|    static_cast<    \
  |  |  929|   701k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   701k|    static_cast<    \
  |  |  929|   701k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   738k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  39.2k|    {
 1472|  39.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  39.2k|    {
  443|  39.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   821k|    {
 1173|   821k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5825|   782k|    {
 5826|   782k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5611|  1.59M|    {
 5612|  1.59M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   782k|    {
 1426|   782k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   782k|    {
  433|   782k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5369|  1.47M|    {
 5370|  1.47M|        return m_args;
 5371|  1.47M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   738k|    {
 7967|   738k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1593|   821k|    {
 1594|   821k|        return has_value();
 1595|   821k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.60M|    {
  481|  1.60M|        return m_has_value;
  482|  1.60M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1668|   782k|    {
 1669|   782k|        return &value();
 1670|   782k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   782k|    {
 1623|   782k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   782k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   782k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   782k|        return this->get_value();
 1625|   782k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   782k|    {
  447|   782k|        return m_value;
  448|   782k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8929|   369k|{
 8930|   369k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   369k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   369k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   369k|    static_cast<    \
  |  |  929|   369k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   369k|    static_cast<    \
  |  |  929|   369k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   369k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8968|  83.4k|{
 8969|  83.4k|    T value;
 8970|  83.4k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  83.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  83.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  83.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  83.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  83.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.01k, False: 80.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.01k|    }                                                  \
  |  |  |  | 3667|  83.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  80.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  80.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  80.4k|    static_cast<    \
  |  |  929|  80.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  80.4k|    static_cast<    \
  |  |  929|  80.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  83.4k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5150|   161k|{
 5151|   161k|    check_scan_arg_types<T>();
 5152|       |
 5153|   161k|    basic_scan_arg<Context> arg;
 5154|   161k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|   161k|    arg.m_value = make_value<Context>(value);
 5156|   161k|    return arg;
 5157|   161k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   117k|    {
 2720|   117k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   117k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   117k|    {
 2701|   117k|        return decay_copy(t.begin());
 2702|   117k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1944|   104M|{
 1945|   104M|    return SCN_FWD(t);
  ------------------
  |  |  930|   104M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|   104M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  4.75M|    {
 2777|  4.75M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  4.75M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  4.75M|    {
 2759|  4.75M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  4.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  4.75M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8862|   339k|{
 8863|   339k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   339k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   339k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   339k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   339k|    static_cast<    \
  |  |  929|   339k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   339k|    static_cast<    \
  |  |  929|   339k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   339k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8649|  1.07M|{
 8650|  1.07M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8651|  1.07M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8586|  1.07M|{
 8587|  1.07M|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|  1.07M|    auto result = vscan_impl(buffer, format, args);
 8590|  1.07M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54.3k, False: 1.02M]
  |  |  ------------------
  ------------------
 8591|  54.3k|        return unexpected(result.error());
 8592|  54.3k|    }
 8593|  1.02M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|  1.07M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4715|  2.37M|{
 4716|  2.37M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|  2.37M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|  2.37M|                  "\n"
 4720|  2.37M|                  "Unsupported range type given as input to a scanning "
 4721|  2.37M|                  "function.\n"
 4722|  2.37M|                  "A range needs to have a character type (value type) "
 4723|  2.37M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|  2.37M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|  2.37M|                  "to be included.\n"
 4726|  2.37M|                  "See the scnlib documentation for more details.");
 4727|  2.37M|    static_assert(
 4728|  2.37M|        !std::is_same_v<T, custom_char_traits>,
 4729|  2.37M|        "\n"
 4730|  2.37M|        "Unsupported range type given as input to a scanning "
 4731|  2.37M|        "function.\n"
 4732|  2.37M|        "String types (std::basic_string, and std::basic_string_view) "
 4733|  2.37M|        "need to use std::char_traits. Strings with custom Traits are "
 4734|  2.37M|        "not supported.");
 4735|  2.37M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|  2.37M|                  "\n"
 4737|  2.37M|                  "Unsupported range type given as input to a scanning "
 4738|  2.37M|                  "function.\n"
 4739|  2.37M|                  "file_marker_found cannot be used as an "
 4740|  2.37M|                  "source range type to scn::scan.\n"
 4741|  2.37M|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|  2.37M|                  "and do not provide an explicit source range, "
 4743|  2.37M|                  "or use scn::scan with a FILE* directly.");
 4744|  2.37M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|  2.37M|                  "\n"
 4746|  2.37M|                  "Unsupported range type given as input to a scanning "
 4747|  2.37M|                  "function.\n"
 4748|  2.37M|                  "In order to be scannable, a range needs to satisfy "
 4749|  2.37M|                  "`forward_range`. `input_range` is not sufficient.");
 4750|  2.37M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|  2.37M|                  "\n"
 4752|  2.37M|                  "Unsupported range type given as input to a scanning "
 4753|  2.37M|                  "function.\n"
 4754|  2.37M|                  "A range needs to model forward_range and have a valid "
 4755|  2.37M|                  "character type (char or wchar_t) to be scannable.\n"
 4756|  2.37M|                  "Examples of scannable ranges are std::string, "
 4757|  2.37M|                  "std::string_view, "
 4758|  2.37M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|  2.37M|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|  2.37M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|  2.37M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4685|  2.37M|{
 4686|  2.37M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4686:19): [Folded - Ignored]
  ------------------
 4687|  2.37M|        return file_marker_found{};
 4688|  2.37M|    }
 4689|  2.37M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4689:24): [Folded - Ignored]
  ------------------
 4690|  2.37M|        if constexpr (ranges::range<Range>) {
 4691|  2.37M|            return insufficient_range{};
 4692|  2.37M|        }
 4693|  2.37M|        else {
 4694|  2.37M|            return invalid_input_range{};
 4695|  2.37M|        }
 4696|  2.37M|    }
 4697|  2.37M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4697:24): [Folded - Ignored]
  ------------------
 4698|  2.37M|        return invalid_char_type{};
 4699|  2.37M|    }
 4700|  2.37M|    else {
 4701|  2.37M|        return make_forward_scan_buffer(r);
 4702|  2.37M|    }
 4703|  2.37M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4519|  2.37M|{
 4520|  2.37M|    return basic_scan_forward_buffer_impl(range);
 4521|  2.37M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4406|  2.37M|    {
 4407|  2.37M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4377|  2.37M|    {
 4378|  2.37M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4146|  2.37M|    {
 4147|  2.37M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4061|  2.37M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  4.63M|    {
 2720|  4.63M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  4.63M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  4.63M|    {
 2701|  4.63M|        return decay_copy(t.begin());
 2702|  4.63M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3325|  6.89M|    {
 3326|  6.89M|        return m_iterator;
 3327|  6.89M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4410|  30.4M|    {
 4411|  30.4M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4411:13): [True: 412k, False: 30.0M]
  ------------------
 4412|   412k|            return false;
 4413|   412k|        }
 4414|  30.0M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4414:23): [Folded - Ignored]
  ------------------
 4415|  30.0M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  30.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4416|  30.0M|        }
 4417|  30.0M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4417:13): [True: 27.7M, False: 2.35M]
  ------------------
 4418|  27.7M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4419|  27.7M|                                          this->m_current_view.begin(),
 4420|  27.7M|                                          this->m_current_view.end());
 4421|  27.7M|        }
 4422|  30.0M|        m_latest = *m_cursor;
 4423|  30.0M|        ++m_cursor;
 4424|  30.0M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4425|  30.0M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4425:23): [Folded - Ignored]
  ------------------
 4426|  30.0M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  30.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4427|  30.0M|        }
 4428|  30.0M|        return true;
 4429|  30.0M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  90.6M|    {
 2777|  90.6M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  90.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  90.6M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  90.6M|    {
 2759|  90.6M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  90.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  90.6M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3329|  92.8M|    {
 3330|  92.8M|        return m_sentinel;
 3331|  92.8M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4066|  2.37M|    {
 4067|  2.37M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  2.37M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4068|  2.37M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1471|   117k|    {
 1472|   117k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|   117k|    {
  443|   117k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.37M|    {
 1173|  2.37M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5918|  2.25M|{
 5919|  2.25M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  2.25M|                      ranges::iterator_t<SourceRange>>) {
 5921|  2.25M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  2.25M|    }
 5923|  2.25M|    else {
 5924|  2.25M|        auto it = ranges::begin(source);
 5925|  2.25M|        while (n > 0) {
 5926|  2.25M|            --n;
 5927|  2.25M|            ++it;
 5928|  2.25M|        }
 5929|  2.25M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  2.25M|    }
 5931|  2.25M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  2.25M|    {
 2720|  2.25M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  2.25M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  2.25M|    {
 2701|  2.25M|        return decay_copy(t.begin());
 2702|  2.25M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5905|  2.25M|{
 5906|  2.25M|    return ranges::end(source);
 5907|  2.25M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  2.25M|    {
 2777|  2.25M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  2.25M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  2.25M|    {
 2759|  2.25M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  2.25M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1425|  2.25M|    {
 1426|  2.25M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|  2.25M|    {
  433|  2.25M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7970|   679k|    {
 7971|   679k|        return m_str;
 7972|   679k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|   679k|{
 8816|   679k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   679k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.2k, False: 642k]
  |  |  ------------------
  ------------------
 8817|  36.2k|        return unexpected(result.error());
 8818|  36.2k|    }
 8819|   642k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   642k|    static_cast<    \
  |  |  929|   642k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   642k|    static_cast<    \
  |  |  929|   642k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   679k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1593|  2.37M|    {
 1594|  2.37M|        return has_value();
 1595|  2.37M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.75M|    {
  481|  4.75M|        return m_has_value;
  482|  4.75M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1599|   117k|    {
 1600|   117k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   117k|        return this->get_unexpected().error();
 1602|   117k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   117k|    {
  464|   117k|        return m_unexpected;
  465|   117k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  39.2k|    {
 1472|  39.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  39.2k|    {
  443|  39.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   748k|    {
 1173|   748k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1648|  2.04M|    {
 1649|  2.04M|        return value();
 1650|  2.04M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1622|  2.25M|    {
 1623|  2.25M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.25M|        return this->get_value();
 1625|  2.25M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.25M|    {
  447|  2.25M|        return m_value;
  448|  2.25M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5825|   709k|    {
 5826|   709k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5676|  2.25M|    {
 5677|  2.25M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|   709k|    {
 1426|   709k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   709k|    {
  433|   709k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3311|  4.63M|    {
 3312|  4.63M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   679k|    {
 7967|   679k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1593|   748k|    {
 1594|   748k|        return has_value();
 1595|   748k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.45M|    {
  481|  1.45M|        return m_has_value;
  482|  1.45M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1668|   709k|    {
 1669|   709k|        return &value();
 1670|   709k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|   709k|    {
 1623|   709k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   709k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   709k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   709k|        return this->get_value();
 1625|   709k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   709k|    {
  447|   709k|        return m_value;
  448|   709k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5693|  2.25M|    {
 5694|  2.25M|        return ranges::begin(m_range);
 5695|  2.25M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8929|   339k|{
 8930|   339k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   339k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   339k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   339k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   339k|    static_cast<    \
  |  |  929|   339k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   339k|    static_cast<    \
  |  |  929|   339k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   339k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8667|  1.07M|{
 8668|  1.07M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8669|  1.07M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8602|  1.07M|{
 8603|  1.07M|#if !SCN_DISABLE_LOCALE
 8604|  1.07M|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|  1.07M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|  1.07M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|  1.07M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|  1.07M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54.3k, False: 1.02M]
  |  |  ------------------
  ------------------
 8611|  54.3k|        return unexpected(result.error());
 8612|  54.3k|    }
 8613|  1.02M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|  1.07M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8968|  69.2k|{
 8969|  69.2k|    T value;
 8970|  69.2k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  69.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  69.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  69.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  69.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.01k, False: 66.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.01k|    }                                                  \
  |  |  |  | 3667|  69.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  66.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  66.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  66.2k|    static_cast<    \
  |  |  929|  66.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  66.2k|    static_cast<    \
  |  |  929|  66.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  69.2k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8680|   223k|{
 8681|   223k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8682|   223k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|   223k|{
 8627|   223k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|   223k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|   223k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.05k, False: 214k]
  |  |  ------------------
  ------------------
 8631|  9.05k|        return unexpected(result.error());
 8632|  9.05k|    }
 8633|   214k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|   223k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1658|   214k|    {
 1659|   214k|        return std::move(value());
 1660|   214k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8862|   366k|{
 8863|   366k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   366k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   366k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   366k|    static_cast<    \
  |  |  929|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   366k|    static_cast<    \
  |  |  929|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   366k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7970|   732k|    {
 7971|   732k|        return m_str;
 7972|   732k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|   732k|{
 8816|   732k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   732k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.2k, False: 696k]
  |  |  ------------------
  ------------------
 8817|  36.2k|        return unexpected(result.error());
 8818|  36.2k|    }
 8819|   696k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   696k|    static_cast<    \
  |  |  929|   696k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   696k|    static_cast<    \
  |  |  929|   696k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   732k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  39.2k|    {
 1472|  39.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  39.2k|    {
  443|  39.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   809k|    {
 1173|   809k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5825|   770k|    {
 5826|   770k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|   770k|    {
 1426|   770k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   770k|    {
  433|   770k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   732k|    {
 7967|   732k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1593|   809k|    {
 1594|   809k|        return has_value();
 1595|   809k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.57M|    {
  481|  1.57M|        return m_has_value;
  482|  1.57M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1668|   770k|    {
 1669|   770k|        return &value();
 1670|   770k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|   770k|    {
 1623|   770k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   770k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   770k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   770k|        return this->get_value();
 1625|   770k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   770k|    {
  447|   770k|        return m_value;
  448|   770k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8929|   366k|{
 8930|   366k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   366k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   366k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   366k|    static_cast<    \
  |  |  929|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   366k|    static_cast<    \
  |  |  929|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   366k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8968|  76.7k|{
 8969|  76.7k|    T value;
 8970|  76.7k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  76.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  76.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  76.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  76.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  76.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.01k, False: 73.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.01k|    }                                                  \
  |  |  |  | 3667|  76.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  73.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  73.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  73.7k|    static_cast<    \
  |  |  929|  73.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  73.7k|    static_cast<    \
  |  |  929|  73.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  76.7k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8862|   370k|{
 8863|   370k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   370k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   370k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   370k|    static_cast<    \
  |  |  929|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   370k|    static_cast<    \
  |  |  929|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   370k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7970|   741k|    {
 7971|   741k|        return m_str;
 7972|   741k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|   741k|{
 8816|   741k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   741k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.2k, False: 705k]
  |  |  ------------------
  ------------------
 8817|  36.2k|        return unexpected(result.error());
 8818|  36.2k|    }
 8819|   705k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   705k|    static_cast<    \
  |  |  929|   705k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   705k|    static_cast<    \
  |  |  929|   705k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   741k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  39.2k|    {
 1472|  39.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  39.2k|    {
  443|  39.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   819k|    {
 1173|   819k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5825|   779k|    {
 5826|   779k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|   779k|    {
 1426|   779k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   779k|    {
  433|   779k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   741k|    {
 7967|   741k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1593|   819k|    {
 1594|   819k|        return has_value();
 1595|   819k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.59M|    {
  481|  1.59M|        return m_has_value;
  482|  1.59M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1668|   779k|    {
 1669|   779k|        return &value();
 1670|   779k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|   779k|    {
 1623|   779k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   779k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   779k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   779k|        return this->get_value();
 1625|   779k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   779k|    {
  447|   779k|        return m_value;
  448|   779k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8929|   370k|{
 8930|   370k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   370k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   370k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   370k|    static_cast<    \
  |  |  929|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   370k|    static_cast<    \
  |  |  929|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   370k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8968|  77.7k|{
 8969|  77.7k|    T value;
 8970|  77.7k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  77.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  77.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  77.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  77.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  77.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.01k, False: 74.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.01k|    }                                                  \
  |  |  |  | 3667|  77.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  74.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  74.7k|    static_cast<    \
  |  |  929|  74.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  74.7k|    static_cast<    \
  |  |  929|  74.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  77.7k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   241k|    {
 2720|   241k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   241k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   241k|    {
 2701|   241k|        return decay_copy(t.begin());
 2702|   241k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1944|  1.55M|{
 1945|  1.55M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  1.55M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|   576k|    {
 2777|   576k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   576k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|   576k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|   576k|    {
 2759|   576k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   576k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|   576k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5391|   174k|{
 5392|   174k|    detail::check_scan_arg_types<Args...>();
 5393|   174k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   174k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5344|   174k|    {
 5345|   174k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   174k|    {
 5356|   174k|        return {detail::make_arg<
 5357|   174k|            kind, Context,
 5358|   174k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   174k|                                 typename Context::char_type>::value>(args)...};
 5360|   174k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5165|   174k|{
 5166|   174k|    return make_value<Context>(value).ref_value;
 5167|   174k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5115|   189k|{
 5116|   189k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   189k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   189k|                                  needs_context_tag>) {
 5120|   189k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   189k|    }
 5122|   189k|    else {
 5123|   189k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   189k|            value, context_tag<Context>{}));
 5125|   189k|    }
 5126|   189k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4954|   189k|    {                                                                        \
 4955|   189k|        return val;                                                          \
 4956|   189k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8586|   131k|{
 8587|   131k|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|   131k|    auto result = vscan_impl(buffer, format, args);
 8590|   131k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 108k, False: 22.6k]
  |  |  ------------------
  ------------------
 8591|   108k|        return unexpected(result.error());
 8592|   108k|    }
 8593|  22.6k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  22.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|   131k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4715|   285k|{
 4716|   285k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|   285k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|   285k|                  "\n"
 4720|   285k|                  "Unsupported range type given as input to a scanning "
 4721|   285k|                  "function.\n"
 4722|   285k|                  "A range needs to have a character type (value type) "
 4723|   285k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|   285k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|   285k|                  "to be included.\n"
 4726|   285k|                  "See the scnlib documentation for more details.");
 4727|   285k|    static_assert(
 4728|   285k|        !std::is_same_v<T, custom_char_traits>,
 4729|   285k|        "\n"
 4730|   285k|        "Unsupported range type given as input to a scanning "
 4731|   285k|        "function.\n"
 4732|   285k|        "String types (std::basic_string, and std::basic_string_view) "
 4733|   285k|        "need to use std::char_traits. Strings with custom Traits are "
 4734|   285k|        "not supported.");
 4735|   285k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|   285k|                  "\n"
 4737|   285k|                  "Unsupported range type given as input to a scanning "
 4738|   285k|                  "function.\n"
 4739|   285k|                  "file_marker_found cannot be used as an "
 4740|   285k|                  "source range type to scn::scan.\n"
 4741|   285k|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|   285k|                  "and do not provide an explicit source range, "
 4743|   285k|                  "or use scn::scan with a FILE* directly.");
 4744|   285k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|   285k|                  "\n"
 4746|   285k|                  "Unsupported range type given as input to a scanning "
 4747|   285k|                  "function.\n"
 4748|   285k|                  "In order to be scannable, a range needs to satisfy "
 4749|   285k|                  "`forward_range`. `input_range` is not sufficient.");
 4750|   285k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|   285k|                  "\n"
 4752|   285k|                  "Unsupported range type given as input to a scanning "
 4753|   285k|                  "function.\n"
 4754|   285k|                  "A range needs to model forward_range and have a valid "
 4755|   285k|                  "character type (char or wchar_t) to be scannable.\n"
 4756|   285k|                  "Examples of scannable ranges are std::string, "
 4757|   285k|                  "std::string_view, "
 4758|   285k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|   285k|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|   285k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|   285k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4654|   285k|{
 4655|   285k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4655:19): [Folded - Ignored]
  ------------------
 4656|   285k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4657|   285k|    }
 4658|   285k|    else {
 4659|   285k|        return invalid_char_type{};
 4660|   285k|    }
 4661|   285k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|   285k|    {
 2851|   285k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   285k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|   285k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|   285k|    {
 2832|   285k|        return t.data();
 2833|   285k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3226|   285k|    {
 3227|   285k|        return ranges::empty(derived())
  ------------------
  |  Branch (3227:16): [True: 452, False: 284k]
  ------------------
 3228|   285k|                   ? nullptr
 3229|   285k|                   : std::addressof(*ranges::begin(derived()));
 3230|   285k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|   285k|    {
 3001|   285k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   285k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|   285k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|   285k|    {
 2974|   285k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   285k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|   285k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3334|   460k|    {
 3335|   460k|        return m_iterator == m_sentinel;
 3336|   460k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3180|   569k|    {
 3181|   569k|        return static_cast<const D&>(*this);
 3182|   569k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   334k|    {
 2720|   334k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   334k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   334k|    {
 2701|   334k|        return decay_copy(t.begin());
 2702|   334k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|  7.33M|    {
 3326|  7.33M|        return m_iterator;
 3327|  7.33M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2925|   285k|    {
 2926|   285k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2927|   285k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2891|   285k|    {
 2892|   285k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   285k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2893|   285k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3341|  1.18M|    {
 3342|  1.18M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  1.18M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|   235k|    {
 1472|   235k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   235k|    {
  443|   235k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   285k|    {
 1173|   285k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5918|  49.7k|{
 5919|  49.7k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  49.7k|                      ranges::iterator_t<SourceRange>>) {
 5921|  49.7k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  49.7k|    }
 5923|  49.7k|    else {
 5924|  49.7k|        auto it = ranges::begin(source);
 5925|  49.7k|        while (n > 0) {
 5926|  49.7k|            --n;
 5927|  49.7k|            ++it;
 5928|  49.7k|        }
 5929|  49.7k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  49.7k|    }
 5931|  49.7k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   350k|    {
 2720|   350k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   350k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   350k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   350k|    {
 2701|   350k|        return decay_copy(t.begin());
 2702|   350k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5905|  49.7k|{
 5906|  49.7k|    return ranges::end(source);
 5907|  49.7k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  49.7k|    {
 2777|  49.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  49.7k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  49.7k|    {
 2759|  49.7k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  49.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  49.7k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|  3.72M|    {
 3330|  3.72M|        return m_sentinel;
 3331|  3.72M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  49.7k|    {
 1426|  49.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  49.7k|    {
  433|  49.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7970|  87.3k|    {
 7971|  87.3k|        return m_str;
 7972|  87.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   174k|    {
 5422|   174k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5374|   174k|    {
 5375|   174k|        return m_argptrs;
 5376|   174k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5473|   524k|    {
 5474|   524k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  87.3k|{
 8816|  87.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  87.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72.4k, False: 14.9k]
  |  |  ------------------
  ------------------
 8817|  72.4k|        return unexpected(result.error());
 8818|  72.4k|    }
 8819|  14.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  87.3k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1593|   285k|    {
 1594|   285k|        return has_value();
 1595|   285k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   570k|    {
  481|   570k|        return m_has_value;
  482|   570k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1599|   235k|    {
 1600|   235k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   235k|        return this->get_unexpected().error();
 1602|   235k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   235k|    {
  464|   235k|        return m_unexpected;
  465|   235k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  78.4k|    {
 1472|  78.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  78.4k|    {
  443|  78.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  94.9k|    {
 1173|  94.9k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1648|  45.2k|    {
 1649|  45.2k|        return value();
 1650|  45.2k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  49.7k|    {
 1623|  49.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  49.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  49.7k|        return this->get_value();
 1625|  49.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  49.7k|    {
  447|  49.7k|        return m_value;
  448|  49.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5825|  16.4k|    {
 5826|  16.4k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5676|  49.7k|    {
 5677|  49.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|  16.4k|    {
 1426|  16.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  16.4k|    {
  433|  16.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5369|   174k|    {
 5370|   174k|        return m_args;
 5371|   174k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3311|  2.59M|    {
 3312|  2.59M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7691|   524k|{
 7692|   524k|    return s;
 7693|   524k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7663|   524k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  87.3k|    {
 7967|  87.3k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1593|  94.9k|    {
 1594|  94.9k|        return has_value();
 1595|  94.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   111k|    {
  481|   111k|        return m_has_value;
  482|   111k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1668|  16.4k|    {
 1669|  16.4k|        return &value();
 1670|  16.4k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|  16.4k|    {
 1623|  16.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  16.4k|        return this->get_value();
 1625|  16.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  16.4k|    {
  447|  16.4k|        return m_value;
  448|  16.4k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5693|  49.7k|    {
 5694|  49.7k|        return ranges::begin(m_range);
 5695|  49.7k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8602|   131k|{
 8603|   131k|#if !SCN_DISABLE_LOCALE
 8604|   131k|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|   131k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|   131k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|   131k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|   131k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 108k, False: 22.6k]
  |  |  ------------------
  ------------------
 8611|   108k|        return unexpected(result.error());
 8612|   108k|    }
 8613|  22.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  22.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|   131k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5150|  15.0k|{
 5151|  15.0k|    check_scan_arg_types<T>();
 5152|       |
 5153|  15.0k|    basic_scan_arg<Context> arg;
 5154|  15.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  15.0k|    arg.m_value = make_value<Context>(value);
 5156|  15.0k|    return arg;
 5157|  15.0k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5236|   570k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|  22.5k|{
 8627|  22.5k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|  22.5k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|  22.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  22.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.1k, False: 4.47k]
  |  |  ------------------
  ------------------
 8631|  18.1k|        return unexpected(result.error());
 8632|  18.1k|    }
 8633|  4.47k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  4.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  22.5k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|  4.47k|    {
 1659|  4.47k|        return std::move(value());
 1660|  4.47k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5391|   174k|{
 5392|   174k|    detail::check_scan_arg_types<Args...>();
 5393|   174k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   174k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5344|   174k|    {
 5345|   174k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   174k|    {
 5356|   174k|        return {detail::make_arg<
 5357|   174k|            kind, Context,
 5358|   174k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   174k|                                 typename Context::char_type>::value>(args)...};
 5360|   174k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5165|   174k|{
 5166|   174k|    return make_value<Context>(value).ref_value;
 5167|   174k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5115|   190k|{
 5116|   190k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   190k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   190k|                                  needs_context_tag>) {
 5120|   190k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   190k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   190k|    }
 5122|   190k|    else {
 5123|   190k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   190k|            value, context_tag<Context>{}));
 5125|   190k|    }
 5126|   190k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4954|   190k|    {                                                                        \
 4955|   190k|        return val;                                                          \
 4956|   190k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7970|  87.5k|    {
 7971|  87.5k|        return m_str;
 7972|  87.5k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   174k|    {
 5422|   174k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5374|   174k|    {
 5375|   174k|        return m_argptrs;
 5376|   174k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  87.5k|{
 8816|  87.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  87.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72.4k, False: 15.0k]
  |  |  ------------------
  ------------------
 8817|  72.4k|        return unexpected(result.error());
 8818|  72.4k|    }
 8819|  15.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  15.0k|    static_cast<    \
  |  |  929|  15.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  15.0k|    static_cast<    \
  |  |  929|  15.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  87.5k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  78.4k|    {
 1472|  78.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  78.4k|    {
  443|  78.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  95.0k|    {
 1173|  95.0k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5825|  16.5k|    {
 5826|  16.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|  16.5k|    {
 1426|  16.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  16.5k|    {
  433|  16.5k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5369|   174k|    {
 5370|   174k|        return m_args;
 5371|   174k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  87.5k|    {
 7967|  87.5k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1593|  95.0k|    {
 1594|  95.0k|        return has_value();
 1595|  95.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   111k|    {
  481|   111k|        return m_has_value;
  482|   111k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1668|  16.5k|    {
 1669|  16.5k|        return &value();
 1670|  16.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|  16.5k|    {
 1623|  16.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  16.5k|        return this->get_value();
 1625|  16.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  16.5k|    {
  447|  16.5k|        return m_value;
  448|  16.5k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5150|  15.0k|{
 5151|  15.0k|    check_scan_arg_types<T>();
 5152|       |
 5153|  15.0k|    basic_scan_arg<Context> arg;
 5154|  15.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  15.0k|    arg.m_value = make_value<Context>(value);
 5156|  15.0k|    return arg;
 5157|  15.0k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5391|   175k|{
 5392|   175k|    detail::check_scan_arg_types<Args...>();
 5393|   175k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   175k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5344|   175k|    {
 5345|   175k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   175k|    {
 5356|   175k|        return {detail::make_arg<
 5357|   175k|            kind, Context,
 5358|   175k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   175k|                                 typename Context::char_type>::value>(args)...};
 5360|   175k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5165|   175k|{
 5166|   175k|    return make_value<Context>(value).ref_value;
 5167|   175k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5115|   190k|{
 5116|   190k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   190k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   190k|                                  needs_context_tag>) {
 5120|   190k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   190k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   190k|    }
 5122|   190k|    else {
 5123|   190k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   190k|            value, context_tag<Context>{}));
 5125|   190k|    }
 5126|   190k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4954|   190k|    {                                                                        \
 4955|   190k|        return val;                                                          \
 4956|   190k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7970|  87.6k|    {
 7971|  87.6k|        return m_str;
 7972|  87.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   175k|    {
 5422|   175k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5374|   175k|    {
 5375|   175k|        return m_argptrs;
 5376|   175k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  87.6k|{
 8816|  87.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  87.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72.4k, False: 15.2k]
  |  |  ------------------
  ------------------
 8817|  72.4k|        return unexpected(result.error());
 8818|  72.4k|    }
 8819|  15.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  15.2k|    static_cast<    \
  |  |  929|  15.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  15.2k|    static_cast<    \
  |  |  929|  15.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  87.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  78.4k|    {
 1472|  78.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  78.4k|    {
  443|  78.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  95.1k|    {
 1173|  95.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5825|  16.7k|    {
 5826|  16.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|  16.7k|    {
 1426|  16.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  16.7k|    {
  433|  16.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5369|   175k|    {
 5370|   175k|        return m_args;
 5371|   175k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  87.6k|    {
 7967|  87.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1593|  95.1k|    {
 1594|  95.1k|        return has_value();
 1595|  95.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   111k|    {
  481|   111k|        return m_has_value;
  482|   111k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1668|  16.7k|    {
 1669|  16.7k|        return &value();
 1670|  16.7k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|  16.7k|    {
 1623|  16.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  16.7k|        return this->get_value();
 1625|  16.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  16.7k|    {
  447|  16.7k|        return m_value;
  448|  16.7k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5150|  15.0k|{
 5151|  15.0k|    check_scan_arg_types<T>();
 5152|       |
 5153|  15.0k|    basic_scan_arg<Context> arg;
 5154|  15.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  15.0k|    arg.m_value = make_value<Context>(value);
 5156|  15.0k|    return arg;
 5157|  15.0k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   235k|    {
 2720|   235k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   235k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   235k|    {
 2701|   235k|        return decay_copy(t.begin());
 2702|   235k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1944|  4.75M|{
 1945|  4.75M|    return SCN_FWD(t);
  ------------------
  |  |  930|  4.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  4.75M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|   569k|    {
 2777|   569k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   569k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|   569k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|   569k|    {
 2759|   569k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   569k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|   569k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8586|   131k|{
 8587|   131k|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|   131k|    auto result = vscan_impl(buffer, format, args);
 8590|   131k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 108k, False: 22.5k]
  |  |  ------------------
  ------------------
 8591|   108k|        return unexpected(result.error());
 8592|   108k|    }
 8593|  22.5k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  22.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|   131k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4715|   284k|{
 4716|   284k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|   284k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|   284k|                  "\n"
 4720|   284k|                  "Unsupported range type given as input to a scanning "
 4721|   284k|                  "function.\n"
 4722|   284k|                  "A range needs to have a character type (value type) "
 4723|   284k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|   284k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|   284k|                  "to be included.\n"
 4726|   284k|                  "See the scnlib documentation for more details.");
 4727|   284k|    static_assert(
 4728|   284k|        !std::is_same_v<T, custom_char_traits>,
 4729|   284k|        "\n"
 4730|   284k|        "Unsupported range type given as input to a scanning "
 4731|   284k|        "function.\n"
 4732|   284k|        "String types (std::basic_string, and std::basic_string_view) "
 4733|   284k|        "need to use std::char_traits. Strings with custom Traits are "
 4734|   284k|        "not supported.");
 4735|   284k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|   284k|                  "\n"
 4737|   284k|                  "Unsupported range type given as input to a scanning "
 4738|   284k|                  "function.\n"
 4739|   284k|                  "file_marker_found cannot be used as an "
 4740|   284k|                  "source range type to scn::scan.\n"
 4741|   284k|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|   284k|                  "and do not provide an explicit source range, "
 4743|   284k|                  "or use scn::scan with a FILE* directly.");
 4744|   284k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|   284k|                  "\n"
 4746|   284k|                  "Unsupported range type given as input to a scanning "
 4747|   284k|                  "function.\n"
 4748|   284k|                  "In order to be scannable, a range needs to satisfy "
 4749|   284k|                  "`forward_range`. `input_range` is not sufficient.");
 4750|   284k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|   284k|                  "\n"
 4752|   284k|                  "Unsupported range type given as input to a scanning "
 4753|   284k|                  "function.\n"
 4754|   284k|                  "A range needs to model forward_range and have a valid "
 4755|   284k|                  "character type (char or wchar_t) to be scannable.\n"
 4756|   284k|                  "Examples of scannable ranges are std::string, "
 4757|   284k|                  "std::string_view, "
 4758|   284k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|   284k|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|   284k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|   284k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4685|   284k|{
 4686|   284k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4686:19): [Folded - Ignored]
  ------------------
 4687|   284k|        return file_marker_found{};
 4688|   284k|    }
 4689|   284k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4689:24): [Folded - Ignored]
  ------------------
 4690|   284k|        if constexpr (ranges::range<Range>) {
 4691|   284k|            return insufficient_range{};
 4692|   284k|        }
 4693|   284k|        else {
 4694|   284k|            return invalid_input_range{};
 4695|   284k|        }
 4696|   284k|    }
 4697|   284k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4697:24): [Folded - Ignored]
  ------------------
 4698|   284k|        return invalid_char_type{};
 4699|   284k|    }
 4700|   284k|    else {
 4701|   284k|        return make_forward_scan_buffer(r);
 4702|   284k|    }
 4703|   284k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4519|   284k|{
 4520|   284k|    return basic_scan_forward_buffer_impl(range);
 4521|   284k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4406|   284k|    {
 4407|   284k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4377|   284k|    {
 4378|   284k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4146|   284k|    {
 4147|   284k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4061|   284k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   334k|    {
 2720|   334k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   334k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   334k|    {
 2701|   334k|        return decay_copy(t.begin());
 2702|   334k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3325|   384k|    {
 3326|   384k|        return m_iterator;
 3327|   384k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4410|  1.26M|    {
 4411|  1.26M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4411:13): [True: 146k, False: 1.12M]
  ------------------
 4412|   146k|            return false;
 4413|   146k|        }
 4414|  1.12M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4414:23): [Folded - Ignored]
  ------------------
 4415|  1.12M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4416|  1.12M|        }
 4417|  1.12M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4417:13): [True: 837k, False: 284k]
  ------------------
 4418|   837k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4419|   837k|                                          this->m_current_view.begin(),
 4420|   837k|                                          this->m_current_view.end());
 4421|   837k|        }
 4422|  1.12M|        m_latest = *m_cursor;
 4423|  1.12M|        ++m_cursor;
 4424|  1.12M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4425|  1.12M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4425:23): [Folded - Ignored]
  ------------------
 4426|  1.12M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4427|  1.12M|        }
 4428|  1.12M|        return true;
 4429|  1.12M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  3.51M|    {
 2777|  3.51M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  3.51M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  3.51M|    {
 2759|  3.51M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  3.51M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3329|  3.56M|    {
 3330|  3.56M|        return m_sentinel;
 3331|  3.56M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4066|   284k|    {
 4067|   284k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   284k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4068|   284k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1471|   235k|    {
 1472|   235k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|   235k|    {
  443|   235k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   284k|    {
 1173|   284k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5918|  49.5k|{
 5919|  49.5k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  49.5k|                      ranges::iterator_t<SourceRange>>) {
 5921|  49.5k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  49.5k|    }
 5923|  49.5k|    else {
 5924|  49.5k|        auto it = ranges::begin(source);
 5925|  49.5k|        while (n > 0) {
 5926|  49.5k|            --n;
 5927|  49.5k|            ++it;
 5928|  49.5k|        }
 5929|  49.5k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  49.5k|    }
 5931|  49.5k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  49.5k|    {
 2720|  49.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  49.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  49.5k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  49.5k|    {
 2701|  49.5k|        return decay_copy(t.begin());
 2702|  49.5k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5905|  49.5k|{
 5906|  49.5k|    return ranges::end(source);
 5907|  49.5k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  49.5k|    {
 2777|  49.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  49.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  49.5k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  49.5k|    {
 2759|  49.5k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  49.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  49.5k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1425|  49.5k|    {
 1426|  49.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|  49.5k|    {
  433|  49.5k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7970|  87.3k|    {
 7971|  87.3k|        return m_str;
 7972|  87.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|  87.3k|{
 8816|  87.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  87.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72.4k, False: 14.9k]
  |  |  ------------------
  ------------------
 8817|  72.4k|        return unexpected(result.error());
 8818|  72.4k|    }
 8819|  14.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  87.3k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1593|   284k|    {
 1594|   284k|        return has_value();
 1595|   284k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   569k|    {
  481|   569k|        return m_has_value;
  482|   569k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1599|   235k|    {
 1600|   235k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   235k|        return this->get_unexpected().error();
 1602|   235k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   235k|    {
  464|   235k|        return m_unexpected;
  465|   235k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  78.4k|    {
 1472|  78.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  78.4k|    {
  443|  78.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  94.8k|    {
 1173|  94.8k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1648|  45.1k|    {
 1649|  45.1k|        return value();
 1650|  45.1k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1622|  49.5k|    {
 1623|  49.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  49.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  49.5k|        return this->get_value();
 1625|  49.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  49.5k|    {
  447|  49.5k|        return m_value;
  448|  49.5k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5825|  16.3k|    {
 5826|  16.3k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5676|  49.5k|    {
 5677|  49.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|  16.3k|    {
 1426|  16.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  16.3k|    {
  433|  16.3k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3311|   334k|    {
 3312|   334k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  87.3k|    {
 7967|  87.3k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1593|  94.8k|    {
 1594|  94.8k|        return has_value();
 1595|  94.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   111k|    {
  481|   111k|        return m_has_value;
  482|   111k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1668|  16.3k|    {
 1669|  16.3k|        return &value();
 1670|  16.3k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|  16.3k|    {
 1623|  16.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  16.3k|        return this->get_value();
 1625|  16.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  16.3k|    {
  447|  16.3k|        return m_value;
  448|  16.3k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5693|  49.5k|    {
 5694|  49.5k|        return ranges::begin(m_range);
 5695|  49.5k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8602|   131k|{
 8603|   131k|#if !SCN_DISABLE_LOCALE
 8604|   131k|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|   131k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|   131k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|   131k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|   131k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 108k, False: 22.5k]
  |  |  ------------------
  ------------------
 8611|   108k|        return unexpected(result.error());
 8612|   108k|    }
 8613|  22.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  22.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|   131k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|  22.5k|{
 8627|  22.5k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|  22.5k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|  22.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  22.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.1k, False: 4.45k]
  |  |  ------------------
  ------------------
 8631|  18.1k|        return unexpected(result.error());
 8632|  18.1k|    }
 8633|  4.45k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  4.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  22.5k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1658|  4.45k|    {
 1659|  4.45k|        return std::move(value());
 1660|  4.45k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7970|  87.4k|    {
 7971|  87.4k|        return m_str;
 7972|  87.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|  87.4k|{
 8816|  87.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  87.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72.4k, False: 15.0k]
  |  |  ------------------
  ------------------
 8817|  72.4k|        return unexpected(result.error());
 8818|  72.4k|    }
 8819|  15.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  15.0k|    static_cast<    \
  |  |  929|  15.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  15.0k|    static_cast<    \
  |  |  929|  15.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  87.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  78.4k|    {
 1472|  78.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  78.4k|    {
  443|  78.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  94.9k|    {
 1173|  94.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5825|  16.5k|    {
 5826|  16.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|  16.5k|    {
 1426|  16.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  16.5k|    {
  433|  16.5k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  87.4k|    {
 7967|  87.4k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1593|  94.9k|    {
 1594|  94.9k|        return has_value();
 1595|  94.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   111k|    {
  481|   111k|        return m_has_value;
  482|   111k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1668|  16.5k|    {
 1669|  16.5k|        return &value();
 1670|  16.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|  16.5k|    {
 1623|  16.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  16.5k|        return this->get_value();
 1625|  16.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  16.5k|    {
  447|  16.5k|        return m_value;
  448|  16.5k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7970|  87.6k|    {
 7971|  87.6k|        return m_str;
 7972|  87.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|  87.6k|{
 8816|  87.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  87.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72.4k, False: 15.1k]
  |  |  ------------------
  ------------------
 8817|  72.4k|        return unexpected(result.error());
 8818|  72.4k|    }
 8819|  15.1k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  15.1k|    static_cast<    \
  |  |  929|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  15.1k|    static_cast<    \
  |  |  929|  15.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  87.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  78.4k|    {
 1472|  78.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  78.4k|    {
  443|  78.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  95.1k|    {
 1173|  95.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5825|  16.6k|    {
 5826|  16.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|  16.6k|    {
 1426|  16.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  16.6k|    {
  433|  16.6k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  87.6k|    {
 7967|  87.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1593|  95.1k|    {
 1594|  95.1k|        return has_value();
 1595|  95.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   111k|    {
  481|   111k|        return m_has_value;
  482|   111k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1668|  16.6k|    {
 1669|  16.6k|        return &value();
 1670|  16.6k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|  16.6k|    {
 1623|  16.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  16.6k|        return this->get_value();
 1625|  16.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  16.6k|    {
  447|  16.6k|        return m_value;
  448|  16.6k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3563|  5.71M|    {
 3564|  5.71M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  5.71M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|  5.71M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  24.5M|    {
 3570|  24.5M|        return m_code == good;
 3571|  24.5M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|   543k|    {
 3581|   543k|        return m_code;
 3582|   543k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|   106M|    {
 3326|   106M|        return m_iterator;
 3327|   106M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  9.41M|    {
 3326|  9.41M|        return m_iterator;
 3327|  9.41M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6255|  3.80M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6267|  1.06M|    {
 6268|  1.06M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|  1.06M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6268:23): [Folded - Ignored]
  ------------------
 6269|  1.06M|            m_specs.localized = true;
 6270|  1.06M|        }
 6271|      0|        else {
 6272|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6273|      0|        }
 6274|  1.06M|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6298|  2.74M|    {
 6299|  2.74M|        m_specs.type = type;
 6300|  2.74M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6371|  3.80M|    {
 6372|  3.80M|        return static_cast<bool>(m_error);
 6373|  3.80M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|   543k|{
 3605|   543k|    return a.code() == b;
 3606|   543k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|   543k|{
 3609|   543k|    return !(a == b);
 3610|   543k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7058|  1.06M|{
 7059|  1.06M|    switch (type) {
 7060|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7060:9): [True: 0, False: 1.06M]
  ------------------
 7061|      0|            return arg_type_category::none;
 7062|       |
 7063|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7063:9): [True: 0, False: 1.06M]
  ------------------
 7064|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 1.06M]
  ------------------
 7065|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7065:9): [True: 0, False: 1.06M]
  ------------------
 7066|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7066:9): [True: 0, False: 1.06M]
  ------------------
 7067|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 1.06M]
  ------------------
 7068|      0|            return arg_type_category::integer;
 7069|       |
 7070|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 1.06M]
  ------------------
 7071|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 1.06M]
  ------------------
 7072|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7072:9): [True: 0, False: 1.06M]
  ------------------
 7073|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7073:9): [True: 0, False: 1.06M]
  ------------------
 7074|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 1.06M]
  ------------------
 7075|      0|            return arg_type_category::unsigned_integer;
 7076|       |
 7077|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 1.06M]
  ------------------
 7078|      0|            return arg_type_category::pointer;
 7079|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 1.06M]
  ------------------
 7080|      0|            return arg_type_category::boolean;
 7081|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 1.06M]
  ------------------
 7082|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7082:9): [True: 0, False: 1.06M]
  ------------------
 7083|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 1.06M]
  ------------------
 7084|      0|            return arg_type_category::character;
 7085|       |
 7086|   330k|        case arg_type::float_type:
  ------------------
  |  Branch (7086:9): [True: 330k, False: 730k]
  ------------------
 7087|   692k|        case arg_type::double_type:
  ------------------
  |  Branch (7087:9): [True: 362k, False: 699k]
  ------------------
 7088|  1.06M|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7088:9): [True: 368k, False: 692k]
  ------------------
 7089|  1.06M|            return arg_type_category::floating;
 7090|       |
 7091|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7091:9): [True: 0, False: 1.06M]
  ------------------
 7092|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 1.06M]
  ------------------
 7093|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7093:9): [True: 0, False: 1.06M]
  ------------------
 7094|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7094:9): [True: 0, False: 1.06M]
  ------------------
 7095|      0|            return arg_type_category::string;
 7096|       |
 7097|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 1.06M]
  ------------------
 7098|      0|            return arg_type_category::custom;
 7099|       |
 7100|      0|            SCN_CLANG_PUSH
 7101|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7102|      0|        default:
  ------------------
  |  Branch (7102:9): [True: 0, False: 1.06M]
  ------------------
 7103|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7104|  1.06M|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7105|  1.06M|            SCN_CLANG_POP
 7106|  1.06M|    }
 7107|       |
 7108|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  1.06M|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2891|  4.62M|    {
 2892|  4.62M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  4.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2893|  4.62M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2925|  4.62M|    {
 2926|  4.62M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2927|  4.62M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2948|  4.62M|    {
 2949|  4.62M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2950|  4.62M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2957|  4.62M|    {
 2958|  4.62M|        return fn::impl(std::forward<T>(t));
 2959|  4.62M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3649|  1.30k|{
 3650|  1.30k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.30k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  2.28k|{
 3650|  2.28k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  2.28k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3649|  33.6k|{
 3650|  33.6k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  33.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  33.6k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7188|  3.80M|{
 7189|  3.80M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7189:9): [True: 2.74M, False: 1.06M]
  ------------------
 7190|  3.80M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7190:10): [True: 0, False: 2.74M]
  ------------------
 7191|  2.74M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7191:10): [True: 0, False: 2.74M]
  ------------------
 7192|      0|        SCN_UNLIKELY_ATTR
 7193|      0|        return handler.on_error("Invalid type specifier for float type");
 7194|      0|    }
 7195|  3.80M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4190|   688M|    {
 4191|   688M|        return m_end == nullptr;
 4192|   688M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|  1.84M|{
 3711|  1.84M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3711:19): [Folded - Ignored]
  ------------------
 3712|  1.84M|                                          const CharT*, const CharT*>) {
 3713|  1.84M|        return {first, last};
 3714|  1.84M|    }
 3715|  1.84M|    else {
 3716|  1.84M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|  1.84M|    }
 3718|  1.84M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4206|  9.02M|    {
 4207|  9.02M|        if (!stores_parent()) {
  ------------------
  |  Branch (4207:13): [True: 0, False: 9.02M]
  ------------------
 4208|      0|            return make_string_view_from_pointers(
 4209|      0|                static_cast<const CharT*>(m_begin) + position(),
 4210|      0|                static_cast<const CharT*>(m_end));
 4211|      0|        }
 4212|  9.02M|        return parent()->get_segment_starting_at(position());
 4213|  9.02M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4200|   383M|    {
 4201|   383M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   383M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   383M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4202|   383M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4203|   383M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4096|  9.02M|    {
 4097|  9.02M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  9.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.97M, False: 5.05M]
  |  |  ------------------
  ------------------
 4098|  9.02M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4099|  3.97M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4100|  3.97M|        }
 4101|  5.05M|        const auto start = pos - m_putback_buffer.size();
 4102|  5.05M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  5.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4103|  5.05M|        return m_current_view.substr(start);
 4104|  5.05M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4195|  6.29M|    {
 4196|  6.29M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  6.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4197|  6.29M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4198|  6.29M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4185|  16.5M|    {
 4186|  16.5M|        return m_position;
 4187|  16.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4118|  7.13M|    {
 4119|  7.13M|        return m_is_contiguous;
 4120|  7.13M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4190|  27.0M|    {
 4191|  27.0M|        return m_end == nullptr;
 4192|  27.0M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|  47.2k|{
 3711|  47.2k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3711:19): [Folded - Ignored]
  ------------------
 3712|  47.2k|                                          const CharT*, const CharT*>) {
 3713|  47.2k|        return {first, last};
 3714|  47.2k|    }
 3715|  47.2k|    else {
 3716|  47.2k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|  47.2k|    }
 3718|  47.2k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4206|   385k|    {
 4207|   385k|        if (!stores_parent()) {
  ------------------
  |  Branch (4207:13): [True: 0, False: 385k]
  ------------------
 4208|      0|            return make_string_view_from_pointers(
 4209|      0|                static_cast<const CharT*>(m_begin) + position(),
 4210|      0|                static_cast<const CharT*>(m_end));
 4211|      0|        }
 4212|   385k|        return parent()->get_segment_starting_at(position());
 4213|   385k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4200|  14.6M|    {
 4201|  14.6M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  14.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4202|  14.6M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4203|  14.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4096|   385k|    {
 4097|   385k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96.7k, False: 288k]
  |  |  ------------------
  ------------------
 4098|   385k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4099|  96.7k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4100|  96.7k|        }
 4101|   288k|        const auto start = pos - m_putback_buffer.size();
 4102|   288k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   288k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   288k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4103|   288k|        return m_current_view.substr(start);
 4104|   288k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4195|   722k|    {
 4196|   722k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   722k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   722k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4197|   722k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4198|   722k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4185|  1.12M|    {
 4186|  1.12M|        return m_position;
 4187|  1.12M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4118|   854k|    {
 4119|   854k|        return m_is_contiguous;
 4120|   854k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3175|  21.6M|    {
 3176|  21.6M|        return static_cast<D&>(*this);
 3177|  21.6M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|  10.8M|    {
 2974|  10.8M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  10.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|  10.8M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|  10.8M|    {
 3001|  10.8M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  10.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|  10.8M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3216|  10.8M|    {
 3217|  10.8M|        return ranges::empty(derived())
  ------------------
  |  Branch (3217:16): [True: 18.3k, False: 10.8M]
  ------------------
 3218|  10.8M|                   ? nullptr
 3219|  10.8M|                   : std::addressof(*ranges::begin(derived()));
 3220|  10.8M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3175|   350k|    {
 3176|   350k|        return static_cast<D&>(*this);
 3177|   350k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|   175k|    {
 2974|   175k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|   175k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|   175k|    {
 3001|   175k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|   175k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3216|   175k|    {
 3217|   175k|        return ranges::empty(derived())
  ------------------
  |  Branch (3217:16): [True: 0, False: 175k]
  ------------------
 3218|   175k|                   ? nullptr
 3219|   175k|                   : std::addressof(*ranges::begin(derived()));
 3220|   175k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8164|  1.70M|    {
 8165|  1.70M|        return ranges::subrange{begin(), end()};
 8166|  1.70M|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8148|  5.02M|    {
 8149|  5.02M|        return m_current;
 8150|  5.02M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8156|  1.70M|    {
 8157|  1.70M|        return ranges::default_sentinel;
 8158|  1.70M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3311|  26.3M|    {
 3312|  26.3M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7986|  8.15M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|  2.37M|    {
 1833|  2.37M|        return detail::transform_error_impl(std::move(*this),
 1834|  2.37M|                                            std::forward<F>(f));
 1835|  2.37M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|  2.37M|{
 1319|  2.37M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.37M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.37M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.37M|            return result(*std::forward<Exp>(exp));
 1323|  2.37M|        }
 1324|       |
 1325|  2.37M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.37M|        return result(unexpect, monostate{});
 1327|  2.37M|    }
 1328|  2.37M|    else {
 1329|  2.37M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.37M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.37M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.34M, False: 28.2k]
  |  |  ------------------
  ------------------
 1331|  2.37M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.37M|                   : result(unexpect,
 1333|  28.2k|                            trivial_invoke(std::forward<F>(f),
 1334|  28.2k|                                           std::forward<Exp>(exp).error()));
 1335|  2.37M|    }
 1336|  2.37M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  25.5M|    {
  481|  25.5M|        return m_has_value;
  482|  25.5M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1658|  8.59M|    {
 1659|  8.59M|        return std::move(value());
 1660|  8.59M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1622|  9.93M|    {
 1623|  9.93M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  9.93M|        return this->get_value();
 1625|  9.93M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  9.93M|    {
  447|  9.93M|        return m_value;
  448|  9.93M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1425|  9.10M|    {
 1426|  9.10M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  9.10M|    {
  433|  9.10M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  13.4M|    {
 1173|  13.4M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1206|  57.9k|{
 1207|  57.9k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|  57.9k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1609|  79.5k|    {
 1610|  79.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  79.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  79.5k|        return std::move(this->get_unexpected().error());
 1612|  79.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|   108k|    {
  464|   108k|        return m_unexpected;
  465|   108k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  356|   485k|    {
  357|   485k|        return m_unexpected;
  358|   485k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1481|  2.30M|    {
 1482|  2.30M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  2.59M|    {
  443|  2.59M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8164|   217k|    {
 8165|   217k|        return ranges::subrange{begin(), end()};
 8166|   217k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8148|   470k|    {
 8149|   470k|        return m_current;
 8150|   470k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8156|   217k|    {
 8157|   217k|        return ranges::default_sentinel;
 8158|   217k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3311|  2.19M|    {
 3312|  2.19M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|   284k|    {
 1833|   284k|        return detail::transform_error_impl(std::move(*this),
 1834|   284k|                                            std::forward<F>(f));
 1835|   284k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|   284k|{
 1319|   284k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   284k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   284k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   284k|            return result(*std::forward<Exp>(exp));
 1323|   284k|        }
 1324|       |
 1325|   284k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   284k|        return result(unexpect, monostate{});
 1327|   284k|    }
 1328|   284k|    else {
 1329|   284k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   284k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   284k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 282k, False: 2.12k]
  |  |  ------------------
  ------------------
 1331|   284k|                   ? result(*std::forward<Exp>(exp))
 1332|   284k|                   : result(unexpect,
 1333|  2.12k|                            trivial_invoke(std::forward<F>(f),
 1334|  2.12k|                                           std::forward<Exp>(exp).error()));
 1335|   284k|    }
 1336|   284k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  2.39M|    {
  481|  2.39M|        return m_has_value;
  482|  2.39M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1658|   957k|    {
 1659|   957k|        return std::move(value());
 1660|   957k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1622|   960k|    {
 1623|   960k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   960k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   960k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   960k|        return this->get_value();
 1625|   960k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|   960k|    {
  447|   960k|        return m_value;
  448|   960k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1425|   432k|    {
 1426|   432k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   432k|    {
  433|   432k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.63M|    {
 1173|  1.63M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1609|  50.2k|    {
 1610|  50.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  50.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  50.2k|        return std::move(this->get_unexpected().error());
 1612|  50.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  51.0k|    {
  464|  51.0k|        return m_unexpected;
  465|  51.0k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1481|   516k|    {
 1482|   516k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  1.16M|    {
  443|  1.16M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  342|   199k|    {
  343|   199k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   199k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   199k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1471|   255k|    {
 1472|   255k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  2.53M|    {
  443|  2.53M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  13.4M|    {
 1173|  13.4M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1425|  9.20M|    {
 1426|  9.20M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  9.20M|    {
  433|  9.20M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1593|  15.7M|    {
 1594|  15.7M|        return has_value();
 1595|  15.7M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  480|  24.6M|    {
  481|  24.6M|        return m_has_value;
  482|  24.6M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1599|   309k|    {
 1600|   309k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   309k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   309k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   309k|        return this->get_unexpected().error();
 1602|   309k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   309k|    {
  464|   309k|        return m_unexpected;
  465|   309k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1658|  6.93M|    {
 1659|  6.93M|        return std::move(value());
 1660|  6.93M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1622|  8.59M|    {
 1623|  8.59M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  8.59M|        return this->get_value();
 1625|  8.59M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  446|  8.59M|    {
  447|  8.59M|        return m_value;
  448|  8.59M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1471|   523k|    {
 1472|   523k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|   915k|    {
  443|   915k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.63M|    {
 1173|  1.63M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1425|   683k|    {
 1426|   683k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   683k|    {
  433|   683k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1593|  1.91M|    {
 1594|  1.91M|        return has_value();
 1595|  1.91M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  480|  3.09M|    {
  481|  3.09M|        return m_has_value;
  482|  3.09M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1599|   632k|    {
 1600|   632k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   632k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   632k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   632k|        return this->get_unexpected().error();
 1602|   632k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   632k|    {
  464|   632k|        return m_unexpected;
  465|   632k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1658|   507k|    {
 1659|   507k|        return std::move(value());
 1660|   507k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1622|   544k|    {
 1623|   544k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   544k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   544k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   544k|        return this->get_value();
 1625|   544k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  446|   544k|    {
  447|   544k|        return m_value;
  448|   544k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|  2.38M|    {
 1833|  2.38M|        return detail::transform_error_impl(std::move(*this),
 1834|  2.38M|                                            std::forward<F>(f));
 1835|  2.38M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|  2.38M|{
 1319|  2.38M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.38M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.38M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.38M|            return result(*std::forward<Exp>(exp));
 1323|  2.38M|        }
 1324|       |
 1325|  2.38M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.38M|        return result(unexpect, monostate{});
 1327|  2.38M|    }
 1328|  2.38M|    else {
 1329|  2.38M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.38M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.38M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.35M, False: 25.5k]
  |  |  ------------------
  ------------------
 1331|  2.38M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.38M|                   : result(unexpect,
 1333|  25.5k|                            trivial_invoke(std::forward<F>(f),
 1334|  25.5k|                                           std::forward<Exp>(exp).error()));
 1335|  2.38M|    }
 1336|  2.38M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  9.16M|    {
  481|  9.16M|        return m_has_value;
  482|  9.16M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1658|  2.35M|    {
 1659|  2.35M|        return std::move(value());
 1660|  2.35M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1622|  3.25M|    {
 1623|  3.25M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.25M|        return this->get_value();
 1625|  3.25M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  3.25M|    {
  447|  3.25M|        return m_value;
  448|  3.25M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1609|  25.5k|    {
 1610|  25.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  25.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  25.5k|        return std::move(this->get_unexpected().error());
 1612|  25.5k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  32.4k|    {
  464|  32.4k|        return m_unexpected;
  465|  32.4k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1481|  2.27M|    {
 1482|  2.27M|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|  16.9M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|   285k|    {
 1472|   285k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4234|  57.8M|    {
 4235|  57.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  57.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4236|       |
 4237|  57.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4237:13): [True: 0, False: 57.8M]
  ------------------
 4238|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4239|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|      0|            return *ptr;
 4241|      0|        }
 4242|       |
 4243|  57.8M|        auto res = read_at_position();
 4244|  57.8M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  57.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4245|  57.8M|        return parent()->get_character_at(m_position);
 4246|  57.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4299|   225M|    {
 4300|   225M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   225M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   225M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4301|       |
 4302|   225M|        if (!stores_parent()) {
  ------------------
  |  Branch (4302:13): [True: 0, False: 225M]
  ------------------
 4303|      0|            return true;
 4304|      0|        }
 4305|       |
 4306|   225M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   225M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 194M, False: 30.4M]
  |  |  ------------------
  ------------------
 4307|   194M|            return true;
 4308|   194M|        }
 4309|       |
 4310|  60.5M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4310:16): [True: 30.4M, False: 30.0M]
  ------------------
 4311|  30.4M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4311:17): [True: 412k, False: 30.0M]
  ------------------
 4312|   412k|                return false;
 4313|   412k|            }
 4314|  30.4M|        }
 4315|  30.0M|        return true;
 4316|  30.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4076|   292M|    {
 4077|   292M|        return m_putback_buffer.size() + m_current_view.size();
 4078|   292M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4107|  57.8M|    {
 4108|  57.8M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  57.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.1M, False: 21.6M]
  |  |  ------------------
  ------------------
 4109|  57.8M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4110|  36.1M|            return m_putback_buffer[pos];
 4111|  36.1M|        }
 4112|  21.6M|        const auto start = pos - m_putback_buffer.size();
 4113|  21.6M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  21.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4114|  21.6M|        return m_current_view[start];
 4115|  21.6M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4220|   115M|    {
 4221|   115M|        ++m_position;
 4222|   115M|        (void)read_at_position();
 4223|   115M|        return *this;
 4224|   115M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4269|  55.0M|    {
 4270|  55.0M|        return !(lhs == rhs);
 4271|  55.0M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4264|  61.2M|    {
 4265|  61.2M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4265:16): [True: 61.2M, False: 0]
  |  Branch (4265:46): [True: 7.97M, False: 53.2M]
  ------------------
 4266|  61.2M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4275|  21.0M|    {
 4276|  21.0M|        return x.is_at_end();
 4277|  21.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4319|  52.1M|    {
 4320|  52.1M|        if (m_end) {
  ------------------
  |  Branch (4320:13): [True: 0, False: 52.1M]
  ------------------
 4321|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4322|      0|        }
 4323|  52.1M|        if (!m_begin) {
  ------------------
  |  Branch (4323:13): [True: 0, False: 52.1M]
  ------------------
 4324|      0|            return true;
 4325|      0|        }
 4326|  52.1M|        return !read_at_position();
 4327|  52.1M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1425|  15.3M|    {
 1426|  15.3M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  15.3M|    {
  433|  15.3M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  15.4M|    {
 1173|  15.4M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  342|   148k|    {
  343|   148k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   148k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   148k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|   108k|    {
 1472|   108k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|   108k|    {
  443|   108k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|   242k|    {
  352|   242k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   242k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|   242k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1593|  6.80M|    {
 1594|  6.80M|        return has_value();
 1595|  6.80M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1648|  1.33M|    {
 1649|  1.33M|        return value();
 1650|  1.33M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  342|  94.6k|    {
  343|  94.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  94.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  94.6k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  21.0k|    {
 1472|  21.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  21.0k|    {
  443|  21.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  3.30M|    {
 1173|  3.30M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  3.28M|    {
 1426|  3.28M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|  3.28M|    {
  433|  3.28M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1593|  3.30M|    {
 1594|  3.30M|        return has_value();
 1595|  3.30M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|  6.60M|    {
  481|  6.60M|        return m_has_value;
  482|  6.60M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1599|  21.0k|    {
 1600|  21.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  21.0k|        return this->get_unexpected().error();
 1602|  21.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  21.0k|    {
  464|  21.0k|        return m_unexpected;
  465|  21.0k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|  3.28M|    {
 1659|  3.28M|        return std::move(value());
 1660|  3.28M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  3.28M|    {
 1623|  3.28M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.28M|        return this->get_value();
 1625|  3.28M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|  3.28M|    {
  447|  3.28M|        return m_value;
  448|  3.28M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  74.3M|    {
 3330|  74.3M|        return m_sentinel;
 3331|  74.3M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  342|  92.3k|    {
  343|  92.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  92.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  92.3k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  356|  20.3M|    {
  357|  20.3M|        return m_unexpected;
  358|  20.3M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|  5.58M|    {
  352|  5.58M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.58M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  5.58M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  342|  24.9M|    {
  343|  24.9M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  24.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  24.9M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  356|  24.9M|    {
  357|  24.9M|        return m_unexpected;
  358|  24.9M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  351|  24.9M|    {
  352|  24.9M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  24.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  24.9M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1206|   147k|{
 1207|   147k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|   147k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  342|  5.34M|    {
  343|  5.34M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.34M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  5.34M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1599|  28.8k|    {
 1600|  28.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  28.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  28.8k|        return this->get_unexpected().error();
 1602|  28.8k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  2.39M|    {
 1472|  2.39M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  2.44M|    {
  443|  2.44M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  26.3M|    {
 1173|  26.3M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1425|  1.35M|    {
 1426|  1.35M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.35M|    {
  433|  1.35M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|  13.3M|    {
 1472|  13.3M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  13.3M|    {
  443|  13.3M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1593|  28.7M|    {
 1594|  28.7M|        return has_value();
 1595|  28.7M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  50.4M|    {
  481|  50.4M|        return m_has_value;
  482|  50.4M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1599|  6.48M|    {
 1600|  6.48M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  6.48M|        return this->get_unexpected().error();
 1602|  6.48M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  6.48M|    {
  464|  6.48M|        return m_unexpected;
  465|  6.48M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1425|  2.59M|    {
 1426|  2.59M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|  2.59M|    {
  433|  2.59M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.59M|    {
 1173|  2.59M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|    491|    {
 1472|    491|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  442|    491|    {
  443|    491|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1648|  6.73M|    {
 1649|  6.73M|        return value();
 1650|  6.73M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1622|  12.9M|    {
 1623|  12.9M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  12.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  12.9M|        return this->get_value();
 1625|  12.9M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  12.9M|    {
  447|  12.9M|        return m_value;
  448|  12.9M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1593|   244k|    {
 1594|   244k|        return has_value();
 1595|   244k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  480|  5.18M|    {
  481|  5.18M|        return m_has_value;
  482|  5.18M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1658|  2.34M|    {
 1659|  2.34M|        return std::move(value());
 1660|  2.34M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1622|  2.59M|    {
 1623|  2.59M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.59M|        return this->get_value();
 1625|  2.59M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  446|  2.59M|    {
  447|  2.59M|        return m_value;
  448|  2.59M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|  6.29M|    {
 1833|  6.29M|        return detail::transform_error_impl(std::move(*this),
 1834|  6.29M|                                            std::forward<F>(f));
 1835|  6.29M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|  6.29M|{
 1319|  6.29M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  6.29M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  6.29M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  6.29M|            return result(*std::forward<Exp>(exp));
 1323|  6.29M|        }
 1324|       |
 1325|  6.29M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  6.29M|        return result(unexpect, monostate{});
 1327|  6.29M|    }
 1328|  6.29M|    else {
 1329|  6.29M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  6.29M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  6.29M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.24M, False: 51.3k]
  |  |  ------------------
  ------------------
 1331|  6.29M|                   ? result(*std::forward<Exp>(exp))
 1332|  6.29M|                   : result(unexpect,
 1333|  51.3k|                            trivial_invoke(std::forward<F>(f),
 1334|  51.3k|                                           std::forward<Exp>(exp).error()));
 1335|  6.29M|    }
 1336|  6.29M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1425|  9.18M|    {
 1426|  9.18M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  9.18M|    {
  433|  9.18M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1481|  51.3k|    {
 1482|  51.3k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1658|  6.24M|    {
 1659|  6.24M|        return std::move(value());
 1660|  6.24M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3325|  2.73M|    {
 3326|  2.73M|        return m_iterator;
 3327|  2.73M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3329|  2.73M|    {
 3330|  2.73M|        return m_sentinel;
 3331|  2.73M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1593|  15.7M|    {
 1594|  15.7M|        return has_value();
 1595|  15.7M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|  24.7M|    {
  481|  24.7M|        return m_has_value;
  482|  24.7M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1599|   377k|    {
 1600|   377k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   377k|        return this->get_unexpected().error();
 1602|   377k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   377k|    {
  464|   377k|        return m_unexpected;
  465|   377k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1658|  6.87M|    {
 1659|  6.87M|        return std::move(value());
 1660|  6.87M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1622|  8.58M|    {
 1623|  8.58M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  8.58M|        return this->get_value();
 1625|  8.58M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|  8.58M|    {
  447|  8.58M|        return m_value;
  448|  8.58M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  4.28M|{
  322|  4.28M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  4.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  4.28M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3311|  2.14M|    {
 3312|  2.14M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4286|  31.1M|    {
 4287|  31.1M|        return !x.is_at_end();
 4288|  31.1M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1425|  1.74M|    {
 1426|  1.74M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.74M|    {
  433|  1.74M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  32.4k|    {
 1472|  32.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  32.4k|    {
  443|  32.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  5.88M|    {
 1173|  5.88M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1425|  5.84M|    {
 1426|  5.84M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  5.84M|    {
  433|  5.84M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1593|  3.49M|    {
 1594|  3.49M|        return has_value();
 1595|  3.49M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1648|   899k|    {
 1649|   899k|        return value();
 1650|   899k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  18.3k|    {
 1472|  18.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  18.3k|    {
  443|  18.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  3.22M|    {
 1173|  3.22M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|  3.20M|    {
 1426|  3.20M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  3.20M|    {
  433|  3.20M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1593|  3.22M|    {
 1594|  3.22M|        return has_value();
 1595|  3.22M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  480|  6.44M|    {
  481|  6.44M|        return m_has_value;
  482|  6.44M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1599|  18.3k|    {
 1600|  18.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  18.3k|        return this->get_unexpected().error();
 1602|  18.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  18.3k|    {
  464|  18.3k|        return m_unexpected;
  465|  18.3k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|  3.20M|    {
 1659|  3.20M|        return std::move(value());
 1660|  3.20M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|  3.20M|    {
 1623|  3.20M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.20M|        return this->get_value();
 1625|  3.20M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  446|  3.20M|    {
  447|  3.20M|        return m_value;
  448|  3.20M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1599|  6.88k|    {
 1600|  6.88k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  6.88k|        return this->get_unexpected().error();
 1602|  6.88k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  2.38M|    {
 1472|  2.38M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  2.38M|    {
  443|  2.38M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  13.4M|    {
 1173|  13.4M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1425|   915k|    {
 1426|   915k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|   915k|    {
  433|   915k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|  9.14M|    {
 1472|  9.14M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  9.14M|    {
  443|  9.14M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1593|  15.8M|    {
 1594|  15.8M|        return has_value();
 1595|  15.8M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  26.9M|    {
  481|  26.9M|        return m_has_value;
  482|  26.9M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1599|  6.29M|    {
 1600|  6.29M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  6.29M|        return this->get_unexpected().error();
 1602|  6.29M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  6.29M|    {
  464|  6.29M|        return m_unexpected;
  465|  6.29M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1425|  2.43M|    {
 1426|  2.43M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  2.43M|    {
  433|  2.43M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.43M|    {
 1173|  2.43M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|    156|    {
 1472|    156|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|    156|    {
  443|    156|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1648|  2.58M|    {
 1649|  2.58M|        return value();
 1650|  2.58M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1622|  2.58M|    {
 1623|  2.58M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.58M|        return this->get_value();
 1625|  2.58M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  2.58M|    {
  447|  2.58M|        return m_value;
  448|  2.58M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1593|  78.6k|    {
 1594|  78.6k|        return has_value();
 1595|  78.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  4.87M|    {
  481|  4.87M|        return m_has_value;
  482|  4.87M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1658|  2.35M|    {
 1659|  2.35M|        return std::move(value());
 1660|  2.35M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1622|  2.43M|    {
 1623|  2.43M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.43M|        return this->get_value();
 1625|  2.43M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  2.43M|    {
  447|  2.43M|        return m_value;
  448|  2.43M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1425|  1.00M|    {
 1426|  1.00M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.00M|    {
  433|  1.00M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|  4.55M|    {
 2851|  4.55M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  4.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|  4.55M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|  4.55M|    {
 2832|  4.55M|        return t.data();
 2833|  4.55M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1425|  1.70M|    {
 1426|  1.70M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.70M|    {
  433|  1.70M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1471|  1.06M|    {
 1472|  1.06M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  442|  1.06M|    {
  443|  1.06M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  14.9M|    {
 1173|  14.9M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1425|  13.6M|    {
 1426|  13.6M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  432|  13.6M|    {
  433|  13.6M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1658|  9.24M|    {
 1659|  9.24M|        return std::move(value());
 1660|  9.24M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1206|  5.43M|{
 1207|  5.43M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|  5.43M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1832|  2.34M|    {
 1833|  2.34M|        return detail::transform_error_impl(std::move(*this),
 1834|  2.34M|                                            std::forward<F>(f));
 1835|  2.34M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1318|  2.34M|{
 1319|  2.34M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.34M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.34M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.34M|            return result(*std::forward<Exp>(exp));
 1323|  2.34M|        }
 1324|       |
 1325|  2.34M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.34M|        return result(unexpect, monostate{});
 1327|  2.34M|    }
 1328|  2.34M|    else {
 1329|  2.34M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.34M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.34M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.34M, False: 0]
  |  |  ------------------
  ------------------
 1331|  2.34M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.34M|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  2.34M|    }
 1336|  2.34M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|  2.34M|    {
 1426|  2.34M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|  2.34M|    {
  433|  2.34M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.34M|    {
 1173|  2.34M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|  2.34M|    {
 1594|  2.34M|        return has_value();
 1595|  2.34M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.69M|    {
  481|  4.69M|        return m_has_value;
  482|  4.69M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1658|  2.34M|    {
 1659|  2.34M|        return std::move(value());
 1660|  2.34M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|  2.34M|    {
 1623|  2.34M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.34M|        return this->get_value();
 1625|  2.34M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.34M|    {
  447|  2.34M|        return m_value;
  448|  2.34M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1818|  2.27M|    {
 1819|  2.27M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|  2.27M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1318|  2.27M|{
 1319|  2.27M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.27M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.27M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.27M|            return result(*std::forward<Exp>(exp));
 1323|  2.27M|        }
 1324|       |
 1325|  2.27M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.27M|        return result(unexpect, monostate{});
 1327|  2.27M|    }
 1328|  2.27M|    else {
 1329|  2.27M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.27M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.27M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.27M]
  |  |  ------------------
  ------------------
 1331|  2.27M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.27M|                   : result(unexpect,
 1333|  2.27M|                            trivial_invoke(std::forward<F>(f),
 1334|  2.27M|                                           std::forward<Exp>(exp).error()));
 1335|  2.27M|    }
 1336|  2.27M|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1648|  1.70M|    {
 1649|  1.70M|        return value();
 1650|  1.70M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3663|   575k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1668|   243k|    {
 1669|   243k|        return &value();
 1670|   243k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2719|  1.63M|    {
 2720|  1.63M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  1.63M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2700|  1.63M|    {
 2701|  1.63M|        return decay_copy(t.begin());
 2702|  1.63M|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1944|  1.63M|{
 1945|  1.63M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  1.63M|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3663|  1.02M|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1832|  2.35M|    {
 1833|  2.35M|        return detail::transform_error_impl(std::move(*this),
 1834|  2.35M|                                            std::forward<F>(f));
 1835|  2.35M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1318|  2.35M|{
 1319|  2.35M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.35M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.35M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.35M|            return result(*std::forward<Exp>(exp));
 1323|  2.35M|        }
 1324|       |
 1325|  2.35M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.35M|        return result(unexpect, monostate{});
 1327|  2.35M|    }
 1328|  2.35M|    else {
 1329|  2.35M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.35M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.35M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.35M, False: 0]
  |  |  ------------------
  ------------------
 1331|  2.35M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.35M|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  2.35M|    }
 1336|  2.35M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  2.35M|    {
 1426|  2.35M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  2.35M|    {
  433|  2.35M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.35M|    {
 1173|  2.35M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|  2.35M|    {
 1594|  2.35M|        return has_value();
 1595|  2.35M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.71M|    {
  481|  4.71M|        return m_has_value;
  482|  4.71M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|  2.35M|    {
 1659|  2.35M|        return std::move(value());
 1660|  2.35M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  2.35M|    {
 1623|  2.35M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.35M|        return this->get_value();
 1625|  2.35M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.35M|    {
  447|  2.35M|        return m_value;
  448|  2.35M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1818|  2.25M|    {
 1819|  2.25M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|  2.25M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1318|  2.25M|{
 1319|  2.25M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.25M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.25M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.25M|            return result(*std::forward<Exp>(exp));
 1323|  2.25M|        }
 1324|       |
 1325|  2.25M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.25M|        return result(unexpect, monostate{});
 1327|  2.25M|    }
 1328|  2.25M|    else {
 1329|  2.25M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.25M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.25M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.25M]
  |  |  ------------------
  ------------------
 1331|  2.25M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.25M|                   : result(unexpect,
 1333|  2.25M|                            trivial_invoke(std::forward<F>(f),
 1334|  2.25M|                                           std::forward<Exp>(exp).error()));
 1335|  2.25M|    }
 1336|  2.25M|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3643|  2.25M|    {
 3644|  2.25M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1648|  1.66M|    {
 1649|  1.66M|        return value();
 1650|  1.66M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1668|  78.5k|    {
 1669|  78.5k|        return &value();
 1670|  78.5k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3643|  2.27M|    {
 3644|  2.27M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|   648k|    {
 1472|   648k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4234|  2.46M|    {
 4235|  2.46M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  2.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4236|       |
 4237|  2.46M|        if (!stores_parent()) {
  ------------------
  |  Branch (4237:13): [True: 0, False: 2.46M]
  ------------------
 4238|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4239|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|      0|            return *ptr;
 4241|      0|        }
 4242|       |
 4243|  2.46M|        auto res = read_at_position();
 4244|  2.46M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  2.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4245|  2.46M|        return parent()->get_character_at(m_position);
 4246|  2.46M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4299|  8.11M|    {
 4300|  8.11M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  8.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4301|       |
 4302|  8.11M|        if (!stores_parent()) {
  ------------------
  |  Branch (4302:13): [True: 0, False: 8.11M]
  ------------------
 4303|      0|            return true;
 4304|      0|        }
 4305|       |
 4306|  8.11M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  8.11M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.84M, False: 1.26M]
  |  |  ------------------
  ------------------
 4307|  6.84M|            return true;
 4308|  6.84M|        }
 4309|       |
 4310|  2.39M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4310:16): [True: 1.26M, False: 1.12M]
  ------------------
 4311|  1.26M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4311:17): [True: 146k, False: 1.12M]
  ------------------
 4312|   146k|                return false;
 4313|   146k|            }
 4314|  1.26M|        }
 4315|  1.12M|        return true;
 4316|  1.26M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4076|  11.2M|    {
 4077|  11.2M|        return m_putback_buffer.size() + m_current_view.size();
 4078|  11.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4107|  2.46M|    {
 4108|  2.46M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  2.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.07M, False: 390k]
  |  |  ------------------
  ------------------
 4109|  2.46M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4110|  2.07M|            return m_putback_buffer[pos];
 4111|  2.07M|        }
 4112|   390k|        const auto start = pos - m_putback_buffer.size();
 4113|   390k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   390k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   390k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4114|   390k|        return m_current_view[start];
 4115|   390k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4220|  2.92M|    {
 4221|  2.92M|        ++m_position;
 4222|  2.92M|        (void)read_at_position();
 4223|  2.92M|        return *this;
 4224|  2.92M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4269|   927k|    {
 4270|   927k|        return !(lhs == rhs);
 4271|   927k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4264|  1.30M|    {
 4265|  1.30M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4265:16): [True: 1.30M, False: 0]
  |  Branch (4265:46): [True: 415k, False: 891k]
  ------------------
 4266|  1.30M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4275|  1.96M|    {
 4276|  1.96M|        return x.is_at_end();
 4277|  1.96M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4319|  2.72M|    {
 4320|  2.72M|        if (m_end) {
  ------------------
  |  Branch (4320:13): [True: 0, False: 2.72M]
  ------------------
 4321|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4322|      0|        }
 4323|  2.72M|        if (!m_begin) {
  ------------------
  |  Branch (4323:13): [True: 0, False: 2.72M]
  ------------------
 4324|      0|            return true;
 4325|      0|        }
 4326|  2.72M|        return !read_at_position();
 4327|  2.72M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   754k|{
 3803|   754k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3803:19): [Folded - Ignored]
  ------------------
 3804|   754k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|   754k|    }
 3806|   754k|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3806:24): [Folded - Ignored]
  ------------------
 3807|   754k|        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|   754k|    }
 3809|   754k|    else {
 3810|       |        // utf-32
 3811|   754k|        static_assert(sizeof(U) == 4);
 3812|   754k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   754k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   754k|        return 1;
 3814|   754k|    }
 3815|   754k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1425|  1.33M|    {
 1426|  1.33M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.33M|    {
  433|  1.33M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.38M|    {
 1173|  1.38M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  51.0k|    {
 1472|  51.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  51.0k|    {
  443|  51.0k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1593|   379k|    {
 1594|   379k|        return has_value();
 1595|   379k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1648|  2.80k|    {
 1649|  2.80k|        return value();
 1650|  2.80k|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   754k|{
 4009|   754k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4009:19): [Folded - Ignored]
  ------------------
 4010|   754k|        return decode_utf8_code_point_exhaustive(input);
 4011|   754k|    }
 4012|   754k|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4012:24): [Folded - Ignored]
  ------------------
 4013|   754k|        return decode_utf16_code_point_exhaustive(input);
 4014|   754k|    }
 4015|   754k|    else {
 4016|   754k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   754k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   754k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   754k|        auto cp = static_cast<char32_t>(input.front());
 4018|   754k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   754k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 236k, False: 517k]
  |  |  ------------------
  ------------------
 4019|   236k|            return invalid_code_point;
 4020|   236k|        }
 4021|   517k|        return cp;
 4022|   754k|    }
 4023|   754k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  1.59k|    {
 1472|  1.59k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  1.59k|    {
  443|  1.59k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   253k|    {
 1173|   253k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|   251k|    {
 1426|   251k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|   251k|    {
  433|   251k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1593|   253k|    {
 1594|   253k|        return has_value();
 1595|   253k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|   506k|    {
  481|   506k|        return m_has_value;
  482|   506k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1599|  1.59k|    {
 1600|  1.59k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.59k|        return this->get_unexpected().error();
 1602|  1.59k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.59k|    {
  464|  1.59k|        return m_unexpected;
  465|  1.59k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|   251k|    {
 1659|   251k|        return std::move(value());
 1660|   251k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|   251k|    {
 1623|   251k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   251k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   251k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   251k|        return this->get_value();
 1625|   251k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|   251k|    {
  447|   251k|        return m_value;
  448|   251k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  4.41M|    {
 3330|  4.41M|        return m_sentinel;
 3331|  4.41M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1599|    735|    {
 1600|    735|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    735|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    735|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|    735|        return this->get_unexpected().error();
 1602|    735|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|   331k|    {
 1472|   331k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|   379k|    {
  443|   379k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.44M|    {
 1173|  2.44M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1425|  2.80k|    {
 1426|  2.80k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  2.80k|    {
  433|  2.80k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|  1.33M|    {
 1472|  1.33M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  1.33M|    {
  443|  1.33M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1593|  2.72M|    {
 1594|  2.72M|        return has_value();
 1595|  2.72M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  5.15M|    {
  481|  5.15M|        return m_has_value;
  482|  5.15M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1599|  1.13M|    {
 1600|  1.13M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.13M|        return this->get_unexpected().error();
 1602|  1.13M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  1.13M|    {
  464|  1.13M|        return m_unexpected;
  465|  1.13M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1425|   285k|    {
 1426|   285k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|   285k|    {
  433|   285k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   285k|    {
 1173|   285k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|     27|    {
 1472|     27|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  442|     27|    {
  443|     27|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1648|   107k|    {
 1649|   107k|        return value();
 1650|   107k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1622|   781k|    {
 1623|   781k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   781k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   781k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   781k|        return this->get_value();
 1625|   781k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  446|   781k|    {
  447|   781k|        return m_value;
  448|   781k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1593|  2.44k|    {
 1594|  2.44k|        return has_value();
 1595|  2.44k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  480|   570k|    {
  481|   570k|        return m_has_value;
  482|   570k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1658|   282k|    {
 1659|   282k|        return std::move(value());
 1660|   282k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1622|   285k|    {
 1623|   285k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   285k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   285k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   285k|        return this->get_value();
 1625|   285k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  446|   285k|    {
  447|   285k|        return m_value;
  448|   285k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|   722k|    {
 1833|   722k|        return detail::transform_error_impl(std::move(*this),
 1834|   722k|                                            std::forward<F>(f));
 1835|   722k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|   722k|{
 1319|   722k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   722k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   722k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   722k|            return result(*std::forward<Exp>(exp));
 1323|   722k|        }
 1324|       |
 1325|   722k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   722k|        return result(unexpect, monostate{});
 1327|   722k|    }
 1328|   722k|    else {
 1329|   722k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   722k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   722k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 674k, False: 48.1k]
  |  |  ------------------
  ------------------
 1331|   722k|                   ? result(*std::forward<Exp>(exp))
 1332|   722k|                   : result(unexpect,
 1333|  48.1k|                            trivial_invoke(std::forward<F>(f),
 1334|  48.1k|                                           std::forward<Exp>(exp).error()));
 1335|   722k|    }
 1336|   722k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1425|   727k|    {
 1426|   727k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   727k|    {
  433|   727k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1481|  48.1k|    {
 1482|  48.1k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1658|   674k|    {
 1659|   674k|        return std::move(value());
 1660|   674k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3325|  55.7k|    {
 3326|  55.7k|        return m_iterator;
 3327|  55.7k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3329|  55.7k|    {
 3330|  55.7k|        return m_sentinel;
 3331|  55.7k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1593|  1.91M|    {
 1594|  1.91M|        return has_value();
 1595|  1.91M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|  3.21M|    {
  481|  3.21M|        return m_has_value;
  482|  3.21M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1599|   882k|    {
 1600|   882k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   882k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   882k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   882k|        return this->get_unexpected().error();
 1602|   882k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   882k|    {
  464|   882k|        return m_unexpected;
  465|   882k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1658|   382k|    {
 1659|   382k|        return std::move(value());
 1660|   382k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1622|   418k|    {
 1623|   418k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   418k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   418k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   418k|        return this->get_value();
 1625|   418k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|   418k|    {
  447|   418k|        return m_value;
  448|   418k|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  301|   100k|{
  302|   100k|    return p;
  303|   100k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|   100k|{
  322|   100k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   100k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3311|  50.0k|    {
 3312|  50.0k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4286|   761k|    {
 4287|   761k|        return !x.is_at_end();
 4288|   761k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1425|  36.2k|    {
 1426|  36.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  36.2k|    {
  433|  36.2k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  50.5k|    {
 1472|  50.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  50.5k|    {
  443|  50.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.32M|    {
 1173|  1.32M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1425|  1.27M|    {
 1426|  1.27M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.27M|    {
  433|  1.27M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1593|   314k|    {
 1594|   314k|        return has_value();
 1595|   314k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  2.33M|    {
  481|  2.33M|        return m_has_value;
  482|  2.33M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1648|  1.25k|    {
 1649|  1.25k|        return value();
 1650|  1.25k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1622|   959k|    {
 1623|   959k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   959k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   959k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   959k|        return this->get_value();
 1625|   959k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|   959k|    {
  447|   959k|        return m_value;
  448|   959k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  1.59k|    {
 1472|  1.59k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  1.59k|    {
  443|  1.59k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   253k|    {
 1173|   253k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|   251k|    {
 1426|   251k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|   251k|    {
  433|   251k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|   285k|    {
 1833|   285k|        return detail::transform_error_impl(std::move(*this),
 1834|   285k|                                            std::forward<F>(f));
 1835|   285k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|   285k|{
 1319|   285k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   285k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   285k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   285k|            return result(*std::forward<Exp>(exp));
 1323|   285k|        }
 1324|       |
 1325|   285k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   285k|        return result(unexpect, monostate{});
 1327|   285k|    }
 1328|   285k|    else {
 1329|   285k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   285k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   285k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 282k, False: 2.12k]
  |  |  ------------------
  ------------------
 1331|   285k|                   ? result(*std::forward<Exp>(exp))
 1332|   285k|                   : result(unexpect,
 1333|  2.12k|                            trivial_invoke(std::forward<F>(f),
 1334|  2.12k|                                           std::forward<Exp>(exp).error()));
 1335|   285k|    }
 1336|   285k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1658|   957k|    {
 1659|   957k|        return std::move(value());
 1660|   957k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1609|  50.2k|    {
 1610|  50.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  50.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  50.2k|        return std::move(this->get_unexpected().error());
 1612|  50.2k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  50.5k|    {
  464|  50.5k|        return m_unexpected;
  465|  50.5k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1481|   391k|    {
 1482|   391k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1593|   253k|    {
 1594|   253k|        return has_value();
 1595|   253k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  480|   506k|    {
  481|   506k|        return m_has_value;
  482|   506k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1599|  1.59k|    {
 1600|  1.59k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.59k|        return this->get_unexpected().error();
 1602|  1.59k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.59k|    {
  464|  1.59k|        return m_unexpected;
  465|  1.59k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|   251k|    {
 1659|   251k|        return std::move(value());
 1660|   251k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|   251k|    {
 1623|   251k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   251k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   251k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   251k|        return this->get_value();
 1625|   251k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  446|   251k|    {
  447|   251k|        return m_value;
  448|   251k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1599|    240|    {
 1600|    240|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    240|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    240|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|    240|        return this->get_unexpected().error();
 1602|    240|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|   331k|    {
 1472|   331k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|   379k|    {
  443|   379k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.18M|    {
 1173|  2.18M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1425|  1.25k|    {
 1426|  1.25k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.25k|    {
  433|  1.25k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|  1.11M|    {
 1472|  1.11M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  1.11M|    {
  443|  1.11M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1593|  2.47M|    {
 1594|  2.47M|        return has_value();
 1595|  2.47M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  4.58M|    {
  481|  4.58M|        return m_has_value;
  482|  4.58M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1599|  1.00M|    {
 1600|  1.00M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.00M|        return this->get_unexpected().error();
 1602|  1.00M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  1.00M|    {
  464|  1.00M|        return m_unexpected;
  465|  1.00M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1425|   283k|    {
 1426|   283k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|   283k|    {
  433|   283k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   284k|    {
 1173|   284k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|     12|    {
 1472|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|     12|    {
  443|     12|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1648|  41.1k|    {
 1649|  41.1k|        return value();
 1650|  41.1k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1622|   715k|    {
 1623|   715k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   715k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   715k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   715k|        return this->get_value();
 1625|   715k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|   715k|    {
  447|   715k|        return m_value;
  448|   715k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1593|  1.01k|    {
 1594|  1.01k|        return has_value();
 1595|  1.01k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|   568k|    {
  481|   568k|        return m_has_value;
  482|   568k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1658|   282k|    {
 1659|   282k|        return std::move(value());
 1660|   282k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1622|   283k|    {
 1623|   283k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   283k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   283k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   283k|        return this->get_value();
 1625|   283k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|   283k|    {
  447|   283k|        return m_value;
  448|   283k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|   722k|    {
 1833|   722k|        return detail::transform_error_impl(std::move(*this),
 1834|   722k|                                            std::forward<F>(f));
 1835|   722k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|   722k|{
 1319|   722k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   722k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   722k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   722k|            return result(*std::forward<Exp>(exp));
 1323|   722k|        }
 1324|       |
 1325|   722k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   722k|        return result(unexpect, monostate{});
 1327|   722k|    }
 1328|   722k|    else {
 1329|   722k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   722k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   722k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 674k, False: 48.1k]
  |  |  ------------------
  ------------------
 1331|   722k|                   ? result(*std::forward<Exp>(exp))
 1332|   722k|                   : result(unexpect,
 1333|  48.1k|                            trivial_invoke(std::forward<F>(f),
 1334|  48.1k|                                           std::forward<Exp>(exp).error()));
 1335|   722k|    }
 1336|   722k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1425|   695k|    {
 1426|   695k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   695k|    {
  433|   695k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1481|  48.1k|    {
 1482|  48.1k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1658|   674k|    {
 1659|   674k|        return std::move(value());
 1660|   674k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|   175k|    {
 2851|   175k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|   175k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|   175k|    {
 2832|   175k|        return t.data();
 2833|   175k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1425|  36.2k|    {
 1426|  36.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  36.2k|    {
  433|  36.2k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1832|   282k|    {
 1833|   282k|        return detail::transform_error_impl(std::move(*this),
 1834|   282k|                                            std::forward<F>(f));
 1835|   282k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1318|   282k|{
 1319|   282k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   282k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   282k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   282k|            return result(*std::forward<Exp>(exp));
 1323|   282k|        }
 1324|       |
 1325|   282k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   282k|        return result(unexpect, monostate{});
 1327|   282k|    }
 1328|   282k|    else {
 1329|   282k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   282k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   282k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 282k, False: 0]
  |  |  ------------------
  ------------------
 1331|   282k|                   ? result(*std::forward<Exp>(exp))
 1332|   282k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|   282k|    }
 1336|   282k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   282k|    {
 1426|   282k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|   282k|    {
  433|   282k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   282k|    {
 1173|   282k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|   282k|    {
 1594|   282k|        return has_value();
 1595|   282k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   565k|    {
  481|   565k|        return m_has_value;
  482|   565k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1658|   282k|    {
 1659|   282k|        return std::move(value());
 1660|   282k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   282k|    {
 1623|   282k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   282k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   282k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   282k|        return this->get_value();
 1625|   282k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   282k|    {
  447|   282k|        return m_value;
  448|   282k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1818|   514k|    {
 1819|   514k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|   514k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1318|   514k|{
 1319|   514k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   514k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   514k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   514k|            return result(*std::forward<Exp>(exp));
 1323|   514k|        }
 1324|       |
 1325|   514k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   514k|        return result(unexpect, monostate{});
 1327|   514k|    }
 1328|   514k|    else {
 1329|   514k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   514k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   514k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 514k]
  |  |  ------------------
  ------------------
 1331|   514k|                   ? result(*std::forward<Exp>(exp))
 1332|   514k|                   : result(unexpect,
 1333|   514k|                            trivial_invoke(std::forward<F>(f),
 1334|   514k|                                           std::forward<Exp>(exp).error()));
 1335|   514k|    }
 1336|   514k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1648|  36.2k|    {
 1649|  36.2k|        return value();
 1650|  36.2k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3663|  45.0k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1668|  2.42k|    {
 1669|  2.42k|        return &value();
 1670|  2.42k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2719|   237k|    {
 2720|   237k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   237k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2700|   237k|    {
 2701|   237k|        return decay_copy(t.begin());
 2702|   237k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1944|   237k|{
 1945|   237k|    return SCN_FWD(t);
  ------------------
  |  |  930|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|   237k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3663|   111k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1832|   282k|    {
 1833|   282k|        return detail::transform_error_impl(std::move(*this),
 1834|   282k|                                            std::forward<F>(f));
 1835|   282k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1318|   282k|{
 1319|   282k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   282k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   282k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   282k|            return result(*std::forward<Exp>(exp));
 1323|   282k|        }
 1324|       |
 1325|   282k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   282k|        return result(unexpect, monostate{});
 1327|   282k|    }
 1328|   282k|    else {
 1329|   282k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   282k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   282k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 282k, False: 0]
  |  |  ------------------
  ------------------
 1331|   282k|                   ? result(*std::forward<Exp>(exp))
 1332|   282k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|   282k|    }
 1336|   282k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|   282k|    {
 1426|   282k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|   282k|    {
  433|   282k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   282k|    {
 1173|   282k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|   282k|    {
 1594|   282k|        return has_value();
 1595|   282k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   565k|    {
  481|   565k|        return m_has_value;
  482|   565k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|   282k|    {
 1659|   282k|        return std::move(value());
 1660|   282k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|   282k|    {
 1623|   282k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   282k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   282k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   282k|        return this->get_value();
 1625|   282k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   282k|    {
  447|   282k|        return m_value;
  448|   282k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1818|   389k|    {
 1819|   389k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|   389k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1318|   389k|{
 1319|   389k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   389k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   389k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   389k|            return result(*std::forward<Exp>(exp));
 1323|   389k|        }
 1324|       |
 1325|   389k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   389k|        return result(unexpect, monostate{});
 1327|   389k|    }
 1328|   389k|    else {
 1329|   389k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   389k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   389k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 389k]
  |  |  ------------------
  ------------------
 1331|   389k|                   ? result(*std::forward<Exp>(exp))
 1332|   389k|                   : result(unexpect,
 1333|   389k|                            trivial_invoke(std::forward<F>(f),
 1334|   389k|                                           std::forward<Exp>(exp).error()));
 1335|   389k|    }
 1336|   389k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3643|   389k|    {
 3644|   389k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1648|  36.2k|    {
 1649|  36.2k|        return value();
 1650|  36.2k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1668|    998|    {
 1669|    998|        return &value();
 1670|    998|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3643|   514k|    {
 3644|   514k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1425|   257k|    {
 1426|   257k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  432|   257k|    {
  433|   257k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3649|   162k|{
 3650|   162k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|   162k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|  2.11M|    {
 2851|  2.11M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|  2.11M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|  2.11M|    {
 2832|  2.11M|        return t.data();
 2833|  2.11M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5461|  4.29M|    {
 5462|  4.29M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.29M]
  |  |  ------------------
  ------------------
 5463|      0|            return max_size();
 5464|      0|        }
 5465|       |
 5466|  4.29M|        return static_cast<std::size_t>(m_desc &
 5467|  4.29M|                                        ((1 << detail::packed_arg_bits) - 1));
 5468|  4.29M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5486|  8.59M|    {
 5487|  8.59M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5488|  8.59M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5429|  4.29M|    {
 5430|  4.29M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.29M]
  |  |  ------------------
  ------------------
 5431|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5432|      0|                return m_args[id];
 5433|      0|            }
 5434|      0|            return {};
 5435|      0|        }
 5436|       |
 5437|  4.29M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.29M]
  |  |  ------------------
  ------------------
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  4.29M|        const auto t = type(id);
 5442|  4.29M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  4.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.29M]
  |  |  ------------------
  ------------------
 5443|      0|            return {};
 5444|      0|        }
 5445|       |
 5446|  4.29M|        basic_scan_arg<Context> arg;
 5447|  4.29M|        arg.m_type = t;
 5448|  4.29M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5448:13): [True: 4.29M, False: 0]
  ------------------
 5449|  4.29M|            arg.m_value.ref_value = m_builtin_values[id];
 5450|  4.29M|        }
 5451|      0|        else {
 5452|      0|            arg.m_value = m_values[id];
 5453|      0|        }
 5454|  4.29M|        return arg;
 5455|  4.29M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5495|  4.29M|    {
 5496|       |        // First (0th) index is size, types start after that
 5497|  4.29M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5498|  4.29M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5499|  4.29M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5500|  4.29M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5490|  4.29M|    {
 5491|  4.29M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5492|  4.29M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5242|  8.12M|    {
 5243|  8.12M|        return m_type != detail::arg_type::none_type;
 5244|  8.12M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   718k|{
 8413|   718k|#define SCN_VISIT(Type)                                         \
 8414|   718k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   718k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   718k|    }                                                           \
 8417|   718k|    else {                                                      \
 8418|   718k|        return vis(monostate_val);                              \
 8419|   718k|    }
 8420|       |
 8421|   718k|    monostate monostate_val{};
 8422|       |
 8423|   718k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 718k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 718k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 718k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 718k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 718k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 718k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 718k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 718k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 718k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 718k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 718k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 718k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 718k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 718k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 718k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|   222k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 222k, False: 496k]
  ------------------
 8455|   222k|            SCN_VISIT(float);
  ------------------
  |  | 8414|   222k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   222k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   222k|    }                                                           \
  |  | 8417|   222k|    else {                                                      \
  |  | 8418|   222k|        return vis(monostate_val);                              \
  |  | 8419|   222k|    }
  ------------------
 8456|   245k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 245k, False: 472k]
  ------------------
 8457|   245k|            SCN_VISIT(double);
  ------------------
  |  | 8414|   245k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   245k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   245k|    }                                                           \
  |  | 8417|   245k|    else {                                                      \
  |  | 8418|   245k|        return vis(monostate_val);                              \
  |  | 8419|   245k|    }
  ------------------
 8458|   250k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 250k, False: 468k]
  ------------------
 8459|   250k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|   250k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   250k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   250k|    }                                                           \
  |  | 8417|   250k|    else {                                                      \
  |  | 8418|   250k|        return vis(monostate_val);                              \
  |  | 8419|   250k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 718k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 718k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 718k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 718k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 718k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 718k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 718k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 718k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 718k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   718k|            SCN_CLANG_POP
 8491|   718k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5540|  3.36M|    {
 5541|  3.36M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8133|  1.70M|    {
 8134|  1.70M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8051|  3.36M|    {
 8052|  3.36M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4339|  2.37M|{
 4340|  2.37M|    if (is_contiguous()) {
  ------------------
  |  Branch (4340:9): [True: 0, False: 2.37M]
  ------------------
 4341|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4342|      0|                                ranges::default_sentinel};
 4343|      0|    }
 4344|  2.37M|    return ranges::subrange{forward_iterator{this, 0},
 4345|  2.37M|                            ranges::default_sentinel};
 4346|  2.37M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4172|  2.37M|    {
 4173|  2.37M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  2.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4174|  2.37M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  2.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4175|  2.37M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   671k|{
 8413|   671k|#define SCN_VISIT(Type)                                         \
 8414|   671k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   671k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   671k|    }                                                           \
 8417|   671k|    else {                                                      \
 8418|   671k|        return vis(monostate_val);                              \
 8419|   671k|    }
 8420|       |
 8421|   671k|    monostate monostate_val{};
 8422|       |
 8423|   671k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 671k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 671k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 671k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 671k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 671k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 671k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 671k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 671k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 671k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 671k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 671k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 671k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 671k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 671k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 671k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|   207k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 207k, False: 463k]
  ------------------
 8455|   207k|            SCN_VISIT(float);
  ------------------
  |  | 8414|   207k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   207k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   207k|    }                                                           \
  |  | 8417|   207k|    else {                                                      \
  |  | 8418|   207k|        return vis(monostate_val);                              \
  |  | 8419|   207k|    }
  ------------------
 8456|   230k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 230k, False: 441k]
  ------------------
 8457|   230k|            SCN_VISIT(double);
  ------------------
  |  | 8414|   230k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   230k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   230k|    }                                                           \
  |  | 8417|   230k|    else {                                                      \
  |  | 8418|   230k|        return vis(monostate_val);                              \
  |  | 8419|   230k|    }
  ------------------
 8458|   233k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 233k, False: 437k]
  ------------------
 8459|   233k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|   233k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   233k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   233k|    }                                                           \
  |  | 8417|   233k|    else {                                                      \
  |  | 8418|   233k|        return vis(monostate_val);                              \
  |  | 8419|   233k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 671k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 671k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 671k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 671k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 671k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 671k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 671k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 671k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 671k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   671k|            SCN_CLANG_POP
 8491|   671k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|  1.66M|{
 7040|  1.66M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|  1.66M|    handler.check_args_exhausted();
 7042|  1.66M|    return handler.get_error();
 7043|  1.66M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|  1.66M|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|  1.66M|    auto begin = format.data();
 7009|  1.66M|    auto it = begin;
 7010|  1.66M|    const auto end = format.data() + format.size();
 7011|       |
 7012|  3.23M|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 1.66M, False: 1.57M]
  ------------------
 7013|  1.66M|        const auto ch = *it++;
 7014|  1.66M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 1.66M, False: 0]
  ------------------
 7015|  1.66M|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|  1.66M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|  1.66M|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 90.5k, False: 1.57M]
  ------------------
 7019|  90.5k|                return;
 7020|  90.5k|            }
 7021|  1.66M|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|  1.66M|    }
 7032|       |
 7033|  1.57M|    handler.on_literal_text(begin, end);
 7034|  1.57M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6937|  1.66M|{
 6938|  1.66M|    struct id_adapter {
 6939|  1.66M|        constexpr void operator()()
 6940|  1.66M|        {
 6941|  1.66M|            arg_id = handler.on_arg_id();
 6942|  1.66M|        }
 6943|  1.66M|        constexpr void operator()(std::size_t id)
 6944|  1.66M|        {
 6945|  1.66M|            arg_id = handler.on_arg_id(id);
 6946|  1.66M|        }
 6947|       |
 6948|  1.66M|        constexpr void on_error(const char* msg)
 6949|  1.66M|        {
 6950|  1.66M|            SCN_UNLIKELY_ATTR
 6951|  1.66M|            handler.on_error(msg);
 6952|  1.66M|        }
 6953|       |
 6954|  1.66M|        Handler& handler;
 6955|  1.66M|        std::size_t arg_id;
 6956|  1.66M|    };
 6957|       |
 6958|  1.66M|    ++begin;
 6959|  1.66M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66M]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|  1.66M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 1.66M]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|  1.66M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 1.66M]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|  1.66M|    else {
 6971|  1.66M|        auto adapter = id_adapter{handler, 0};
 6972|  1.66M|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|  1.66M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66M]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|  1.66M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 1.66M]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|  1.66M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 1.66M, False: 0]
  ------------------
 6983|  1.66M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66M]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|  1.66M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|  1.66M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66M]
  |  |  |  Branch (859:45): [True: 0, False: 1.66M]
  |  |  |  Branch (859:45): [True: 0, False: 1.66M]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unknown format specifier");
 6990|      0|                return begin;
 6991|      0|            }
 6992|  1.66M|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|  1.66M|    }
 6999|  1.66M|    return begin + 1;
 7000|  1.66M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8034|  3.36M|    {
 8035|  3.36M|        return m_args.get(id);
 8036|  3.36M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8044|  3.36M|    {
 8045|  3.36M|        return m_locale;
 8046|  3.36M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5561|  3.36M|    {
 5562|  3.36M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  3.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.36M]
  |  |  ------------------
  ------------------
 5563|      0|            on_error(
 5564|      0|                "Cannot switch from manual to automatic argument indexing");
 5565|      0|            return 0;
 5566|      0|        }
 5567|       |
 5568|  3.36M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5569|  3.36M|        do_check_arg_id(id);
 5570|  3.36M|        return id;
 5571|  3.36M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6049|  3.36M|{
 6050|  3.36M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6050:9): [Folded - Ignored]
  ------------------
 6051|  3.36M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6051:10): [Folded - Ignored]
  |  Branch (6051:22): [Folded - Ignored]
  ------------------
 6052|       |        // The cast below will cause an error on gcc pre-12
 6053|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6054|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6054:13): [True: 0, False: 0]
  ------------------
 6055|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6056|      0|            SCN_UNLIKELY_ATTR
 6057|      0|            on_error("Argument not found");
 6058|      0|        }
 6059|      0|    }
 6060|  3.36M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|  1.66M|{
 6439|  1.66M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|  1.66M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 1.66M, False: 0]
  |  Branch (6440:26): [True: 0, False: 1.66M]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|  1.66M|    handler();
 6445|  1.66M|    return begin;
 6446|  1.66M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|  1.66M|        {
 6941|  1.66M|            arg_id = handler.on_arg_id();
 6942|  1.66M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5247|  6.73M|    {
 5248|  6.73M|        return m_type;
 5249|  6.73M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5556|  3.36M|    {
 5557|  3.36M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5558|  3.36M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5545|  6.73M|    {
 5546|  6.73M|        return m_format.data();
 5547|  6.73M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7117|  1.66M|    {
 7118|  1.66M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  1.66M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6853|  1.66M|{
 6854|  1.66M|    auto do_presentation = [&]() -> const CharT* {
 6855|  1.66M|        if (*begin == CharT{'['}) {
 6856|  1.66M|            auto set = parse_presentation_set(begin, end, handler);
 6857|  1.66M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|  1.66M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|  1.66M|                return begin;
 6862|  1.66M|            }
 6863|  1.66M|            handler.on_character_set_string(set);
 6864|  1.66M|            return begin;
 6865|  1.66M|        }
 6866|  1.66M|        if (*begin == CharT{'/'}) {
 6867|  1.66M|            return parse_presentation_regex(begin, end, handler);
 6868|  1.66M|        }
 6869|  1.66M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  1.66M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|  1.66M|            handler.on_error("Invalid type specifier in format string");
 6872|  1.66M|            return begin;
 6873|  1.66M|        }
 6874|  1.66M|        handler.on_type(type);
 6875|  1.66M|        return begin;
 6876|  1.66M|    };
 6877|       |
 6878|  1.66M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 1.66M, False: 0]
  |  Branch (6878:28): [True: 1.66M, False: 0]
  ------------------
 6879|  1.66M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 1.66M, False: 0]
  |  Branch (6879:36): [True: 1.18M, False: 479k]
  ------------------
 6880|  1.18M|        return do_presentation();
 6881|  1.18M|    }
 6882|       |
 6883|   479k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   479k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 479k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|   479k|    begin = parse_align(begin, end, handler);
 6889|   479k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   479k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 479k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|   479k|    begin = parse_width(begin, end, handler);
 6895|   479k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   479k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 479k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|   479k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 479k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|   479k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 479k, False: 0]
  ------------------
 6914|   479k|        handler.on_localized();
 6915|   479k|        ++begin;
 6916|   479k|    }
 6917|   479k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   479k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 479k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|   479k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 479k, False: 0]
  |  Branch (6922:25): [True: 0, False: 479k]
  ------------------
 6923|      0|        do_presentation();
 6924|      0|    }
 6925|   479k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   479k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 479k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|   479k|    return begin;
 6931|   479k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6502|  3.36M|{
 6503|  3.36M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6503:13): [True: 2.39M, False: 971k]
  |  Branch (6503:33): [True: 2.39M, False: 0]
  ------------------
 6504|  3.36M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6504:13): [True: 971k, False: 0]
  |  Branch (6504:33): [True: 971k, False: 0]
  ------------------
 6505|  3.36M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6854|  1.18M|    auto do_presentation = [&]() -> const CharT* {
 6855|  1.18M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 0, False: 1.18M]
  ------------------
 6856|      0|            auto set = parse_presentation_set(begin, end, handler);
 6857|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|      0|            handler.on_character_set_string(set);
 6864|      0|            return begin;
 6865|      0|        }
 6866|  1.18M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 1.18M]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|  1.18M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  1.18M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.18M]
  |  |  ------------------
  ------------------
 6871|      0|            handler.on_error("Invalid type specifier in format string");
 6872|      0|            return begin;
 6873|      0|        }
 6874|  1.18M|        handler.on_type(type);
 6875|  1.18M|        return begin;
 6876|  1.18M|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6450|  2.39M|{
 6451|  2.39M|    switch (type) {
 6452|      0|        case 'b':
  ------------------
  |  Branch (6452:9): [True: 0, False: 2.39M]
  ------------------
 6453|      0|        case 'B':
  ------------------
  |  Branch (6453:9): [True: 0, False: 2.39M]
  ------------------
 6454|      0|            return presentation_type::int_binary;
 6455|      0|        case 'd':
  ------------------
  |  Branch (6455:9): [True: 0, False: 2.39M]
  ------------------
 6456|      0|            return presentation_type::int_decimal;
 6457|      0|        case 'i':
  ------------------
  |  Branch (6457:9): [True: 0, False: 2.39M]
  ------------------
 6458|      0|            return presentation_type::int_generic;
 6459|      0|        case 'u':
  ------------------
  |  Branch (6459:9): [True: 0, False: 2.39M]
  ------------------
 6460|      0|            return presentation_type::int_unsigned_decimal;
 6461|      0|        case 'o':
  ------------------
  |  Branch (6461:9): [True: 0, False: 2.39M]
  ------------------
 6462|      0|            return presentation_type::int_octal;
 6463|      0|        case 'x':
  ------------------
  |  Branch (6463:9): [True: 0, False: 2.39M]
  ------------------
 6464|      0|        case 'X':
  ------------------
  |  Branch (6464:9): [True: 0, False: 2.39M]
  ------------------
 6465|      0|            return presentation_type::int_hex;
 6466|      0|        case 'r':
  ------------------
  |  Branch (6466:9): [True: 0, False: 2.39M]
  ------------------
 6467|      0|        case 'R':
  ------------------
  |  Branch (6467:9): [True: 0, False: 2.39M]
  ------------------
 6468|      0|            return presentation_type::int_arbitrary_base;
 6469|  1.09M|        case 'a':
  ------------------
  |  Branch (6469:9): [True: 1.09M, False: 1.30M]
  ------------------
 6470|  1.09M|        case 'A':
  ------------------
  |  Branch (6470:9): [True: 0, False: 2.39M]
  ------------------
 6471|  1.09M|            return presentation_type::float_hex;
 6472|  66.4k|        case 'e':
  ------------------
  |  Branch (6472:9): [True: 66.4k, False: 2.33M]
  ------------------
 6473|  66.4k|        case 'E':
  ------------------
  |  Branch (6473:9): [True: 0, False: 2.39M]
  ------------------
 6474|  66.4k|            return presentation_type::float_scientific;
 6475|   424k|        case 'f':
  ------------------
  |  Branch (6475:9): [True: 424k, False: 1.97M]
  ------------------
 6476|   424k|        case 'F':
  ------------------
  |  Branch (6476:9): [True: 0, False: 2.39M]
  ------------------
 6477|   424k|            return presentation_type::float_fixed;
 6478|   816k|        case 'g':
  ------------------
  |  Branch (6478:9): [True: 816k, False: 1.58M]
  ------------------
 6479|   816k|        case 'G':
  ------------------
  |  Branch (6479:9): [True: 0, False: 2.39M]
  ------------------
 6480|   816k|            return presentation_type::float_general;
 6481|      0|        case 's':
  ------------------
  |  Branch (6481:9): [True: 0, False: 2.39M]
  ------------------
 6482|      0|            return presentation_type::string;
 6483|      0|        case 'c':
  ------------------
  |  Branch (6483:9): [True: 0, False: 2.39M]
  ------------------
 6484|      0|            return presentation_type::character;
 6485|      0|        case '?':
  ------------------
  |  Branch (6485:9): [True: 0, False: 2.39M]
  ------------------
 6486|      0|            return presentation_type::escaped_character;
 6487|      0|        case 'p':
  ------------------
  |  Branch (6487:9): [True: 0, False: 2.39M]
  ------------------
 6488|      0|            return presentation_type::pointer;
 6489|      0|        case '[':
  ------------------
  |  Branch (6489:9): [True: 0, False: 2.39M]
  ------------------
 6490|      0|        case '/':
  ------------------
  |  Branch (6490:9): [True: 0, False: 2.39M]
  ------------------
 6491|       |            // Should be handled by parse_presentation_set and
 6492|       |            // parse_presentation_regex
 6493|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6495|      0|        default:
  ------------------
  |  Branch (6495:9): [True: 0, False: 2.39M]
  ------------------
 6496|      0|            return presentation_type::none;
 6497|  2.39M|    }
 6498|  2.39M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6527|   479k|{
 6528|   479k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   479k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   479k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|   479k|    auto check_align = [](wchar_t ch) {
 6531|   479k|        switch (ch) {
 6532|   479k|            case L'<':
 6533|   479k|                return align_type::left;
 6534|   479k|            case L'>':
 6535|   479k|                return align_type::right;
 6536|   479k|            case L'^':
 6537|   479k|                return align_type::center;
 6538|   479k|            default:
 6539|   479k|                return align_type::none;
 6540|   479k|        }
 6541|   479k|    };
 6542|       |
 6543|   479k|    auto potential_fill_len = code_point_length(begin, end);
 6544|   479k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   958k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 479k]
  |  |  |  Branch (859:45): [True: 0, False: 479k]
  |  |  |  Branch (859:45): [True: 0, False: 479k]
  |  |  ------------------
  ------------------
 6545|   479k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|   479k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|   479k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|   479k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|   479k|    const auto begin_before_fill = begin;
 6555|   479k|    begin += potential_fill_len;
 6556|       |
 6557|   479k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 479k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|   479k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|   479k|    const auto begin_after_fill = begin;
 6563|   479k|    ++begin;
 6564|       |
 6565|   479k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 479k, False: 0]
  ------------------
 6566|   479k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   479k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 479k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|   479k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 0, False: 479k]
  ------------------
 6571|      0|            return begin_before_fill;
 6572|      0|        }
 6573|   479k|    }
 6574|       |
 6575|   479k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 479k, False: 0]
  ------------------
 6576|   479k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 479k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|   479k|        return begin_before_fill;
 6581|   479k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|   479k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6509|   971k|{
 6510|   971k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   971k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   971k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6511|   971k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6511:19): [Folded - Ignored]
  ------------------
 6512|   971k|        return 1;
 6513|   971k|    }
 6514|   971k|    else {
 6515|   971k|        const auto lengths =
 6516|   971k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6517|   971k|            "\3\4";
 6518|   971k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6519|   971k|        return len;
 6520|   971k|    }
 6521|   971k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6530|   958k|    auto check_align = [](wchar_t ch) {
 6531|   958k|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 958k]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 958k]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 958k]
  ------------------
 6537|      0|                return align_type::center;
 6538|   958k|            default:
  ------------------
  |  Branch (6538:13): [True: 958k, False: 0]
  ------------------
 6539|   958k|                return align_type::none;
 6540|   958k|        }
 6541|   958k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6592|   479k|{
 6593|   479k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   479k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   479k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|   479k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 479k, False: 0]
  |  Branch (6595:33): [True: 0, False: 479k]
  ------------------
 6596|      0|        int width = parse_simple_int(begin, end);
 6597|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6598|      0|            handler.on_width(width);
 6599|      0|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|      0|    }
 6605|   479k|    return begin;
 6606|   479k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7122|   479k|    {
 7123|   479k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|   479k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 479k, False: 0]
  ------------------
 7125|   479k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 479k, False: 0]
  ------------------
 7126|   479k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 0, False: 479k]
  ------------------
 7127|   479k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 0, False: 0]
  ------------------
 7128|      0|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|      0|        }
 7133|       |
 7134|   479k|        Handler::on_localized();
 7135|   479k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  1.66M|{
 8413|  1.66M|#define SCN_VISIT(Type)                                         \
 8414|  1.66M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  1.66M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  1.66M|    }                                                           \
 8417|  1.66M|    else {                                                      \
 8418|  1.66M|        return vis(monostate_val);                              \
 8419|  1.66M|    }
 8420|       |
 8421|  1.66M|    monostate monostate_val{};
 8422|       |
 8423|  1.66M|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 1.66M]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 1.66M]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 1.66M]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.66M]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 1.66M]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.66M]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.66M]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.66M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.66M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.66M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.66M]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.66M]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.66M]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.66M]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.66M]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|   527k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 527k, False: 1.13M]
  ------------------
 8455|   527k|            SCN_VISIT(float);
  ------------------
  |  | 8414|   527k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   527k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   527k|    }                                                           \
  |  | 8417|   527k|    else {                                                      \
  |  | 8418|   527k|        return vis(monostate_val);                              \
  |  | 8419|   527k|    }
  ------------------
 8456|   564k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 564k, False: 1.09M]
  ------------------
 8457|   564k|            SCN_VISIT(double);
  ------------------
  |  | 8414|   564k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   564k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   564k|    }                                                           \
  |  | 8417|   564k|    else {                                                      \
  |  | 8418|   564k|        return vis(monostate_val);                              \
  |  | 8419|   564k|    }
  ------------------
 8458|   571k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 571k, False: 1.09M]
  ------------------
 8459|   571k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|   571k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   571k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   571k|    }                                                           \
  |  | 8417|   571k|    else {                                                      \
  |  | 8418|   571k|        return vis(monostate_val);                              \
  |  | 8419|   571k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.66M]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.66M]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.66M]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.66M]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.66M]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.66M]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 1.66M]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 1.66M]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 1.66M]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  1.66M|            SCN_CLANG_POP
 8491|  1.66M|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|  1.70M|{
 7040|  1.70M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|  1.70M|    handler.check_args_exhausted();
 7042|  1.70M|    return handler.get_error();
 7043|  1.70M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|  1.70M|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|  1.70M|    auto begin = format.data();
 7009|  1.70M|    auto it = begin;
 7010|  1.70M|    const auto end = format.data() + format.size();
 7011|       |
 7012|  3.32M|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 1.70M, False: 1.61M]
  ------------------
 7013|  1.70M|        const auto ch = *it++;
 7014|  1.70M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 1.70M, False: 0]
  ------------------
 7015|  1.70M|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|  1.70M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|  1.70M|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 90.5k, False: 1.61M]
  ------------------
 7019|  90.5k|                return;
 7020|  90.5k|            }
 7021|  1.70M|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|  1.70M|    }
 7032|       |
 7033|  1.61M|    handler.on_literal_text(begin, end);
 7034|  1.61M|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8170|  1.61M|    {
 8171|  1.61M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.61M|    static_cast<    \
  |  |  929|  1.61M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8172|  1.61M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6937|  1.70M|{
 6938|  1.70M|    struct id_adapter {
 6939|  1.70M|        constexpr void operator()()
 6940|  1.70M|        {
 6941|  1.70M|            arg_id = handler.on_arg_id();
 6942|  1.70M|        }
 6943|  1.70M|        constexpr void operator()(std::size_t id)
 6944|  1.70M|        {
 6945|  1.70M|            arg_id = handler.on_arg_id(id);
 6946|  1.70M|        }
 6947|       |
 6948|  1.70M|        constexpr void on_error(const char* msg)
 6949|  1.70M|        {
 6950|  1.70M|            SCN_UNLIKELY_ATTR
 6951|  1.70M|            handler.on_error(msg);
 6952|  1.70M|        }
 6953|       |
 6954|  1.70M|        Handler& handler;
 6955|  1.70M|        std::size_t arg_id;
 6956|  1.70M|    };
 6957|       |
 6958|  1.70M|    ++begin;
 6959|  1.70M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.70M]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|  1.70M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 1.70M]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|  1.70M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 1.70M]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|  1.70M|    else {
 6971|  1.70M|        auto adapter = id_adapter{handler, 0};
 6972|  1.70M|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|  1.70M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.70M]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|  1.70M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 1.70M]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|  1.70M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 1.70M, False: 0]
  ------------------
 6983|  1.70M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.70M]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|  1.70M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|  1.70M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.70M]
  |  |  |  Branch (859:45): [True: 0, False: 1.70M]
  |  |  |  Branch (859:45): [True: 0, False: 1.70M]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unknown format specifier");
 6990|      0|                return begin;
 6991|      0|            }
 6992|  1.70M|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|  1.70M|    }
 6999|  1.70M|    return begin + 1;
 7000|  1.70M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|  1.70M|{
 6439|  1.70M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|  1.70M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 1.70M, False: 0]
  |  Branch (6440:26): [True: 0, False: 1.70M]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|  1.70M|    handler();
 6445|  1.70M|    return begin;
 6446|  1.70M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|  1.70M|        {
 6941|  1.70M|            arg_id = handler.on_arg_id();
 6942|  1.70M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7117|  1.70M|    {
 7118|  1.70M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  1.70M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6853|  1.70M|{
 6854|  1.70M|    auto do_presentation = [&]() -> const CharT* {
 6855|  1.70M|        if (*begin == CharT{'['}) {
 6856|  1.70M|            auto set = parse_presentation_set(begin, end, handler);
 6857|  1.70M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|  1.70M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|  1.70M|                return begin;
 6862|  1.70M|            }
 6863|  1.70M|            handler.on_character_set_string(set);
 6864|  1.70M|            return begin;
 6865|  1.70M|        }
 6866|  1.70M|        if (*begin == CharT{'/'}) {
 6867|  1.70M|            return parse_presentation_regex(begin, end, handler);
 6868|  1.70M|        }
 6869|  1.70M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  1.70M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|  1.70M|            handler.on_error("Invalid type specifier in format string");
 6872|  1.70M|            return begin;
 6873|  1.70M|        }
 6874|  1.70M|        handler.on_type(type);
 6875|  1.70M|        return begin;
 6876|  1.70M|    };
 6877|       |
 6878|  1.70M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 1.70M, False: 0]
  |  Branch (6878:28): [True: 1.70M, False: 0]
  ------------------
 6879|  1.70M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 1.70M, False: 0]
  |  Branch (6879:36): [True: 1.21M, False: 491k]
  ------------------
 6880|  1.21M|        return do_presentation();
 6881|  1.21M|    }
 6882|       |
 6883|   491k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   491k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 491k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|   491k|    begin = parse_align(begin, end, handler);
 6889|   491k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   491k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 491k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|   491k|    begin = parse_width(begin, end, handler);
 6895|   491k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   491k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 491k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|   491k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 491k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|   491k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 491k, False: 0]
  ------------------
 6914|   491k|        handler.on_localized();
 6915|   491k|        ++begin;
 6916|   491k|    }
 6917|   491k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   491k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 491k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|   491k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 491k, False: 0]
  |  Branch (6922:25): [True: 0, False: 491k]
  ------------------
 6923|      0|        do_presentation();
 6924|      0|    }
 6925|   491k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   491k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 491k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|   491k|    return begin;
 6931|   491k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6854|  1.21M|    auto do_presentation = [&]() -> const CharT* {
 6855|  1.21M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 0, False: 1.21M]
  ------------------
 6856|      0|            auto set = parse_presentation_set(begin, end, handler);
 6857|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|      0|            handler.on_character_set_string(set);
 6864|      0|            return begin;
 6865|      0|        }
 6866|  1.21M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 1.21M]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|  1.21M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  1.21M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.21M]
  |  |  ------------------
  ------------------
 6871|      0|            handler.on_error("Invalid type specifier in format string");
 6872|      0|            return begin;
 6873|      0|        }
 6874|  1.21M|        handler.on_type(type);
 6875|  1.21M|        return begin;
 6876|  1.21M|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6527|   491k|{
 6528|   491k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   491k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   491k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|   491k|    auto check_align = [](wchar_t ch) {
 6531|   491k|        switch (ch) {
 6532|   491k|            case L'<':
 6533|   491k|                return align_type::left;
 6534|   491k|            case L'>':
 6535|   491k|                return align_type::right;
 6536|   491k|            case L'^':
 6537|   491k|                return align_type::center;
 6538|   491k|            default:
 6539|   491k|                return align_type::none;
 6540|   491k|        }
 6541|   491k|    };
 6542|       |
 6543|   491k|    auto potential_fill_len = code_point_length(begin, end);
 6544|   491k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   983k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 491k]
  |  |  |  Branch (859:45): [True: 0, False: 491k]
  |  |  |  Branch (859:45): [True: 0, False: 491k]
  |  |  ------------------
  ------------------
 6545|   491k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|   491k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|   491k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|   491k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|   491k|    const auto begin_before_fill = begin;
 6555|   491k|    begin += potential_fill_len;
 6556|       |
 6557|   491k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 491k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|   491k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|   491k|    const auto begin_after_fill = begin;
 6563|   491k|    ++begin;
 6564|       |
 6565|   491k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 491k, False: 0]
  ------------------
 6566|   491k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   491k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 491k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|   491k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 0, False: 491k]
  ------------------
 6571|      0|            return begin_before_fill;
 6572|      0|        }
 6573|   491k|    }
 6574|       |
 6575|   491k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 491k, False: 0]
  ------------------
 6576|   491k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 491k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|   491k|        return begin_before_fill;
 6581|   491k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|   491k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6530|   983k|    auto check_align = [](wchar_t ch) {
 6531|   983k|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 983k]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 983k]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 983k]
  ------------------
 6537|      0|                return align_type::center;
 6538|   983k|            default:
  ------------------
  |  Branch (6538:13): [True: 983k, False: 0]
  ------------------
 6539|   983k|                return align_type::none;
 6540|   983k|        }
 6541|   983k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6592|   491k|{
 6593|   491k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   491k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   491k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|   491k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 491k, False: 0]
  |  Branch (6595:33): [True: 0, False: 491k]
  ------------------
 6596|      0|        int width = parse_simple_int(begin, end);
 6597|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6598|      0|            handler.on_width(width);
 6599|      0|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|      0|    }
 6605|   491k|    return begin;
 6606|   491k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7122|   491k|    {
 7123|   491k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|   491k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 491k, False: 0]
  ------------------
 7125|   491k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 491k, False: 0]
  ------------------
 7126|   491k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 0, False: 491k]
  ------------------
 7127|   491k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 0, False: 0]
  ------------------
 7128|      0|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|      0|        }
 7133|       |
 7134|   491k|        Handler::on_localized();
 7135|   491k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  1.70M|{
 8413|  1.70M|#define SCN_VISIT(Type)                                         \
 8414|  1.70M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  1.70M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  1.70M|    }                                                           \
 8417|  1.70M|    else {                                                      \
 8418|  1.70M|        return vis(monostate_val);                              \
 8419|  1.70M|    }
 8420|       |
 8421|  1.70M|    monostate monostate_val{};
 8422|       |
 8423|  1.70M|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 1.70M]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 1.70M]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 1.70M]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.70M]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 1.70M]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.70M]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.70M]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.70M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.70M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.70M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.70M]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.70M]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.70M]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.70M]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.70M]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|   540k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 540k, False: 1.16M]
  ------------------
 8455|   540k|            SCN_VISIT(float);
  ------------------
  |  | 8414|   540k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   540k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   540k|    }                                                           \
  |  | 8417|   540k|    else {                                                      \
  |  | 8418|   540k|        return vis(monostate_val);                              \
  |  | 8419|   540k|    }
  ------------------
 8456|   579k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 579k, False: 1.12M]
  ------------------
 8457|   579k|            SCN_VISIT(double);
  ------------------
  |  | 8414|   579k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   579k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   579k|    }                                                           \
  |  | 8417|   579k|    else {                                                      \
  |  | 8418|   579k|        return vis(monostate_val);                              \
  |  | 8419|   579k|    }
  ------------------
 8458|   585k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 585k, False: 1.11M]
  ------------------
 8459|   585k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|   585k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   585k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   585k|    }                                                           \
  |  | 8417|   585k|    else {                                                      \
  |  | 8418|   585k|        return vis(monostate_val);                              \
  |  | 8419|   585k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.70M]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.70M]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.70M]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.70M]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.70M]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.70M]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 1.70M]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 1.70M]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 1.70M]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  1.70M|            SCN_CLANG_POP
 8491|  1.70M|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4071|   117k|    {
 4072|   117k|        sync(0);
 4073|   117k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5461|   524k|    {
 5462|   524k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 524k]
  |  |  ------------------
  ------------------
 5463|      0|            return max_size();
 5464|      0|        }
 5465|       |
 5466|   524k|        return static_cast<std::size_t>(m_desc &
 5467|   524k|                                        ((1 << detail::packed_arg_bits) - 1));
 5468|   524k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5486|  1.04M|    {
 5487|  1.04M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5488|  1.04M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5429|   524k|    {
 5430|   524k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 524k]
  |  |  ------------------
  ------------------
 5431|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5432|      0|                return m_args[id];
 5433|      0|            }
 5434|      0|            return {};
 5435|      0|        }
 5436|       |
 5437|   524k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 524k]
  |  |  ------------------
  ------------------
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   524k|        const auto t = type(id);
 5442|   524k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 524k]
  |  |  ------------------
  ------------------
 5443|      0|            return {};
 5444|      0|        }
 5445|       |
 5446|   524k|        basic_scan_arg<Context> arg;
 5447|   524k|        arg.m_type = t;
 5448|   524k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5448:13): [True: 524k, False: 0]
  ------------------
 5449|   524k|            arg.m_value.ref_value = m_builtin_values[id];
 5450|   524k|        }
 5451|      0|        else {
 5452|      0|            arg.m_value = m_values[id];
 5453|      0|        }
 5454|   524k|        return arg;
 5455|   524k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5495|   524k|    {
 5496|       |        // First (0th) index is size, types start after that
 5497|   524k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5498|   524k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5499|   524k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5500|   524k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5490|   524k|    {
 5491|   524k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5492|   524k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5242|  1.00M|    {
 5243|  1.00M|        return m_type != detail::arg_type::none_type;
 5244|  1.00M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  67.7k|{
 8413|  67.7k|#define SCN_VISIT(Type)                                         \
 8414|  67.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  67.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  67.7k|    }                                                           \
 8417|  67.7k|    else {                                                      \
 8418|  67.7k|        return vis(monostate_val);                              \
 8419|  67.7k|    }
 8420|       |
 8421|  67.7k|    monostate monostate_val{};
 8422|       |
 8423|  67.7k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 67.7k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 67.7k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 67.7k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 67.7k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 67.7k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 67.7k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 67.7k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 67.7k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 67.7k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 67.7k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 67.7k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 67.7k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 67.7k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 67.7k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 67.7k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|  22.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 22.5k, False: 45.2k]
  ------------------
 8455|  22.5k|            SCN_VISIT(float);
  ------------------
  |  | 8414|  22.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  22.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  22.5k|    }                                                           \
  |  | 8417|  22.5k|    else {                                                      \
  |  | 8418|  22.5k|        return vis(monostate_val);                              \
  |  | 8419|  22.5k|    }
  ------------------
 8456|  22.5k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 22.5k, False: 45.1k]
  ------------------
 8457|  22.5k|            SCN_VISIT(double);
  ------------------
  |  | 8414|  22.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  22.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  22.5k|    }                                                           \
  |  | 8417|  22.5k|    else {                                                      \
  |  | 8418|  22.5k|        return vis(monostate_val);                              \
  |  | 8419|  22.5k|    }
  ------------------
 8458|  22.6k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 22.6k, False: 45.1k]
  ------------------
 8459|  22.6k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|  22.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  22.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  22.6k|    }                                                           \
  |  | 8417|  22.6k|    else {                                                      \
  |  | 8418|  22.6k|        return vis(monostate_val);                              \
  |  | 8419|  22.6k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 67.7k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 67.7k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 67.7k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 67.7k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 67.7k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 67.7k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 67.7k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 67.7k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 67.7k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  67.7k|            SCN_CLANG_POP
 8491|  67.7k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5540|   434k|    {
 5541|   434k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8133|   217k|    {
 8134|   217k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8051|   434k|    {
 8052|   434k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|   217k|{
 7040|   217k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|   217k|    handler.check_args_exhausted();
 7042|   217k|    return handler.get_error();
 7043|   217k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|   217k|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|   217k|    auto begin = format.data();
 7009|   217k|    auto it = begin;
 7010|   217k|    const auto end = format.data() + format.size();
 7011|       |
 7012|   253k|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 217k, False: 36.2k]
  ------------------
 7013|   217k|        const auto ch = *it++;
 7014|   217k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 217k, False: 0]
  ------------------
 7015|   217k|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|   217k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|   217k|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 181k, False: 36.2k]
  ------------------
 7019|   181k|                return;
 7020|   181k|            }
 7021|   217k|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|   217k|    }
 7032|       |
 7033|  36.2k|    handler.on_literal_text(begin, end);
 7034|  36.2k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6937|   217k|{
 6938|   217k|    struct id_adapter {
 6939|   217k|        constexpr void operator()()
 6940|   217k|        {
 6941|   217k|            arg_id = handler.on_arg_id();
 6942|   217k|        }
 6943|   217k|        constexpr void operator()(std::size_t id)
 6944|   217k|        {
 6945|   217k|            arg_id = handler.on_arg_id(id);
 6946|   217k|        }
 6947|       |
 6948|   217k|        constexpr void on_error(const char* msg)
 6949|   217k|        {
 6950|   217k|            SCN_UNLIKELY_ATTR
 6951|   217k|            handler.on_error(msg);
 6952|   217k|        }
 6953|       |
 6954|   217k|        Handler& handler;
 6955|   217k|        std::size_t arg_id;
 6956|   217k|    };
 6957|       |
 6958|   217k|    ++begin;
 6959|   217k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|   217k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 217k]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|   217k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 217k]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|   217k|    else {
 6971|   217k|        auto adapter = id_adapter{handler, 0};
 6972|   217k|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|   217k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|   217k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 217k]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|   217k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 217k, False: 0]
  ------------------
 6983|   217k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|   217k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|   217k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   434k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  |  Branch (859:45): [True: 0, False: 217k]
  |  |  |  Branch (859:45): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unknown format specifier");
 6990|      0|                return begin;
 6991|      0|            }
 6992|   217k|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|   217k|    }
 6999|   217k|    return begin + 1;
 7000|   217k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8034|   434k|    {
 8035|   434k|        return m_args.get(id);
 8036|   434k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8044|   434k|    {
 8045|   434k|        return m_locale;
 8046|   434k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5561|   434k|    {
 5562|   434k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   434k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 434k]
  |  |  ------------------
  ------------------
 5563|      0|            on_error(
 5564|      0|                "Cannot switch from manual to automatic argument indexing");
 5565|      0|            return 0;
 5566|      0|        }
 5567|       |
 5568|   434k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5569|   434k|        do_check_arg_id(id);
 5570|   434k|        return id;
 5571|   434k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6049|   434k|{
 6050|   434k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6050:9): [Folded - Ignored]
  ------------------
 6051|   434k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6051:10): [Folded - Ignored]
  |  Branch (6051:22): [Folded - Ignored]
  ------------------
 6052|       |        // The cast below will cause an error on gcc pre-12
 6053|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6054|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6054:13): [True: 0, False: 0]
  ------------------
 6055|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6056|      0|            SCN_UNLIKELY_ATTR
 6057|      0|            on_error("Argument not found");
 6058|      0|        }
 6059|      0|    }
 6060|   434k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|   217k|{
 6439|   217k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   217k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   217k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|   217k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 217k, False: 0]
  |  Branch (6440:26): [True: 0, False: 217k]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|   217k|    handler();
 6445|   217k|    return begin;
 6446|   217k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|   217k|        {
 6941|   217k|            arg_id = handler.on_arg_id();
 6942|   217k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5247|   869k|    {
 5248|   869k|        return m_type;
 5249|   869k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5556|   434k|    {
 5557|   434k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5558|   434k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4339|   284k|{
 4340|   284k|    if (is_contiguous()) {
  ------------------
  |  Branch (4340:9): [True: 0, False: 284k]
  ------------------
 4341|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4342|      0|                                ranges::default_sentinel};
 4343|      0|    }
 4344|   284k|    return ranges::subrange{forward_iterator{this, 0},
 4345|   284k|                            ranges::default_sentinel};
 4346|   284k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4172|   284k|    {
 4173|   284k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   284k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   284k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4174|   284k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   284k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   284k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4175|   284k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5545|   869k|    {
 5546|   869k|        return m_format.data();
 5547|   869k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7117|   217k|    {
 7118|   217k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   217k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   217k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|   217k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6853|   217k|{
 6854|   217k|    auto do_presentation = [&]() -> const CharT* {
 6855|   217k|        if (*begin == CharT{'['}) {
 6856|   217k|            auto set = parse_presentation_set(begin, end, handler);
 6857|   217k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|   217k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|   217k|                return begin;
 6862|   217k|            }
 6863|   217k|            handler.on_character_set_string(set);
 6864|   217k|            return begin;
 6865|   217k|        }
 6866|   217k|        if (*begin == CharT{'/'}) {
 6867|   217k|            return parse_presentation_regex(begin, end, handler);
 6868|   217k|        }
 6869|   217k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   217k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|   217k|            handler.on_error("Invalid type specifier in format string");
 6872|   217k|            return begin;
 6873|   217k|        }
 6874|   217k|        handler.on_type(type);
 6875|   217k|        return begin;
 6876|   217k|    };
 6877|       |
 6878|   217k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 217k, False: 0]
  |  Branch (6878:28): [True: 217k, False: 0]
  ------------------
 6879|   217k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 217k, False: 0]
  |  Branch (6879:36): [True: 172k, False: 45.1k]
  ------------------
 6880|   172k|        return do_presentation();
 6881|   172k|    }
 6882|       |
 6883|  45.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.1k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|  45.1k|    begin = parse_align(begin, end, handler);
 6889|  45.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.1k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|  45.1k|    begin = parse_width(begin, end, handler);
 6895|  45.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.1k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|  45.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 45.1k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|  45.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 45.1k, False: 0]
  ------------------
 6914|  45.1k|        handler.on_localized();
 6915|  45.1k|        ++begin;
 6916|  45.1k|    }
 6917|  45.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.1k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|  45.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 45.1k, False: 0]
  |  Branch (6922:25): [True: 0, False: 45.1k]
  ------------------
 6923|      0|        do_presentation();
 6924|      0|    }
 6925|  45.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.1k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|  45.1k|    return begin;
 6931|  45.1k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6502|   434k|{
 6503|   434k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6503:13): [True: 344k, False: 90.2k]
  |  Branch (6503:33): [True: 344k, False: 0]
  ------------------
 6504|   434k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6504:13): [True: 90.2k, False: 0]
  |  Branch (6504:33): [True: 90.2k, False: 0]
  ------------------
 6505|   434k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6854|   172k|    auto do_presentation = [&]() -> const CharT* {
 6855|   172k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 0, False: 172k]
  ------------------
 6856|      0|            auto set = parse_presentation_set(begin, end, handler);
 6857|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|      0|            handler.on_character_set_string(set);
 6864|      0|            return begin;
 6865|      0|        }
 6866|   172k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 172k]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|   172k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   172k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 172k]
  |  |  ------------------
  ------------------
 6871|      0|            handler.on_error("Invalid type specifier in format string");
 6872|      0|            return begin;
 6873|      0|        }
 6874|   172k|        handler.on_type(type);
 6875|   172k|        return begin;
 6876|   172k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6450|   344k|{
 6451|   344k|    switch (type) {
 6452|      0|        case 'b':
  ------------------
  |  Branch (6452:9): [True: 0, False: 344k]
  ------------------
 6453|      0|        case 'B':
  ------------------
  |  Branch (6453:9): [True: 0, False: 344k]
  ------------------
 6454|      0|            return presentation_type::int_binary;
 6455|      0|        case 'd':
  ------------------
  |  Branch (6455:9): [True: 0, False: 344k]
  ------------------
 6456|      0|            return presentation_type::int_decimal;
 6457|      0|        case 'i':
  ------------------
  |  Branch (6457:9): [True: 0, False: 344k]
  ------------------
 6458|      0|            return presentation_type::int_generic;
 6459|      0|        case 'u':
  ------------------
  |  Branch (6459:9): [True: 0, False: 344k]
  ------------------
 6460|      0|            return presentation_type::int_unsigned_decimal;
 6461|      0|        case 'o':
  ------------------
  |  Branch (6461:9): [True: 0, False: 344k]
  ------------------
 6462|      0|            return presentation_type::int_octal;
 6463|      0|        case 'x':
  ------------------
  |  Branch (6463:9): [True: 0, False: 344k]
  ------------------
 6464|      0|        case 'X':
  ------------------
  |  Branch (6464:9): [True: 0, False: 344k]
  ------------------
 6465|      0|            return presentation_type::int_hex;
 6466|      0|        case 'r':
  ------------------
  |  Branch (6466:9): [True: 0, False: 344k]
  ------------------
 6467|      0|        case 'R':
  ------------------
  |  Branch (6467:9): [True: 0, False: 344k]
  ------------------
 6468|      0|            return presentation_type::int_arbitrary_base;
 6469|  90.8k|        case 'a':
  ------------------
  |  Branch (6469:9): [True: 90.8k, False: 253k]
  ------------------
 6470|  90.8k|        case 'A':
  ------------------
  |  Branch (6470:9): [True: 0, False: 344k]
  ------------------
 6471|  90.8k|            return presentation_type::float_hex;
 6472|  72.7k|        case 'e':
  ------------------
  |  Branch (6472:9): [True: 72.7k, False: 271k]
  ------------------
 6473|  72.7k|        case 'E':
  ------------------
  |  Branch (6473:9): [True: 0, False: 344k]
  ------------------
 6474|  72.7k|            return presentation_type::float_scientific;
 6475|  90.4k|        case 'f':
  ------------------
  |  Branch (6475:9): [True: 90.4k, False: 253k]
  ------------------
 6476|  90.4k|        case 'F':
  ------------------
  |  Branch (6476:9): [True: 0, False: 344k]
  ------------------
 6477|  90.4k|            return presentation_type::float_fixed;
 6478|  90.3k|        case 'g':
  ------------------
  |  Branch (6478:9): [True: 90.3k, False: 254k]
  ------------------
 6479|  90.3k|        case 'G':
  ------------------
  |  Branch (6479:9): [True: 0, False: 344k]
  ------------------
 6480|  90.3k|            return presentation_type::float_general;
 6481|      0|        case 's':
  ------------------
  |  Branch (6481:9): [True: 0, False: 344k]
  ------------------
 6482|      0|            return presentation_type::string;
 6483|      0|        case 'c':
  ------------------
  |  Branch (6483:9): [True: 0, False: 344k]
  ------------------
 6484|      0|            return presentation_type::character;
 6485|      0|        case '?':
  ------------------
  |  Branch (6485:9): [True: 0, False: 344k]
  ------------------
 6486|      0|            return presentation_type::escaped_character;
 6487|      0|        case 'p':
  ------------------
  |  Branch (6487:9): [True: 0, False: 344k]
  ------------------
 6488|      0|            return presentation_type::pointer;
 6489|      0|        case '[':
  ------------------
  |  Branch (6489:9): [True: 0, False: 344k]
  ------------------
 6490|      0|        case '/':
  ------------------
  |  Branch (6490:9): [True: 0, False: 344k]
  ------------------
 6491|       |            // Should be handled by parse_presentation_set and
 6492|       |            // parse_presentation_regex
 6493|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6495|      0|        default:
  ------------------
  |  Branch (6495:9): [True: 0, False: 344k]
  ------------------
 6496|      0|            return presentation_type::none;
 6497|   344k|    }
 6498|   344k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6527|  45.1k|{
 6528|  45.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  45.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|  45.1k|    auto check_align = [](wchar_t ch) {
 6531|  45.1k|        switch (ch) {
 6532|  45.1k|            case L'<':
 6533|  45.1k|                return align_type::left;
 6534|  45.1k|            case L'>':
 6535|  45.1k|                return align_type::right;
 6536|  45.1k|            case L'^':
 6537|  45.1k|                return align_type::center;
 6538|  45.1k|            default:
 6539|  45.1k|                return align_type::none;
 6540|  45.1k|        }
 6541|  45.1k|    };
 6542|       |
 6543|  45.1k|    auto potential_fill_len = code_point_length(begin, end);
 6544|  45.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  90.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.1k]
  |  |  |  Branch (859:45): [True: 0, False: 45.1k]
  |  |  |  Branch (859:45): [True: 0, False: 45.1k]
  |  |  ------------------
  ------------------
 6545|  45.1k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|  45.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|  45.1k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|  45.1k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|  45.1k|    const auto begin_before_fill = begin;
 6555|  45.1k|    begin += potential_fill_len;
 6556|       |
 6557|  45.1k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 45.1k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|  45.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|  45.1k|    const auto begin_after_fill = begin;
 6563|  45.1k|    ++begin;
 6564|       |
 6565|  45.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 45.1k, False: 0]
  ------------------
 6566|  45.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.1k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|  45.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 0, False: 45.1k]
  ------------------
 6571|      0|            return begin_before_fill;
 6572|      0|        }
 6573|  45.1k|    }
 6574|       |
 6575|  45.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 45.1k, False: 0]
  ------------------
 6576|  45.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 45.1k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|  45.1k|        return begin_before_fill;
 6581|  45.1k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|  45.1k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6509|  90.2k|{
 6510|  90.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  90.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  90.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6511|  90.2k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6511:19): [Folded - Ignored]
  ------------------
 6512|  90.2k|        return 1;
 6513|  90.2k|    }
 6514|  90.2k|    else {
 6515|  90.2k|        const auto lengths =
 6516|  90.2k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6517|  90.2k|            "\3\4";
 6518|  90.2k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6519|  90.2k|        return len;
 6520|  90.2k|    }
 6521|  90.2k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6530|  90.3k|    auto check_align = [](wchar_t ch) {
 6531|  90.3k|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 90.3k]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 90.3k]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 90.3k]
  ------------------
 6537|      0|                return align_type::center;
 6538|  90.3k|            default:
  ------------------
  |  Branch (6538:13): [True: 90.3k, False: 0]
  ------------------
 6539|  90.3k|                return align_type::none;
 6540|  90.3k|        }
 6541|  90.3k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6592|  45.1k|{
 6593|  45.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  45.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|  45.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 45.1k, False: 0]
  |  Branch (6595:33): [True: 0, False: 45.1k]
  ------------------
 6596|      0|        int width = parse_simple_int(begin, end);
 6597|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6598|      0|            handler.on_width(width);
 6599|      0|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|      0|    }
 6605|  45.1k|    return begin;
 6606|  45.1k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7122|  45.1k|    {
 7123|  45.1k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|  45.1k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 45.1k, False: 0]
  ------------------
 7125|  45.1k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 45.1k, False: 0]
  ------------------
 7126|  45.1k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 0, False: 45.1k]
  ------------------
 7127|  45.1k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 0, False: 0]
  ------------------
 7128|      0|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|      0|        }
 7133|       |
 7134|  45.1k|        Handler::on_localized();
 7135|  45.1k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   217k|{
 8413|   217k|#define SCN_VISIT(Type)                                         \
 8414|   217k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   217k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   217k|    }                                                           \
 8417|   217k|    else {                                                      \
 8418|   217k|        return vis(monostate_val);                              \
 8419|   217k|    }
 8420|       |
 8421|   217k|    monostate monostate_val{};
 8422|       |
 8423|   217k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 217k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 217k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 217k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 217k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 217k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 217k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 217k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 217k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 217k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 217k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 217k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 217k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 217k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 217k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 217k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|  72.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 72.3k, False: 145k]
  ------------------
 8455|  72.3k|            SCN_VISIT(float);
  ------------------
  |  | 8414|  72.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  72.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  72.3k|    }                                                           \
  |  | 8417|  72.3k|    else {                                                      \
  |  | 8418|  72.3k|        return vis(monostate_val);                              \
  |  | 8419|  72.3k|    }
  ------------------
 8456|  72.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 72.4k, False: 144k]
  ------------------
 8457|  72.4k|            SCN_VISIT(double);
  ------------------
  |  | 8414|  72.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  72.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  72.4k|    }                                                           \
  |  | 8417|  72.4k|    else {                                                      \
  |  | 8418|  72.4k|        return vis(monostate_val);                              \
  |  | 8419|  72.4k|    }
  ------------------
 8458|  72.5k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 72.5k, False: 144k]
  ------------------
 8459|  72.5k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|  72.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  72.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  72.5k|    }                                                           \
  |  | 8417|  72.5k|    else {                                                      \
  |  | 8418|  72.5k|        return vis(monostate_val);                              \
  |  | 8419|  72.5k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 217k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 217k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 217k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 217k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 217k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 217k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 217k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 217k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 217k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   217k|            SCN_CLANG_POP
 8491|   217k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  67.6k|{
 8413|  67.6k|#define SCN_VISIT(Type)                                         \
 8414|  67.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  67.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  67.6k|    }                                                           \
 8417|  67.6k|    else {                                                      \
 8418|  67.6k|        return vis(monostate_val);                              \
 8419|  67.6k|    }
 8420|       |
 8421|  67.6k|    monostate monostate_val{};
 8422|       |
 8423|  67.6k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 67.6k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 67.6k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 67.6k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 67.6k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 67.6k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 67.6k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 67.6k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 67.6k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 67.6k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 67.6k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 67.6k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 67.6k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 67.6k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 67.6k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 67.6k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|  22.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 22.5k, False: 45.1k]
  ------------------
 8455|  22.5k|            SCN_VISIT(float);
  ------------------
  |  | 8414|  22.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  22.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  22.5k|    }                                                           \
  |  | 8417|  22.5k|    else {                                                      \
  |  | 8418|  22.5k|        return vis(monostate_val);                              \
  |  | 8419|  22.5k|    }
  ------------------
 8456|  22.5k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 22.5k, False: 45.1k]
  ------------------
 8457|  22.5k|            SCN_VISIT(double);
  ------------------
  |  | 8414|  22.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  22.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  22.5k|    }                                                           \
  |  | 8417|  22.5k|    else {                                                      \
  |  | 8418|  22.5k|        return vis(monostate_val);                              \
  |  | 8419|  22.5k|    }
  ------------------
 8458|  22.6k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 22.6k, False: 45.0k]
  ------------------
 8459|  22.6k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|  22.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  22.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  22.6k|    }                                                           \
  |  | 8417|  22.6k|    else {                                                      \
  |  | 8418|  22.6k|        return vis(monostate_val);                              \
  |  | 8419|  22.6k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 67.6k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 67.6k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 67.6k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 67.6k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 67.6k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 67.6k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 67.6k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 67.6k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 67.6k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  67.6k|            SCN_CLANG_POP
 8491|  67.6k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|   217k|{
 7040|   217k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|   217k|    handler.check_args_exhausted();
 7042|   217k|    return handler.get_error();
 7043|   217k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|   217k|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|   217k|    auto begin = format.data();
 7009|   217k|    auto it = begin;
 7010|   217k|    const auto end = format.data() + format.size();
 7011|       |
 7012|   253k|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 217k, False: 36.2k]
  ------------------
 7013|   217k|        const auto ch = *it++;
 7014|   217k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 217k, False: 0]
  ------------------
 7015|   217k|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|   217k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|   217k|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 181k, False: 36.2k]
  ------------------
 7019|   181k|                return;
 7020|   181k|            }
 7021|   217k|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|   217k|    }
 7032|       |
 7033|  36.2k|    handler.on_literal_text(begin, end);
 7034|  36.2k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8170|  36.2k|    {
 8171|  36.2k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  36.2k|    static_cast<    \
  |  |  929|  36.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8172|  36.2k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6937|   217k|{
 6938|   217k|    struct id_adapter {
 6939|   217k|        constexpr void operator()()
 6940|   217k|        {
 6941|   217k|            arg_id = handler.on_arg_id();
 6942|   217k|        }
 6943|   217k|        constexpr void operator()(std::size_t id)
 6944|   217k|        {
 6945|   217k|            arg_id = handler.on_arg_id(id);
 6946|   217k|        }
 6947|       |
 6948|   217k|        constexpr void on_error(const char* msg)
 6949|   217k|        {
 6950|   217k|            SCN_UNLIKELY_ATTR
 6951|   217k|            handler.on_error(msg);
 6952|   217k|        }
 6953|       |
 6954|   217k|        Handler& handler;
 6955|   217k|        std::size_t arg_id;
 6956|   217k|    };
 6957|       |
 6958|   217k|    ++begin;
 6959|   217k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|   217k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 217k]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|   217k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 217k]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|   217k|    else {
 6971|   217k|        auto adapter = id_adapter{handler, 0};
 6972|   217k|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|   217k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|   217k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 217k]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|   217k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 217k, False: 0]
  ------------------
 6983|   217k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|   217k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|   217k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   434k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  |  Branch (859:45): [True: 0, False: 217k]
  |  |  |  Branch (859:45): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unknown format specifier");
 6990|      0|                return begin;
 6991|      0|            }
 6992|   217k|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|   217k|    }
 6999|   217k|    return begin + 1;
 7000|   217k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|   217k|{
 6439|   217k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   217k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   217k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|   217k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 217k, False: 0]
  |  Branch (6440:26): [True: 0, False: 217k]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|   217k|    handler();
 6445|   217k|    return begin;
 6446|   217k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|   217k|        {
 6941|   217k|            arg_id = handler.on_arg_id();
 6942|   217k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7117|   217k|    {
 7118|   217k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   217k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   217k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|   217k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6853|   217k|{
 6854|   217k|    auto do_presentation = [&]() -> const CharT* {
 6855|   217k|        if (*begin == CharT{'['}) {
 6856|   217k|            auto set = parse_presentation_set(begin, end, handler);
 6857|   217k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|   217k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|   217k|                return begin;
 6862|   217k|            }
 6863|   217k|            handler.on_character_set_string(set);
 6864|   217k|            return begin;
 6865|   217k|        }
 6866|   217k|        if (*begin == CharT{'/'}) {
 6867|   217k|            return parse_presentation_regex(begin, end, handler);
 6868|   217k|        }
 6869|   217k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   217k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|   217k|            handler.on_error("Invalid type specifier in format string");
 6872|   217k|            return begin;
 6873|   217k|        }
 6874|   217k|        handler.on_type(type);
 6875|   217k|        return begin;
 6876|   217k|    };
 6877|       |
 6878|   217k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 217k, False: 0]
  |  Branch (6878:28): [True: 217k, False: 0]
  ------------------
 6879|   217k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 217k, False: 0]
  |  Branch (6879:36): [True: 172k, False: 45.1k]
  ------------------
 6880|   172k|        return do_presentation();
 6881|   172k|    }
 6882|       |
 6883|  45.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.1k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|  45.1k|    begin = parse_align(begin, end, handler);
 6889|  45.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.1k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|  45.1k|    begin = parse_width(begin, end, handler);
 6895|  45.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.1k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|  45.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 45.1k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|  45.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 45.1k, False: 0]
  ------------------
 6914|  45.1k|        handler.on_localized();
 6915|  45.1k|        ++begin;
 6916|  45.1k|    }
 6917|  45.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.1k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|  45.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 45.1k, False: 0]
  |  Branch (6922:25): [True: 0, False: 45.1k]
  ------------------
 6923|      0|        do_presentation();
 6924|      0|    }
 6925|  45.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.1k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|  45.1k|    return begin;
 6931|  45.1k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6854|   172k|    auto do_presentation = [&]() -> const CharT* {
 6855|   172k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 0, False: 172k]
  ------------------
 6856|      0|            auto set = parse_presentation_set(begin, end, handler);
 6857|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|      0|            handler.on_character_set_string(set);
 6864|      0|            return begin;
 6865|      0|        }
 6866|   172k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 172k]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|   172k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   172k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 172k]
  |  |  ------------------
  ------------------
 6871|      0|            handler.on_error("Invalid type specifier in format string");
 6872|      0|            return begin;
 6873|      0|        }
 6874|   172k|        handler.on_type(type);
 6875|   172k|        return begin;
 6876|   172k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6527|  45.1k|{
 6528|  45.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  45.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|  45.1k|    auto check_align = [](wchar_t ch) {
 6531|  45.1k|        switch (ch) {
 6532|  45.1k|            case L'<':
 6533|  45.1k|                return align_type::left;
 6534|  45.1k|            case L'>':
 6535|  45.1k|                return align_type::right;
 6536|  45.1k|            case L'^':
 6537|  45.1k|                return align_type::center;
 6538|  45.1k|            default:
 6539|  45.1k|                return align_type::none;
 6540|  45.1k|        }
 6541|  45.1k|    };
 6542|       |
 6543|  45.1k|    auto potential_fill_len = code_point_length(begin, end);
 6544|  45.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  90.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.1k]
  |  |  |  Branch (859:45): [True: 0, False: 45.1k]
  |  |  |  Branch (859:45): [True: 0, False: 45.1k]
  |  |  ------------------
  ------------------
 6545|  45.1k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|  45.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|  45.1k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|  45.1k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|  45.1k|    const auto begin_before_fill = begin;
 6555|  45.1k|    begin += potential_fill_len;
 6556|       |
 6557|  45.1k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 45.1k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|  45.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|  45.1k|    const auto begin_after_fill = begin;
 6563|  45.1k|    ++begin;
 6564|       |
 6565|  45.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 45.1k, False: 0]
  ------------------
 6566|  45.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.1k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|  45.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 0, False: 45.1k]
  ------------------
 6571|      0|            return begin_before_fill;
 6572|      0|        }
 6573|  45.1k|    }
 6574|       |
 6575|  45.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 45.1k, False: 0]
  ------------------
 6576|  45.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 45.1k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|  45.1k|        return begin_before_fill;
 6581|  45.1k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|  45.1k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6530|  90.2k|    auto check_align = [](wchar_t ch) {
 6531|  90.2k|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 90.2k]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 90.2k]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 90.2k]
  ------------------
 6537|      0|                return align_type::center;
 6538|  90.2k|            default:
  ------------------
  |  Branch (6538:13): [True: 90.2k, False: 0]
  ------------------
 6539|  90.2k|                return align_type::none;
 6540|  90.2k|        }
 6541|  90.2k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6592|  45.1k|{
 6593|  45.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  45.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|  45.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 45.1k, False: 0]
  |  Branch (6595:33): [True: 0, False: 45.1k]
  ------------------
 6596|      0|        int width = parse_simple_int(begin, end);
 6597|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6598|      0|            handler.on_width(width);
 6599|      0|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|      0|    }
 6605|  45.1k|    return begin;
 6606|  45.1k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7122|  45.1k|    {
 7123|  45.1k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|  45.1k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 45.1k, False: 0]
  ------------------
 7125|  45.1k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 45.1k, False: 0]
  ------------------
 7126|  45.1k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 0, False: 45.1k]
  ------------------
 7127|  45.1k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 0, False: 0]
  ------------------
 7128|      0|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|      0|        }
 7133|       |
 7134|  45.1k|        Handler::on_localized();
 7135|  45.1k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   217k|{
 8413|   217k|#define SCN_VISIT(Type)                                         \
 8414|   217k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   217k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   217k|    }                                                           \
 8417|   217k|    else {                                                      \
 8418|   217k|        return vis(monostate_val);                              \
 8419|   217k|    }
 8420|       |
 8421|   217k|    monostate monostate_val{};
 8422|       |
 8423|   217k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 217k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 217k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 217k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 217k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 217k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 217k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 217k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 217k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 217k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 217k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 217k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 217k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 217k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 217k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 217k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|  72.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 72.3k, False: 144k]
  ------------------
 8455|  72.3k|            SCN_VISIT(float);
  ------------------
  |  | 8414|  72.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  72.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  72.3k|    }                                                           \
  |  | 8417|  72.3k|    else {                                                      \
  |  | 8418|  72.3k|        return vis(monostate_val);                              \
  |  | 8419|  72.3k|    }
  ------------------
 8456|  72.4k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 72.4k, False: 144k]
  ------------------
 8457|  72.4k|            SCN_VISIT(double);
  ------------------
  |  | 8414|  72.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  72.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  72.4k|    }                                                           \
  |  | 8417|  72.4k|    else {                                                      \
  |  | 8418|  72.4k|        return vis(monostate_val);                              \
  |  | 8419|  72.4k|    }
  ------------------
 8458|  72.5k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 72.5k, False: 144k]
  ------------------
 8459|  72.5k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|  72.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  72.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  72.5k|    }                                                           \
  |  | 8417|  72.5k|    else {                                                      \
  |  | 8418|  72.5k|        return vis(monostate_val);                              \
  |  | 8419|  72.5k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 217k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 217k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 217k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 217k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 217k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 217k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 217k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 217k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 217k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   217k|            SCN_CLANG_POP
 8491|   217k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4071|   235k|    {
 4072|   235k|        sync(0);
 4073|   235k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5415|   463k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5415|  45.1k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  43.6k|{
   89|  43.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  43.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  43.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  43.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.6k|    static_cast<    \
  |  |  929|  43.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.6k|    static_cast<    \
  |  |  929|  43.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  43.6k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   131k|{
   44|   131k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   131k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  43.6k|{
  127|  43.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  43.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  43.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  43.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.6k|    static_cast<    \
  |  |  929|  43.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.6k|    static_cast<    \
  |  |  929|  43.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  43.6k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   131k|{
   60|   131k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   131k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  7.51k|{
  163|  7.51k|    T value;
  164|  7.51k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  7.51k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  7.51k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.51k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.51k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.03k, False: 1.47k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.03k|    }                                                  \
  |  |  |  | 3667|  7.51k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.47k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.47k|    static_cast<    \
  |  |  929|  1.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.47k|    static_cast<    \
  |  |  929|  1.47k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.51k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  22.5k|{
   72|  22.5k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  22.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  22.5k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  43.7k|{
   89|  43.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  43.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  43.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  43.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.7k|    static_cast<    \
  |  |  929|  43.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.7k|    static_cast<    \
  |  |  929|  43.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  43.7k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  43.7k|{
  127|  43.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  43.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  43.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  43.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.7k|    static_cast<    \
  |  |  929|  43.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.7k|    static_cast<    \
  |  |  929|  43.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  43.7k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  7.52k|{
  163|  7.52k|    T value;
  164|  7.52k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  7.52k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  7.52k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.52k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.52k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.03k, False: 1.49k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.03k|    }                                                  \
  |  |  |  | 3667|  7.52k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.49k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.49k|    static_cast<    \
  |  |  929|  1.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.49k|    static_cast<    \
  |  |  929|  1.49k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.52k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  43.8k|{
   89|  43.8k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  43.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  43.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  43.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.8k|    static_cast<    \
  |  |  929|  43.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.8k|    static_cast<    \
  |  |  929|  43.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  43.8k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  43.8k|{
  127|  43.8k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  43.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  43.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  43.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.8k|    static_cast<    \
  |  |  929|  43.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.8k|    static_cast<    \
  |  |  929|  43.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  43.8k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  7.54k|{
  163|  7.54k|    T value;
  164|  7.54k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  7.54k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  7.54k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.54k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.54k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.03k, False: 1.50k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.03k|    }                                                  \
  |  |  |  | 3667|  7.54k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.50k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.50k|    static_cast<    \
  |  |  929|  1.50k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.50k|    static_cast<    \
  |  |  929|  1.50k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.54k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  43.6k|{
   89|  43.6k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  43.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  43.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  43.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.6k|    static_cast<    \
  |  |  929|  43.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.6k|    static_cast<    \
  |  |  929|  43.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  43.6k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   131k|{
   44|   131k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   131k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  43.6k|{
  127|  43.6k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  43.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  43.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  43.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.6k|    static_cast<    \
  |  |  929|  43.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.6k|    static_cast<    \
  |  |  929|  43.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  43.6k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   131k|{
   60|   131k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   131k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  7.50k|{
  163|  7.50k|    T value;
  164|  7.50k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  7.50k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  7.50k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.50k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.50k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.03k, False: 1.46k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.03k|    }                                                  \
  |  |  |  | 3667|  7.50k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.46k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.46k|    static_cast<    \
  |  |  929|  1.46k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.46k|    static_cast<    \
  |  |  929|  1.46k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.50k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  22.5k|{
   72|  22.5k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  22.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  22.5k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  43.7k|{
   89|  43.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  43.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  43.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  43.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.7k|    static_cast<    \
  |  |  929|  43.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.7k|    static_cast<    \
  |  |  929|  43.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  43.7k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  43.7k|{
  127|  43.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  43.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  43.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  43.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.7k|    static_cast<    \
  |  |  929|  43.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.7k|    static_cast<    \
  |  |  929|  43.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  43.7k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  7.52k|{
  163|  7.52k|    T value;
  164|  7.52k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  7.52k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  7.52k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.52k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.52k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.03k, False: 1.48k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.03k|    }                                                  \
  |  |  |  | 3667|  7.52k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.48k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.48k|    static_cast<    \
  |  |  929|  1.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.48k|    static_cast<    \
  |  |  929|  1.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.52k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  43.8k|{
   89|  43.8k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  43.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  43.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  43.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.8k|    static_cast<    \
  |  |  929|  43.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.8k|    static_cast<    \
  |  |  929|  43.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  43.8k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  43.8k|{
  127|  43.8k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  43.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  43.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  43.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.8k|    static_cast<    \
  |  |  929|  43.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.8k|    static_cast<    \
  |  |  929|  43.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  43.8k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  7.53k|{
  163|  7.53k|    T value;
  164|  7.53k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  7.53k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  7.53k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.53k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.53k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.03k, False: 1.50k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.03k|    }                                                  \
  |  |  |  | 3667|  7.53k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.50k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.50k|    static_cast<    \
  |  |  929|  1.50k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.50k|    static_cast<    \
  |  |  929|  1.50k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.53k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  2.41M|{
  653|  2.41M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  2.41M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|  1.05M|{
  659|  1.05M|    static_assert(std::is_same_v<Locale, std::locale>);
  660|  1.05M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 525k, False: 525k]
  ------------------
  661|  1.05M|                    : std::locale{};
  662|  1.05M|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  1.44M|{
 1221|  1.44M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.44M|                                  m_nan_payload_buffer, value);
 1223|  1.44M|    value = this->setsign(value);
 1224|  1.44M|    return n;
 1225|  1.44M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  75.0k|{
 1221|  75.0k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  75.0k|                                  m_nan_payload_buffer, value);
 1223|  75.0k|    value = this->setsign(value);
 1224|  75.0k|    return n;
 1225|  75.0k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.55M|{
 1221|  1.55M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.55M|                                  m_nan_payload_buffer, value);
 1223|  1.55M|    value = this->setsign(value);
 1224|  1.55M|    return n;
 1225|  1.55M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  75.0k|{
 1221|  75.0k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  75.0k|                                  m_nan_payload_buffer, value);
 1223|  75.0k|    value = this->setsign(value);
 1224|  75.0k|    return n;
 1225|  75.0k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  1.57M|{
 1221|  1.57M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.57M|                                  m_nan_payload_buffer, value);
 1223|  1.57M|    value = this->setsign(value);
 1224|  1.57M|    return n;
 1225|  1.57M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  75.1k|{
 1221|  75.1k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  75.1k|                                  m_nan_payload_buffer, value);
 1223|  75.1k|    value = this->setsign(value);
 1224|  75.1k|    return n;
 1225|  75.1k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2175|  1.07M|{
 2176|  1.07M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2177|  1.07M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  1.07M|{
 2184|  1.07M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  1.07M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.07M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.02M, False: 54.3k]
  |  |  ------------------
  ------------------
 2186|  1.02M|        source.sync(*n);
 2187|  1.02M|    }
 2188|  54.3k|    else {
 2189|  54.3k|        source.sync_all();
 2190|  54.3k|    }
 2191|  1.07M|    return n;
 2192|  1.07M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2199|   131k|{
 2200|   131k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2201|   131k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   131k|{
 2208|   131k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   131k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   131k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 22.5k, False: 108k]
  |  |  ------------------
  ------------------
 2210|  22.5k|        source.sync(*n);
 2211|  22.5k|    }
 2212|   108k|    else {
 2213|   108k|        source.sync_all();
 2214|   108k|    }
 2215|   131k|    return n;
 2216|   131k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  2.11M|{
  194|  2.11M|    return find_classic_impl(
  195|  2.11M|        source, [](char ch) { return is_ascii_space(ch); },
  196|  2.11M|        [](char32_t cp) { return is_cp_space(cp); });
  197|  2.11M|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  4.74M|{
  202|  4.74M|    return find_classic_impl(
  203|  4.74M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  4.74M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  4.74M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2132|  1.07M|{
 2133|  1.07M|    return vscan_internal(source, format, args);
 2134|  1.07M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2138|  1.07M|{
 2139|  1.07M|    auto n = vscan_internal(source, format, args);
 2140|  1.07M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.07M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.02M, False: 54.3k]
  |  |  ------------------
  ------------------
 2141|  1.02M|        source.sync(*n);
 2142|  1.02M|    }
 2143|  54.3k|    else {
 2144|  54.3k|        source.sync_all();
 2145|  54.3k|    }
 2146|  1.07M|    return n;
 2147|  1.07M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2152|   131k|{
 2153|   131k|    return vscan_internal(source, format, args);
 2154|   131k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2158|   131k|{
 2159|   131k|    auto n = vscan_internal(source, format, args);
 2160|   131k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   131k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 22.5k, False: 108k]
  |  |  ------------------
  ------------------
 2161|  22.5k|        source.sync(*n);
 2162|  22.5k|    }
 2163|   108k|    else {
 2164|   108k|        source.sync_all();
 2165|   108k|    }
 2166|   131k|    return n;
 2167|   131k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2242|   239k|{
 2243|   239k|    return vscan_value_internal(source, arg);
 2244|   239k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2247|   223k|{
 2248|   223k|    auto n = vscan_value_internal(source, arg);
 2249|   223k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   223k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 214k, False: 9.05k]
  |  |  ------------------
  ------------------
 2250|   214k|        source.sync(*n);
 2251|   214k|    }
 2252|  9.05k|    else {
 2253|  9.05k|        source.sync_all();
 2254|  9.05k|    }
 2255|   223k|    return n;
 2256|   223k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2261|  22.5k|{
 2262|  22.5k|    return vscan_value_internal(source, arg);
 2263|  22.5k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2267|  22.5k|{
 2268|  22.5k|    auto n = vscan_value_internal(source, arg);
 2269|  22.5k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  22.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.45k, False: 18.1k]
  |  |  ------------------
  ------------------
 2270|  4.45k|        source.sync(*n);
 2271|  4.45k|    }
 2272|  18.1k|    else {
 2273|  18.1k|        source.sync_all();
 2274|  18.1k|    }
 2275|  22.5k|    return n;
 2276|  22.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  2.11M|{
  118|  2.11M|    auto it = source.begin();
  119|       |
  120|  8.73M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 7.45M, False: 1.27M]
  ------------------
  121|  7.45M|        auto sv =
  122|  7.45M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  7.45M|                .substr(0, 8);
  124|       |
  125|  7.45M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 7.28M, False: 170k]
  ------------------
  126|  7.28M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  7.28M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  7.28M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 768k, False: 6.51M]
  ------------------
  129|   768k|                break;
  130|   768k|            }
  131|  6.51M|            continue;
  132|  7.28M|        }
  133|       |
  134|   588k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 488k, False: 100k]
  ------------------
  135|   488k|            auto tmp =
  136|   488k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   488k|            auto res = get_next_code_point(tmp);
  138|   488k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 70.0k, False: 418k]
  ------------------
  139|  70.0k|                return it;
  140|  70.0k|            }
  141|   418k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   418k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   418k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   418k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   418k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   418k|        }
  145|   170k|    }
  146|       |
  147|  2.04M|    return detail::make_string_view_iterator(source, it);
  148|  2.11M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  10.5M|{
  105|  10.5M|    static_assert(sizeof(*source.data()) == 1);
  106|  10.5M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  10.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  10.5M|    uint64_t word{};
  108|  10.5M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  10.5M|    return has_byte_greater(word, 127) != 0;
  111|  10.5M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  48.2M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   488k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  4.74M|{
  118|  4.74M|    auto it = source.begin();
  119|       |
  120|  5.15M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 3.05M, False: 2.09M]
  ------------------
  121|  3.05M|        auto sv =
  122|  3.05M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  3.05M|                .substr(0, 8);
  124|       |
  125|  3.05M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.87M, False: 181k]
  ------------------
  126|  2.87M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.87M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.87M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 2.48M, False: 390k]
  ------------------
  129|  2.48M|                break;
  130|  2.48M|            }
  131|   390k|            continue;
  132|  2.87M|        }
  133|       |
  134|   343k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 330k, False: 13.5k]
  ------------------
  135|   330k|            auto tmp =
  136|   330k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   330k|            auto res = get_next_code_point(tmp);
  138|   330k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 168k, False: 162k]
  ------------------
  139|   168k|                return it;
  140|   168k|            }
  141|   162k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   162k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   162k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   162k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   162k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   162k|        }
  145|   181k|    }
  146|       |
  147|  4.57M|    return detail::make_string_view_iterator(source, it);
  148|  4.74M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  4.54M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   330k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.44M|{
 1138|  1.44M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 13.7k, False: 1.42M]
  ------------------
 1139|  13.7k|        value = std::numeric_limits<T>::infinity();
 1140|  13.7k|        return 3;
 1141|  13.7k|    }
 1142|  1.42M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 10.0k, False: 1.41M]
  ------------------
 1143|  10.0k|        value = std::numeric_limits<T>::infinity();
 1144|  10.0k|        return 8;
 1145|  10.0k|    }
 1146|  1.41M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 59.2k, False: 1.35M]
  ------------------
 1147|  59.2k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  59.2k|        return 3;
 1149|  59.2k|    }
 1150|  1.35M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.70k, False: 1.35M]
  ------------------
 1151|  1.70k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.70k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.70k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.70k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.70k|    }
 1182|       |
 1183|  1.35M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.35M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 310k, False: 1.04M]
  ------------------
 1185|   310k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.03k, False: 307k]
  |  |  ------------------
  ------------------
 1186|  3.03k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.03k|                                         "Invalid floating-point digit");
 1188|  3.03k|        }
 1189|   310k|    }
 1190|  1.35M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.12k, False: 1.34M]
  |  |  ------------------
  ------------------
 1191|  8.12k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  8.12k|                                     "Invalid floating-point digit");
 1193|  8.12k|    }
 1194|       |
 1195|  1.34M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.34M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.34M|            double tmp{};
 1200|  1.34M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.34M|            value = tmp;
 1202|  1.34M|            return ret;
 1203|  1.34M|        }
 1204|  1.34M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.34M|            return fast_float_fallback(data, value);
 1208|  1.34M|        }
 1209|  1.34M|    }
 1210|  1.34M|    else {
 1211|       |        // Default to fast_float
 1212|  1.34M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.34M|    }
 1214|  1.34M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1077|  1.34M|    {
 1078|  1.34M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  5.03M|    {
  712|  5.03M|        return {kind, options};
  713|  5.03M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|  1.34M|    {
 1082|  1.34M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 306k, False: 1.03M]
  ------------------
 1083|  1.34M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 52.5k, False: 986k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   359k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   359k|                                              value);
 1087|   359k|        }
 1088|       |
 1089|   986k|        const auto flags = get_flags();
 1090|   986k|        const auto view = get_view();
 1091|   986k|        const auto result = fast_float::from_chars(
 1092|   986k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   986k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   986k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 986k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   986k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   986k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.47k, False: 977k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  9.47k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  9.47k|                                              value);
 1102|  9.47k|        }
 1103|       |
 1104|   977k|        return result.ptr - view.data();
 1105|   986k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   368k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   368k|    {
 1048|   368k|#if !SCN_DISABLE_STRTOD
 1049|   368k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   368k|    }
 1056|   368k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  893|   368k|    {
  894|   368k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   375k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   368k|    {
  898|   368k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   368k|                           generic_strtod);
  900|   368k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   368k|    {
  732|   368k|        CharT* end{};
  733|   368k|        errno = 0;
  734|   368k|        value = strtod_cb(src, &end);
  735|   368k|        const auto saved_errno = errno;
  736|   368k|        auto chars_read = end - src;
  737|       |
  738|   368k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   368k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.2k, False: 357k]
  |  |  ------------------
  ------------------
  740|  11.2k|            return unexpected(e);
  741|  11.2k|        }
  742|       |
  743|   357k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 305k, False: 52.0k]
  ------------------
  744|   357k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 305k, False: 0]
  ------------------
  745|   305k|            chars_read -= 2;
  746|   305k|        }
  747|       |
  748|   357k|        return chars_read;
  749|   368k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   375k|    {
  778|   375k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 96.6k, False: 278k]
  |  Branch (778:37): [True: 0, False: 96.6k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   375k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 52.5k, False: 323k]
  ------------------
  785|   375k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 52.5k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   375k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 12.4k, False: 363k]
  |  Branch (791:34): [True: 1.70k, False: 10.7k]
  ------------------
  792|  1.70k|            SCN_UNLIKELY_ATTR
  793|  1.70k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  1.70k|        }
  795|       |
  796|   373k|        SCN_GCC_COMPAT_PUSH
  797|   373k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   373k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 373k, False: 0]
  ------------------
  800|   373k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 373k, False: 0]
  ------------------
  801|   373k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 10.1k, False: 363k]
  ------------------
  802|  10.1k|            SCN_UNLIKELY_ATTR
  803|  10.1k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  10.1k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   363k|            return {};
  809|   373k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   388k|{
  687|   388k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 98.3k, False: 289k]
  |  Branch (687:25): [True: 0, False: 289k]
  ------------------
  688|   388k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   368k|    {
  755|   368k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 362k, False: 6.63k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   362k|            auto first_space = read_until_classic_space(input.view());
  758|   362k|            input.assign(
  759|   362k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   362k|        }
  761|       |
  762|   368k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 306k, False: 61.9k]
  ------------------
  763|   306k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   306k|                input.get_allocated_string().insert(0, "0x");
  765|   306k|            }
  766|   306k|            else {
  767|   306k|                input.get_allocated_string().insert(0, L"0x");
  768|   306k|            }
  769|   306k|        }
  770|       |
  771|   368k|        return input.get_allocated_string().c_str();
  772|   368k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   368k|    {
  905|   368k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   368k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   368k|        }
  908|   368k|        else {
  909|   368k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   368k|        }
  911|   368k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   368k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   368k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   368k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   368k|            return std::strtof(str, str_end);
  839|   368k|        }
  840|   368k|        else if constexpr (std::is_same_v<T, double>) {
  841|   368k|            return std::strtod(str, str_end);
  842|   368k|        }
  843|   368k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   368k|            return std::strtold(str, str_end);
  845|   368k|        }
  846|   368k|#endif
  847|   368k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  2.11M|    {
 1061|  2.11M|        unsigned format_flags{};
 1062|  2.11M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 2.09M, False: 19.0k]
  ------------------
 1063|  2.09M|            format_flags |= fast_float::fixed;
 1064|  2.09M|        }
 1065|  2.11M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 1.85M, False: 260k]
  ------------------
 1066|  1.85M|            format_flags |= fast_float::scientific;
 1067|  1.85M|        }
 1068|       |
 1069|  2.11M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  2.11M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|   986k|    {
 1110|   986k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   986k|            return m_input.view();
 1112|   986k|        }
 1113|   986k|        else if constexpr (sizeof(CharT) == 2) {
 1114|   986k|            return std::u16string_view{
 1115|   986k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   986k|                m_input.view().size()};
 1117|   986k|        }
 1118|   986k|        else {
 1119|   986k|            return std::u32string_view{
 1120|   986k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   986k|                m_input.view().size()};
 1122|   986k|        }
 1123|   986k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  75.0k|{
 1138|  75.0k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 75.0k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  75.0k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 75.0k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  75.0k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 75.0k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  75.0k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 75.0k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  75.0k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  75.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  75.0k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 18.0k, False: 56.9k]
  ------------------
 1185|  18.0k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.8k, False: 6.14k]
  |  |  ------------------
  ------------------
 1186|  11.8k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  11.8k|                                         "Invalid floating-point digit");
 1188|  11.8k|        }
 1189|  18.0k|    }
 1190|  63.1k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  63.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.7k, False: 33.3k]
  |  |  ------------------
  ------------------
 1191|  29.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  29.7k|                                     "Invalid floating-point digit");
 1193|  29.7k|    }
 1194|       |
 1195|  33.3k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  33.3k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  33.3k|            double tmp{};
 1200|  33.3k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  33.3k|            value = tmp;
 1202|  33.3k|            return ret;
 1203|  33.3k|        }
 1204|  33.3k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  33.3k|            return fast_float_fallback(data, value);
 1208|  33.3k|        }
 1209|  33.3k|    }
 1210|  33.3k|    else {
 1211|       |        // Default to fast_float
 1212|  33.3k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  33.3k|    }
 1214|  33.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1077|  33.3k|    {
 1078|  33.3k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|   113k|    {
  712|   113k|        return {kind, options};
  713|   113k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|  33.3k|    {
 1082|  33.3k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 6.12k, False: 27.2k]
  ------------------
 1083|  33.3k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 98, False: 27.1k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  6.21k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  6.21k|                                              value);
 1087|  6.21k|        }
 1088|       |
 1089|  27.1k|        const auto flags = get_flags();
 1090|  27.1k|        const auto view = get_view();
 1091|  27.1k|        const auto result = fast_float::from_chars(
 1092|  27.1k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  27.1k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.1k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  27.1k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 550, False: 26.6k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    550|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    550|                                              value);
 1102|    550|        }
 1103|       |
 1104|  26.6k|        return result.ptr - view.data();
 1105|  27.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  6.76k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  6.76k|    {
 1048|  6.76k|#if !SCN_DISABLE_STRTOD
 1049|  6.76k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  6.76k|    }
 1056|  6.76k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  893|  6.76k|    {
  894|  6.76k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  6.76k|    {
  898|  6.76k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  6.76k|                           generic_strtod);
  900|  6.76k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  6.76k|    {
  732|  6.76k|        CharT* end{};
  733|  6.76k|        errno = 0;
  734|  6.76k|        value = strtod_cb(src, &end);
  735|  6.76k|        const auto saved_errno = errno;
  736|  6.76k|        auto chars_read = end - src;
  737|       |
  738|  6.76k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  6.76k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 562, False: 6.20k]
  |  |  ------------------
  ------------------
  740|    562|            return unexpected(e);
  741|    562|        }
  742|       |
  743|  6.20k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 6.10k, False: 98]
  ------------------
  744|  6.20k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 6.10k, False: 0]
  ------------------
  745|  6.10k|            chars_read -= 2;
  746|  6.10k|        }
  747|       |
  748|  6.20k|        return chars_read;
  749|  6.76k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  6.76k|    {
  755|  6.76k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 6.32k, False: 439]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  6.32k|            auto first_space = read_until_classic_space(input.view());
  758|  6.32k|            input.assign(
  759|  6.32k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  6.32k|        }
  761|       |
  762|  6.76k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 6.12k, False: 648]
  ------------------
  763|  6.12k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  6.12k|                input.get_allocated_string().insert(0, "0x");
  765|  6.12k|            }
  766|  6.12k|            else {
  767|  6.12k|                input.get_allocated_string().insert(0, L"0x");
  768|  6.12k|            }
  769|  6.12k|        }
  770|       |
  771|  6.76k|        return input.get_allocated_string().c_str();
  772|  6.76k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  6.76k|    {
  905|  6.76k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  6.76k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  6.76k|        }
  908|  6.76k|        else {
  909|  6.76k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  6.76k|        }
  911|  6.76k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  6.76k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  6.76k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  6.76k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  6.76k|            return std::wcstof(str, str_end);
  877|  6.76k|        }
  878|  6.76k|        else if constexpr (std::is_same_v<T, double>) {
  879|  6.76k|            return std::wcstod(str, str_end);
  880|  6.76k|        }
  881|  6.76k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  6.76k|            return std::wcstold(str, str_end);
  883|  6.76k|        }
  884|  6.76k|#endif
  885|  6.76k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|  27.1k|    {
 1110|  27.1k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  27.1k|            return m_input.view();
 1112|  27.1k|        }
 1113|  27.1k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  27.1k|            return std::u16string_view{
 1115|  27.1k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  27.1k|                m_input.view().size()};
 1117|  27.1k|        }
 1118|  27.1k|        else {
 1119|  27.1k|            return std::u32string_view{
 1120|  27.1k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  27.1k|                m_input.view().size()};
 1122|  27.1k|        }
 1123|  27.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.55M|{
 1138|  1.55M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 15.0k, False: 1.54M]
  ------------------
 1139|  15.0k|        value = std::numeric_limits<T>::infinity();
 1140|  15.0k|        return 3;
 1141|  15.0k|    }
 1142|  1.54M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 10.6k, False: 1.53M]
  ------------------
 1143|  10.6k|        value = std::numeric_limits<T>::infinity();
 1144|  10.6k|        return 8;
 1145|  10.6k|    }
 1146|  1.53M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 61.1k, False: 1.47M]
  ------------------
 1147|  61.1k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  61.1k|        return 3;
 1149|  61.1k|    }
 1150|  1.47M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.79k, False: 1.47M]
  ------------------
 1151|  1.79k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.79k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.79k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.79k|    }
 1182|       |
 1183|  1.47M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.47M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 322k, False: 1.14M]
  ------------------
 1185|   322k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.30k, False: 319k]
  |  |  ------------------
  ------------------
 1186|  3.30k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.30k|                                         "Invalid floating-point digit");
 1188|  3.30k|        }
 1189|   322k|    }
 1190|  1.46M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.39k, False: 1.45M]
  |  |  ------------------
  ------------------
 1191|  9.39k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  9.39k|                                     "Invalid floating-point digit");
 1193|  9.39k|    }
 1194|       |
 1195|  1.45M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.45M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.45M|            double tmp{};
 1200|  1.45M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.45M|            value = tmp;
 1202|  1.45M|            return ret;
 1203|  1.45M|        }
 1204|  1.45M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.45M|            return fast_float_fallback(data, value);
 1208|  1.45M|        }
 1209|  1.45M|    }
 1210|  1.45M|    else {
 1211|       |        // Default to fast_float
 1212|  1.45M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.45M|    }
 1214|  1.45M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1077|  1.45M|    {
 1078|  1.45M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|  1.45M|    {
 1082|  1.45M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 319k, False: 1.13M]
  ------------------
 1083|  1.45M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 60.9k, False: 1.07M]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   380k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   380k|                                              value);
 1087|   380k|        }
 1088|       |
 1089|  1.07M|        const auto flags = get_flags();
 1090|  1.07M|        const auto view = get_view();
 1091|  1.07M|        const auto result = fast_float::from_chars(
 1092|  1.07M|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  1.07M|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.07M]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  1.07M|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.19k, False: 1.07M]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  4.19k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  4.19k|                                              value);
 1102|  4.19k|        }
 1103|       |
 1104|  1.07M|        return result.ptr - view.data();
 1105|  1.07M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   384k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   384k|    {
 1048|   384k|#if !SCN_DISABLE_STRTOD
 1049|   384k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   384k|    }
 1056|   384k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  893|   384k|    {
  894|   384k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   390k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   384k|    {
  898|   384k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   384k|                           generic_strtod);
  900|   384k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   384k|    {
  732|   384k|        CharT* end{};
  733|   384k|        errno = 0;
  734|   384k|        value = strtod_cb(src, &end);
  735|   384k|        const auto saved_errno = errno;
  736|   384k|        auto chars_read = end - src;
  737|       |
  738|   384k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   384k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   384k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.78k, False: 379k]
  |  |  ------------------
  ------------------
  740|  4.78k|            return unexpected(e);
  741|  4.78k|        }
  742|       |
  743|   379k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 318k, False: 60.9k]
  ------------------
  744|   379k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 318k, False: 0]
  ------------------
  745|   318k|            chars_read -= 2;
  746|   318k|        }
  747|       |
  748|   379k|        return chars_read;
  749|   384k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   390k|    {
  778|   390k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 98.5k, False: 292k]
  |  Branch (778:37): [True: 0, False: 98.5k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   390k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 61.0k, False: 329k]
  ------------------
  785|   390k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 61.0k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   390k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 5.10k, False: 385k]
  |  Branch (791:34): [True: 514, False: 4.58k]
  ------------------
  792|    514|            SCN_UNLIKELY_ATTR
  793|    514|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    514|        }
  795|       |
  796|   390k|        SCN_GCC_COMPAT_PUSH
  797|   390k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   390k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 390k, False: 0]
  ------------------
  800|   390k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 390k, False: 0]
  ------------------
  801|   390k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 4.58k, False: 385k]
  ------------------
  802|  4.58k|            SCN_UNLIKELY_ATTR
  803|  4.58k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  4.58k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   385k|            return {};
  809|   390k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   396k|{
  691|   396k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 99.0k, False: 297k]
  |  Branch (691:24): [True: 0, False: 297k]
  ------------------
  692|   396k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   384k|    {
  755|   384k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 379k, False: 4.73k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   379k|            auto first_space = read_until_classic_space(input.view());
  758|   379k|            input.assign(
  759|   379k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   379k|        }
  761|       |
  762|   384k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 319k, False: 65.1k]
  ------------------
  763|   319k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   319k|                input.get_allocated_string().insert(0, "0x");
  765|   319k|            }
  766|   319k|            else {
  767|   319k|                input.get_allocated_string().insert(0, L"0x");
  768|   319k|            }
  769|   319k|        }
  770|       |
  771|   384k|        return input.get_allocated_string().c_str();
  772|   384k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   384k|    {
  905|   384k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   384k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   384k|        }
  908|   384k|        else {
  909|   384k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   384k|        }
  911|   384k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   384k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   384k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   384k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   384k|            return std::strtof(str, str_end);
  839|   384k|        }
  840|   384k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   384k|            return std::strtod(str, str_end);
  842|   384k|        }
  843|   384k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   384k|            return std::strtold(str, str_end);
  845|   384k|        }
  846|   384k|#endif
  847|   384k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|  1.07M|    {
 1110|  1.07M|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  1.07M|            return m_input.view();
 1112|  1.07M|        }
 1113|  1.07M|        else if constexpr (sizeof(CharT) == 2) {
 1114|  1.07M|            return std::u16string_view{
 1115|  1.07M|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  1.07M|                m_input.view().size()};
 1117|  1.07M|        }
 1118|  1.07M|        else {
 1119|  1.07M|            return std::u32string_view{
 1120|  1.07M|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  1.07M|                m_input.view().size()};
 1122|  1.07M|        }
 1123|  1.07M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  75.0k|{
 1138|  75.0k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 75.0k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  75.0k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 75.0k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  75.0k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 75.0k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  75.0k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 75.0k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  75.0k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  75.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  75.0k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 18.0k, False: 57.0k]
  ------------------
 1185|  18.0k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.8k, False: 6.14k]
  |  |  ------------------
  ------------------
 1186|  11.8k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  11.8k|                                         "Invalid floating-point digit");
 1188|  11.8k|        }
 1189|  18.0k|    }
 1190|  63.2k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  63.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.8k, False: 33.4k]
  |  |  ------------------
  ------------------
 1191|  29.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  29.8k|                                     "Invalid floating-point digit");
 1193|  29.8k|    }
 1194|       |
 1195|  33.4k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  33.4k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  33.4k|            double tmp{};
 1200|  33.4k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  33.4k|            value = tmp;
 1202|  33.4k|            return ret;
 1203|  33.4k|        }
 1204|  33.4k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  33.4k|            return fast_float_fallback(data, value);
 1208|  33.4k|        }
 1209|  33.4k|    }
 1210|  33.4k|    else {
 1211|       |        // Default to fast_float
 1212|  33.4k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  33.4k|    }
 1214|  33.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1077|  33.4k|    {
 1078|  33.4k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|  33.4k|    {
 1082|  33.4k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 6.12k, False: 27.2k]
  ------------------
 1083|  33.4k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 98, False: 27.1k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  6.21k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  6.21k|                                              value);
 1087|  6.21k|        }
 1088|       |
 1089|  27.1k|        const auto flags = get_flags();
 1090|  27.1k|        const auto view = get_view();
 1091|  27.1k|        const auto result = fast_float::from_chars(
 1092|  27.1k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  27.1k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.1k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  27.1k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  27.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 304, False: 26.8k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    304|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    304|                                              value);
 1102|    304|        }
 1103|       |
 1104|  26.8k|        return result.ptr - view.data();
 1105|  27.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  6.52k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  6.52k|    {
 1048|  6.52k|#if !SCN_DISABLE_STRTOD
 1049|  6.52k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  6.52k|    }
 1056|  6.52k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  893|  6.52k|    {
  894|  6.52k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  6.52k|    {
  898|  6.52k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  6.52k|                           generic_strtod);
  900|  6.52k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  6.52k|    {
  732|  6.52k|        CharT* end{};
  733|  6.52k|        errno = 0;
  734|  6.52k|        value = strtod_cb(src, &end);
  735|  6.52k|        const auto saved_errno = errno;
  736|  6.52k|        auto chars_read = end - src;
  737|       |
  738|  6.52k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  6.52k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 312, False: 6.21k]
  |  |  ------------------
  ------------------
  740|    312|            return unexpected(e);
  741|    312|        }
  742|       |
  743|  6.21k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 6.11k, False: 98]
  ------------------
  744|  6.21k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 6.11k, False: 0]
  ------------------
  745|  6.11k|            chars_read -= 2;
  746|  6.11k|        }
  747|       |
  748|  6.21k|        return chars_read;
  749|  6.52k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  6.52k|    {
  755|  6.52k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 6.20k, False: 316]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  6.20k|            auto first_space = read_until_classic_space(input.view());
  758|  6.20k|            input.assign(
  759|  6.20k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  6.20k|        }
  761|       |
  762|  6.52k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 6.12k, False: 402]
  ------------------
  763|  6.12k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  6.12k|                input.get_allocated_string().insert(0, "0x");
  765|  6.12k|            }
  766|  6.12k|            else {
  767|  6.12k|                input.get_allocated_string().insert(0, L"0x");
  768|  6.12k|            }
  769|  6.12k|        }
  770|       |
  771|  6.52k|        return input.get_allocated_string().c_str();
  772|  6.52k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  6.52k|    {
  905|  6.52k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  6.52k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  6.52k|        }
  908|  6.52k|        else {
  909|  6.52k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  6.52k|        }
  911|  6.52k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  6.52k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  6.52k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  6.52k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  6.52k|            return std::wcstof(str, str_end);
  877|  6.52k|        }
  878|  6.52k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  6.52k|            return std::wcstod(str, str_end);
  880|  6.52k|        }
  881|  6.52k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  6.52k|            return std::wcstold(str, str_end);
  883|  6.52k|        }
  884|  6.52k|#endif
  885|  6.52k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|  27.1k|    {
 1110|  27.1k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  27.1k|            return m_input.view();
 1112|  27.1k|        }
 1113|  27.1k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  27.1k|            return std::u16string_view{
 1115|  27.1k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  27.1k|                m_input.view().size()};
 1117|  27.1k|        }
 1118|  27.1k|        else {
 1119|  27.1k|            return std::u32string_view{
 1120|  27.1k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  27.1k|                m_input.view().size()};
 1122|  27.1k|        }
 1123|  27.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.57M|{
 1138|  1.57M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 15.5k, False: 1.56M]
  ------------------
 1139|  15.5k|        value = std::numeric_limits<T>::infinity();
 1140|  15.5k|        return 3;
 1141|  15.5k|    }
 1142|  1.56M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 10.8k, False: 1.55M]
  ------------------
 1143|  10.8k|        value = std::numeric_limits<T>::infinity();
 1144|  10.8k|        return 8;
 1145|  10.8k|    }
 1146|  1.55M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 61.6k, False: 1.48M]
  ------------------
 1147|  61.6k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  61.6k|        return 3;
 1149|  61.6k|    }
 1150|  1.48M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.82k, False: 1.48M]
  ------------------
 1151|  1.82k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.82k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.82k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.82k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.82k|    }
 1182|       |
 1183|  1.48M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.48M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 323k, False: 1.16M]
  ------------------
 1185|   323k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.43k, False: 320k]
  |  |  ------------------
  ------------------
 1186|  3.43k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.43k|                                         "Invalid floating-point digit");
 1188|  3.43k|        }
 1189|   323k|    }
 1190|  1.48M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.0k, False: 1.47M]
  |  |  ------------------
  ------------------
 1191|  10.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  10.0k|                                     "Invalid floating-point digit");
 1193|  10.0k|    }
 1194|       |
 1195|  1.47M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.47M|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.47M|            double tmp{};
 1200|  1.47M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.47M|            value = tmp;
 1202|  1.47M|            return ret;
 1203|  1.47M|        }
 1204|  1.47M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.47M|            return fast_float_fallback(data, value);
 1208|  1.47M|        }
 1209|  1.47M|    }
 1210|  1.47M|    else {
 1211|       |        // Default to fast_float
 1212|  1.47M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.47M|    }
 1214|  1.47M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  1.47M|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  1.47M|    {
 1048|  1.47M|#if !SCN_DISABLE_STRTOD
 1049|  1.47M|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  1.47M|    }
 1056|  1.47M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  893|  1.47M|    {
  894|  1.47M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|  1.50M|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|  1.47M|    {
  898|  1.47M|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  1.47M|                           generic_strtod);
  900|  1.47M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  1.47M|    {
  732|  1.47M|        CharT* end{};
  733|  1.47M|        errno = 0;
  734|  1.47M|        value = strtod_cb(src, &end);
  735|  1.47M|        const auto saved_errno = errno;
  736|  1.47M|        auto chars_read = end - src;
  737|       |
  738|  1.47M|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  1.47M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.29k, False: 1.47M]
  |  |  ------------------
  ------------------
  740|  1.29k|            return unexpected(e);
  741|  1.29k|        }
  742|       |
  743|  1.47M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 319k, False: 1.15M]
  ------------------
  744|  1.47M|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 319k, False: 0]
  ------------------
  745|   319k|            chars_read -= 2;
  746|   319k|        }
  747|       |
  748|  1.47M|        return chars_read;
  749|  1.47M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|  1.50M|    {
  778|  1.50M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 418k, False: 1.08M]
  |  Branch (778:37): [True: 0, False: 418k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|  1.50M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 61.1k, False: 1.44M]
  ------------------
  785|  1.50M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 61.1k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|  1.50M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 1.33k, False: 1.50M]
  |  Branch (791:34): [True: 138, False: 1.19k]
  ------------------
  792|    138|            SCN_UNLIKELY_ATTR
  793|    138|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    138|        }
  795|       |
  796|  1.50M|        SCN_GCC_COMPAT_PUSH
  797|  1.50M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|  1.50M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 1.50M, False: 0]
  ------------------
  800|  1.50M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 1.50M, False: 0]
  ------------------
  801|  1.50M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 1.19k, False: 1.50M]
  ------------------
  802|  1.19k|            SCN_UNLIKELY_ATTR
  803|  1.19k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  1.19k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|  1.50M|            return {};
  809|  1.50M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|  1.50M|{
  695|  1.50M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 418k, False: 1.08M]
  |  Branch (695:26): [True: 0, False: 1.08M]
  ------------------
  696|  1.50M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  1.47M|    {
  755|  1.47M|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 1.36M, False: 104k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  1.36M|            auto first_space = read_until_classic_space(input.view());
  758|  1.36M|            input.assign(
  759|  1.36M|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  1.36M|        }
  761|       |
  762|  1.47M|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 319k, False: 1.15M]
  ------------------
  763|   319k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   319k|                input.get_allocated_string().insert(0, "0x");
  765|   319k|            }
  766|   319k|            else {
  767|   319k|                input.get_allocated_string().insert(0, L"0x");
  768|   319k|            }
  769|   319k|        }
  770|       |
  771|  1.47M|        return input.get_allocated_string().c_str();
  772|  1.47M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|  1.47M|    {
  905|  1.47M|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  1.47M|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  1.47M|        }
  908|  1.47M|        else {
  909|  1.47M|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  1.47M|        }
  911|  1.47M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|  1.47M|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|  1.47M|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|  1.47M|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|  1.47M|            return std::strtof(str, str_end);
  839|  1.47M|        }
  840|  1.47M|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|  1.47M|            return std::strtod(str, str_end);
  842|  1.47M|        }
  843|  1.47M|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (843:28): [Folded - Ignored]
  ------------------
  844|  1.47M|            return std::strtold(str, str_end);
  845|  1.47M|        }
  846|  1.47M|#endif
  847|  1.47M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  75.1k|{
 1138|  75.1k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 75.1k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  75.1k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 75.1k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  75.1k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 75.1k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  75.1k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 75.1k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  75.1k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  75.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  75.1k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 18.0k, False: 57.1k]
  ------------------
 1185|  18.0k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.8k, False: 6.14k]
  |  |  ------------------
  ------------------
 1186|  11.8k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  11.8k|                                         "Invalid floating-point digit");
 1188|  11.8k|        }
 1189|  18.0k|    }
 1190|  63.3k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  63.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.8k, False: 33.4k]
  |  |  ------------------
  ------------------
 1191|  29.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  29.8k|                                     "Invalid floating-point digit");
 1193|  29.8k|    }
 1194|       |
 1195|  33.4k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  33.4k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  33.4k|            double tmp{};
 1200|  33.4k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  33.4k|            value = tmp;
 1202|  33.4k|            return ret;
 1203|  33.4k|        }
 1204|  33.4k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  33.4k|            return fast_float_fallback(data, value);
 1208|  33.4k|        }
 1209|  33.4k|    }
 1210|  33.4k|    else {
 1211|       |        // Default to fast_float
 1212|  33.4k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  33.4k|    }
 1214|  33.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  33.4k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  33.4k|    {
 1048|  33.4k|#if !SCN_DISABLE_STRTOD
 1049|  33.4k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  33.4k|    }
 1056|  33.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  893|  33.4k|    {
  894|  33.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|  33.4k|    {
  898|  33.4k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  33.4k|                           generic_strtod);
  900|  33.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  33.4k|    {
  732|  33.4k|        CharT* end{};
  733|  33.4k|        errno = 0;
  734|  33.4k|        value = strtod_cb(src, &end);
  735|  33.4k|        const auto saved_errno = errno;
  736|  33.4k|        auto chars_read = end - src;
  737|       |
  738|  33.4k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  33.4k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  33.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 33.3k]
  |  |  ------------------
  ------------------
  740|     36|            return unexpected(e);
  741|     36|        }
  742|       |
  743|  33.3k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 6.12k, False: 27.2k]
  ------------------
  744|  33.3k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 6.12k, False: 0]
  ------------------
  745|  6.12k|            chars_read -= 2;
  746|  6.12k|        }
  747|       |
  748|  33.3k|        return chars_read;
  749|  33.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  33.4k|    {
  755|  33.4k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 32.4k, False: 949]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  32.4k|            auto first_space = read_until_classic_space(input.view());
  758|  32.4k|            input.assign(
  759|  32.4k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  32.4k|        }
  761|       |
  762|  33.4k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 6.12k, False: 27.3k]
  ------------------
  763|  6.12k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  6.12k|                input.get_allocated_string().insert(0, "0x");
  765|  6.12k|            }
  766|  6.12k|            else {
  767|  6.12k|                input.get_allocated_string().insert(0, L"0x");
  768|  6.12k|            }
  769|  6.12k|        }
  770|       |
  771|  33.4k|        return input.get_allocated_string().c_str();
  772|  33.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|  33.4k|    {
  905|  33.4k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  33.4k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  33.4k|        }
  908|  33.4k|        else {
  909|  33.4k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  33.4k|        }
  911|  33.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|  33.4k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  33.4k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  33.4k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  33.4k|            return std::wcstof(str, str_end);
  877|  33.4k|        }
  878|  33.4k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  33.4k|            return std::wcstod(str, str_end);
  880|  33.4k|        }
  881|  33.4k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (881:28): [Folded - Ignored]
  ------------------
  882|  33.4k|            return std::wcstold(str, str_end);
  883|  33.4k|        }
  884|  33.4k|#endif
  885|  33.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|  2.15M|{
 2065|  2.15M|    const auto argcount = args.size();
 2066|  2.15M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 447k, False: 1.70M]
  |  Branch (2066:60): [True: 447k, False: 0]
  ------------------
 2067|   447k|        auto arg = args.get(0);
 2068|   447k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   447k|    static_cast<    \
  |  |  929|   447k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|   447k|    }
 2070|       |
 2071|  1.70M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 1.70M]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|  1.70M|    SCN_UNLIKELY_ATTR
 2079|  1.70M|    {
 2080|  1.70M|        auto handler = format_handler<false, CharT>{
 2081|  1.70M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.70M|    static_cast<    \
  |  |  929|  1.70M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.70M|    static_cast<    \
  |  |  929|  1.70M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|  1.70M|        return vscan_parse_format_string(format, handler);
 2083|  1.70M|    }
 2084|  1.70M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  4.29M|{
 1625|  4.29M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 3.36M, False: 926k]
  ------------------
 1626|  3.36M|        return false;
 1627|  3.36M|    }
 1628|   926k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 926k, False: 0]
  |  Branch (1628:39): [True: 926k, False: 0]
  ------------------
 1629|  4.29M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   671k|{
 1658|   671k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 671k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   671k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   671k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 671k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   671k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   671k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   671k|    static_cast<    \
  |  |  929|   671k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   671k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   671k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   671k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   671k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 27.1k, False: 644k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  27.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  27.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  27.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  27.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  27.1k|    }                                                  \
  |  |  |  | 3667|   671k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   644k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   644k|    return it.position();
 1675|   671k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  1.66M|    {
 1903|  1.66M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  3.80M|    {
 1722|  3.80M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  3.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.80M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  3.80M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  1.66M|    {
 1853|  1.66M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  1.66M|{
 2030|  1.66M|    const auto beg = handler.get_ctx().begin();
 2031|  1.66M|    detail::parse_format_string<false>(format, handler);
 2032|  1.66M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 90.5k, False: 1.57M]
  |  |  ------------------
  ------------------
 2033|  90.5k|        return unexpected(handler.error);
 2034|  90.5k|    }
 2035|  1.57M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  1.66M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2013|  11.4M|    {
 2014|  11.4M|        return ctx.get();
 2015|  11.4M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  11.4M|    {
 1857|  11.4M|        return contiguous_ctx;
 1858|  11.4M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  3.23M|    {
 1907|  3.23M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.23M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  3.23M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  1.66M|{
 1681|  1.66M|    auto arg = ctx.arg(id);
 1682|  1.66M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.66M|    return arg;
 1686|  1.66M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  3.80M|    {
 1797|  3.80M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.80M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  3.80M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  3.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.80M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  3.80M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.80M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.80M, False: 0]
  |  |  ------------------
  ------------------
 1807|  3.80M|            visited_args_lower64 |= (1ull << id);
 1808|  3.80M|            return;
 1809|  3.80M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  3.80M|    {
 1782|  3.80M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.80M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  3.80M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.80M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.80M, False: 0]
  |  |  ------------------
  ------------------
 1788|  3.80M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  3.80M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  3.80M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   543k|    {
 1766|   543k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   543k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 543k, False: 0]
  |  |  ------------------
  ------------------
 1767|   543k|            error = err;
 1768|   543k|        }
 1769|   543k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1935|  1.66M|    {
 1936|  1.66M|        return parse_ctx.next_arg_id();
 1937|  1.66M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1976|  1.66M|    {
 1977|  1.66M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  1.66M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  1.66M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 1.66M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  1.66M|        auto specs = detail::format_specs{};
 1990|  1.66M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  1.66M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  1.66M|            arg.type()};
 1993|       |
 1994|  1.66M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  1.66M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 1.66M]
  |  Branch (1995:29): [True: 0, False: 1.66M]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  1.66M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.66M]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|  1.66M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  1.66M|        on_visit_scan_arg(
 2006|  1.66M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  1.66M|                                           get_ctx().locale()},
 2008|  1.66M|            arg);
 2009|  1.66M|        return parse_ctx.begin();
 2010|  1.66M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  1.66M|    {
 1701|  1.66M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  1.66M|    {
 1948|  1.66M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 1.66M]
  |  Branch (1948:23): [True: 0, False: 1.66M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  1.66M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  1.66M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 90.5k, False: 1.57M]
  |  |  ------------------
  ------------------
 1955|  90.5k|            on_error(r.error());
 1956|  90.5k|        }
 1957|  1.57M|        else {
 1958|  1.57M|            get_ctx().advance_to(*r);
 1959|  1.57M|        }
 1960|  1.66M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  3.80M|    {
 1729|  3.80M|        {
 1730|  3.80M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 3.80M]
  ------------------
 1731|  3.80M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 3.80M]
  ------------------
 1732|  3.80M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  3.80M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  3.80M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 3.80M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  3.80M|        }
 1739|       |
 1740|  3.80M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 3.80M, False: 0]
  ------------------
 1741|  3.80M|            return;
 1742|  3.80M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  3.80M|    {
 1777|  3.80M|        return error;
 1778|  3.80M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  11.4M|    {
 1773|  11.4M|        return static_cast<bool>(error);
 1774|  11.4M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  1.70M|    {
 1903|  1.70M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  1.70M|    {
 1830|  1.70M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  1.70M|{
 2030|  1.70M|    const auto beg = handler.get_ctx().begin();
 2031|  1.70M|    detail::parse_format_string<false>(format, handler);
 2032|  1.70M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 90.5k, False: 1.61M]
  |  |  ------------------
  ------------------
 2033|  90.5k|        return unexpected(handler.error);
 2034|  90.5k|    }
 2035|  1.61M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  1.70M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2013|  11.7M|    {
 2014|  11.7M|        return ctx.get();
 2015|  11.7M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  11.7M|    {
 1834|  11.7M|        return ctx;
 1835|  11.7M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  3.32M|    {
 1907|  3.32M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.32M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  3.32M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  1.70M|{
 1681|  1.70M|    auto arg = ctx.arg(id);
 1682|  1.70M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.70M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.70M|    return arg;
 1686|  1.70M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1935|  1.70M|    {
 1936|  1.70M|        return parse_ctx.next_arg_id();
 1937|  1.70M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1976|  1.70M|    {
 1977|  1.70M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  1.70M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  1.70M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 1.70M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  1.70M|        auto specs = detail::format_specs{};
 1990|  1.70M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  1.70M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  1.70M|            arg.type()};
 1993|       |
 1994|  1.70M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  1.70M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 1.70M]
  |  Branch (1995:29): [True: 0, False: 1.70M]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  1.70M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.70M]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|  1.70M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  1.70M|        on_visit_scan_arg(
 2006|  1.70M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  1.70M|                                           get_ctx().locale()},
 2008|  1.70M|            arg);
 2009|  1.70M|        return parse_ctx.begin();
 2010|  1.70M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  1.70M|    {
 1701|  1.70M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|  1.70M|    {
 1948|  1.70M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 1.70M]
  |  Branch (1948:23): [True: 0, False: 1.70M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  1.70M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  1.70M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 90.5k, False: 1.61M]
  |  |  ------------------
  ------------------
 1955|  90.5k|            on_error(r.error());
 1956|  90.5k|        }
 1957|  1.61M|        else {
 1958|  1.61M|            get_ctx().advance_to(*r);
 1959|  1.61M|        }
 1960|  1.70M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|  2.14M|{
 2045|  2.14M|    const auto argcount = args.size();
 2046|  2.14M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 479k, False: 1.66M]
  |  Branch (2046:60): [True: 479k, False: 0]
  ------------------
 2047|   479k|        auto arg = args.get(0);
 2048|   479k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   479k|    static_cast<    \
  |  |  929|   479k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|   479k|    }
 2050|       |
 2051|  1.66M|    auto handler = format_handler<true, CharT>{
 2052|  1.66M|        ranges::subrange<const CharT*>{source.data(),
 2053|  1.66M|                                       source.data() + source.size()},
 2054|  1.66M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.66M|    static_cast<    \
  |  |  929|  1.66M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.66M|    static_cast<    \
  |  |  929|  1.66M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|  1.66M|    return vscan_parse_format_string(format, handler);
 2056|  2.14M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   718k|{
 1638|   718k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   718k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 718k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   718k|    auto reader =
 1644|   718k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   718k|            ranges::subrange<const CharT*>{source.data(),
 1646|   718k|                                           source.data() + source.size()},
 1647|   718k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   718k|    static_cast<    \
  |  |  929|   718k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   718k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   718k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   718k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   718k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   718k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 27.1k, False: 691k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  27.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  27.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  27.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  27.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  27.1k|    }                                                  \
  |  |  |  | 3667|   718k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   691k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   691k|    return ranges::distance(source.data(), it);
 1650|   718k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|   262k|{
 2045|   262k|    const auto argcount = args.size();
 2046|   262k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 45.1k, False: 217k]
  |  Branch (2046:60): [True: 45.1k, False: 0]
  ------------------
 2047|  45.1k|        auto arg = args.get(0);
 2048|  45.1k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  45.1k|    static_cast<    \
  |  |  929|  45.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|  45.1k|    }
 2050|       |
 2051|   217k|    auto handler = format_handler<true, CharT>{
 2052|   217k|        ranges::subrange<const CharT*>{source.data(),
 2053|   217k|                                       source.data() + source.size()},
 2054|   217k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   217k|    static_cast<    \
  |  |  929|   217k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   217k|    static_cast<    \
  |  |  929|   217k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|   217k|    return vscan_parse_format_string(format, handler);
 2056|   262k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   524k|{
 1625|   524k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 434k, False: 90.2k]
  ------------------
 1626|   434k|        return false;
 1627|   434k|    }
 1628|  90.2k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 90.2k, False: 0]
  |  Branch (1628:39): [True: 90.2k, False: 0]
  ------------------
 1629|   524k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  67.7k|{
 1638|  67.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  67.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.7k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  67.7k|    auto reader =
 1644|  67.7k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  67.7k|            ranges::subrange<const CharT*>{source.data(),
 1646|  67.7k|                                           source.data() + source.size()},
 1647|  67.7k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  67.7k|    static_cast<    \
  |  |  929|  67.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  67.7k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  67.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  67.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  67.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  67.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 54.3k, False: 13.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  54.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  54.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  54.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  54.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  54.3k|    }                                                  \
  |  |  |  | 3667|  67.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  13.4k|    return ranges::distance(source.data(), it);
 1650|  67.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   217k|    {
 1903|   217k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   217k|    {
 1853|   217k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   217k|{
 2030|   217k|    const auto beg = handler.get_ctx().begin();
 2031|   217k|    detail::parse_format_string<false>(format, handler);
 2032|   217k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 181k, False: 36.2k]
  |  |  ------------------
  ------------------
 2033|   181k|        return unexpected(handler.error);
 2034|   181k|    }
 2035|  36.2k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   217k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2013|  1.15M|    {
 2014|  1.15M|        return ctx.get();
 2015|  1.15M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.15M|    {
 1857|  1.15M|        return contiguous_ctx;
 1858|  1.15M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   253k|    {
 1907|   253k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 253k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   253k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   217k|{
 1681|   217k|    auto arg = ctx.arg(id);
 1682|   217k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   217k|    return arg;
 1686|   217k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1935|   217k|    {
 1936|   217k|        return parse_ctx.next_arg_id();
 1937|   217k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1976|   217k|    {
 1977|   217k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|   217k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|   217k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 217k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|   217k|        auto specs = detail::format_specs{};
 1990|   217k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|   217k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|   217k|            arg.type()};
 1993|       |
 1994|   217k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|   217k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 217k]
  |  Branch (1995:29): [True: 0, False: 217k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|   217k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|   217k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|   217k|        on_visit_scan_arg(
 2006|   217k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|   217k|                                           get_ctx().locale()},
 2008|   217k|            arg);
 2009|   217k|        return parse_ctx.begin();
 2010|   217k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   217k|    {
 1701|   217k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|   217k|    {
 1948|   217k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 217k]
  |  Branch (1948:23): [True: 0, False: 217k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|   217k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|   217k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 181k, False: 36.2k]
  |  |  ------------------
  ------------------
 1955|   181k|            on_error(r.error());
 1956|   181k|        }
 1957|  36.2k|        else {
 1958|  36.2k|            get_ctx().advance_to(*r);
 1959|  36.2k|        }
 1960|   217k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|   262k|{
 2065|   262k|    const auto argcount = args.size();
 2066|   262k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 45.1k, False: 217k]
  |  Branch (2066:60): [True: 45.1k, False: 0]
  ------------------
 2067|  45.1k|        auto arg = args.get(0);
 2068|  45.1k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  45.1k|    static_cast<    \
  |  |  929|  45.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|  45.1k|    }
 2070|       |
 2071|   217k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 217k]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|   217k|    SCN_UNLIKELY_ATTR
 2079|   217k|    {
 2080|   217k|        auto handler = format_handler<false, CharT>{
 2081|   217k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   217k|    static_cast<    \
  |  |  929|   217k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   217k|    static_cast<    \
  |  |  929|   217k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|   217k|        return vscan_parse_format_string(format, handler);
 2083|   217k|    }
 2084|   217k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  67.6k|{
 1658|  67.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  67.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 67.6k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  67.6k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  67.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 67.6k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  67.6k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  67.6k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  67.6k|    static_cast<    \
  |  |  929|  67.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  67.6k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  67.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  67.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  67.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  67.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 54.3k, False: 13.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  54.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  54.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  54.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  54.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  54.3k|    }                                                  \
  |  |  |  | 3667|  67.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  13.3k|    return it.position();
 1675|  67.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|   217k|    {
 1903|   217k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   217k|    {
 1830|   217k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   217k|{
 2030|   217k|    const auto beg = handler.get_ctx().begin();
 2031|   217k|    detail::parse_format_string<false>(format, handler);
 2032|   217k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 181k, False: 36.2k]
  |  |  ------------------
  ------------------
 2033|   181k|        return unexpected(handler.error);
 2034|   181k|    }
 2035|  36.2k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   217k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2013|  1.15M|    {
 2014|  1.15M|        return ctx.get();
 2015|  1.15M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  1.15M|    {
 1834|  1.15M|        return ctx;
 1835|  1.15M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   253k|    {
 1907|   253k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 253k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   253k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   217k|{
 1681|   217k|    auto arg = ctx.arg(id);
 1682|   217k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   217k|    return arg;
 1686|   217k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1935|   217k|    {
 1936|   217k|        return parse_ctx.next_arg_id();
 1937|   217k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1976|   217k|    {
 1977|   217k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|   217k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|   217k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 217k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|   217k|        auto specs = detail::format_specs{};
 1990|   217k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|   217k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|   217k|            arg.type()};
 1993|       |
 1994|   217k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|   217k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 217k]
  |  Branch (1995:29): [True: 0, False: 217k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|   217k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 217k]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|   217k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|   217k|        on_visit_scan_arg(
 2006|   217k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|   217k|                                           get_ctx().locale()},
 2008|   217k|            arg);
 2009|   217k|        return parse_ctx.begin();
 2010|   217k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   217k|    {
 1701|   217k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|   217k|    {
 1948|   217k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 217k]
  |  Branch (1948:23): [True: 0, False: 217k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|   217k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|   217k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 181k, False: 36.2k]
  |  |  ------------------
  ------------------
 1955|   181k|            on_error(r.error());
 1956|   181k|        }
 1957|  36.2k|        else {
 1958|  36.2k|            get_ctx().advance_to(*r);
 1959|  36.2k|        }
 1960|   217k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|   239k|{
 2091|   239k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|   239k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|   223k|{
 2091|   223k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|   223k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  22.5k|{
 2091|  22.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  22.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  22.5k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  22.5k|{
 2091|  22.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  22.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  22.5k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  3.01k|{
 1363|  3.01k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  3.01k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  3.01k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  3.01k|            std::u32string tmp;
 1368|  3.01k|            transcode_to_string_impl_to32(src, tmp);
 1369|  3.01k|            return transcode_to_string_impl_32to16<false>(
 1370|  3.01k|                std::u32string_view{tmp}, dest);
 1371|  3.01k|        }
 1372|  3.01k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  3.01k|            return transcode_to_string_impl_to32(src, dest);
 1374|  3.01k|        }
 1375|  3.01k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  3.01k|{
 1256|  3.01k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  3.01k|    auto it = src.begin();
 1259|  1.06M|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 1.06M, False: 3.01k]
  ------------------
 1260|  1.06M|        auto res = get_next_code_point(
 1261|  1.06M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  1.06M|                                                                 src.end()));
 1263|  1.06M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.41k, False: 1.06M]
  |  |  ------------------
  ------------------
 1264|  2.41k|            dest.push_back(DestCharT{0xfffd});
 1265|  2.41k|        }
 1266|  1.06M|        else {
 1267|  1.06M|            dest.push_back(res.value);
 1268|  1.06M|        }
 1269|  1.06M|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  1.06M|    }
 1271|  3.01k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  1.88M|{
 1169|  1.88M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  1.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  1.88M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  1.88M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.4k, False: 1.85M]
  |  |  ------------------
  ------------------
 1173|  29.4k|        return {get_start_for_next_code_point(input),
 1174|  29.4k|                detail::invalid_code_point};
 1175|  29.4k|    }
 1176|  1.85M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.58k, False: 1.84M]
  |  |  ------------------
  ------------------
 1177|  5.58k|        return {input.end(), detail::invalid_code_point};
 1178|  5.58k|    }
 1179|       |
 1180|  1.84M|    return {input.begin() + len,
 1181|  1.84M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  1.85M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  29.4k|{
 1155|  29.4k|    auto it = input.begin();
 1156|   228k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 220k, False: 8.68k]
  ------------------
 1157|   220k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 20.8k, False: 199k]
  ------------------
 1158|  20.8k|            break;
 1159|  20.8k|        }
 1160|   220k|    }
 1161|  29.4k|    return it;
 1162|  29.4k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  40.2M|    {
  809|  40.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  40.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  40.2M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  15.0M|    {
  823|  15.0M|        return a.m_code == b.m_code;
  824|  15.0M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1727|  2.27M|    {
 1728|  2.27M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  2.27M|        std::strcpy(m_locbuf, loc);
 1730|  2.27M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  2.27M|    {
 1733|       |        // Restore locale to what it was before
 1734|  2.27M|        std::setlocale(m_category, m_locbuf);
 1735|  2.27M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1756|  2.27M|    {
 1757|  2.27M|        std::setlocale(cat, "C");
 1758|  2.27M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  3.80M|    {
 2936|  3.80M|        return m_msg == nullptr;
 2937|  3.80M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  3.76M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  52.7M|{
  458|  52.7M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  52.7M|        static_cast<unsigned char>(ch))];
  460|  52.7M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  46.9k|{
  469|  46.9k|    return static_cast<unsigned char>(ch) <= 127;
  470|  46.9k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  10.5M|{
  539|  10.5M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  10.5M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  17.8M|{
  784|  17.8M|    return e != eof_error::good;
  785|  17.8M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  57.9k|{
  798|  57.9k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  57.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  57.9k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  57.9k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   239k|{
  845|   239k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   239k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   239k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   239k|    return parse_error::eof;
  847|   239k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  5.43M|{
  854|  5.43M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 5.43M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  5.43M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 85.8k, False: 5.34M]
  ------------------
  859|  85.8k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  85.8k|    }
  861|       |
  862|  5.34M|    return scan_error{code, msg};
  863|  5.43M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  5.43M|{
  868|  5.43M|    return [code, msg](parse_error err) {
  869|  5.43M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.43M|    };
  871|  5.43M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  5.47M|{
 1200|       |    // Pattern_White_Space property
 1201|  5.47M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 5.22M, False: 257k]
  |  Branch (1201:27): [True: 1.79M, False: 3.42M]
  ------------------
 1202|  5.47M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 127k, False: 3.55M]
  ------------------
 1203|  5.47M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 164k, False: 3.39M]
  ------------------
 1204|  5.47M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 4.79k, False: 3.38M]
  ------------------
 1205|  5.47M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 18.6k, False: 3.37M]
  ------------------
 1206|  5.47M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 83.9k, False: 3.28M]
  ------------------
 1207|  5.47M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 3.28M]
  ------------------
 1208|  5.47M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  6.27M|{
 2220|  6.27M|    unsigned char running_diff{0};
 2221|  23.5M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 17.2M, False: 6.27M]
  ------------------
 2222|  17.2M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  17.2M|    }
 2224|  6.27M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 204k, False: 6.07M]
  |  Branch (2224:33): [True: 32.7k, False: 6.03M]
  ------------------
 2225|  6.27M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  38.5M|{
 3123|  38.5M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  38.5M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|   804k|{
 3127|   804k|#if WCHAR_MIN < 0
 3128|   804k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 792k, False: 12.3k]
  |  Branch (3128:20): [True: 453k, False: 338k]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|   453k|        return char_to_int(static_cast<char>(ch));
 3133|   453k|    }
 3134|   351k|    return 255;
 3135|   804k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  3.26M|{
 6008|  3.26M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 3.26M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  3.26M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 3.26M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  3.26M|    return {};
 6023|  3.26M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  6.98M|    {
  304|  6.98M|        ranges::advance(x, n);
  305|  6.98M|        return x;
  306|  6.98M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  6.98M|    {
  268|  6.98M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  6.98M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  6.98M|    {
  151|  6.98M|        i += n;
  152|  6.98M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  8.29M|    {
  108|  8.29M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  8.29M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  8.29M|    {
   87|  8.29M|        return s - i;
   88|  8.29M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   724k|    {
  304|   724k|        ranges::advance(x, n);
  305|   724k|        return x;
  306|   724k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   724k|    {
  268|   724k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   724k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   724k|    {
  151|   724k|        i += n;
  152|   724k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  69.2k|    {
  108|  69.2k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  69.2k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  69.2k|    {
   87|  69.2k|        return s - i;
   88|  69.2k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  2.37M|{
  981|  2.37M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  2.37M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  2.37M|        return true;
  984|  2.37M|    }
  985|  2.37M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  2.37M|                           ranges::const_iterator_t<Range>,
  987|  2.37M|                           typename detail::basic_scan_buffer<
  988|  2.37M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  2.37M|        auto beg = r.begin();
  990|  2.37M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 2.37M, False: 0]
  ------------------
  991|  2.37M|            return false;
  992|  2.37M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  2.37M|    else {
 1006|  2.37M|        return false;
 1007|  2.37M|    }
 1008|  2.37M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  1.70M|    {
 6037|  1.70M|        const bool need_skipped_width =
 6038|  1.70M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.70M]
  |  Branch (6038:33): [True: 0, False: 1.70M]
  ------------------
 6039|  1.70M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.70M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.70M]
  ------------------
 6043|  1.70M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.70M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.70M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.70M, False: 0]
  |  Branch (6047:56): [True: 1.70M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.70M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.70M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.39M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.70M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.70M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.70M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 21.0k, False: 1.68M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  21.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  21.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  21.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  21.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  21.0k|    }                                                  \
  |  |  |  | 3667|  1.70M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.39M|                            make_eof_scan_error));
 6058|       |
 6059|  3.39M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.68M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.68M|            return result_type{it, 0};
 6067|  3.39M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  1.70M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  4.61M|{
 1976|  4.61M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  4.61M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  4.61M|{
 1957|  4.61M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  4.61M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  4.61M|    }
 1960|  4.61M|    else {
 1961|  4.61M|        auto first = range.begin();
 1962|  25.4M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 25.3M, False: 38.1k]
  ------------------
 1963|  25.3M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 4.57M, False: 20.8M]
  ------------------
 1964|  4.57M|                return first;
 1965|  4.57M|            }
 1966|  25.3M|        }
 1967|  38.1k|        return first;
 1968|  4.61M|    }
 1969|  4.61M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  65.7M|    {
  763|  65.7M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  65.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  65.7M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  5.87M|    {
  754|  5.87M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  32.8M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.8M|              cvref<T> obj = *get<T>(fn);
  745|  32.8M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  32.8M|                  obj(static_cast<decltype(args)>(args)...);
  747|  32.8M|              }
  748|  32.8M|              else {
  749|  32.8M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.8M|              }
  751|  32.8M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  32.8M|    {
  684|  32.8M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  32.8M|            return static_cast<T*>(s.m_cp);
  686|  32.8M|        }
  687|  32.8M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  32.8M|            return static_cast<T*>(s.m_p);
  689|  32.8M|        }
  690|  32.8M|        else {
  691|  32.8M|            return reinterpret_cast<T*>(s.m_fp);
  692|  32.8M|        }
  693|  32.8M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  5.87M|        {
  662|  5.87M|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  4.05M|    {
  108|  4.05M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  4.05M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  4.05M|    {
   94|  4.05M|        iter_difference_t<I> counter{0};
   95|  41.1M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 37.0M, False: 4.05M]
  ------------------
   96|  37.0M|            ++i;
   97|  37.0M|            ++counter;
   98|  37.0M|        }
   99|  4.05M|        return counter;
  100|  4.05M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  6.29M|{
 1857|  6.29M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  6.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  6.29M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  6.29M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  6.29M|        if (sz < count) {
 1862|  6.29M|            return unexpected(eof_error::eof);
 1863|  6.29M|        }
 1864|       |
 1865|  6.29M|        return ranges::next(range.begin(), count);
 1866|  6.29M|    }
 1867|  6.29M|    else {
 1868|  6.29M|        auto it = range.begin();
 1869|  6.29M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 3.88M, False: 2.41M]
  ------------------
 1870|  3.88M|            return ranges::next(it, count);
 1871|  3.88M|        }
 1872|       |
 1873|  9.63M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 7.27M, False: 2.36M]
  ------------------
 1874|  7.27M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 51.3k, False: 7.22M]
  ------------------
 1875|  51.3k|                return unexpected(eof_error::eof);
 1876|  51.3k|            }
 1877|  7.27M|        }
 1878|       |
 1879|  2.36M|        return it;
 1880|  2.41M|    }
 1881|  6.29M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  6.29M|{
 1095|  6.29M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  6.29M|        return r.size();
 1097|  6.29M|    }
 1098|  6.29M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  6.29M|                           ranges::const_iterator_t<Range>,
 1100|  6.29M|                           typename detail::basic_scan_buffer<
 1101|  6.29M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  6.29M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  6.29M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  6.29M|        }
 1105|  6.29M|        else {
 1106|  6.29M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 6.29M, False: 0]
  ------------------
 1107|  6.29M|                return static_cast<size_t>(
 1108|  6.29M|                    r.begin().parent()->chars_available() -
 1109|  6.29M|                    r.begin().position());
 1110|  6.29M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  6.29M|        }
 1113|  6.29M|    }
 1114|  6.29M|    else {
 1115|  6.29M|        return 0;
 1116|  6.29M|    }
 1117|  6.29M|}
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  9.22M|    {
  763|  9.22M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  9.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  9.22M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  2.64M|    {
  754|  2.64M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  4.56M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.56M|              cvref<T> obj = *get<T>(fn);
  745|  4.56M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.56M|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.56M|              }
  748|  4.56M|              else {
  749|  4.56M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.56M|              }
  751|  4.56M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  4.56M|    {
  684|  4.56M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.56M|            return static_cast<T*>(s.m_cp);
  686|  4.56M|        }
  687|  4.56M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  4.56M|            return static_cast<T*>(s.m_p);
  689|  4.56M|        }
  690|  4.56M|        else {
  691|  4.56M|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.56M|        }
  693|  4.56M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  2.64M|        {
  662|  2.64M|        }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  5.43M|    return [code, msg](parse_error err) {
  869|  5.43M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.43M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|   960k|    {
 1780|   960k|        auto stdloc = loc.get<std::locale>();
 1781|   960k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   960k|        grouping = numpunct.grouping();
 1783|   960k|        thousands_sep =
 1784|   960k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 960k]
  ------------------
 1785|   960k|        decimal_point = numpunct.decimal_point();
 1786|   960k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|   960k|{
 1717|   960k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 960k, False: 0]
  ------------------
 1718|   960k|        return std::use_facet<Facet>(stdloc);
 1719|   960k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   960k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  6.80M|{
 1846|  6.80M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.8k, False: 6.77M]
  |  |  ------------------
  ------------------
 1847|  28.8k|        return unexpected(e);
 1848|  28.8k|    }
 1849|       |
 1850|  6.77M|    return ranges::next(range.begin());
 1851|  6.80M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  9.84M|{
  950|  9.84M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  9.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 57.0k, False: 9.79M]
  |  |  ------------------
  ------------------
  951|  57.0k|        return eof_error::eof;
  952|  57.0k|    }
  953|  9.79M|    return eof_error::good;
  954|  9.84M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  13.7M|{
  944|  13.7M|    return is_range_eof(r.begin(), r.end());
  945|  13.7M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  13.7M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  13.7M|    {
  937|  13.7M|        return begin == end;
  938|  13.7M|    }
  939|  13.7M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  6.77M|    {
  296|  6.77M|        ++x;
  297|  6.77M|        return x;
  298|  6.77M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  2.59M|{
 3141|  2.59M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.59M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.84M, False: 745k]
  ------------------
 3143|  1.84M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.84M, False: 491]
  ------------------
 3144|  1.84M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.84M|        }
 3146|    491|        return unexpected(eof_error::eof);
 3147|  1.84M|    }
 3148|       |
 3149|   745k|    auto& it = *r;
 3150|   745k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 299k, False: 446k]
  ------------------
 3151|   299k|        return std::pair{it, sign_type::minus_sign};
 3152|   299k|    }
 3153|   446k|    return std::pair{it, sign_type::plus_sign};
 3154|   745k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  4.55M|{
 2272|  4.55M|    auto it = read_code_unit(range);
 2273|  4.55M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.8k, False: 4.53M]
  |  |  ------------------
  ------------------
 2274|  16.8k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  16.8k|    }
 2276|       |
 2277|  8.44M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 8.44M, False: 3.54M]
  ------------------
 2278|  8.44M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 989k, False: 7.45M]
  ------------------
 2279|   989k|            return *it;
 2280|   989k|        }
 2281|  8.44M|    }
 2282|       |
 2283|  3.54M|    return unexpected(parse_error::error);
 2284|  4.53M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  6.29M|{
 2231|  6.29M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  6.29M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  6.29M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  6.29M|        if (range.size() < str.size()) {
 2236|  6.29M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  6.29M|        }
 2238|  6.29M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  6.29M|            return unexpected(parse_error::error);
 2240|  6.29M|        }
 2241|  6.29M|        return ranges::next(range.begin(), str.size());
 2242|  6.29M|    }
 2243|  6.29M|    else {
 2244|  6.29M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  6.29M|            if (ch < 'A' || ch > 'Z') {
 2246|  6.29M|                return ch;
 2247|  6.29M|            }
 2248|  6.29M|            return static_cast<char_type>(ch +
 2249|  6.29M|                                          static_cast<char_type>('a' - 'A'));
 2250|  6.29M|        };
 2251|       |
 2252|  6.29M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  6.29M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  6.29M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  6.29M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 51.3k, False: 6.24M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  51.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  51.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  51.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  51.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  51.3k|    }                                                  \
  |  |  |  | 3667|  6.29M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  6.24M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  6.24M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  6.24M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  6.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.00M, False: 235k]
  |  |  ------------------
  ------------------
 2257|  6.24M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  6.24M|                    return ascii_tolower(a) ==
 2259|  6.24M|                           static_cast<detail::char_t<Range>>(b);
 2260|  6.24M|                }))) {
 2261|  6.00M|            return unexpected(parse_error::error);
 2262|  6.00M|        }
 2263|       |
 2264|   235k|        return it;
 2265|  6.24M|    }
 2266|  6.29M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  7.30M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  7.30M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 6.55M, False: 753k]
  |  Branch (2245:29): [True: 640k, False: 113k]
  ------------------
 2246|  7.19M|                return ch;
 2247|  7.19M|            }
 2248|   113k|            return static_cast<char_type>(ch +
 2249|   113k|                                          static_cast<char_type>('a' - 'A'));
 2250|  7.30M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  2.25M|{
 2146|  2.25M|    auto it = read_code_unit(range);
 2147|  2.25M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.0k, False: 2.23M]
  |  |  ------------------
  ------------------
 2148|  12.0k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  12.0k|    }
 2150|       |
 2151|  2.23M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.88M, False: 349k]
  |  |  ------------------
  ------------------
 2152|  2.23M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.88M|        return unexpected(parse_error::error);
 2154|  1.88M|    }
 2155|       |
 2156|   349k|    return *it;
 2157|  2.23M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  4.61M|{
 1996|  4.61M|    auto it = read_while_code_unit(range, pred);
 1997|  4.61M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.93M, False: 2.67M]
  ------------------
 1998|  1.93M|        return unexpected(parse_error::error);
 1999|  1.93M|    }
 2000|  2.67M|    return it;
 2001|  4.61M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  2.14M|    {
 1621|  2.14M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.14M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.14M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.14M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.14M|            m_storage.reset();
 1627|  2.14M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.14M|        }
 1629|  2.14M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.14M|                                          std::basic_string<CharT>>) {
 1631|  2.14M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.14M|            m_view = string_view_type{*m_storage};
 1633|  2.14M|        }
 1634|  2.14M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  2.14M|                                          typename detail::basic_scan_buffer<
 1636|  2.14M|                                              value_t>::forward_iterator> &&
 1637|  2.14M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  2.14M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.14M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.14M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  2.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 298k, False: 1.84M]
  |  |  ------------------
  ------------------
 1641|  2.14M|                             detail::to_address(end_seg.end()))) {
 1642|   298k|                auto& str = m_storage.emplace();
 1643|   298k|                str.reserve(range.end().position() - range.begin().position());
 1644|   298k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   298k|                m_view = string_view_type{str};
 1646|   298k|                return;
 1647|   298k|            }
 1648|       |
 1649|  1.84M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.84M|                                                            end_seg.data());
 1651|  1.84M|            m_storage.reset();
 1652|  1.84M|        }
 1653|  2.14M|        else {
 1654|  2.14M|            auto& str = m_storage.emplace();
 1655|  2.14M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.14M|                str.reserve(range.size());
 1657|  2.14M|            }
 1658|  2.14M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.14M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.14M|                          std::back_inserter(str));
 1661|  2.14M|            }
 1662|  2.14M|            else {
 1663|  2.14M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.14M|                     ++it) {
 1665|  2.14M|                    str.push_back(*it);
 1666|  2.14M|                }
 1667|  2.14M|            }
 1668|  2.14M|            m_view = string_view_type{str};
 1669|  2.14M|        }
 1670|  2.14M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  15.8M|    {
 1582|  15.8M|        return m_view;
 1583|  15.8M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  9.41M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  1.59M|    {
 6079|  1.59M|        const bool need_skipped_width =
 6080|  1.59M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.59M]
  |  Branch (6080:33): [True: 0, False: 1.59M]
  ------------------
 6081|  1.59M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.59M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.59M]
  ------------------
 6084|  1.59M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.59M]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  1.59M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 1.59M, False: 0]
  ------------------
 6089|  1.59M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 0, False: 1.59M]
  ------------------
 6090|  1.59M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 0]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  ------------------
 6092|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  1.59M|        return result_type{rng.begin(), 0};
 6114|  1.59M|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  3.49M|{
 1846|  3.49M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.88k, False: 3.49M]
  |  |  ------------------
  ------------------
 1847|  6.88k|        return unexpected(e);
 1848|  6.88k|    }
 1849|       |
 1850|  3.49M|    return ranges::next(range.begin());
 1851|  3.49M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  6.59M|{
  950|  6.59M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  6.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.4k, False: 6.56M]
  |  |  ------------------
  ------------------
  951|  32.4k|        return eof_error::eof;
  952|  32.4k|    }
  953|  6.56M|    return eof_error::good;
  954|  6.59M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  6.59M|{
  944|  6.59M|    return is_range_eof(r.begin(), r.end());
  945|  6.59M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  6.59M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  6.59M|    {
  937|  6.59M|        return begin == end;
  938|  6.59M|    }
  939|  6.59M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  3.49M|    {
  296|  3.49M|        ++x;
  297|  3.49M|        return x;
  298|  3.49M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  2.43M|{
 3141|  2.43M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.43M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.72M, False: 709k]
  ------------------
 3143|  1.72M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.72M, False: 156]
  ------------------
 3144|  1.72M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.72M|        }
 3146|    156|        return unexpected(eof_error::eof);
 3147|  1.72M|    }
 3148|       |
 3149|   709k|    auto& it = *r;
 3150|   709k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 287k, False: 422k]
  ------------------
 3151|   287k|        return std::pair{it, sign_type::minus_sign};
 3152|   287k|    }
 3153|   422k|    return std::pair{it, sign_type::plus_sign};
 3154|   709k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  2.82M|{
 2272|  2.82M|    auto it = read_code_unit(range);
 2273|  2.82M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.20k, False: 2.82M]
  |  |  ------------------
  ------------------
 2274|  3.20k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  3.20k|    }
 2276|       |
 2277|  5.16M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 5.16M, False: 2.03M]
  ------------------
 2278|  5.16M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 788k, False: 4.37M]
  ------------------
 2279|   788k|            return *it;
 2280|   788k|        }
 2281|  5.16M|    }
 2282|       |
 2283|  2.03M|    return unexpected(parse_error::error);
 2284|  2.82M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  6.33M|{
 2231|  6.33M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  6.33M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  6.33M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  6.33M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 55.6k, False: 6.27M]
  ------------------
 2236|  55.6k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  55.6k|        }
 2238|  6.27M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 6.03M, False: 237k]
  ------------------
 2239|  6.03M|            return unexpected(parse_error::error);
 2240|  6.03M|        }
 2241|   237k|        return ranges::next(range.begin(), str.size());
 2242|  6.27M|    }
 2243|  6.33M|    else {
 2244|  6.33M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  6.33M|            if (ch < 'A' || ch > 'Z') {
 2246|  6.33M|                return ch;
 2247|  6.33M|            }
 2248|  6.33M|            return static_cast<char_type>(ch +
 2249|  6.33M|                                          static_cast<char_type>('a' - 'A'));
 2250|  6.33M|        };
 2251|       |
 2252|  6.33M|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  6.33M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  6.33M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  6.33M|        if (SCN_UNLIKELY(!std::equal(
 2257|  6.33M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  6.33M|                    return ascii_tolower(a) ==
 2259|  6.33M|                           static_cast<detail::char_t<Range>>(b);
 2260|  6.33M|                }))) {
 2261|  6.33M|            return unexpected(parse_error::error);
 2262|  6.33M|        }
 2263|       |
 2264|  6.33M|        return it;
 2265|  6.33M|    }
 2266|  6.33M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   673k|{
 2146|   673k|    auto it = read_code_unit(range);
 2147|   673k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   673k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.68k, False: 670k]
  |  |  ------------------
  ------------------
 2148|  3.68k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  3.68k|    }
 2150|       |
 2151|   670k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   670k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 558k, False: 111k]
  |  |  ------------------
  ------------------
 2152|   670k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   558k|        return unexpected(parse_error::error);
 2154|   558k|    }
 2155|       |
 2156|   111k|    return *it;
 2157|   670k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  8.97M|    {
 1503|  8.97M|        return sv;
 1504|  8.97M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  1.26M|{
 1976|  1.26M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.26M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  1.26M|{
 1957|  1.26M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.26M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.26M|    }
 1960|  1.26M|    else {
 1961|  1.26M|        auto first = range.begin();
 1962|  1.26M|        for (; first != range.end(); ++first) {
 1963|  1.26M|            if (pred(*first)) {
 1964|  1.26M|                return first;
 1965|  1.26M|            }
 1966|  1.26M|        }
 1967|  1.26M|        return first;
 1968|  1.26M|    }
 1969|  1.26M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  2.37M|{
 2951|  2.37M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.37M, False: 0]
  ------------------
 2952|  2.37M|        auto it = read_while_classic_space(range);
 2953|  2.37M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.37M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.4k, False: 2.35M]
  |  |  ------------------
  ------------------
 2955|  19.4k|            return unexpected(e);
 2956|  19.4k|        }
 2957|       |
 2958|  2.35M|        return it;
 2959|  2.37M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.37M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  2.37M|{
 2117|  2.37M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.37M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.37M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.37M|        auto buf = make_contiguous_buffer(range);
 2121|  2.37M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.37M|        return ranges::next(range.begin(),
 2123|  2.37M|                            ranges::distance(buf.view().begin(), it));
 2124|  2.37M|    }
 2125|  2.37M|    else {
 2126|  2.37M|        auto it = range.begin();
 2127|       |
 2128|  2.37M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  2.37M|            auto seg = get_contiguous_beginning(range);
 2130|  2.37M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.37M|                seg_it != seg.end()) {
 2132|  2.37M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  2.37M|            }
 2134|  2.37M|            ranges::advance(it, seg.size());
 2135|  2.37M|        }
 2136|       |
 2137|  2.37M|        return read_while_code_point(
 2138|  2.37M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.37M|    }
 2140|  2.37M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  2.37M|{
 1683|  2.37M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.37M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.37M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.37M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.37M|    }
 1688|  2.37M|    else {
 1689|  2.37M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.37M|    }
 1691|  2.37M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  2.37M|    {
 1490|  2.37M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  6.43M|    {
  304|  6.43M|        ranges::advance(x, n);
  305|  6.43M|        return x;
  306|  6.43M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  8.51M|    {
  268|  8.51M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  8.51M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  8.51M|    {
  181|  40.7M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 32.2M, False: 8.51M]
  ------------------
  182|  32.2M|            ++i;
  183|  32.2M|        }
  184|  8.51M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6177|   540k|    {
 6178|   540k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   540k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|   540k|            auto rd = make_reader<T, char_type>();
 6183|   540k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|   540k|                return unexpected(e);
 6185|   540k|            }
 6186|       |
 6187|   540k|            return impl(rd, range, value);
 6188|   540k|        }
 6189|   540k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|   540k|            auto rd = make_reader<T, char_type>();
 6191|   540k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   540k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 540k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|   540k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 540k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|   540k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|   540k|                return impl(rd, range, value);
 6198|   540k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|   540k|        else {
 6206|   540k|            SCN_EXPECT(false);
 6207|   540k|            SCN_UNREACHABLE;
 6208|   540k|        }
 6209|   540k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  3.36M|    {
 3040|  3.36M|        reader_error_handler eh{};
 3041|  3.36M|        get_derived().check_specs_impl(specs, eh);
 3042|  3.36M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.36M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  3.36M|        return {};
 3046|  3.36M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  3.36M|    {
 3051|  3.36M|        return static_cast<Derived&>(*this);
 3052|  3.36M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  3.36M|    {
 4145|  3.36M|        detail::check_float_type_specs(specs, eh);
 4146|  3.36M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|   540k|    {
 6120|   540k|        const bool need_skipped_width =
 6121|   540k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 540k]
  |  Branch (6121:33): [True: 0, False: 540k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   540k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   540k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   540k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   540k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   540k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.34k, False: 534k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.34k|    }                                                  \
  |  |  |  | 3667|   540k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   534k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   534k|        auto [it, prefix_width] = prefix_result;
 6126|   534k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   534k|        std::ptrdiff_t value_width = 0;
 6130|   534k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 534k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   534k|        else {
 6146|   534k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   534k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   534k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   534k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 23.8k, False: 510k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  23.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  23.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  23.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  23.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  23.8k|    }                                                  \
  |  | 3667|   534k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   534k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   510k|                                             specs, value, loc));
 6148|       |
 6149|   510k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 510k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   510k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   510k|        std::ptrdiff_t postfix_width = 0;
 6158|   510k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 505k, False: 4.89k]
  ------------------
 6159|   505k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   505k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   505k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   505k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   505k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 505k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   505k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   505k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   505k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   505k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   505k|                                 value_width));
 6163|   505k|            std::tie(it, postfix_width) = postfix_result;
 6164|   505k|        }
 6165|       |
 6166|   510k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   510k|                                                 value_width, postfix_width);
 6168|   510k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 510k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   510k|        return it;
 6173|   510k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  7.91M|    {
 3035|  7.91M|        return true;
 3036|  7.91M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|  3.32M|    {
 4217|  3.32M|        unsigned options{};
 4218|  3.32M|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 960k, False: 2.36M]
  ------------------
 4219|   960k|            options |= float_reader_base::allow_thsep;
 4220|   960k|        }
 4221|       |
 4222|  3.32M|        SCN_GCC_COMPAT_PUSH
 4223|  3.32M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|  3.32M|        switch (specs.type) {
 4226|   419k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 419k, False: 2.90M]
  ------------------
 4227|   419k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  64.4k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 64.4k, False: 3.26M]
  ------------------
 4230|  64.4k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|  1.07M|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 1.07M, False: 2.25M]
  ------------------
 4233|  1.07M|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   807k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 807k, False: 2.52M]
  ------------------
 4236|   807k|                return options | float_reader_base::allow_scientific |
 4237|   807k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   960k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 960k, False: 2.36M]
  ------------------
 4240|   960k|                return options | float_reader_base::allow_scientific |
 4241|   960k|                       float_reader_base::allow_fixed |
 4242|   960k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 3.32M]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|  3.32M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|  3.32M|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|  3.32M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|  3.32M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  4.70M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  9.41M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|  1.44M|    {
 3691|  1.44M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.44M|        const std::ptrdiff_t sign_len =
 3694|  1.44M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 430k, False: 1.01M]
  ------------------
 3695|       |
 3696|  1.44M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  1.44M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.44M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.44M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22.4k, False: 1.41M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  22.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  22.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  22.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  22.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  22.4k|    }                                                  \
  |  |  |  | 3667|  1.44M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.41M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.44M|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  4.57M|    {
 4057|  4.57M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 4.57M, False: 0]
  ------------------
 4058|  4.57M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 4.57M, False: 0]
  ------------------
 4059|  4.57M|            return;
 4060|  4.57M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  5.40M|    {
 1587|  5.40M|        return m_storage.has_value();
 1588|  5.40M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  3.17M|    {
 1592|  3.17M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  3.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  3.17M|        return *m_storage;
 1594|  3.17M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   534k|    {
 4170|   534k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   534k|#if !SCN_DISABLE_LOCALE
 4173|   534k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 150k, False: 383k]
  ------------------
 4174|   150k|            return read_impl<Range>(
 4175|   150k|                range, rd,
 4176|   150k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   150k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   150k|                },
 4179|   150k|                value, loc);
 4180|   150k|        }
 4181|   383k|#endif
 4182|       |
 4183|   383k|        return read_impl<Range>(
 4184|   383k|            range, rd,
 4185|   383k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   383k|                return r.read_source(SCN_FWD(args)...);
 4187|   383k|            },
 4188|   383k|            value);
 4189|   534k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   739k|    {
 4206|   739k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   739k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   739k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.9k, False: 714k]
  |  |  ------------------
  ------------------
 4208|  24.9k|            return unexpected(r.error());
 4209|  24.9k|        }
 4210|       |
 4211|   714k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   714k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   714k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   714k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   714k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.80k, False: 709k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.80k|    }                                                  \
  |  |  |  | 3667|   714k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   709k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   709k|        return ranges::next(range.begin(), n);
 4213|   714k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  2.34M|    {
  763|  2.34M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.34M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   150k|    {
  754|   150k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   150k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   150k|              cvref<T> obj = *get<T>(fn);
  745|   150k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   150k|                  obj(static_cast<decltype(args)>(args)...);
  747|   150k|              }
  748|   150k|              else {
  749|   150k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   150k|              }
  751|   150k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   150k|    {
  684|   150k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   150k|            return static_cast<T*>(s.m_cp);
  686|   150k|        }
  687|   150k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   150k|            return static_cast<T*>(s.m_p);
  689|   150k|        }
  690|   150k|        else {
  691|   150k|            return reinterpret_cast<T*>(s.m_fp);
  692|   150k|        }
  693|   150k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   150k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   150k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   150k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   486k|    {
 3679|   486k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   486k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   486k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 486k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   486k|        return read_source_impl(range);
 3685|   486k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|  2.34M|    {
 3705|  2.34M|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|  2.34M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.34M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.34M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.34M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.34M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  2.34M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  2.34M|        auto it = sign_result.first;
 3708|  2.34M|        m_sign = sign_result.second;
 3709|       |
 3710|  2.34M|        auto digits_begin = it;
 3711|  2.34M|        auto r = ranges::subrange{it, range.end()};
 3712|  2.34M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  2.34M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.34M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|  2.34M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|  2.34M|                SCN_TRY_ASSIGN(
 3717|  2.34M|                    it,
 3718|  2.34M|                    do_read_source_impl(
 3719|  2.34M|                        r,
 3720|  2.34M|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|  2.34M|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|  2.34M|            }
 3723|  2.34M|            else {
 3724|  2.34M|                auto cb = [&](const auto& rr)
 3725|  2.34M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  2.34M|                    auto res = read_all(rr);
 3727|  2.34M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  2.34M|                        return unexpected_scan_error(
 3729|  2.34M|                            scan_error::invalid_scanned_value,
 3730|  2.34M|                            "Invalid float value");
 3731|  2.34M|                    }
 3732|  2.34M|                    return res;
 3733|  2.34M|                };
 3734|  2.34M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|  2.34M|            }
 3736|  2.34M|        }
 3737|  2.34M|        else {
 3738|  2.34M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|  2.34M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  2.34M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 80.3k, False: 2.26M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  80.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  80.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  80.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  80.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  80.3k|    }                                                  \
  |  | 3667|  2.34M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  2.26M|                it,
 3740|  2.26M|                do_read_source_impl(
 3741|  2.26M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  2.26M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  2.26M|        }
 3744|       |
 3745|  2.26M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  2.26M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 2.24M, False: 22.3k]
  |  Branch (3747:48): [True: 2.23M, False: 15.7k]
  ------------------
 3748|  2.26M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 2.13M, False: 91.0k]
  ------------------
 3749|  2.26M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 2.13M, False: 2.66k]
  ------------------
 3750|  2.13M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  2.13M|        }
 3752|       |
 3753|  2.26M|        handle_separators();
 3754|       |
 3755|  2.26M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 2.26M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  2.26M|        return it;
 3768|  2.26M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|  2.34M|    {
 4000|  2.34M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  2.34M|        const bool allowed_nonhex =
 4002|  2.34M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  2.34M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  2.34M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 2.31M, False: 38.1k]
  |  Branch (4005:45): [True: 0, False: 2.31M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  2.34M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 38.1k, False: 2.31M]
  ------------------
 4011|  38.1k|            return *r;
 4012|  38.1k|        }
 4013|       |
 4014|  2.31M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 2.21M, False: 93.6k]
  |  Branch (4014:45): [True: 1.15k, False: 2.21M]
  ------------------
 4015|  1.15k|            return unexpected(r.error());
 4016|  1.15k|        }
 4017|  2.30M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 93.6k, False: 2.21M]
  ------------------
 4018|  93.6k|            return *r;
 4019|  93.6k|        }
 4020|       |
 4021|  2.21M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.59M, False: 617k]
  |  Branch (4021:28): [True: 515k, False: 1.08M]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   515k|            auto it = range.begin();
 4025|       |
 4026|   515k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 26.5k, False: 489k]
  ------------------
 4027|  26.5k|                m_kind = float_kind::hex_with_prefix;
 4028|  26.5k|                it = *r;
 4029|  26.5k|            }
 4030|   489k|            else {
 4031|   489k|                m_kind = float_kind::hex_without_prefix;
 4032|   489k|            }
 4033|       |
 4034|   515k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   515k|        }
 4036|  1.69M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 617k, False: 1.08M]
  |  Branch (4036:29): [True: 617k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   617k|            m_kind = float_kind::generic;
 4040|   617k|            return read_regular_float(range);
 4041|   617k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.08M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 59.8k, False: 1.02M]
  |  |  ------------------
  ------------------
 4047|  59.8k|            m_kind = float_kind::hex_with_prefix;
 4048|  59.8k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  59.8k|        }
 4050|       |
 4051|  1.02M|        m_kind = float_kind::generic;
 4052|  1.02M|        return read_regular(range);
 4053|  1.08M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|  2.34M|    {
 3811|  2.34M|        auto it = range.begin();
 3812|  2.34M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 2.31M, False: 38.1k]
  ------------------
 3813|  2.31M|            return unexpected(r.error());
 3814|  2.31M|        }
 3815|  38.1k|        else {
 3816|  38.1k|            it = *r;
 3817|  38.1k|        }
 3818|       |
 3819|  38.1k|        if (auto r = read_matching_string_classic_nocase(
 3820|  38.1k|                ranges::subrange{it, range.end()}, "inity");
 3821|  38.1k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 22.3k, False: 15.7k]
  ------------------
 3822|  22.3k|            m_kind = float_kind::inf_short;
 3823|  22.3k|            return it;
 3824|  22.3k|        }
 3825|  15.7k|        else {
 3826|  15.7k|            m_kind = float_kind::inf_long;
 3827|  15.7k|            return *r;
 3828|  15.7k|        }
 3829|  38.1k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|  2.31M|    {
 3834|  2.31M|        auto it = range.begin();
 3835|  2.31M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 2.21M, False: 94.8k]
  ------------------
 3836|  2.21M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  2.21M|                scan_error::invalid_scanned_value,
 3838|  2.21M|                "Invalid floating-point NaN value"));
 3839|  2.21M|        }
 3840|  94.8k|        else {
 3841|  94.8k|            it = *r;
 3842|  94.8k|        }
 3843|       |
 3844|  94.8k|        if (auto r =
 3845|  94.8k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  94.8k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 91.0k, False: 3.81k]
  ------------------
 3847|  91.0k|            m_kind = float_kind::nan_simple;
 3848|  91.0k|            return it;
 3849|  91.0k|        }
 3850|  3.81k|        else {
 3851|  3.81k|            it = *r;
 3852|  3.81k|        }
 3853|       |
 3854|  3.81k|        auto payload_beg_it = it;
 3855|  3.81k|        it = read_while_code_unit(
 3856|  3.81k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  3.81k|                return is_ascii_char(ch) &&
 3858|  3.81k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  3.81k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  3.81k|            });
 3861|  3.81k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  3.81k|        m_kind = float_kind::nan_with_payload;
 3864|  3.81k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.66k, False: 1.15k]
  ------------------
 3865|  3.81k|                                             ')')) {
 3866|  2.66k|            return *r;
 3867|  2.66k|        }
 3868|  1.15k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.15k|                                     "Invalid floating-point NaN payload");
 3870|  3.81k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_:
  753|  3.81k|    {
  754|  3.81k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  23.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.5k|              cvref<T> obj = *get<T>(fn);
  745|  23.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.5k|              }
  748|  23.5k|              else {
  749|  23.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.5k|              }
  751|  23.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  23.5k|    {
  684|  23.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.5k|            return static_cast<T*>(s.m_cp);
  686|  23.5k|        }
  687|  23.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.5k|            return static_cast<T*>(s.m_p);
  689|  23.5k|        }
  690|  23.5k|        else {
  691|  23.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.5k|        }
  693|  23.5k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3856|  23.5k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  23.5k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 23.3k, False: 201]
  ------------------
 3858|  23.5k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 20.5k, False: 2.76k]
  |  Branch (3858:39): [True: 12.7k, False: 7.77k]
  |  Branch (3858:54): [True: 2.53k, False: 8.00k]
  |  Branch (3858:67): [True: 2.45k, False: 83]
  ------------------
 3859|  23.3k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 2.76k]
  |  Branch (3859:39): [True: 2.51k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 2.85k]
  ------------------
 3860|  23.5k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_LPv0EEEPSM_:
  661|  3.81k|        {
  662|  3.81k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|  1.59M|    {
 3804|  1.59M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.59M|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   575k|    {
 3904|   575k|        auto it = range.begin();
 3905|       |
 3906|   575k|        std::ptrdiff_t digits_count = 0;
 3907|   575k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   575k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   575k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.90k, False: 565k]
  |  |  ------------------
  ------------------
 3909|  9.90k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  9.90k|                scan_error::invalid_scanned_value,
 3911|  9.90k|                "Invalid hexadecimal floating-point value"));
 3912|  9.90k|        }
 3913|   565k|        else {
 3914|   565k|            digits_count += ranges::distance(it, *r);
 3915|   565k|            it = *r;
 3916|   565k|        }
 3917|       |
 3918|   565k|        m_integral_part_length = digits_count;
 3919|   565k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 74.1k, False: 491k]
  ------------------
 3920|   565k|                                             m_locale_options.decimal_point)) {
 3921|  74.1k|            it = *r;
 3922|  74.1k|        }
 3923|       |
 3924|   565k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 58.7k, False: 507k]
  ------------------
 3925|   565k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|  58.7k|            digits_count += ranges::distance(it, *r);
 3927|  58.7k|            it = *r;
 3928|  58.7k|        }
 3929|       |
 3930|   565k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   565k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 565k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|   565k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|   565k|        return it;
 3938|   565k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|  1.14M|    {
 3789|  1.14M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.14M]
  |  |  |  Branch (859:45): [True: 0, False: 1.14M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|  1.14M|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|  1.14M|        return read_while1_code_unit(
 3798|  1.14M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|  1.14M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  1.14M|    {
  754|  1.14M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  5.91M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.91M|              cvref<T> obj = *get<T>(fn);
  745|  5.91M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.91M|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.91M|              }
  748|  5.91M|              else {
  749|  5.91M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.91M|              }
  751|  5.91M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  5.91M|    {
  684|  5.91M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.91M|            return static_cast<T*>(s.m_cp);
  686|  5.91M|        }
  687|  5.91M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.91M|            return static_cast<T*>(s.m_p);
  689|  5.91M|        }
  690|  5.91M|        else {
  691|  5.91M|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.91M|        }
  693|  5.91M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3798|  5.91M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  1.14M|        {
  662|  1.14M|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|  1.96M|    {
 3876|  1.96M|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 244k, False: 1.71M]
  ------------------
 3877|   244k|            auto beg_exp_it = range.begin();
 3878|   244k|            auto it = *r;
 3879|       |
 3880|   244k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 243k, False: 491]
  ------------------
 3881|   244k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|   243k|                it = r_sign->first;
 3883|   243k|            }
 3884|       |
 3885|   244k|            if (auto r_exp = read_while1_code_unit(
 3886|   244k|                    ranges::subrange{it, range.end()},
 3887|   244k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   244k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.81k, False: 241k]
  |  |  ------------------
  ------------------
 3889|  2.81k|                it = beg_exp_it;
 3890|  2.81k|            }
 3891|   241k|            else {
 3892|   241k|                it = *r_exp;
 3893|   241k|            }
 3894|       |
 3895|   244k|            return it;
 3896|   244k|        }
 3897|  1.71M|        return range.begin();
 3898|  1.96M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_:
  753|   244k|    {
  754|   244k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|   777k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   777k|              cvref<T> obj = *get<T>(fn);
  745|   777k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   777k|                  obj(static_cast<decltype(args)>(args)...);
  747|   777k|              }
  748|   777k|              else {
  749|   777k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   777k|              }
  751|   777k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   777k|    {
  684|   777k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   777k|            return static_cast<T*>(s.m_cp);
  686|   777k|        }
  687|   777k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   777k|            return static_cast<T*>(s.m_p);
  689|   777k|        }
  690|   777k|        else {
  691|   777k|            return reinterpret_cast<T*>(s.m_fp);
  692|   777k|        }
  693|   777k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   777k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_LPv0EEEPSL_:
  661|   244k|        {
  662|   244k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|  1.63M|    {
 3944|  1.63M|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|  1.63M|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 1.43M, False: 204k]
  |  Branch (3945:50): [True: 30.5k, False: 1.40M]
  ------------------
 3946|       |
 3947|  1.63M|        auto it = ranges::begin(range);
 3948|  1.63M|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|  1.63M|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|  1.63M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.7k, False: 1.58M]
  |  |  ------------------
  ------------------
 3952|  53.7k|            return r.transform_error(
 3953|  53.7k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  53.7k|                                              "Invalid floating-point value"));
 3955|  53.7k|        }
 3956|  1.58M|        else {
 3957|  1.58M|            digits_count += ranges::distance(it, *r);
 3958|  1.58M|            it = *r;
 3959|  1.58M|        }
 3960|       |
 3961|  1.58M|        m_integral_part_length = digits_count;
 3962|  1.58M|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 269k, False: 1.31M]
  ------------------
 3963|  1.58M|                                             m_locale_options.decimal_point)) {
 3964|   269k|            it = *r;
 3965|   269k|        }
 3966|       |
 3967|  1.58M|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 227k, False: 1.35M]
  ------------------
 3968|  1.58M|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   227k|            digits_count += ranges::distance(it, *r);
 3970|   227k|            it = *r;
 3971|   227k|        }
 3972|       |
 3973|  1.58M|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  1.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.58M]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  1.58M|        auto beg_exp_it = it;
 3979|  1.58M|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 1.39M, False: 189k]
  ------------------
 3980|  1.39M|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  1.39M|        }
 3982|  1.58M|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 29.7k, False: 1.55M]
  |  Branch (3982:29): [True: 15.5k, False: 14.1k]
  ------------------
 3983|  15.5k|            return unexpected_scan_error(
 3984|  15.5k|                scan_error::invalid_scanned_value,
 3985|  15.5k|                "No exponent given to scientific float");
 3986|  15.5k|        }
 3987|       |
 3988|  1.57M|        m_kind =
 3989|  1.57M|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 1.33M, False: 240k]
  ------------------
 3990|       |
 3991|  1.57M|        return it;
 3992|  1.58M|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|  3.22M|    {
 3774|  3.22M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  3.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.22M]
  |  |  |  Branch (859:45): [True: 0, False: 3.22M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  3.22M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  3.22M|        return read_while1_code_unit(
 3783|  3.22M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  3.22M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  3.22M|    {
  754|  3.22M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  18.6M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  18.6M|              cvref<T> obj = *get<T>(fn);
  745|  18.6M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  18.6M|                  obj(static_cast<decltype(args)>(args)...);
  747|  18.6M|              }
  748|  18.6M|              else {
  749|  18.6M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  18.6M|              }
  751|  18.6M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  18.6M|    {
  684|  18.6M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  18.6M|            return static_cast<T*>(s.m_cp);
  686|  18.6M|        }
  687|  18.6M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  18.6M|            return static_cast<T*>(s.m_p);
  689|  18.6M|        }
  690|  18.6M|        else {
  691|  18.6M|            return reinterpret_cast<T*>(s.m_fp);
  692|  18.6M|        }
  693|  18.6M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3783|  18.6M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  3.22M|        {
  662|  3.22M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  2.14M|    {
 1577|  2.14M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.14M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   150k|        {
  662|   150k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   383k|    {
  754|   383k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   383k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   383k|              cvref<T> obj = *get<T>(fn);
  745|   383k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   383k|                  obj(static_cast<decltype(args)>(args)...);
  747|   383k|              }
  748|   383k|              else {
  749|   383k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   383k|              }
  751|   383k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   383k|    {
  684|   383k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   383k|            return static_cast<T*>(s.m_cp);
  686|   383k|        }
  687|   383k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   383k|            return static_cast<T*>(s.m_p);
  689|   383k|        }
  690|   383k|        else {
  691|   383k|            return reinterpret_cast<T*>(s.m_fp);
  692|   383k|        }
  693|   383k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   383k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   383k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   383k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   383k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|  1.86M|    {
 3665|  1.86M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.86M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  1.86M|        return read_source_impl(range);
 3671|  1.86M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   383k|        {
  662|   383k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   521k|    {
 4170|   521k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   521k|#if !SCN_DISABLE_LOCALE
 4173|   521k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 146k, False: 374k]
  ------------------
 4174|   146k|            return read_impl<Range>(
 4175|   146k|                range, rd,
 4176|   146k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   146k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   146k|                },
 4179|   146k|                value, loc);
 4180|   146k|        }
 4181|   374k|#endif
 4182|       |
 4183|   374k|        return read_impl<Range>(
 4184|   374k|            range, rd,
 4185|   374k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   374k|                return r.read_source(SCN_FWD(args)...);
 4187|   374k|            },
 4188|   374k|            value);
 4189|   521k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   741k|    {
 4206|   741k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   741k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   741k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.9k, False: 726k]
  |  |  ------------------
  ------------------
 4208|  14.9k|            return unexpected(r.error());
 4209|  14.9k|        }
 4210|       |
 4211|   726k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   726k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   726k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   726k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   726k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16.6k, False: 710k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  16.6k|    }                                                  \
  |  |  |  | 3667|   726k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   710k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   710k|        return ranges::next(range.begin(), n);
 4213|   726k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  2.35M|    {
  763|  2.35M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.35M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   146k|    {
  754|   146k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   146k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   146k|              cvref<T> obj = *get<T>(fn);
  745|   146k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   146k|                  obj(static_cast<decltype(args)>(args)...);
  747|   146k|              }
  748|   146k|              else {
  749|   146k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   146k|              }
  751|   146k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   146k|    {
  684|   146k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   146k|            return static_cast<T*>(s.m_cp);
  686|   146k|        }
  687|   146k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   146k|            return static_cast<T*>(s.m_p);
  689|   146k|        }
  690|   146k|        else {
  691|   146k|            return reinterpret_cast<T*>(s.m_fp);
  692|   146k|        }
  693|   146k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   146k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   146k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   146k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   474k|    {
 3679|   474k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   474k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   474k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 474k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   474k|        return read_source_impl(range);
 3685|   474k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  2.35M|    {
 3705|  2.35M|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|  2.35M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.35M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.35M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.35M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.35M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  2.35M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  2.35M|        auto it = sign_result.first;
 3708|  2.35M|        m_sign = sign_result.second;
 3709|       |
 3710|  2.35M|        auto digits_begin = it;
 3711|  2.35M|        auto r = ranges::subrange{it, range.end()};
 3712|  2.35M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  2.35M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.35M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  4.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.35M]
  |  |  |  Branch (859:45): [True: 0, False: 2.35M]
  |  |  |  Branch (859:45): [True: 0, False: 2.35M]
  |  |  ------------------
  ------------------
 3715|  2.35M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  2.35M|            else {
 3724|  2.35M|                auto cb = [&](const auto& rr)
 3725|  2.35M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  2.35M|                    auto res = read_all(rr);
 3727|  2.35M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  2.35M|                        return unexpected_scan_error(
 3729|  2.35M|                            scan_error::invalid_scanned_value,
 3730|  2.35M|                            "Invalid float value");
 3731|  2.35M|                    }
 3732|  2.35M|                    return res;
 3733|  2.35M|                };
 3734|  2.35M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|  2.35M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  2.35M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 46.6k, False: 2.30M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  46.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  46.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  46.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  46.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  46.6k|    }                                                  \
  |  | 3667|  2.35M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  2.30M|            }
 3736|  2.35M|        }
 3737|  2.30M|        else {
 3738|  2.30M|            SCN_TRY_ASSIGN(
 3739|  2.30M|                it,
 3740|  2.30M|                do_read_source_impl(
 3741|  2.30M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  2.30M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  2.30M|        }
 3744|       |
 3745|  2.30M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  2.30M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 2.28M, False: 21.9k]
  |  Branch (3747:48): [True: 2.27M, False: 15.6k]
  ------------------
 3748|  2.30M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 2.18M, False: 90.9k]
  ------------------
 3749|  2.30M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 2.17M, False: 2.65k]
  ------------------
 3750|  2.17M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  2.17M|        }
 3752|       |
 3753|  2.30M|        handle_separators();
 3754|       |
 3755|  2.30M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 2.30M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  2.30M|        return it;
 3768|  2.30M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  2.35M|    {
 3811|  2.35M|        auto it = range.begin();
 3812|  2.35M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 2.31M, False: 37.6k]
  ------------------
 3813|  2.31M|            return unexpected(r.error());
 3814|  2.31M|        }
 3815|  37.6k|        else {
 3816|  37.6k|            it = *r;
 3817|  37.6k|        }
 3818|       |
 3819|  37.6k|        if (auto r = read_matching_string_classic_nocase(
 3820|  37.6k|                ranges::subrange{it, range.end()}, "inity");
 3821|  37.6k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 21.9k, False: 15.6k]
  ------------------
 3822|  21.9k|            m_kind = float_kind::inf_short;
 3823|  21.9k|            return it;
 3824|  21.9k|        }
 3825|  15.6k|        else {
 3826|  15.6k|            m_kind = float_kind::inf_long;
 3827|  15.6k|            return *r;
 3828|  15.6k|        }
 3829|  37.6k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  2.31M|    {
 3834|  2.31M|        auto it = range.begin();
 3835|  2.31M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 2.22M, False: 94.6k]
  ------------------
 3836|  2.22M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  2.22M|                scan_error::invalid_scanned_value,
 3838|  2.22M|                "Invalid floating-point NaN value"));
 3839|  2.22M|        }
 3840|  94.6k|        else {
 3841|  94.6k|            it = *r;
 3842|  94.6k|        }
 3843|       |
 3844|  94.6k|        if (auto r =
 3845|  94.6k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  94.6k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 90.9k, False: 3.78k]
  ------------------
 3847|  90.9k|            m_kind = float_kind::nan_simple;
 3848|  90.9k|            return it;
 3849|  90.9k|        }
 3850|  3.78k|        else {
 3851|  3.78k|            it = *r;
 3852|  3.78k|        }
 3853|       |
 3854|  3.78k|        auto payload_beg_it = it;
 3855|  3.78k|        it = read_while_code_unit(
 3856|  3.78k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  3.78k|                return is_ascii_char(ch) &&
 3858|  3.78k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  3.78k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  3.78k|            });
 3861|  3.78k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  3.78k|        m_kind = float_kind::nan_with_payload;
 3864|  3.78k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.65k, False: 1.12k]
  ------------------
 3865|  3.78k|                                             ')')) {
 3866|  2.65k|            return *r;
 3867|  2.65k|        }
 3868|  1.12k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.12k|                                     "Invalid floating-point NaN payload");
 3870|  3.78k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_:
  753|  3.78k|    {
  754|  3.78k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  23.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.4k|              cvref<T> obj = *get<T>(fn);
  745|  23.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.4k|              }
  748|  23.4k|              else {
  749|  23.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.4k|              }
  751|  23.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  23.4k|    {
  684|  23.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.4k|            return static_cast<T*>(s.m_cp);
  686|  23.4k|        }
  687|  23.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.4k|            return static_cast<T*>(s.m_p);
  689|  23.4k|        }
  690|  23.4k|        else {
  691|  23.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.4k|        }
  693|  23.4k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3856|  23.4k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  23.4k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 23.2k, False: 173]
  ------------------
 3858|  23.4k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 20.5k, False: 2.76k]
  |  Branch (3858:39): [True: 12.7k, False: 7.76k]
  |  Branch (3858:54): [True: 2.52k, False: 8.00k]
  |  Branch (3858:67): [True: 2.44k, False: 83]
  ------------------
 3859|  23.2k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 2.76k]
  |  Branch (3859:39): [True: 2.51k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 2.84k]
  ------------------
 3860|  23.4k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_LPv0EEEPSJ_:
  661|  3.78k|        {
  662|  3.78k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|  1.62M|    {
 3804|  1.62M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.62M|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|  1.25M|{
 1996|  1.25M|    auto it = read_while_code_unit(range, pred);
 1997|  1.25M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 514k, False: 743k]
  ------------------
 1998|   514k|        return unexpected(parse_error::error);
 1999|   514k|    }
 2000|   743k|    return it;
 2001|  1.25M|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|   390k|    {
 3876|   390k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 78.6k, False: 311k]
  ------------------
 3877|  78.6k|            auto beg_exp_it = range.begin();
 3878|  78.6k|            auto it = *r;
 3879|       |
 3880|  78.6k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 78.5k, False: 156]
  ------------------
 3881|  78.6k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  78.5k|                it = r_sign->first;
 3883|  78.5k|            }
 3884|       |
 3885|  78.6k|            if (auto r_exp = read_while1_code_unit(
 3886|  78.6k|                    ranges::subrange{it, range.end()},
 3887|  78.6k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  78.6k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  78.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.02k, False: 77.6k]
  |  |  ------------------
  ------------------
 3889|  1.02k|                it = beg_exp_it;
 3890|  1.02k|            }
 3891|  77.6k|            else {
 3892|  77.6k|                it = *r_exp;
 3893|  77.6k|            }
 3894|       |
 3895|  78.6k|            return it;
 3896|  78.6k|        }
 3897|   311k|        return range.begin();
 3898|   390k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_:
  753|  78.6k|    {
  754|  78.6k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  743|   244k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   244k|              cvref<T> obj = *get<T>(fn);
  745|   244k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   244k|                  obj(static_cast<decltype(args)>(args)...);
  747|   244k|              }
  748|   244k|              else {
  749|   244k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   244k|              }
  751|   244k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   244k|    {
  684|   244k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   244k|            return static_cast<T*>(s.m_cp);
  686|   244k|        }
  687|   244k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   244k|            return static_cast<T*>(s.m_p);
  689|   244k|        }
  690|   244k|        else {
  691|   244k|            return reinterpret_cast<T*>(s.m_fp);
  692|   244k|        }
  693|   244k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   244k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  661|  78.6k|        {
  662|  78.6k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   603k|    {
 3944|   603k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   603k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 403k, False: 200k]
  |  Branch (3945:50): [True: 30.7k, False: 372k]
  ------------------
 3946|       |
 3947|   603k|        auto it = ranges::begin(range);
 3948|   603k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   603k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   603k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   603k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.6k, False: 575k]
  |  |  ------------------
  ------------------
 3952|  28.6k|            return r.transform_error(
 3953|  28.6k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  28.6k|                                              "Invalid floating-point value"));
 3955|  28.6k|        }
 3956|   575k|        else {
 3957|   575k|            digits_count += ranges::distance(it, *r);
 3958|   575k|            it = *r;
 3959|   575k|        }
 3960|       |
 3961|   575k|        m_integral_part_length = digits_count;
 3962|   575k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 105k, False: 470k]
  ------------------
 3963|   575k|                                             m_locale_options.decimal_point)) {
 3964|   105k|            it = *r;
 3965|   105k|        }
 3966|       |
 3967|   575k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 90.2k, False: 484k]
  ------------------
 3968|   575k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|  90.2k|            digits_count += ranges::distance(it, *r);
 3970|  90.2k|            it = *r;
 3971|  90.2k|        }
 3972|       |
 3973|   575k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   575k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 575k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   575k|        auto beg_exp_it = it;
 3979|   575k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 390k, False: 184k]
  ------------------
 3980|   390k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   390k|        }
 3982|   575k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 29.7k, False: 545k]
  |  Branch (3982:29): [True: 15.5k, False: 14.1k]
  ------------------
 3983|  15.5k|            return unexpected_scan_error(
 3984|  15.5k|                scan_error::invalid_scanned_value,
 3985|  15.5k|                "No exponent given to scientific float");
 3986|  15.5k|        }
 3987|       |
 3988|   559k|        m_kind =
 3989|   559k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 481k, False: 77.6k]
  ------------------
 3990|       |
 3991|   559k|        return it;
 3992|   575k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|  1.17M|    {
 3774|  1.17M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.17M]
  |  |  |  Branch (859:45): [True: 0, False: 1.17M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  1.17M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  1.17M|        return read_while1_code_unit(
 3783|  1.17M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  1.17M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|  1.17M|    {
  754|  1.17M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  7.23M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.23M|              cvref<T> obj = *get<T>(fn);
  745|  7.23M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.23M|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.23M|              }
  748|  7.23M|              else {
  749|  7.23M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.23M|              }
  751|  7.23M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  7.23M|    {
  684|  7.23M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.23M|            return static_cast<T*>(s.m_cp);
  686|  7.23M|        }
  687|  7.23M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.23M|            return static_cast<T*>(s.m_p);
  689|  7.23M|        }
  690|  7.23M|        else {
  691|  7.23M|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.23M|        }
  693|  7.23M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|  7.23M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|  1.17M|        {
  662|  1.17M|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  2.35M|    {
 4000|  2.35M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  2.35M|        const bool allowed_nonhex =
 4002|  2.35M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  2.35M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  2.35M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 2.31M, False: 37.6k]
  |  Branch (4005:45): [True: 0, False: 2.31M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  2.35M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 37.6k, False: 2.31M]
  ------------------
 4011|  37.6k|            return *r;
 4012|  37.6k|        }
 4013|       |
 4014|  2.31M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 2.22M, False: 93.5k]
  |  Branch (4014:45): [True: 1.12k, False: 2.22M]
  ------------------
 4015|  1.12k|            return unexpected(r.error());
 4016|  1.12k|        }
 4017|  2.31M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 93.5k, False: 2.22M]
  ------------------
 4018|  93.5k|            return *r;
 4019|  93.5k|        }
 4020|       |
 4021|  2.22M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.62M, False: 603k]
  |  Branch (4021:28): [True: 502k, False: 1.11M]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   502k|            auto it = range.begin();
 4025|       |
 4026|   502k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 25.8k, False: 476k]
  ------------------
 4027|  25.8k|                m_kind = float_kind::hex_with_prefix;
 4028|  25.8k|                it = *r;
 4029|  25.8k|            }
 4030|   476k|            else {
 4031|   476k|                m_kind = float_kind::hex_without_prefix;
 4032|   476k|            }
 4033|       |
 4034|   502k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   502k|        }
 4036|  1.72M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 603k, False: 1.11M]
  |  Branch (4036:29): [True: 603k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   603k|            m_kind = float_kind::generic;
 4040|   603k|            return read_regular_float(range);
 4041|   603k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.11M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 63.5k, False: 1.05M]
  |  |  ------------------
  ------------------
 4047|  63.5k|            m_kind = float_kind::hex_with_prefix;
 4048|  63.5k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  63.5k|        }
 4050|       |
 4051|  1.05M|        m_kind = float_kind::generic;
 4052|  1.05M|        return read_regular(range);
 4053|  1.11M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|  1.62M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.62M|                    auto res = read_all(rr);
 3727|  1.62M|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.24k, False: 1.61M]
  |  |  ------------------
  ------------------
 3728|  1.24k|                        return unexpected_scan_error(
 3729|  1.24k|                            scan_error::invalid_scanned_value,
 3730|  1.24k|                            "Invalid float value");
 3731|  1.24k|                    }
 3732|  1.61M|                    return res;
 3733|  1.62M|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  1.62M|{
 1839|  1.62M|    return ranges::next(range.begin(), range.end());
 1840|  1.62M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.62M|    {
  313|  1.62M|        ranges::advance(x, bound);
  314|  1.62M|        return x;
  315|  1.62M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.62M|    {
  275|  1.62M|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.62M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.62M|    {
  190|  1.62M|        i = std::move(bound);
  191|  1.62M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|  2.18M|    {
 1577|  2.18M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.18M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|  2.18M|    {
 1621|  2.18M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.18M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.18M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.18M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.18M|            m_storage.reset();
 1627|  2.18M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.18M|        }
 1629|  2.18M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  2.18M|                                          std::basic_string<CharT>>) {
 1631|  2.18M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.18M|            m_view = string_view_type{*m_storage};
 1633|  2.18M|        }
 1634|  2.18M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.18M|                                          typename detail::basic_scan_buffer<
 1636|  2.18M|                                              value_t>::forward_iterator> &&
 1637|  2.18M|                           ranges::common_range<Range>) {
 1638|  2.18M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.18M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.18M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.18M|                             detail::to_address(end_seg.end()))) {
 1642|  2.18M|                auto& str = m_storage.emplace();
 1643|  2.18M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.18M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.18M|                m_view = string_view_type{str};
 1646|  2.18M|                return;
 1647|  2.18M|            }
 1648|       |
 1649|  2.18M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.18M|                                                            end_seg.data());
 1651|  2.18M|            m_storage.reset();
 1652|  2.18M|        }
 1653|  2.18M|        else {
 1654|  2.18M|            auto& str = m_storage.emplace();
 1655|  2.18M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.18M|                str.reserve(range.size());
 1657|  2.18M|            }
 1658|  2.18M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.18M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.18M|                          std::back_inserter(str));
 1661|  2.18M|            }
 1662|  2.18M|            else {
 1663|  2.18M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.18M|                     ++it) {
 1665|  2.18M|                    str.push_back(*it);
 1666|  2.18M|                }
 1667|  2.18M|            }
 1668|  2.18M|            m_view = string_view_type{str};
 1669|  2.18M|        }
 1670|  2.18M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   146k|        {
  662|   146k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   374k|    {
  754|   374k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   374k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   374k|              cvref<T> obj = *get<T>(fn);
  745|   374k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   374k|                  obj(static_cast<decltype(args)>(args)...);
  747|   374k|              }
  748|   374k|              else {
  749|   374k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   374k|              }
  751|   374k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   374k|    {
  684|   374k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   374k|            return static_cast<T*>(s.m_cp);
  686|   374k|        }
  687|   374k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   374k|            return static_cast<T*>(s.m_p);
  689|   374k|        }
  690|   374k|        else {
  691|   374k|            return reinterpret_cast<T*>(s.m_fp);
  692|   374k|        }
  693|   374k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   374k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   374k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   374k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   374k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  1.88M|    {
 3665|  1.88M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.88M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  1.88M|        return read_source_impl(range);
 3671|  1.88M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   374k|        {
  662|   374k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6177|   579k|    {
 6178|   579k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   579k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|   579k|            auto rd = make_reader<T, char_type>();
 6183|   579k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|   579k|                return unexpected(e);
 6185|   579k|            }
 6186|       |
 6187|   579k|            return impl(rd, range, value);
 6188|   579k|        }
 6189|   579k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|   579k|            auto rd = make_reader<T, char_type>();
 6191|   579k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   579k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 579k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|   579k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 579k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|   579k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|   579k|                return impl(rd, range, value);
 6198|   579k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|   579k|        else {
 6206|   579k|            SCN_EXPECT(false);
 6207|   579k|            SCN_UNREACHABLE;
 6208|   579k|        }
 6209|   579k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|   579k|    {
 6120|   579k|        const bool need_skipped_width =
 6121|   579k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 579k]
  |  Branch (6121:33): [True: 0, False: 579k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   579k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   579k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   579k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   579k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   579k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.16k, False: 571k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.16k|    }                                                  \
  |  |  |  | 3667|   579k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   571k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   571k|        auto [it, prefix_width] = prefix_result;
 6126|   571k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   571k|        std::ptrdiff_t value_width = 0;
 6130|   571k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 571k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   571k|        else {
 6146|   571k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   571k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   571k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   571k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 23.0k, False: 548k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  23.0k|    }                                                  \
  |  | 3667|   571k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   571k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   548k|                                             specs, value, loc));
 6148|       |
 6149|   548k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 548k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   548k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   548k|        std::ptrdiff_t postfix_width = 0;
 6158|   548k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 543k, False: 5.55k]
  ------------------
 6159|   543k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   543k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   543k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   543k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   543k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 543k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   543k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   543k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   543k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   543k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   543k|                                 value_width));
 6163|   543k|            std::tie(it, postfix_width) = postfix_result;
 6164|   543k|        }
 6165|       |
 6166|   548k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   548k|                                                 value_width, postfix_width);
 6168|   548k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 548k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   548k|        return it;
 6173|   548k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  1.55M|    {
 3691|  1.55M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.55M|        const std::ptrdiff_t sign_len =
 3694|  1.55M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 461k, False: 1.09M]
  ------------------
 3695|       |
 3696|  1.55M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  1.55M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.55M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.55M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 17.4k, False: 1.54M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  17.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  17.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  17.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  17.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  17.4k|    }                                                  \
  |  |  |  | 3667|  1.55M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.54M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.55M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   571k|    {
 4170|   571k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   571k|#if !SCN_DISABLE_LOCALE
 4173|   571k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 166k, False: 405k]
  ------------------
 4174|   166k|            return read_impl<Range>(
 4175|   166k|                range, rd,
 4176|   166k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   166k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   166k|                },
 4179|   166k|                value, loc);
 4180|   166k|        }
 4181|   405k|#endif
 4182|       |
 4183|   405k|        return read_impl<Range>(
 4184|   405k|            range, rd,
 4185|   405k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   405k|                return r.read_source(SCN_FWD(args)...);
 4187|   405k|            },
 4188|   405k|            value);
 4189|   571k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   799k|    {
 4206|   799k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   799k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   799k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.1k, False: 772k]
  |  |  ------------------
  ------------------
 4208|  27.1k|            return unexpected(r.error());
 4209|  27.1k|        }
 4210|       |
 4211|   772k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   772k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   772k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   772k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   772k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.53k, False: 770k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.53k|    }                                                  \
  |  |  |  | 3667|   772k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   770k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   770k|        return ranges::next(range.begin(), n);
 4213|   772k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   166k|    {
  754|   166k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   166k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   166k|              cvref<T> obj = *get<T>(fn);
  745|   166k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   166k|                  obj(static_cast<decltype(args)>(args)...);
  747|   166k|              }
  748|   166k|              else {
  749|   166k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   166k|              }
  751|   166k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   166k|    {
  684|   166k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   166k|            return static_cast<T*>(s.m_cp);
  686|   166k|        }
  687|   166k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   166k|            return static_cast<T*>(s.m_p);
  689|   166k|        }
  690|   166k|        else {
  691|   166k|            return reinterpret_cast<T*>(s.m_fp);
  692|   166k|        }
  693|   166k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   166k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   166k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   166k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   166k|        {
  662|   166k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   405k|    {
  754|   405k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   405k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   405k|              cvref<T> obj = *get<T>(fn);
  745|   405k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   405k|                  obj(static_cast<decltype(args)>(args)...);
  747|   405k|              }
  748|   405k|              else {
  749|   405k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   405k|              }
  751|   405k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   405k|    {
  684|   405k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   405k|            return static_cast<T*>(s.m_cp);
  686|   405k|        }
  687|   405k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   405k|            return static_cast<T*>(s.m_p);
  689|   405k|        }
  690|   405k|        else {
  691|   405k|            return reinterpret_cast<T*>(s.m_fp);
  692|   405k|        }
  693|   405k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   405k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   405k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   405k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   405k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   405k|        {
  662|   405k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   558k|    {
 4170|   558k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   558k|#if !SCN_DISABLE_LOCALE
 4173|   558k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 162k, False: 396k]
  ------------------
 4174|   162k|            return read_impl<Range>(
 4175|   162k|                range, rd,
 4176|   162k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   162k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   162k|                },
 4179|   162k|                value, loc);
 4180|   162k|        }
 4181|   396k|#endif
 4182|       |
 4183|   396k|        return read_impl<Range>(
 4184|   396k|            range, rd,
 4185|   396k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   396k|                return r.read_source(SCN_FWD(args)...);
 4187|   396k|            },
 4188|   396k|            value);
 4189|   558k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   802k|    {
 4206|   802k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   802k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   802k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.6k, False: 786k]
  |  |  ------------------
  ------------------
 4208|  15.6k|            return unexpected(r.error());
 4209|  15.6k|        }
 4210|       |
 4211|   786k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   786k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   786k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   786k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   786k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.9k, False: 771k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.9k|    }                                                  \
  |  |  |  | 3667|   786k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   771k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   771k|        return ranges::next(range.begin(), n);
 4213|   786k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   162k|    {
  754|   162k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   162k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   162k|              cvref<T> obj = *get<T>(fn);
  745|   162k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   162k|                  obj(static_cast<decltype(args)>(args)...);
  747|   162k|              }
  748|   162k|              else {
  749|   162k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   162k|              }
  751|   162k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   162k|    {
  684|   162k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   162k|            return static_cast<T*>(s.m_cp);
  686|   162k|        }
  687|   162k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   162k|            return static_cast<T*>(s.m_p);
  689|   162k|        }
  690|   162k|        else {
  691|   162k|            return reinterpret_cast<T*>(s.m_fp);
  692|   162k|        }
  693|   162k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   162k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   162k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   162k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   162k|        {
  662|   162k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   396k|    {
  754|   396k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   396k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   396k|              cvref<T> obj = *get<T>(fn);
  745|   396k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   396k|                  obj(static_cast<decltype(args)>(args)...);
  747|   396k|              }
  748|   396k|              else {
  749|   396k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   396k|              }
  751|   396k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   396k|    {
  684|   396k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   396k|            return static_cast<T*>(s.m_cp);
  686|   396k|        }
  687|   396k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   396k|            return static_cast<T*>(s.m_p);
  689|   396k|        }
  690|   396k|        else {
  691|   396k|            return reinterpret_cast<T*>(s.m_fp);
  692|   396k|        }
  693|   396k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   396k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   396k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   396k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   396k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   396k|        {
  662|   396k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6177|   585k|    {
 6178|   585k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   585k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|   585k|            auto rd = make_reader<T, char_type>();
 6183|   585k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|   585k|                return unexpected(e);
 6185|   585k|            }
 6186|       |
 6187|   585k|            return impl(rd, range, value);
 6188|   585k|        }
 6189|   585k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|   585k|            auto rd = make_reader<T, char_type>();
 6191|   585k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   585k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 585k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|   585k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 585k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|   585k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|   585k|                return impl(rd, range, value);
 6198|   585k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|   585k|        else {
 6206|   585k|            SCN_EXPECT(false);
 6207|   585k|            SCN_UNREACHABLE;
 6208|   585k|        }
 6209|   585k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|   585k|    {
 6120|   585k|        const bool need_skipped_width =
 6121|   585k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 585k]
  |  Branch (6121:33): [True: 0, False: 585k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   585k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   585k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   585k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   585k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   585k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.55k, False: 578k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.55k|    }                                                  \
  |  |  |  | 3667|   585k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   578k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   578k|        auto [it, prefix_width] = prefix_result;
 6126|   578k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   578k|        std::ptrdiff_t value_width = 0;
 6130|   578k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 578k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   578k|        else {
 6146|   578k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   578k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   578k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   578k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22.6k, False: 555k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  22.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  22.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  22.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  22.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  22.6k|    }                                                  \
  |  | 3667|   578k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   578k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   555k|                                             specs, value, loc));
 6148|       |
 6149|   555k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 555k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   555k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   555k|        std::ptrdiff_t postfix_width = 0;
 6158|   555k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 549k, False: 5.88k]
  ------------------
 6159|   549k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   549k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   549k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   549k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   549k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 549k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   549k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   549k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   549k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   549k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   549k|                                 value_width));
 6163|   549k|            std::tie(it, postfix_width) = postfix_result;
 6164|   549k|        }
 6165|       |
 6166|   555k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   555k|                                                 value_width, postfix_width);
 6168|   555k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 555k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   555k|        return it;
 6173|   555k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|  1.57M|    {
 3691|  1.57M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.57M|        const std::ptrdiff_t sign_len =
 3694|  1.57M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 472k, False: 1.10M]
  ------------------
 3695|       |
 3696|  1.57M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  1.57M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.57M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.57M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.7k, False: 1.56M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.7k|    }                                                  \
  |  |  |  | 3667|  1.57M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.56M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.57M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   578k|    {
 4170|   578k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   578k|#if !SCN_DISABLE_LOCALE
 4173|   578k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 169k, False: 408k]
  ------------------
 4174|   169k|            return read_impl<Range>(
 4175|   169k|                range, rd,
 4176|   169k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   169k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   169k|                },
 4179|   169k|                value, loc);
 4180|   169k|        }
 4181|   408k|#endif
 4182|       |
 4183|   408k|        return read_impl<Range>(
 4184|   408k|            range, rd,
 4185|   408k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   408k|                return r.read_source(SCN_FWD(args)...);
 4187|   408k|            },
 4188|   408k|            value);
 4189|   578k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   808k|    {
 4206|   808k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   808k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   808k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.3k, False: 780k]
  |  |  ------------------
  ------------------
 4208|  28.3k|            return unexpected(r.error());
 4209|  28.3k|        }
 4210|       |
 4211|   780k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   780k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   780k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   780k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   780k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 784, False: 779k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    784|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    784|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    784|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    784|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    784|    }                                                  \
  |  |  |  | 3667|   780k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   779k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   779k|        return ranges::next(range.begin(), n);
 4213|   780k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   169k|    {
  754|   169k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   169k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   169k|              cvref<T> obj = *get<T>(fn);
  745|   169k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   169k|                  obj(static_cast<decltype(args)>(args)...);
  747|   169k|              }
  748|   169k|              else {
  749|   169k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   169k|              }
  751|   169k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   169k|    {
  684|   169k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   169k|            return static_cast<T*>(s.m_cp);
  686|   169k|        }
  687|   169k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   169k|            return static_cast<T*>(s.m_p);
  689|   169k|        }
  690|   169k|        else {
  691|   169k|            return reinterpret_cast<T*>(s.m_fp);
  692|   169k|        }
  693|   169k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   169k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   169k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   169k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   169k|        {
  662|   169k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   408k|    {
  754|   408k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   408k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   408k|              cvref<T> obj = *get<T>(fn);
  745|   408k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   408k|                  obj(static_cast<decltype(args)>(args)...);
  747|   408k|              }
  748|   408k|              else {
  749|   408k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   408k|              }
  751|   408k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   408k|    {
  684|   408k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   408k|            return static_cast<T*>(s.m_cp);
  686|   408k|        }
  687|   408k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   408k|            return static_cast<T*>(s.m_p);
  689|   408k|        }
  690|   408k|        else {
  691|   408k|            return reinterpret_cast<T*>(s.m_fp);
  692|   408k|        }
  693|   408k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   408k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   408k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   408k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   408k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   408k|        {
  662|   408k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   564k|    {
 4170|   564k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   564k|#if !SCN_DISABLE_LOCALE
 4173|   564k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 165k, False: 399k]
  ------------------
 4174|   165k|            return read_impl<Range>(
 4175|   165k|                range, rd,
 4176|   165k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   165k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   165k|                },
 4179|   165k|                value, loc);
 4180|   165k|        }
 4181|   399k|#endif
 4182|       |
 4183|   399k|        return read_impl<Range>(
 4184|   399k|            range, rd,
 4185|   399k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   399k|                return r.read_source(SCN_FWD(args)...);
 4187|   399k|            },
 4188|   399k|            value);
 4189|   564k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   812k|    {
 4206|   812k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   812k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   812k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.0k, False: 796k]
  |  |  ------------------
  ------------------
 4208|  16.0k|            return unexpected(r.error());
 4209|  16.0k|        }
 4210|       |
 4211|   796k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   796k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   796k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   796k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   796k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.0k, False: 782k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.0k|    }                                                  \
  |  |  |  | 3667|   796k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   782k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   782k|        return ranges::next(range.begin(), n);
 4213|   796k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   165k|    {
  754|   165k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   165k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   165k|              cvref<T> obj = *get<T>(fn);
  745|   165k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   165k|                  obj(static_cast<decltype(args)>(args)...);
  747|   165k|              }
  748|   165k|              else {
  749|   165k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   165k|              }
  751|   165k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   165k|    {
  684|   165k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   165k|            return static_cast<T*>(s.m_cp);
  686|   165k|        }
  687|   165k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   165k|            return static_cast<T*>(s.m_p);
  689|   165k|        }
  690|   165k|        else {
  691|   165k|            return reinterpret_cast<T*>(s.m_fp);
  692|   165k|        }
  693|   165k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   165k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   165k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   165k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   165k|        {
  662|   165k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   399k|    {
  754|   399k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   399k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   399k|              cvref<T> obj = *get<T>(fn);
  745|   399k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   399k|                  obj(static_cast<decltype(args)>(args)...);
  747|   399k|              }
  748|   399k|              else {
  749|   399k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   399k|              }
  751|   399k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   399k|    {
  684|   399k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   399k|            return static_cast<T*>(s.m_cp);
  686|   399k|        }
  687|   399k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   399k|            return static_cast<T*>(s.m_p);
  689|   399k|        }
  690|   399k|        else {
  691|   399k|            return reinterpret_cast<T*>(s.m_fp);
  692|   399k|        }
  693|   399k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   399k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   399k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   399k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   399k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   399k|        {
  662|   399k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  2.37M|{
 1039|  2.37M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  2.37M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  2.37M|        return r;
 1042|  2.37M|    }
 1043|  2.37M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  2.37M|                           ranges::const_iterator_t<Range>,
 1045|  2.37M|                           typename detail::basic_scan_buffer<
 1046|  2.37M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  2.37M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|  2.37M|            auto seg = r.begin().contiguous_segment();
 1049|  2.37M|            auto dist =
 1050|  2.37M|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  2.37M|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  2.37M|        }
 1053|  2.37M|        else {
 1054|  2.37M|            return r.begin().contiguous_segment();
 1055|  2.37M|        }
 1056|  2.37M|    }
 1057|  2.37M|    else {
 1058|  2.37M|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.37M|    }
 1060|  2.37M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  2.07M|{
 2061|  2.07M|    auto it = range.begin();
 2062|  3.93M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 3.91M, False: 22.1k]
  ------------------
 2063|  3.91M|        const auto val =
 2064|  3.91M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  3.91M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  3.91M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.90M, False: 6.54k]
  |  |  ------------------
  ------------------
 2066|  3.90M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  3.90M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  3.90M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.05M, False: 1.85M]
  ------------------
 2069|  2.05M|                return it;
 2070|  2.05M|            }
 2071|  3.90M|        }
 2072|  1.85M|        it = val.iterator;
 2073|  1.85M|    }
 2074|       |
 2075|  22.1k|    return it;
 2076|  2.07M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  3.91M|{
 1899|  3.91M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  3.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  3.91M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  3.91M|    auto it = range.begin();
 1903|  3.91M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  3.91M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.54k, False: 3.90M]
  |  |  ------------------
  ------------------
 1906|  6.54k|        ++it;
 1907|  6.54k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  6.54k|        return {it, {}};
 1909|  6.54k|    }
 1910|       |
 1911|  3.90M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 3.85M, False: 54.4k]
  ------------------
 1912|  3.85M|        ++it;
 1913|  3.85M|        return {it, string_type(1, *range.begin())};
 1914|  3.85M|    }
 1915|       |
 1916|  54.4k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  54.4k|    return {it, string_type{range.begin(), it}};
 1918|  3.90M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  6.54k|{
 1155|  6.54k|    auto it = input.begin();
 1156|  58.0k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 56.4k, False: 1.54k]
  ------------------
 1157|  56.4k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 4.99k, False: 51.5k]
  ------------------
 1158|  4.99k|            break;
 1159|  4.99k|        }
 1160|  56.4k|    }
 1161|  6.54k|    return it;
 1162|  6.54k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  54.4k|    {
  283|  54.4k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  54.4k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  54.4k|    {
  252|  54.4k|        constexpr iter_difference_t<I> zero{0};
  253|  54.4k|        iter_difference_t<I> counter{0};
  254|       |
  255|   166k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 112k, False: 53.3k]
  |  Branch (255:30): [True: 111k, False: 1.05k]
  ------------------
  256|   111k|            ++i;
  257|   111k|            ++counter;
  258|   111k|        }
  259|       |
  260|  54.4k|        return counter;
  261|  54.4k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  3.91M|    {
 1890|  3.91M|        return !codepoint.empty();
 1891|  3.91M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  2.07M|{
 2082|  2.07M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.07M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  2.37M|{
 2951|  2.37M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.37M, False: 0]
  ------------------
 2952|  2.37M|        auto it = read_while_classic_space(range);
 2953|  2.37M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.37M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.1k, False: 2.34M]
  |  |  ------------------
  ------------------
 2955|  22.1k|            return unexpected(e);
 2956|  22.1k|        }
 2957|       |
 2958|  2.34M|        return it;
 2959|  2.37M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.37M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  2.37M|{
 2117|  2.37M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.37M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.37M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.37M|        auto buf = make_contiguous_buffer(range);
 2121|  2.37M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.37M|        return ranges::next(range.begin(),
 2123|  2.37M|                            ranges::distance(buf.view().begin(), it));
 2124|  2.37M|    }
 2125|  2.37M|    else {
 2126|  2.37M|        auto it = range.begin();
 2127|       |
 2128|  2.37M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  2.37M|            auto seg = get_contiguous_beginning(range);
 2130|  2.37M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.37M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 293k, False: 2.07M]
  ------------------
 2132|   293k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   293k|            }
 2134|  2.07M|            ranges::advance(it, seg.size());
 2135|  2.07M|        }
 2136|       |
 2137|  2.07M|        return read_while_code_point(
 2138|  2.07M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.37M|    }
 2140|  2.37M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  2.07M|    {
  754|  2.07M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  3.90M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.90M|              cvref<T> obj = *get<T>(fn);
  745|  3.90M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.90M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.90M|              }
  748|  3.90M|              else {
  749|  3.90M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.90M|              }
  751|  3.90M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.90M|    {
  684|  3.90M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.90M|            return static_cast<T*>(s.m_cp);
  686|  3.90M|        }
  687|  3.90M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.90M|            return static_cast<T*>(s.m_p);
  689|  3.90M|        }
  690|  3.90M|        else {
  691|  3.90M|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.90M|        }
  693|  3.90M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  3.90M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  2.07M|        {
  662|  2.07M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   284k|{
  981|   284k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   284k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   284k|        return true;
  984|   284k|    }
  985|   284k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   284k|                           ranges::const_iterator_t<Range>,
  987|   284k|                           typename detail::basic_scan_buffer<
  988|   284k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   284k|        auto beg = r.begin();
  990|   284k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 284k, False: 0]
  ------------------
  991|   284k|            return false;
  992|   284k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   284k|    else {
 1006|   284k|        return false;
 1007|   284k|    }
 1008|   284k|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   217k|    {
 6037|   217k|        const bool need_skipped_width =
 6038|   217k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 217k]
  |  Branch (6038:33): [True: 0, False: 217k]
  ------------------
 6039|   217k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   217k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 217k]
  ------------------
 6043|   217k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 217k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   217k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 217k, False: 0]
  |  Branch (6047:56): [True: 217k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   217k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 217k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   433k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   217k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   217k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   217k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.59k, False: 215k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.59k|    }                                                  \
  |  |  |  | 3667|   217k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   433k|                            make_eof_scan_error));
 6058|       |
 6059|   433k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 215k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   215k|            return result_type{it, 0};
 6067|   433k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   217k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|   336k|{
 1976|   336k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   336k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|   336k|{
 1957|   336k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   336k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   336k|    }
 1960|   336k|    else {
 1961|   336k|        auto first = range.begin();
 1962|   394k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 393k, False: 1.05k]
  ------------------
 1963|   393k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 335k, False: 57.8k]
  ------------------
 1964|   335k|                return first;
 1965|   335k|            }
 1966|   393k|        }
 1967|  1.05k|        return first;
 1968|   336k|    }
 1969|   336k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  1.12M|    {
  763|  1.12M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.12M|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|   483k|    {
  754|   483k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|   561k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   561k|              cvref<T> obj = *get<T>(fn);
  745|   561k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   561k|                  obj(static_cast<decltype(args)>(args)...);
  747|   561k|              }
  748|   561k|              else {
  749|   561k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   561k|              }
  751|   561k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   561k|    {
  684|   561k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   561k|            return static_cast<T*>(s.m_cp);
  686|   561k|        }
  687|   561k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   561k|            return static_cast<T*>(s.m_p);
  689|   561k|        }
  690|   561k|        else {
  691|   561k|            return reinterpret_cast<T*>(s.m_fp);
  692|   561k|        }
  693|   561k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|   483k|        {
  662|   483k|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  87.5k|    {
  108|  87.5k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  87.5k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  87.5k|    {
   94|  87.5k|        iter_difference_t<I> counter{0};
   95|   214k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 126k, False: 87.5k]
  ------------------
   96|   126k|            ++i;
   97|   126k|            ++counter;
   98|   126k|        }
   99|  87.5k|        return counter;
  100|  87.5k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|   722k|{
 1857|   722k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   722k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   722k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   722k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   722k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   722k|        if (sz < count) {
 1862|   722k|            return unexpected(eof_error::eof);
 1863|   722k|        }
 1864|       |
 1865|   722k|        return ranges::next(range.begin(), count);
 1866|   722k|    }
 1867|   722k|    else {
 1868|   722k|        auto it = range.begin();
 1869|   722k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 412k, False: 310k]
  ------------------
 1870|   412k|            return ranges::next(it, count);
 1871|   412k|        }
 1872|       |
 1873|  1.16M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 899k, False: 262k]
  ------------------
 1874|   899k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 48.1k, False: 851k]
  ------------------
 1875|  48.1k|                return unexpected(eof_error::eof);
 1876|  48.1k|            }
 1877|   899k|        }
 1878|       |
 1879|   262k|        return it;
 1880|   310k|    }
 1881|   722k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|   722k|{
 1095|   722k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|   722k|        return r.size();
 1097|   722k|    }
 1098|   722k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|   722k|                           ranges::const_iterator_t<Range>,
 1100|   722k|                           typename detail::basic_scan_buffer<
 1101|   722k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|   722k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|   722k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|   722k|        }
 1105|   722k|        else {
 1106|   722k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 722k, False: 0]
  ------------------
 1107|   722k|                return static_cast<size_t>(
 1108|   722k|                    r.begin().parent()->chars_available() -
 1109|   722k|                    r.begin().position());
 1110|   722k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|   722k|        }
 1113|   722k|    }
 1114|   722k|    else {
 1115|   722k|        return 0;
 1116|   722k|    }
 1117|   722k|}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|  89.5k|    {
 1780|  89.5k|        auto stdloc = loc.get<std::locale>();
 1781|  89.5k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|  89.5k|        grouping = numpunct.grouping();
 1783|  89.5k|        thousands_sep =
 1784|  89.5k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 89.5k]
  ------------------
 1785|  89.5k|        decimal_point = numpunct.decimal_point();
 1786|  89.5k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|  89.5k|{
 1717|  89.5k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 89.5k, False: 0]
  ------------------
 1718|  89.5k|        return std::use_facet<Facet>(stdloc);
 1719|  89.5k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|  89.5k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|   379k|{
 1846|   379k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   379k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 735, False: 378k]
  |  |  ------------------
  ------------------
 1847|    735|        return unexpected(e);
 1848|    735|    }
 1849|       |
 1850|   378k|    return ranges::next(range.begin());
 1851|   379k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   731k|{
  950|   731k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   731k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.85k, False: 728k]
  |  |  ------------------
  ------------------
  951|  2.85k|        return eof_error::eof;
  952|  2.85k|    }
  953|   728k|    return eof_error::good;
  954|   731k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.06M|{
  944|  1.06M|    return is_range_eof(r.begin(), r.end());
  945|  1.06M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.06M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.06M|    {
  937|  1.06M|        return begin == end;
  938|  1.06M|    }
  939|  1.06M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   378k|    {
  296|   378k|        ++x;
  297|   378k|        return x;
  298|   378k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   285k|{
 3141|   285k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   285k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 284k, False: 354]
  ------------------
 3143|   284k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 284k, False: 27]
  ------------------
 3144|   284k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   284k|        }
 3146|     27|        return unexpected(eof_error::eof);
 3147|   284k|    }
 3148|       |
 3149|    354|    auto& it = *r;
 3150|    354|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 309, False: 45]
  ------------------
 3151|    309|        return std::pair{it, sign_type::minus_sign};
 3152|    309|    }
 3153|     45|    return std::pair{it, sign_type::plus_sign};
 3154|    354|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|   327k|{
 2272|   327k|    auto it = read_code_unit(range);
 2273|   327k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 357, False: 327k]
  |  |  ------------------
  ------------------
 2274|    357|        return unexpected(make_eof_parse_error(it.error()));
 2275|    357|    }
 2276|       |
 2277|   654k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 654k, False: 324k]
  ------------------
 2278|   654k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 2.80k, False: 651k]
  ------------------
 2279|  2.80k|            return *it;
 2280|  2.80k|        }
 2281|   654k|    }
 2282|       |
 2283|   324k|    return unexpected(parse_error::error);
 2284|   327k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|   722k|{
 2231|   722k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   722k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   722k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   722k|        if (range.size() < str.size()) {
 2236|   722k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   722k|        }
 2238|   722k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   722k|            return unexpected(parse_error::error);
 2240|   722k|        }
 2241|   722k|        return ranges::next(range.begin(), str.size());
 2242|   722k|    }
 2243|   722k|    else {
 2244|   722k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   722k|            if (ch < 'A' || ch > 'Z') {
 2246|   722k|                return ch;
 2247|   722k|            }
 2248|   722k|            return static_cast<char_type>(ch +
 2249|   722k|                                          static_cast<char_type>('a' - 'A'));
 2250|   722k|        };
 2251|       |
 2252|   722k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   722k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   722k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   722k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   722k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48.1k, False: 674k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  48.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  48.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  48.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  48.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  48.1k|    }                                                  \
  |  |  |  | 3667|   722k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   674k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   674k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   674k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   674k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   674k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 674k, False: 210]
  |  |  ------------------
  ------------------
 2257|   674k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   674k|                    return ascii_tolower(a) ==
 2259|   674k|                           static_cast<detail::char_t<Range>>(b);
 2260|   674k|                }))) {
 2261|   674k|            return unexpected(parse_error::error);
 2262|   674k|        }
 2263|       |
 2264|    210|        return it;
 2265|   674k|    }
 2266|   722k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   702k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   702k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 439k, False: 263k]
  |  Branch (2245:29): [True: 258k, False: 5.09k]
  ------------------
 2246|   697k|                return ch;
 2247|   697k|            }
 2248|  5.09k|            return static_cast<char_type>(ch +
 2249|  5.09k|                                          static_cast<char_type>('a' - 'A'));
 2250|   702k|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  51.3k|{
 2146|  51.3k|    auto it = read_code_unit(range);
 2147|  51.3k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  51.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 378, False: 50.9k]
  |  |  ------------------
  ------------------
 2148|    378|        return unexpected(make_eof_parse_error(it.error()));
 2149|    378|    }
 2150|       |
 2151|  50.9k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  50.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.9k, False: 6]
  |  |  ------------------
  ------------------
 2152|  50.9k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  50.9k|        return unexpected(parse_error::error);
 2154|  50.9k|    }
 2155|       |
 2156|      6|    return *it;
 2157|  50.9k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|   336k|{
 1996|   336k|    auto it = read_while_code_unit(range, pred);
 1997|   336k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 283k, False: 52.7k]
  ------------------
 1998|   283k|        return unexpected(parse_error::error);
 1999|   283k|    }
 2000|  52.7k|    return it;
 2001|   336k|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|  50.0k|    {
 1621|  50.0k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  50.0k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  50.0k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  50.0k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  50.0k|            m_storage.reset();
 1627|  50.0k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  50.0k|        }
 1629|  50.0k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  50.0k|                                          std::basic_string<CharT>>) {
 1631|  50.0k|            m_storage.emplace(SCN_FWD(range));
 1632|  50.0k|            m_view = string_view_type{*m_storage};
 1633|  50.0k|        }
 1634|  50.0k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  50.0k|                                          typename detail::basic_scan_buffer<
 1636|  50.0k|                                              value_t>::forward_iterator> &&
 1637|  50.0k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  50.0k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  50.0k|            auto end_seg = range.end().contiguous_segment();
 1640|  50.0k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  50.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.83k, False: 47.2k]
  |  |  ------------------
  ------------------
 1641|  50.0k|                             detail::to_address(end_seg.end()))) {
 1642|  2.83k|                auto& str = m_storage.emplace();
 1643|  2.83k|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.83k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.83k|                m_view = string_view_type{str};
 1646|  2.83k|                return;
 1647|  2.83k|            }
 1648|       |
 1649|  47.2k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  47.2k|                                                            end_seg.data());
 1651|  47.2k|            m_storage.reset();
 1652|  47.2k|        }
 1653|  50.0k|        else {
 1654|  50.0k|            auto& str = m_storage.emplace();
 1655|  50.0k|            if constexpr (ranges::sized_range<Range>) {
 1656|  50.0k|                str.reserve(range.size());
 1657|  50.0k|            }
 1658|  50.0k|            if constexpr (ranges::common_range<Range>) {
 1659|  50.0k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  50.0k|                          std::back_inserter(str));
 1661|  50.0k|            }
 1662|  50.0k|            else {
 1663|  50.0k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  50.0k|                     ++it) {
 1665|  50.0k|                    str.push_back(*it);
 1666|  50.0k|                }
 1667|  50.0k|            }
 1668|  50.0k|            m_view = string_view_type{str};
 1669|  50.0k|        }
 1670|  50.0k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|   667k|    {
 1582|   667k|        return m_view;
 1583|   667k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  1.13M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  35.8k|    {
 6079|  35.8k|        const bool need_skipped_width =
 6080|  35.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 35.8k]
  |  Branch (6080:33): [True: 0, False: 35.8k]
  ------------------
 6081|  35.8k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  35.8k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 35.8k]
  ------------------
 6084|  35.8k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 35.8k]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  35.8k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 35.8k, False: 0]
  ------------------
 6089|  35.8k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 0, False: 35.8k]
  ------------------
 6090|  35.8k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 0]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  ------------------
 6092|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  35.8k|        return result_type{rng.begin(), 0};
 6114|  35.8k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|   722k|{
 1857|   722k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   722k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   722k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   722k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   722k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   722k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 48.1k, False: 674k]
  ------------------
 1862|  48.1k|            return unexpected(eof_error::eof);
 1863|  48.1k|        }
 1864|       |
 1865|   674k|        return ranges::next(range.begin(), count);
 1866|   722k|    }
 1867|   722k|    else {
 1868|   722k|        auto it = range.begin();
 1869|   722k|        if (guaranteed_minimum_size(range) >= count) {
 1870|   722k|            return ranges::next(it, count);
 1871|   722k|        }
 1872|       |
 1873|   722k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|   722k|            if (it == range.end()) {
 1875|   722k|                return unexpected(eof_error::eof);
 1876|   722k|            }
 1877|   722k|        }
 1878|       |
 1879|   722k|        return it;
 1880|   722k|    }
 1881|   722k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   425k|{
 1899|   425k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   425k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   425k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   425k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   425k|    auto it = range.begin();
 1903|   425k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   425k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   425k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 425k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   425k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 425k, False: 0]
  ------------------
 1912|   425k|        ++it;
 1913|   425k|        return {it, string_type(1, *range.begin())};
 1914|   425k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   425k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  1.09M|{
  944|  1.09M|    return is_range_eof(r.begin(), r.end());
  945|  1.09M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  1.09M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.09M|    {
  937|  1.09M|        return begin == end;
  938|  1.09M|    }
  939|  1.09M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   156k|    {
  190|   156k|        i = std::move(bound);
  191|   156k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   425k|    {
 1890|   425k|        return !codepoint.empty();
 1891|   425k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|   666k|{
  950|   666k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   666k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.36k, False: 664k]
  |  |  ------------------
  ------------------
  951|  2.36k|        return eof_error::eof;
  952|  2.36k|    }
  953|   664k|    return eof_error::good;
  954|   666k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   314k|{
 1846|   314k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 240, False: 313k]
  |  |  ------------------
  ------------------
 1847|    240|        return unexpected(e);
 1848|    240|    }
 1849|       |
 1850|   313k|    return ranges::next(range.begin());
 1851|   314k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   313k|    {
  296|   313k|        ++x;
  297|   313k|        return x;
  298|   313k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   284k|{
 3141|   284k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   284k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 283k, False: 249]
  ------------------
 3143|   283k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 283k, False: 12]
  ------------------
 3144|   283k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   283k|        }
 3146|     12|        return unexpected(eof_error::eof);
 3147|   283k|    }
 3148|       |
 3149|    249|    auto& it = *r;
 3150|    249|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 204, False: 45]
  ------------------
 3151|    204|        return std::pair{it, sign_type::minus_sign};
 3152|    204|    }
 3153|     45|    return std::pair{it, sign_type::plus_sign};
 3154|    249|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   294k|{
 2272|   294k|    auto it = read_code_unit(range);
 2273|   294k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 294k]
  |  |  ------------------
  ------------------
 2274|    102|        return unexpected(make_eof_parse_error(it.error()));
 2275|    102|    }
 2276|       |
 2277|   588k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 588k, False: 293k]
  ------------------
 2278|   588k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 1.25k, False: 587k]
  ------------------
 2279|  1.25k|            return *it;
 2280|  1.25k|        }
 2281|   588k|    }
 2282|       |
 2283|   293k|    return unexpected(parse_error::error);
 2284|   294k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|   722k|{
 2231|   722k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   722k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   722k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   722k|        if (range.size() < str.size()) {
 2236|   722k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   722k|        }
 2238|   722k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   722k|            return unexpected(parse_error::error);
 2240|   722k|        }
 2241|   722k|        return ranges::next(range.begin(), str.size());
 2242|   722k|    }
 2243|   722k|    else {
 2244|   722k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   722k|            if (ch < 'A' || ch > 'Z') {
 2246|   722k|                return ch;
 2247|   722k|            }
 2248|   722k|            return static_cast<char_type>(ch +
 2249|   722k|                                          static_cast<char_type>('a' - 'A'));
 2250|   722k|        };
 2251|       |
 2252|   722k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   722k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   722k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   722k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   722k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48.1k, False: 674k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  48.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  48.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  48.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  48.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  48.1k|    }                                                  \
  |  |  |  | 3667|   722k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   674k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   674k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   674k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   674k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   674k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 674k, False: 210]
  |  |  ------------------
  ------------------
 2257|   674k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   674k|                    return ascii_tolower(a) ==
 2259|   674k|                           static_cast<detail::char_t<Range>>(b);
 2260|   674k|                }))) {
 2261|   674k|            return unexpected(parse_error::error);
 2262|   674k|        }
 2263|       |
 2264|    210|        return it;
 2265|   674k|    }
 2266|   722k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   703k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   703k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 439k, False: 263k]
  |  Branch (2245:29): [True: 258k, False: 5.09k]
  ------------------
 2246|   698k|                return ch;
 2247|   698k|            }
 2248|  5.09k|            return static_cast<char_type>(ch +
 2249|  5.09k|                                          static_cast<char_type>('a' - 'A'));
 2250|   703k|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  19.5k|{
 2146|  19.5k|    auto it = read_code_unit(range);
 2147|  19.5k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 138, False: 19.4k]
  |  |  ------------------
  ------------------
 2148|    138|        return unexpected(make_eof_parse_error(it.error()));
 2149|    138|    }
 2150|       |
 2151|  19.4k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  19.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.4k, False: 0]
  |  |  ------------------
  ------------------
 2152|  19.4k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  19.4k|        return unexpected(parse_error::error);
 2154|  19.4k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  19.4k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   146k|{
 1976|   146k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   146k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   146k|{
 1957|   146k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   146k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   146k|    }
 1960|   146k|    else {
 1961|   146k|        auto first = range.begin();
 1962|   146k|        for (; first != range.end(); ++first) {
 1963|   146k|            if (pred(*first)) {
 1964|   146k|                return first;
 1965|   146k|            }
 1966|   146k|        }
 1967|   146k|        return first;
 1968|   146k|    }
 1969|   146k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   284k|{
 2951|   284k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 284k, False: 0]
  ------------------
 2952|   284k|        auto it = read_while_classic_space(range);
 2953|   284k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   284k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 282k]
  |  |  ------------------
  ------------------
 2955|  2.00k|            return unexpected(e);
 2956|  2.00k|        }
 2957|       |
 2958|   282k|        return it;
 2959|   284k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   284k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   284k|{
 2117|   284k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   284k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   284k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   284k|        auto buf = make_contiguous_buffer(range);
 2121|   284k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   284k|        return ranges::next(range.begin(),
 2123|   284k|                            ranges::distance(buf.view().begin(), it));
 2124|   284k|    }
 2125|   284k|    else {
 2126|   284k|        auto it = range.begin();
 2127|       |
 2128|   284k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   284k|            auto seg = get_contiguous_beginning(range);
 2130|   284k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   284k|                seg_it != seg.end()) {
 2132|   284k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   284k|            }
 2134|   284k|            ranges::advance(it, seg.size());
 2135|   284k|        }
 2136|       |
 2137|   284k|        return read_while_code_point(
 2138|   284k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   284k|    }
 2140|   284k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   284k|{
 2082|   284k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   284k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   330k|{
 2061|   330k|    auto it = range.begin();
 2062|   456k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 425k, False: 31.1k]
  ------------------
 2063|   425k|        const auto val =
 2064|   425k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   425k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   425k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 425k, False: 0]
  |  |  ------------------
  ------------------
 2066|   425k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   425k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   425k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 298k, False: 126k]
  ------------------
 2069|   298k|                return it;
 2070|   298k|            }
 2071|   425k|        }
 2072|   126k|        it = val.iterator;
 2073|   126k|    }
 2074|       |
 2075|  31.1k|    return it;
 2076|   330k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|   284k|    {
  754|   284k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   329k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   329k|              cvref<T> obj = *get<T>(fn);
  745|   329k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   329k|                  obj(static_cast<decltype(args)>(args)...);
  747|   329k|              }
  748|   329k|              else {
  749|   329k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   329k|              }
  751|   329k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   329k|    {
  684|   329k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   329k|            return static_cast<T*>(s.m_cp);
  686|   329k|        }
  687|   329k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   329k|            return static_cast<T*>(s.m_p);
  689|   329k|        }
  690|   329k|        else {
  691|   329k|            return reinterpret_cast<T*>(s.m_fp);
  692|   329k|        }
  693|   329k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   329k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|   284k|        {
  662|   284k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   461k|    {
  304|   461k|        ranges::advance(x, n);
  305|   461k|        return x;
  306|   461k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   461k|    {
  268|   461k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   461k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   461k|    {
  181|  1.60M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.14M, False: 461k]
  ------------------
  182|  1.14M|            ++i;
  183|  1.14M|        }
  184|   461k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6177|  72.3k|    {
 6178|  72.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  72.3k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|  72.3k|            auto rd = make_reader<T, char_type>();
 6183|  72.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|  72.3k|                return unexpected(e);
 6185|  72.3k|            }
 6186|       |
 6187|  72.3k|            return impl(rd, range, value);
 6188|  72.3k|        }
 6189|  72.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|  72.3k|            auto rd = make_reader<T, char_type>();
 6191|  72.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  72.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 72.3k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|  72.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 72.3k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|  72.3k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|  72.3k|                return impl(rd, range, value);
 6198|  72.3k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|  72.3k|        else {
 6206|  72.3k|            SCN_EXPECT(false);
 6207|  72.3k|            SCN_UNREACHABLE;
 6208|  72.3k|        }
 6209|  72.3k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   434k|    {
 3040|   434k|        reader_error_handler eh{};
 3041|   434k|        get_derived().check_specs_impl(specs, eh);
 3042|   434k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   434k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 434k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   434k|        return {};
 3046|   434k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|   434k|    {
 3051|   434k|        return static_cast<Derived&>(*this);
 3052|   434k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|   434k|    {
 4145|   434k|        detail::check_float_type_specs(specs, eh);
 4146|   434k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|  72.3k|    {
 6120|  72.3k|        const bool need_skipped_width =
 6121|  72.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 72.3k]
  |  Branch (6121:33): [True: 0, False: 72.3k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  72.3k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  72.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  72.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  72.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  72.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 512, False: 71.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    512|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    512|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    512|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    512|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    512|    }                                                  \
  |  |  |  | 3667|  72.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  71.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  71.8k|        auto [it, prefix_width] = prefix_result;
 6126|  71.8k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  71.8k|        std::ptrdiff_t value_width = 0;
 6130|  71.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 71.8k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  71.8k|        else {
 6146|  71.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  71.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  71.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  71.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 59.8k, False: 11.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  59.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  59.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  59.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  59.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  59.8k|    }                                                  \
  |  | 3667|  71.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  71.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  11.9k|                                             specs, value, loc));
 6148|       |
 6149|  11.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 11.9k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  11.9k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  11.9k|        std::ptrdiff_t postfix_width = 0;
 6158|  11.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 11.8k, False: 104]
  ------------------
 6159|  11.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  11.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 11.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  11.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  11.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  11.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  11.8k|                                 value_width));
 6163|  11.8k|            std::tie(it, postfix_width) = postfix_result;
 6164|  11.8k|        }
 6165|       |
 6166|  11.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  11.9k|                                                 value_width, postfix_width);
 6168|  11.9k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 11.9k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  11.9k|        return it;
 6173|  11.9k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|   641k|    {
 3035|   641k|        return true;
 3036|   641k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|   431k|    {
 4217|   431k|        unsigned options{};
 4218|   431k|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 89.5k, False: 341k]
  ------------------
 4219|  89.5k|            options |= float_reader_base::allow_thsep;
 4220|  89.5k|        }
 4221|       |
 4222|   431k|        SCN_GCC_COMPAT_PUSH
 4223|   431k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|   431k|        switch (specs.type) {
 4226|  89.8k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 89.8k, False: 341k]
  ------------------
 4227|  89.8k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  72.5k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 72.5k, False: 358k]
  ------------------
 4230|  72.5k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|  89.8k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 89.8k, False: 341k]
  ------------------
 4233|  89.8k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|  89.6k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 89.6k, False: 341k]
  ------------------
 4236|  89.6k|                return options | float_reader_base::allow_scientific |
 4237|  89.6k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|  89.5k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 89.5k, False: 341k]
  ------------------
 4240|  89.5k|                return options | float_reader_base::allow_scientific |
 4241|  89.5k|                       float_reader_base::allow_fixed |
 4242|  89.5k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 431k]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|   431k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|   431k|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|   431k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|   431k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|   565k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  1.13M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|  75.0k|    {
 3691|  75.0k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  75.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  75.0k|        const std::ptrdiff_t sign_len =
 3694|  75.0k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 26, False: 74.9k]
  ------------------
 3695|       |
 3696|  75.0k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  75.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  75.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  75.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42.1k, False: 32.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  42.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  42.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  42.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  42.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  42.1k|    }                                                  \
  |  |  |  | 3667|  75.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  32.8k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  75.0k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|   225k|    {
 4057|   225k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 225k, False: 0]
  ------------------
 4058|   225k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 225k, False: 0]
  ------------------
 4059|   225k|            return;
 4060|   225k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|   111k|    {
 1587|   111k|        return m_storage.has_value();
 1588|   111k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|  65.0k|    {
 1592|  65.0k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  65.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  65.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  65.0k|        return *m_storage;
 1594|  65.0k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  71.8k|    {
 4170|  71.8k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  71.8k|#if !SCN_DISABLE_LOCALE
 4173|  71.8k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 14.9k, False: 56.9k]
  ------------------
 4174|  14.9k|            return read_impl<Range>(
 4175|  14.9k|                range, rd,
 4176|  14.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  14.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  14.9k|                },
 4179|  14.9k|                value, loc);
 4180|  14.9k|        }
 4181|  56.9k|#endif
 4182|       |
 4183|  56.9k|        return read_impl<Range>(
 4184|  56.9k|            range, rd,
 4185|  56.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  56.9k|                return r.read_source(SCN_FWD(args)...);
 4187|  56.9k|            },
 4188|  56.9k|            value);
 4189|  71.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|  94.1k|    {
 4206|  94.1k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  94.1k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  94.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.4k, False: 16.6k]
  |  |  ------------------
  ------------------
 4208|  77.4k|            return unexpected(r.error());
 4209|  77.4k|        }
 4210|       |
 4211|  16.6k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 295, False: 16.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    295|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    295|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    295|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    295|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    295|    }                                                  \
  |  |  |  | 3667|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  16.3k|        return ranges::next(range.begin(), n);
 4213|  16.6k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   282k|    {
  763|   282k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   282k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   282k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  14.9k|    {
  754|  14.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  14.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.9k|              cvref<T> obj = *get<T>(fn);
  745|  14.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  14.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.9k|              }
  748|  14.9k|              else {
  749|  14.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.9k|              }
  751|  14.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  14.9k|    {
  684|  14.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  14.9k|            return static_cast<T*>(s.m_cp);
  686|  14.9k|        }
  687|  14.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  14.9k|            return static_cast<T*>(s.m_p);
  689|  14.9k|        }
  690|  14.9k|        else {
  691|  14.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  14.9k|        }
  693|  14.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  14.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  14.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  14.9k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|  44.7k|    {
 3679|  44.7k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  44.7k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  44.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 44.7k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  44.7k|        return read_source_impl(range);
 3685|  44.7k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|   282k|    {
 3705|   282k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|   282k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   282k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   282k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 282k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   282k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   282k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   282k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   282k|        auto it = sign_result.first;
 3708|   282k|        m_sign = sign_result.second;
 3709|       |
 3710|   282k|        auto digits_begin = it;
 3711|   282k|        auto r = ranges::subrange{it, range.end()};
 3712|   282k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   282k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   282k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|   282k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|   282k|                SCN_TRY_ASSIGN(
 3717|   282k|                    it,
 3718|   282k|                    do_read_source_impl(
 3719|   282k|                        r,
 3720|   282k|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|   282k|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|   282k|            }
 3723|   282k|            else {
 3724|   282k|                auto cb = [&](const auto& rr)
 3725|   282k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   282k|                    auto res = read_all(rr);
 3727|   282k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   282k|                        return unexpected_scan_error(
 3729|   282k|                            scan_error::invalid_scanned_value,
 3730|   282k|                            "Invalid float value");
 3731|   282k|                    }
 3732|   282k|                    return res;
 3733|   282k|                };
 3734|   282k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|   282k|            }
 3736|   282k|        }
 3737|   282k|        else {
 3738|   282k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|   282k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   282k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 232k, False: 50.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|   232k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|   232k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|   232k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|   232k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|   232k|    }                                                  \
  |  | 3667|   282k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   282k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  50.0k|                it,
 3740|  50.0k|                do_read_source_impl(
 3741|  50.0k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  50.0k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  50.0k|        }
 3744|       |
 3745|  50.0k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  50.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  50.0k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 50.0k, False: 0]
  |  Branch (3747:48): [True: 50.0k, False: 0]
  ------------------
 3748|  50.0k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 50.0k, False: 0]
  ------------------
 3749|  50.0k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 50.0k, False: 0]
  ------------------
 3750|  50.0k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  50.0k|        }
 3752|       |
 3753|  50.0k|        handle_separators();
 3754|       |
 3755|  50.0k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 50.0k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  50.0k|        return it;
 3768|  50.0k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|   282k|    {
 4000|   282k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   282k|        const bool allowed_nonhex =
 4002|   282k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   282k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   282k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 282k, False: 0]
  |  Branch (4005:45): [True: 0, False: 282k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   282k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 282k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   282k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 282k, False: 0]
  |  Branch (4014:45): [True: 0, False: 282k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   282k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 282k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   282k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 156k, False: 126k]
  |  Branch (4021:28): [True: 44.9k, False: 111k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  44.9k|            auto it = range.begin();
 4025|       |
 4026|  44.9k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 60, False: 44.8k]
  ------------------
 4027|     60|                m_kind = float_kind::hex_with_prefix;
 4028|     60|                it = *r;
 4029|     60|            }
 4030|  44.8k|            else {
 4031|  44.8k|                m_kind = float_kind::hex_without_prefix;
 4032|  44.8k|            }
 4033|       |
 4034|  44.9k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  44.9k|        }
 4036|   237k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 126k, False: 111k]
  |  Branch (4036:29): [True: 126k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   126k|            m_kind = float_kind::generic;
 4040|   126k|            return read_regular_float(range);
 4041|   126k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   111k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 150, False: 111k]
  |  |  ------------------
  ------------------
 4047|    150|            m_kind = float_kind::hex_with_prefix;
 4048|    150|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    150|        }
 4050|       |
 4051|   111k|        m_kind = float_kind::generic;
 4052|   111k|        return read_regular(range);
 4053|   111k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|   282k|    {
 3811|   282k|        auto it = range.begin();
 3812|   282k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 282k, False: 0]
  ------------------
 3813|   282k|            return unexpected(r.error());
 3814|   282k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   282k|    {
 3834|   282k|        auto it = range.begin();
 3835|   282k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 282k, False: 0]
  ------------------
 3836|   282k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   282k|                scan_error::invalid_scanned_value,
 3838|   282k|                "Invalid floating-point NaN value"));
 3839|   282k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   156k|    {
 3804|   156k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   156k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|  45.0k|    {
 3904|  45.0k|        auto it = range.begin();
 3905|       |
 3906|  45.0k|        std::ptrdiff_t digits_count = 0;
 3907|  45.0k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|  45.0k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  45.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.7k, False: 9.30k]
  |  |  ------------------
  ------------------
 3909|  35.7k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  35.7k|                scan_error::invalid_scanned_value,
 3911|  35.7k|                "Invalid hexadecimal floating-point value"));
 3912|  35.7k|        }
 3913|  9.30k|        else {
 3914|  9.30k|            digits_count += ranges::distance(it, *r);
 3915|  9.30k|            it = *r;
 3916|  9.30k|        }
 3917|       |
 3918|  9.30k|        m_integral_part_length = digits_count;
 3919|  9.30k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 6, False: 9.30k]
  ------------------
 3920|  9.30k|                                             m_locale_options.decimal_point)) {
 3921|      6|            it = *r;
 3922|      6|        }
 3923|       |
 3924|  9.30k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 9.30k]
  ------------------
 3925|  9.30k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|  9.30k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  9.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.30k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|  9.30k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|  9.30k|        return it;
 3938|  9.30k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|  54.3k|    {
 3789|  54.3k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  54.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 54.3k]
  |  |  |  Branch (859:45): [True: 0, False: 54.3k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|  54.3k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|  54.3k|        return read_while1_code_unit(
 3798|  54.3k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|  54.3k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|  54.3k|    {
  754|  54.3k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  65.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  65.1k|              cvref<T> obj = *get<T>(fn);
  745|  65.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  65.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  65.1k|              }
  748|  65.1k|              else {
  749|  65.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  65.1k|              }
  751|  65.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  65.1k|    {
  684|  65.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  65.1k|            return static_cast<T*>(s.m_cp);
  686|  65.1k|        }
  687|  65.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  65.1k|            return static_cast<T*>(s.m_p);
  689|  65.1k|        }
  690|  65.1k|        else {
  691|  65.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  65.1k|        }
  693|  65.1k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3798|  65.1k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|  54.3k|        {
  662|  54.3k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|  42.3k|    {
 3876|  42.3k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 2.44k, False: 39.9k]
  ------------------
 3877|  2.44k|            auto beg_exp_it = range.begin();
 3878|  2.44k|            auto it = *r;
 3879|       |
 3880|  2.44k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 2.42k, False: 27]
  ------------------
 3881|  2.44k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  2.42k|                it = r_sign->first;
 3883|  2.42k|            }
 3884|       |
 3885|  2.44k|            if (auto r_exp = read_while1_code_unit(
 3886|  2.44k|                    ranges::subrange{it, range.end()},
 3887|  2.44k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  2.44k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  2.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.03k, False: 1.41k]
  |  |  ------------------
  ------------------
 3889|  1.03k|                it = beg_exp_it;
 3890|  1.03k|            }
 3891|  1.41k|            else {
 3892|  1.41k|                it = *r_exp;
 3893|  1.41k|            }
 3894|       |
 3895|  2.44k|            return it;
 3896|  2.44k|        }
 3897|  39.9k|        return range.begin();
 3898|  42.3k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_:
  753|  2.44k|    {
  754|  2.44k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|  5.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.27k|              cvref<T> obj = *get<T>(fn);
  745|  5.27k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.27k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.27k|              }
  748|  5.27k|              else {
  749|  5.27k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.27k|              }
  751|  5.27k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  5.27k|    {
  684|  5.27k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.27k|            return static_cast<T*>(s.m_cp);
  686|  5.27k|        }
  687|  5.27k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.27k|            return static_cast<T*>(s.m_p);
  689|  5.27k|        }
  690|  5.27k|        else {
  691|  5.27k|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.27k|        }
  693|  5.27k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  5.27k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_LPv0EEEPSL_:
  661|  2.44k|        {
  662|  2.44k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   237k|    {
 3944|   237k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   237k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 192k, False: 44.9k]
  |  Branch (3945:50): [True: 36.2k, False: 156k]
  ------------------
 3946|       |
 3947|   237k|        auto it = ranges::begin(range);
 3948|   237k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   237k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   237k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 195k, False: 42.0k]
  |  |  ------------------
  ------------------
 3952|   195k|            return r.transform_error(
 3953|   195k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   195k|                                              "Invalid floating-point value"));
 3955|   195k|        }
 3956|  42.0k|        else {
 3957|  42.0k|            digits_count += ranges::distance(it, *r);
 3958|  42.0k|            it = *r;
 3959|  42.0k|        }
 3960|       |
 3961|  42.0k|        m_integral_part_length = digits_count;
 3962|  42.0k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 42.0k]
  ------------------
 3963|  42.0k|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|  42.0k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 42.0k]
  ------------------
 3968|  42.0k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|  42.0k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.0k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  42.0k|        auto beg_exp_it = it;
 3979|  42.0k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 33.0k, False: 8.99k]
  ------------------
 3980|  33.0k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  33.0k|        }
 3982|  42.0k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 1.50k, False: 40.5k]
  |  Branch (3982:29): [True: 1.26k, False: 240]
  ------------------
 3983|  1.26k|            return unexpected_scan_error(
 3984|  1.26k|                scan_error::invalid_scanned_value,
 3985|  1.26k|                "No exponent given to scientific float");
 3986|  1.26k|        }
 3987|       |
 3988|  40.7k|        m_kind =
 3989|  40.7k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 39.4k, False: 1.37k]
  ------------------
 3990|       |
 3991|  40.7k|        return it;
 3992|  42.0k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|   279k|    {
 3774|   279k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 279k]
  |  |  |  Branch (859:45): [True: 0, False: 279k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   279k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   279k|        return read_while1_code_unit(
 3783|   279k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   279k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   279k|    {
  754|   279k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   323k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   323k|              cvref<T> obj = *get<T>(fn);
  745|   323k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   323k|                  obj(static_cast<decltype(args)>(args)...);
  747|   323k|              }
  748|   323k|              else {
  749|   323k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   323k|              }
  751|   323k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   323k|    {
  684|   323k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   323k|            return static_cast<T*>(s.m_cp);
  686|   323k|        }
  687|   323k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   323k|            return static_cast<T*>(s.m_p);
  689|   323k|        }
  690|   323k|        else {
  691|   323k|            return reinterpret_cast<T*>(s.m_fp);
  692|   323k|        }
  693|   323k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3783|   323k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   279k|        {
  662|   279k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  50.0k|    {
 1577|  50.0k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  50.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  50.0k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  14.9k|        {
  662|  14.9k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  56.9k|    {
  754|  56.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  56.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  56.9k|              cvref<T> obj = *get<T>(fn);
  745|  56.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  56.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  56.9k|              }
  748|  56.9k|              else {
  749|  56.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  56.9k|              }
  751|  56.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  56.9k|    {
  684|  56.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  56.9k|            return static_cast<T*>(s.m_cp);
  686|  56.9k|        }
  687|  56.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  56.9k|            return static_cast<T*>(s.m_p);
  689|  56.9k|        }
  690|  56.9k|        else {
  691|  56.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  56.9k|        }
  693|  56.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  56.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  56.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  56.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  56.9k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   238k|    {
 3665|   238k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 238k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   238k|        return read_source_impl(range);
 3671|   238k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  56.9k|        {
  662|  56.9k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  71.8k|    {
 4170|  71.8k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  71.8k|#if !SCN_DISABLE_LOCALE
 4173|  71.8k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 14.9k, False: 56.9k]
  ------------------
 4174|  14.9k|            return read_impl<Range>(
 4175|  14.9k|                range, rd,
 4176|  14.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  14.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  14.9k|                },
 4179|  14.9k|                value, loc);
 4180|  14.9k|        }
 4181|  56.9k|#endif
 4182|       |
 4183|  56.9k|        return read_impl<Range>(
 4184|  56.9k|            range, rd,
 4185|  56.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  56.9k|                return r.read_source(SCN_FWD(args)...);
 4187|  56.9k|            },
 4188|  56.9k|            value);
 4189|  71.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|  94.2k|    {
 4206|  94.2k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  94.2k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  94.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.8k, False: 58.3k]
  |  |  ------------------
  ------------------
 4208|  35.8k|            return unexpected(r.error());
 4209|  35.8k|        }
 4210|       |
 4211|  58.3k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  58.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  58.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  58.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 41.9k, False: 16.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  41.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  41.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  41.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  41.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  41.9k|    }                                                  \
  |  |  |  | 3667|  58.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  16.4k|        return ranges::next(range.begin(), n);
 4213|  58.3k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   282k|    {
  763|   282k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   282k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   282k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  14.9k|    {
  754|  14.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  14.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.9k|              cvref<T> obj = *get<T>(fn);
  745|  14.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  14.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.9k|              }
  748|  14.9k|              else {
  749|  14.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.9k|              }
  751|  14.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  14.9k|    {
  684|  14.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  14.9k|            return static_cast<T*>(s.m_cp);
  686|  14.9k|        }
  687|  14.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  14.9k|            return static_cast<T*>(s.m_p);
  689|  14.9k|        }
  690|  14.9k|        else {
  691|  14.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  14.9k|        }
  693|  14.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  14.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  14.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  14.9k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|  44.8k|    {
 3679|  44.8k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  44.8k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  44.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 44.8k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  44.8k|        return read_source_impl(range);
 3685|  44.8k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|   282k|    {
 3705|   282k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|   282k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   282k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   282k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 282k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   282k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   282k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   282k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   282k|        auto it = sign_result.first;
 3708|   282k|        m_sign = sign_result.second;
 3709|       |
 3710|   282k|        auto digits_begin = it;
 3711|   282k|        auto r = ranges::subrange{it, range.end()};
 3712|   282k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   282k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   282k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|   565k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 282k]
  |  |  |  Branch (859:45): [True: 0, False: 282k]
  |  |  |  Branch (859:45): [True: 0, False: 282k]
  |  |  ------------------
  ------------------
 3715|   282k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|   282k|            else {
 3724|   282k|                auto cb = [&](const auto& rr)
 3725|   282k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   282k|                    auto res = read_all(rr);
 3727|   282k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   282k|                        return unexpected_scan_error(
 3729|   282k|                            scan_error::invalid_scanned_value,
 3730|   282k|                            "Invalid float value");
 3731|   282k|                    }
 3732|   282k|                    return res;
 3733|   282k|                };
 3734|   282k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|   282k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   282k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 107k, False: 175k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|   107k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|   107k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|   107k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|   107k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|   107k|    }                                                  \
  |  | 3667|   282k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   282k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|   175k|            }
 3736|   282k|        }
 3737|   175k|        else {
 3738|   175k|            SCN_TRY_ASSIGN(
 3739|   175k|                it,
 3740|   175k|                do_read_source_impl(
 3741|   175k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   175k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   175k|        }
 3744|       |
 3745|   175k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   175k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   175k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   175k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 175k, False: 0]
  |  Branch (3747:48): [True: 175k, False: 0]
  ------------------
 3748|   175k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 175k, False: 0]
  ------------------
 3749|   175k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 175k, False: 0]
  ------------------
 3750|   175k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   175k|        }
 3752|       |
 3753|   175k|        handle_separators();
 3754|       |
 3755|   175k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 175k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   175k|        return it;
 3768|   175k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|   282k|    {
 3811|   282k|        auto it = range.begin();
 3812|   282k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 282k, False: 0]
  ------------------
 3813|   282k|            return unexpected(r.error());
 3814|   282k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   282k|    {
 3834|   282k|        auto it = range.begin();
 3835|   282k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 282k, False: 0]
  ------------------
 3836|   282k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   282k|                scan_error::invalid_scanned_value,
 3838|   282k|                "Invalid floating-point NaN value"));
 3839|   282k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   156k|    {
 3804|   156k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   156k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   146k|{
 1996|   146k|    auto it = read_while_code_unit(range, pred);
 1997|   146k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 126k, False: 20.1k]
  ------------------
 1998|   126k|        return unexpected(parse_error::error);
 1999|   126k|    }
 2000|  20.1k|    return it;
 2001|   146k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|  10.5k|    {
 3876|  10.5k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 1.01k, False: 9.55k]
  ------------------
 3877|  1.01k|            auto beg_exp_it = range.begin();
 3878|  1.01k|            auto it = *r;
 3879|       |
 3880|  1.01k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 998, False: 12]
  ------------------
 3881|  1.01k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|    998|                it = r_sign->first;
 3883|    998|            }
 3884|       |
 3885|  1.01k|            if (auto r_exp = read_while1_code_unit(
 3886|  1.01k|                    ranges::subrange{it, range.end()},
 3887|  1.01k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  1.01k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  1.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 446, False: 564]
  |  |  ------------------
  ------------------
 3889|    446|                it = beg_exp_it;
 3890|    446|            }
 3891|    564|            else {
 3892|    564|                it = *r_exp;
 3893|    564|            }
 3894|       |
 3895|  1.01k|            return it;
 3896|  1.01k|        }
 3897|  9.55k|        return range.begin();
 3898|  10.5k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_:
  753|  1.01k|    {
  754|  1.01k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clESW_w:
  743|  2.10k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.10k|              cvref<T> obj = *get<T>(fn);
  745|  2.10k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.10k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.10k|              }
  748|  2.10k|              else {
  749|  2.10k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.10k|              }
  751|  2.10k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  2.10k|    {
  684|  2.10k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.10k|            return static_cast<T*>(s.m_cp);
  686|  2.10k|        }
  687|  2.10k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.10k|            return static_cast<T*>(s.m_p);
  689|  2.10k|        }
  690|  2.10k|        else {
  691|  2.10k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.10k|        }
  693|  2.10k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  2.10k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  661|  1.01k|        {
  662|  1.01k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   126k|    {
 3944|   126k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   126k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 81.0k, False: 44.9k]
  |  Branch (3945:50): [True: 36.2k, False: 44.8k]
  ------------------
 3946|       |
 3947|   126k|        auto it = ranges::begin(range);
 3948|   126k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   126k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   126k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106k, False: 19.5k]
  |  |  ------------------
  ------------------
 3952|   106k|            return r.transform_error(
 3953|   106k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   106k|                                              "Invalid floating-point value"));
 3955|   106k|        }
 3956|  19.5k|        else {
 3957|  19.5k|            digits_count += ranges::distance(it, *r);
 3958|  19.5k|            it = *r;
 3959|  19.5k|        }
 3960|       |
 3961|  19.5k|        m_integral_part_length = digits_count;
 3962|  19.5k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 19.5k]
  ------------------
 3963|  19.5k|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|  19.5k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 19.5k]
  ------------------
 3968|  19.5k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|  19.5k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  19.5k|        auto beg_exp_it = it;
 3979|  19.5k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 10.5k, False: 8.99k]
  ------------------
 3980|  10.5k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  10.5k|        }
 3982|  19.5k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 1.50k, False: 18.0k]
  |  Branch (3982:29): [True: 1.26k, False: 240]
  ------------------
 3983|  1.26k|            return unexpected_scan_error(
 3984|  1.26k|                scan_error::invalid_scanned_value,
 3985|  1.26k|                "No exponent given to scientific float");
 3986|  1.26k|        }
 3987|       |
 3988|  18.2k|        m_kind =
 3989|  18.2k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 17.7k, False: 564]
  ------------------
 3990|       |
 3991|  18.2k|        return it;
 3992|  19.5k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   145k|    {
 3774|   145k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 145k]
  |  |  |  Branch (859:45): [True: 0, False: 145k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   145k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   145k|        return read_while1_code_unit(
 3783|   145k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   145k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|   145k|    {
  754|   145k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|   165k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   165k|              cvref<T> obj = *get<T>(fn);
  745|   165k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   165k|                  obj(static_cast<decltype(args)>(args)...);
  747|   165k|              }
  748|   165k|              else {
  749|   165k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   165k|              }
  751|   165k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   165k|    {
  684|   165k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   165k|            return static_cast<T*>(s.m_cp);
  686|   165k|        }
  687|   165k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   165k|            return static_cast<T*>(s.m_p);
  689|   165k|        }
  690|   165k|        else {
  691|   165k|            return reinterpret_cast<T*>(s.m_fp);
  692|   165k|        }
  693|   165k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|   165k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|   145k|        {
  662|   145k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|   282k|    {
 4000|   282k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   282k|        const bool allowed_nonhex =
 4002|   282k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   282k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   282k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 282k, False: 0]
  |  Branch (4005:45): [True: 0, False: 282k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   282k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 282k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   282k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 282k, False: 0]
  |  Branch (4014:45): [True: 0, False: 282k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   282k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 282k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   282k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 156k, False: 126k]
  |  Branch (4021:28): [True: 44.9k, False: 112k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  44.9k|            auto it = range.begin();
 4025|       |
 4026|  44.9k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 60, False: 44.8k]
  ------------------
 4027|     60|                m_kind = float_kind::hex_with_prefix;
 4028|     60|                it = *r;
 4029|     60|            }
 4030|  44.8k|            else {
 4031|  44.8k|                m_kind = float_kind::hex_without_prefix;
 4032|  44.8k|            }
 4033|       |
 4034|  44.9k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  44.9k|        }
 4036|   238k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 126k, False: 112k]
  |  Branch (4036:29): [True: 126k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   126k|            m_kind = float_kind::generic;
 4040|   126k|            return read_regular_float(range);
 4041|   126k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   112k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 150, False: 111k]
  |  |  ------------------
  ------------------
 4047|    150|            m_kind = float_kind::hex_with_prefix;
 4048|    150|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    150|        }
 4050|       |
 4051|   111k|        m_kind = float_kind::generic;
 4052|   111k|        return read_regular(range);
 4053|   112k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   156k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   156k|                    auto res = read_all(rr);
 3727|   156k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 63, False: 156k]
  |  |  ------------------
  ------------------
 3728|     63|                        return unexpected_scan_error(
 3729|     63|                            scan_error::invalid_scanned_value,
 3730|     63|                            "Invalid float value");
 3731|     63|                    }
 3732|   156k|                    return res;
 3733|   156k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   156k|{
 1839|   156k|    return ranges::next(range.begin(), range.end());
 1840|   156k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   156k|    {
  313|   156k|        ranges::advance(x, bound);
  314|   156k|        return x;
  315|   156k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   156k|    {
  275|   156k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   156k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|   175k|    {
 1577|   175k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   175k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   175k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   175k|    {
 1621|   175k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   175k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   175k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   175k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   175k|            m_storage.reset();
 1627|   175k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   175k|        }
 1629|   175k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   175k|                                          std::basic_string<CharT>>) {
 1631|   175k|            m_storage.emplace(SCN_FWD(range));
 1632|   175k|            m_view = string_view_type{*m_storage};
 1633|   175k|        }
 1634|   175k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   175k|                                          typename detail::basic_scan_buffer<
 1636|   175k|                                              value_t>::forward_iterator> &&
 1637|   175k|                           ranges::common_range<Range>) {
 1638|   175k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   175k|            auto end_seg = range.end().contiguous_segment();
 1640|   175k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   175k|                             detail::to_address(end_seg.end()))) {
 1642|   175k|                auto& str = m_storage.emplace();
 1643|   175k|                str.reserve(range.end().position() - range.begin().position());
 1644|   175k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   175k|                m_view = string_view_type{str};
 1646|   175k|                return;
 1647|   175k|            }
 1648|       |
 1649|   175k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   175k|                                                            end_seg.data());
 1651|   175k|            m_storage.reset();
 1652|   175k|        }
 1653|   175k|        else {
 1654|   175k|            auto& str = m_storage.emplace();
 1655|   175k|            if constexpr (ranges::sized_range<Range>) {
 1656|   175k|                str.reserve(range.size());
 1657|   175k|            }
 1658|   175k|            if constexpr (ranges::common_range<Range>) {
 1659|   175k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   175k|                          std::back_inserter(str));
 1661|   175k|            }
 1662|   175k|            else {
 1663|   175k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   175k|                     ++it) {
 1665|   175k|                    str.push_back(*it);
 1666|   175k|                }
 1667|   175k|            }
 1668|   175k|            m_view = string_view_type{str};
 1669|   175k|        }
 1670|   175k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  14.9k|        {
  662|  14.9k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  56.9k|    {
  754|  56.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  56.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  56.9k|              cvref<T> obj = *get<T>(fn);
  745|  56.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  56.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  56.9k|              }
  748|  56.9k|              else {
  749|  56.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  56.9k|              }
  751|  56.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  56.9k|    {
  684|  56.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  56.9k|            return static_cast<T*>(s.m_cp);
  686|  56.9k|        }
  687|  56.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  56.9k|            return static_cast<T*>(s.m_p);
  689|  56.9k|        }
  690|  56.9k|        else {
  691|  56.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  56.9k|        }
  693|  56.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  56.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  56.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  56.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  56.9k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   238k|    {
 3665|   238k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 238k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   238k|        return read_source_impl(range);
 3671|   238k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  56.9k|        {
  662|  56.9k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6177|  72.4k|    {
 6178|  72.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  72.4k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|  72.4k|            auto rd = make_reader<T, char_type>();
 6183|  72.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|  72.4k|                return unexpected(e);
 6185|  72.4k|            }
 6186|       |
 6187|  72.4k|            return impl(rd, range, value);
 6188|  72.4k|        }
 6189|  72.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|  72.4k|            auto rd = make_reader<T, char_type>();
 6191|  72.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  72.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 72.4k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|  72.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 72.4k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|  72.4k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|  72.4k|                return impl(rd, range, value);
 6198|  72.4k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|  72.4k|        else {
 6206|  72.4k|            SCN_EXPECT(false);
 6207|  72.4k|            SCN_UNREACHABLE;
 6208|  72.4k|        }
 6209|  72.4k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|  72.4k|    {
 6120|  72.4k|        const bool need_skipped_width =
 6121|  72.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 72.4k]
  |  Branch (6121:33): [True: 0, False: 72.4k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  72.4k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  72.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  72.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  72.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  72.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 538, False: 71.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    538|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    538|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    538|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    538|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    538|    }                                                  \
  |  |  |  | 3667|  72.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  71.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  71.8k|        auto [it, prefix_width] = prefix_result;
 6126|  71.8k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  71.8k|        std::ptrdiff_t value_width = 0;
 6130|  71.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 71.8k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  71.8k|        else {
 6146|  71.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  71.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  71.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  71.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 59.8k, False: 12.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  59.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  59.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  59.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  59.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  59.8k|    }                                                  \
  |  | 3667|  71.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  71.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  12.0k|                                             specs, value, loc));
 6148|       |
 6149|  12.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 12.0k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  12.0k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  12.0k|        std::ptrdiff_t postfix_width = 0;
 6158|  12.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 11.9k, False: 114]
  ------------------
 6159|  11.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  11.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  11.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  11.9k|                                 value_width));
 6163|  11.9k|            std::tie(it, postfix_width) = postfix_result;
 6164|  11.9k|        }
 6165|       |
 6166|  12.0k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  12.0k|                                                 value_width, postfix_width);
 6168|  12.0k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 12.0k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  12.0k|        return it;
 6173|  12.0k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  75.0k|    {
 3691|  75.0k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  75.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  75.0k|        const std::ptrdiff_t sign_len =
 3694|  75.0k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 26, False: 75.0k]
  ------------------
 3695|       |
 3696|  75.0k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  75.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  75.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  75.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42.0k, False: 33.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  42.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  42.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  42.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  42.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  42.0k|    }                                                  \
  |  |  |  | 3667|  75.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  33.0k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  75.0k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  71.8k|    {
 4170|  71.8k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  71.8k|#if !SCN_DISABLE_LOCALE
 4173|  71.8k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 14.9k, False: 56.9k]
  ------------------
 4174|  14.9k|            return read_impl<Range>(
 4175|  14.9k|                range, rd,
 4176|  14.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  14.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  14.9k|                },
 4179|  14.9k|                value, loc);
 4180|  14.9k|        }
 4181|  56.9k|#endif
 4182|       |
 4183|  56.9k|        return read_impl<Range>(
 4184|  56.9k|            range, rd,
 4185|  56.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  56.9k|                return r.read_source(SCN_FWD(args)...);
 4187|  56.9k|            },
 4188|  56.9k|            value);
 4189|  71.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|  94.2k|    {
 4206|  94.2k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  94.2k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  94.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.5k, False: 16.6k]
  |  |  ------------------
  ------------------
 4208|  77.5k|            return unexpected(r.error());
 4209|  77.5k|        }
 4210|       |
 4211|  16.6k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 170, False: 16.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    170|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    170|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    170|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    170|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    170|    }                                                  \
  |  |  |  | 3667|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  16.5k|        return ranges::next(range.begin(), n);
 4213|  16.6k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  14.9k|    {
  754|  14.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  14.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.9k|              cvref<T> obj = *get<T>(fn);
  745|  14.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  14.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.9k|              }
  748|  14.9k|              else {
  749|  14.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.9k|              }
  751|  14.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  14.9k|    {
  684|  14.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  14.9k|            return static_cast<T*>(s.m_cp);
  686|  14.9k|        }
  687|  14.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  14.9k|            return static_cast<T*>(s.m_p);
  689|  14.9k|        }
  690|  14.9k|        else {
  691|  14.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  14.9k|        }
  693|  14.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  14.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  14.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  14.9k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  14.9k|        {
  662|  14.9k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  56.9k|    {
  754|  56.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  56.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  56.9k|              cvref<T> obj = *get<T>(fn);
  745|  56.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  56.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  56.9k|              }
  748|  56.9k|              else {
  749|  56.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  56.9k|              }
  751|  56.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  56.9k|    {
  684|  56.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  56.9k|            return static_cast<T*>(s.m_cp);
  686|  56.9k|        }
  687|  56.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  56.9k|            return static_cast<T*>(s.m_p);
  689|  56.9k|        }
  690|  56.9k|        else {
  691|  56.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  56.9k|        }
  693|  56.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  56.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  56.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  56.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  56.9k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  56.9k|        {
  662|  56.9k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  71.9k|    {
 4170|  71.9k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  71.9k|#if !SCN_DISABLE_LOCALE
 4173|  71.9k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 14.9k, False: 56.9k]
  ------------------
 4174|  14.9k|            return read_impl<Range>(
 4175|  14.9k|                range, rd,
 4176|  14.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  14.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  14.9k|                },
 4179|  14.9k|                value, loc);
 4180|  14.9k|        }
 4181|  56.9k|#endif
 4182|       |
 4183|  56.9k|        return read_impl<Range>(
 4184|  56.9k|            range, rd,
 4185|  56.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  56.9k|                return r.read_source(SCN_FWD(args)...);
 4187|  56.9k|            },
 4188|  56.9k|            value);
 4189|  71.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|  94.3k|    {
 4206|  94.3k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  94.3k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  94.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.9k, False: 58.3k]
  |  |  ------------------
  ------------------
 4208|  35.9k|            return unexpected(r.error());
 4209|  35.9k|        }
 4210|       |
 4211|  58.3k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  58.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  58.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  58.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 41.8k, False: 16.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  41.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  41.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  41.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  41.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  41.8k|    }                                                  \
  |  |  |  | 3667|  58.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  16.5k|        return ranges::next(range.begin(), n);
 4213|  58.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  14.9k|    {
  754|  14.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  14.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.9k|              cvref<T> obj = *get<T>(fn);
  745|  14.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  14.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.9k|              }
  748|  14.9k|              else {
  749|  14.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.9k|              }
  751|  14.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  14.9k|    {
  684|  14.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  14.9k|            return static_cast<T*>(s.m_cp);
  686|  14.9k|        }
  687|  14.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  14.9k|            return static_cast<T*>(s.m_p);
  689|  14.9k|        }
  690|  14.9k|        else {
  691|  14.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  14.9k|        }
  693|  14.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  14.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  14.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  14.9k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  14.9k|        {
  662|  14.9k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  56.9k|    {
  754|  56.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  56.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  56.9k|              cvref<T> obj = *get<T>(fn);
  745|  56.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  56.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  56.9k|              }
  748|  56.9k|              else {
  749|  56.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  56.9k|              }
  751|  56.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  56.9k|    {
  684|  56.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  56.9k|            return static_cast<T*>(s.m_cp);
  686|  56.9k|        }
  687|  56.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  56.9k|            return static_cast<T*>(s.m_p);
  689|  56.9k|        }
  690|  56.9k|        else {
  691|  56.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  56.9k|        }
  693|  56.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  56.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  56.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  56.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  56.9k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  56.9k|        {
  662|  56.9k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6177|  72.5k|    {
 6178|  72.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  72.5k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|  72.5k|            auto rd = make_reader<T, char_type>();
 6183|  72.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|  72.5k|                return unexpected(e);
 6185|  72.5k|            }
 6186|       |
 6187|  72.5k|            return impl(rd, range, value);
 6188|  72.5k|        }
 6189|  72.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|  72.5k|            auto rd = make_reader<T, char_type>();
 6191|  72.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  72.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 72.5k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|  72.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 72.5k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|  72.5k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|  72.5k|                return impl(rd, range, value);
 6198|  72.5k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|  72.5k|        else {
 6206|  72.5k|            SCN_EXPECT(false);
 6207|  72.5k|            SCN_UNREACHABLE;
 6208|  72.5k|        }
 6209|  72.5k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|  72.5k|    {
 6120|  72.5k|        const bool need_skipped_width =
 6121|  72.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 72.5k]
  |  Branch (6121:33): [True: 0, False: 72.5k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  72.5k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  72.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  72.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  72.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  72.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 544, False: 71.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    544|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    544|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    544|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    544|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    544|    }                                                  \
  |  |  |  | 3667|  72.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  71.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  71.9k|        auto [it, prefix_width] = prefix_result;
 6126|  71.9k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  71.9k|        std::ptrdiff_t value_width = 0;
 6130|  71.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 71.9k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  71.9k|        else {
 6146|  71.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  71.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  71.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  71.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 59.8k, False: 12.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  59.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  59.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  59.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  59.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  59.8k|    }                                                  \
  |  | 3667|  71.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  71.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  12.1k|                                             specs, value, loc));
 6148|       |
 6149|  12.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 12.1k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  12.1k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  12.1k|        std::ptrdiff_t postfix_width = 0;
 6158|  12.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 12.0k, False: 114]
  ------------------
 6159|  12.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  12.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  12.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  12.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  12.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  12.0k|                                 value_width));
 6163|  12.0k|            std::tie(it, postfix_width) = postfix_result;
 6164|  12.0k|        }
 6165|       |
 6166|  12.1k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  12.1k|                                                 value_width, postfix_width);
 6168|  12.1k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 12.1k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  12.1k|        return it;
 6173|  12.1k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|  75.1k|    {
 3691|  75.1k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  75.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  75.1k|        const std::ptrdiff_t sign_len =
 3694|  75.1k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 26, False: 75.1k]
  ------------------
 3695|       |
 3696|  75.1k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  75.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  75.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  75.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  75.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 41.8k, False: 33.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  41.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  41.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  41.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  41.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  41.8k|    }                                                  \
  |  |  |  | 3667|  75.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  33.3k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  75.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  71.9k|    {
 4170|  71.9k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  71.9k|#if !SCN_DISABLE_LOCALE
 4173|  71.9k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 14.9k, False: 57.0k]
  ------------------
 4174|  14.9k|            return read_impl<Range>(
 4175|  14.9k|                range, rd,
 4176|  14.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  14.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  14.9k|                },
 4179|  14.9k|                value, loc);
 4180|  14.9k|        }
 4181|  57.0k|#endif
 4182|       |
 4183|  57.0k|        return read_impl<Range>(
 4184|  57.0k|            range, rd,
 4185|  57.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  57.0k|                return r.read_source(SCN_FWD(args)...);
 4187|  57.0k|            },
 4188|  57.0k|            value);
 4189|  71.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|  94.4k|    {
 4206|  94.4k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  94.4k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  94.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 77.7k, False: 16.7k]
  |  |  ------------------
  ------------------
 4208|  77.7k|            return unexpected(r.error());
 4209|  77.7k|        }
 4210|       |
 4211|  16.7k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  16.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     32|    }                                                  \
  |  |  |  | 3667|  16.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  16.6k|        return ranges::next(range.begin(), n);
 4213|  16.7k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  14.9k|    {
  754|  14.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  14.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.9k|              cvref<T> obj = *get<T>(fn);
  745|  14.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  14.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.9k|              }
  748|  14.9k|              else {
  749|  14.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.9k|              }
  751|  14.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  14.9k|    {
  684|  14.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  14.9k|            return static_cast<T*>(s.m_cp);
  686|  14.9k|        }
  687|  14.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  14.9k|            return static_cast<T*>(s.m_p);
  689|  14.9k|        }
  690|  14.9k|        else {
  691|  14.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  14.9k|        }
  693|  14.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  14.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  14.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  14.9k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  14.9k|        {
  662|  14.9k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  57.0k|    {
  754|  57.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  57.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.0k|              cvref<T> obj = *get<T>(fn);
  745|  57.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  57.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  57.0k|              }
  748|  57.0k|              else {
  749|  57.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.0k|              }
  751|  57.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  57.0k|    {
  684|  57.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  57.0k|            return static_cast<T*>(s.m_cp);
  686|  57.0k|        }
  687|  57.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  57.0k|            return static_cast<T*>(s.m_p);
  689|  57.0k|        }
  690|  57.0k|        else {
  691|  57.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  57.0k|        }
  693|  57.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  57.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  57.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  57.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  57.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  57.0k|        {
  662|  57.0k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  72.0k|    {
 4170|  72.0k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  72.0k|#if !SCN_DISABLE_LOCALE
 4173|  72.0k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 14.9k, False: 57.0k]
  ------------------
 4174|  14.9k|            return read_impl<Range>(
 4175|  14.9k|                range, rd,
 4176|  14.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  14.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  14.9k|                },
 4179|  14.9k|                value, loc);
 4180|  14.9k|        }
 4181|  57.0k|#endif
 4182|       |
 4183|  57.0k|        return read_impl<Range>(
 4184|  57.0k|            range, rd,
 4185|  57.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  57.0k|                return r.read_source(SCN_FWD(args)...);
 4187|  57.0k|            },
 4188|  57.0k|            value);
 4189|  72.0k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|  94.4k|    {
 4206|  94.4k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  94.4k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  94.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.9k, False: 58.4k]
  |  |  ------------------
  ------------------
 4208|  35.9k|            return unexpected(r.error());
 4209|  35.9k|        }
 4210|       |
 4211|  58.4k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  58.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  58.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  58.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 41.7k, False: 16.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  41.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  41.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  41.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  41.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  41.7k|    }                                                  \
  |  |  |  | 3667|  58.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  16.7k|        return ranges::next(range.begin(), n);
 4213|  58.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  14.9k|    {
  754|  14.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  14.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.9k|              cvref<T> obj = *get<T>(fn);
  745|  14.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  14.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.9k|              }
  748|  14.9k|              else {
  749|  14.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.9k|              }
  751|  14.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  14.9k|    {
  684|  14.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  14.9k|            return static_cast<T*>(s.m_cp);
  686|  14.9k|        }
  687|  14.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  14.9k|            return static_cast<T*>(s.m_p);
  689|  14.9k|        }
  690|  14.9k|        else {
  691|  14.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  14.9k|        }
  693|  14.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  14.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  14.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  14.9k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  14.9k|        {
  662|  14.9k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  57.0k|    {
  754|  57.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  57.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.0k|              cvref<T> obj = *get<T>(fn);
  745|  57.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  57.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  57.0k|              }
  748|  57.0k|              else {
  749|  57.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.0k|              }
  751|  57.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  57.0k|    {
  684|  57.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  57.0k|            return static_cast<T*>(s.m_cp);
  686|  57.0k|        }
  687|  57.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  57.0k|            return static_cast<T*>(s.m_p);
  689|  57.0k|        }
  690|  57.0k|        else {
  691|  57.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  57.0k|        }
  693|  57.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  57.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  57.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  57.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  57.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  57.0k|        {
  662|  57.0k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   284k|{
 2061|   284k|    auto it = range.begin();
 2062|   331k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 329k, False: 2.00k]
  ------------------
 2063|   329k|        const auto val =
 2064|   329k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   329k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   329k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 329k, False: 0]
  |  |  ------------------
  ------------------
 2066|   329k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   329k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   329k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 282k, False: 46.2k]
  ------------------
 2069|   282k|                return it;
 2070|   282k|            }
 2071|   329k|        }
 2072|  46.2k|        it = val.iterator;
 2073|  46.2k|    }
 2074|       |
 2075|  2.00k|    return it;
 2076|   284k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   329k|{
 1899|   329k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   329k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   329k|    auto it = range.begin();
 1903|   329k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   329k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 329k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   329k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 329k, False: 0]
  ------------------
 1912|   329k|        ++it;
 1913|   329k|        return {it, string_type(1, *range.begin())};
 1914|   329k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   329k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   329k|    {
 1890|   329k|        return !codepoint.empty();
 1891|   329k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   284k|{
 2082|   284k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   284k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   284k|{
 2951|   284k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 284k, False: 0]
  ------------------
 2952|   284k|        auto it = read_while_classic_space(range);
 2953|   284k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   284k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 282k]
  |  |  ------------------
  ------------------
 2955|  2.00k|            return unexpected(e);
 2956|  2.00k|        }
 2957|       |
 2958|   282k|        return it;
 2959|   284k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   284k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   284k|{
 2117|   284k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   284k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   284k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   284k|        auto buf = make_contiguous_buffer(range);
 2121|   284k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   284k|        return ranges::next(range.begin(),
 2123|   284k|                            ranges::distance(buf.view().begin(), it));
 2124|   284k|    }
 2125|   284k|    else {
 2126|   284k|        auto it = range.begin();
 2127|       |
 2128|   284k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   284k|            auto seg = get_contiguous_beginning(range);
 2130|   284k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   284k|                seg_it != seg.end()) {
 2132|   284k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   284k|            }
 2134|   284k|            ranges::advance(it, seg.size());
 2135|   284k|        }
 2136|       |
 2137|   284k|        return read_while_code_point(
 2138|   284k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   284k|    }
 2140|   284k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   284k|    {
  754|   284k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   329k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   329k|              cvref<T> obj = *get<T>(fn);
  745|   329k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   329k|                  obj(static_cast<decltype(args)>(args)...);
  747|   329k|              }
  748|   329k|              else {
  749|   329k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   329k|              }
  751|   329k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   329k|    {
  684|   329k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   329k|            return static_cast<T*>(s.m_cp);
  686|   329k|        }
  687|   329k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   329k|            return static_cast<T*>(s.m_p);
  689|   329k|        }
  690|   329k|        else {
  691|   329k|            return reinterpret_cast<T*>(s.m_fp);
  692|   329k|        }
  693|   329k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   329k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   284k|        {
  662|   284k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  2.11M|{
 2088|  2.11M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.11M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.11M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.11M|        auto buf = make_contiguous_buffer(range);
 2092|  2.11M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.11M|        return ranges::next(range.begin(),
 2094|  2.11M|                            ranges::distance(buf.view().begin(), it));
 2095|  2.11M|    }
 2096|  2.11M|    else {
 2097|  2.11M|        auto it = range.begin();
 2098|       |
 2099|  2.11M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.11M|            auto seg = get_contiguous_beginning(range);
 2101|  2.11M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.11M|                seg_it != seg.end()) {
 2103|  2.11M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.11M|            }
 2105|  2.11M|            ranges::advance(it, seg.size());
 2106|  2.11M|        }
 2107|       |
 2108|  2.11M|        return read_until_code_point(
 2109|  2.11M|            ranges::subrange{it, range.end()},
 2110|  2.11M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.11M|    }
 2112|  2.11M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  2.11M|{
 1683|  2.11M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.11M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.11M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.11M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.11M|    }
 1688|  2.11M|    else {
 1689|  2.11M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.11M|    }
 1691|  2.11M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  2.11M|    {
 1490|  2.11M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
 1576|  2.11M|    {
 1577|  2.11M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.11M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|  2.11M|    {
 1621|  2.11M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.11M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.11M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.11M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.11M|            m_storage.reset();
 1627|  2.11M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.11M|        }
 1629|  2.11M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.11M|                                          std::basic_string<CharT>>) {
 1631|  2.11M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  2.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  2.11M|            m_view = string_view_type{*m_storage};
 1633|  2.11M|        }
 1634|  2.11M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.11M|                                          typename detail::basic_scan_buffer<
 1636|  2.11M|                                              value_t>::forward_iterator> &&
 1637|  2.11M|                           ranges::common_range<Range>) {
 1638|  2.11M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.11M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.11M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.11M|                             detail::to_address(end_seg.end()))) {
 1642|  2.11M|                auto& str = m_storage.emplace();
 1643|  2.11M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.11M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.11M|                m_view = string_view_type{str};
 1646|  2.11M|                return;
 1647|  2.11M|            }
 1648|       |
 1649|  2.11M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.11M|                                                            end_seg.data());
 1651|  2.11M|            m_storage.reset();
 1652|  2.11M|        }
 1653|  2.11M|        else {
 1654|  2.11M|            auto& str = m_storage.emplace();
 1655|  2.11M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.11M|                str.reserve(range.size());
 1657|  2.11M|            }
 1658|  2.11M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.11M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.11M|                          std::back_inserter(str));
 1661|  2.11M|            }
 1662|  2.11M|            else {
 1663|  2.11M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.11M|                     ++it) {
 1665|  2.11M|                    str.push_back(*it);
 1666|  2.11M|                }
 1667|  2.11M|            }
 1668|  2.11M|            m_view = string_view_type{str};
 1669|  2.11M|        }
 1670|  2.11M|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4099|  1.44M|    {
 4100|  1.44M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 175k, False: 1.26M]
  ------------------
 4101|   175k|            return std::copysign(value, T{-1.0});
 4102|   175k|        }
 4103|  1.26M|        return std::copysign(value, T{1.0});
 4104|  1.44M|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  45.0k|{
 2088|  45.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  45.0k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  45.0k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  45.0k|        auto buf = make_contiguous_buffer(range);
 2092|  45.0k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  45.0k|        return ranges::next(range.begin(),
 2094|  45.0k|                            ranges::distance(buf.view().begin(), it));
 2095|  45.0k|    }
 2096|  45.0k|    else {
 2097|  45.0k|        auto it = range.begin();
 2098|       |
 2099|  45.0k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  45.0k|            auto seg = get_contiguous_beginning(range);
 2101|  45.0k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  45.0k|                seg_it != seg.end()) {
 2103|  45.0k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  45.0k|            }
 2105|  45.0k|            ranges::advance(it, seg.size());
 2106|  45.0k|        }
 2107|       |
 2108|  45.0k|        return read_until_code_point(
 2109|  45.0k|            ranges::subrange{it, range.end()},
 2110|  45.0k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  45.0k|    }
 2112|  45.0k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|  45.0k|    {
  754|  45.0k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  96.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  96.0k|              cvref<T> obj = *get<T>(fn);
  745|  96.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  96.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  96.0k|              }
  748|  96.0k|              else {
  749|  96.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  96.0k|              }
  751|  96.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  96.0k|    {
  684|  96.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  96.0k|            return static_cast<T*>(s.m_cp);
  686|  96.0k|        }
  687|  96.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  96.0k|            return static_cast<T*>(s.m_p);
  689|  96.0k|        }
  690|  96.0k|        else {
  691|  96.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  96.0k|        }
  693|  96.0k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|  96.0k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|  45.0k|        {
  662|  45.0k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
 1576|  45.0k|    {
 1577|  45.0k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  45.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  45.0k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|  45.0k|    {
 1621|  45.0k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  45.0k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  45.0k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  45.0k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  45.0k|            m_storage.reset();
 1627|  45.0k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  45.0k|        }
 1629|  45.0k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  45.0k|                                          std::basic_string<CharT>>) {
 1631|  45.0k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  45.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  45.0k|            m_view = string_view_type{*m_storage};
 1633|  45.0k|        }
 1634|  45.0k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  45.0k|                                          typename detail::basic_scan_buffer<
 1636|  45.0k|                                              value_t>::forward_iterator> &&
 1637|  45.0k|                           ranges::common_range<Range>) {
 1638|  45.0k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  45.0k|            auto end_seg = range.end().contiguous_segment();
 1640|  45.0k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  45.0k|                             detail::to_address(end_seg.end()))) {
 1642|  45.0k|                auto& str = m_storage.emplace();
 1643|  45.0k|                str.reserve(range.end().position() - range.begin().position());
 1644|  45.0k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  45.0k|                m_view = string_view_type{str};
 1646|  45.0k|                return;
 1647|  45.0k|            }
 1648|       |
 1649|  45.0k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  45.0k|                                                            end_seg.data());
 1651|  45.0k|            m_storage.reset();
 1652|  45.0k|        }
 1653|  45.0k|        else {
 1654|  45.0k|            auto& str = m_storage.emplace();
 1655|  45.0k|            if constexpr (ranges::sized_range<Range>) {
 1656|  45.0k|                str.reserve(range.size());
 1657|  45.0k|            }
 1658|  45.0k|            if constexpr (ranges::common_range<Range>) {
 1659|  45.0k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  45.0k|                          std::back_inserter(str));
 1661|  45.0k|            }
 1662|  45.0k|            else {
 1663|  45.0k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  45.0k|                     ++it) {
 1665|  45.0k|                    str.push_back(*it);
 1666|  45.0k|                }
 1667|  45.0k|            }
 1668|  45.0k|            m_view = string_view_type{str};
 1669|  45.0k|        }
 1670|  45.0k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4099|  75.0k|    {
 4100|  75.0k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 24, False: 74.9k]
  ------------------
 4101|     24|            return std::copysign(value, T{-1.0});
 4102|     24|        }
 4103|  74.9k|        return std::copysign(value, T{1.0});
 4104|  75.0k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|  1.55M|    {
 4100|  1.55M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 187k, False: 1.37M]
  ------------------
 4101|   187k|            return std::copysign(value, T{-1.0});
 4102|   187k|        }
 4103|  1.37M|        return std::copysign(value, T{1.0});
 4104|  1.55M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|  75.0k|    {
 4100|  75.0k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 24, False: 75.0k]
  ------------------
 4101|     24|            return std::copysign(value, T{-1.0});
 4102|     24|        }
 4103|  75.0k|        return std::copysign(value, T{1.0});
 4104|  75.0k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4099|  1.57M|    {
 4100|  1.57M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 193k, False: 1.38M]
  ------------------
 4101|   193k|            return std::copysign(value, T{-1.0});
 4102|   193k|        }
 4103|  1.38M|        return std::copysign(value, T{1.0});
 4104|  1.57M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4099|  75.1k|    {
 4100|  75.1k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 24, False: 75.1k]
  ------------------
 4101|     24|            return std::copysign(value, T{-1.0});
 4102|     24|        }
 4103|  75.1k|        return std::copysign(value, T{1.0});
 4104|  75.1k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   718k|{
 5795|   718k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   718k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.05k, False: 712k]
  |  |  ------------------
  ------------------
 5796|  6.05k|        return unexpected(e);
 5797|  6.05k|    }
 5798|       |
 5799|   712k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 712k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   712k|    return skip_classic_whitespace(range);
 5804|   712k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5870|   222k|    {
 5871|   222k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   222k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   222k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   222k|            auto rd = make_reader<T, char_type>();
 5876|   222k|            return impl(rd, range, value);
 5877|   222k|        }
 5878|   222k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   222k|            auto rd = make_reader<T, char_type>();
 5880|   222k|            if (!is_segment_contiguous(range)) {
 5881|   222k|                return impl(rd, range, value);
 5882|   222k|            }
 5883|   222k|            auto crange = get_as_contiguous(range);
 5884|   222k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   222k|            return ranges::next(range.begin(),
 5886|   222k|                                ranges::distance(crange.begin(), it));
 5887|   222k|        }
 5888|   222k|        else {
 5889|   222k|            SCN_EXPECT(false);
 5890|   222k|            SCN_UNREACHABLE;
 5891|   222k|        }
 5892|   222k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   222k|    {
 5863|   222k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   222k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   222k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   222k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.13k, False: 220k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.13k|    }                                                  \
  |  |  |  | 3667|   222k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   220k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   220k|                        .transform_error(make_eof_scan_error));
 5865|   220k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   222k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   220k|    {
 4152|   220k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   220k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   220k|        float_reader<CharT> rd{};
 4155|   220k|        return read_impl<Range>(
 4156|   220k|            range, rd,
 4157|   220k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   220k|                return r.read_source(SCN_FWD(args)...);
 4159|   220k|            },
 4160|   220k|            value);
 4161|   220k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|  1.37M|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.50M|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   220k|    {
  754|   220k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   220k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   220k|              cvref<T> obj = *get<T>(fn);
  745|   220k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   220k|                  obj(static_cast<decltype(args)>(args)...);
  747|   220k|              }
  748|   220k|              else {
  749|   220k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   220k|              }
  751|   220k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   220k|    {
  684|   220k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   220k|            return static_cast<T*>(s.m_cp);
  686|   220k|        }
  687|   220k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   220k|            return static_cast<T*>(s.m_p);
  689|   220k|        }
  690|   220k|        else {
  691|   220k|            return reinterpret_cast<T*>(s.m_fp);
  692|   220k|        }
  693|   220k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   220k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   220k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   220k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   220k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   220k|        {
  662|   220k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|   245k|    {
 5871|   245k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   245k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   245k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   245k|            auto rd = make_reader<T, char_type>();
 5876|   245k|            return impl(rd, range, value);
 5877|   245k|        }
 5878|   245k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   245k|            auto rd = make_reader<T, char_type>();
 5880|   245k|            if (!is_segment_contiguous(range)) {
 5881|   245k|                return impl(rd, range, value);
 5882|   245k|            }
 5883|   245k|            auto crange = get_as_contiguous(range);
 5884|   245k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   245k|            return ranges::next(range.begin(),
 5886|   245k|                                ranges::distance(crange.begin(), it));
 5887|   245k|        }
 5888|   245k|        else {
 5889|   245k|            SCN_EXPECT(false);
 5890|   245k|            SCN_UNREACHABLE;
 5891|   245k|        }
 5892|   245k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   245k|    {
 5863|   245k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   245k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   245k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   245k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.45k, False: 243k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.45k|    }                                                  \
  |  |  |  | 3667|   245k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   243k|                        .transform_error(make_eof_scan_error));
 5865|   243k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   245k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   243k|    {
 4152|   243k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   243k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   243k|        float_reader<CharT> rd{};
 4155|   243k|        return read_impl<Range>(
 4156|   243k|            range, rd,
 4157|   243k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   243k|                return r.read_source(SCN_FWD(args)...);
 4159|   243k|            },
 4160|   243k|            value);
 4161|   243k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   243k|    {
  754|   243k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   243k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   243k|              cvref<T> obj = *get<T>(fn);
  745|   243k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   243k|                  obj(static_cast<decltype(args)>(args)...);
  747|   243k|              }
  748|   243k|              else {
  749|   243k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   243k|              }
  751|   243k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   243k|    {
  684|   243k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   243k|            return static_cast<T*>(s.m_cp);
  686|   243k|        }
  687|   243k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   243k|            return static_cast<T*>(s.m_p);
  689|   243k|        }
  690|   243k|        else {
  691|   243k|            return reinterpret_cast<T*>(s.m_fp);
  692|   243k|        }
  693|   243k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   243k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   243k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   243k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   243k|        {
  662|   243k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5870|   250k|    {
 5871|   250k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   250k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   250k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   250k|            auto rd = make_reader<T, char_type>();
 5876|   250k|            return impl(rd, range, value);
 5877|   250k|        }
 5878|   250k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   250k|            auto rd = make_reader<T, char_type>();
 5880|   250k|            if (!is_segment_contiguous(range)) {
 5881|   250k|                return impl(rd, range, value);
 5882|   250k|            }
 5883|   250k|            auto crange = get_as_contiguous(range);
 5884|   250k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   250k|            return ranges::next(range.begin(),
 5886|   250k|                                ranges::distance(crange.begin(), it));
 5887|   250k|        }
 5888|   250k|        else {
 5889|   250k|            SCN_EXPECT(false);
 5890|   250k|            SCN_UNREACHABLE;
 5891|   250k|        }
 5892|   250k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   250k|    {
 5863|   250k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   250k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   250k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   250k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.61k, False: 247k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.61k|    }                                                  \
  |  |  |  | 3667|   250k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   247k|                        .transform_error(make_eof_scan_error));
 5865|   247k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   250k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   247k|    {
 4152|   247k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   247k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   247k|        float_reader<CharT> rd{};
 4155|   247k|        return read_impl<Range>(
 4156|   247k|            range, rd,
 4157|   247k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   247k|                return r.read_source(SCN_FWD(args)...);
 4159|   247k|            },
 4160|   247k|            value);
 4161|   247k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   247k|    {
  754|   247k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   247k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   247k|              cvref<T> obj = *get<T>(fn);
  745|   247k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   247k|                  obj(static_cast<decltype(args)>(args)...);
  747|   247k|              }
  748|   247k|              else {
  749|   247k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   247k|              }
  751|   247k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   247k|    {
  684|   247k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   247k|            return static_cast<T*>(s.m_cp);
  686|   247k|        }
  687|   247k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   247k|            return static_cast<T*>(s.m_p);
  689|   247k|        }
  690|   247k|        else {
  691|   247k|            return reinterpret_cast<T*>(s.m_fp);
  692|   247k|        }
  693|   247k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   247k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   247k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   247k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   247k|        {
  662|   247k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   671k|{
 5795|   671k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   671k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.07k, False: 665k]
  |  |  ------------------
  ------------------
 5796|  6.07k|        return unexpected(e);
 5797|  6.07k|    }
 5798|       |
 5799|   665k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 665k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   665k|    return skip_classic_whitespace(range);
 5804|   665k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   207k|    {
 5871|   207k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   207k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   207k|            auto rd = make_reader<T, char_type>();
 5876|   207k|            return impl(rd, range, value);
 5877|   207k|        }
 5878|   207k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   207k|            auto rd = make_reader<T, char_type>();
 5880|   207k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 207k, False: 0]
  ------------------
 5881|   207k|                return impl(rd, range, value);
 5882|   207k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   207k|        else {
 5889|   207k|            SCN_EXPECT(false);
 5890|   207k|            SCN_UNREACHABLE;
 5891|   207k|        }
 5892|   207k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   207k|    {
 5863|   207k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   207k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   207k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   207k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.11k, False: 205k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.11k|    }                                                  \
  |  |  |  | 3667|   207k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   205k|                        .transform_error(make_eof_scan_error));
 5865|   205k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   207k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   205k|    {
 4152|   205k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   205k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   205k|        float_reader<CharT> rd{};
 4155|   205k|        return read_impl<Range>(
 4156|   205k|            range, rd,
 4157|   205k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   205k|                return r.read_source(SCN_FWD(args)...);
 4159|   205k|            },
 4160|   205k|            value);
 4161|   205k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   205k|    {
  754|   205k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   205k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   205k|              cvref<T> obj = *get<T>(fn);
  745|   205k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   205k|                  obj(static_cast<decltype(args)>(args)...);
  747|   205k|              }
  748|   205k|              else {
  749|   205k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   205k|              }
  751|   205k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   205k|    {
  684|   205k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   205k|            return static_cast<T*>(s.m_cp);
  686|   205k|        }
  687|   205k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   205k|            return static_cast<T*>(s.m_p);
  689|   205k|        }
  690|   205k|        else {
  691|   205k|            return reinterpret_cast<T*>(s.m_fp);
  692|   205k|        }
  693|   205k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   205k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   205k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   205k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   205k|        {
  662|   205k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   230k|    {
 5871|   230k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   230k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   230k|            auto rd = make_reader<T, char_type>();
 5876|   230k|            return impl(rd, range, value);
 5877|   230k|        }
 5878|   230k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   230k|            auto rd = make_reader<T, char_type>();
 5880|   230k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 230k, False: 0]
  ------------------
 5881|   230k|                return impl(rd, range, value);
 5882|   230k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   230k|        else {
 5889|   230k|            SCN_EXPECT(false);
 5890|   230k|            SCN_UNREACHABLE;
 5891|   230k|        }
 5892|   230k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   230k|    {
 5863|   230k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   230k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   230k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   230k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.43k, False: 227k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.43k|    }                                                  \
  |  |  |  | 3667|   230k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   227k|                        .transform_error(make_eof_scan_error));
 5865|   227k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   230k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   227k|    {
 4152|   227k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   227k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   227k|        float_reader<CharT> rd{};
 4155|   227k|        return read_impl<Range>(
 4156|   227k|            range, rd,
 4157|   227k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   227k|                return r.read_source(SCN_FWD(args)...);
 4159|   227k|            },
 4160|   227k|            value);
 4161|   227k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   227k|    {
  754|   227k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   227k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   227k|              cvref<T> obj = *get<T>(fn);
  745|   227k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   227k|                  obj(static_cast<decltype(args)>(args)...);
  747|   227k|              }
  748|   227k|              else {
  749|   227k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   227k|              }
  751|   227k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   227k|    {
  684|   227k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   227k|            return static_cast<T*>(s.m_cp);
  686|   227k|        }
  687|   227k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   227k|            return static_cast<T*>(s.m_p);
  689|   227k|        }
  690|   227k|        else {
  691|   227k|            return reinterpret_cast<T*>(s.m_fp);
  692|   227k|        }
  693|   227k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   227k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   227k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   227k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   227k|        {
  662|   227k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   233k|    {
 5871|   233k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   233k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   233k|            auto rd = make_reader<T, char_type>();
 5876|   233k|            return impl(rd, range, value);
 5877|   233k|        }
 5878|   233k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   233k|            auto rd = make_reader<T, char_type>();
 5880|   233k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 233k, False: 0]
  ------------------
 5881|   233k|                return impl(rd, range, value);
 5882|   233k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   233k|        else {
 5889|   233k|            SCN_EXPECT(false);
 5890|   233k|            SCN_UNREACHABLE;
 5891|   233k|        }
 5892|   233k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   233k|    {
 5863|   233k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   233k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   233k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   233k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.58k, False: 230k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.58k|    }                                                  \
  |  |  |  | 3667|   233k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   230k|                        .transform_error(make_eof_scan_error));
 5865|   230k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   233k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   230k|    {
 4152|   230k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   230k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   230k|        float_reader<CharT> rd{};
 4155|   230k|        return read_impl<Range>(
 4156|   230k|            range, rd,
 4157|   230k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   230k|                return r.read_source(SCN_FWD(args)...);
 4159|   230k|            },
 4160|   230k|            value);
 4161|   230k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   230k|    {
  754|   230k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   230k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   230k|              cvref<T> obj = *get<T>(fn);
  745|   230k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   230k|                  obj(static_cast<decltype(args)>(args)...);
  747|   230k|              }
  748|   230k|              else {
  749|   230k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   230k|              }
  751|   230k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   230k|    {
  684|   230k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   230k|            return static_cast<T*>(s.m_cp);
  686|   230k|        }
  687|   230k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   230k|            return static_cast<T*>(s.m_p);
  689|   230k|        }
  690|   230k|        else {
  691|   230k|            return reinterpret_cast<T*>(s.m_fp);
  692|   230k|        }
  693|   230k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   230k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   230k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   230k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   230k|        {
  662|   230k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  1.66M|    {
 2879|  1.66M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  4.89M|    {
 2883|  4.89M|        return m_current;
 2884|  4.89M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  3.23M|    {
 2888|  3.23M|        return m_range.end();
 2889|  3.23M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  1.57M|    {
 2903|  1.57M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  1.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  1.57M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  1.57M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 1.57M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  1.57M|        }
 2909|  1.57M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.57M|    static_cast<    \
  |  |  929|  1.57M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  1.57M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  1.66M|    {
 2893|  1.66M|        return ranges::subrange{begin(), end()};
 2894|  1.66M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  1.66M|    {
 6037|  1.66M|        const bool need_skipped_width =
 6038|  1.66M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.66M]
  |  Branch (6038:33): [True: 0, False: 1.66M]
  ------------------
 6039|  1.66M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.66M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.66M]
  ------------------
 6043|  1.66M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.66M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.66M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.66M, False: 0]
  |  Branch (6047:56): [True: 1.66M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.66M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.66M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.30M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.66M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.66M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.66M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.3k, False: 1.64M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  18.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  18.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  18.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  18.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  18.3k|    }                                                  \
  |  |  |  | 3667|  1.66M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.64M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.30M|                            make_eof_scan_error));
 6058|       |
 6059|  3.30M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.64M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.64M|            return result_type{it, 0};
 6067|  3.30M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  1.66M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  1.55M|    {
 6079|  1.55M|        const bool need_skipped_width =
 6080|  1.55M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.55M]
  |  Branch (6080:33): [True: 0, False: 1.55M]
  ------------------
 6081|  1.55M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.55M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.55M]
  ------------------
 6084|  1.55M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.55M]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  1.55M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 1.55M, False: 0]
  ------------------
 6089|  1.55M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 0, False: 1.55M]
  ------------------
 6090|  1.55M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 0]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  ------------------
 6092|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  1.55M|        return result_type{rng.begin(), 0};
 6114|  1.55M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6177|   527k|    {
 6178|   527k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   527k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|   527k|                          basic_contiguous_scan_context<char_type>>) {
 6182|   527k|            auto rd = make_reader<T, char_type>();
 6183|   527k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   527k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 527k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|   527k|            return impl(rd, range, value);
 6188|   527k|        }
 6189|   527k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|   527k|            auto rd = make_reader<T, char_type>();
 6191|   527k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|   527k|                return unexpected(e);
 6193|   527k|            }
 6194|       |
 6195|   527k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|   527k|                specs.width != 0) {
 6197|   527k|                return impl(rd, range, value);
 6198|   527k|            }
 6199|       |
 6200|   527k|            auto crange = get_as_contiguous(range);
 6201|   527k|            SCN_TRY(it, impl(rd, crange, value));
 6202|   527k|            return ranges::next(range.begin(),
 6203|   527k|                                ranges::distance(crange.begin(), it));
 6204|   527k|        }
 6205|   527k|        else {
 6206|   527k|            SCN_EXPECT(false);
 6207|   527k|            SCN_UNREACHABLE;
 6208|   527k|        }
 6209|   527k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|   527k|    {
 6120|   527k|        const bool need_skipped_width =
 6121|   527k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 527k]
  |  Branch (6121:33): [True: 0, False: 527k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   527k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   527k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   527k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   527k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   527k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.57k, False: 521k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.57k|    }                                                  \
  |  |  |  | 3667|   527k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   521k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   521k|        auto [it, prefix_width] = prefix_result;
 6126|   521k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   521k|        std::ptrdiff_t value_width = 0;
 6130|   521k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 521k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   521k|        else {
 6146|   521k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   521k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   521k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   521k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 24.6k, False: 497k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  24.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  24.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  24.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  24.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  24.6k|    }                                                  \
  |  | 3667|   521k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   521k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   497k|                                             specs, value, loc));
 6148|       |
 6149|   497k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 497k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   497k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   497k|        std::ptrdiff_t postfix_width = 0;
 6158|   497k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 492k, False: 4.64k]
  ------------------
 6159|   492k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   492k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   492k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   492k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 492k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   492k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   492k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   492k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   492k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   492k|                                 value_width));
 6163|   492k|            std::tie(it, postfix_width) = postfix_result;
 6164|   492k|        }
 6165|       |
 6166|   497k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   497k|                                                 value_width, postfix_width);
 6168|   497k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 497k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   497k|        return it;
 6173|   497k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6177|   564k|    {
 6178|   564k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   564k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|   564k|                          basic_contiguous_scan_context<char_type>>) {
 6182|   564k|            auto rd = make_reader<T, char_type>();
 6183|   564k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   564k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 564k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|   564k|            return impl(rd, range, value);
 6188|   564k|        }
 6189|   564k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|   564k|            auto rd = make_reader<T, char_type>();
 6191|   564k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|   564k|                return unexpected(e);
 6193|   564k|            }
 6194|       |
 6195|   564k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|   564k|                specs.width != 0) {
 6197|   564k|                return impl(rd, range, value);
 6198|   564k|            }
 6199|       |
 6200|   564k|            auto crange = get_as_contiguous(range);
 6201|   564k|            SCN_TRY(it, impl(rd, crange, value));
 6202|   564k|            return ranges::next(range.begin(),
 6203|   564k|                                ranges::distance(crange.begin(), it));
 6204|   564k|        }
 6205|   564k|        else {
 6206|   564k|            SCN_EXPECT(false);
 6207|   564k|            SCN_UNREACHABLE;
 6208|   564k|        }
 6209|   564k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|   564k|    {
 6120|   564k|        const bool need_skipped_width =
 6121|   564k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 564k]
  |  Branch (6121:33): [True: 0, False: 564k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   564k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   564k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   564k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   564k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   564k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.20k, False: 558k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.20k|    }                                                  \
  |  |  |  | 3667|   564k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   558k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   558k|        auto [it, prefix_width] = prefix_result;
 6126|   558k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   558k|        std::ptrdiff_t value_width = 0;
 6130|   558k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 558k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   558k|        else {
 6146|   558k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   558k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   558k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   558k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 23.9k, False: 534k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  23.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  23.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  23.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  23.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  23.9k|    }                                                  \
  |  | 3667|   558k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   558k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   534k|                                             specs, value, loc));
 6148|       |
 6149|   534k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 534k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   534k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   534k|        std::ptrdiff_t postfix_width = 0;
 6158|   534k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 529k, False: 5.19k]
  ------------------
 6159|   529k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   529k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   529k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   529k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   529k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 529k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   529k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   529k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   529k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   529k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   529k|                                 value_width));
 6163|   529k|            std::tie(it, postfix_width) = postfix_result;
 6164|   529k|        }
 6165|       |
 6166|   534k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   534k|                                                 value_width, postfix_width);
 6168|   534k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 534k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   534k|        return it;
 6173|   534k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6177|   571k|    {
 6178|   571k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   571k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|   571k|                          basic_contiguous_scan_context<char_type>>) {
 6182|   571k|            auto rd = make_reader<T, char_type>();
 6183|   571k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   571k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 571k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|   571k|            return impl(rd, range, value);
 6188|   571k|        }
 6189|   571k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|   571k|            auto rd = make_reader<T, char_type>();
 6191|   571k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|   571k|                return unexpected(e);
 6193|   571k|            }
 6194|       |
 6195|   571k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|   571k|                specs.width != 0) {
 6197|   571k|                return impl(rd, range, value);
 6198|   571k|            }
 6199|       |
 6200|   571k|            auto crange = get_as_contiguous(range);
 6201|   571k|            SCN_TRY(it, impl(rd, crange, value));
 6202|   571k|            return ranges::next(range.begin(),
 6203|   571k|                                ranges::distance(crange.begin(), it));
 6204|   571k|        }
 6205|   571k|        else {
 6206|   571k|            SCN_EXPECT(false);
 6207|   571k|            SCN_UNREACHABLE;
 6208|   571k|        }
 6209|   571k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|   571k|    {
 6120|   571k|        const bool need_skipped_width =
 6121|   571k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 571k]
  |  Branch (6121:33): [True: 0, False: 571k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   571k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   571k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   571k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   571k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   571k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.55k, False: 564k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.55k|    }                                                  \
  |  |  |  | 3667|   571k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   564k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   564k|        auto [it, prefix_width] = prefix_result;
 6126|   564k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   564k|        std::ptrdiff_t value_width = 0;
 6130|   564k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 564k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   564k|        else {
 6146|   564k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   564k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   564k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   564k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 23.6k, False: 541k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  23.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  23.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  23.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  23.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  23.6k|    }                                                  \
  |  | 3667|   564k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   564k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   541k|                                             specs, value, loc));
 6148|       |
 6149|   541k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 541k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   541k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   541k|        std::ptrdiff_t postfix_width = 0;
 6158|   541k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 535k, False: 5.49k]
  ------------------
 6159|   535k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   535k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   535k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   535k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   535k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 535k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   535k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   535k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   535k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   535k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   535k|                                 value_width));
 6163|   535k|            std::tie(it, postfix_width) = postfix_result;
 6164|   535k|        }
 6165|       |
 6166|   541k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   541k|                                                 value_width, postfix_width);
 6168|   541k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 541k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   541k|        return it;
 6173|   541k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  67.7k|{
 5795|  67.7k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  67.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 67.6k]
  |  |  ------------------
  ------------------
 5796|    120|        return unexpected(e);
 5797|    120|    }
 5798|       |
 5799|  67.6k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 67.6k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  67.6k|    return skip_classic_whitespace(range);
 5804|  67.6k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5870|  22.5k|    {
 5871|  22.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  22.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  22.5k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  22.5k|            auto rd = make_reader<T, char_type>();
 5876|  22.5k|            return impl(rd, range, value);
 5877|  22.5k|        }
 5878|  22.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  22.5k|            auto rd = make_reader<T, char_type>();
 5880|  22.5k|            if (!is_segment_contiguous(range)) {
 5881|  22.5k|                return impl(rd, range, value);
 5882|  22.5k|            }
 5883|  22.5k|            auto crange = get_as_contiguous(range);
 5884|  22.5k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  22.5k|            return ranges::next(range.begin(),
 5886|  22.5k|                                ranges::distance(crange.begin(), it));
 5887|  22.5k|        }
 5888|  22.5k|        else {
 5889|  22.5k|            SCN_EXPECT(false);
 5890|  22.5k|            SCN_UNREACHABLE;
 5891|  22.5k|        }
 5892|  22.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  22.5k|    {
 5863|  22.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  22.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  22.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  22.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  22.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 165, False: 22.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    165|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    165|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    165|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    165|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    165|    }                                                  \
  |  |  |  | 3667|  22.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  22.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  22.3k|                        .transform_error(make_eof_scan_error));
 5865|  22.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  22.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  22.3k|    {
 4152|  22.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  22.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  22.3k|        float_reader<CharT> rd{};
 4155|  22.3k|        return read_impl<Range>(
 4156|  22.3k|            range, rd,
 4157|  22.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  22.3k|                return r.read_source(SCN_FWD(args)...);
 4159|  22.3k|            },
 4160|  22.3k|            value);
 4161|  22.3k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|   134k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  22.3k|    {
  754|  22.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  22.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.3k|              cvref<T> obj = *get<T>(fn);
  745|  22.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.3k|              }
  748|  22.3k|              else {
  749|  22.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.3k|              }
  751|  22.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  22.3k|    {
  684|  22.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.3k|            return static_cast<T*>(s.m_cp);
  686|  22.3k|        }
  687|  22.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.3k|            return static_cast<T*>(s.m_p);
  689|  22.3k|        }
  690|  22.3k|        else {
  691|  22.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.3k|        }
  693|  22.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  22.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  22.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  22.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  22.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  22.3k|        {
  662|  22.3k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|  22.5k|    {
 5871|  22.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  22.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  22.5k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  22.5k|            auto rd = make_reader<T, char_type>();
 5876|  22.5k|            return impl(rd, range, value);
 5877|  22.5k|        }
 5878|  22.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  22.5k|            auto rd = make_reader<T, char_type>();
 5880|  22.5k|            if (!is_segment_contiguous(range)) {
 5881|  22.5k|                return impl(rd, range, value);
 5882|  22.5k|            }
 5883|  22.5k|            auto crange = get_as_contiguous(range);
 5884|  22.5k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  22.5k|            return ranges::next(range.begin(),
 5886|  22.5k|                                ranges::distance(crange.begin(), it));
 5887|  22.5k|        }
 5888|  22.5k|        else {
 5889|  22.5k|            SCN_EXPECT(false);
 5890|  22.5k|            SCN_UNREACHABLE;
 5891|  22.5k|        }
 5892|  22.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  22.5k|    {
 5863|  22.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  22.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  22.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  22.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  22.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 180, False: 22.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    180|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    180|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    180|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    180|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    180|    }                                                  \
  |  |  |  | 3667|  22.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  22.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  22.4k|                        .transform_error(make_eof_scan_error));
 5865|  22.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  22.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  22.4k|    {
 4152|  22.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  22.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  22.4k|        float_reader<CharT> rd{};
 4155|  22.4k|        return read_impl<Range>(
 4156|  22.4k|            range, rd,
 4157|  22.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  22.4k|                return r.read_source(SCN_FWD(args)...);
 4159|  22.4k|            },
 4160|  22.4k|            value);
 4161|  22.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  22.4k|    {
  754|  22.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  22.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.4k|              cvref<T> obj = *get<T>(fn);
  745|  22.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.4k|              }
  748|  22.4k|              else {
  749|  22.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.4k|              }
  751|  22.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  22.4k|    {
  684|  22.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.4k|            return static_cast<T*>(s.m_cp);
  686|  22.4k|        }
  687|  22.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.4k|            return static_cast<T*>(s.m_p);
  689|  22.4k|        }
  690|  22.4k|        else {
  691|  22.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.4k|        }
  693|  22.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  22.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  22.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  22.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  22.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  22.4k|        {
  662|  22.4k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5870|  22.6k|    {
 5871|  22.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  22.6k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  22.6k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  22.6k|            auto rd = make_reader<T, char_type>();
 5876|  22.6k|            return impl(rd, range, value);
 5877|  22.6k|        }
 5878|  22.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  22.6k|            auto rd = make_reader<T, char_type>();
 5880|  22.6k|            if (!is_segment_contiguous(range)) {
 5881|  22.6k|                return impl(rd, range, value);
 5882|  22.6k|            }
 5883|  22.6k|            auto crange = get_as_contiguous(range);
 5884|  22.6k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  22.6k|            return ranges::next(range.begin(),
 5886|  22.6k|                                ranges::distance(crange.begin(), it));
 5887|  22.6k|        }
 5888|  22.6k|        else {
 5889|  22.6k|            SCN_EXPECT(false);
 5890|  22.6k|            SCN_UNREACHABLE;
 5891|  22.6k|        }
 5892|  22.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  22.6k|    {
 5863|  22.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  22.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  22.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  22.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  22.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 183, False: 22.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    183|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    183|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    183|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    183|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    183|    }                                                  \
  |  |  |  | 3667|  22.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  22.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  22.4k|                        .transform_error(make_eof_scan_error));
 5865|  22.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  22.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  22.4k|    {
 4152|  22.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  22.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  22.4k|        float_reader<CharT> rd{};
 4155|  22.4k|        return read_impl<Range>(
 4156|  22.4k|            range, rd,
 4157|  22.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  22.4k|                return r.read_source(SCN_FWD(args)...);
 4159|  22.4k|            },
 4160|  22.4k|            value);
 4161|  22.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  22.4k|    {
  754|  22.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  22.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.4k|              cvref<T> obj = *get<T>(fn);
  745|  22.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.4k|              }
  748|  22.4k|              else {
  749|  22.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.4k|              }
  751|  22.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  22.4k|    {
  684|  22.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.4k|            return static_cast<T*>(s.m_cp);
  686|  22.4k|        }
  687|  22.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.4k|            return static_cast<T*>(s.m_p);
  689|  22.4k|        }
  690|  22.4k|        else {
  691|  22.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.4k|        }
  693|  22.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  22.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  22.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  22.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  22.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  22.4k|        {
  662|  22.4k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   217k|    {
 2879|   217k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   471k|    {
 2883|   471k|        return m_current;
 2884|   471k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   253k|    {
 2888|   253k|        return m_range.end();
 2889|   253k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  36.2k|    {
 2903|  36.2k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  36.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  36.2k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  36.2k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 36.2k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  36.2k|        }
 2909|  36.2k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  36.2k|    static_cast<    \
  |  |  929|  36.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  36.2k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   217k|    {
 2893|   217k|        return ranges::subrange{begin(), end()};
 2894|   217k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   217k|    {
 6037|   217k|        const bool need_skipped_width =
 6038|   217k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 217k]
  |  Branch (6038:33): [True: 0, False: 217k]
  ------------------
 6039|   217k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   217k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 217k]
  ------------------
 6043|   217k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 217k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   217k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 217k, False: 0]
  |  Branch (6047:56): [True: 217k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   217k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 217k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   433k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   217k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   217k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   217k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.59k, False: 215k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.59k|    }                                                  \
  |  |  |  | 3667|   217k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   433k|                            make_eof_scan_error));
 6058|       |
 6059|   433k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 215k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   215k|            return result_type{it, 0};
 6067|   433k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   217k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  35.9k|    {
 6079|  35.9k|        const bool need_skipped_width =
 6080|  35.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 35.9k]
  |  Branch (6080:33): [True: 0, False: 35.9k]
  ------------------
 6081|  35.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  35.9k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 35.9k]
  ------------------
 6084|  35.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 35.9k]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  35.9k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 35.9k, False: 0]
  ------------------
 6089|  35.9k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 0, False: 35.9k]
  ------------------
 6090|  35.9k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 0]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  ------------------
 6092|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  35.9k|        return result_type{rng.begin(), 0};
 6114|  35.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6177|  72.3k|    {
 6178|  72.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  72.3k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  72.3k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  72.3k|            auto rd = make_reader<T, char_type>();
 6183|  72.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  72.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 72.3k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|  72.3k|            return impl(rd, range, value);
 6188|  72.3k|        }
 6189|  72.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  72.3k|            auto rd = make_reader<T, char_type>();
 6191|  72.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  72.3k|                return unexpected(e);
 6193|  72.3k|            }
 6194|       |
 6195|  72.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  72.3k|                specs.width != 0) {
 6197|  72.3k|                return impl(rd, range, value);
 6198|  72.3k|            }
 6199|       |
 6200|  72.3k|            auto crange = get_as_contiguous(range);
 6201|  72.3k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  72.3k|            return ranges::next(range.begin(),
 6203|  72.3k|                                ranges::distance(crange.begin(), it));
 6204|  72.3k|        }
 6205|  72.3k|        else {
 6206|  72.3k|            SCN_EXPECT(false);
 6207|  72.3k|            SCN_UNREACHABLE;
 6208|  72.3k|        }
 6209|  72.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|  72.3k|    {
 6120|  72.3k|        const bool need_skipped_width =
 6121|  72.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 72.3k]
  |  Branch (6121:33): [True: 0, False: 72.3k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  72.3k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  72.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  72.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  72.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  72.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 512, False: 71.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    512|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    512|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    512|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    512|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    512|    }                                                  \
  |  |  |  | 3667|  72.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  71.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  71.8k|        auto [it, prefix_width] = prefix_result;
 6126|  71.8k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  71.8k|        std::ptrdiff_t value_width = 0;
 6130|  71.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 71.8k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  71.8k|        else {
 6146|  71.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  71.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  71.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  71.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 59.8k, False: 12.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  59.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  59.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  59.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  59.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  59.8k|    }                                                  \
  |  | 3667|  71.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  71.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  12.0k|                                             specs, value, loc));
 6148|       |
 6149|  12.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 12.0k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  12.0k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  12.0k|        std::ptrdiff_t postfix_width = 0;
 6158|  12.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 11.9k, False: 104]
  ------------------
 6159|  11.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  11.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  11.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  11.9k|                                 value_width));
 6163|  11.9k|            std::tie(it, postfix_width) = postfix_result;
 6164|  11.9k|        }
 6165|       |
 6166|  12.0k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  12.0k|                                                 value_width, postfix_width);
 6168|  12.0k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 12.0k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  12.0k|        return it;
 6173|  12.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6177|  72.4k|    {
 6178|  72.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  72.4k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  72.4k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  72.4k|            auto rd = make_reader<T, char_type>();
 6183|  72.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  72.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 72.4k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|  72.4k|            return impl(rd, range, value);
 6188|  72.4k|        }
 6189|  72.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  72.4k|            auto rd = make_reader<T, char_type>();
 6191|  72.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  72.4k|                return unexpected(e);
 6193|  72.4k|            }
 6194|       |
 6195|  72.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  72.4k|                specs.width != 0) {
 6197|  72.4k|                return impl(rd, range, value);
 6198|  72.4k|            }
 6199|       |
 6200|  72.4k|            auto crange = get_as_contiguous(range);
 6201|  72.4k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  72.4k|            return ranges::next(range.begin(),
 6203|  72.4k|                                ranges::distance(crange.begin(), it));
 6204|  72.4k|        }
 6205|  72.4k|        else {
 6206|  72.4k|            SCN_EXPECT(false);
 6207|  72.4k|            SCN_UNREACHABLE;
 6208|  72.4k|        }
 6209|  72.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|  72.4k|    {
 6120|  72.4k|        const bool need_skipped_width =
 6121|  72.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 72.4k]
  |  Branch (6121:33): [True: 0, False: 72.4k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  72.4k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  72.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  72.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  72.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  72.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 538, False: 71.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    538|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    538|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    538|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    538|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    538|    }                                                  \
  |  |  |  | 3667|  72.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  71.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  71.9k|        auto [it, prefix_width] = prefix_result;
 6126|  71.9k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  71.9k|        std::ptrdiff_t value_width = 0;
 6130|  71.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 71.9k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  71.9k|        else {
 6146|  71.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  71.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  71.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  71.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 59.8k, False: 12.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  59.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  59.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  59.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  59.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  59.8k|    }                                                  \
  |  | 3667|  71.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  71.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  12.0k|                                             specs, value, loc));
 6148|       |
 6149|  12.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 12.0k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  12.0k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  12.0k|        std::ptrdiff_t postfix_width = 0;
 6158|  12.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 11.9k, False: 114]
  ------------------
 6159|  11.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  11.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  11.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  11.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  11.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  11.9k|                                 value_width));
 6163|  11.9k|            std::tie(it, postfix_width) = postfix_result;
 6164|  11.9k|        }
 6165|       |
 6166|  12.0k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  12.0k|                                                 value_width, postfix_width);
 6168|  12.0k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 12.0k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  12.0k|        return it;
 6173|  12.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6177|  72.5k|    {
 6178|  72.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  72.5k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  72.5k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  72.5k|            auto rd = make_reader<T, char_type>();
 6183|  72.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  72.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 72.5k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|  72.5k|            return impl(rd, range, value);
 6188|  72.5k|        }
 6189|  72.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  72.5k|            auto rd = make_reader<T, char_type>();
 6191|  72.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  72.5k|                return unexpected(e);
 6193|  72.5k|            }
 6194|       |
 6195|  72.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  72.5k|                specs.width != 0) {
 6197|  72.5k|                return impl(rd, range, value);
 6198|  72.5k|            }
 6199|       |
 6200|  72.5k|            auto crange = get_as_contiguous(range);
 6201|  72.5k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  72.5k|            return ranges::next(range.begin(),
 6203|  72.5k|                                ranges::distance(crange.begin(), it));
 6204|  72.5k|        }
 6205|  72.5k|        else {
 6206|  72.5k|            SCN_EXPECT(false);
 6207|  72.5k|            SCN_UNREACHABLE;
 6208|  72.5k|        }
 6209|  72.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|  72.5k|    {
 6120|  72.5k|        const bool need_skipped_width =
 6121|  72.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 72.5k]
  |  Branch (6121:33): [True: 0, False: 72.5k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  72.5k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  72.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  72.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  72.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  72.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 544, False: 72.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    544|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    544|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    544|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    544|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    544|    }                                                  \
  |  |  |  | 3667|  72.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  72.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  72.0k|        auto [it, prefix_width] = prefix_result;
 6126|  72.0k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  72.0k|        std::ptrdiff_t value_width = 0;
 6130|  72.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 72.0k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  72.0k|        else {
 6146|  72.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  72.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  72.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  72.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 59.8k, False: 12.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  59.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  59.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  59.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  59.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  59.8k|    }                                                  \
  |  | 3667|  72.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  72.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  12.1k|                                             specs, value, loc));
 6148|       |
 6149|  12.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 12.1k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  12.1k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  12.1k|        std::ptrdiff_t postfix_width = 0;
 6158|  12.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 12.0k, False: 114]
  ------------------
 6159|  12.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  12.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  12.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  12.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  12.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  12.0k|                                 value_width));
 6163|  12.0k|            std::tie(it, postfix_width) = postfix_result;
 6164|  12.0k|        }
 6165|       |
 6166|  12.1k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  12.1k|                                                 value_width, postfix_width);
 6168|  12.1k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 12.1k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  12.1k|        return it;
 6173|  12.1k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|  67.6k|{
 5795|  67.6k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  67.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 67.5k]
  |  |  ------------------
  ------------------
 5796|    120|        return unexpected(e);
 5797|    120|    }
 5798|       |
 5799|  67.5k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 67.5k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  67.5k|    return skip_classic_whitespace(range);
 5804|  67.5k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  22.5k|    {
 5871|  22.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  22.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  22.5k|            auto rd = make_reader<T, char_type>();
 5876|  22.5k|            return impl(rd, range, value);
 5877|  22.5k|        }
 5878|  22.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  22.5k|            auto rd = make_reader<T, char_type>();
 5880|  22.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 22.5k, False: 0]
  ------------------
 5881|  22.5k|                return impl(rd, range, value);
 5882|  22.5k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  22.5k|        else {
 5889|  22.5k|            SCN_EXPECT(false);
 5890|  22.5k|            SCN_UNREACHABLE;
 5891|  22.5k|        }
 5892|  22.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  22.5k|    {
 5863|  22.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  22.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  22.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  22.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  22.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 165, False: 22.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    165|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    165|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    165|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    165|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    165|    }                                                  \
  |  |  |  | 3667|  22.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  22.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  22.3k|                        .transform_error(make_eof_scan_error));
 5865|  22.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  22.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  22.3k|    {
 4152|  22.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  22.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  22.3k|        float_reader<CharT> rd{};
 4155|  22.3k|        return read_impl<Range>(
 4156|  22.3k|            range, rd,
 4157|  22.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  22.3k|                return r.read_source(SCN_FWD(args)...);
 4159|  22.3k|            },
 4160|  22.3k|            value);
 4161|  22.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  22.3k|    {
  754|  22.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  22.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.3k|              cvref<T> obj = *get<T>(fn);
  745|  22.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.3k|              }
  748|  22.3k|              else {
  749|  22.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.3k|              }
  751|  22.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  22.3k|    {
  684|  22.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.3k|            return static_cast<T*>(s.m_cp);
  686|  22.3k|        }
  687|  22.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.3k|            return static_cast<T*>(s.m_p);
  689|  22.3k|        }
  690|  22.3k|        else {
  691|  22.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.3k|        }
  693|  22.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  22.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  22.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  22.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  22.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  22.3k|        {
  662|  22.3k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  22.5k|    {
 5871|  22.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  22.5k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  22.5k|            auto rd = make_reader<T, char_type>();
 5876|  22.5k|            return impl(rd, range, value);
 5877|  22.5k|        }
 5878|  22.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  22.5k|            auto rd = make_reader<T, char_type>();
 5880|  22.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 22.5k, False: 0]
  ------------------
 5881|  22.5k|                return impl(rd, range, value);
 5882|  22.5k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  22.5k|        else {
 5889|  22.5k|            SCN_EXPECT(false);
 5890|  22.5k|            SCN_UNREACHABLE;
 5891|  22.5k|        }
 5892|  22.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  22.5k|    {
 5863|  22.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  22.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  22.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  22.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  22.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 180, False: 22.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    180|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    180|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    180|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    180|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    180|    }                                                  \
  |  |  |  | 3667|  22.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  22.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  22.3k|                        .transform_error(make_eof_scan_error));
 5865|  22.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  22.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  22.3k|    {
 4152|  22.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  22.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  22.3k|        float_reader<CharT> rd{};
 4155|  22.3k|        return read_impl<Range>(
 4156|  22.3k|            range, rd,
 4157|  22.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  22.3k|                return r.read_source(SCN_FWD(args)...);
 4159|  22.3k|            },
 4160|  22.3k|            value);
 4161|  22.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  22.3k|    {
  754|  22.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  22.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.3k|              cvref<T> obj = *get<T>(fn);
  745|  22.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.3k|              }
  748|  22.3k|              else {
  749|  22.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.3k|              }
  751|  22.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  22.3k|    {
  684|  22.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.3k|            return static_cast<T*>(s.m_cp);
  686|  22.3k|        }
  687|  22.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.3k|            return static_cast<T*>(s.m_p);
  689|  22.3k|        }
  690|  22.3k|        else {
  691|  22.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.3k|        }
  693|  22.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  22.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  22.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  22.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  22.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  22.3k|        {
  662|  22.3k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  22.6k|    {
 5871|  22.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  22.6k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  22.6k|            auto rd = make_reader<T, char_type>();
 5876|  22.6k|            return impl(rd, range, value);
 5877|  22.6k|        }
 5878|  22.6k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  22.6k|            auto rd = make_reader<T, char_type>();
 5880|  22.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 22.6k, False: 0]
  ------------------
 5881|  22.6k|                return impl(rd, range, value);
 5882|  22.6k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  22.6k|        else {
 5889|  22.6k|            SCN_EXPECT(false);
 5890|  22.6k|            SCN_UNREACHABLE;
 5891|  22.6k|        }
 5892|  22.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  22.6k|    {
 5863|  22.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  22.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  22.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  22.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  22.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 183, False: 22.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    183|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    183|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    183|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    183|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    183|    }                                                  \
  |  |  |  | 3667|  22.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  22.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  22.4k|                        .transform_error(make_eof_scan_error));
 5865|  22.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  22.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  22.4k|    {
 4152|  22.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  22.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  22.4k|        float_reader<CharT> rd{};
 4155|  22.4k|        return read_impl<Range>(
 4156|  22.4k|            range, rd,
 4157|  22.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  22.4k|                return r.read_source(SCN_FWD(args)...);
 4159|  22.4k|            },
 4160|  22.4k|            value);
 4161|  22.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  22.4k|    {
  754|  22.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  22.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.4k|              cvref<T> obj = *get<T>(fn);
  745|  22.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.4k|              }
  748|  22.4k|              else {
  749|  22.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.4k|              }
  751|  22.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  22.4k|    {
  684|  22.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.4k|            return static_cast<T*>(s.m_cp);
  686|  22.4k|        }
  687|  22.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.4k|            return static_cast<T*>(s.m_p);
  689|  22.4k|        }
  690|  22.4k|        else {
  691|  22.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.4k|        }
  693|  22.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  22.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  22.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  22.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  22.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  22.4k|        {
  662|  22.4k|        }

LLVMFuzzerTestOneInput:
   54|  3.01k|{
   55|  3.01k|    scn::fuzz::run(data, size);
   56|  3.01k|    return 0;
   57|  3.01k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  3.01k|{
   33|  3.01k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 3.01k]
  |  Branch (33:35): [True: 0, False: 3.01k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  3.01k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  3.01k|    const auto& f =
   40|  3.01k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  3.01k|    do_basic_run(sv, f);
   42|       |
   43|  3.01k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  3.01k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  3.01k|    do_basic_run(wsv_reinterpret, wf);
   46|  3.01k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 3.01k, False: 0]
  ------------------
   47|  3.01k|        do_basic_run(wsv_transcode, wf);
   48|  3.01k|    }
   49|  3.01k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  3.01k|{
   25|  3.01k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.01k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.01k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.01k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  3.01k|{
   25|  3.01k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.01k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.01k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.01k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  6.03k|{
   25|  6.03k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.03k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.03k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.03k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  6.03k|{
   25|  6.03k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.03k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.03k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.03k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  3.01k|{
   52|  3.01k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  3.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  3.01k|    string_buffer.resize(size);
   56|  3.01k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  3.01k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  3.01k|    const auto wsv_reinterpret_size =
   61|  3.01k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 67, False: 2.95k]
  ------------------
   62|  3.01k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  3.01k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  3.01k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  3.01k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  3.01k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  3.01k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  3.01k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.01k|{
  122|  3.01k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.01k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.01k|    buf.resize(sizeof...(Args));
  125|  3.01k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.01k|    return buf;
  127|  3.01k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  3.01k|{
  108|  3.01k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  3.01k|        return format_string_view_buffer;
  110|  3.01k|    }
  111|  3.01k|    else {
  112|  3.01k|        return wformat_string_view_buffer;
  113|  3.01k|    }
  114|  3.01k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  3.01k|{
  185|  3.01k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  3.01k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  3.01k|                                   format_strings);
  188|  3.01k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.01k|{
  133|       |    // Regular scan
  134|  18.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 18.1k, False: 3.01k]
  ------------------
  135|  18.1k|        auto it = scn::ranges::begin(source);
  136|   337k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   337k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   337k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   337k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   337k|            auto result = scn::scan<T>(
  139|   337k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   337k|                scn::runtime_format(f));
  141|   337k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 18.1k, False: 319k]
  ------------------
  142|  18.1k|                break;
  143|  18.1k|            }
  144|   319k|            it = result->begin();
  145|   319k|        }
  146|  18.1k|    }
  147|       |
  148|       |    // scan localized
  149|  18.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 18.1k, False: 3.01k]
  ------------------
  150|  18.1k|        auto it = scn::ranges::begin(source);
  151|   337k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   337k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   337k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   337k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   337k|            auto result = scn::scan<T>(
  154|   337k|                global_locale,
  155|   337k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   337k|                scn::runtime_format(f));
  157|   337k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 18.1k, False: 319k]
  ------------------
  158|  18.1k|                break;
  159|  18.1k|            }
  160|   319k|            it = result->begin();
  161|   319k|        }
  162|  18.1k|    }
  163|       |
  164|       |    // scan_value
  165|  3.01k|    {
  166|  3.01k|        auto it = scn::ranges::begin(source);
  167|  74.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  74.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  74.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  74.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  74.0k|            auto result = scn::scan_value<T>(
  170|  74.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  74.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.01k, False: 71.0k]
  ------------------
  172|  3.01k|                break;
  173|  3.01k|            }
  174|  71.0k|            it = result->begin();
  175|  71.0k|        }
  176|  3.01k|    }
  177|  3.01k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.01k|{
  133|       |    // Regular scan
  134|  18.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 18.1k, False: 3.01k]
  ------------------
  135|  18.1k|        auto it = scn::ranges::begin(source);
  136|   364k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   364k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   364k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   364k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   364k|            auto result = scn::scan<T>(
  139|   364k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   364k|                scn::runtime_format(f));
  141|   364k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 18.1k, False: 346k]
  ------------------
  142|  18.1k|                break;
  143|  18.1k|            }
  144|   346k|            it = result->begin();
  145|   346k|        }
  146|  18.1k|    }
  147|       |
  148|       |    // scan localized
  149|  18.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 18.1k, False: 3.01k]
  ------------------
  150|  18.1k|        auto it = scn::ranges::begin(source);
  151|   364k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   364k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   364k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   364k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   364k|            auto result = scn::scan<T>(
  154|   364k|                global_locale,
  155|   364k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   364k|                scn::runtime_format(f));
  157|   364k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 18.1k, False: 346k]
  ------------------
  158|  18.1k|                break;
  159|  18.1k|            }
  160|   346k|            it = result->begin();
  161|   346k|        }
  162|  18.1k|    }
  163|       |
  164|       |    // scan_value
  165|  3.01k|    {
  166|  3.01k|        auto it = scn::ranges::begin(source);
  167|  81.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  81.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  81.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  81.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  81.9k|            auto result = scn::scan_value<T>(
  170|  81.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  81.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.01k, False: 78.9k]
  ------------------
  172|  3.01k|                break;
  173|  3.01k|            }
  174|  78.9k|            it = result->begin();
  175|  78.9k|        }
  176|  3.01k|    }
  177|  3.01k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.01k|{
  133|       |    // Regular scan
  134|  18.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 18.1k, False: 3.01k]
  ------------------
  135|  18.1k|        auto it = scn::ranges::begin(source);
  136|   369k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   369k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   369k|            auto result = scn::scan<T>(
  139|   369k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   369k|                scn::runtime_format(f));
  141|   369k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 18.1k, False: 350k]
  ------------------
  142|  18.1k|                break;
  143|  18.1k|            }
  144|   350k|            it = result->begin();
  145|   350k|        }
  146|  18.1k|    }
  147|       |
  148|       |    // scan localized
  149|  18.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 18.1k, False: 3.01k]
  ------------------
  150|  18.1k|        auto it = scn::ranges::begin(source);
  151|   369k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   369k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   369k|            auto result = scn::scan<T>(
  154|   369k|                global_locale,
  155|   369k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   369k|                scn::runtime_format(f));
  157|   369k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 18.1k, False: 350k]
  ------------------
  158|  18.1k|                break;
  159|  18.1k|            }
  160|   350k|            it = result->begin();
  161|   350k|        }
  162|  18.1k|    }
  163|       |
  164|       |    // scan_value
  165|  3.01k|    {
  166|  3.01k|        auto it = scn::ranges::begin(source);
  167|  83.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  83.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  83.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  83.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  83.4k|            auto result = scn::scan_value<T>(
  170|  83.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  83.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.01k, False: 80.4k]
  ------------------
  172|  3.01k|                break;
  173|  3.01k|            }
  174|  80.4k|            it = result->begin();
  175|  80.4k|        }
  176|  3.01k|    }
  177|  3.01k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.01k|{
  133|       |    // Regular scan
  134|  18.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 18.1k, False: 3.01k]
  ------------------
  135|  18.1k|        auto it = scn::ranges::begin(source);
  136|   339k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   339k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   339k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   339k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   339k|            auto result = scn::scan<T>(
  139|   339k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   339k|                scn::runtime_format(f));
  141|   339k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 18.1k, False: 321k]
  ------------------
  142|  18.1k|                break;
  143|  18.1k|            }
  144|   321k|            it = result->begin();
  145|   321k|        }
  146|  18.1k|    }
  147|       |
  148|       |    // scan localized
  149|  18.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 18.1k, False: 3.01k]
  ------------------
  150|  18.1k|        auto it = scn::ranges::begin(source);
  151|   339k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   339k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   339k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   339k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   339k|            auto result = scn::scan<T>(
  154|   339k|                global_locale,
  155|   339k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   339k|                scn::runtime_format(f));
  157|   339k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 18.1k, False: 321k]
  ------------------
  158|  18.1k|                break;
  159|  18.1k|            }
  160|   321k|            it = result->begin();
  161|   321k|        }
  162|  18.1k|    }
  163|       |
  164|       |    // scan_value
  165|  3.01k|    {
  166|  3.01k|        auto it = scn::ranges::begin(source);
  167|  69.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  69.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  69.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  69.2k|            auto result = scn::scan_value<T>(
  170|  69.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  69.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.01k, False: 66.2k]
  ------------------
  172|  3.01k|                break;
  173|  3.01k|            }
  174|  66.2k|            it = result->begin();
  175|  66.2k|        }
  176|  3.01k|    }
  177|  3.01k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.01k|{
  133|       |    // Regular scan
  134|  18.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 18.1k, False: 3.01k]
  ------------------
  135|  18.1k|        auto it = scn::ranges::begin(source);
  136|   366k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   366k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   366k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   366k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   366k|            auto result = scn::scan<T>(
  139|   366k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   366k|                scn::runtime_format(f));
  141|   366k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 18.1k, False: 348k]
  ------------------
  142|  18.1k|                break;
  143|  18.1k|            }
  144|   348k|            it = result->begin();
  145|   348k|        }
  146|  18.1k|    }
  147|       |
  148|       |    // scan localized
  149|  18.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 18.1k, False: 3.01k]
  ------------------
  150|  18.1k|        auto it = scn::ranges::begin(source);
  151|   366k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   366k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   366k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   366k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   366k|            auto result = scn::scan<T>(
  154|   366k|                global_locale,
  155|   366k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   366k|                scn::runtime_format(f));
  157|   366k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 18.1k, False: 348k]
  ------------------
  158|  18.1k|                break;
  159|  18.1k|            }
  160|   348k|            it = result->begin();
  161|   348k|        }
  162|  18.1k|    }
  163|       |
  164|       |    // scan_value
  165|  3.01k|    {
  166|  3.01k|        auto it = scn::ranges::begin(source);
  167|  76.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  76.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  76.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  76.7k|            auto result = scn::scan_value<T>(
  170|  76.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  76.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.01k, False: 73.7k]
  ------------------
  172|  3.01k|                break;
  173|  3.01k|            }
  174|  73.7k|            it = result->begin();
  175|  73.7k|        }
  176|  3.01k|    }
  177|  3.01k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.01k|{
  133|       |    // Regular scan
  134|  18.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 18.1k, False: 3.01k]
  ------------------
  135|  18.1k|        auto it = scn::ranges::begin(source);
  136|   370k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   370k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   370k|            auto result = scn::scan<T>(
  139|   370k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   370k|                scn::runtime_format(f));
  141|   370k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 18.1k, False: 352k]
  ------------------
  142|  18.1k|                break;
  143|  18.1k|            }
  144|   352k|            it = result->begin();
  145|   352k|        }
  146|  18.1k|    }
  147|       |
  148|       |    // scan localized
  149|  18.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 18.1k, False: 3.01k]
  ------------------
  150|  18.1k|        auto it = scn::ranges::begin(source);
  151|   370k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   370k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   370k|            auto result = scn::scan<T>(
  154|   370k|                global_locale,
  155|   370k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   370k|                scn::runtime_format(f));
  157|   370k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 18.1k, False: 352k]
  ------------------
  158|  18.1k|                break;
  159|  18.1k|            }
  160|   352k|            it = result->begin();
  161|   352k|        }
  162|  18.1k|    }
  163|       |
  164|       |    // scan_value
  165|  3.01k|    {
  166|  3.01k|        auto it = scn::ranges::begin(source);
  167|  77.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  77.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  77.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  77.7k|            auto result = scn::scan_value<T>(
  170|  77.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  77.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.01k, False: 74.7k]
  ------------------
  172|  3.01k|                break;
  173|  3.01k|            }
  174|  74.7k|            it = result->begin();
  175|  74.7k|        }
  176|  3.01k|    }
  177|  3.01k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  3.01k|{
   90|  3.01k|    using char_type = ranges::range_value_t<Source>;
   91|  3.01k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  3.01k|    deque.clear();
   93|  3.01k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  3.01k|              std::back_inserter(deque));
   95|  3.01k|    return deque;
   96|  3.01k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  3.01k|{
   79|  3.01k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  3.01k|        return noncontiguous_buffer;
   81|  3.01k|    }
   82|  3.01k|    else {
   83|  3.01k|        return wnoncontiguous_buffer;
   84|  3.01k|    }
   85|  3.01k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.01k|{
  122|  3.01k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.01k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.01k|    buf.resize(sizeof...(Args));
  125|  3.01k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.01k|    return buf;
  127|  3.01k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  3.01k|{
  108|  3.01k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  3.01k|        return format_string_view_buffer;
  110|  3.01k|    }
  111|  3.01k|    else {
  112|  3.01k|        return wformat_string_view_buffer;
  113|  3.01k|    }
  114|  3.01k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  6.03k|{
  185|  6.03k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  6.03k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  6.03k|                                   format_strings);
  188|  6.03k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.03k|{
  133|       |    // Regular scan
  134|  36.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 36.2k, False: 6.03k]
  ------------------
  135|  36.2k|        auto it = scn::ranges::begin(source);
  136|  43.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  43.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  43.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  43.6k|            auto result = scn::scan<T>(
  139|  43.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  43.6k|                scn::runtime_format(f));
  141|  43.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 36.2k, False: 7.47k]
  ------------------
  142|  36.2k|                break;
  143|  36.2k|            }
  144|  7.47k|            it = result->begin();
  145|  7.47k|        }
  146|  36.2k|    }
  147|       |
  148|       |    // scan localized
  149|  36.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 36.2k, False: 6.03k]
  ------------------
  150|  36.2k|        auto it = scn::ranges::begin(source);
  151|  43.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  43.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  43.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  43.6k|            auto result = scn::scan<T>(
  154|  43.6k|                global_locale,
  155|  43.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  43.6k|                scn::runtime_format(f));
  157|  43.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 36.2k, False: 7.47k]
  ------------------
  158|  36.2k|                break;
  159|  36.2k|            }
  160|  7.47k|            it = result->begin();
  161|  7.47k|        }
  162|  36.2k|    }
  163|       |
  164|       |    // scan_value
  165|  6.03k|    {
  166|  6.03k|        auto it = scn::ranges::begin(source);
  167|  7.51k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  7.51k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  7.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  7.51k|            auto result = scn::scan_value<T>(
  170|  7.51k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  7.51k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.03k, False: 1.47k]
  ------------------
  172|  6.03k|                break;
  173|  6.03k|            }
  174|  1.47k|            it = result->begin();
  175|  1.47k|        }
  176|  6.03k|    }
  177|  6.03k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.03k|{
  133|       |    // Regular scan
  134|  36.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 36.2k, False: 6.03k]
  ------------------
  135|  36.2k|        auto it = scn::ranges::begin(source);
  136|  43.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  43.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  43.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  43.7k|            auto result = scn::scan<T>(
  139|  43.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  43.7k|                scn::runtime_format(f));
  141|  43.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 36.2k, False: 7.53k]
  ------------------
  142|  36.2k|                break;
  143|  36.2k|            }
  144|  7.53k|            it = result->begin();
  145|  7.53k|        }
  146|  36.2k|    }
  147|       |
  148|       |    // scan localized
  149|  36.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 36.2k, False: 6.03k]
  ------------------
  150|  36.2k|        auto it = scn::ranges::begin(source);
  151|  43.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  43.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  43.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  43.7k|            auto result = scn::scan<T>(
  154|  43.7k|                global_locale,
  155|  43.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  43.7k|                scn::runtime_format(f));
  157|  43.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 36.2k, False: 7.53k]
  ------------------
  158|  36.2k|                break;
  159|  36.2k|            }
  160|  7.53k|            it = result->begin();
  161|  7.53k|        }
  162|  36.2k|    }
  163|       |
  164|       |    // scan_value
  165|  6.03k|    {
  166|  6.03k|        auto it = scn::ranges::begin(source);
  167|  7.52k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  7.52k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  7.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  7.52k|            auto result = scn::scan_value<T>(
  170|  7.52k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  7.52k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.03k, False: 1.49k]
  ------------------
  172|  6.03k|                break;
  173|  6.03k|            }
  174|  1.49k|            it = result->begin();
  175|  1.49k|        }
  176|  6.03k|    }
  177|  6.03k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.03k|{
  133|       |    // Regular scan
  134|  36.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 36.2k, False: 6.03k]
  ------------------
  135|  36.2k|        auto it = scn::ranges::begin(source);
  136|  43.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  43.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  43.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  43.8k|            auto result = scn::scan<T>(
  139|  43.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  43.8k|                scn::runtime_format(f));
  141|  43.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 36.2k, False: 7.60k]
  ------------------
  142|  36.2k|                break;
  143|  36.2k|            }
  144|  7.60k|            it = result->begin();
  145|  7.60k|        }
  146|  36.2k|    }
  147|       |
  148|       |    // scan localized
  149|  36.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 36.2k, False: 6.03k]
  ------------------
  150|  36.2k|        auto it = scn::ranges::begin(source);
  151|  43.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  43.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  43.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  43.8k|            auto result = scn::scan<T>(
  154|  43.8k|                global_locale,
  155|  43.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  43.8k|                scn::runtime_format(f));
  157|  43.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 36.2k, False: 7.60k]
  ------------------
  158|  36.2k|                break;
  159|  36.2k|            }
  160|  7.60k|            it = result->begin();
  161|  7.60k|        }
  162|  36.2k|    }
  163|       |
  164|       |    // scan_value
  165|  6.03k|    {
  166|  6.03k|        auto it = scn::ranges::begin(source);
  167|  7.54k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  7.54k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  7.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  7.54k|            auto result = scn::scan_value<T>(
  170|  7.54k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  7.54k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.03k, False: 1.50k]
  ------------------
  172|  6.03k|                break;
  173|  6.03k|            }
  174|  1.50k|            it = result->begin();
  175|  1.50k|        }
  176|  6.03k|    }
  177|  6.03k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.03k|{
  133|       |    // Regular scan
  134|  36.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 36.2k, False: 6.03k]
  ------------------
  135|  36.2k|        auto it = scn::ranges::begin(source);
  136|  43.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  43.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  43.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  43.6k|            auto result = scn::scan<T>(
  139|  43.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  43.6k|                scn::runtime_format(f));
  141|  43.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 36.2k, False: 7.46k]
  ------------------
  142|  36.2k|                break;
  143|  36.2k|            }
  144|  7.46k|            it = result->begin();
  145|  7.46k|        }
  146|  36.2k|    }
  147|       |
  148|       |    // scan localized
  149|  36.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 36.2k, False: 6.03k]
  ------------------
  150|  36.2k|        auto it = scn::ranges::begin(source);
  151|  43.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  43.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  43.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  43.6k|            auto result = scn::scan<T>(
  154|  43.6k|                global_locale,
  155|  43.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  43.6k|                scn::runtime_format(f));
  157|  43.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 36.2k, False: 7.46k]
  ------------------
  158|  36.2k|                break;
  159|  36.2k|            }
  160|  7.46k|            it = result->begin();
  161|  7.46k|        }
  162|  36.2k|    }
  163|       |
  164|       |    // scan_value
  165|  6.03k|    {
  166|  6.03k|        auto it = scn::ranges::begin(source);
  167|  7.50k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  7.50k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  7.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  7.50k|            auto result = scn::scan_value<T>(
  170|  7.50k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  7.50k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.03k, False: 1.46k]
  ------------------
  172|  6.03k|                break;
  173|  6.03k|            }
  174|  1.46k|            it = result->begin();
  175|  1.46k|        }
  176|  6.03k|    }
  177|  6.03k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.03k|{
  133|       |    // Regular scan
  134|  36.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 36.2k, False: 6.03k]
  ------------------
  135|  36.2k|        auto it = scn::ranges::begin(source);
  136|  43.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  43.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  43.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  43.7k|            auto result = scn::scan<T>(
  139|  43.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  43.7k|                scn::runtime_format(f));
  141|  43.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 36.2k, False: 7.51k]
  ------------------
  142|  36.2k|                break;
  143|  36.2k|            }
  144|  7.51k|            it = result->begin();
  145|  7.51k|        }
  146|  36.2k|    }
  147|       |
  148|       |    // scan localized
  149|  36.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 36.2k, False: 6.03k]
  ------------------
  150|  36.2k|        auto it = scn::ranges::begin(source);
  151|  43.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  43.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  43.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  43.7k|            auto result = scn::scan<T>(
  154|  43.7k|                global_locale,
  155|  43.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  43.7k|                scn::runtime_format(f));
  157|  43.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 36.2k, False: 7.51k]
  ------------------
  158|  36.2k|                break;
  159|  36.2k|            }
  160|  7.51k|            it = result->begin();
  161|  7.51k|        }
  162|  36.2k|    }
  163|       |
  164|       |    // scan_value
  165|  6.03k|    {
  166|  6.03k|        auto it = scn::ranges::begin(source);
  167|  7.52k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  7.52k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  7.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  7.52k|            auto result = scn::scan_value<T>(
  170|  7.52k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  7.52k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.03k, False: 1.48k]
  ------------------
  172|  6.03k|                break;
  173|  6.03k|            }
  174|  1.48k|            it = result->begin();
  175|  1.48k|        }
  176|  6.03k|    }
  177|  6.03k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.03k|{
  133|       |    // Regular scan
  134|  36.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 36.2k, False: 6.03k]
  ------------------
  135|  36.2k|        auto it = scn::ranges::begin(source);
  136|  43.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  43.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  43.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  43.8k|            auto result = scn::scan<T>(
  139|  43.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  43.8k|                scn::runtime_format(f));
  141|  43.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 36.2k, False: 7.58k]
  ------------------
  142|  36.2k|                break;
  143|  36.2k|            }
  144|  7.58k|            it = result->begin();
  145|  7.58k|        }
  146|  36.2k|    }
  147|       |
  148|       |    // scan localized
  149|  36.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 36.2k, False: 6.03k]
  ------------------
  150|  36.2k|        auto it = scn::ranges::begin(source);
  151|  43.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  43.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  43.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  43.8k|            auto result = scn::scan<T>(
  154|  43.8k|                global_locale,
  155|  43.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  43.8k|                scn::runtime_format(f));
  157|  43.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 36.2k, False: 7.58k]
  ------------------
  158|  36.2k|                break;
  159|  36.2k|            }
  160|  7.58k|            it = result->begin();
  161|  7.58k|        }
  162|  36.2k|    }
  163|       |
  164|       |    // scan_value
  165|  6.03k|    {
  166|  6.03k|        auto it = scn::ranges::begin(source);
  167|  7.53k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  7.53k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  7.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  7.53k|            auto result = scn::scan_value<T>(
  170|  7.53k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  7.53k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.03k, False: 1.50k]
  ------------------
  172|  6.03k|                break;
  173|  6.03k|            }
  174|  1.50k|            it = result->begin();
  175|  1.50k|        }
  176|  6.03k|    }
  177|  6.03k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  6.03k|{
   90|  6.03k|    using char_type = ranges::range_value_t<Source>;
   91|  6.03k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  6.03k|    deque.clear();
   93|  6.03k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  6.03k|              std::back_inserter(deque));
   95|  6.03k|    return deque;
   96|  6.03k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  6.03k|{
   79|  6.03k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  6.03k|        return noncontiguous_buffer;
   81|  6.03k|    }
   82|  6.03k|    else {
   83|  6.03k|        return wnoncontiguous_buffer;
   84|  6.03k|    }
   85|  6.03k|}

