_ZN10fast_float10is_integerIcEEbT_:
   34|  5.05M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   35|  5.05M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (35:12): [True: 132k, False: 4.92M]
  |  Branch (35:27): [True: 385k, False: 4.53M]
  ------------------
   36|  5.05M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  224|   159k|                           uint64_t &i) {
  225|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  226|   612k|  while ((std::distance(p, pend) >= 8) &&
  ------------------
  |  Branch (226:10): [True: 501k, False: 110k]
  ------------------
  227|   612k|         is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (227:10): [True: 452k, False: 48.9k]
  ------------------
  228|   452k|    i = i * 100000000 +
  229|   452k|        parse_eight_digits_unrolled(read8_to_u64(
  230|   452k|            p)); // in rare cases, this will overflow, but that's ok
  231|   452k|    p += 8;
  232|   452k|  }
  233|   159k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  142|   501k|is_made_of_eight_digits_fast(uint64_t val) noexcept {
  143|   501k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  144|   501k|            0x8080808080808080));
  145|   501k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   48|  1.15M|read8_to_u64(UC const *chars) {
   49|  1.15M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (49:7): [Folded - Ignored]
  |  Branch (49:35): [Folded - Ignored]
  ------------------
   50|      0|    uint64_t val = 0;
   51|      0|    for (int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (51:21): [True: 0, False: 0]
  ------------------
   52|      0|      val |= uint64_t(uint8_t(*chars)) << (i * 8);
   53|      0|      ++chars;
   54|      0|    }
   55|      0|    return val;
   56|      0|  }
   57|  1.15M|  uint64_t val;
   58|  1.15M|  ::memcpy(&val, chars, sizeof(uint64_t));
   59|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   60|       |  // Need to read as-if the number was in little-endian order.
   61|       |  val = byteswap(val);
   62|       |#endif
   63|  1.15M|  return val;
   64|  1.15M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  120|   651k|parse_eight_digits_unrolled(uint64_t val) {
  121|   651k|  uint64_t const mask = 0x000000FF000000FF;
  122|   651k|  uint64_t const mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  123|   651k|  uint64_t const mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  124|   651k|  val -= 0x3030303030303030;
  125|   651k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  126|   651k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  127|   651k|  return uint32_t(val);
  128|   651k|}
_ZN10fast_float19parse_number_stringILb0EcEENS_22parsed_number_string_tIT0_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  285|   852k|                    parse_options_t<UC> options) noexcept {
  286|   852k|  chars_format const fmt = detail::adjust_for_feature_macros(options.format);
  287|   852k|  UC const decimal_point = options.decimal_point;
  288|       |
  289|   852k|  parsed_number_string_t<UC> answer;
  290|   852k|  answer.valid = false;
  291|   852k|  answer.too_many_digits = false;
  292|       |  // assume p < pend, so dereference without checks;
  293|   852k|  answer.negative = (*p == UC('-'));
  294|       |  // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  295|   852k|  if ((*p == UC('-')) || (uint64_t(fmt & chars_format::allow_leading_plus) &&
  ------------------
  |  Branch (295:7): [True: 0, False: 852k]
  |  Branch (295:27): [True: 0, False: 852k]
  ------------------
  296|   852k|                          !basic_json_fmt && *p == UC('+'))) {
  ------------------
  |  Branch (296:27): [Folded - Ignored]
  |  Branch (296:46): [True: 0, False: 0]
  ------------------
  297|      0|    ++p;
  298|      0|    if (p == pend) {
  ------------------
  |  Branch (298:9): [True: 0, False: 0]
  ------------------
  299|      0|      return report_parse_error<UC>(
  300|      0|          p, parse_error::missing_integer_or_dot_after_sign);
  301|      0|    }
  302|      0|    FASTFLOAT_IF_CONSTEXPR17(basic_json_fmt) {
  ------------------
  |  |   31|      0|#define FASTFLOAT_IF_CONSTEXPR17(x) if constexpr (x)
  ------------------
  303|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  304|      0|        return report_parse_error<UC>(p,
  305|      0|                                      parse_error::missing_integer_after_sign);
  306|      0|      }
  307|      0|    }
  308|      0|    else {
  309|      0|      if (!is_integer(*p) &&
  ------------------
  |  Branch (309:11): [True: 0, False: 0]
  ------------------
  310|      0|          (*p !=
  ------------------
  |  Branch (310:11): [True: 0, False: 0]
  ------------------
  311|      0|           decimal_point)) { // a sign must be followed by an integer or the dot
  312|      0|        return report_parse_error<UC>(
  313|      0|            p, parse_error::missing_integer_or_dot_after_sign);
  314|      0|      }
  315|      0|    }
  316|      0|  }
  317|   852k|  UC const *const start_digits = p;
  318|       |
  319|   852k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  320|       |
  321|  4.51M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (321:10): [True: 4.09M, False: 425k]
  |  Branch (321:25): [True: 3.66M, False: 427k]
  ------------------
  322|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  323|       |    // multiplication
  324|  3.66M|    i = 10 * i +
  325|  3.66M|        uint64_t(*p -
  326|  3.66M|                 UC('0')); // might overflow, we will handle the overflow later
  327|  3.66M|    ++p;
  328|  3.66M|  }
  329|   852k|  UC const *const end_of_integer_part = p;
  330|   852k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  331|   852k|  answer.integer = span<UC const>(start_digits, size_t(digit_count));
  332|   852k|  FASTFLOAT_IF_CONSTEXPR17(basic_json_fmt) {
  ------------------
  |  |   31|   852k|#define FASTFLOAT_IF_CONSTEXPR17(x) if constexpr (x)
  ------------------
  333|       |    // at least 1 digit in integer part, without leading zeros
  334|       |    if (digit_count == 0) {
  335|       |      return report_parse_error<UC>(p, parse_error::no_digits_in_integer_part);
  336|       |    }
  337|       |    if ((start_digits[0] == UC('0') && digit_count > 1)) {
  338|       |      return report_parse_error<UC>(start_digits,
  339|       |                                    parse_error::leading_zeros_in_integer_part);
  340|       |    }
  341|       |  }
  342|       |
  343|   852k|  int64_t exponent = 0;
  344|   852k|  bool const has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (344:34): [True: 427k, False: 425k]
  |  Branch (344:49): [True: 159k, False: 267k]
  ------------------
  345|   852k|  if (has_decimal_point) {
  ------------------
  |  Branch (345:7): [True: 159k, False: 692k]
  ------------------
  346|   159k|    ++p;
  347|   159k|    UC const *before = p;
  348|       |    // can occur at most twice without overflowing, but let it occur more, since
  349|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  350|   159k|    loop_parse_if_eight_digits(p, pend, i);
  351|       |
  352|   672k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (352:12): [True: 573k, False: 99.0k]
  |  Branch (352:27): [True: 512k, False: 60.6k]
  ------------------
  353|   512k|      uint8_t digit = uint8_t(*p - UC('0'));
  354|   512k|      ++p;
  355|   512k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  356|   512k|    }
  357|   159k|    exponent = before - p;
  358|   159k|    answer.fraction = span<UC const>(before, size_t(p - before));
  359|   159k|    digit_count -= exponent;
  360|   159k|  }
  361|   852k|  FASTFLOAT_IF_CONSTEXPR17(basic_json_fmt) {
  ------------------
  |  |   31|   852k|#define FASTFLOAT_IF_CONSTEXPR17(x) if constexpr (x)
  ------------------
  362|       |    // at least 1 digit in fractional part
  363|       |    if (has_decimal_point && exponent == 0) {
  364|       |      return report_parse_error<UC>(p,
  365|       |                                    parse_error::no_digits_in_fractional_part);
  366|       |    }
  367|       |  }
  368|   852k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (368:12): [True: 0, False: 852k]
  ------------------
  369|      0|    return report_parse_error<UC>(p, parse_error::no_digits_in_mantissa);
  370|      0|  }
  371|   852k|  int64_t exp_number = 0; // explicit exponential part
  372|   852k|  if ((uint64_t(fmt & chars_format::scientific) && (p != pend) &&
  ------------------
  |  Branch (372:8): [True: 732k, False: 119k]
  |  Branch (372:52): [True: 328k, False: 404k]
  ------------------
  373|   852k|       ((UC('e') == *p) || (UC('E') == *p))) ||
  ------------------
  |  Branch (373:9): [True: 73.9k, False: 254k]
  |  Branch (373:28): [True: 41.9k, False: 212k]
  ------------------
  374|   852k|      (uint64_t(fmt & detail::basic_fortran_fmt) && (p != pend) &&
  ------------------
  |  Branch (374:8): [True: 0, False: 736k]
  |  Branch (374:53): [True: 0, False: 0]
  ------------------
  375|   736k|       ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (375:9): [True: 0, False: 0]
  |  Branch (375:28): [True: 0, False: 0]
  |  Branch (375:47): [True: 0, False: 0]
  ------------------
  376|   115k|        (UC('D') == *p)))) {
  ------------------
  |  Branch (376:9): [True: 0, False: 0]
  ------------------
  377|   115k|    UC const *location_of_e = p;
  378|   115k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (378:9): [True: 73.9k, False: 41.9k]
  |  Branch (378:28): [True: 41.9k, False: 0]
  |  Branch (378:47): [True: 0, False: 0]
  ------------------
  379|   115k|        (UC('D') == *p)) {
  ------------------
  |  Branch (379:9): [True: 0, False: 0]
  ------------------
  380|   115k|      ++p;
  381|   115k|    }
  382|   115k|    bool neg_exp = false;
  383|   115k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (383:9): [True: 115k, False: 115]
  |  Branch (383:24): [True: 6.63k, False: 109k]
  ------------------
  384|  6.63k|      neg_exp = true;
  385|  6.63k|      ++p;
  386|   109k|    } else if ((p != pend) &&
  ------------------
  |  Branch (386:16): [True: 109k, False: 115]
  ------------------
  387|   109k|               (UC('+') ==
  ------------------
  |  Branch (387:16): [True: 26.7k, False: 82.3k]
  ------------------
  388|   109k|                *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  389|  26.7k|      ++p;
  390|  26.7k|    }
  391|   115k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (391:9): [True: 175, False: 115k]
  |  Branch (391:24): [True: 485, False: 115k]
  ------------------
  392|    660|      if (!uint64_t(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (392:11): [True: 0, False: 660]
  ------------------
  393|       |        // The exponential part is invalid for scientific notation, so it must
  394|       |        // be a trailing token for fixed notation. However, fixed notation is
  395|       |        // disabled, so report a scientific notation error.
  396|      0|        return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  397|      0|      }
  398|       |      // Otherwise, we will be ignoring the 'e'.
  399|    660|      p = location_of_e;
  400|   115k|    } else {
  401|   362k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (401:14): [True: 277k, False: 85.2k]
  |  Branch (401:29): [True: 247k, False: 29.9k]
  ------------------
  402|   247k|        uint8_t digit = uint8_t(*p - UC('0'));
  403|   247k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (403:13): [True: 229k, False: 18.6k]
  ------------------
  404|   229k|          exp_number = 10 * exp_number + digit;
  405|   229k|        }
  406|   247k|        ++p;
  407|   247k|      }
  408|   115k|      if (neg_exp) {
  ------------------
  |  Branch (408:11): [True: 6.59k, False: 108k]
  ------------------
  409|  6.59k|        exp_number = -exp_number;
  410|  6.59k|      }
  411|   115k|      exponent += exp_number;
  412|   115k|    }
  413|   736k|  } else {
  414|       |    // If it scientific and not fixed, we have to bail out.
  415|   736k|    if (uint64_t(fmt & chars_format::scientific) &&
  ------------------
  |  Branch (415:9): [True: 617k, False: 119k]
  ------------------
  416|   736k|        !uint64_t(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (416:9): [True: 0, False: 617k]
  ------------------
  417|      0|      return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  418|      0|    }
  419|   736k|  }
  420|   852k|  answer.lastmatch = p;
  421|   852k|  answer.valid = true;
  422|       |
  423|       |  // If we frequently had to deal with long strings of digits,
  424|       |  // we could extend our code by using a 128-bit integer instead
  425|       |  // of a 64-bit integer. However, this is uncommon.
  426|       |  //
  427|       |  // We can deal with up to 19 digits.
  428|   852k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (428:7): [True: 145k, False: 707k]
  ------------------
  429|       |    // It is possible that the integer had an overflow.
  430|       |    // We have to handle the case where we have 0.0000somenumber.
  431|       |    // We need to be mindful of the case where we only have zeroes...
  432|       |    // E.g., 0.000000000...000.
  433|   145k|    UC const *start = start_digits;
  434|   640k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (434:12): [True: 638k, False: 1.68k]
  |  Branch (434:32): [True: 486k, False: 151k]
  |  Branch (434:53): [True: 7.91k, False: 143k]
  ------------------
  435|   494k|      if (*start == UC('0')) {
  ------------------
  |  Branch (435:11): [True: 486k, False: 7.91k]
  ------------------
  436|   486k|        digit_count--;
  437|   486k|      }
  438|   494k|      start++;
  439|   494k|    }
  440|       |
  441|   145k|    if (digit_count > 19) {
  ------------------
  |  Branch (441:9): [True: 140k, False: 5.28k]
  ------------------
  442|   140k|      answer.too_many_digits = true;
  443|       |      // Let us start again, this time, avoiding overflows.
  444|       |      // We don't need to check if is_integer, since we use the
  445|       |      // pre-tokenized spans from above.
  446|   140k|      i = 0;
  447|   140k|      p = answer.integer.ptr;
  448|   140k|      UC const *int_end = p + answer.integer.len();
  449|   140k|      uint64_t const minimal_nineteen_digit_integer{1000000000000000000};
  450|  1.38M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (450:14): [True: 1.34M, False: 35.7k]
  |  Branch (450:54): [True: 1.24M, False: 104k]
  ------------------
  451|  1.24M|        i = i * 10 + uint64_t(*p - UC('0'));
  452|  1.24M|        ++p;
  453|  1.24M|      }
  454|   140k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (454:11): [True: 35.7k, False: 104k]
  ------------------
  455|  35.7k|        exponent = end_of_integer_part - p + exp_number;
  456|   104k|      } else { // We have a value with a fractional component.
  457|   104k|        p = answer.fraction.ptr;
  458|   104k|        UC const *frac_end = p + answer.fraction.len();
  459|  1.88M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (459:16): [True: 1.77M, False: 104k]
  |  Branch (459:56): [True: 1.77M, False: 0]
  ------------------
  460|  1.77M|          i = i * 10 + uint64_t(*p - UC('0'));
  461|  1.77M|          ++p;
  462|  1.77M|        }
  463|   104k|        exponent = answer.fraction.ptr - p + exp_number;
  464|   104k|      }
  465|       |      // We have now corrected both exponent and i, to a truncated value
  466|   140k|    }
  467|   145k|  }
  468|   852k|  answer.exponent = exponent;
  469|   852k|  answer.mantissa = i;
  470|   852k|  return answer;
  471|   852k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  133|   198k|parse_eight_digits_unrolled(UC const *chars) noexcept {
  134|   198k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (134:7): [Folded - Ignored]
  |  Branch (134:35): [Folded - Ignored]
  ------------------
  135|   198k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  136|   198k|  }
  137|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  138|   198k|}
_ZN10fast_float10is_integerIDiEEbT_:
   34|   795k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   35|   795k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (35:12): [True: 150k, False: 644k]
  |  Branch (35:27): [True: 8.42k, False: 636k]
  ------------------
   36|   795k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiTnNSt3__19enable_ifIXntsr3std7is_sameIT_cEE5valueEiE4typeELi0EEEvRPKS3_S7_Rm:
  211|  7.05k|loop_parse_if_eight_digits(UC const *&p, UC const *const pend, uint64_t &i) {
  212|  7.05k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (212:7): [Folded - Ignored]
  ------------------
  213|  7.05k|    return;
  214|  7.05k|  }
  215|      0|  while ((std::distance(p, pend) >= 8) &&
  ------------------
  |  Branch (215:10): [True: 0, False: 0]
  ------------------
  216|      0|         simd_parse_if_eight_digits_unrolled(
  ------------------
  |  Branch (216:10): [True: 0, False: 0]
  ------------------
  217|      0|             p, i)) { // in rare cases, this will overflow, but that's ok
  218|      0|    p += 8;
  219|      0|  }
  220|      0|}
_ZN10fast_float19parse_number_stringILb0EDiEENS_22parsed_number_string_tIT0_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  285|   447k|                    parse_options_t<UC> options) noexcept {
  286|   447k|  chars_format const fmt = detail::adjust_for_feature_macros(options.format);
  287|   447k|  UC const decimal_point = options.decimal_point;
  288|       |
  289|   447k|  parsed_number_string_t<UC> answer;
  290|   447k|  answer.valid = false;
  291|   447k|  answer.too_many_digits = false;
  292|       |  // assume p < pend, so dereference without checks;
  293|   447k|  answer.negative = (*p == UC('-'));
  294|       |  // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  295|   447k|  if ((*p == UC('-')) || (uint64_t(fmt & chars_format::allow_leading_plus) &&
  ------------------
  |  Branch (295:7): [True: 0, False: 447k]
  |  Branch (295:27): [True: 0, False: 447k]
  ------------------
  296|   447k|                          !basic_json_fmt && *p == UC('+'))) {
  ------------------
  |  Branch (296:27): [Folded - Ignored]
  |  Branch (296:46): [True: 0, False: 0]
  ------------------
  297|      0|    ++p;
  298|      0|    if (p == pend) {
  ------------------
  |  Branch (298:9): [True: 0, False: 0]
  ------------------
  299|      0|      return report_parse_error<UC>(
  300|      0|          p, parse_error::missing_integer_or_dot_after_sign);
  301|      0|    }
  302|      0|    FASTFLOAT_IF_CONSTEXPR17(basic_json_fmt) {
  ------------------
  |  |   31|      0|#define FASTFLOAT_IF_CONSTEXPR17(x) if constexpr (x)
  ------------------
  303|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  304|      0|        return report_parse_error<UC>(p,
  305|      0|                                      parse_error::missing_integer_after_sign);
  306|      0|      }
  307|      0|    }
  308|      0|    else {
  309|      0|      if (!is_integer(*p) &&
  ------------------
  |  Branch (309:11): [True: 0, False: 0]
  ------------------
  310|      0|          (*p !=
  ------------------
  |  Branch (310:11): [True: 0, False: 0]
  ------------------
  311|      0|           decimal_point)) { // a sign must be followed by an integer or the dot
  312|      0|        return report_parse_error<UC>(
  313|      0|            p, parse_error::missing_integer_or_dot_after_sign);
  314|      0|      }
  315|      0|    }
  316|      0|  }
  317|   447k|  UC const *const start_digits = p;
  318|       |
  319|   447k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  320|       |
  321|   972k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (321:10): [True: 676k, False: 295k]
  |  Branch (321:25): [True: 525k, False: 151k]
  ------------------
  322|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  323|       |    // multiplication
  324|   525k|    i = 10 * i +
  325|   525k|        uint64_t(*p -
  326|   525k|                 UC('0')); // might overflow, we will handle the overflow later
  327|   525k|    ++p;
  328|   525k|  }
  329|   447k|  UC const *const end_of_integer_part = p;
  330|   447k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  331|   447k|  answer.integer = span<UC const>(start_digits, size_t(digit_count));
  332|   447k|  FASTFLOAT_IF_CONSTEXPR17(basic_json_fmt) {
  ------------------
  |  |   31|   447k|#define FASTFLOAT_IF_CONSTEXPR17(x) if constexpr (x)
  ------------------
  333|       |    // at least 1 digit in integer part, without leading zeros
  334|       |    if (digit_count == 0) {
  335|       |      return report_parse_error<UC>(p, parse_error::no_digits_in_integer_part);
  336|       |    }
  337|       |    if ((start_digits[0] == UC('0') && digit_count > 1)) {
  338|       |      return report_parse_error<UC>(start_digits,
  339|       |                                    parse_error::leading_zeros_in_integer_part);
  340|       |    }
  341|       |  }
  342|       |
  343|   447k|  int64_t exponent = 0;
  344|   447k|  bool const has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (344:34): [True: 151k, False: 295k]
  |  Branch (344:49): [True: 7.05k, False: 144k]
  ------------------
  345|   447k|  if (has_decimal_point) {
  ------------------
  |  Branch (345:7): [True: 7.05k, False: 440k]
  ------------------
  346|  7.05k|    ++p;
  347|  7.05k|    UC const *before = p;
  348|       |    // can occur at most twice without overflowing, but let it occur more, since
  349|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  350|  7.05k|    loop_parse_if_eight_digits(p, pend, i);
  351|       |
  352|  56.6k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (352:12): [True: 51.7k, False: 4.94k]
  |  Branch (352:27): [True: 49.6k, False: 2.10k]
  ------------------
  353|  49.6k|      uint8_t digit = uint8_t(*p - UC('0'));
  354|  49.6k|      ++p;
  355|  49.6k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  356|  49.6k|    }
  357|  7.05k|    exponent = before - p;
  358|  7.05k|    answer.fraction = span<UC const>(before, size_t(p - before));
  359|  7.05k|    digit_count -= exponent;
  360|  7.05k|  }
  361|   447k|  FASTFLOAT_IF_CONSTEXPR17(basic_json_fmt) {
  ------------------
  |  |   31|   447k|#define FASTFLOAT_IF_CONSTEXPR17(x) if constexpr (x)
  ------------------
  362|       |    // at least 1 digit in fractional part
  363|       |    if (has_decimal_point && exponent == 0) {
  364|       |      return report_parse_error<UC>(p,
  365|       |                                    parse_error::no_digits_in_fractional_part);
  366|       |    }
  367|       |  }
  368|   447k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (368:12): [True: 0, False: 447k]
  ------------------
  369|      0|    return report_parse_error<UC>(p, parse_error::no_digits_in_mantissa);
  370|      0|  }
  371|   447k|  int64_t exp_number = 0; // explicit exponential part
  372|   447k|  if ((uint64_t(fmt & chars_format::scientific) && (p != pend) &&
  ------------------
  |  Branch (372:8): [True: 367k, False: 79.2k]
  |  Branch (372:52): [True: 146k, False: 221k]
  ------------------
  373|   447k|       ((UC('e') == *p) || (UC('E') == *p))) ||
  ------------------
  |  Branch (373:9): [True: 215, False: 146k]
  |  Branch (373:28): [True: 18.1k, False: 127k]
  ------------------
  374|   447k|      (uint64_t(fmt & detail::basic_fortran_fmt) && (p != pend) &&
  ------------------
  |  Branch (374:8): [True: 0, False: 428k]
  |  Branch (374:53): [True: 0, False: 0]
  ------------------
  375|   428k|       ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (375:9): [True: 0, False: 0]
  |  Branch (375:28): [True: 0, False: 0]
  |  Branch (375:47): [True: 0, False: 0]
  ------------------
  376|  18.3k|        (UC('D') == *p)))) {
  ------------------
  |  Branch (376:9): [True: 0, False: 0]
  ------------------
  377|  18.3k|    UC const *location_of_e = p;
  378|  18.3k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (378:9): [True: 215, False: 18.1k]
  |  Branch (378:28): [True: 18.1k, False: 0]
  |  Branch (378:47): [True: 0, False: 0]
  ------------------
  379|  18.3k|        (UC('D') == *p)) {
  ------------------
  |  Branch (379:9): [True: 0, False: 0]
  ------------------
  380|  18.3k|      ++p;
  381|  18.3k|    }
  382|  18.3k|    bool neg_exp = false;
  383|  18.3k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (383:9): [True: 18.3k, False: 20]
  |  Branch (383:24): [True: 3.43k, False: 14.8k]
  ------------------
  384|  3.43k|      neg_exp = true;
  385|  3.43k|      ++p;
  386|  14.9k|    } else if ((p != pend) &&
  ------------------
  |  Branch (386:16): [True: 14.8k, False: 20]
  ------------------
  387|  14.9k|               (UC('+') ==
  ------------------
  |  Branch (387:16): [True: 353, False: 14.5k]
  ------------------
  388|  14.8k|                *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  389|    353|      ++p;
  390|    353|    }
  391|  18.3k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (391:9): [True: 50, False: 18.2k]
  |  Branch (391:24): [True: 420, False: 17.8k]
  ------------------
  392|    470|      if (!uint64_t(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (392:11): [True: 0, False: 470]
  ------------------
  393|       |        // The exponential part is invalid for scientific notation, so it must
  394|       |        // be a trailing token for fixed notation. However, fixed notation is
  395|       |        // disabled, so report a scientific notation error.
  396|      0|        return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  397|      0|      }
  398|       |      // Otherwise, we will be ignoring the 'e'.
  399|    470|      p = location_of_e;
  400|  17.8k|    } else {
  401|  60.9k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (401:14): [True: 48.3k, False: 12.5k]
  |  Branch (401:29): [True: 43.0k, False: 5.33k]
  ------------------
  402|  43.0k|        uint8_t digit = uint8_t(*p - UC('0'));
  403|  43.0k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (403:13): [True: 40.4k, False: 2.58k]
  ------------------
  404|  40.4k|          exp_number = 10 * exp_number + digit;
  405|  40.4k|        }
  406|  43.0k|        ++p;
  407|  43.0k|      }
  408|  17.8k|      if (neg_exp) {
  ------------------
  |  Branch (408:11): [True: 3.41k, False: 14.4k]
  ------------------
  409|  3.41k|        exp_number = -exp_number;
  410|  3.41k|      }
  411|  17.8k|      exponent += exp_number;
  412|  17.8k|    }
  413|   428k|  } else {
  414|       |    // If it scientific and not fixed, we have to bail out.
  415|   428k|    if (uint64_t(fmt & chars_format::scientific) &&
  ------------------
  |  Branch (415:9): [True: 349k, False: 79.2k]
  ------------------
  416|   428k|        !uint64_t(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (416:9): [True: 0, False: 349k]
  ------------------
  417|      0|      return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  418|      0|    }
  419|   428k|  }
  420|   447k|  answer.lastmatch = p;
  421|   447k|  answer.valid = true;
  422|       |
  423|       |  // If we frequently had to deal with long strings of digits,
  424|       |  // we could extend our code by using a 128-bit integer instead
  425|       |  // of a 64-bit integer. However, this is uncommon.
  426|       |  //
  427|       |  // We can deal with up to 19 digits.
  428|   447k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (428:7): [True: 2.49k, False: 444k]
  ------------------
  429|       |    // It is possible that the integer had an overflow.
  430|       |    // We have to handle the case where we have 0.0000somenumber.
  431|       |    // We need to be mindful of the case where we only have zeroes...
  432|       |    // E.g., 0.000000000...000.
  433|  2.49k|    UC const *start = start_digits;
  434|  4.08k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (434:12): [True: 4.08k, False: 0]
  |  Branch (434:32): [True: 1.06k, False: 3.02k]
  |  Branch (434:53): [True: 532, False: 2.49k]
  ------------------
  435|  1.59k|      if (*start == UC('0')) {
  ------------------
  |  Branch (435:11): [True: 1.06k, False: 532]
  ------------------
  436|  1.06k|        digit_count--;
  437|  1.06k|      }
  438|  1.59k|      start++;
  439|  1.59k|    }
  440|       |
  441|  2.49k|    if (digit_count > 19) {
  ------------------
  |  Branch (441:9): [True: 2.25k, False: 236]
  ------------------
  442|  2.25k|      answer.too_many_digits = true;
  443|       |      // Let us start again, this time, avoiding overflows.
  444|       |      // We don't need to check if is_integer, since we use the
  445|       |      // pre-tokenized spans from above.
  446|  2.25k|      i = 0;
  447|  2.25k|      p = answer.integer.ptr;
  448|  2.25k|      UC const *int_end = p + answer.integer.len();
  449|  2.25k|      uint64_t const minimal_nineteen_digit_integer{1000000000000000000};
  450|  27.6k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (450:14): [True: 26.7k, False: 906]
  |  Branch (450:54): [True: 25.4k, False: 1.34k]
  ------------------
  451|  25.4k|        i = i * 10 + uint64_t(*p - UC('0'));
  452|  25.4k|        ++p;
  453|  25.4k|      }
  454|  2.25k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (454:11): [True: 906, False: 1.34k]
  ------------------
  455|    906|        exponent = end_of_integer_part - p + exp_number;
  456|  1.34k|      } else { // We have a value with a fractional component.
  457|  1.34k|        p = answer.fraction.ptr;
  458|  1.34k|        UC const *frac_end = p + answer.fraction.len();
  459|  19.5k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (459:16): [True: 18.2k, False: 1.34k]
  |  Branch (459:56): [True: 18.2k, False: 0]
  ------------------
  460|  18.2k|          i = i * 10 + uint64_t(*p - UC('0'));
  461|  18.2k|          ++p;
  462|  18.2k|        }
  463|  1.34k|        exponent = answer.fraction.ptr - p + exp_number;
  464|  1.34k|      }
  465|       |      // We have now corrected both exponent and i, to a truncated value
  466|  2.25k|    }
  467|  2.49k|  }
  468|   447k|  answer.exponent = exponent;
  469|   447k|  answer.mantissa = i;
  470|   447k|  return answer;
  471|   447k|}
_ZN10fast_float27parse_eight_digits_unrolledIDiEEjPKT_:
  133|    332|parse_eight_digits_unrolled(UC const *chars) noexcept {
  134|    332|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (134:7): [Folded - Ignored]
  |  Branch (134:35): [Folded - Ignored]
  ------------------
  135|    332|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  136|    332|  }
  137|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  138|    332|}
_ZN10fast_float12read8_to_u64IDiEEmPKT_:
   48|    332|read8_to_u64(UC const *chars) {
   49|    332|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (49:7): [Folded - Ignored]
  |  Branch (49:35): [Folded - Ignored]
  ------------------
   50|    332|    uint64_t val = 0;
   51|  2.98k|    for (int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (51:21): [True: 2.65k, False: 332]
  ------------------
   52|  2.65k|      val |= uint64_t(uint8_t(*chars)) << (i * 8);
   53|  2.65k|      ++chars;
   54|  2.65k|    }
   55|    332|    return val;
   56|    332|  }
   57|      0|  uint64_t val;
   58|      0|  ::memcpy(&val, chars, sizeof(uint64_t));
   59|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   60|       |  // Need to read as-if the number was in little-endian order.
   61|       |  val = byteswap(val);
   62|       |#endif
   63|      0|  return val;
   64|    332|}

_ZN10fast_float6bigintC2Ev:
  438|  49.3k|  FASTFLOAT_CONSTEXPR20 bigint() : vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   45|   110k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  591|   173k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept { return small_mul(vec, y); }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  288|   259k|                                            limb y) noexcept {
  289|   259k|  limb carry = 0;
  290|  1.11M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (290:26): [True: 851k, False: 259k]
  ------------------
  291|   851k|    vec[index] = scalar_mul(vec[index], y, carry);
  292|   851k|  }
  293|   259k|  if (carry != 0) {
  ------------------
  |  Branch (293:7): [True: 155k, False: 104k]
  ------------------
  294|   155k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  205|   155k|  {                                                                            \
  |  |  206|   155k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 155k]
  |  |  ------------------
  |  |  207|   155k|      return false;                                                            \
  |  |  208|   155k|  }
  ------------------
  295|   155k|  }
  296|   259k|  return true;
  297|   259k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   78|  2.07M|  constexpr size_t len() const noexcept { return length; }
_ZN10fast_float10scalar_mulEmmRm:
  235|   851k|scalar_mul(limb x, limb y, limb &carry) noexcept {
  236|   851k|#ifdef FASTFLOAT_64BIT_LIMB
  237|   851k|#if defined(__SIZEOF_INT128__)
  238|       |  // GCC and clang both define it as an extension.
  239|   851k|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  240|   851k|  carry = limb(z >> limb_bits);
  241|   851k|  return limb(z);
  242|       |#else
  243|       |  // fallback, no native 128-bit integer multiplication with carry.
  244|       |  // on msvc, this optimizes identically, somehow.
  245|       |  value128 z = full_multiplication(x, y);
  246|       |  bool overflow;
  247|       |  z.low = scalar_add(z.low, carry, overflow);
  248|       |  z.high += uint64_t(overflow); // cannot overflow
  249|       |  carry = z.high;
  250|       |  return z.low;
  251|       |#endif
  252|       |#else
  253|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  254|       |  carry = limb(z >> limb_bits);
  255|       |  return limb(z);
  256|       |#endif
  257|   851k|}
_ZN10fast_float8stackvecILt62EEixEm:
   56|  2.32M|  FASTFLOAT_CONSTEXPR14 limb &operator[](size_t index) noexcept {
   57|  2.32M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  200|  2.32M|  { ((void)(x)); }
  ------------------
   58|  2.32M|    return data[index];
   59|  2.32M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   214k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   214k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 214k, False: 0]
  ------------------
   93|   214k|      push_unchecked(value);
   94|   214k|      return true;
   95|   214k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   214k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   253k|  constexpr size_t capacity() const noexcept { return size; }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   85|   260k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   86|   260k|    data[length] = value;
   87|   260k|    length++;
   88|   260k|  }
_ZN10fast_float6bigint3addEm:
  593|   173k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept { return small_add(vec, y); }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  281|   173k|small_add(stackvec<size> &vec, limb y) noexcept {
  282|   173k|  return small_add_from(vec, y, 0);
  283|   173k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  263|   173k|                                                 size_t start) noexcept {
  264|   173k|  size_t index = start;
  265|   173k|  limb carry = y;
  266|   173k|  bool overflow;
  267|   262k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (267:10): [True: 137k, False: 124k]
  |  Branch (267:24): [True: 88.6k, False: 49.3k]
  ------------------
  268|  88.6k|    vec[index] = scalar_add(vec[index], carry, overflow);
  269|  88.6k|    carry = limb(overflow);
  270|  88.6k|    index += 1;
  271|  88.6k|  }
  272|   173k|  if (carry != 0) {
  ------------------
  |  Branch (272:7): [True: 49.3k, False: 124k]
  ------------------
  273|  49.3k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  205|  49.3k|  {                                                                            \
  |  |  206|  49.3k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 49.3k]
  |  |  ------------------
  |  |  207|  49.3k|      return false;                                                            \
  |  |  208|  49.3k|  }
  ------------------
  274|  49.3k|  }
  275|   173k|  return true;
  276|   173k|}
_ZN10fast_float10scalar_addEmmRb:
  215|   239k|scalar_add(limb x, limb y, bool &overflow) noexcept {
  216|   239k|  limb z;
  217|       |// gcc and clang
  218|   239k|#if defined(__has_builtin)
  219|   239k|#if __has_builtin(__builtin_add_overflow)
  220|   239k|  if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (220:7): [Folded - Ignored]
  ------------------
  221|   239k|    overflow = __builtin_add_overflow(x, y, &z);
  222|   239k|    return z;
  223|   239k|  }
  224|      0|#endif
  225|      0|#endif
  226|       |
  227|       |  // generic, this still optimizes correctly on MSVC.
  228|      0|  z = x + y;
  229|      0|  overflow = z < x;
  230|      0|  return z;
  231|   239k|}
_ZN10fast_float6bigint5pow10Ej:
  630|  3.26k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  631|  3.26k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  205|  3.26k|  {                                                                            \
  |  |  206|  3.26k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 3.26k]
  |  |  ------------------
  |  |  207|  3.26k|      return false;                                                            \
  |  |  208|  3.26k|  }
  ------------------
  632|  3.26k|    return pow2(exp);
  633|  3.26k|  }
_ZN10fast_float6bigint4pow5Ej:
  599|  49.3k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  600|       |    // multiply by a power of 5
  601|  49.3k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  602|  49.3k|    limb_span large = limb_span(large_power_of_5, large_length);
  603|  52.9k|    while (exp >= large_step) {
  ------------------
  |  Branch (603:12): [True: 3.66k, False: 49.3k]
  ------------------
  604|  3.66k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  205|  3.66k|  {                                                                            \
  |  |  206|  3.66k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 3.66k]
  |  |  ------------------
  |  |  207|  3.66k|      return false;                                                            \
  |  |  208|  3.66k|  }
  ------------------
  605|  3.66k|      exp -= large_step;
  606|  3.66k|    }
  607|  49.3k|#ifdef FASTFLOAT_64BIT_LIMB
  608|  49.3k|    uint32_t small_step = 27;
  609|  49.3k|    limb max_native = 7450580596923828125UL;
  610|       |#else
  611|       |    uint32_t small_step = 13;
  612|       |    limb max_native = 1220703125U;
  613|       |#endif
  614|  72.9k|    while (exp >= small_step) {
  ------------------
  |  Branch (614:12): [True: 23.6k, False: 49.3k]
  ------------------
  615|  23.6k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  205|  23.6k|  {                                                                            \
  |  |  206|  23.6k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 23.6k]
  |  |  ------------------
  |  |  207|  23.6k|      return false;                                                            \
  |  |  208|  23.6k|  }
  ------------------
  616|  23.6k|      exp -= small_step;
  617|  23.6k|    }
  618|  49.3k|    if (exp != 0) {
  ------------------
  |  Branch (618:9): [True: 43.3k, False: 6.01k]
  ------------------
  619|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  620|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  621|       |      // except the workaround described there don't work here
  622|  43.3k|      FASTFLOAT_TRY(small_mul(
  ------------------
  |  |  205|  43.3k|  {                                                                            \
  |  |  206|  43.3k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 43.3k]
  |  |  ------------------
  |  |  207|  43.3k|      return false;                                                            \
  |  |  208|  43.3k|  }
  ------------------
  623|  43.3k|          vec, limb(((void)small_power_of_5[0], small_power_of_5[exp]))));
  624|  43.3k|    }
  625|       |
  626|  49.3k|    return true;
  627|  49.3k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  368|  3.66k|FASTFLOAT_CONSTEXPR20 bool large_mul(stackvec<size> &x, limb_span y) noexcept {
  369|  3.66k|  if (y.len() == 1) {
  ------------------
  |  Branch (369:7): [True: 0, False: 3.66k]
  ------------------
  370|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  205|      0|  {                                                                            \
  |  |  206|      0|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  207|      0|      return false;                                                            \
  |  |  208|      0|  }
  ------------------
  371|  3.66k|  } else {
  372|  3.66k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  205|  3.66k|  {                                                                            \
  |  |  206|  3.66k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 3.66k]
  |  |  ------------------
  |  |  207|  3.66k|      return false;                                                            \
  |  |  208|  3.66k|  }
  ------------------
  373|  3.66k|  }
  374|  3.66k|  return true;
  375|  3.66k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  340|  3.66k|FASTFLOAT_CONSTEXPR20 bool long_mul(stackvec<size> &x, limb_span y) noexcept {
  341|  3.66k|  limb_span xs = limb_span(x.data, x.len());
  342|  3.66k|  stackvec<size> z(xs);
  343|  3.66k|  limb_span zs = limb_span(z.data, z.len());
  344|       |
  345|  3.66k|  if (y.len() != 0) {
  ------------------
  |  Branch (345:7): [True: 3.66k, False: 0]
  ------------------
  346|  3.66k|    limb y0 = y[0];
  347|  3.66k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  205|  3.66k|  {                                                                            \
  |  |  206|  3.66k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 3.66k]
  |  |  ------------------
  |  |  207|  3.66k|      return false;                                                            \
  |  |  208|  3.66k|  }
  ------------------
  348|  18.3k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (348:28): [True: 14.6k, False: 3.66k]
  ------------------
  349|  14.6k|      limb yi = y[index];
  350|  14.6k|      stackvec<size> zi;
  351|  14.6k|      if (yi != 0) {
  ------------------
  |  Branch (351:11): [True: 14.6k, False: 0]
  ------------------
  352|       |        // re-use the same buffer throughout
  353|  14.6k|        zi.set_len(0);
  354|  14.6k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  205|  14.6k|  {                                                                            \
  |  |  206|  14.6k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 14.6k]
  |  |  ------------------
  |  |  207|  14.6k|      return false;                                                            \
  |  |  208|  14.6k|  }
  ------------------
  355|  14.6k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  205|  14.6k|  {                                                                            \
  |  |  206|  14.6k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 14.6k]
  |  |  ------------------
  |  |  207|  14.6k|      return false;                                                            \
  |  |  208|  14.6k|  }
  ------------------
  356|  14.6k|        limb_span zis = limb_span(zi.data, zi.len());
  357|  14.6k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  205|  14.6k|  {                                                                            \
  |  |  206|  14.6k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 14.6k]
  |  |  ------------------
  |  |  207|  14.6k|      return false;                                                            \
  |  |  208|  14.6k|  }
  ------------------
  358|  14.6k|      }
  359|  14.6k|    }
  360|  3.66k|  }
  361|       |
  362|  3.66k|  x.normalize();
  363|  3.66k|  return true;
  364|  3.66k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   52|  3.66k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   53|  3.66k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  195|  3.66k|  { ((void)(x)); }
  ------------------
   54|  3.66k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   74|  54.0k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   75|  54.0k|    length = uint16_t(len);
   76|  54.0k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  108|  18.3k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  109|  18.3k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (109:9): [True: 18.3k, False: 0]
  ------------------
  110|  18.3k|      extend_unchecked(s);
  111|  18.3k|      return true;
  112|  18.3k|    } else {
  113|      0|      return false;
  114|      0|    }
  115|  18.3k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  101|  18.3k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  102|  18.3k|    limb *ptr = data + length;
  103|  18.3k|    std::copy_n(s.ptr, s.len(), ptr);
  104|  18.3k|    set_len(len() + s.len());
  105|  18.3k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  303|  14.6k|                                          size_t start) noexcept {
  304|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  305|       |  // if we can't get that current range.
  306|  14.6k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (306:7): [True: 0, False: 14.6k]
  |  Branch (306:26): [True: 14.3k, False: 284]
  ------------------
  307|  14.3k|    FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  205|  14.3k|  {                                                                            \
  |  |  206|  14.3k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 14.3k]
  |  |  ------------------
  |  |  207|  14.3k|      return false;                                                            \
  |  |  208|  14.3k|  }
  ------------------
  308|  14.3k|  }
  309|       |
  310|  14.6k|  bool carry = false;
  311|   124k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (311:26): [True: 109k, False: 14.6k]
  ------------------
  312|   109k|    limb xi = x[index + start];
  313|   109k|    limb yi = y[index];
  314|   109k|    bool c1 = false;
  315|   109k|    bool c2 = false;
  316|   109k|    xi = scalar_add(xi, yi, c1);
  317|   109k|    if (carry) {
  ------------------
  |  Branch (317:9): [True: 41.2k, False: 68.1k]
  ------------------
  318|  41.2k|      xi = scalar_add(xi, 1, c2);
  319|  41.2k|    }
  320|   109k|    x[index + start] = xi;
  321|   109k|    carry = c1 | c2;
  322|   109k|  }
  323|       |
  324|       |  // handle overflow
  325|  14.6k|  if (carry) {
  ------------------
  |  Branch (325:7): [True: 0, False: 14.6k]
  ------------------
  326|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  205|      0|  {                                                                            \
  |  |  206|      0|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  207|      0|      return false;                                                            \
  |  |  208|      0|  }
  ------------------
  327|      0|  }
  328|  14.6k|  return true;
  329|  14.6k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  134|  14.3k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  135|  14.3k|    if (new_len > capacity()) {
  ------------------
  |  Branch (135:9): [True: 0, False: 14.3k]
  ------------------
  136|      0|      return false;
  137|  14.3k|    } else {
  138|  14.3k|      resize_unchecked(new_len, value);
  139|  14.3k|      return true;
  140|  14.3k|    }
  141|  14.3k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  121|  14.3k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  122|  14.3k|    if (new_len > len()) {
  ------------------
  |  Branch (122:9): [True: 14.3k, False: 0]
  ------------------
  123|  14.3k|      size_t count = new_len - len();
  124|  14.3k|      limb *first = data + len();
  125|  14.3k|      limb *last = first + count;
  126|  14.3k|      ::std::fill(first, last, value);
  127|  14.3k|      set_len(new_len);
  128|  14.3k|    } else {
  129|      0|      set_len(new_len);
  130|      0|    }
  131|  14.3k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  157|  49.7k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  158|  49.7k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (158:12): [True: 49.7k, False: 0]
  |  Branch (158:25): [True: 0, False: 49.7k]
  ------------------
  159|      0|      length--;
  160|      0|    }
  161|  49.7k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   67|  59.1k|  FASTFLOAT_CONSTEXPR14 const limb &rindex(size_t index) const noexcept {
   68|  59.1k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  200|  59.1k|  { ((void)(x)); }
  ------------------
   69|  59.1k|    size_t rindex = length - index - 1;
   70|  59.1k|    return data[rindex];
   71|  59.1k|  }
_ZN10fast_float6bigint4pow2Ej:
  596|  49.2k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept { return shl(exp); }
_ZN10fast_float6bigint3shlEm:
  558|  49.2k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  559|  49.2k|    size_t rem = n % limb_bits;
  560|  49.2k|    size_t div = n / limb_bits;
  561|  49.2k|    if (rem != 0) {
  ------------------
  |  Branch (561:9): [True: 46.1k, False: 3.08k]
  ------------------
  562|  46.1k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  205|  46.1k|  {                                                                            \
  |  |  206|  46.1k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 46.1k]
  |  |  ------------------
  |  |  207|  46.1k|      return false;                                                            \
  |  |  208|  46.1k|  }
  ------------------
  563|  46.1k|    }
  564|  49.2k|    if (div != 0) {
  ------------------
  |  Branch (564:9): [True: 6.59k, False: 42.6k]
  ------------------
  565|  6.59k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  205|  6.59k|  {                                                                            \
  |  |  206|  6.59k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (206:9): [True: 0, False: 6.59k]
  |  |  ------------------
  |  |  207|  6.59k|      return false;                                                            \
  |  |  208|  6.59k|  }
  ------------------
  566|  6.59k|    }
  567|  49.2k|    return true;
  568|  49.2k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  511|  46.1k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  512|       |    // Internally, for each item, we shift left by n, and add the previous
  513|       |    // right shifted limb-bits.
  514|       |    // For example, we transform (for u8) shifted left 2, to:
  515|       |    //      b10100100 b01000010
  516|       |    //      b10 b10010001 b00001000
  517|  46.1k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  200|  46.1k|  { ((void)(x)); }
  ------------------
  518|  46.1k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  200|  46.1k|  { ((void)(x)); }
  ------------------
  519|       |
  520|  46.1k|    size_t shl = n;
  521|  46.1k|    size_t shr = limb_bits - shl;
  522|  46.1k|    limb prev = 0;
  523|   157k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (523:28): [True: 111k, False: 46.1k]
  ------------------
  524|   111k|      limb xi = vec[index];
  525|   111k|      vec[index] = (xi << shl) | (prev >> shr);
  526|   111k|      prev = xi;
  527|   111k|    }
  528|       |
  529|  46.1k|    limb carry = prev >> shr;
  530|  46.1k|    if (carry != 0) {
  ------------------
  |  Branch (530:9): [True: 9.73k, False: 36.4k]
  ------------------
  531|  9.73k|      return vec.try_push(carry);
  532|  9.73k|    }
  533|  36.4k|    return true;
  534|  46.1k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  537|  6.59k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  538|  6.59k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  200|  6.59k|  { ((void)(x)); }
  ------------------
  539|  6.59k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (539:9): [True: 0, False: 6.59k]
  ------------------
  540|      0|      return false;
  541|  6.59k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (541:16): [True: 6.59k, False: 0]
  ------------------
  542|       |      // move limbs
  543|  6.59k|      limb *dst = vec.data + n;
  544|  6.59k|      limb const *src = vec.data;
  545|  6.59k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  546|       |      // fill in empty limbs
  547|  6.59k|      limb *first = vec.data;
  548|  6.59k|      limb *last = first + n;
  549|  6.59k|      ::std::fill(first, last, 0);
  550|  6.59k|      vec.set_len(n + vec.len());
  551|  6.59k|      return true;
  552|  6.59k|    } else {
  553|      0|      return true;
  554|      0|    }
  555|  6.59k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   80|  9.85k|  constexpr bool is_empty() const noexcept { return length == 0; }
_ZNK10fast_float6bigint4hi64ERb:
  457|  3.26k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool &truncated) const noexcept {
  458|  3.26k|#ifdef FASTFLOAT_64BIT_LIMB
  459|  3.26k|    if (vec.len() == 0) {
  ------------------
  |  Branch (459:9): [True: 0, False: 3.26k]
  ------------------
  460|      0|      return empty_hi64(truncated);
  461|  3.26k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (461:16): [True: 953, False: 2.30k]
  ------------------
  462|    953|      return uint64_hi64(vec.rindex(0), truncated);
  463|  2.30k|    } else {
  464|  2.30k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  465|  2.30k|      truncated |= vec.nonzero(2);
  466|  2.30k|      return result;
  467|  2.30k|    }
  468|       |#else
  469|       |    if (vec.len() == 0) {
  470|       |      return empty_hi64(truncated);
  471|       |    } else if (vec.len() == 1) {
  472|       |      return uint32_hi64(vec.rindex(0), truncated);
  473|       |    } else if (vec.len() == 2) {
  474|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  475|       |    } else {
  476|       |      uint64_t result =
  477|       |          uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  478|       |      truncated |= vec.nonzero(3);
  479|       |      return result;
  480|       |    }
  481|       |#endif
  482|  3.26k|  }
_ZN10fast_float11uint64_hi64EmRb:
  171|    953|uint64_hi64(uint64_t r0, bool &truncated) noexcept {
  172|    953|  truncated = false;
  173|    953|  int shl = leading_zeroes(r0);
  174|    953|  return r0 << shl;
  175|    953|}
_ZN10fast_float11uint64_hi64EmmRb:
  178|  2.30k|uint64_hi64(uint64_t r0, uint64_t r1, bool &truncated) noexcept {
  179|  2.30k|  int shl = leading_zeroes(r0);
  180|  2.30k|  if (shl == 0) {
  ------------------
  |  Branch (180:7): [True: 38, False: 2.27k]
  ------------------
  181|     38|    truncated = r1 != 0;
  182|     38|    return r0;
  183|  2.27k|  } else {
  184|  2.27k|    int shr = 64 - shl;
  185|  2.27k|    truncated = (r1 << shl) != 0;
  186|  2.27k|    return (r0 << shl) | (r1 >> shr);
  187|  2.27k|  }
  188|  2.30k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  146|  2.30k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  147|  2.34k|    while (index < len()) {
  ------------------
  |  Branch (147:12): [True: 568, False: 1.78k]
  ------------------
  148|    568|      if (rindex(index) != 0) {
  ------------------
  |  Branch (148:11): [True: 528, False: 40]
  ------------------
  149|    528|        return true;
  150|    528|      }
  151|     40|      index++;
  152|     40|    }
  153|  1.78k|    return false;
  154|  2.30k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  586|  3.26k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  587|  3.26k|    int lz = ctlz();
  588|  3.26k|    return int(limb_bits * vec.len()) - lz;
  589|  3.26k|  }
_ZNK10fast_float6bigint4ctlzEv:
  571|  3.26k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  572|  3.26k|    if (vec.is_empty()) {
  ------------------
  |  Branch (572:9): [True: 0, False: 3.26k]
  ------------------
  573|      0|      return 0;
  574|  3.26k|    } else {
  575|  3.26k|#ifdef FASTFLOAT_64BIT_LIMB
  576|  3.26k|      return leading_zeroes(vec.rindex(0));
  577|       |#else
  578|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  579|       |      uint64_t r0 = vec.rindex(0);
  580|       |      return leading_zeroes(r0 << 32);
  581|       |#endif
  582|  3.26k|    }
  583|  3.26k|  }
_ZN10fast_float6bigintC2Em:
  445|  46.0k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value) : vec() {
  446|  46.0k|#ifdef FASTFLOAT_64BIT_LIMB
  447|  46.0k|    vec.push_unchecked(value);
  448|       |#else
  449|       |    vec.push_unchecked(uint32_t(value));
  450|       |    vec.push_unchecked(uint32_t(value >> 32));
  451|       |#endif
  452|  46.0k|    vec.normalize();
  453|  46.0k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  490|  46.0k|  FASTFLOAT_CONSTEXPR20 int compare(bigint const &other) const noexcept {
  491|  46.0k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (491:9): [True: 0, False: 46.0k]
  ------------------
  492|      0|      return 1;
  493|  46.0k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (493:16): [True: 0, False: 46.0k]
  ------------------
  494|      0|      return -1;
  495|  46.0k|    } else {
  496|  90.6k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (496:38): [True: 86.8k, False: 3.73k]
  ------------------
  497|  86.8k|        limb xi = vec[index - 1];
  498|  86.8k|        limb yi = other.vec[index - 1];
  499|  86.8k|        if (xi > yi) {
  ------------------
  |  Branch (499:13): [True: 11.6k, False: 75.1k]
  ------------------
  500|  11.6k|          return 1;
  501|  75.1k|        } else if (xi < yi) {
  ------------------
  |  Branch (501:20): [True: 30.6k, False: 44.5k]
  ------------------
  502|  30.6k|          return -1;
  503|  30.6k|        }
  504|  86.8k|      }
  505|  3.73k|      return 0;
  506|  46.0k|    }
  507|  46.0k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   173k|  FASTFLOAT_CONSTEXPR14 const limb &operator[](size_t index) const noexcept {
   62|   173k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  200|   173k|  { ((void)(x)); }
  ------------------
   63|   173k|    return data[index];
   64|   173k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
  103|   192k|compute_float(int64_t q, uint64_t w) noexcept {
  104|   192k|  adjusted_mantissa answer;
  105|   192k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (105:7): [True: 3.37k, False: 188k]
  |  Branch (105:19): [True: 1.31k, False: 187k]
  ------------------
  106|  4.69k|    answer.power2 = 0;
  107|  4.69k|    answer.mantissa = 0;
  108|       |    // result should be zero
  109|  4.69k|    return answer;
  110|  4.69k|  }
  111|   187k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (111:7): [True: 7.50k, False: 179k]
  ------------------
  112|       |    // we want to get infinity:
  113|  7.50k|    answer.power2 = binary::infinite_power();
  114|  7.50k|    answer.mantissa = 0;
  115|  7.50k|    return answer;
  116|  7.50k|  }
  117|       |  // At this point in time q is in [powers::smallest_power_of_five,
  118|       |  // powers::largest_power_of_five].
  119|       |
  120|       |  // We want the most significant bit of i to be 1. Shift if needed.
  121|   179k|  int lz = leading_zeroes(w);
  122|   179k|  w <<= lz;
  123|       |
  124|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  125|       |  // 1. We need the implicit bit
  126|       |  // 2. We need an extra bit for rounding purposes
  127|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small,
  128|       |  // requiring a shift)
  129|       |
  130|   179k|  value128 product =
  131|   179k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  132|       |  // The computed 'product' is always sufficient.
  133|       |  // Mathematical proof:
  134|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to
  135|       |  // appear) See script/mushtak_lemire.py
  136|       |
  137|       |  // The "compute_product_approximation" function can be slightly slower than a
  138|       |  // branchless approach: value128 product = compute_product(q, w); but in
  139|       |  // practice, we can win big with the compute_product_approximation if its
  140|       |  // additional branch is easily predicted. Which is best is data specific.
  141|   179k|  int upperbit = int(product.high >> 63);
  142|   179k|  int shift = upperbit + 64 - binary::mantissa_explicit_bits() - 3;
  143|       |
  144|   179k|  answer.mantissa = product.high >> shift;
  145|       |
  146|   179k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz -
  147|   179k|                          binary::minimum_exponent());
  148|   179k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (148:7): [True: 966, False: 178k]
  ------------------
  149|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  150|    966|    if (-answer.power2 + 1 >=
  ------------------
  |  Branch (150:9): [True: 88, False: 878]
  ------------------
  151|    966|        64) { // if we have more than 64 bits below the minimum exponent, you
  152|       |              // have a zero for sure.
  153|     88|      answer.power2 = 0;
  154|     88|      answer.mantissa = 0;
  155|       |      // result should be zero
  156|     88|      return answer;
  157|     88|    }
  158|       |    // next line is safe because -answer.power2 + 1 < 64
  159|    878|    answer.mantissa >>= -answer.power2 + 1;
  160|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  161|       |    // "round-to-even" only occurs for powers close to 0 in the 32-bit and
  162|       |    // and 64-bit case (with no more than 19 digits).
  163|    878|    answer.mantissa += (answer.mantissa & 1); // round up
  164|    878|    answer.mantissa >>= 1;
  165|       |    // There is a weird scenario where we don't have a subnormal but just.
  166|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  167|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  168|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  169|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  170|       |    // subnormal, but we can only know this after rounding.
  171|       |    // So we only declare a subnormal if we are smaller than the threshold.
  172|    878|    answer.power2 =
  173|    878|        (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits()))
  ------------------
  |  Branch (173:9): [True: 878, False: 0]
  ------------------
  174|    878|            ? 0
  175|    878|            : 1;
  176|    878|    return answer;
  177|    966|  }
  178|       |
  179|       |  // usually, we round *up*, but if we fall right in between and and we have an
  180|       |  // even basis, we need to round down
  181|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  182|   178k|  if ((product.low <= 1) && (q >= binary::min_exponent_round_to_even()) &&
  ------------------
  |  Branch (182:7): [True: 59.9k, False: 118k]
  |  Branch (182:29): [True: 58.3k, False: 1.65k]
  ------------------
  183|   178k|      (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (183:7): [True: 53.6k, False: 4.66k]
  ------------------
  184|   178k|      ((answer.mantissa & 3) == 1)) { // we may fall between two floats!
  ------------------
  |  Branch (184:7): [True: 7.92k, False: 45.7k]
  ------------------
  185|       |    // To be in-between two floats we need that in doing
  186|       |    //   answer.mantissa = product.high >> (upperbit + 64 -
  187|       |    //   binary::mantissa_explicit_bits() - 3);
  188|       |    // ... we dropped out only zeroes. But if this happened, then we can go
  189|       |    // back!!!
  190|  7.92k|    if ((answer.mantissa << shift) == product.high) {
  ------------------
  |  Branch (190:9): [True: 4.01k, False: 3.90k]
  ------------------
  191|  4.01k|      answer.mantissa &= ~uint64_t(1); // flip it so that we do not round up
  192|  4.01k|    }
  193|  7.92k|  }
  194|       |
  195|   178k|  answer.mantissa += (answer.mantissa & 1); // round up
  196|   178k|  answer.mantissa >>= 1;
  197|   178k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (197:7): [True: 11.1k, False: 167k]
  ------------------
  198|  11.1k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  199|  11.1k|    answer.power2++; // undo previous addition
  200|  11.1k|  }
  201|       |
  202|   178k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  203|   178k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (203:7): [True: 1.16k, False: 177k]
  ------------------
  204|  1.16k|    answer.power2 = binary::infinite_power();
  205|  1.16k|    answer.mantissa = 0;
  206|  1.16k|  }
  207|   178k|  return answer;
  208|   179k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   22|   199k|compute_product_approximation(int64_t q, uint64_t w) {
   23|   199k|  int const index = 2 * int(q - powers::smallest_power_of_five);
   24|       |  // For small values of q, e.g., q in [0,27], the answer is always exact
   25|       |  // because The line value128 firstproduct = full_multiplication(w,
   26|       |  // power_of_five_128[index]); gives the exact answer.
   27|   199k|  value128 firstproduct =
   28|   199k|      full_multiplication(w, powers::power_of_five_128[index]);
   29|   199k|  static_assert((bit_precision >= 0) && (bit_precision <= 64),
   30|   199k|                " precision should  be in (0,64]");
   31|   199k|  constexpr uint64_t precision_mask =
   32|   199k|      (bit_precision < 64) ? (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
  ------------------
  |  Branch (32:7): [Folded - Ignored]
  ------------------
   33|   199k|                           : uint64_t(0xFFFFFFFFFFFFFFFF);
   34|   199k|  if ((firstproduct.high & precision_mask) ==
  ------------------
  |  Branch (34:7): [True: 37.5k, False: 161k]
  ------------------
   35|   199k|      precision_mask) { // could further guard with  (lower + w < lower)
   36|       |    // regarding the second product, we only need secondproduct.high, but our
   37|       |    // expectation is that the compiler will optimize this extra work away if
   38|       |    // needed.
   39|  37.5k|    value128 secondproduct =
   40|  37.5k|        full_multiplication(w, powers::power_of_five_128[index + 1]);
   41|  37.5k|    firstproduct.low += secondproduct.high;
   42|  37.5k|    if (secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (42:9): [True: 27.3k, False: 10.1k]
  ------------------
   43|  27.3k|      firstproduct.high++;
   44|  27.3k|    }
   45|  37.5k|  }
   46|   199k|  return firstproduct;
   47|   199k|}
_ZN10fast_float6detail5powerEi:
   65|   401k|constexpr fastfloat_really_inline int32_t power(int32_t q) noexcept {
   66|   401k|  return (((152170 + 65536) * q) >> 16) + 63;
   67|   401k|}
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   88|  19.2k|compute_error(int64_t q, uint64_t w) noexcept {
   89|  19.2k|  int lz = leading_zeroes(w);
   90|  19.2k|  w <<= lz;
   91|  19.2k|  value128 product =
   92|  19.2k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   93|  19.2k|  return compute_error_scaled<binary>(q, product.high, lz);
   94|  19.2k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   74|  19.2k|compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept {
   75|  19.2k|  int hilz = int(w >> 63) ^ 1;
   76|  19.2k|  adjusted_mantissa answer;
   77|  19.2k|  answer.mantissa = w << hilz;
   78|  19.2k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   79|  19.2k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 +
   80|  19.2k|                          invalid_am_bias);
   81|  19.2k|  return answer;
   82|  19.2k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
  103|   179k|compute_float(int64_t q, uint64_t w) noexcept {
  104|   179k|  adjusted_mantissa answer;
  105|   179k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (105:7): [True: 3.18k, False: 176k]
  |  Branch (105:19): [True: 371, False: 175k]
  ------------------
  106|  3.56k|    answer.power2 = 0;
  107|  3.56k|    answer.mantissa = 0;
  108|       |    // result should be zero
  109|  3.56k|    return answer;
  110|  3.56k|  }
  111|   175k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (111:7): [True: 3.91k, False: 172k]
  ------------------
  112|       |    // we want to get infinity:
  113|  3.91k|    answer.power2 = binary::infinite_power();
  114|  3.91k|    answer.mantissa = 0;
  115|  3.91k|    return answer;
  116|  3.91k|  }
  117|       |  // At this point in time q is in [powers::smallest_power_of_five,
  118|       |  // powers::largest_power_of_five].
  119|       |
  120|       |  // We want the most significant bit of i to be 1. Shift if needed.
  121|   172k|  int lz = leading_zeroes(w);
  122|   172k|  w <<= lz;
  123|       |
  124|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  125|       |  // 1. We need the implicit bit
  126|       |  // 2. We need an extra bit for rounding purposes
  127|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small,
  128|       |  // requiring a shift)
  129|       |
  130|   172k|  value128 product =
  131|   172k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  132|       |  // The computed 'product' is always sufficient.
  133|       |  // Mathematical proof:
  134|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to
  135|       |  // appear) See script/mushtak_lemire.py
  136|       |
  137|       |  // The "compute_product_approximation" function can be slightly slower than a
  138|       |  // branchless approach: value128 product = compute_product(q, w); but in
  139|       |  // practice, we can win big with the compute_product_approximation if its
  140|       |  // additional branch is easily predicted. Which is best is data specific.
  141|   172k|  int upperbit = int(product.high >> 63);
  142|   172k|  int shift = upperbit + 64 - binary::mantissa_explicit_bits() - 3;
  143|       |
  144|   172k|  answer.mantissa = product.high >> shift;
  145|       |
  146|   172k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz -
  147|   172k|                          binary::minimum_exponent());
  148|   172k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (148:7): [True: 2.78k, False: 169k]
  ------------------
  149|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  150|  2.78k|    if (-answer.power2 + 1 >=
  ------------------
  |  Branch (150:9): [True: 88, False: 2.69k]
  ------------------
  151|  2.78k|        64) { // if we have more than 64 bits below the minimum exponent, you
  152|       |              // have a zero for sure.
  153|     88|      answer.power2 = 0;
  154|     88|      answer.mantissa = 0;
  155|       |      // result should be zero
  156|     88|      return answer;
  157|     88|    }
  158|       |    // next line is safe because -answer.power2 + 1 < 64
  159|  2.69k|    answer.mantissa >>= -answer.power2 + 1;
  160|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  161|       |    // "round-to-even" only occurs for powers close to 0 in the 32-bit and
  162|       |    // and 64-bit case (with no more than 19 digits).
  163|  2.69k|    answer.mantissa += (answer.mantissa & 1); // round up
  164|  2.69k|    answer.mantissa >>= 1;
  165|       |    // There is a weird scenario where we don't have a subnormal but just.
  166|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  167|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  168|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  169|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  170|       |    // subnormal, but we can only know this after rounding.
  171|       |    // So we only declare a subnormal if we are smaller than the threshold.
  172|  2.69k|    answer.power2 =
  173|  2.69k|        (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits()))
  ------------------
  |  Branch (173:9): [True: 2.69k, False: 0]
  ------------------
  174|  2.69k|            ? 0
  175|  2.69k|            : 1;
  176|  2.69k|    return answer;
  177|  2.78k|  }
  178|       |
  179|       |  // usually, we round *up*, but if we fall right in between and and we have an
  180|       |  // even basis, we need to round down
  181|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  182|   169k|  if ((product.low <= 1) && (q >= binary::min_exponent_round_to_even()) &&
  ------------------
  |  Branch (182:7): [True: 49.4k, False: 119k]
  |  Branch (182:29): [True: 27.8k, False: 21.5k]
  ------------------
  183|   169k|      (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (183:7): [True: 23.2k, False: 4.66k]
  ------------------
  184|   169k|      ((answer.mantissa & 3) == 1)) { // we may fall between two floats!
  ------------------
  |  Branch (184:7): [True: 4.84k, False: 18.3k]
  ------------------
  185|       |    // To be in-between two floats we need that in doing
  186|       |    //   answer.mantissa = product.high >> (upperbit + 64 -
  187|       |    //   binary::mantissa_explicit_bits() - 3);
  188|       |    // ... we dropped out only zeroes. But if this happened, then we can go
  189|       |    // back!!!
  190|  4.84k|    if ((answer.mantissa << shift) == product.high) {
  ------------------
  |  Branch (190:9): [True: 3.76k, False: 1.07k]
  ------------------
  191|  3.76k|      answer.mantissa &= ~uint64_t(1); // flip it so that we do not round up
  192|  3.76k|    }
  193|  4.84k|  }
  194|       |
  195|   169k|  answer.mantissa += (answer.mantissa & 1); // round up
  196|   169k|  answer.mantissa >>= 1;
  197|   169k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (197:7): [True: 10.4k, False: 158k]
  ------------------
  198|  10.4k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  199|  10.4k|    answer.power2++; // undo previous addition
  200|  10.4k|  }
  201|       |
  202|   169k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  203|   169k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (203:7): [True: 336, False: 168k]
  ------------------
  204|    336|    answer.power2 = binary::infinite_power();
  205|    336|    answer.mantissa = 0;
  206|    336|  }
  207|   169k|  return answer;
  208|   172k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   22|   202k|compute_product_approximation(int64_t q, uint64_t w) {
   23|   202k|  int const index = 2 * int(q - powers::smallest_power_of_five);
   24|       |  // For small values of q, e.g., q in [0,27], the answer is always exact
   25|       |  // because The line value128 firstproduct = full_multiplication(w,
   26|       |  // power_of_five_128[index]); gives the exact answer.
   27|   202k|  value128 firstproduct =
   28|   202k|      full_multiplication(w, powers::power_of_five_128[index]);
   29|   202k|  static_assert((bit_precision >= 0) && (bit_precision <= 64),
   30|   202k|                " precision should  be in (0,64]");
   31|   202k|  constexpr uint64_t precision_mask =
   32|   202k|      (bit_precision < 64) ? (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
  ------------------
  |  Branch (32:7): [Folded - Ignored]
  ------------------
   33|   202k|                           : uint64_t(0xFFFFFFFFFFFFFFFF);
   34|   202k|  if ((firstproduct.high & precision_mask) ==
  ------------------
  |  Branch (34:7): [True: 79.1k, False: 123k]
  ------------------
   35|   202k|      precision_mask) { // could further guard with  (lower + w < lower)
   36|       |    // regarding the second product, we only need secondproduct.high, but our
   37|       |    // expectation is that the compiler will optimize this extra work away if
   38|       |    // needed.
   39|  79.1k|    value128 secondproduct =
   40|  79.1k|        full_multiplication(w, powers::power_of_five_128[index + 1]);
   41|  79.1k|    firstproduct.low += secondproduct.high;
   42|  79.1k|    if (secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (42:9): [True: 24.8k, False: 54.2k]
  ------------------
   43|  24.8k|      firstproduct.high++;
   44|  24.8k|    }
   45|  79.1k|  }
   46|   202k|  return firstproduct;
   47|   202k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   88|  30.1k|compute_error(int64_t q, uint64_t w) noexcept {
   89|  30.1k|  int lz = leading_zeroes(w);
   90|  30.1k|  w <<= lz;
   91|  30.1k|  value128 product =
   92|  30.1k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   93|  30.1k|  return compute_error_scaled<binary>(q, product.high, lz);
   94|  30.1k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   74|  30.1k|compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept {
   75|  30.1k|  int hilz = int(w >> 63) ^ 1;
   76|  30.1k|  adjusted_mantissa answer;
   77|  30.1k|  answer.mantissa = w << hilz;
   78|  30.1k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   79|  30.1k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 +
   80|  30.1k|                          invalid_am_bias);
   81|  30.1k|  return answer;
   82|  30.1k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  437|  19.2k|digit_comp(parsed_number_string_t<UC> &num, adjusted_mantissa am) noexcept {
  438|       |  // remove the invalid exponent bias
  439|  19.2k|  am.power2 -= invalid_am_bias;
  440|       |
  441|  19.2k|  int32_t sci_exp = scientific_exponent(num);
  442|  19.2k|  size_t max_digits = binary_format<T>::max_digits();
  443|  19.2k|  size_t digits = 0;
  444|  19.2k|  bigint bigmant;
  445|  19.2k|  parse_mantissa(bigmant, num, max_digits, digits);
  446|       |  // can't underflow, since digits is at most max_digits.
  447|  19.2k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  448|  19.2k|  if (exponent >= 0) {
  ------------------
  |  Branch (448:7): [True: 514, False: 18.6k]
  ------------------
  449|    514|    return positive_digit_comp<T>(bigmant, exponent);
  450|  18.6k|  } else {
  451|  18.6k|    return negative_digit_comp<T>(bigmant, am, exponent);
  452|  18.6k|  }
  453|  19.2k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   43|  49.1k|scientific_exponent(parsed_number_string_t<UC> &num) noexcept {
   44|  49.1k|  uint64_t mantissa = num.mantissa;
   45|  49.1k|  int32_t exponent = int32_t(num.exponent);
   46|   245k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (46:10): [True: 196k, False: 49.1k]
  ------------------
   47|   196k|    mantissa /= 10000;
   48|   196k|    exponent += 4;
   49|   196k|  }
   50|  98.2k|  while (mantissa >= 100) {
  ------------------
  |  Branch (50:10): [True: 49.1k, False: 49.1k]
  ------------------
   51|  49.1k|    mantissa /= 100;
   52|  49.1k|    exponent += 2;
   53|  49.1k|  }
   54|  49.1k|  while (mantissa >= 10) {
  ------------------
  |  Branch (54:10): [True: 0, False: 49.1k]
  ------------------
   55|      0|    mantissa /= 10;
   56|      0|    exponent += 1;
   57|      0|  }
   58|  49.1k|  return exponent;
   59|  49.1k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  262|  49.1k|               size_t max_digits, size_t &digits) noexcept {
  263|       |  // try to minimize the number of big integer and scalar multiplication.
  264|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  265|       |  // scalar value (9 or 19 digits) for each step.
  266|  49.1k|  size_t counter = 0;
  267|  49.1k|  digits = 0;
  268|  49.1k|  limb value = 0;
  269|  49.1k|#ifdef FASTFLOAT_64BIT_LIMB
  270|  49.1k|  size_t step = 19;
  271|       |#else
  272|       |  size_t step = 9;
  273|       |#endif
  274|       |
  275|       |  // process all integer digits.
  276|  49.1k|  UC const *p = num.integer.ptr;
  277|  49.1k|  UC const *pend = p + num.integer.len();
  278|  49.1k|  skip_zeros(p, pend);
  279|       |  // process all digits, in increments of step per loop
  280|   109k|  while (p != pend) {
  ------------------
  |  Branch (280:10): [True: 60.6k, False: 48.8k]
  ------------------
  281|   102k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (281:12): [True: 54.2k, False: 48.4k]
  |  Branch (281:45): [True: 42.2k, False: 11.9k]
  ------------------
  282|   102k|           (max_digits - digits >= 8)) {
  ------------------
  |  Branch (282:12): [True: 41.9k, False: 257]
  ------------------
  283|  41.9k|      parse_eight_digits(p, value, counter, digits);
  284|  41.9k|    }
  285|   189k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (285:12): [True: 175k, False: 14.2k]
  |  Branch (285:30): [True: 129k, False: 46.1k]
  |  Branch (285:43): [True: 129k, False: 257]
  ------------------
  286|   129k|      parse_one_digit(p, value, counter, digits);
  287|   129k|    }
  288|  60.6k|    if (digits == max_digits) {
  ------------------
  |  Branch (288:9): [True: 257, False: 60.3k]
  ------------------
  289|       |      // add the temporary value, then check if we've truncated any digits
  290|    257|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  291|    257|      bool truncated = is_truncated(p, pend);
  292|    257|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (292:11): [True: 219, False: 38]
  ------------------
  293|    219|        truncated |= is_truncated(num.fraction);
  294|    219|      }
  295|    257|      if (truncated) {
  ------------------
  |  Branch (295:11): [True: 153, False: 104]
  ------------------
  296|    153|        round_up_bigint(result, digits);
  297|    153|      }
  298|    257|      return;
  299|  60.3k|    } else {
  300|  60.3k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  60.3k|      counter = 0;
  302|  60.3k|      value = 0;
  303|  60.3k|    }
  304|  60.6k|  }
  305|       |
  306|       |  // add our fraction digits, if they're available.
  307|  48.8k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (307:7): [True: 46.0k, False: 2.83k]
  ------------------
  308|  46.0k|    p = num.fraction.ptr;
  309|  46.0k|    pend = p + num.fraction.len();
  310|  46.0k|    if (digits == 0) {
  ------------------
  |  Branch (310:9): [True: 2.75k, False: 43.2k]
  ------------------
  311|  2.75k|      skip_zeros(p, pend);
  312|  2.75k|    }
  313|       |    // process all digits, in increments of step per loop
  314|   153k|    while (p != pend) {
  ------------------
  |  Branch (314:12): [True: 110k, False: 43.1k]
  ------------------
  315|   267k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (315:14): [True: 211k, False: 56.0k]
  |  Branch (315:47): [True: 157k, False: 53.3k]
  ------------------
  316|   267k|             (max_digits - digits >= 8)) {
  ------------------
  |  Branch (316:14): [True: 156k, False: 1.33k]
  ------------------
  317|   156k|        parse_eight_digits(p, value, counter, digits);
  318|   156k|      }
  319|   460k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (319:14): [True: 394k, False: 66.2k]
  |  Branch (319:32): [True: 352k, False: 42.1k]
  |  Branch (319:45): [True: 349k, False: 2.29k]
  ------------------
  320|   349k|        parse_one_digit(p, value, counter, digits);
  321|   349k|      }
  322|   110k|      if (digits == max_digits) {
  ------------------
  |  Branch (322:11): [True: 2.85k, False: 107k]
  ------------------
  323|       |        // add the temporary value, then check if we've truncated any digits
  324|  2.85k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  325|  2.85k|        bool truncated = is_truncated(p, pend);
  326|  2.85k|        if (truncated) {
  ------------------
  |  Branch (326:13): [True: 2.02k, False: 834]
  ------------------
  327|  2.02k|          round_up_bigint(result, digits);
  328|  2.02k|        }
  329|  2.85k|        return;
  330|   107k|      } else {
  331|   107k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  332|   107k|        counter = 0;
  333|   107k|        value = 0;
  334|   107k|      }
  335|   110k|    }
  336|  46.0k|  }
  337|       |
  338|  46.0k|  if (counter != 0) {
  ------------------
  |  Branch (338:7): [True: 0, False: 46.0k]
  ------------------
  339|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  340|      0|  }
  341|  46.0k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  176|  51.8k|skip_zeros(UC const *&first, UC const *last) noexcept {
  177|  51.8k|  uint64_t val;
  178|  64.0k|  while (!cpp20_and_in_constexpr() &&
  ------------------
  |  Branch (178:10): [Folded - Ignored]
  ------------------
  179|  64.0k|         std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (179:10): [True: 30.1k, False: 33.8k]
  ------------------
  180|  30.1k|    ::memcpy(&val, first, sizeof(uint64_t));
  181|  30.1k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (181:9): [True: 18.0k, False: 12.1k]
  ------------------
  182|  18.0k|      break;
  183|  18.0k|    }
  184|  12.1k|    first += int_cmp_len<UC>();
  185|  12.1k|  }
  186|  96.4k|  while (first != last) {
  ------------------
  |  Branch (186:10): [True: 93.7k, False: 2.75k]
  ------------------
  187|  93.7k|    if (*first != UC('0')) {
  ------------------
  |  Branch (187:9): [True: 49.1k, False: 44.5k]
  ------------------
  188|  49.1k|      break;
  189|  49.1k|    }
  190|  44.5k|    first++;
  191|  44.5k|  }
  192|  51.8k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  227|   198k|                   size_t &count) noexcept {
  228|   198k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  229|   198k|  p += 8;
  230|   198k|  counter += 8;
  231|   198k|  count += 8;
  232|   198k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  237|   479k|                size_t &count) noexcept {
  238|   479k|  value = value * 10 + limb(*p - UC('0'));
  239|   479k|  p++;
  240|   479k|  counter++;
  241|   479k|  count++;
  242|   479k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  245|   173k|add_native(bigint &big, limb power, limb value) noexcept {
  246|   173k|  big.mul(power);
  247|   173k|  big.add(value);
  248|   173k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  198|  3.33k|is_truncated(UC const *first, UC const *last) noexcept {
  199|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  200|  3.33k|  uint64_t val;
  201|  6.07k|  while (!cpp20_and_in_constexpr() &&
  ------------------
  |  Branch (201:10): [Folded - Ignored]
  ------------------
  202|  6.07k|         std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (202:10): [True: 3.80k, False: 2.26k]
  ------------------
  203|  3.80k|    ::memcpy(&val, first, sizeof(uint64_t));
  204|  3.80k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (204:9): [True: 1.06k, False: 2.74k]
  ------------------
  205|  1.06k|      return true;
  206|  1.06k|    }
  207|  2.74k|    first += int_cmp_len<UC>();
  208|  2.74k|  }
  209|  3.85k|  while (first != last) {
  ------------------
  |  Branch (209:10): [True: 2.77k, False: 1.07k]
  ------------------
  210|  2.77k|    if (*first != UC('0')) {
  ------------------
  |  Branch (210:9): [True: 1.19k, False: 1.58k]
  ------------------
  211|  1.19k|      return true;
  212|  1.19k|    }
  213|  1.58k|    ++first;
  214|  1.58k|  }
  215|  1.07k|  return false;
  216|  2.26k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  220|    219|is_truncated(span<UC const> s) noexcept {
  221|    219|  return is_truncated(s.ptr, s.ptr + s.len());
  222|    219|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  251|  2.17k|round_up_bigint(bigint &big, size_t &count) noexcept {
  252|       |  // need to round-up the digits, but need to avoid rounding
  253|       |  // ....9999 to ...10000, which could cause a false halfway point.
  254|  2.17k|  add_native(big, 10, 1);
  255|  2.17k|  count++;
  256|  2.17k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  345|    514|positive_digit_comp(bigint &bigmant, int32_t exponent) noexcept {
  346|    514|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  195|    514|  { ((void)(x)); }
  ------------------
  347|    514|  adjusted_mantissa answer;
  348|    514|  bool truncated;
  349|    514|  answer.mantissa = bigmant.hi64(truncated);
  350|    514|  int bias = binary_format<T>::mantissa_explicit_bits() -
  351|    514|             binary_format<T>::minimum_exponent();
  352|    514|  answer.power2 = bigmant.bit_length() - 64 + bias;
  353|       |
  354|    514|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  355|    514|    round_nearest_tie_even(
  356|    514|        a, shift,
  357|    514|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  358|    514|          return is_above || (is_halfway && truncated) ||
  359|    514|                 (is_odd && is_halfway);
  360|    514|        });
  361|    514|  });
  362|       |
  363|    514|  return answer;
  364|    514|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
  110|    514|                                                         callback cb) noexcept {
  111|    514|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|    514|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 514]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|    514|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|    514|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 514]
  ------------------
  129|    514|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|    514|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|    514|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 514]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|    514|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  354|    514|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  355|    514|    round_nearest_tie_even(
  356|    514|        a, shift,
  357|    514|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  358|    514|          return is_above || (is_halfway && truncated) ||
  359|    514|                 (is_odd && is_halfway);
  360|    514|        });
  361|    514|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  145|    514|                       callback cb) noexcept {
  146|    514|  uint64_t const mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 514]
  ------------------
  147|    514|  uint64_t const halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 514]
  ------------------
  148|    514|  uint64_t truncated_bits = am.mantissa & mask;
  149|    514|  bool is_above = truncated_bits > halfway;
  150|    514|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|    514|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 514]
  ------------------
  154|      0|    am.mantissa = 0;
  155|    514|  } else {
  156|    514|    am.mantissa >>= shift;
  157|    514|  }
  158|    514|  am.power2 += shift;
  159|       |
  160|    514|  bool is_odd = (am.mantissa & 1) == 1;
  161|    514|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|    514|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  357|    514|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  358|    514|          return is_above || (is_halfway && truncated) ||
  ------------------
  |  Branch (358:18): [True: 74, False: 440]
  |  Branch (358:31): [True: 348, False: 92]
  |  Branch (358:45): [True: 58, False: 290]
  ------------------
  359|    514|                 (is_odd && is_halfway);
  ------------------
  |  Branch (359:19): [True: 56, False: 326]
  |  Branch (359:29): [True: 32, False: 24]
  ------------------
  360|    514|        });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  373|  18.6k|    bigint &bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  374|  18.6k|  bigint &real_digits = bigmant;
  375|  18.6k|  int32_t real_exp = exponent;
  376|       |
  377|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  378|  18.6k|  adjusted_mantissa am_b = am;
  379|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with
  380|       |  // -Wnoexcept-type.
  381|  18.6k|  round<T>(am_b,
  382|  18.6k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
  383|  18.6k|  T b;
  384|  18.6k|  to_float(false, am_b, b);
  385|  18.6k|  adjusted_mantissa theor = to_extended_halfway(b);
  386|  18.6k|  bigint theor_digits(theor.mantissa);
  387|  18.6k|  int32_t theor_exp = theor.power2;
  388|       |
  389|       |  // scale real digits and theor digits to be same power.
  390|  18.6k|  int32_t pow2_exp = theor_exp - real_exp;
  391|  18.6k|  uint32_t pow5_exp = uint32_t(-real_exp);
  392|  18.6k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (392:7): [True: 18.6k, False: 0]
  ------------------
  393|  18.6k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  195|  18.6k|  { ((void)(x)); }
  ------------------
  394|  18.6k|  }
  395|  18.6k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (395:7): [True: 18.6k, False: 0]
  ------------------
  396|  18.6k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  195|  18.6k|  { ((void)(x)); }
  ------------------
  397|  18.6k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (397:14): [True: 0, False: 0]
  ------------------
  398|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  195|      0|  { ((void)(x)); }
  ------------------
  399|      0|  }
  400|       |
  401|       |  // compare digits, and use it to director rounding
  402|  18.6k|  int ord = real_digits.compare(theor_digits);
  403|  18.6k|  adjusted_mantissa answer = am;
  404|  18.6k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  405|  18.6k|    round_nearest_tie_even(
  406|  18.6k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  407|  18.6k|          (void)_;  // not needed, since we've done our comparison
  408|  18.6k|          (void)__; // not needed, since we've done our comparison
  409|  18.6k|          if (ord > 0) {
  410|  18.6k|            return true;
  411|  18.6k|          } else if (ord < 0) {
  412|  18.6k|            return false;
  413|  18.6k|          } else {
  414|  18.6k|            return is_odd;
  415|  18.6k|          }
  416|  18.6k|        });
  417|  18.6k|  });
  418|       |
  419|  18.6k|  return answer;
  420|  18.6k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
  110|  18.6k|                                                         callback cb) noexcept {
  111|  18.6k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  18.6k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 18.6k]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  18.6k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  18.6k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 18.6k]
  ------------------
  129|  18.6k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  18.6k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  18.6k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 18.6k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  18.6k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  382|  18.6k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  165|  46.0k|round_down(adjusted_mantissa &am, int32_t shift) noexcept {
  166|  46.0k|  if (shift == 64) {
  ------------------
  |  Branch (166:7): [True: 0, False: 46.0k]
  ------------------
  167|      0|    am.mantissa = 0;
  168|  46.0k|  } else {
  169|  46.0k|    am.mantissa >>= shift;
  170|  46.0k|  }
  171|  46.0k|  am.power2 += shift;
  172|  46.0k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   99|  18.6k|to_extended_halfway(T value) noexcept {
  100|  18.6k|  adjusted_mantissa am = to_extended(value);
  101|  18.6k|  am.mantissa <<= 1;
  102|  18.6k|  am.mantissa += 1;
  103|  18.6k|  am.power2 -= 1;
  104|  18.6k|  return am;
  105|  18.6k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   64|  18.6k|to_extended(T value) noexcept {
   65|  18.6k|  using equiv_uint = equiv_uint_t<T>;
   66|  18.6k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   67|  18.6k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   68|  18.6k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   69|       |
   70|  18.6k|  adjusted_mantissa am;
   71|  18.6k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() -
   72|  18.6k|                 binary_format<T>::minimum_exponent();
   73|  18.6k|  equiv_uint bits;
   74|       |#if FASTFLOAT_HAS_BIT_CAST
   75|       |  bits = std::bit_cast<equiv_uint>(value);
   76|       |#else
   77|  18.6k|  ::memcpy(&bits, &value, sizeof(T));
   78|  18.6k|#endif
   79|  18.6k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (79:7): [True: 0, False: 18.6k]
  ------------------
   80|       |    // denormal
   81|      0|    am.power2 = 1 - bias;
   82|      0|    am.mantissa = bits & mantissa_mask;
   83|  18.6k|  } else {
   84|       |    // normal
   85|  18.6k|    am.power2 = int32_t((bits & exponent_mask) >>
   86|  18.6k|                        binary_format<T>::mantissa_explicit_bits());
   87|  18.6k|    am.power2 -= bias;
   88|  18.6k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   89|  18.6k|  }
   90|       |
   91|  18.6k|  return am;
   92|  18.6k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
  110|  18.6k|                                                         callback cb) noexcept {
  111|  18.6k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  18.6k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 18.6k]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  18.6k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  18.6k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 18.6k]
  ------------------
  129|  18.6k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  18.6k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  18.6k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 18.6k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  18.6k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  404|  18.6k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  405|  18.6k|    round_nearest_tie_even(
  406|  18.6k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  407|  18.6k|          (void)_;  // not needed, since we've done our comparison
  408|  18.6k|          (void)__; // not needed, since we've done our comparison
  409|  18.6k|          if (ord > 0) {
  410|  18.6k|            return true;
  411|  18.6k|          } else if (ord < 0) {
  412|  18.6k|            return false;
  413|  18.6k|          } else {
  414|  18.6k|            return is_odd;
  415|  18.6k|          }
  416|  18.6k|        });
  417|  18.6k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  145|  18.6k|                       callback cb) noexcept {
  146|  18.6k|  uint64_t const mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 18.6k]
  ------------------
  147|  18.6k|  uint64_t const halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 18.6k]
  ------------------
  148|  18.6k|  uint64_t truncated_bits = am.mantissa & mask;
  149|  18.6k|  bool is_above = truncated_bits > halfway;
  150|  18.6k|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|  18.6k|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 18.6k]
  ------------------
  154|      0|    am.mantissa = 0;
  155|  18.6k|  } else {
  156|  18.6k|    am.mantissa >>= shift;
  157|  18.6k|  }
  158|  18.6k|  am.power2 += shift;
  159|       |
  160|  18.6k|  bool is_odd = (am.mantissa & 1) == 1;
  161|  18.6k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|  18.6k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  406|  18.6k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  407|  18.6k|          (void)_;  // not needed, since we've done our comparison
  408|  18.6k|          (void)__; // not needed, since we've done our comparison
  409|  18.6k|          if (ord > 0) {
  ------------------
  |  Branch (409:15): [True: 338, False: 18.3k]
  ------------------
  410|    338|            return true;
  411|  18.3k|          } else if (ord < 0) {
  ------------------
  |  Branch (411:22): [True: 15.0k, False: 3.25k]
  ------------------
  412|  15.0k|            return false;
  413|  15.0k|          } else {
  414|  3.25k|            return is_odd;
  415|  3.25k|          }
  416|  18.6k|        });
_ZN10fast_float19scientific_exponentIDiEEiRNS_22parsed_number_string_tIT_EE:
   43|    184|scientific_exponent(parsed_number_string_t<UC> &num) noexcept {
   44|    184|  uint64_t mantissa = num.mantissa;
   45|    184|  int32_t exponent = int32_t(num.exponent);
   46|    920|  while (mantissa >= 10000) {
  ------------------
  |  Branch (46:10): [True: 736, False: 184]
  ------------------
   47|    736|    mantissa /= 10000;
   48|    736|    exponent += 4;
   49|    736|  }
   50|    368|  while (mantissa >= 100) {
  ------------------
  |  Branch (50:10): [True: 184, False: 184]
  ------------------
   51|    184|    mantissa /= 100;
   52|    184|    exponent += 2;
   53|    184|  }
   54|    184|  while (mantissa >= 10) {
  ------------------
  |  Branch (54:10): [True: 0, False: 184]
  ------------------
   55|      0|    mantissa /= 10;
   56|      0|    exponent += 1;
   57|      0|  }
   58|    184|  return exponent;
   59|    184|}
_ZN10fast_float14parse_mantissaIDiEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  262|    184|               size_t max_digits, size_t &digits) noexcept {
  263|       |  // try to minimize the number of big integer and scalar multiplication.
  264|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  265|       |  // scalar value (9 or 19 digits) for each step.
  266|    184|  size_t counter = 0;
  267|    184|  digits = 0;
  268|    184|  limb value = 0;
  269|    184|#ifdef FASTFLOAT_64BIT_LIMB
  270|    184|  size_t step = 19;
  271|       |#else
  272|       |  size_t step = 9;
  273|       |#endif
  274|       |
  275|       |  // process all integer digits.
  276|    184|  UC const *p = num.integer.ptr;
  277|    184|  UC const *pend = p + num.integer.len();
  278|    184|  skip_zeros(p, pend);
  279|       |  // process all digits, in increments of step per loop
  280|    418|  while (p != pend) {
  ------------------
  |  Branch (280:10): [True: 234, False: 184]
  ------------------
  281|    334|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (281:12): [True: 118, False: 216]
  |  Branch (281:45): [True: 100, False: 18]
  ------------------
  282|    334|           (max_digits - digits >= 8)) {
  ------------------
  |  Branch (282:12): [True: 100, False: 0]
  ------------------
  283|    100|      parse_eight_digits(p, value, counter, digits);
  284|    100|    }
  285|  1.47k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (285:12): [True: 1.42k, False: 50]
  |  Branch (285:30): [True: 1.24k, False: 184]
  |  Branch (285:43): [True: 1.24k, False: 0]
  ------------------
  286|  1.24k|      parse_one_digit(p, value, counter, digits);
  287|  1.24k|    }
  288|    234|    if (digits == max_digits) {
  ------------------
  |  Branch (288:9): [True: 0, False: 234]
  ------------------
  289|       |      // add the temporary value, then check if we've truncated any digits
  290|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  291|      0|      bool truncated = is_truncated(p, pend);
  292|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (292:11): [True: 0, False: 0]
  ------------------
  293|      0|        truncated |= is_truncated(num.fraction);
  294|      0|      }
  295|      0|      if (truncated) {
  ------------------
  |  Branch (295:11): [True: 0, False: 0]
  ------------------
  296|      0|        round_up_bigint(result, digits);
  297|      0|      }
  298|      0|      return;
  299|    234|    } else {
  300|    234|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|    234|      counter = 0;
  302|    234|      value = 0;
  303|    234|    }
  304|    234|  }
  305|       |
  306|       |  // add our fraction digits, if they're available.
  307|    184|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (307:7): [True: 134, False: 50]
  ------------------
  308|    134|    p = num.fraction.ptr;
  309|    134|    pend = p + num.fraction.len();
  310|    134|    if (digits == 0) {
  ------------------
  |  Branch (310:9): [True: 0, False: 134]
  ------------------
  311|      0|      skip_zeros(p, pend);
  312|      0|    }
  313|       |    // process all digits, in increments of step per loop
  314|    348|    while (p != pend) {
  ------------------
  |  Branch (314:12): [True: 214, False: 134]
  ------------------
  315|    446|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (315:14): [True: 258, False: 188]
  |  Branch (315:47): [True: 232, False: 26]
  ------------------
  316|    446|             (max_digits - digits >= 8)) {
  ------------------
  |  Branch (316:14): [True: 232, False: 0]
  ------------------
  317|    232|        parse_eight_digits(p, value, counter, digits);
  318|    232|      }
  319|    948|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (319:14): [True: 868, False: 80]
  |  Branch (319:32): [True: 734, False: 134]
  |  Branch (319:45): [True: 734, False: 0]
  ------------------
  320|    734|        parse_one_digit(p, value, counter, digits);
  321|    734|      }
  322|    214|      if (digits == max_digits) {
  ------------------
  |  Branch (322:11): [True: 0, False: 214]
  ------------------
  323|       |        // add the temporary value, then check if we've truncated any digits
  324|      0|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  325|      0|        bool truncated = is_truncated(p, pend);
  326|      0|        if (truncated) {
  ------------------
  |  Branch (326:13): [True: 0, False: 0]
  ------------------
  327|      0|          round_up_bigint(result, digits);
  328|      0|        }
  329|      0|        return;
  330|    214|      } else {
  331|    214|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  332|    214|        counter = 0;
  333|    214|        value = 0;
  334|    214|      }
  335|    214|    }
  336|    134|  }
  337|       |
  338|    184|  if (counter != 0) {
  ------------------
  |  Branch (338:7): [True: 0, False: 184]
  ------------------
  339|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  340|      0|  }
  341|    184|}
_ZN10fast_float10skip_zerosIDiEEvRPKT_S3_:
  176|    184|skip_zeros(UC const *&first, UC const *last) noexcept {
  177|    184|  uint64_t val;
  178|    184|  while (!cpp20_and_in_constexpr() &&
  ------------------
  |  Branch (178:10): [Folded - Ignored]
  ------------------
  179|    184|         std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (179:10): [True: 184, False: 0]
  ------------------
  180|    184|    ::memcpy(&val, first, sizeof(uint64_t));
  181|    184|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (181:9): [True: 184, False: 0]
  ------------------
  182|    184|      break;
  183|    184|    }
  184|      0|    first += int_cmp_len<UC>();
  185|      0|  }
  186|    220|  while (first != last) {
  ------------------
  |  Branch (186:10): [True: 220, False: 0]
  ------------------
  187|    220|    if (*first != UC('0')) {
  ------------------
  |  Branch (187:9): [True: 184, False: 36]
  ------------------
  188|    184|      break;
  189|    184|    }
  190|     36|    first++;
  191|     36|  }
  192|    184|}
_ZN10fast_float18parse_eight_digitsIDiEEvRPKT_RmS5_S5_:
  227|    332|                   size_t &count) noexcept {
  228|    332|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  229|    332|  p += 8;
  230|    332|  counter += 8;
  231|    332|  count += 8;
  232|    332|}
_ZN10fast_float15parse_one_digitIDiEEvRPKT_RmS5_S5_:
  237|  1.97k|                size_t &count) noexcept {
  238|  1.97k|  value = value * 10 + limb(*p - UC('0'));
  239|  1.97k|  p++;
  240|  1.97k|  counter++;
  241|  1.97k|  count++;
  242|  1.97k|}
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  437|  29.9k|digit_comp(parsed_number_string_t<UC> &num, adjusted_mantissa am) noexcept {
  438|       |  // remove the invalid exponent bias
  439|  29.9k|  am.power2 -= invalid_am_bias;
  440|       |
  441|  29.9k|  int32_t sci_exp = scientific_exponent(num);
  442|  29.9k|  size_t max_digits = binary_format<T>::max_digits();
  443|  29.9k|  size_t digits = 0;
  444|  29.9k|  bigint bigmant;
  445|  29.9k|  parse_mantissa(bigmant, num, max_digits, digits);
  446|       |  // can't underflow, since digits is at most max_digits.
  447|  29.9k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  448|  29.9k|  if (exponent >= 0) {
  ------------------
  |  Branch (448:7): [True: 2.69k, False: 27.2k]
  ------------------
  449|  2.69k|    return positive_digit_comp<T>(bigmant, exponent);
  450|  27.2k|  } else {
  451|  27.2k|    return negative_digit_comp<T>(bigmant, am, exponent);
  452|  27.2k|  }
  453|  29.9k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  345|  2.74k|positive_digit_comp(bigint &bigmant, int32_t exponent) noexcept {
  346|  2.74k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  195|  2.74k|  { ((void)(x)); }
  ------------------
  347|  2.74k|  adjusted_mantissa answer;
  348|  2.74k|  bool truncated;
  349|  2.74k|  answer.mantissa = bigmant.hi64(truncated);
  350|  2.74k|  int bias = binary_format<T>::mantissa_explicit_bits() -
  351|  2.74k|             binary_format<T>::minimum_exponent();
  352|  2.74k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  353|       |
  354|  2.74k|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  355|  2.74k|    round_nearest_tie_even(
  356|  2.74k|        a, shift,
  357|  2.74k|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  358|  2.74k|          return is_above || (is_halfway && truncated) ||
  359|  2.74k|                 (is_odd && is_halfway);
  360|  2.74k|        });
  361|  2.74k|  });
  362|       |
  363|  2.74k|  return answer;
  364|  2.74k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
  110|  2.74k|                                                         callback cb) noexcept {
  111|  2.74k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  2.74k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 2.74k]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  2.74k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  2.74k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 429, False: 2.31k]
  ------------------
  129|  2.74k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|    429|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|    429|    am.power2++;
  132|    429|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  2.74k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  2.74k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 2.74k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  2.74k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  354|  2.74k|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  355|  2.74k|    round_nearest_tie_even(
  356|  2.74k|        a, shift,
  357|  2.74k|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  358|  2.74k|          return is_above || (is_halfway && truncated) ||
  359|  2.74k|                 (is_odd && is_halfway);
  360|  2.74k|        });
  361|  2.74k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  145|  2.74k|                       callback cb) noexcept {
  146|  2.74k|  uint64_t const mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 2.74k]
  ------------------
  147|  2.74k|  uint64_t const halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 2.74k]
  ------------------
  148|  2.74k|  uint64_t truncated_bits = am.mantissa & mask;
  149|  2.74k|  bool is_above = truncated_bits > halfway;
  150|  2.74k|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|  2.74k|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 2.74k]
  ------------------
  154|      0|    am.mantissa = 0;
  155|  2.74k|  } else {
  156|  2.74k|    am.mantissa >>= shift;
  157|  2.74k|  }
  158|  2.74k|  am.power2 += shift;
  159|       |
  160|  2.74k|  bool is_odd = (am.mantissa & 1) == 1;
  161|  2.74k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|  2.74k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  357|  2.74k|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  358|  2.74k|          return is_above || (is_halfway && truncated) ||
  ------------------
  |  Branch (358:18): [True: 479, False: 2.26k]
  |  Branch (358:31): [True: 1.59k, False: 677]
  |  Branch (358:45): [True: 615, False: 976]
  ------------------
  359|  2.74k|                 (is_odd && is_halfway);
  ------------------
  |  Branch (359:19): [True: 247, False: 1.40k]
  |  Branch (359:29): [True: 60, False: 187]
  ------------------
  360|  2.74k|        });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  373|  27.3k|    bigint &bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  374|  27.3k|  bigint &real_digits = bigmant;
  375|  27.3k|  int32_t real_exp = exponent;
  376|       |
  377|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  378|  27.3k|  adjusted_mantissa am_b = am;
  379|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with
  380|       |  // -Wnoexcept-type.
  381|  27.3k|  round<T>(am_b,
  382|  27.3k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
  383|  27.3k|  T b;
  384|  27.3k|  to_float(false, am_b, b);
  385|  27.3k|  adjusted_mantissa theor = to_extended_halfway(b);
  386|  27.3k|  bigint theor_digits(theor.mantissa);
  387|  27.3k|  int32_t theor_exp = theor.power2;
  388|       |
  389|       |  // scale real digits and theor digits to be same power.
  390|  27.3k|  int32_t pow2_exp = theor_exp - real_exp;
  391|  27.3k|  uint32_t pow5_exp = uint32_t(-real_exp);
  392|  27.3k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (392:7): [True: 27.3k, False: 0]
  ------------------
  393|  27.3k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  195|  27.3k|  { ((void)(x)); }
  ------------------
  394|  27.3k|  }
  395|  27.3k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (395:7): [True: 2.55k, False: 24.8k]
  ------------------
  396|  2.55k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  195|  2.55k|  { ((void)(x)); }
  ------------------
  397|  24.8k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (397:14): [True: 24.7k, False: 74]
  ------------------
  398|  24.7k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  195|  24.7k|  { ((void)(x)); }
  ------------------
  399|  24.7k|  }
  400|       |
  401|       |  // compare digits, and use it to director rounding
  402|  27.3k|  int ord = real_digits.compare(theor_digits);
  403|  27.3k|  adjusted_mantissa answer = am;
  404|  27.3k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  405|  27.3k|    round_nearest_tie_even(
  406|  27.3k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  407|  27.3k|          (void)_;  // not needed, since we've done our comparison
  408|  27.3k|          (void)__; // not needed, since we've done our comparison
  409|  27.3k|          if (ord > 0) {
  410|  27.3k|            return true;
  411|  27.3k|          } else if (ord < 0) {
  412|  27.3k|            return false;
  413|  27.3k|          } else {
  414|  27.3k|            return is_odd;
  415|  27.3k|          }
  416|  27.3k|        });
  417|  27.3k|  });
  418|       |
  419|  27.3k|  return answer;
  420|  27.3k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
  110|  27.3k|                                                         callback cb) noexcept {
  111|  27.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  27.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 108, False: 27.2k]
  ------------------
  113|       |    // have a denormal float
  114|    108|    int32_t shift = -am.power2 + 1;
  115|    108|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|    108|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 108, False: 0]
  ------------------
  118|    108|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|    108|                    ? 0
  120|    108|                    : 1;
  121|    108|    return;
  122|    108|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  27.2k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  27.2k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 27.2k]
  ------------------
  129|  27.2k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  27.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  27.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 27.2k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  27.2k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  382|  27.3k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   99|  27.3k|to_extended_halfway(T value) noexcept {
  100|  27.3k|  adjusted_mantissa am = to_extended(value);
  101|  27.3k|  am.mantissa <<= 1;
  102|  27.3k|  am.mantissa += 1;
  103|  27.3k|  am.power2 -= 1;
  104|  27.3k|  return am;
  105|  27.3k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   64|  27.3k|to_extended(T value) noexcept {
   65|  27.3k|  using equiv_uint = equiv_uint_t<T>;
   66|  27.3k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   67|  27.3k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   68|  27.3k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   69|       |
   70|  27.3k|  adjusted_mantissa am;
   71|  27.3k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() -
   72|  27.3k|                 binary_format<T>::minimum_exponent();
   73|  27.3k|  equiv_uint bits;
   74|       |#if FASTFLOAT_HAS_BIT_CAST
   75|       |  bits = std::bit_cast<equiv_uint>(value);
   76|       |#else
   77|  27.3k|  ::memcpy(&bits, &value, sizeof(T));
   78|  27.3k|#endif
   79|  27.3k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (79:7): [True: 108, False: 27.2k]
  ------------------
   80|       |    // denormal
   81|    108|    am.power2 = 1 - bias;
   82|    108|    am.mantissa = bits & mantissa_mask;
   83|  27.2k|  } else {
   84|       |    // normal
   85|  27.2k|    am.power2 = int32_t((bits & exponent_mask) >>
   86|  27.2k|                        binary_format<T>::mantissa_explicit_bits());
   87|  27.2k|    am.power2 -= bias;
   88|  27.2k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   89|  27.2k|  }
   90|       |
   91|  27.3k|  return am;
   92|  27.3k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
  110|  27.3k|                                                         callback cb) noexcept {
  111|  27.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  27.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 108, False: 27.2k]
  ------------------
  113|       |    // have a denormal float
  114|    108|    int32_t shift = -am.power2 + 1;
  115|    108|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|    108|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 108, False: 0]
  ------------------
  118|    108|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|    108|                    ? 0
  120|    108|                    : 1;
  121|    108|    return;
  122|    108|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  27.2k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  27.2k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 74, False: 27.1k]
  ------------------
  129|  27.2k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|     74|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|     74|    am.power2++;
  132|     74|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  27.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  27.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 27.2k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  27.2k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  404|  27.3k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  405|  27.3k|    round_nearest_tie_even(
  406|  27.3k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  407|  27.3k|          (void)_;  // not needed, since we've done our comparison
  408|  27.3k|          (void)__; // not needed, since we've done our comparison
  409|  27.3k|          if (ord > 0) {
  410|  27.3k|            return true;
  411|  27.3k|          } else if (ord < 0) {
  412|  27.3k|            return false;
  413|  27.3k|          } else {
  414|  27.3k|            return is_odd;
  415|  27.3k|          }
  416|  27.3k|        });
  417|  27.3k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  145|  27.3k|                       callback cb) noexcept {
  146|  27.3k|  uint64_t const mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 27.3k]
  ------------------
  147|  27.3k|  uint64_t const halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 27.3k]
  ------------------
  148|  27.3k|  uint64_t truncated_bits = am.mantissa & mask;
  149|  27.3k|  bool is_above = truncated_bits > halfway;
  150|  27.3k|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|  27.3k|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 27.3k]
  ------------------
  154|      0|    am.mantissa = 0;
  155|  27.3k|  } else {
  156|  27.3k|    am.mantissa >>= shift;
  157|  27.3k|  }
  158|  27.3k|  am.power2 += shift;
  159|       |
  160|  27.3k|  bool is_odd = (am.mantissa & 1) == 1;
  161|  27.3k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|  27.3k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  406|  27.3k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  407|  27.3k|          (void)_;  // not needed, since we've done our comparison
  408|  27.3k|          (void)__; // not needed, since we've done our comparison
  409|  27.3k|          if (ord > 0) {
  ------------------
  |  Branch (409:15): [True: 11.3k, False: 16.0k]
  ------------------
  410|  11.3k|            return true;
  411|  16.0k|          } else if (ord < 0) {
  ------------------
  |  Branch (411:22): [True: 15.5k, False: 480]
  ------------------
  412|  15.5k|            return false;
  413|  15.5k|          } else {
  414|    480|            return is_odd;
  415|    480|          }
  416|  27.3k|        });
_ZN10fast_float10digit_compIdDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  437|    184|digit_comp(parsed_number_string_t<UC> &num, adjusted_mantissa am) noexcept {
  438|       |  // remove the invalid exponent bias
  439|    184|  am.power2 -= invalid_am_bias;
  440|       |
  441|    184|  int32_t sci_exp = scientific_exponent(num);
  442|    184|  size_t max_digits = binary_format<T>::max_digits();
  443|    184|  size_t digits = 0;
  444|    184|  bigint bigmant;
  445|    184|  parse_mantissa(bigmant, num, max_digits, digits);
  446|       |  // can't underflow, since digits is at most max_digits.
  447|    184|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  448|    184|  if (exponent >= 0) {
  ------------------
  |  Branch (448:7): [True: 50, False: 134]
  ------------------
  449|     50|    return positive_digit_comp<T>(bigmant, exponent);
  450|    134|  } else {
  451|    134|    return negative_digit_comp<T>(bigmant, am, exponent);
  452|    134|  }
  453|    184|}

_ZN10fast_float6detail25adjust_for_feature_macrosENS_12chars_formatE:
 1226|  2.59M|constexpr chars_format adjust_for_feature_macros(chars_format fmt) {
 1227|  2.59M|  return fmt
 1228|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS
 1229|       |         | chars_format::allow_leading_plus
 1230|       |#endif
 1231|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE
 1232|       |         | chars_format::skip_white_space
 1233|       |#endif
 1234|  2.59M|      ;
 1235|  2.59M|}
_ZN10fast_floatanENS_12chars_formatES0_:
 1191|  8.49M|constexpr chars_format operator&(chars_format lhs, chars_format rhs) noexcept {
 1192|  8.49M|  using int_type = std::underlying_type<chars_format>::type;
 1193|  8.49M|  return static_cast<chars_format>(static_cast<int_type>(lhs) &
 1194|  8.49M|                                   static_cast<int_type>(rhs));
 1195|  8.49M|}
_ZN10fast_float4spanIKcEC2Ev:
  289|  1.70M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  287|  1.01M|  constexpr span(T const *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  291|   340k|  constexpr size_t len() const noexcept { return length; }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  555|   616k|inline constexpr int binary_format<float>::min_exponent_fast_path() {
  556|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  557|       |  return 0;
  558|       |#else
  559|   616k|  return -10;
  560|   616k|#endif
  561|   616k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  623|   578k|inline constexpr int binary_format<float>::max_exponent_fast_path() {
  624|   578k|  return 10;
  625|   578k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  633|   515k|inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  634|   515k|  return uint64_t(2) << mantissa_explicit_bits();
  635|   515k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  569|  1.37M|inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  570|  1.37M|  return 23;
  571|  1.37M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  914|   493k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  915|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  916|   493k|  return (void)powers_of_ten[0], powers_of_ten[power];
  917|   493k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  419|   470k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  932|   188k|template <> inline constexpr int binary_format<float>::smallest_power_of_ten() {
  933|   188k|  return -64;
  934|   188k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  923|   187k|template <> inline constexpr int binary_format<float>::largest_power_of_ten() {
  924|   187k|  return 38;
  925|   187k|}
_ZN10fast_float14leading_zeroesEm:
  339|   407k|leading_zeroes(uint64_t input_num) {
  340|   407k|  assert(input_num > 0);
  341|   407k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (341:7): [Folded - Ignored]
  ------------------
  342|      0|    return leading_zeroes_generic(input_num);
  343|      0|  }
  344|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  345|       |#if defined(_M_X64) || defined(_M_ARM64)
  346|       |  unsigned long leading_zero = 0;
  347|       |  // Search the mask data from most significant bit (MSB)
  348|       |  // to least significant bit (LSB) for a set bit (1).
  349|       |  _BitScanReverse64(&leading_zero, input_num);
  350|       |  return (int)(63 - leading_zero);
  351|       |#else
  352|       |  return leading_zeroes_generic(input_num);
  353|       |#endif
  354|       |#else
  355|   407k|  return __builtin_clzll(input_num);
  356|   407k|#endif
  357|   407k|}
_ZN10fast_float19full_multiplicationEmm:
  391|   517k|full_multiplication(uint64_t a, uint64_t b) {
  392|   517k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (392:7): [Folded - Ignored]
  ------------------
  393|      0|    value128 answer;
  394|      0|    answer.low = umul128_generic(a, b, &answer.high);
  395|      0|    return answer;
  396|      0|  }
  397|   517k|  value128 answer;
  398|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  399|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  400|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  401|       |  answer.high = __umulh(a, b);
  402|       |  answer.low = a * b;
  403|       |#elif defined(FASTFLOAT_32BIT) ||                                              \
  404|       |    (defined(_WIN64) && !defined(__clang__) && !defined(_M_ARM64))
  405|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  406|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  407|       |  __uint128_t r = ((__uint128_t)a) * b;
  408|   517k|  answer.low = uint64_t(r);
  409|   517k|  answer.high = uint64_t(r >> 64);
  410|       |#else
  411|       |  answer.low = umul128_generic(a, b, &answer.high);
  412|       |#endif
  413|   517k|  return answer;
  414|   517k|}
_ZN10fast_float8value128C2Ev:
  305|   517k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  597|   218k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  598|   218k|  return -127;
  599|   218k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  589|  59.9k|inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  590|  59.9k|  return -17;
  591|  59.9k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  579|  58.3k|inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  580|  58.3k|  return 10;
  581|  58.3k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  425|   142k|  constexpr bool operator!=(adjusted_mantissa const &o) const {
  426|   142k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (426:12): [True: 49.3k, False: 93.1k]
  |  Branch (426:38): [True: 0, False: 93.1k]
  ------------------
  427|   142k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  940|  19.2k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  941|  19.2k|  return 114;
  942|  19.2k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
 1031|  84.9k|template <typename UC> static constexpr int int_cmp_len() {
 1032|  84.9k|  return sizeof(uint64_t) / sizeof(UC);
 1033|  84.9k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
 1021|  33.9k|template <typename UC> static constexpr uint64_t int_cmp_zeros() {
 1022|  33.9k|  static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4),
 1023|  33.9k|                "Unsupported character size");
 1024|  33.9k|  return (sizeof(UC) == 1) ? 0x3030303030303030
  ------------------
  |  Branch (1024:10): [Folded - Ignored]
  ------------------
 1025|  33.9k|         : (sizeof(UC) == 2)
  ------------------
  |  Branch (1025:12): [Folded - Ignored]
  ------------------
 1026|      0|             ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 |
 1027|      0|                uint64_t(UC('0')) << 16 | UC('0'))
 1028|      0|             : (uint64_t(UC('0')) << 32 | UC('0'));
 1029|  33.9k|}
_ZN10fast_float4spanImEC2EPKmm:
  287|  71.3k|  constexpr span(T const *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  291|   233k|  constexpr size_t len() const noexcept { return length; }
_ZNK10fast_float4spanImEixEm:
  293|   127k|  FASTFLOAT_CONSTEXPR14 const T &operator[](size_t index) const noexcept {
  294|   127k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  200|   127k|  { ((void)(x)); }
  ------------------
  295|   127k|    return ptr[index];
  296|   127k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  982|   141k|to_float(bool negative, adjusted_mantissa am, T &value) {
  983|   141k|  using equiv_uint = equiv_uint_t<T>;
  984|   141k|  equiv_uint word = equiv_uint(am.mantissa);
  985|   141k|  word = equiv_uint(word | equiv_uint(am.power2)
  986|   141k|                               << binary_format<T>::mantissa_explicit_bits());
  987|   141k|  word =
  988|   141k|      equiv_uint(word | equiv_uint(negative) << binary_format<T>::sign_index());
  989|       |#if FASTFLOAT_HAS_BIT_CAST
  990|       |  value = std::bit_cast<T>(word);
  991|       |#else
  992|   141k|  ::memcpy(&value, &word, sizeof(T));
  993|   141k|#endif
  994|   141k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  613|   141k|template <> inline constexpr int binary_format<float>::sign_index() {
  614|   141k|  return 31;
  615|   141k|}
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  605|   346k|template <> inline constexpr int binary_format<float>::infinite_power() {
  606|   346k|  return 0xFF;
  607|   346k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEci:
   68|   852k|      : format(fmt), decimal_point(dot), base(b) {}
_ZN10fast_float4spanIKDiEC2Ev:
  289|   894k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  287|   454k|  constexpr span(T const *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  291|  3.92k|  constexpr size_t len() const noexcept { return length; }
impl.cpp:_ZN10fast_floatL11int_cmp_lenIDiEEiv:
 1031|    184|template <typename UC> static constexpr int int_cmp_len() {
 1032|    184|  return sizeof(uint64_t) / sizeof(UC);
 1033|    184|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIDiEEmv:
 1021|    184|template <typename UC> static constexpr uint64_t int_cmp_zeros() {
 1022|    184|  static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4),
 1023|    184|                "Unsupported character size");
 1024|    184|  return (sizeof(UC) == 1) ? 0x3030303030303030
  ------------------
  |  Branch (1024:10): [Folded - Ignored]
  ------------------
 1025|    184|         : (sizeof(UC) == 2)
  ------------------
  |  Branch (1025:12): [Folded - Ignored]
  ------------------
 1026|    184|             ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 |
 1027|      0|                uint64_t(UC('0')) << 16 | UC('0'))
 1028|    184|             : (uint64_t(UC('0')) << 32 | UC('0'));
 1029|    184|}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDii:
   68|   447k|      : format(fmt), decimal_point(dot), base(b) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  546|   683k|inline constexpr int binary_format<double>::min_exponent_fast_path() {
  547|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  548|       |  return 0;
  549|       |#else
  550|   683k|  return -22;
  551|   683k|#endif
  552|   683k|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  618|   675k|inline constexpr int binary_format<double>::max_exponent_fast_path() {
  619|   675k|  return 22;
  620|   675k|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  628|   581k|inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  629|   581k|  return uint64_t(2) << mantissa_explicit_bits();
  630|   581k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  564|  1.49M|inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  565|  1.49M|  return 52;
  566|  1.49M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  908|   577k|binary_format<double>::exact_power_of_ten(int64_t power) {
  909|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  910|   577k|  return (void)powers_of_ten[0], powers_of_ten[power];
  911|   577k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  928|   176k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  929|   176k|  return -342;
  930|   176k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  919|   175k|template <> inline constexpr int binary_format<double>::largest_power_of_ten() {
  920|   175k|  return 308;
  921|   175k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  593|   232k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  594|   232k|  return -1023;
  595|   232k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  584|  49.4k|inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  585|  49.4k|  return -4;
  586|  49.4k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  574|  27.8k|inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  575|  27.8k|  return 23;
  576|  27.8k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  936|  30.1k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  937|  30.1k|  return 769;
  938|  30.1k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  982|   133k|to_float(bool negative, adjusted_mantissa am, T &value) {
  983|   133k|  using equiv_uint = equiv_uint_t<T>;
  984|   133k|  equiv_uint word = equiv_uint(am.mantissa);
  985|   133k|  word = equiv_uint(word | equiv_uint(am.power2)
  986|   133k|                               << binary_format<T>::mantissa_explicit_bits());
  987|   133k|  word =
  988|   133k|      equiv_uint(word | equiv_uint(negative) << binary_format<T>::sign_index());
  989|       |#if FASTFLOAT_HAS_BIT_CAST
  990|       |  value = std::bit_cast<T>(word);
  991|       |#else
  992|   133k|  ::memcpy(&value, &word, sizeof(T));
  993|   133k|#endif
  994|   133k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  609|   133k|template <> inline constexpr int binary_format<double>::sign_index() {
  610|   133k|  return 63;
  611|   133k|}
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  601|   336k|template <> inline constexpr int binary_format<double>::infinite_power() {
  602|   336k|  return 0x7FF;
  603|   336k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   415k|           chars_format fmt /*= chars_format::general*/) noexcept {
  187|   415k|  return from_chars_caller<T>::call(first, last, value,
  188|   415k|                                    parse_options_t<UC>(fmt));
  189|   415k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  144|   415k|       parse_options_t<UC> options) noexcept {
  145|   415k|    return from_chars_advanced(first, last, value, options);
  146|   415k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  392|   415k|                    parse_options_t<UC> options) noexcept {
  393|   415k|  return from_chars_advanced_caller<
  394|   415k|      size_t(is_supported_float_type<T>::value) +
  395|   415k|      2 * size_t(is_supported_integer_type<T>::value)>::call(first, last, value,
  396|   415k|                                                             options);
  397|   415k|}
_ZN10fast_float26from_chars_advanced_callerILm1EE4callIfcEENS_19from_chars_result_tIT0_EEPKS4_S7_RT_NS_15parse_options_tIS4_EE:
  375|   415k|       parse_options_t<UC> options) noexcept {
  376|   415k|    return from_chars_float_advanced(first, last, value, options);
  377|   415k|  }
_ZN10fast_float25from_chars_float_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  287|   415k|                          parse_options_t<UC> options) noexcept {
  288|       |
  289|   415k|  static_assert(is_supported_float_type<T>::value,
  290|   415k|                "only some floating-point types are supported");
  291|   415k|  static_assert(is_supported_char_type<UC>::value,
  292|   415k|                "only char, wchar_t, char16_t and char32_t are supported");
  293|       |
  294|   415k|  chars_format const fmt = detail::adjust_for_feature_macros(options.format);
  295|       |
  296|   415k|  from_chars_result_t<UC> answer;
  297|   415k|  if (uint64_t(fmt & chars_format::skip_white_space)) {
  ------------------
  |  Branch (297:7): [True: 0, False: 415k]
  ------------------
  298|      0|    while ((first != last) && fast_float::is_space(*first)) {
  ------------------
  |  Branch (298:12): [True: 0, False: 0]
  |  Branch (298:31): [True: 0, False: 0]
  ------------------
  299|      0|      first++;
  300|      0|    }
  301|      0|  }
  302|   415k|  if (first == last) {
  ------------------
  |  Branch (302:7): [True: 0, False: 415k]
  ------------------
  303|      0|    answer.ec = std::errc::invalid_argument;
  304|      0|    answer.ptr = first;
  305|      0|    return answer;
  306|      0|  }
  307|   415k|  parsed_number_string_t<UC> pns =
  308|   415k|      uint64_t(fmt & detail::basic_json_fmt)
  ------------------
  |  Branch (308:7): [True: 0, False: 415k]
  ------------------
  309|   415k|          ? parse_number_string<true, UC>(first, last, options)
  310|   415k|          : parse_number_string<false, UC>(first, last, options);
  311|   415k|  if (!pns.valid) {
  ------------------
  |  Branch (311:7): [True: 0, False: 415k]
  ------------------
  312|      0|    if (uint64_t(fmt & chars_format::no_infnan)) {
  ------------------
  |  Branch (312:9): [True: 0, False: 0]
  ------------------
  313|      0|      answer.ec = std::errc::invalid_argument;
  314|      0|      answer.ptr = first;
  315|      0|      return answer;
  316|      0|    } else {
  317|      0|      return detail::parse_infnan(first, last, value, fmt);
  318|      0|    }
  319|      0|  }
  320|       |
  321|       |  // call overload that takes parsed_number_string_t directly.
  322|   415k|  return from_chars_advanced(pns, value);
  323|   415k|}
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  198|   415k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  199|       |
  200|   415k|  static_assert(is_supported_float_type<T>::value,
  201|   415k|                "only some floating-point types are supported");
  202|   415k|  static_assert(is_supported_char_type<UC>::value,
  203|   415k|                "only char, wchar_t, char16_t and char32_t are supported");
  204|       |
  205|   415k|  from_chars_result_t<UC> answer;
  206|       |
  207|   415k|  answer.ec = std::errc(); // be optimistic
  208|   415k|  answer.ptr = pns.lastmatch;
  209|       |  // The implementation of the Clinger's fast path is convoluted because
  210|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  211|       |  // selected on the thread.
  212|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  213|       |  // returns true.
  214|   415k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (214:7): [True: 380k, False: 35.8k]
  ------------------
  215|   415k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (215:7): [True: 357k, False: 22.2k]
  ------------------
  216|   415k|      !pns.too_many_digits) {
  ------------------
  |  Branch (216:7): [True: 320k, False: 37.1k]
  ------------------
  217|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  218|       |    // when the system rounds to the nearest float.
  219|       |    //
  220|       |    // We expect the next branch to almost always be selected.
  221|       |    // We could check it first (before the previous branch), but
  222|       |    // there might be performance advantages at having the check
  223|       |    // be last.
  224|   320k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (224:9): [Folded - Ignored]
  |  Branch (224:38): [True: 320k, False: 0]
  ------------------
  225|       |      // We have that fegetround() == FE_TONEAREST.
  226|       |      // Next is Clinger's fast path.
  227|   320k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (227:11): [True: 299k, False: 20.9k]
  ------------------
  228|   299k|        value = T(pns.mantissa);
  229|   299k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (229:13): [True: 6.69k, False: 293k]
  ------------------
  230|  6.69k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  231|   293k|        } else {
  232|   293k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  233|   293k|        }
  234|   299k|        if (pns.negative) {
  ------------------
  |  Branch (234:13): [True: 0, False: 299k]
  ------------------
  235|      0|          value = -value;
  236|      0|        }
  237|   299k|        return answer;
  238|   299k|      }
  239|   320k|    } else {
  240|       |      // We do not have that fegetround() == FE_TONEAREST.
  241|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  242|       |      // proposal
  243|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (243:11): [True: 0, False: 0]
  ------------------
  244|      0|          pns.mantissa <=
  ------------------
  |  Branch (244:11): [True: 0, False: 0]
  ------------------
  245|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  246|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  247|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  248|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (248:13): [True: 0, False: 0]
  ------------------
  249|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (249:19): [True: 0, False: 0]
  ------------------
  250|      0|          return answer;
  251|      0|        }
  252|      0|#endif
  253|      0|        value = T(pns.mantissa) *
  254|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  255|      0|        if (pns.negative) {
  ------------------
  |  Branch (255:13): [True: 0, False: 0]
  ------------------
  256|      0|          value = -value;
  257|      0|        }
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   320k|  }
  262|   116k|  adjusted_mantissa am =
  263|   116k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  264|   116k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (264:7): [True: 68.3k, False: 47.8k]
  |  Branch (264:30): [True: 68.3k, False: 0]
  ------------------
  265|  68.3k|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (265:9): [True: 19.2k, False: 49.1k]
  ------------------
  266|  19.2k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  267|  19.2k|    }
  268|  68.3k|  }
  269|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  270|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  271|       |  // way around again. This is very uncommon.
  272|   116k|  if (am.power2 < 0) {
  ------------------
  |  Branch (272:7): [True: 19.2k, False: 96.9k]
  ------------------
  273|  19.2k|    am = digit_comp<T>(pns, am);
  274|  19.2k|  }
  275|   116k|  to_float(pns.negative, am, value);
  276|       |  // Test for over/underflow.
  277|   116k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (277:8): [True: 113k, False: 2.77k]
  |  Branch (277:29): [True: 12.7k, False: 100k]
  |  Branch (277:49): [True: 823, False: 11.9k]
  ------------------
  278|   116k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (278:7): [True: 4.10k, False: 111k]
  ------------------
  279|  4.92k|    answer.ec = std::errc::result_out_of_range;
  280|  4.92k|  }
  281|   116k|  return answer;
  282|   415k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   78|  1.09M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   79|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   80|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   81|       |  return false;
   82|       |#endif
   83|       |  // See
   84|       |  // A fast function to check your floating-point rounding mode
   85|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   86|       |  //
   87|       |  // This function is meant to be equivalent to :
   88|       |  // prior: #include <cfenv>
   89|       |  //  return fegetround() == FE_TONEAREST;
   90|       |  // However, it is expected to be much faster than the fegetround()
   91|       |  // function call.
   92|       |  //
   93|       |  // The volatile keyword prevents the compiler from computing the function
   94|       |  // at compile-time.
   95|       |  // There might be other ways to prevent compile-time optimizations (e.g.,
   96|       |  // asm). The value does not need to be std::numeric_limits<float>::min(), any
   97|       |  // small value so that 1 + x should round to 1 would do (after accounting for
   98|       |  // excess precision, as in 387 instructions).
   99|  1.09M|  static float volatile fmin = std::numeric_limits<float>::min();
  100|  1.09M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
  101|       |//
  102|       |// Explanation:
  103|       |// Only when fegetround() == FE_TONEAREST do we have that
  104|       |// fmin + 1.0f == 1.0f - fmin.
  105|       |//
  106|       |// FE_UPWARD:
  107|       |//  fmin + 1.0f > 1
  108|       |//  1.0f - fmin == 1
  109|       |//
  110|       |// FE_DOWNWARD or  FE_TOWARDZERO:
  111|       |//  fmin + 1.0f == 1
  112|       |//  1.0f - fmin < 1
  113|       |//
  114|       |// Note: This may fail to be accurate if fast-math has been
  115|       |// enabled, as rounding conventions may not apply.
  116|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  117|       |#pragma warning(push)
  118|       |//  todo: is there a VS warning?
  119|       |//  see
  120|       |//  https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  121|       |#elif defined(__clang__)
  122|       |#pragma clang diagnostic push
  123|  1.09M|#pragma clang diagnostic ignored "-Wfloat-equal"
  124|       |#elif defined(__GNUC__)
  125|       |#pragma GCC diagnostic push
  126|       |#pragma GCC diagnostic ignored "-Wfloat-equal"
  127|       |#endif
  128|  1.09M|  return (fmini + 1.0f == 1.0f - fmini);
  129|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  130|       |#pragma warning(pop)
  131|       |#elif defined(__clang__)
  132|       |#pragma clang diagnostic pop
  133|       |#elif defined(__GNUC__)
  134|       |#pragma GCC diagnostic pop
  135|       |#endif
  136|  1.09M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   200k|           chars_format fmt /*= chars_format::general*/) noexcept {
  187|   200k|  return from_chars_caller<T>::call(first, last, value,
  188|   200k|                                    parse_options_t<UC>(fmt));
  189|   200k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  144|   200k|       parse_options_t<UC> options) noexcept {
  145|   200k|    return from_chars_advanced(first, last, value, options);
  146|   200k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  392|   200k|                    parse_options_t<UC> options) noexcept {
  393|   200k|  return from_chars_advanced_caller<
  394|   200k|      size_t(is_supported_float_type<T>::value) +
  395|   200k|      2 * size_t(is_supported_integer_type<T>::value)>::call(first, last, value,
  396|   200k|                                                             options);
  397|   200k|}
_ZN10fast_float26from_chars_advanced_callerILm1EE4callIfDiEENS_19from_chars_result_tIT0_EEPKS4_S7_RT_NS_15parse_options_tIS4_EE:
  375|   200k|       parse_options_t<UC> options) noexcept {
  376|   200k|    return from_chars_float_advanced(first, last, value, options);
  377|   200k|  }
_ZN10fast_float25from_chars_float_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  287|   200k|                          parse_options_t<UC> options) noexcept {
  288|       |
  289|   200k|  static_assert(is_supported_float_type<T>::value,
  290|   200k|                "only some floating-point types are supported");
  291|   200k|  static_assert(is_supported_char_type<UC>::value,
  292|   200k|                "only char, wchar_t, char16_t and char32_t are supported");
  293|       |
  294|   200k|  chars_format const fmt = detail::adjust_for_feature_macros(options.format);
  295|       |
  296|   200k|  from_chars_result_t<UC> answer;
  297|   200k|  if (uint64_t(fmt & chars_format::skip_white_space)) {
  ------------------
  |  Branch (297:7): [True: 0, False: 200k]
  ------------------
  298|      0|    while ((first != last) && fast_float::is_space(*first)) {
  ------------------
  |  Branch (298:12): [True: 0, False: 0]
  |  Branch (298:31): [True: 0, False: 0]
  ------------------
  299|      0|      first++;
  300|      0|    }
  301|      0|  }
  302|   200k|  if (first == last) {
  ------------------
  |  Branch (302:7): [True: 0, False: 200k]
  ------------------
  303|      0|    answer.ec = std::errc::invalid_argument;
  304|      0|    answer.ptr = first;
  305|      0|    return answer;
  306|      0|  }
  307|   200k|  parsed_number_string_t<UC> pns =
  308|   200k|      uint64_t(fmt & detail::basic_json_fmt)
  ------------------
  |  Branch (308:7): [True: 0, False: 200k]
  ------------------
  309|   200k|          ? parse_number_string<true, UC>(first, last, options)
  310|   200k|          : parse_number_string<false, UC>(first, last, options);
  311|   200k|  if (!pns.valid) {
  ------------------
  |  Branch (311:7): [True: 0, False: 200k]
  ------------------
  312|      0|    if (uint64_t(fmt & chars_format::no_infnan)) {
  ------------------
  |  Branch (312:9): [True: 0, False: 0]
  ------------------
  313|      0|      answer.ec = std::errc::invalid_argument;
  314|      0|      answer.ptr = first;
  315|      0|      return answer;
  316|      0|    } else {
  317|      0|      return detail::parse_infnan(first, last, value, fmt);
  318|      0|    }
  319|      0|  }
  320|       |
  321|       |  // call overload that takes parsed_number_string_t directly.
  322|   200k|  return from_chars_advanced(pns, value);
  323|   200k|}
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  198|   200k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  199|       |
  200|   200k|  static_assert(is_supported_float_type<T>::value,
  201|   200k|                "only some floating-point types are supported");
  202|   200k|  static_assert(is_supported_char_type<UC>::value,
  203|   200k|                "only char, wchar_t, char16_t and char32_t are supported");
  204|       |
  205|   200k|  from_chars_result_t<UC> answer;
  206|       |
  207|   200k|  answer.ec = std::errc(); // be optimistic
  208|   200k|  answer.ptr = pns.lastmatch;
  209|       |  // The implementation of the Clinger's fast path is convoluted because
  210|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  211|       |  // selected on the thread.
  212|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  213|       |  // returns true.
  214|   200k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (214:7): [True: 198k, False: 1.81k]
  ------------------
  215|   200k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (215:7): [True: 194k, False: 3.68k]
  ------------------
  216|   200k|      !pns.too_many_digits) {
  ------------------
  |  Branch (216:7): [True: 194k, False: 344]
  ------------------
  217|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  218|       |    // when the system rounds to the nearest float.
  219|       |    //
  220|       |    // We expect the next branch to almost always be selected.
  221|       |    // We could check it first (before the previous branch), but
  222|       |    // there might be performance advantages at having the check
  223|       |    // be last.
  224|   194k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (224:9): [Folded - Ignored]
  |  Branch (224:38): [True: 194k, False: 0]
  ------------------
  225|       |      // We have that fegetround() == FE_TONEAREST.
  226|       |      // Next is Clinger's fast path.
  227|   194k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (227:11): [True: 193k, False: 574]
  ------------------
  228|   193k|        value = T(pns.mantissa);
  229|   193k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (229:13): [True: 2.08k, False: 191k]
  ------------------
  230|  2.08k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  231|   191k|        } else {
  232|   191k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  233|   191k|        }
  234|   193k|        if (pns.negative) {
  ------------------
  |  Branch (234:13): [True: 0, False: 193k]
  ------------------
  235|      0|          value = -value;
  236|      0|        }
  237|   193k|        return answer;
  238|   193k|      }
  239|   194k|    } else {
  240|       |      // We do not have that fegetround() == FE_TONEAREST.
  241|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  242|       |      // proposal
  243|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (243:11): [True: 0, False: 0]
  ------------------
  244|      0|          pns.mantissa <=
  ------------------
  |  Branch (244:11): [True: 0, False: 0]
  ------------------
  245|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  246|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  247|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  248|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (248:13): [True: 0, False: 0]
  ------------------
  249|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (249:19): [True: 0, False: 0]
  ------------------
  250|      0|          return answer;
  251|      0|        }
  252|      0|#endif
  253|      0|        value = T(pns.mantissa) *
  254|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  255|      0|        if (pns.negative) {
  ------------------
  |  Branch (255:13): [True: 0, False: 0]
  ------------------
  256|      0|          value = -value;
  257|      0|        }
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   194k|  }
  262|  6.41k|  adjusted_mantissa am =
  263|  6.41k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  264|  6.41k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (264:7): [True: 1.12k, False: 5.29k]
  |  Branch (264:30): [True: 1.12k, False: 0]
  ------------------
  265|  1.12k|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (265:9): [True: 0, False: 1.12k]
  ------------------
  266|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  267|      0|    }
  268|  1.12k|  }
  269|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  270|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  271|       |  // way around again. This is very uncommon.
  272|  6.41k|  if (am.power2 < 0) {
  ------------------
  |  Branch (272:7): [True: 0, False: 6.41k]
  ------------------
  273|      0|    am = digit_comp<T>(pns, am);
  274|      0|  }
  275|  6.41k|  to_float(pns.negative, am, value);
  276|       |  // Test for over/underflow.
  277|  6.41k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (277:8): [True: 5.81k, False: 602]
  |  Branch (277:29): [True: 3.77k, False: 2.04k]
  |  Branch (277:49): [True: 858, False: 2.91k]
  ------------------
  278|  6.41k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (278:7): [True: 2.91k, False: 2.64k]
  ------------------
  279|  3.77k|    answer.ec = std::errc::result_out_of_range;
  280|  3.77k|  }
  281|  6.41k|  return answer;
  282|   200k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   436k|           chars_format fmt /*= chars_format::general*/) noexcept {
  187|   436k|  return from_chars_caller<T>::call(first, last, value,
  188|   436k|                                    parse_options_t<UC>(fmt));
  189|   436k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  144|   436k|       parse_options_t<UC> options) noexcept {
  145|   436k|    return from_chars_advanced(first, last, value, options);
  146|   436k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  392|   436k|                    parse_options_t<UC> options) noexcept {
  393|   436k|  return from_chars_advanced_caller<
  394|   436k|      size_t(is_supported_float_type<T>::value) +
  395|   436k|      2 * size_t(is_supported_integer_type<T>::value)>::call(first, last, value,
  396|   436k|                                                             options);
  397|   436k|}
_ZN10fast_float26from_chars_advanced_callerILm1EE4callIdcEENS_19from_chars_result_tIT0_EEPKS4_S7_RT_NS_15parse_options_tIS4_EE:
  375|   436k|       parse_options_t<UC> options) noexcept {
  376|   436k|    return from_chars_float_advanced(first, last, value, options);
  377|   436k|  }
_ZN10fast_float25from_chars_float_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  287|   436k|                          parse_options_t<UC> options) noexcept {
  288|       |
  289|   436k|  static_assert(is_supported_float_type<T>::value,
  290|   436k|                "only some floating-point types are supported");
  291|   436k|  static_assert(is_supported_char_type<UC>::value,
  292|   436k|                "only char, wchar_t, char16_t and char32_t are supported");
  293|       |
  294|   436k|  chars_format const fmt = detail::adjust_for_feature_macros(options.format);
  295|       |
  296|   436k|  from_chars_result_t<UC> answer;
  297|   436k|  if (uint64_t(fmt & chars_format::skip_white_space)) {
  ------------------
  |  Branch (297:7): [True: 0, False: 436k]
  ------------------
  298|      0|    while ((first != last) && fast_float::is_space(*first)) {
  ------------------
  |  Branch (298:12): [True: 0, False: 0]
  |  Branch (298:31): [True: 0, False: 0]
  ------------------
  299|      0|      first++;
  300|      0|    }
  301|      0|  }
  302|   436k|  if (first == last) {
  ------------------
  |  Branch (302:7): [True: 0, False: 436k]
  ------------------
  303|      0|    answer.ec = std::errc::invalid_argument;
  304|      0|    answer.ptr = first;
  305|      0|    return answer;
  306|      0|  }
  307|   436k|  parsed_number_string_t<UC> pns =
  308|   436k|      uint64_t(fmt & detail::basic_json_fmt)
  ------------------
  |  Branch (308:7): [True: 0, False: 436k]
  ------------------
  309|   436k|          ? parse_number_string<true, UC>(first, last, options)
  310|   436k|          : parse_number_string<false, UC>(first, last, options);
  311|   436k|  if (!pns.valid) {
  ------------------
  |  Branch (311:7): [True: 0, False: 436k]
  ------------------
  312|      0|    if (uint64_t(fmt & chars_format::no_infnan)) {
  ------------------
  |  Branch (312:9): [True: 0, False: 0]
  ------------------
  313|      0|      answer.ec = std::errc::invalid_argument;
  314|      0|      answer.ptr = first;
  315|      0|      return answer;
  316|      0|    } else {
  317|      0|      return detail::parse_infnan(first, last, value, fmt);
  318|      0|    }
  319|      0|  }
  320|       |
  321|       |  // call overload that takes parsed_number_string_t directly.
  322|   436k|  return from_chars_advanced(pns, value);
  323|   436k|}
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  198|   436k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  199|       |
  200|   436k|  static_assert(is_supported_float_type<T>::value,
  201|   436k|                "only some floating-point types are supported");
  202|   436k|  static_assert(is_supported_char_type<UC>::value,
  203|   436k|                "only char, wchar_t, char16_t and char32_t are supported");
  204|       |
  205|   436k|  from_chars_result_t<UC> answer;
  206|       |
  207|   436k|  answer.ec = std::errc(); // be optimistic
  208|   436k|  answer.ptr = pns.lastmatch;
  209|       |  // The implementation of the Clinger's fast path is convoluted because
  210|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  211|       |  // selected on the thread.
  212|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  213|       |  // returns true.
  214|   436k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (214:7): [True: 430k, False: 5.99k]
  ------------------
  215|   436k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (215:7): [True: 408k, False: 21.9k]
  ------------------
  216|   436k|      !pns.too_many_digits) {
  ------------------
  |  Branch (216:7): [True: 342k, False: 66.5k]
  ------------------
  217|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  218|       |    // when the system rounds to the nearest float.
  219|       |    //
  220|       |    // We expect the next branch to almost always be selected.
  221|       |    // We could check it first (before the previous branch), but
  222|       |    // there might be performance advantages at having the check
  223|       |    // be last.
  224|   342k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (224:9): [Folded - Ignored]
  |  Branch (224:38): [True: 342k, False: 0]
  ------------------
  225|       |      // We have that fegetround() == FE_TONEAREST.
  226|       |      // Next is Clinger's fast path.
  227|   342k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (227:11): [True: 338k, False: 4.30k]
  ------------------
  228|   338k|        value = T(pns.mantissa);
  229|   338k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (229:13): [True: 18.1k, False: 319k]
  ------------------
  230|  18.1k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  231|   319k|        } else {
  232|   319k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  233|   319k|        }
  234|   338k|        if (pns.negative) {
  ------------------
  |  Branch (234:13): [True: 0, False: 338k]
  ------------------
  235|      0|          value = -value;
  236|      0|        }
  237|   338k|        return answer;
  238|   338k|      }
  239|   342k|    } else {
  240|       |      // We do not have that fegetround() == FE_TONEAREST.
  241|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  242|       |      // proposal
  243|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (243:11): [True: 0, False: 0]
  ------------------
  244|      0|          pns.mantissa <=
  ------------------
  |  Branch (244:11): [True: 0, False: 0]
  ------------------
  245|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  246|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  247|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  248|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (248:13): [True: 0, False: 0]
  ------------------
  249|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (249:19): [True: 0, False: 0]
  ------------------
  250|      0|          return answer;
  251|      0|        }
  252|      0|#endif
  253|      0|        value = T(pns.mantissa) *
  254|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  255|      0|        if (pns.negative) {
  ------------------
  |  Branch (255:13): [True: 0, False: 0]
  ------------------
  256|      0|          value = -value;
  257|      0|        }
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   342k|  }
  262|  98.7k|  adjusted_mantissa am =
  263|  98.7k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  264|  98.7k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (264:7): [True: 71.8k, False: 26.8k]
  |  Branch (264:30): [True: 71.8k, False: 0]
  ------------------
  265|  71.8k|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (265:9): [True: 29.9k, False: 41.9k]
  ------------------
  266|  29.9k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  267|  29.9k|    }
  268|  71.8k|  }
  269|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  270|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  271|       |  // way around again. This is very uncommon.
  272|  98.7k|  if (am.power2 < 0) {
  ------------------
  |  Branch (272:7): [True: 29.9k, False: 68.8k]
  ------------------
  273|  29.9k|    am = digit_comp<T>(pns, am);
  274|  29.9k|  }
  275|  98.7k|  to_float(pns.negative, am, value);
  276|       |  // Test for over/underflow.
  277|  98.7k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (277:8): [True: 96.1k, False: 2.54k]
  |  Branch (277:29): [True: 7.91k, False: 88.2k]
  |  Branch (277:49): [True: 237, False: 7.67k]
  ------------------
  278|  98.7k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (278:7): [True: 2.16k, False: 96.3k]
  ------------------
  279|  2.40k|    answer.ec = std::errc::result_out_of_range;
  280|  2.40k|  }
  281|  98.7k|  return answer;
  282|   436k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   246k|           chars_format fmt /*= chars_format::general*/) noexcept {
  187|   246k|  return from_chars_caller<T>::call(first, last, value,
  188|   246k|                                    parse_options_t<UC>(fmt));
  189|   246k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  144|   246k|       parse_options_t<UC> options) noexcept {
  145|   246k|    return from_chars_advanced(first, last, value, options);
  146|   246k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  392|   246k|                    parse_options_t<UC> options) noexcept {
  393|   246k|  return from_chars_advanced_caller<
  394|   246k|      size_t(is_supported_float_type<T>::value) +
  395|   246k|      2 * size_t(is_supported_integer_type<T>::value)>::call(first, last, value,
  396|   246k|                                                             options);
  397|   246k|}
_ZN10fast_float26from_chars_advanced_callerILm1EE4callIdDiEENS_19from_chars_result_tIT0_EEPKS4_S7_RT_NS_15parse_options_tIS4_EE:
  375|   246k|       parse_options_t<UC> options) noexcept {
  376|   246k|    return from_chars_float_advanced(first, last, value, options);
  377|   246k|  }
_ZN10fast_float25from_chars_float_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  287|   246k|                          parse_options_t<UC> options) noexcept {
  288|       |
  289|   246k|  static_assert(is_supported_float_type<T>::value,
  290|   246k|                "only some floating-point types are supported");
  291|   246k|  static_assert(is_supported_char_type<UC>::value,
  292|   246k|                "only char, wchar_t, char16_t and char32_t are supported");
  293|       |
  294|   246k|  chars_format const fmt = detail::adjust_for_feature_macros(options.format);
  295|       |
  296|   246k|  from_chars_result_t<UC> answer;
  297|   246k|  if (uint64_t(fmt & chars_format::skip_white_space)) {
  ------------------
  |  Branch (297:7): [True: 0, False: 246k]
  ------------------
  298|      0|    while ((first != last) && fast_float::is_space(*first)) {
  ------------------
  |  Branch (298:12): [True: 0, False: 0]
  |  Branch (298:31): [True: 0, False: 0]
  ------------------
  299|      0|      first++;
  300|      0|    }
  301|      0|  }
  302|   246k|  if (first == last) {
  ------------------
  |  Branch (302:7): [True: 0, False: 246k]
  ------------------
  303|      0|    answer.ec = std::errc::invalid_argument;
  304|      0|    answer.ptr = first;
  305|      0|    return answer;
  306|      0|  }
  307|   246k|  parsed_number_string_t<UC> pns =
  308|   246k|      uint64_t(fmt & detail::basic_json_fmt)
  ------------------
  |  Branch (308:7): [True: 0, False: 246k]
  ------------------
  309|   246k|          ? parse_number_string<true, UC>(first, last, options)
  310|   246k|          : parse_number_string<false, UC>(first, last, options);
  311|   246k|  if (!pns.valid) {
  ------------------
  |  Branch (311:7): [True: 0, False: 246k]
  ------------------
  312|      0|    if (uint64_t(fmt & chars_format::no_infnan)) {
  ------------------
  |  Branch (312:9): [True: 0, False: 0]
  ------------------
  313|      0|      answer.ec = std::errc::invalid_argument;
  314|      0|      answer.ptr = first;
  315|      0|      return answer;
  316|      0|    } else {
  317|      0|      return detail::parse_infnan(first, last, value, fmt);
  318|      0|    }
  319|      0|  }
  320|       |
  321|       |  // call overload that takes parsed_number_string_t directly.
  322|   246k|  return from_chars_advanced(pns, value);
  323|   246k|}
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  198|   246k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  199|       |
  200|   246k|  static_assert(is_supported_float_type<T>::value,
  201|   246k|                "only some floating-point types are supported");
  202|   246k|  static_assert(is_supported_char_type<UC>::value,
  203|   246k|                "only char, wchar_t, char16_t and char32_t are supported");
  204|       |
  205|   246k|  from_chars_result_t<UC> answer;
  206|       |
  207|   246k|  answer.ec = std::errc(); // be optimistic
  208|   246k|  answer.ptr = pns.lastmatch;
  209|       |  // The implementation of the Clinger's fast path is convoluted because
  210|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  211|       |  // selected on the thread.
  212|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  213|       |  // returns true.
  214|   246k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (214:7): [True: 244k, False: 1.87k]
  ------------------
  215|   246k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (215:7): [True: 240k, False: 4.71k]
  ------------------
  216|   246k|      !pns.too_many_digits) {
  ------------------
  |  Branch (216:7): [True: 239k, False: 924]
  ------------------
  217|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  218|       |    // when the system rounds to the nearest float.
  219|       |    //
  220|       |    // We expect the next branch to almost always be selected.
  221|       |    // We could check it first (before the previous branch), but
  222|       |    // there might be performance advantages at having the check
  223|       |    // be last.
  224|   239k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (224:9): [Folded - Ignored]
  |  Branch (224:38): [True: 239k, False: 0]
  ------------------
  225|       |      // We have that fegetround() == FE_TONEAREST.
  226|       |      // Next is Clinger's fast path.
  227|   239k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (227:11): [True: 239k, False: 252]
  ------------------
  228|   239k|        value = T(pns.mantissa);
  229|   239k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (229:13): [True: 2.36k, False: 236k]
  ------------------
  230|  2.36k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  231|   236k|        } else {
  232|   236k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  233|   236k|        }
  234|   239k|        if (pns.negative) {
  ------------------
  |  Branch (234:13): [True: 0, False: 239k]
  ------------------
  235|      0|          value = -value;
  236|      0|        }
  237|   239k|        return answer;
  238|   239k|      }
  239|   239k|    } else {
  240|       |      // We do not have that fegetround() == FE_TONEAREST.
  241|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  242|       |      // proposal
  243|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (243:11): [True: 0, False: 0]
  ------------------
  244|      0|          pns.mantissa <=
  ------------------
  |  Branch (244:11): [True: 0, False: 0]
  ------------------
  245|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  246|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  247|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  248|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (248:13): [True: 0, False: 0]
  ------------------
  249|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (249:19): [True: 0, False: 0]
  ------------------
  250|      0|          return answer;
  251|      0|        }
  252|      0|#endif
  253|      0|        value = T(pns.mantissa) *
  254|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  255|      0|        if (pns.negative) {
  ------------------
  |  Branch (255:13): [True: 0, False: 0]
  ------------------
  256|      0|          value = -value;
  257|      0|        }
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   239k|  }
  262|  7.76k|  adjusted_mantissa am =
  263|  7.76k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  264|  7.76k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (264:7): [True: 1.13k, False: 6.63k]
  |  Branch (264:30): [True: 1.13k, False: 0]
  ------------------
  265|  1.13k|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (265:9): [True: 184, False: 950]
  ------------------
  266|    184|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  267|    184|    }
  268|  1.13k|  }
  269|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  270|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  271|       |  // way around again. This is very uncommon.
  272|  7.76k|  if (am.power2 < 0) {
  ------------------
  |  Branch (272:7): [True: 184, False: 7.58k]
  ------------------
  273|    184|    am = digit_comp<T>(pns, am);
  274|    184|  }
  275|  7.76k|  to_float(pns.negative, am, value);
  276|       |  // Test for over/underflow.
  277|  7.76k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (277:8): [True: 7.12k, False: 644]
  |  Branch (277:29): [True: 1.85k, False: 5.27k]
  |  Branch (277:49): [True: 198, False: 1.65k]
  ------------------
  278|  7.76k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (278:7): [True: 1.65k, False: 5.91k]
  ------------------
  279|  1.85k|    answer.ec = std::errc::result_out_of_range;
  280|  1.85k|  }
  281|  7.76k|  return answer;
  282|   246k|}

_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  986|  3.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  986|  1.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  986|  1.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4066|  2.97M|{
 4067|  2.97M|    if constexpr (sizeof(U) == 1) {
 4068|  2.97M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4069|       |    }
 4070|       |    else if constexpr (sizeof(U) == 2) {
 4071|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4072|       |    }
 4073|       |    else {
 4074|       |        // utf-32
 4075|       |        static_assert(sizeof(U) == 4);
 4076|       |        SCN_UNUSED(ch);
 4077|       |        return 1;
 4078|       |    }
 4079|  2.97M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4030|  2.97M|{
 4031|  2.97M|    static_assert(sizeof(U8) == 1);
 4032|       |
 4033|  2.97M|    SCN_GCC_COMPAT_PUSH
 4034|  2.97M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4035|  2.97M|    constexpr char lengths[] =
 4036|  2.97M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4037|  2.97M|        "\1\1\1\1\1\1\1\1"
 4038|  2.97M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4039|       |                            // byte
 4040|  2.97M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4041|  2.97M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4042|  2.97M|        "\4";               // highest bits 11110 -> 4-byte cp
 4043|  2.97M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4044|  2.97M|    SCN_GCC_COMPAT_POP
 4045|  2.97M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4272|  2.67M|{
 4273|  2.67M|    if constexpr (sizeof(CharT) == 1) {
 4274|  2.67M|        return decode_utf8_code_point_exhaustive(input);
 4275|       |    }
 4276|       |    else if constexpr (sizeof(CharT) == 2) {
 4277|       |        return decode_utf16_code_point_exhaustive(input);
 4278|       |    }
 4279|       |    else {
 4280|       |        SCN_EXPECT(input.size() == 1);
 4281|       |        auto cp = static_cast<char32_t>(input.front());
 4282|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4283|       |            return invalid_code_point;
 4284|       |        }
 4285|       |        return cp;
 4286|       |    }
 4287|  2.67M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4085|  2.67M|{
 4086|  2.67M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1051|  2.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4087|       |
 4088|  2.67M|    const auto is_trailing_code_unit = [](char ch) {
 4089|  2.67M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4090|  2.67M|    };
 4091|       |
 4092|  2.67M|    if (input.size() == 1) {
  ------------------
  |  Branch (4092:9): [True: 2.61M, False: 62.1k]
  ------------------
 4093|  2.61M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4093:13): [True: 707, False: 2.61M]
  ------------------
 4094|    707|            SCN_UNLIKELY_ATTR
 4095|    707|            return invalid_code_point;
 4096|    707|        }
 4097|  2.61M|        return static_cast<char32_t>(input[0]);
 4098|  2.61M|    }
 4099|       |
 4100|  62.1k|    if (input.size() == 2) {
  ------------------
  |  Branch (4100:9): [True: 57.1k, False: 5.00k]
  ------------------
 4101|  57.1k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4101:13): [True: 142, False: 56.9k]
  ------------------
 4102|    142|            SCN_UNLIKELY_ATTR
 4103|    142|            return invalid_code_point;
 4104|    142|        }
 4105|  56.9k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4105:13): [True: 4.45k, False: 52.5k]
  ------------------
 4106|  4.45k|            SCN_UNLIKELY_ATTR
 4107|  4.45k|            return invalid_code_point;
 4108|  4.45k|        }
 4109|       |
 4110|  52.5k|        char32_t cp{};
 4111|  52.5k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4112|  52.5k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4113|  52.5k|        return cp;
 4114|  56.9k|    }
 4115|       |
 4116|  5.00k|    if (input.size() == 3) {
  ------------------
  |  Branch (4116:9): [True: 2.31k, False: 2.69k]
  ------------------
 4117|  2.31k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4117:13): [True: 161, False: 2.15k]
  ------------------
 4118|    161|            SCN_UNLIKELY_ATTR
 4119|    161|            return invalid_code_point;
 4120|    161|        }
 4121|  2.15k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4121:13): [True: 536, False: 1.62k]
  ------------------
 4122|  2.15k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4122:13): [True: 818, False: 802]
  ------------------
 4123|  1.35k|            SCN_UNLIKELY_ATTR
 4124|  1.35k|            return invalid_code_point;
 4125|  1.35k|        }
 4126|       |
 4127|    802|        char32_t cp{};
 4128|    802|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4129|    802|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4130|    802|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4131|    802|        return cp;
 4132|  2.15k|    }
 4133|       |
 4134|  2.69k|    if (input.size() == 4) {
  ------------------
  |  Branch (4134:9): [True: 2.69k, False: 0]
  ------------------
 4135|  2.69k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4135:13): [True: 0, False: 2.69k]
  ------------------
 4136|      0|            SCN_UNLIKELY_ATTR
 4137|      0|            return invalid_code_point;
 4138|      0|        }
 4139|  2.69k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4139:13): [True: 476, False: 2.21k]
  ------------------
 4140|    476|            SCN_UNLIKELY_ATTR
 4141|    476|            return invalid_code_point;
 4142|    476|        }
 4143|  2.21k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4143:13): [True: 528, False: 1.68k]
  ------------------
 4144|  2.21k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4144:13): [True: 555, False: 1.13k]
  ------------------
 4145|  2.21k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4145:13): [True: 828, False: 304]
  ------------------
 4146|  1.91k|            SCN_UNLIKELY_ATTR
 4147|  1.91k|            return invalid_code_point;
 4148|  1.91k|        }
 4149|       |
 4150|    304|        char32_t cp{};
 4151|    304|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4152|    304|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4153|    304|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4154|    304|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4155|    304|        return cp;
 4156|  2.21k|    }
 4157|       |
 4158|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4159|       |    // gcc 7 thinks we'll get here, even when we won't
 4160|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4161|      0|#endif
 4162|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4163|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4088|  65.7k|    const auto is_trailing_code_unit = [](char ch) {
 4089|  65.7k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4090|  65.7k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3958|  4.45M|{
 3959|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3960|       |                                          decltype(first), decltype(last)> &&
 3961|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3962|       |        return {first, last};
 3963|       |    }
 3964|  4.45M|    else {
 3965|  4.45M|        return {to_address(first), static_cast<size_t>(std::distance(
 3966|  4.45M|                                       to_address(first), to_address(last)))};
 3967|  4.45M|    }
 3968|  4.45M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  13.5M|{
  316|  13.5M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1057|  13.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  13.5M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  21.9M|{
  294|  21.9M|    return p;
  295|  21.9M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3989|  6.97M|{
 3990|       |    if constexpr (std::is_constructible_v<
 3991|       |                      typename std::basic_string_view<CharT>::iterator,
 3992|       |                      decltype(it)> &&
 3993|  6.97M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3994|  6.97M|        SCN_UNUSED(sv);
  ------------------
  |  | 1036|  6.97M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3995|  6.97M|        return it;
 3996|       |    }
 3997|       |    else {
 3998|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3999|       |    }
 4000|  6.97M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  94.8k|    {
 2868|  94.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  94.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  94.8k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  94.8k|    {
 2849|  94.8k|        return decay_copy(t.begin());
 2850|  94.8k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2092|  11.2M|{
 2093|  11.2M|    return SCN_FWD(t);
  ------------------
  |  | 1057|  11.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  11.2M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  1.88M|    {
 2925|  1.88M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  1.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  1.88M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  1.88M|    {
 2907|  1.88M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  1.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  1.88M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9760|   137k|{
 9761|   137k|    auto result = make_scan_result<Source, Args...>();
 9762|   137k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|   137k|                                   make_scan_args(result->values())));
 9764|   137k|    return result;
 9765|   137k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEEDav:
 9716|   303k|{
 9717|   303k|    return scan_result_type<Source, Args...>();
 9718|   303k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1550|   303k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   303k|        : m_value(T{}), m_has_value(true)
  427|   303k|    {
  428|   303k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2Ev:
 6623|   303k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6466|   939k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3458|   939k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJfEEC2Ev:
 6397|  1.03M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|   303k|{
 9702|   303k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 30.8k, False: 272k]
  |  |  ------------------
  ------------------
 9703|  30.8k|        out = unexpected(in.error());
 9704|  30.8k|    }
 9705|   272k|    else {
 9706|   272k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|   272k|    static_cast<    \
  |  | 1056|   272k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|   272k|    }
 9708|   303k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1738|   939k|    {
 1739|   939k|        return has_value();
 1740|   939k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.87M|    {
  490|  1.87M|        return m_has_value;
  491|  1.87M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1744|  92.4k|    {
 1745|  92.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  92.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  92.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  92.4k|        return this->get_unexpected().error();
 1747|  92.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  92.4k|    {
  473|  92.4k|        return m_unexpected;
  474|  92.4k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  14.5M|    {
  365|  14.5M|        return m_unexpected;
  366|  14.5M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  3.60M|        : m_unexpected(std::forward<Err>(e))
  350|  3.60M|    {
  351|  3.60M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  3.60M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.60M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  30.8k|        : base(unexpect, std::move(e.error())),
 1615|  30.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  30.8k|    {
 1617|  30.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  30.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.8k|          m_has_value(false)
  451|  30.8k|    {
  452|  30.8k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  10.7M|        : m_unexpected(std::forward<Args>(args)...)
  359|  10.7M|    {
  360|  10.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  10.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  10.7M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  30.8k|    {
 1315|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1555|  30.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  901|  30.8k|    {
  902|  30.8k|        assign_common(std::move(other));
  903|  30.8k|        return *this;
  904|  30.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  30.8k|    {
  949|  30.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 30.8k, False: 0]
  ------------------
  950|  30.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 30.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  30.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  30.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.21M|    {
  490|  1.21M|        return m_has_value;
  491|  1.21M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   849k|    {
  456|   849k|        return m_value;
  457|   849k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  30.8k|    {
 1045|  30.8k|        this->destroy_value();
 1046|  30.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  30.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  30.8k|    {
  504|  30.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.8k|                                  std::forward<Args>(args)...);
  506|  30.8k|        m_has_value = false;
  507|  30.8k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   554k|{
  396|   554k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   554k|        T(std::forward<Args>(args)...);
  398|   554k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.8k|    {
  473|  30.8k|        return m_unexpected;
  474|  30.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.8k|    {
  481|  30.8k|        return std::move(m_unexpected);
  482|  30.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6497|   847k|    {
 6498|   847k|        m_range = std::forward<Other>(r);
 6499|   847k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1793|   847k|    {
 1794|   847k|        return value();
 1795|   847k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1767|   847k|    {
 1768|   847k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   847k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   847k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   847k|        return this->get_value();
 1770|   847k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   847k|    {
  456|   847k|        return m_value;
  457|   847k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9522|   423k|{
 9523|   423k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1057|   423k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9524|   423k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9459|   423k|{
 9460|   423k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|   423k|    auto result = vscan_impl(buffer, format, args);
 9463|   423k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 42.6k, False: 380k]
  |  |  ------------------
  ------------------
 9464|  42.6k|        return unexpected(result.error());
 9465|  42.6k|    }
 9466|   380k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|   380k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|   423k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5379|   939k|{
 5380|   939k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|   939k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|   939k|                  "\n"
 5384|   939k|                  "Unsupported range type given as input to a scanning "
 5385|   939k|                  "function.\n"
 5386|   939k|                  "A range needs to have a character type (value type) "
 5387|   939k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|   939k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|   939k|                  "to be included.\n"
 5390|   939k|                  "See the scnlib documentation for more details.");
 5391|   939k|    static_assert(
 5392|   939k|        !std::is_same_v<T, custom_char_traits>,
 5393|   939k|        "\n"
 5394|   939k|        "Unsupported range type given as input to a scanning "
 5395|   939k|        "function.\n"
 5396|   939k|        "String types (std::basic_string, and std::basic_string_view) "
 5397|   939k|        "need to use std::char_traits. Strings with custom Traits are "
 5398|   939k|        "not supported.");
 5399|   939k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|   939k|                  "\n"
 5401|   939k|                  "Unsupported range type given as input to a scanning "
 5402|   939k|                  "function.\n"
 5403|   939k|                  "file_marker_found cannot be used as an "
 5404|   939k|                  "source range type to scn::scan.\n"
 5405|   939k|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|   939k|                  "and do not provide an explicit source range, "
 5407|   939k|                  "or use scn::scan with a FILE* directly.");
 5408|   939k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|   939k|                  "\n"
 5410|   939k|                  "Unsupported range type given as input to a scanning "
 5411|   939k|                  "function.\n"
 5412|   939k|                  "In order to be scannable, a range needs to satisfy "
 5413|   939k|                  "`forward_range`. `input_range` is not sufficient.");
 5414|   939k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|   939k|                  "\n"
 5416|   939k|                  "Unsupported range type given as input to a scanning "
 5417|   939k|                  "function.\n"
 5418|   939k|                  "A range needs to model forward_range and have a valid "
 5419|   939k|                  "character type (char or wchar_t) to be scannable.\n"
 5420|   939k|                  "Examples of scannable ranges are std::string, "
 5421|   939k|                  "std::string_view, "
 5422|   939k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|   939k|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|   939k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|   939k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5318|   939k|{
 5319|   939k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5320|   939k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5321|       |    }
 5322|       |    else {
 5323|       |        return invalid_char_type{};
 5324|       |    }
 5325|   939k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   939k|    {
 2999|   939k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   939k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   939k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|   939k|    {
 2980|   939k|        return t.data();
 2981|   939k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3381|   939k|    {
 3382|   939k|        return detail::to_address(ranges::begin(derived()));
 3383|   939k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  8.36M|{
  316|  8.36M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1057|  8.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  8.36M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  1.78M|    {
 2868|  1.78M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  1.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  1.78M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  1.78M|    {
 2849|  1.78M|        return decay_copy(t.begin());
 2850|  1.78M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3478|  23.9M|    {
 3479|  23.9M|        return m_iterator;
 3480|  23.9M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3337|   939k|    {
 3338|   939k|        return static_cast<const D&>(*this);
 3339|   939k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3073|   939k|    {
 3074|   939k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|   939k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3039|   939k|    {
 3040|   939k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|   939k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|   939k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2092|  5.42M|{
 2093|  5.42M|    return SCN_FWD(t);
  ------------------
  |  | 1057|  5.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  5.42M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3494|  5.84M|    {
 3495|  5.84M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3496|  5.84M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1738|  13.6M|    {
 1739|  13.6M|        return has_value();
 1740|  13.6M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  24.3M|    {
  490|  24.3M|        return m_has_value;
  491|  24.3M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1744|  1.12M|    {
 1745|  1.12M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  1.12M|        return this->get_unexpected().error();
 1747|  1.12M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.12M|    {
  473|  1.12M|        return m_unexpected;
  474|  1.12M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1614|  92.4k|        : base(unexpect, std::move(e.error())),
 1615|  92.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  92.4k|    {
 1617|  92.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  92.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  92.4k|          m_has_value(false)
  451|  92.4k|    {
  452|  92.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   939k|    {
 1315|   939k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6727|   847k|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|   847k|                      ranges::iterator_t<SourceRange>>) {
 6730|   847k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|   847k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  6.63M|    {
 2868|  6.63M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  6.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  6.63M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  6.63M|    {
 2849|  6.63M|        return decay_copy(t.begin());
 2850|  6.63M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6714|   847k|{
 6715|   847k|    return ranges::end(source);
 6716|   847k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   847k|    {
 2925|   847k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   847k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   847k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   847k|    {
 2907|   847k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   847k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   847k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3482|  11.0M|    {
 3483|  11.0M|        return m_sentinel;
 3484|  11.0M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1793|  4.16M|    {
 1794|  4.16M|        return value();
 1795|  4.16M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1767|  9.62M|    {
 1768|  9.62M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  9.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  9.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  9.62M|        return this->get_value();
 1770|  9.62M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  9.62M|    {
  456|  9.62M|        return m_value;
  457|  9.62M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|   847k|        : base(std::in_place, std::forward<U>(val)),
 1569|   847k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   847k|    {
 1571|   847k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   847k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   847k|    {
  442|   847k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8797|   274k|    {
 8798|   274k|        return m_str;
 8799|   274k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|   589k|{
 6127|   589k|    detail::check_scan_arg_types<Args...>();
 6128|   589k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|   589k|}
_ZN3scn2v46detail20check_scan_arg_typesIJfEEEbv:
 5841|  1.03M|{
 5842|  1.03M|    constexpr bool default_constructible_constraint =
 5843|  1.03M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|  1.03M|    static_assert(default_constructible_constraint,
 5845|  1.03M|                  "Scan argument types must be default constructible");
 5846|       |
 5847|  1.03M|    constexpr bool destructible_constraint =
 5848|  1.03M|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|  1.03M|    static_assert(destructible_constraint,
 5850|  1.03M|                  "Scan argument types must be Destructible");
 5851|       |
 5852|  1.03M|    constexpr bool non_reference_constraint =
 5853|  1.03M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|  1.03M|    static_assert(non_reference_constraint,
 5855|  1.03M|                  "Scan argument types must not be references");
 5856|       |
 5857|  1.03M|    constexpr bool movable_constraint =
 5858|  1.03M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|  1.03M|    static_assert(movable_constraint,
 5860|  1.03M|                  "Scan argument types must be move constructible");
 5861|       |
 5862|  1.03M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|  1.03M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|  1.03M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEEC2ERNSt3__15tupleIJfEEE:
 6102|   589k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|   589k|    {
 6104|   589k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|   589k|    {
 6112|   589k|        return {detail::make_arg<
 6113|   589k|            kind, Context,
 6114|   589k|            mapped_type_constant<remove_cvref_t<A>,
 6115|   589k|                                 typename Context::char_type>::value>(args)...};
 6116|   589k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE18EfvEEPvRT2_:
 5891|   589k|{
 5892|   589k|    return make_value<Context>(value).ref_value;
 5893|   589k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEEDaRT0_:
 5826|   651k|{
 5827|   651k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|   651k|                                  needs_context_tag>) {
 5831|   651k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|   651k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|   651k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERf:
 5660|   651k|    {                                                                        \
 5661|   651k|        return val;                                                          \
 5662|   651k|    }
_ZN3scn2v46detail15make_value_implIfRfEEDaOT0_:
 5795|  1.03M|{
 5796|  1.03M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  1.03M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  1.03M|    constexpr bool scannable_char =
 5800|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  1.03M|    static_assert(scannable_char,
 5802|  1.03M|                  "Cannot scan an argument of an unsupported character "
 5803|  1.03M|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  1.03M|    constexpr bool scannable_const =
 5806|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  1.03M|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  1.03M|    constexpr bool scannable_disabled =
 5810|  1.03M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  1.03M|    static_assert(scannable_disabled,
 5812|  1.03M|                  "Cannot scan an argument that has been disabled by "
 5813|  1.03M|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  1.03M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  1.03M|    static_assert(
 5817|  1.03M|        scannable,
 5818|  1.03M|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  1.03M|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  1.03M|    return arg_value{arg};
 5822|  1.03M|}
_ZN3scn2v46detail9arg_valueC2IfEERT_:
 5603|  1.03M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|  1.03M|    {
 5605|  1.03M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJfEE6valuesEv:
 6406|   941k|    {
 6407|   941k|        return m_values;
 6408|   941k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|   589k|        : basic_scan_args(store.desc, store.args.data())
 6153|   589k|    {
 6154|   589k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6204|  1.83M|        : m_desc(desc), m_builtin_values(data)
 6205|  1.83M|    {
 6206|  1.83M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3463|  9.47M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  9.47M|    static_cast<    \
  |  | 1056|  9.47M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  9.47M|    static_cast<    \
  |  | 1056|  9.47M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|  9.47M|    {
 3465|  9.47M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8458|  1.83M|{
 8459|  1.83M|    return s;
 8460|  1.83M|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8435|  1.83M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|   274k|        : m_str(r.str)
 8793|   274k|    {
 8794|   274k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1738|   303k|    {
 1739|   303k|        return has_value();
 1740|   303k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1813|   849k|    {
 1814|   849k|        return &value();
 1815|   849k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|   849k|    {
 1768|   849k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   849k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   849k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   849k|        return this->get_value();
 1770|   849k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6486|   847k|    {
 6487|   847k|        return ranges::begin(m_range);
 6488|   847k|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9829|   137k|{
 9830|   137k|    auto result = make_scan_result<Source, Args...>();
 9831|   137k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|   137k|                                   make_scan_args(result->values())));
 9833|   137k|    return result;
 9834|   137k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9540|   423k|{
 9541|   423k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1057|   423k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9542|   423k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9475|   423k|{
 9476|   423k|#if !SCN_DISABLE_LOCALE
 9477|   423k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|   423k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|   423k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|   423k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|   423k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 42.6k, False: 380k]
  |  |  ------------------
  ------------------
 9484|  42.6k|        return unexpected(result.error());
 9485|  42.6k|    }
 9486|   380k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|   380k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|   423k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9870|  29.5k|{
 9871|  29.5k|    auto result = make_scan_result<Source, T>();
 9872|  29.5k|    fill_scan_result(
 9873|  29.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  29.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|  29.5k|                            detail::make_arg<scan_context>(result->value())));
 9875|  29.5k|    return result;
 9876|  29.5k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9553|  92.2k|{
 9554|  92.2k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1057|  92.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9555|  92.2k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9499|  92.2k|{
 9500|  92.2k|    auto buffer = detail::make_scan_buffer(range);
 9501|       |
 9502|  92.2k|    auto result = detail::vscan_value_impl(buffer, arg);
 9503|  92.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  92.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 7.11k, False: 85.1k]
  |  |  ------------------
  ------------------
 9504|  7.11k|        return unexpected(result.error());
 9505|  7.11k|    }
 9506|  85.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  85.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9507|  92.2k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEENS0_14basic_scan_argIT_EERT0_:
 5876|  61.7k|{
 5877|  61.7k|    check_scan_arg_types<T>();
 5878|       |
 5879|  61.7k|    basic_scan_arg<Context> arg;
 5880|  61.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  61.7k|    arg.m_value = make_value<Context>(value);
 5882|  61.7k|    return arg;
 5883|  61.7k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5971|  2.02M|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5599|  3.28M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJfEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6428|  94.4k|    {
 6429|  94.4k|        return std::get<0>(m_values);
 6430|  94.4k|    }
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9760|   142k|{
 9761|   142k|    auto result = make_scan_result<Source, Args...>();
 9762|   142k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|   142k|                                   make_scan_args(result->values())));
 9764|   142k|    return result;
 9765|   142k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEEDav:
 9716|   315k|{
 9717|   315k|    return scan_result_type<Source, Args...>();
 9718|   315k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1550|   315k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   315k|        : m_value(T{}), m_has_value(true)
  427|   315k|    {
  428|   315k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6623|   315k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6397|  1.11M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|   315k|{
 9702|   315k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|   315k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 30.8k, False: 284k]
  |  |  ------------------
  ------------------
 9703|  30.8k|        out = unexpected(in.error());
 9704|  30.8k|    }
 9705|   284k|    else {
 9706|   284k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|   284k|    static_cast<    \
  |  | 1056|   284k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|   284k|    }
 9708|   315k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  30.8k|        : base(unexpect, std::move(e.error())),
 1615|  30.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  30.8k|    {
 1617|  30.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  30.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.8k|          m_has_value(false)
  451|  30.8k|    {
  452|  30.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  30.8k|    {
 1315|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1555|  30.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  901|  30.8k|    {
  902|  30.8k|        assign_common(std::move(other));
  903|  30.8k|        return *this;
  904|  30.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  30.8k|    {
  949|  30.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 30.8k, False: 0]
  ------------------
  950|  30.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 30.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  30.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  30.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.26M|    {
  490|  1.26M|        return m_has_value;
  491|  1.26M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   884k|    {
  456|   884k|        return m_value;
  457|   884k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  30.8k|    {
 1045|  30.8k|        this->destroy_value();
 1046|  30.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  30.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  30.8k|    {
  504|  30.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.8k|                                  std::forward<Args>(args)...);
  506|  30.8k|        m_has_value = false;
  507|  30.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.8k|    {
  473|  30.8k|        return m_unexpected;
  474|  30.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.8k|    {
  481|  30.8k|        return std::move(m_unexpected);
  482|  30.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8797|   284k|    {
 8798|   284k|        return m_str;
 8799|   284k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|   616k|{
 6127|   616k|    detail::check_scan_arg_types<Args...>();
 6128|   616k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|   616k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5841|  1.11M|{
 5842|  1.11M|    constexpr bool default_constructible_constraint =
 5843|  1.11M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|  1.11M|    static_assert(default_constructible_constraint,
 5845|  1.11M|                  "Scan argument types must be default constructible");
 5846|       |
 5847|  1.11M|    constexpr bool destructible_constraint =
 5848|  1.11M|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|  1.11M|    static_assert(destructible_constraint,
 5850|  1.11M|                  "Scan argument types must be Destructible");
 5851|       |
 5852|  1.11M|    constexpr bool non_reference_constraint =
 5853|  1.11M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|  1.11M|    static_assert(non_reference_constraint,
 5855|  1.11M|                  "Scan argument types must not be references");
 5856|       |
 5857|  1.11M|    constexpr bool movable_constraint =
 5858|  1.11M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|  1.11M|    static_assert(movable_constraint,
 5860|  1.11M|                  "Scan argument types must be move constructible");
 5861|       |
 5862|  1.11M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|  1.11M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|  1.11M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 6102|   616k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|   616k|    {
 6104|   616k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|   616k|    {
 6112|   616k|        return {detail::make_arg<
 6113|   616k|            kind, Context,
 6114|   616k|            mapped_type_constant<remove_cvref_t<A>,
 6115|   616k|                                 typename Context::char_type>::value>(args)...};
 6116|   616k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19EdvEEPvRT2_:
 5891|   616k|{
 5892|   616k|    return make_value<Context>(value).ref_value;
 5893|   616k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5826|   681k|{
 5827|   681k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|   681k|                                  needs_context_tag>) {
 5831|   681k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|   681k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|   681k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5660|   681k|    {                                                                        \
 5661|   681k|        return val;                                                          \
 5662|   681k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5795|  1.11M|{
 5796|  1.11M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  1.11M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  1.11M|    constexpr bool scannable_char =
 5800|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  1.11M|    static_assert(scannable_char,
 5802|  1.11M|                  "Cannot scan an argument of an unsupported character "
 5803|  1.11M|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  1.11M|    constexpr bool scannable_const =
 5806|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  1.11M|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  1.11M|    constexpr bool scannable_disabled =
 5810|  1.11M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  1.11M|    static_assert(scannable_disabled,
 5812|  1.11M|                  "Cannot scan an argument that has been disabled by "
 5813|  1.11M|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  1.11M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  1.11M|    static_assert(
 5817|  1.11M|        scannable,
 5818|  1.11M|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  1.11M|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  1.11M|    return arg_value{arg};
 5822|  1.11M|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5603|  1.11M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|  1.11M|    {
 5605|  1.11M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6406|  1.00M|    {
 6407|  1.00M|        return m_values;
 6408|  1.00M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|   616k|        : basic_scan_args(store.desc, store.args.data())
 6153|   616k|    {
 6154|   616k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|   284k|        : m_str(r.str)
 8793|   284k|    {
 8794|   284k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1738|   315k|    {
 1739|   315k|        return has_value();
 1740|   315k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1813|   884k|    {
 1814|   884k|        return &value();
 1815|   884k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|   884k|    {
 1768|   884k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   884k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   884k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   884k|        return this->get_value();
 1770|   884k|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9829|   142k|{
 9830|   142k|    auto result = make_scan_result<Source, Args...>();
 9831|   142k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|   142k|                                   make_scan_args(result->values())));
 9833|   142k|    return result;
 9834|   142k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9870|  30.9k|{
 9871|  30.9k|    auto result = make_scan_result<Source, T>();
 9872|  30.9k|    fill_scan_result(
 9873|  30.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  30.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|  30.9k|                            detail::make_arg<scan_context>(result->value())));
 9875|  30.9k|    return result;
 9876|  30.9k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEENS0_14basic_scan_argIT_EERT0_:
 5876|  65.1k|{
 5877|  65.1k|    check_scan_arg_types<T>();
 5878|       |
 5879|  65.1k|    basic_scan_arg<Context> arg;
 5880|  65.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  65.1k|    arg.m_value = make_value<Context>(value);
 5882|  65.1k|    return arg;
 5883|  65.1k|}
_ZNR3scn2v46detail25scan_result_value_storageIJdEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6428|   104k|    {
 6429|   104k|        return std::get<0>(m_values);
 6430|   104k|    }
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9760|   144k|{
 9761|   144k|    auto result = make_scan_result<Source, Args...>();
 9762|   144k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|   144k|                                   make_scan_args(result->values())));
 9764|   144k|    return result;
 9765|   144k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEEDav:
 9716|   320k|{
 9717|   320k|    return scan_result_type<Source, Args...>();
 9718|   320k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1550|   320k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   320k|        : m_value(T{}), m_has_value(true)
  427|   320k|    {
  428|   320k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2Ev:
 6623|   320k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJeEEC2Ev:
 6397|  1.13M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|   320k|{
 9702|   320k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 30.8k, False: 289k]
  |  |  ------------------
  ------------------
 9703|  30.8k|        out = unexpected(in.error());
 9704|  30.8k|    }
 9705|   289k|    else {
 9706|   289k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|   289k|    static_cast<    \
  |  | 1056|   289k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|   289k|    }
 9708|   320k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  30.8k|        : base(unexpect, std::move(e.error())),
 1615|  30.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  30.8k|    {
 1617|  30.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  30.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.8k|          m_has_value(false)
  451|  30.8k|    {
  452|  30.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  30.8k|    {
 1315|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1555|  30.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  901|  30.8k|    {
  902|  30.8k|        assign_common(std::move(other));
  903|  30.8k|        return *this;
  904|  30.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  30.8k|    {
  949|  30.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 30.8k, False: 0]
  ------------------
  950|  30.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 30.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  30.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  30.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.28M|    {
  490|  1.28M|        return m_has_value;
  491|  1.28M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   899k|    {
  456|   899k|        return m_value;
  457|   899k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  30.8k|    {
 1045|  30.8k|        this->destroy_value();
 1046|  30.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  30.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  30.8k|    {
  504|  30.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.8k|                                  std::forward<Args>(args)...);
  506|  30.8k|        m_has_value = false;
  507|  30.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.8k|    {
  473|  30.8k|        return m_unexpected;
  474|  30.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.8k|    {
  481|  30.8k|        return std::move(m_unexpected);
  482|  30.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8797|   288k|    {
 8798|   288k|        return m_str;
 8799|   288k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|   625k|{
 6127|   625k|    detail::check_scan_arg_types<Args...>();
 6128|   625k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|   625k|}
_ZN3scn2v46detail20check_scan_arg_typesIJeEEEbv:
 5841|  1.13M|{
 5842|  1.13M|    constexpr bool default_constructible_constraint =
 5843|  1.13M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5844|  1.13M|    static_assert(default_constructible_constraint,
 5845|  1.13M|                  "Scan argument types must be default constructible");
 5846|       |
 5847|  1.13M|    constexpr bool destructible_constraint =
 5848|  1.13M|        std::conjunction_v<std::is_destructible<Args>...>;
 5849|  1.13M|    static_assert(destructible_constraint,
 5850|  1.13M|                  "Scan argument types must be Destructible");
 5851|       |
 5852|  1.13M|    constexpr bool non_reference_constraint =
 5853|  1.13M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5854|  1.13M|    static_assert(non_reference_constraint,
 5855|  1.13M|                  "Scan argument types must not be references");
 5856|       |
 5857|  1.13M|    constexpr bool movable_constraint =
 5858|  1.13M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5859|  1.13M|    static_assert(movable_constraint,
 5860|  1.13M|                  "Scan argument types must be move constructible");
 5861|       |
 5862|  1.13M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5862:12): [Folded - Ignored]
  |  Branch (5862:48): [Folded - Ignored]
  ------------------
 5863|  1.13M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5863:12): [Folded - Ignored]
  |  Branch (5863:40): [Folded - Ignored]
  ------------------
 5864|  1.13M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEEC2ERNSt3__15tupleIJeEEE:
 6102|   625k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|   625k|    {
 6104|   625k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|   625k|    {
 6112|   625k|        return {detail::make_arg<
 6113|   625k|            kind, Context,
 6114|   625k|            mapped_type_constant<remove_cvref_t<A>,
 6115|   625k|                                 typename Context::char_type>::value>(args)...};
 6116|   625k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE20EevEEPvRT2_:
 5891|   625k|{
 5892|   625k|    return make_value<Context>(value).ref_value;
 5893|   625k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEEDaRT0_:
 5826|   691k|{
 5827|   691k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|   691k|                                  needs_context_tag>) {
 5831|   691k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|   691k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|   691k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERe:
 5660|   691k|    {                                                                        \
 5661|   691k|        return val;                                                          \
 5662|   691k|    }
_ZN3scn2v46detail15make_value_implIeReEEDaOT0_:
 5795|  1.13M|{
 5796|  1.13M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5797|  1.13M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5798|       |
 5799|  1.13M|    constexpr bool scannable_char =
 5800|  1.13M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5801|  1.13M|    static_assert(scannable_char,
 5802|  1.13M|                  "Cannot scan an argument of an unsupported character "
 5803|  1.13M|                  "type (i.e. char from a wchar_t source)");
 5804|       |
 5805|  1.13M|    constexpr bool scannable_const =
 5806|  1.13M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5807|  1.13M|    static_assert(scannable_const, "Cannot scan a const argument");
 5808|       |
 5809|  1.13M|    constexpr bool scannable_disabled =
 5810|  1.13M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5811|  1.13M|    static_assert(scannable_disabled,
 5812|  1.13M|                  "Cannot scan an argument that has been disabled by "
 5813|  1.13M|                  "flag (SCN_DISABLE_TYPE_*)");
 5814|       |
 5815|  1.13M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5816|  1.13M|    static_assert(
 5817|  1.13M|        scannable,
 5818|  1.13M|        "Cannot scan an argument. To make a type T scannable, provide "
 5819|  1.13M|        "a scn::scanner<T, CharT> specialization.");
 5820|       |
 5821|  1.13M|    return arg_value{arg};
 5822|  1.13M|}
_ZN3scn2v46detail9arg_valueC2IeEERT_:
 5603|  1.13M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5604|  1.13M|    {
 5605|  1.13M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJeEE6valuesEv:
 6406|  1.02M|    {
 6407|  1.02M|        return m_values;
 6408|  1.02M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|   625k|        : basic_scan_args(store.desc, store.args.data())
 6153|   625k|    {
 6154|   625k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|   288k|        : m_str(r.str)
 8793|   288k|    {
 8794|   288k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1738|   320k|    {
 1739|   320k|        return has_value();
 1740|   320k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1813|   899k|    {
 1814|   899k|        return &value();
 1815|   899k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|   899k|    {
 1768|   899k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   899k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   899k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   899k|        return this->get_value();
 1770|   899k|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9829|   144k|{
 9830|   144k|    auto result = make_scan_result<Source, Args...>();
 9831|   144k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|   144k|                                   make_scan_args(result->values())));
 9833|   144k|    return result;
 9834|   144k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9870|  31.6k|{
 9871|  31.6k|    auto result = make_scan_result<Source, T>();
 9872|  31.6k|    fill_scan_result(
 9873|  31.6k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  31.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|  31.6k|                            detail::make_arg<scan_context>(result->value())));
 9875|  31.6k|    return result;
 9876|  31.6k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEENS0_14basic_scan_argIT_EERT0_:
 5876|  66.2k|{
 5877|  66.2k|    check_scan_arg_types<T>();
 5878|       |
 5879|  66.2k|    basic_scan_arg<Context> arg;
 5880|  66.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  66.2k|    arg.m_value = make_value<Context>(value);
 5882|  66.2k|    return arg;
 5883|  66.2k|}
_ZNR3scn2v46detail25scan_result_value_storageIJeEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6428|   107k|    {
 6429|   107k|        return std::get<0>(m_values);
 6430|   107k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  92.4k|    {
 2868|  92.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  92.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  92.4k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  92.4k|    {
 2849|  92.4k|        return decay_copy(t.begin());
 2850|  92.4k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2092|  47.6M|{
 2093|  47.6M|    return SCN_FWD(t);
  ------------------
  |  | 1057|  47.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  47.6M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  2.17M|    {
 2925|  2.17M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  2.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  2.17M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  2.17M|    {
 2907|  2.17M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  2.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  2.17M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9760|   157k|{
 9761|   157k|    auto result = make_scan_result<Source, Args...>();
 9762|   157k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|   157k|                                   make_scan_args(result->values())));
 9764|   157k|    return result;
 9765|   157k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEEDav:
 9716|   347k|{
 9717|   347k|    return scan_result_type<Source, Args...>();
 9718|   347k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1550|   347k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   347k|        : m_value(T{}), m_has_value(true)
  427|   347k|    {
  428|   347k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2Ev:
 6623|   347k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6466|  1.08M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3458|  1.08M|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9701|   347k|{
 9702|   347k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 30.8k, False: 316k]
  |  |  ------------------
  ------------------
 9703|  30.8k|        out = unexpected(in.error());
 9704|  30.8k|    }
 9705|   316k|    else {
 9706|   316k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|   316k|    static_cast<    \
  |  | 1056|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|   316k|    }
 9708|   347k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1738|  1.08M|    {
 1739|  1.08M|        return has_value();
 1740|  1.08M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.17M|    {
  490|  2.17M|        return m_has_value;
  491|  2.17M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1744|  92.4k|    {
 1745|  92.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  92.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  92.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  92.4k|        return this->get_unexpected().error();
 1747|  92.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  92.4k|    {
  473|  92.4k|        return m_unexpected;
  474|  92.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1614|  30.8k|        : base(unexpect, std::move(e.error())),
 1615|  30.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  30.8k|    {
 1617|  30.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  30.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.8k|          m_has_value(false)
  451|  30.8k|    {
  452|  30.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  30.8k|    {
 1315|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1555|  30.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  901|  30.8k|    {
  902|  30.8k|        assign_common(std::move(other));
  903|  30.8k|        return *this;
  904|  30.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  948|  30.8k|    {
  949|  30.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 30.8k, False: 0]
  ------------------
  950|  30.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 30.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  30.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  30.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.39M|    {
  490|  1.39M|        return m_has_value;
  491|  1.39M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   981k|    {
  456|   981k|        return m_value;
  457|   981k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1044|  30.8k|    {
 1045|  30.8k|        this->destroy_value();
 1046|  30.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  30.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  30.8k|    {
  504|  30.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.8k|                                  std::forward<Args>(args)...);
  506|  30.8k|        m_has_value = false;
  507|  30.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.8k|    {
  473|  30.8k|        return m_unexpected;
  474|  30.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.8k|    {
  481|  30.8k|        return std::move(m_unexpected);
  482|  30.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6497|   992k|    {
 6498|   992k|        m_range = std::forward<Other>(r);
 6499|   992k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1793|   992k|    {
 1794|   992k|        return value();
 1795|   992k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1767|   992k|    {
 1768|   992k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   992k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   992k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   992k|        return this->get_value();
 1770|   992k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   992k|    {
  456|   992k|        return m_value;
  457|   992k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9522|   492k|{
 9523|   492k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1057|   492k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9524|   492k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9459|   492k|{
 9460|   492k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|   492k|    auto result = vscan_impl(buffer, format, args);
 9463|   492k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 42.6k, False: 449k]
  |  |  ------------------
  ------------------
 9464|  42.6k|        return unexpected(result.error());
 9465|  42.6k|    }
 9466|   449k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|   449k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|   492k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5379|  1.08M|{
 5380|  1.08M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|  1.08M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|  1.08M|                  "\n"
 5384|  1.08M|                  "Unsupported range type given as input to a scanning "
 5385|  1.08M|                  "function.\n"
 5386|  1.08M|                  "A range needs to have a character type (value type) "
 5387|  1.08M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|  1.08M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|  1.08M|                  "to be included.\n"
 5390|  1.08M|                  "See the scnlib documentation for more details.");
 5391|  1.08M|    static_assert(
 5392|  1.08M|        !std::is_same_v<T, custom_char_traits>,
 5393|  1.08M|        "\n"
 5394|  1.08M|        "Unsupported range type given as input to a scanning "
 5395|  1.08M|        "function.\n"
 5396|  1.08M|        "String types (std::basic_string, and std::basic_string_view) "
 5397|  1.08M|        "need to use std::char_traits. Strings with custom Traits are "
 5398|  1.08M|        "not supported.");
 5399|  1.08M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|  1.08M|                  "\n"
 5401|  1.08M|                  "Unsupported range type given as input to a scanning "
 5402|  1.08M|                  "function.\n"
 5403|  1.08M|                  "file_marker_found cannot be used as an "
 5404|  1.08M|                  "source range type to scn::scan.\n"
 5405|  1.08M|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|  1.08M|                  "and do not provide an explicit source range, "
 5407|  1.08M|                  "or use scn::scan with a FILE* directly.");
 5408|  1.08M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|  1.08M|                  "\n"
 5410|  1.08M|                  "Unsupported range type given as input to a scanning "
 5411|  1.08M|                  "function.\n"
 5412|  1.08M|                  "In order to be scannable, a range needs to satisfy "
 5413|  1.08M|                  "`forward_range`. `input_range` is not sufficient.");
 5414|  1.08M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|  1.08M|                  "\n"
 5416|  1.08M|                  "Unsupported range type given as input to a scanning "
 5417|  1.08M|                  "function.\n"
 5418|  1.08M|                  "A range needs to model forward_range and have a valid "
 5419|  1.08M|                  "character type (char or wchar_t) to be scannable.\n"
 5420|  1.08M|                  "Examples of scannable ranges are std::string, "
 5421|  1.08M|                  "std::string_view, "
 5422|  1.08M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|  1.08M|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|  1.08M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|  1.08M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5349|  1.08M|{
 5350|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5351|       |        return file_marker_found{};
 5352|       |    }
 5353|       |    else if constexpr (!ranges::forward_range<Range>) {
 5354|       |        if constexpr (ranges::range<Range>) {
 5355|       |            return insufficient_range{};
 5356|       |        }
 5357|       |        else {
 5358|       |            return invalid_input_range{};
 5359|       |        }
 5360|       |    }
 5361|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5362|       |        return invalid_char_type{};
 5363|       |    }
 5364|  1.08M|    else {
 5365|  1.08M|        return make_forward_scan_buffer(r);
 5366|  1.08M|    }
 5367|  1.08M|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5183|  1.08M|{
 5184|  1.08M|    return basic_scan_forward_buffer_impl(range);
 5185|  1.08M|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4763|  1.08M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1057|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4764|  1.08M|          m_cursor(ranges::begin(*m_range))
 4765|  1.08M|    {
 4766|  1.08M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4735|  1.08M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4736|  1.08M|    {
 4737|  1.08M|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4426|  1.08M|        : m_current_view(sv), m_is_contiguous(false)
 4427|  1.08M|    {
 4428|  1.08M|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4339|  1.08M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  2.07M|    {
 2868|  2.07M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  2.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  2.07M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  2.07M|    {
 2849|  2.07M|        return decay_copy(t.begin());
 2850|  2.07M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3478|  3.07M|    {
 3479|  3.07M|        return m_iterator;
 3480|  3.07M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4769|  13.9M|    {
 4770|  13.9M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4770:13): [True: 291k, False: 13.6M]
  ------------------
 4771|   291k|            return false;
 4772|   291k|        }
 4773|  13.6M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4774|  13.6M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1051|  13.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  13.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4775|  13.6M|        }
 4776|  13.6M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4776:13): [True: 12.5M, False: 1.06M]
  ------------------
 4777|  12.5M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4778|  12.5M|                                          this->m_current_view.begin(),
 4779|  12.5M|                                          this->m_current_view.end());
 4780|  12.5M|        }
 4781|  13.6M|        m_latest = *m_cursor;
 4782|  13.6M|        ++m_cursor;
 4783|  13.6M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4784|  13.6M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4785|  13.6M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1051|  13.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  13.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4786|  13.6M|        }
 4787|  13.6M|        return true;
 4788|  13.9M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  41.2M|    {
 2925|  41.2M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  41.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  41.2M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  41.2M|    {
 2907|  41.2M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  41.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  41.2M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3482|  42.2M|    {
 3483|  42.2M|        return m_sentinel;
 3484|  42.2M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4344|  1.08M|    {
 4345|  1.08M|        SCN_UNUSED(position);
  ------------------
  |  | 1036|  1.08M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4346|  1.08M|        return true;
 4347|  1.08M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1614|  92.4k|        : base(unexpect, std::move(e.error())),
 1615|  92.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  92.4k|    {
 1617|  92.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  92.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  92.4k|          m_has_value(false)
  451|  92.4k|    {
  452|  92.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  1.08M|    {
 1315|  1.08M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6727|   992k|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|   992k|                      ranges::iterator_t<SourceRange>>) {
 6730|   992k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|   992k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   992k|    {
 2868|   992k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   992k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   992k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   992k|    {
 2849|   992k|        return decay_copy(t.begin());
 2850|   992k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6714|   992k|{
 6715|   992k|    return ranges::end(source);
 6716|   992k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   992k|    {
 2925|   992k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   992k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   992k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   992k|    {
 2907|   992k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   992k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   992k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1568|   992k|        : base(std::in_place, std::forward<U>(val)),
 1569|   992k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   992k|    {
 1571|   992k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   992k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   992k|    {
  442|   992k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8797|   315k|    {
 8798|   315k|        return m_str;
 8799|   315k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3463|  2.07M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  2.07M|    static_cast<    \
  |  | 1056|  2.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  2.07M|    static_cast<    \
  |  | 1056|  2.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|  2.07M|    {
 3465|  2.07M|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|   315k|        : m_str(r.str)
 8793|   315k|    {
 8794|   315k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1738|   347k|    {
 1739|   347k|        return has_value();
 1740|   347k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1813|   981k|    {
 1814|   981k|        return &value();
 1815|   981k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1767|   981k|    {
 1768|   981k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   981k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   981k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   981k|        return this->get_value();
 1770|   981k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6486|   992k|    {
 6487|   992k|        return ranges::begin(m_range);
 6488|   992k|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9829|   157k|{
 9830|   157k|    auto result = make_scan_result<Source, Args...>();
 9831|   157k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|   157k|                                   make_scan_args(result->values())));
 9833|   157k|    return result;
 9834|   157k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9540|   492k|{
 9541|   492k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1057|   492k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9542|   492k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9475|   492k|{
 9476|   492k|#if !SCN_DISABLE_LOCALE
 9477|   492k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|   492k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|   492k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|   492k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|   492k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 42.6k, False: 449k]
  |  |  ------------------
  ------------------
 9484|  42.6k|        return unexpected(result.error());
 9485|  42.6k|    }
 9486|   449k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|   449k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|   492k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9870|  32.1k|{
 9871|  32.1k|    auto result = make_scan_result<Source, T>();
 9872|  32.1k|    fill_scan_result(
 9873|  32.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  32.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|  32.1k|                            detail::make_arg<scan_context>(result->value())));
 9875|  32.1k|    return result;
 9876|  32.1k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9553|   101k|{
 9554|   101k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1057|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9555|   101k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9499|   101k|{
 9500|   101k|    auto buffer = detail::make_scan_buffer(range);
 9501|       |
 9502|   101k|    auto result = detail::vscan_value_impl(buffer, arg);
 9503|   101k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 7.11k, False: 93.8k]
  |  |  ------------------
  ------------------
 9504|  7.11k|        return unexpected(result.error());
 9505|  7.11k|    }
 9506|  93.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  93.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9507|   101k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9760|   166k|{
 9761|   166k|    auto result = make_scan_result<Source, Args...>();
 9762|   166k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|   166k|                                   make_scan_args(result->values())));
 9764|   166k|    return result;
 9765|   166k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEEDav:
 9716|   366k|{
 9717|   366k|    return scan_result_type<Source, Args...>();
 9718|   366k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1550|   366k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   366k|        : m_value(T{}), m_has_value(true)
  427|   366k|    {
  428|   366k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2Ev:
 6623|   366k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9701|   366k|{
 9702|   366k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 30.8k, False: 335k]
  |  |  ------------------
  ------------------
 9703|  30.8k|        out = unexpected(in.error());
 9704|  30.8k|    }
 9705|   335k|    else {
 9706|   335k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|   335k|    static_cast<    \
  |  | 1056|   335k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|   335k|    }
 9708|   366k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1614|  30.8k|        : base(unexpect, std::move(e.error())),
 1615|  30.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  30.8k|    {
 1617|  30.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  30.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.8k|          m_has_value(false)
  451|  30.8k|    {
  452|  30.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  30.8k|    {
 1315|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1555|  30.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  901|  30.8k|    {
  902|  30.8k|        assign_common(std::move(other));
  903|  30.8k|        return *this;
  904|  30.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  948|  30.8k|    {
  949|  30.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 30.8k, False: 0]
  ------------------
  950|  30.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 30.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  30.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  30.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.46M|    {
  490|  1.46M|        return m_has_value;
  491|  1.46M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.03M|    {
  456|  1.03M|        return m_value;
  457|  1.03M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1044|  30.8k|    {
 1045|  30.8k|        this->destroy_value();
 1046|  30.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  30.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  30.8k|    {
  504|  30.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.8k|                                  std::forward<Args>(args)...);
  506|  30.8k|        m_has_value = false;
  507|  30.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.8k|    {
  473|  30.8k|        return m_unexpected;
  474|  30.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.8k|    {
  481|  30.8k|        return std::move(m_unexpected);
  482|  30.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8797|   332k|    {
 8798|   332k|        return m_str;
 8799|   332k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|   332k|        : m_str(r.str)
 8793|   332k|    {
 8794|   332k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1738|   366k|    {
 1739|   366k|        return has_value();
 1740|   366k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1813|  1.03M|    {
 1814|  1.03M|        return &value();
 1815|  1.03M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1767|  1.03M|    {
 1768|  1.03M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.03M|        return this->get_value();
 1770|  1.03M|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9829|   166k|{
 9830|   166k|    auto result = make_scan_result<Source, Args...>();
 9831|   166k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|   166k|                                   make_scan_args(result->values())));
 9833|   166k|    return result;
 9834|   166k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9870|  34.1k|{
 9871|  34.1k|    auto result = make_scan_result<Source, T>();
 9872|  34.1k|    fill_scan_result(
 9873|  34.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  34.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|  34.1k|                            detail::make_arg<scan_context>(result->value())));
 9875|  34.1k|    return result;
 9876|  34.1k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9760|   168k|{
 9761|   168k|    auto result = make_scan_result<Source, Args...>();
 9762|   168k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9763|   168k|                                   make_scan_args(result->values())));
 9764|   168k|    return result;
 9765|   168k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEEDav:
 9716|   370k|{
 9717|   370k|    return scan_result_type<Source, Args...>();
 9718|   370k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1550|   370k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   370k|        : m_value(T{}), m_has_value(true)
  427|   370k|    {
  428|   370k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2Ev:
 6623|   370k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9701|   370k|{
 9702|   370k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 30.8k, False: 340k]
  |  |  ------------------
  ------------------
 9703|  30.8k|        out = unexpected(in.error());
 9704|  30.8k|    }
 9705|   340k|    else {
 9706|   340k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|   340k|    static_cast<    \
  |  | 1056|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|   340k|    }
 9708|   370k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1614|  30.8k|        : base(unexpect, std::move(e.error())),
 1615|  30.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  30.8k|    {
 1617|  30.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  30.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  30.8k|          m_has_value(false)
  451|  30.8k|    {
  452|  30.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  30.8k|    {
 1315|  30.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1555|  30.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  901|  30.8k|    {
  902|  30.8k|        assign_common(std::move(other));
  903|  30.8k|        return *this;
  904|  30.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  948|  30.8k|    {
  949|  30.8k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 30.8k, False: 0]
  ------------------
  950|  30.8k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 30.8k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  30.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  30.8k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.48M|    {
  490|  1.48M|        return m_has_value;
  491|  1.48M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.05M|    {
  456|  1.05M|        return m_value;
  457|  1.05M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1044|  30.8k|    {
 1045|  30.8k|        this->destroy_value();
 1046|  30.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  30.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  30.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  30.8k|    {
  504|  30.8k|        scn::detail::construct_at(&get_unexpected(),
  505|  30.8k|                                  std::forward<Args>(args)...);
  506|  30.8k|        m_has_value = false;
  507|  30.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  30.8k|    {
  473|  30.8k|        return m_unexpected;
  474|  30.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  30.8k|    {
  481|  30.8k|        return std::move(m_unexpected);
  482|  30.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8797|   336k|    {
 8798|   336k|        return m_str;
 8799|   336k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8792|   336k|        : m_str(r.str)
 8793|   336k|    {
 8794|   336k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1738|   370k|    {
 1739|   370k|        return has_value();
 1740|   370k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1813|  1.05M|    {
 1814|  1.05M|        return &value();
 1815|  1.05M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1767|  1.05M|    {
 1768|  1.05M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.05M|        return this->get_value();
 1770|  1.05M|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9829|   168k|{
 9830|   168k|    auto result = make_scan_result<Source, Args...>();
 9831|   168k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9832|   168k|                                   make_scan_args(result->values())));
 9833|   168k|    return result;
 9834|   168k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9870|  34.6k|{
 9871|  34.6k|    auto result = make_scan_result<Source, T>();
 9872|  34.6k|    fill_scan_result(
 9873|  34.6k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  34.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9874|  34.6k|                            detail::make_arg<scan_context>(result->value())));
 9875|  34.6k|    return result;
 9876|  34.6k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   189k|    {
 2868|   189k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   189k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   189k|    {
 2849|   189k|        return decay_copy(t.begin());
 2850|   189k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2092|  5.09M|{
 2093|  5.09M|    return SCN_FWD(t);
  ------------------
  |  | 1057|  5.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  5.09M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  1.26M|    {
 2925|  1.26M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  1.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  1.26M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  1.26M|    {
 2907|  1.26M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  1.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  1.26M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEEDav:
 9716|   192k|{
 9717|   192k|    return scan_result_type<Source, Args...>();
 9718|   192k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1550|   192k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   192k|        : m_value(T{}), m_has_value(true)
  427|   192k|    {
  428|   192k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2Ev:
 6623|   192k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6466|   629k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3458|   629k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|   192k|{
 9702|   192k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 61.6k, False: 130k]
  |  |  ------------------
  ------------------
 9703|  61.6k|        out = unexpected(in.error());
 9704|  61.6k|    }
 9705|   130k|    else {
 9706|   130k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|   130k|    static_cast<    \
  |  | 1056|   130k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|   130k|    }
 9708|   192k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1738|   629k|    {
 1739|   629k|        return has_value();
 1740|   629k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.25M|    {
  490|  1.25M|        return m_has_value;
  491|  1.25M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1744|   184k|    {
 1745|   184k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   184k|        return this->get_unexpected().error();
 1747|   184k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   184k|    {
  473|   184k|        return m_unexpected;
  474|   184k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  61.6k|        : base(unexpect, std::move(e.error())),
 1615|  61.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  61.6k|    {
 1617|  61.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  61.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  61.6k|          m_has_value(false)
  451|  61.6k|    {
  452|  61.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  61.6k|    {
 1315|  61.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1555|  61.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  901|  61.6k|    {
  902|  61.6k|        assign_common(std::move(other));
  903|  61.6k|        return *this;
  904|  61.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  61.6k|    {
  949|  61.6k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 61.6k, False: 0]
  ------------------
  950|  61.6k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 61.6k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  61.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  61.6k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   768k|    {
  490|   768k|        return m_has_value;
  491|   768k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   453k|    {
  456|   453k|        return m_value;
  457|   453k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  61.6k|    {
 1045|  61.6k|        this->destroy_value();
 1046|  61.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  61.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  61.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  61.6k|    {
  504|  61.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  61.6k|                                  std::forward<Args>(args)...);
  506|  61.6k|        m_has_value = false;
  507|  61.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  61.6k|    {
  473|  61.6k|        return m_unexpected;
  474|  61.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  61.6k|    {
  481|  61.6k|        return std::move(m_unexpected);
  482|  61.6k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6497|   444k|    {
 6498|   444k|        m_range = std::forward<Other>(r);
 6499|   444k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1793|   444k|    {
 1794|   444k|        return value();
 1795|   444k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1767|   444k|    {
 1768|   444k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   444k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   444k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   444k|        return this->get_value();
 1770|   444k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   444k|    {
  456|   444k|        return m_value;
  457|   444k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9459|   286k|{
 9460|   286k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|   286k|    auto result = vscan_impl(buffer, format, args);
 9463|   286k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|   286k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 85.3k, False: 201k]
  |  |  ------------------
  ------------------
 9464|  85.3k|        return unexpected(result.error());
 9465|  85.3k|    }
 9466|   201k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|   286k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5379|   629k|{
 5380|   629k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|   629k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|   629k|                  "\n"
 5384|   629k|                  "Unsupported range type given as input to a scanning "
 5385|   629k|                  "function.\n"
 5386|   629k|                  "A range needs to have a character type (value type) "
 5387|   629k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|   629k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|   629k|                  "to be included.\n"
 5390|   629k|                  "See the scnlib documentation for more details.");
 5391|   629k|    static_assert(
 5392|   629k|        !std::is_same_v<T, custom_char_traits>,
 5393|   629k|        "\n"
 5394|   629k|        "Unsupported range type given as input to a scanning "
 5395|   629k|        "function.\n"
 5396|   629k|        "String types (std::basic_string, and std::basic_string_view) "
 5397|   629k|        "need to use std::char_traits. Strings with custom Traits are "
 5398|   629k|        "not supported.");
 5399|   629k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|   629k|                  "\n"
 5401|   629k|                  "Unsupported range type given as input to a scanning "
 5402|   629k|                  "function.\n"
 5403|   629k|                  "file_marker_found cannot be used as an "
 5404|   629k|                  "source range type to scn::scan.\n"
 5405|   629k|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|   629k|                  "and do not provide an explicit source range, "
 5407|   629k|                  "or use scn::scan with a FILE* directly.");
 5408|   629k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|   629k|                  "\n"
 5410|   629k|                  "Unsupported range type given as input to a scanning "
 5411|   629k|                  "function.\n"
 5412|   629k|                  "In order to be scannable, a range needs to satisfy "
 5413|   629k|                  "`forward_range`. `input_range` is not sufficient.");
 5414|   629k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|   629k|                  "\n"
 5416|   629k|                  "Unsupported range type given as input to a scanning "
 5417|   629k|                  "function.\n"
 5418|   629k|                  "A range needs to model forward_range and have a valid "
 5419|   629k|                  "character type (char or wchar_t) to be scannable.\n"
 5420|   629k|                  "Examples of scannable ranges are std::string, "
 5421|   629k|                  "std::string_view, "
 5422|   629k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|   629k|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|   629k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|   629k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5318|   629k|{
 5319|   629k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5320|   629k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5321|       |    }
 5322|       |    else {
 5323|       |        return invalid_char_type{};
 5324|       |    }
 5325|   629k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   629k|    {
 2999|   629k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   629k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   629k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|   629k|    {
 2980|   629k|        return t.data();
 2981|   629k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3381|   629k|    {
 3382|   629k|        return detail::to_address(ranges::begin(derived()));
 3383|   629k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  2.98M|{
  316|  2.98M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1057|  2.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  2.98M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  2.98M|{
  294|  2.98M|    return p;
  295|  2.98M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  1.07M|    {
 2868|  1.07M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  1.07M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  1.07M|    {
 2849|  1.07M|        return decay_copy(t.begin());
 2850|  1.07M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3478|  23.2M|    {
 3479|  23.2M|        return m_iterator;
 3480|  23.2M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3337|   629k|    {
 3338|   629k|        return static_cast<const D&>(*this);
 3339|   629k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3073|   629k|    {
 3074|   629k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|   629k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3039|   629k|    {
 3040|   629k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|   629k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|   629k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3494|  3.28M|    {
 3495|  3.28M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3496|  3.28M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1614|   184k|        : base(unexpect, std::move(e.error())),
 1615|   184k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   184k|    {
 1617|   184k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|   184k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   184k|          m_has_value(false)
  451|   184k|    {
  452|   184k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   629k|    {
 1315|   629k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6727|   444k|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|   444k|                      ranges::iterator_t<SourceRange>>) {
 6730|   444k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|   444k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  2.12M|    {
 2868|  2.12M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  2.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  2.12M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  2.12M|    {
 2849|  2.12M|        return decay_copy(t.begin());
 2850|  2.12M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6714|   444k|{
 6715|   444k|    return ranges::end(source);
 6716|   444k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   444k|    {
 2925|   444k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   444k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   444k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   444k|    {
 2907|   444k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   444k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   444k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3482|  12.9M|    {
 3483|  12.9M|        return m_sentinel;
 3484|  12.9M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|   444k|        : base(std::in_place, std::forward<U>(val)),
 1569|   444k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   444k|    {
 1571|   444k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   444k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   444k|    {
  442|   444k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8797|   175k|    {
 8798|   175k|        return m_str;
 8799|   175k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|   351k|{
 6127|   351k|    detail::check_scan_arg_types<Args...>();
 6128|   351k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|   351k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEEC2ERNSt3__15tupleIJfEEE:
 6102|   351k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|   351k|    {
 6104|   351k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|   351k|    {
 6112|   351k|        return {detail::make_arg<
 6113|   351k|            kind, Context,
 6114|   351k|            mapped_type_constant<remove_cvref_t<A>,
 6115|   351k|                                 typename Context::char_type>::value>(args)...};
 6116|   351k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE18EfvEEPvRT2_:
 5891|   351k|{
 5892|   351k|    return make_value<Context>(value).ref_value;
 5893|   351k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEEDaRT0_:
 5826|   384k|{
 5827|   384k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|   384k|                                  needs_context_tag>) {
 5831|   384k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|   384k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|   384k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERf:
 5660|   384k|    {                                                                        \
 5661|   384k|        return val;                                                          \
 5662|   384k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|   351k|        : basic_scan_args(store.desc, store.args.data())
 6153|   351k|    {
 6154|   351k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6204|  1.14M|        : m_desc(desc), m_builtin_values(data)
 6205|  1.14M|    {
 6206|  1.14M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3463|  8.46M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  8.46M|    static_cast<    \
  |  | 1056|  8.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  8.46M|    static_cast<    \
  |  | 1056|  8.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|  8.46M|    {
 3465|  8.46M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8463|  1.14M|{
 8464|  1.14M|    return s;
 8465|  1.14M|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8435|  1.14M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|   175k|        : m_str(r.str)
 8793|   175k|    {
 8794|   175k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1738|   192k|    {
 1739|   192k|        return has_value();
 1740|   192k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1813|   453k|    {
 1814|   453k|        return &value();
 1815|   453k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|   453k|    {
 1768|   453k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   453k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   453k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   453k|        return this->get_value();
 1770|   453k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6486|   444k|    {
 6487|   444k|        return ranges::begin(m_range);
 6488|   444k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9475|   286k|{
 9476|   286k|#if !SCN_DISABLE_LOCALE
 9477|   286k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|   286k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|   286k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|   286k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|   286k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|   286k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 85.3k, False: 201k]
  |  |  ------------------
  ------------------
 9484|  85.3k|        return unexpected(result.error());
 9485|  85.3k|    }
 9486|   201k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|   286k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9499|  56.4k|{
 9500|  56.4k|    auto buffer = detail::make_scan_buffer(range);
 9501|       |
 9502|  56.4k|    auto result = detail::vscan_value_impl(buffer, arg);
 9503|  56.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  56.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 14.2k, False: 42.2k]
  |  |  ------------------
  ------------------
 9504|  14.2k|        return unexpected(result.error());
 9505|  14.2k|    }
 9506|  42.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  42.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9507|  56.4k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEENS0_14basic_scan_argIT_EERT0_:
 5876|  32.6k|{
 5877|  32.6k|    check_scan_arg_types<T>();
 5878|       |
 5879|  32.6k|    basic_scan_arg<Context> arg;
 5880|  32.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  32.6k|    arg.m_value = make_value<Context>(value);
 5882|  32.6k|    return arg;
 5883|  32.6k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5971|  1.25M|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEEDav:
 9716|   216k|{
 9717|   216k|    return scan_result_type<Source, Args...>();
 9718|   216k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1550|   216k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   216k|        : m_value(T{}), m_has_value(true)
  427|   216k|    {
  428|   216k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6623|   216k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|   216k|{
 9702|   216k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|   216k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 61.6k, False: 154k]
  |  |  ------------------
  ------------------
 9703|  61.6k|        out = unexpected(in.error());
 9704|  61.6k|    }
 9705|   154k|    else {
 9706|   154k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|   154k|    static_cast<    \
  |  | 1056|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|   154k|    }
 9708|   216k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  61.6k|        : base(unexpect, std::move(e.error())),
 1615|  61.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  61.6k|    {
 1617|  61.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  61.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  61.6k|          m_has_value(false)
  451|  61.6k|    {
  452|  61.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  61.6k|    {
 1315|  61.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1555|  61.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  901|  61.6k|    {
  902|  61.6k|        assign_common(std::move(other));
  903|  61.6k|        return *this;
  904|  61.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  61.6k|    {
  949|  61.6k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 61.6k, False: 0]
  ------------------
  950|  61.6k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 61.6k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  61.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  61.6k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   865k|    {
  490|   865k|        return m_has_value;
  491|   865k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   525k|    {
  456|   525k|        return m_value;
  457|   525k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  61.6k|    {
 1045|  61.6k|        this->destroy_value();
 1046|  61.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  61.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  61.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  61.6k|    {
  504|  61.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  61.6k|                                  std::forward<Args>(args)...);
  506|  61.6k|        m_has_value = false;
  507|  61.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  61.6k|    {
  473|  61.6k|        return m_unexpected;
  474|  61.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  61.6k|    {
  481|  61.6k|        return std::move(m_unexpected);
  482|  61.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8797|   196k|    {
 8798|   196k|        return m_str;
 8799|   196k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|   393k|{
 6127|   393k|    detail::check_scan_arg_types<Args...>();
 6128|   393k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|   393k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 6102|   393k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|   393k|    {
 6104|   393k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|   393k|    {
 6112|   393k|        return {detail::make_arg<
 6113|   393k|            kind, Context,
 6114|   393k|            mapped_type_constant<remove_cvref_t<A>,
 6115|   393k|                                 typename Context::char_type>::value>(args)...};
 6116|   393k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE19EdvEEPvRT2_:
 5891|   393k|{
 5892|   393k|    return make_value<Context>(value).ref_value;
 5893|   393k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5826|   432k|{
 5827|   432k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|   432k|                                  needs_context_tag>) {
 5831|   432k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|   432k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|   432k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5660|   432k|    {                                                                        \
 5661|   432k|        return val;                                                          \
 5662|   432k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|   393k|        : basic_scan_args(store.desc, store.args.data())
 6153|   393k|    {
 6154|   393k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|   196k|        : m_str(r.str)
 8793|   196k|    {
 8794|   196k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1738|   216k|    {
 1739|   216k|        return has_value();
 1740|   216k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1813|   525k|    {
 1814|   525k|        return &value();
 1815|   525k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|   525k|    {
 1768|   525k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   525k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   525k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   525k|        return this->get_value();
 1770|   525k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEENS0_14basic_scan_argIT_EERT0_:
 5876|  39.5k|{
 5877|  39.5k|    check_scan_arg_types<T>();
 5878|       |
 5879|  39.5k|    basic_scan_arg<Context> arg;
 5880|  39.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  39.5k|    arg.m_value = make_value<Context>(value);
 5882|  39.5k|    return arg;
 5883|  39.5k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEEDav:
 9716|   220k|{
 9717|   220k|    return scan_result_type<Source, Args...>();
 9718|   220k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1550|   220k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   220k|        : m_value(T{}), m_has_value(true)
  427|   220k|    {
  428|   220k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2Ev:
 6623|   220k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9701|   220k|{
 9702|   220k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 61.6k, False: 159k]
  |  |  ------------------
  ------------------
 9703|  61.6k|        out = unexpected(in.error());
 9704|  61.6k|    }
 9705|   159k|    else {
 9706|   159k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|   159k|    static_cast<    \
  |  | 1056|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|   159k|    }
 9708|   220k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1614|  61.6k|        : base(unexpect, std::move(e.error())),
 1615|  61.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  61.6k|    {
 1617|  61.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  61.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  61.6k|          m_has_value(false)
  451|  61.6k|    {
  452|  61.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  61.6k|    {
 1315|  61.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1555|  61.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  901|  61.6k|    {
  902|  61.6k|        assign_common(std::move(other));
  903|  61.6k|        return *this;
  904|  61.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  948|  61.6k|    {
  949|  61.6k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 61.6k, False: 0]
  ------------------
  950|  61.6k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 61.6k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  61.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  61.6k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   883k|    {
  490|   883k|        return m_has_value;
  491|   883k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   539k|    {
  456|   539k|        return m_value;
  457|   539k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1044|  61.6k|    {
 1045|  61.6k|        this->destroy_value();
 1046|  61.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  61.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  61.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  61.6k|    {
  504|  61.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  61.6k|                                  std::forward<Args>(args)...);
  506|  61.6k|        m_has_value = false;
  507|  61.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  61.6k|    {
  473|  61.6k|        return m_unexpected;
  474|  61.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  61.6k|    {
  481|  61.6k|        return std::move(m_unexpected);
  482|  61.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8797|   200k|    {
 8798|   200k|        return m_str;
 8799|   200k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6126|   400k|{
 6127|   400k|    detail::check_scan_arg_types<Args...>();
 6128|   400k|    return detail::scan_arg_store<Context, Args...>(values);
 6129|   400k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEEC2ERNSt3__15tupleIJeEEE:
 6102|   400k|        : args(std::apply(make_argptrs<Args...>, args))
 6103|   400k|    {
 6104|   400k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6111|   400k|    {
 6112|   400k|        return {detail::make_arg<
 6113|   400k|            kind, Context,
 6114|   400k|            mapped_type_constant<remove_cvref_t<A>,
 6115|   400k|                                 typename Context::char_type>::value>(args)...};
 6116|   400k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE20EevEEPvRT2_:
 5891|   400k|{
 5892|   400k|    return make_value<Context>(value).ref_value;
 5893|   400k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEEDaRT0_:
 5826|   441k|{
 5827|   441k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5828|       |
 5829|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5830|   441k|                                  needs_context_tag>) {
 5831|   441k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1057|   441k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5832|       |    }
 5833|       |    else {
 5834|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5835|       |            value, context_tag<Context>{}));
 5836|       |    }
 5837|   441k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERe:
 5660|   441k|    {                                                                        \
 5661|   441k|        return val;                                                          \
 5662|   441k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6152|   400k|        : basic_scan_args(store.desc, store.args.data())
 6153|   400k|    {
 6154|   400k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|   200k|        : m_str(r.str)
 8793|   200k|    {
 8794|   200k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1738|   220k|    {
 1739|   220k|        return has_value();
 1740|   220k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1813|   539k|    {
 1814|   539k|        return &value();
 1815|   539k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1767|   539k|    {
 1768|   539k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   539k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   539k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   539k|        return this->get_value();
 1770|   539k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEENS0_14basic_scan_argIT_EERT0_:
 5876|  40.7k|{
 5877|  40.7k|    check_scan_arg_types<T>();
 5878|       |
 5879|  40.7k|    basic_scan_arg<Context> arg;
 5880|  40.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5881|  40.7k|    arg.m_value = make_value<Context>(value);
 5882|  40.7k|    return arg;
 5883|  40.7k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   184k|    {
 2868|   184k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   184k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   184k|    {
 2849|   184k|        return decay_copy(t.begin());
 2850|   184k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2092|  12.6M|{
 2093|  12.6M|    return SCN_FWD(t);
  ------------------
  |  | 1057|  12.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|  12.6M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  1.25M|    {
 2925|  1.25M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  1.25M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  1.25M|    {
 2907|  1.25M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  1.25M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEEDav:
 9716|   192k|{
 9717|   192k|    return scan_result_type<Source, Args...>();
 9718|   192k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1550|   192k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   192k|        : m_value(T{}), m_has_value(true)
  427|   192k|    {
  428|   192k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2Ev:
 6623|   192k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6466|   629k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3458|   629k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9701|   192k|{
 9702|   192k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 61.6k, False: 130k]
  |  |  ------------------
  ------------------
 9703|  61.6k|        out = unexpected(in.error());
 9704|  61.6k|    }
 9705|   130k|    else {
 9706|   130k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|   130k|    static_cast<    \
  |  | 1056|   130k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|   130k|    }
 9708|   192k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1738|   629k|    {
 1739|   629k|        return has_value();
 1740|   629k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.25M|    {
  490|  1.25M|        return m_has_value;
  491|  1.25M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1744|   184k|    {
 1745|   184k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   184k|        return this->get_unexpected().error();
 1747|   184k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   184k|    {
  473|   184k|        return m_unexpected;
  474|   184k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1614|  61.6k|        : base(unexpect, std::move(e.error())),
 1615|  61.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  61.6k|    {
 1617|  61.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  61.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  61.6k|          m_has_value(false)
  451|  61.6k|    {
  452|  61.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  61.6k|    {
 1315|  61.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1555|  61.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  901|  61.6k|    {
  902|  61.6k|        assign_common(std::move(other));
  903|  61.6k|        return *this;
  904|  61.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  948|  61.6k|    {
  949|  61.6k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 61.6k, False: 0]
  ------------------
  950|  61.6k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 61.6k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  61.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  61.6k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   768k|    {
  490|   768k|        return m_has_value;
  491|   768k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   452k|    {
  456|   452k|        return m_value;
  457|   452k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1044|  61.6k|    {
 1045|  61.6k|        this->destroy_value();
 1046|  61.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  61.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  61.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  61.6k|    {
  504|  61.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  61.6k|                                  std::forward<Args>(args)...);
  506|  61.6k|        m_has_value = false;
  507|  61.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  61.6k|    {
  473|  61.6k|        return m_unexpected;
  474|  61.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  61.6k|    {
  481|  61.6k|        return std::move(m_unexpected);
  482|  61.6k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6497|   444k|    {
 6498|   444k|        m_range = std::forward<Other>(r);
 6499|   444k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1793|   444k|    {
 1794|   444k|        return value();
 1795|   444k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1767|   444k|    {
 1768|   444k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   444k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   444k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   444k|        return this->get_value();
 1770|   444k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   444k|    {
  456|   444k|        return m_value;
  457|   444k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9459|   286k|{
 9460|   286k|    auto buffer = make_scan_buffer(range);
 9461|       |
 9462|   286k|    auto result = vscan_impl(buffer, format, args);
 9463|   286k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|   286k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 85.3k, False: 200k]
  |  |  ------------------
  ------------------
 9464|  85.3k|        return unexpected(result.error());
 9465|  85.3k|    }
 9466|   200k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9467|   286k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5379|   629k|{
 5380|   629k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5381|       |
 5382|   629k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5383|   629k|                  "\n"
 5384|   629k|                  "Unsupported range type given as input to a scanning "
 5385|   629k|                  "function.\n"
 5386|   629k|                  "A range needs to have a character type (value type) "
 5387|   629k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5388|   629k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5389|   629k|                  "to be included.\n"
 5390|   629k|                  "See the scnlib documentation for more details.");
 5391|   629k|    static_assert(
 5392|   629k|        !std::is_same_v<T, custom_char_traits>,
 5393|   629k|        "\n"
 5394|   629k|        "Unsupported range type given as input to a scanning "
 5395|   629k|        "function.\n"
 5396|   629k|        "String types (std::basic_string, and std::basic_string_view) "
 5397|   629k|        "need to use std::char_traits. Strings with custom Traits are "
 5398|   629k|        "not supported.");
 5399|   629k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5400|   629k|                  "\n"
 5401|   629k|                  "Unsupported range type given as input to a scanning "
 5402|   629k|                  "function.\n"
 5403|   629k|                  "file_marker_found cannot be used as an "
 5404|   629k|                  "source range type to scn::scan.\n"
 5405|   629k|                  "To read from stdin, use scn::input or scn::prompt, "
 5406|   629k|                  "and do not provide an explicit source range, "
 5407|   629k|                  "or use scn::scan with a FILE* directly.");
 5408|   629k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5409|   629k|                  "\n"
 5410|   629k|                  "Unsupported range type given as input to a scanning "
 5411|   629k|                  "function.\n"
 5412|   629k|                  "In order to be scannable, a range needs to satisfy "
 5413|   629k|                  "`forward_range`. `input_range` is not sufficient.");
 5414|   629k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5415|   629k|                  "\n"
 5416|   629k|                  "Unsupported range type given as input to a scanning "
 5417|   629k|                  "function.\n"
 5418|   629k|                  "A range needs to model forward_range and have a valid "
 5419|   629k|                  "character type (char or wchar_t) to be scannable.\n"
 5420|   629k|                  "Examples of scannable ranges are std::string, "
 5421|   629k|                  "std::string_view, "
 5422|   629k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5423|   629k|                  "See the scnlib documentation for more details.");
 5424|       |
 5425|   629k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5426|   629k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5349|   629k|{
 5350|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5351|       |        return file_marker_found{};
 5352|       |    }
 5353|       |    else if constexpr (!ranges::forward_range<Range>) {
 5354|       |        if constexpr (ranges::range<Range>) {
 5355|       |            return insufficient_range{};
 5356|       |        }
 5357|       |        else {
 5358|       |            return invalid_input_range{};
 5359|       |        }
 5360|       |    }
 5361|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5362|       |        return invalid_char_type{};
 5363|       |    }
 5364|   629k|    else {
 5365|   629k|        return make_forward_scan_buffer(r);
 5366|   629k|    }
 5367|   629k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5183|   629k|{
 5184|   629k|    return basic_scan_forward_buffer_impl(range);
 5185|   629k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4763|   629k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1057|   629k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4764|   629k|          m_cursor(ranges::begin(*m_range))
 4765|   629k|    {
 4766|   629k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4735|   629k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4736|   629k|    {
 4737|   629k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4426|   629k|        : m_current_view(sv), m_is_contiguous(false)
 4427|   629k|    {
 4428|   629k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4339|   629k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|  1.07M|    {
 2868|  1.07M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|  1.07M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|  1.07M|    {
 2849|  1.07M|        return decay_copy(t.begin());
 2850|  1.07M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3478|  1.51M|    {
 3479|  1.51M|        return m_iterator;
 3480|  1.51M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4769|  3.21M|    {
 4770|  3.21M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4770:13): [True: 205k, False: 3.01M]
  ------------------
 4771|   205k|            return false;
 4772|   205k|        }
 4773|  3.01M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4774|  3.01M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1051|  3.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4775|  3.01M|        }
 4776|  3.01M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4776:13): [True: 2.38M, False: 626k]
  ------------------
 4777|  2.38M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4778|  2.38M|                                          this->m_current_view.begin(),
 4779|  2.38M|                                          this->m_current_view.end());
 4780|  2.38M|        }
 4781|  3.01M|        m_latest = *m_cursor;
 4782|  3.01M|        ++m_cursor;
 4783|  3.01M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4784|  3.01M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4785|  3.01M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1051|  3.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4786|  3.01M|        }
 4787|  3.01M|        return true;
 4788|  3.21M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|  9.23M|    {
 2925|  9.23M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|  9.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|  9.23M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|  9.23M|    {
 2907|  9.23M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|  9.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|  9.23M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3482|  9.68M|    {
 3483|  9.68M|        return m_sentinel;
 3484|  9.68M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4344|   629k|    {
 4345|   629k|        SCN_UNUSED(position);
  ------------------
  |  | 1036|   629k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4346|   629k|        return true;
 4347|   629k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1614|   184k|        : base(unexpect, std::move(e.error())),
 1615|   184k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   184k|    {
 1617|   184k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|   184k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   184k|          m_has_value(false)
  451|   184k|    {
  452|   184k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   629k|    {
 1315|   629k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6727|   444k|{
 6728|       |    if constexpr (ranges::random_access_iterator<
 6729|   444k|                      ranges::iterator_t<SourceRange>>) {
 6730|   444k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6731|       |    }
 6732|       |    else {
 6733|       |        auto it = ranges::begin(source);
 6734|       |        while (n > 0) {
 6735|       |            --n;
 6736|       |            ++it;
 6737|       |        }
 6738|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6739|       |    }
 6740|   444k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2867|   444k|    {
 2868|   444k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   444k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   444k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2848|   444k|    {
 2849|   444k|        return decay_copy(t.begin());
 2850|   444k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6714|   444k|{
 6715|   444k|    return ranges::end(source);
 6716|   444k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2924|   444k|    {
 2925|   444k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   444k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2926|   444k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2906|   444k|    {
 2907|   444k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1057|   444k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2908|   444k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1568|   444k|        : base(std::in_place, std::forward<U>(val)),
 1569|   444k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   444k|    {
 1571|   444k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   444k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   444k|    {
  442|   444k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8797|   175k|    {
 8798|   175k|        return m_str;
 8799|   175k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3463|  1.07M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  1.07M|    static_cast<    \
  |  | 1056|  1.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  1.07M|    static_cast<    \
  |  | 1056|  1.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|  1.07M|    {
 3465|  1.07M|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|   175k|        : m_str(r.str)
 8793|   175k|    {
 8794|   175k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1738|   192k|    {
 1739|   192k|        return has_value();
 1740|   192k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1813|   452k|    {
 1814|   452k|        return &value();
 1815|   452k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1767|   452k|    {
 1768|   452k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   452k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   452k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   452k|        return this->get_value();
 1770|   452k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6486|   444k|    {
 6487|   444k|        return ranges::begin(m_range);
 6488|   444k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9475|   286k|{
 9476|   286k|#if !SCN_DISABLE_LOCALE
 9477|   286k|    auto buffer = detail::make_scan_buffer(range);
 9478|       |
 9479|   286k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9480|   286k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9481|   286k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9482|       |
 9483|   286k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|   286k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 85.3k, False: 200k]
  |  |  ------------------
  ------------------
 9484|  85.3k|        return unexpected(result.error());
 9485|  85.3k|    }
 9486|   200k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9487|       |#else
 9488|       |    static_assert(dependent_false<Locale>::value,
 9489|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9490|       |
 9491|       |    return {};
 9492|       |#endif
 9493|   286k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9499|  56.4k|{
 9500|  56.4k|    auto buffer = detail::make_scan_buffer(range);
 9501|       |
 9502|  56.4k|    auto result = detail::vscan_value_impl(buffer, arg);
 9503|  56.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  986|  56.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 14.2k, False: 42.2k]
  |  |  ------------------
  ------------------
 9504|  14.2k|        return unexpected(result.error());
 9505|  14.2k|    }
 9506|  42.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1057|  42.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9507|  56.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEEDav:
 9716|   216k|{
 9717|   216k|    return scan_result_type<Source, Args...>();
 9718|   216k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1550|   216k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   216k|        : m_value(T{}), m_has_value(true)
  427|   216k|    {
  428|   216k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2Ev:
 6623|   216k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9701|   216k|{
 9702|   216k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|   216k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 61.6k, False: 154k]
  |  |  ------------------
  ------------------
 9703|  61.6k|        out = unexpected(in.error());
 9704|  61.6k|    }
 9705|   154k|    else {
 9706|   154k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|   154k|    static_cast<    \
  |  | 1056|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|   154k|    }
 9708|   216k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1614|  61.6k|        : base(unexpect, std::move(e.error())),
 1615|  61.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  61.6k|    {
 1617|  61.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  61.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  61.6k|          m_has_value(false)
  451|  61.6k|    {
  452|  61.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  61.6k|    {
 1315|  61.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1555|  61.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  901|  61.6k|    {
  902|  61.6k|        assign_common(std::move(other));
  903|  61.6k|        return *this;
  904|  61.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  948|  61.6k|    {
  949|  61.6k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 61.6k, False: 0]
  ------------------
  950|  61.6k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 61.6k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  61.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  61.6k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   865k|    {
  490|   865k|        return m_has_value;
  491|   865k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   525k|    {
  456|   525k|        return m_value;
  457|   525k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1044|  61.6k|    {
 1045|  61.6k|        this->destroy_value();
 1046|  61.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  61.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  61.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  61.6k|    {
  504|  61.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  61.6k|                                  std::forward<Args>(args)...);
  506|  61.6k|        m_has_value = false;
  507|  61.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  61.6k|    {
  473|  61.6k|        return m_unexpected;
  474|  61.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  61.6k|    {
  481|  61.6k|        return std::move(m_unexpected);
  482|  61.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8797|   196k|    {
 8798|   196k|        return m_str;
 8799|   196k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|   196k|        : m_str(r.str)
 8793|   196k|    {
 8794|   196k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1738|   216k|    {
 1739|   216k|        return has_value();
 1740|   216k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1813|   525k|    {
 1814|   525k|        return &value();
 1815|   525k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1767|   525k|    {
 1768|   525k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   525k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   525k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   525k|        return this->get_value();
 1770|   525k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEEDav:
 9716|   220k|{
 9717|   220k|    return scan_result_type<Source, Args...>();
 9718|   220k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1550|   220k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   220k|        : m_value(T{}), m_has_value(true)
  427|   220k|    {
  428|   220k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2Ev:
 6623|   220k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9701|   220k|{
 9702|   220k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  986|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 61.6k, False: 159k]
  |  |  ------------------
  ------------------
 9703|  61.6k|        out = unexpected(in.error());
 9704|  61.6k|    }
 9705|   159k|    else {
 9706|   159k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1055|   159k|    static_cast<    \
  |  | 1056|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9707|   159k|    }
 9708|   220k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1614|  61.6k|        : base(unexpect, std::move(e.error())),
 1615|  61.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  61.6k|    {
 1617|  61.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  61.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  61.6k|          m_has_value(false)
  451|  61.6k|    {
  452|  61.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  61.6k|    {
 1315|  61.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1555|  61.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  901|  61.6k|    {
  902|  61.6k|        assign_common(std::move(other));
  903|  61.6k|        return *this;
  904|  61.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  948|  61.6k|    {
  949|  61.6k|        if (this->has_value()) {
  ------------------
  |  Branch (949:13): [True: 61.6k, False: 0]
  ------------------
  950|  61.6k|            if (other.has_value()) {
  ------------------
  |  Branch (950:17): [True: 0, False: 61.6k]
  ------------------
  951|      0|                return reassign_value(std::forward<Other>(other));
  952|      0|            }
  953|  61.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  954|  61.6k|        }
  955|       |
  956|      0|        if (other.has_value()) {
  ------------------
  |  Branch (956:13): [True: 0, False: 0]
  ------------------
  957|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  958|      0|        }
  959|      0|        return reassign_unexpected(std::forward<Other>(other));
  960|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   883k|    {
  490|   883k|        return m_has_value;
  491|   883k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   539k|    {
  456|   539k|        return m_value;
  457|   539k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1044|  61.6k|    {
 1045|  61.6k|        this->destroy_value();
 1046|  61.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1047|  61.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  61.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  61.6k|    {
  504|  61.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  61.6k|                                  std::forward<Args>(args)...);
  506|  61.6k|        m_has_value = false;
  507|  61.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  61.6k|    {
  473|  61.6k|        return m_unexpected;
  474|  61.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  61.6k|    {
  481|  61.6k|        return std::move(m_unexpected);
  482|  61.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8797|   200k|    {
 8798|   200k|        return m_str;
 8799|   200k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8792|   200k|        : m_str(r.str)
 8793|   200k|    {
 8794|   200k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1738|   220k|    {
 1739|   220k|        return has_value();
 1740|   220k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1813|   539k|    {
 1814|   539k|        return &value();
 1815|   539k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1767|   539k|    {
 1768|   539k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   539k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   539k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   539k|        return this->get_value();
 1770|   539k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3739|  3.68M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3740|  3.68M|    {
 3741|  3.68M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1036|  3.68M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3742|  3.68M|    }
_ZNK3scn2v410scan_error4codeEv:
 3751|   287k|    {
 3752|   287k|        return m_code;
 3753|   287k|    }
_ZNK3scn2v410scan_error3msgEv:
 3756|  2.55k|    {
 3757|  2.55k|        return m_msg;
 3758|  2.55k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3974|   814k|{
 3975|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3976|       |                                          const CharT*, const CharT*>) {
 3977|       |        return {first, last};
 3978|       |    }
 3979|   814k|    else {
 3980|   814k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3981|   814k|    }
 3982|   814k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3478|  48.6M|    {
 3479|  48.6M|        return m_iterator;
 3480|  48.6M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3478|  26.5M|    {
 3479|  26.5M|        return m_iterator;
 3480|  26.5M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  19.0M|    {
  572|  19.0M|        return m_has_value;
  573|  19.0M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|  3.89M|    {
  555|  3.89M|        return m_unexpected;
  556|  3.89M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1744|   442k|    {
 1745|   442k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   442k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   442k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   442k|        return this->get_unexpected().error();
 1747|   442k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7027|  2.36M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7071|  1.73M|    {
 7072|  1.73M|        m_specs.type = type;
 7073|  1.73M|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7144|  2.36M|    {
 7145|  2.36M|        return m_error;
 7146|  2.36M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3916|  3.64M|{
 3917|  3.64M|    return unexpected(scan_error{c, m});
 3918|  3.64M|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4306|  5.06M|{
 4307|       |    // Pattern_White_Space property
 4308|  5.06M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4308:13): [True: 4.84M, False: 218k]
  |  Branch (4308:27): [True: 793k, False: 4.05M]
  ------------------
 4309|  5.06M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4309:12): [True: 52.1k, False: 4.21M]
  ------------------
 4310|  5.06M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4310:12): [True: 54.0k, False: 4.16M]
  ------------------
 4311|  5.06M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4311:12): [True: 4.41k, False: 4.15M]
  ------------------
 4312|  5.06M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4312:12): [True: 21.3k, False: 4.13M]
  ------------------
 4313|  5.06M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4313:12): [True: 1.05M, False: 3.08M]
  ------------------
 4314|  5.06M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 308, False: 3.08M]
  ------------------
 4315|  5.06M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7827|   633k|{
 7828|   633k|    switch (type) {
 7829|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7829:9): [True: 0, False: 633k]
  ------------------
 7830|      0|            return arg_type_category::none;
 7831|       |
 7832|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7832:9): [True: 0, False: 633k]
  ------------------
 7833|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7833:9): [True: 0, False: 633k]
  ------------------
 7834|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7834:9): [True: 0, False: 633k]
  ------------------
 7835|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7835:9): [True: 0, False: 633k]
  ------------------
 7836|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7836:9): [True: 0, False: 633k]
  ------------------
 7837|      0|        case arg_type::int128_type:
  ------------------
  |  Branch (7837:9): [True: 0, False: 633k]
  ------------------
 7838|      0|            return arg_type_category::integer;
 7839|       |
 7840|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7840:9): [True: 0, False: 633k]
  ------------------
 7841|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7841:9): [True: 0, False: 633k]
  ------------------
 7842|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7842:9): [True: 0, False: 633k]
  ------------------
 7843|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7843:9): [True: 0, False: 633k]
  ------------------
 7844|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7844:9): [True: 0, False: 633k]
  ------------------
 7845|      0|        case arg_type::uint128_type:
  ------------------
  |  Branch (7845:9): [True: 0, False: 633k]
  ------------------
 7846|      0|            return arg_type_category::unsigned_integer;
 7847|       |
 7848|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7848:9): [True: 0, False: 633k]
  ------------------
 7849|      0|            return arg_type_category::pointer;
 7850|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7850:9): [True: 0, False: 633k]
  ------------------
 7851|      0|            return arg_type_category::boolean;
 7852|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7852:9): [True: 0, False: 633k]
  ------------------
 7853|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7853:9): [True: 0, False: 633k]
  ------------------
 7854|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7854:9): [True: 0, False: 633k]
  ------------------
 7855|      0|            return arg_type_category::character;
 7856|       |
 7857|   194k|        case arg_type::float_type:
  ------------------
  |  Branch (7857:9): [True: 194k, False: 438k]
  ------------------
 7858|   411k|        case arg_type::double_type:
  ------------------
  |  Branch (7858:9): [True: 216k, False: 416k]
  ------------------
 7859|   633k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7859:9): [True: 221k, False: 411k]
  ------------------
 7860|   633k|            return arg_type_category::floating;
 7861|       |
 7862|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7862:9): [True: 0, False: 633k]
  ------------------
 7863|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7863:9): [True: 0, False: 633k]
  ------------------
 7864|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7864:9): [True: 0, False: 633k]
  ------------------
 7865|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7865:9): [True: 0, False: 633k]
  ------------------
 7866|      0|            return arg_type_category::string;
 7867|       |
 7868|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7868:9): [True: 0, False: 633k]
  ------------------
 7869|      0|            return arg_type_category::custom;
 7870|       |
 7871|      0|            SCN_CLANG_PUSH
 7872|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7873|      0|        default:
  ------------------
  |  Branch (7873:9): [True: 0, False: 633k]
  ------------------
 7874|      0|            SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   633k|            SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7876|   633k|            SCN_CLANG_POP
 7877|   633k|    }
 7878|       |
 7879|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7880|   633k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1754|  3.45M|    {
 1755|  3.45M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  3.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  3.45M|        return std::move(this->get_unexpected().error());
 1757|  3.45M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3039|  2.72M|    {
 3040|  2.72M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|  2.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|  2.72M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 3073|  2.72M|    {
 3074|  2.72M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|  2.72M|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3096|  2.72M|    {
 3097|  2.72M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3098|  2.72M|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3105|  2.72M|    {
 3106|  2.72M|        return fn::impl(std::forward<T>(t));
 3107|  2.72M|    }
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7959|  2.36M|{
 7960|  2.36M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7960:9): [True: 1.73M, False: 633k]
  ------------------
 7961|  2.36M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7961:10): [True: 0, False: 1.73M]
  ------------------
 7962|  1.73M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7962:10): [True: 0, False: 1.73M]
  ------------------
 7963|      0|        SCN_UNLIKELY_ATTR
 7964|      0|        return handler.on_error("Invalid type specifier for float type");
 7965|      0|    }
 7966|  2.36M|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1738|  15.1M|    {
 1739|  15.1M|        return has_value();
 1740|  15.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4471|   313M|    {
 4472|   313M|        assert(m_begin);
 4473|   313M|        return m_end == nullptr;
 4474|   313M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4488|  4.06M|    {
 4489|  4.06M|        if (!stores_parent()) {
  ------------------
  |  Branch (4489:13): [True: 0, False: 4.06M]
  ------------------
 4490|      0|            return make_string_view_from_pointers(
 4491|      0|                static_cast<const CharT*>(m_begin) + position(),
 4492|      0|                static_cast<const CharT*>(m_end));
 4493|      0|        }
 4494|  4.06M|        return parent()->get_segment_starting_at(position());
 4495|  4.06M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4482|   174M|    {
 4483|   174M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1051|   174M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   174M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4484|   174M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4485|   174M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4375|  4.06M|    {
 4376|  4.06M|        if (SCN_UNLIKELY(
  ------------------
  |  |  986|  4.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.74M, False: 2.31M]
  |  |  ------------------
  ------------------
 4377|  4.06M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4378|  1.74M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4379|  1.74M|        }
 4380|  2.31M|        const auto start = pos - m_putback_buffer.size();
 4381|  2.31M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1051|  2.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4382|  2.31M|        return m_current_view.substr(start);
 4383|  2.31M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4477|  2.84M|    {
 4478|  2.84M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1051|  2.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4479|  2.84M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4480|  2.84M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4466|  7.47M|    {
 4467|  7.47M|        return m_position;
 4468|  7.47M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4397|  3.25M|    {
 4398|  3.25M|        return m_is_contiguous;
 4399|  3.25M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4471|  86.2M|    {
 4472|  86.2M|        assert(m_begin);
 4473|  86.2M|        return m_end == nullptr;
 4474|  86.2M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3974|   427k|{
 3975|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3976|       |                                          const CharT*, const CharT*>) {
 3977|       |        return {first, last};
 3978|       |    }
 3979|   427k|    else {
 3980|   427k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3981|   427k|    }
 3982|   427k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4488|  1.52M|    {
 4489|  1.52M|        if (!stores_parent()) {
  ------------------
  |  Branch (4489:13): [True: 0, False: 1.52M]
  ------------------
 4490|      0|            return make_string_view_from_pointers(
 4491|      0|                static_cast<const CharT*>(m_begin) + position(),
 4492|      0|                static_cast<const CharT*>(m_end));
 4493|      0|        }
 4494|  1.52M|        return parent()->get_segment_starting_at(position());
 4495|  1.52M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4482|  46.1M|    {
 4483|  46.1M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1051|  46.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  46.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4484|  46.1M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4485|  46.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4375|  1.52M|    {
 4376|  1.52M|        if (SCN_UNLIKELY(
  ------------------
  |  |  986|  1.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 873k, False: 650k]
  |  |  ------------------
  ------------------
 4377|  1.52M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4378|   873k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4379|   873k|        }
 4380|   650k|        const auto start = pos - m_putback_buffer.size();
 4381|   650k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1051|   650k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   650k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4382|   650k|        return m_current_view.substr(start);
 4383|   650k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4477|  1.65M|    {
 4478|  1.65M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1051|  1.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4479|  1.65M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4480|  1.65M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4466|  3.34M|    {
 4467|  3.34M|        return m_position;
 4468|  3.34M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4397|  1.88M|    {
 4398|  1.88M|        return m_is_contiguous;
 4399|  1.88M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3332|  5.52M|    {
 3333|  5.52M|        return static_cast<D&>(*this);
 3334|  5.52M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3373|  5.52M|    {
 3374|  5.52M|        return detail::to_address(ranges::begin(derived()));
 3375|  5.52M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3332|  1.46M|    {
 3333|  1.46M|        return static_cast<D&>(*this);
 3334|  1.46M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3373|  1.46M|    {
 3374|  1.46M|        return detail::to_address(ranges::begin(derived()));
 3375|  1.46M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8994|   781k|    {
 8995|   781k|        return ranges::subrange{begin(), end()};
 8996|   781k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8986|   781k|    {
 8987|   781k|        return ranges::default_sentinel;
 8988|   781k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3463|  11.8M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  11.8M|    static_cast<    \
  |  | 1056|  11.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  11.8M|    static_cast<    \
  |  | 1056|  11.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|  11.8M|    {
 3465|  11.8M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8813|  5.02M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1977|  1.08M|    {
 1978|  1.08M|        return detail::transform_error_impl(std::move(*this),
 1979|  1.08M|                                            std::forward<F>(f));
 1980|  1.08M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1460|  1.08M|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  1.08M|    else {
 1471|  1.08M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  1.08M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  1.08M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 1.06M, False: 19.6k]
  |  |  ------------------
  ------------------
 1473|  1.08M|                   ? result(*std::forward<Exp>(exp))
 1474|  1.08M|                   : result(unexpect,
 1475|  19.6k|                            trivial_invoke(std::forward<F>(f),
 1476|  19.6k|                                           std::forward<Exp>(exp).error()));
 1477|  1.08M|    }
 1478|  1.08M|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  11.4M|    {
  490|  11.4M|        return m_has_value;
  491|  11.4M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|  3.87M|    {
 1804|  3.87M|        return std::move(value());
 1805|  3.87M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|  4.44M|    {
 1768|  4.44M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  4.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  4.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  4.44M|        return this->get_value();
 1770|  4.44M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  4.44M|    {
  456|  4.44M|        return m_value;
  457|  4.44M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1568|  4.74M|        : base(std::in_place, std::forward<U>(val)),
 1569|  4.74M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  4.74M|    {
 1571|  4.74M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  4.74M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.74M|    {
  442|  4.74M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  6.12M|    {
 1315|  6.12M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1348|  46.6k|{
 1349|  46.6k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1350|  46.6k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1754|  55.0k|    {
 1755|  55.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  55.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  55.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  55.0k|        return std::move(this->get_unexpected().error());
 1757|  55.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  74.9k|    {
  473|  74.9k|        return m_unexpected;
  474|  74.9k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|   466k|    {
  365|   466k|        return m_unexpected;
  366|   466k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1624|  1.08M|        : base(unexpect, std::forward<Args>(args)...),
 1625|  1.08M|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  1.08M|    {
 1627|  1.08M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.31M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.31M|          m_has_value(false)
  451|  1.31M|    {
  452|  1.31M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8994|   459k|    {
 8995|   459k|        return ranges::subrange{begin(), end()};
 8996|   459k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8986|   459k|    {
 8987|   459k|        return ranges::default_sentinel;
 8988|   459k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3463|  6.44M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  6.44M|    static_cast<    \
  |  | 1056|  6.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|  6.44M|    static_cast<    \
  |  | 1056|  6.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|  6.44M|    {
 3465|  6.44M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1977|   629k|    {
 1978|   629k|        return detail::transform_error_impl(std::move(*this),
 1979|   629k|                                            std::forward<F>(f));
 1980|   629k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1460|   629k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   629k|    else {
 1471|   629k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   629k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   629k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 624k, False: 4.68k]
  |  |  ------------------
  ------------------
 1473|   629k|                   ? result(*std::forward<Exp>(exp))
 1474|   629k|                   : result(unexpect,
 1475|  4.68k|                            trivial_invoke(std::forward<F>(f),
 1476|  4.68k|                                           std::forward<Exp>(exp).error()));
 1477|   629k|    }
 1478|   629k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  6.07M|    {
  490|  6.07M|        return m_has_value;
  491|  6.07M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|  2.21M|    {
 1804|  2.21M|        return std::move(value());
 1805|  2.21M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|  2.24M|    {
 1768|  2.24M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  2.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  2.24M|        return this->get_value();
 1770|  2.24M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  2.24M|    {
  456|  2.24M|        return m_value;
  457|  2.24M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1568|  2.28M|        : base(std::in_place, std::forward<U>(val)),
 1569|  2.28M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  2.28M|    {
 1571|  2.28M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  2.28M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.28M|    {
  442|  2.28M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  3.58M|    {
 1315|  3.58M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1754|  64.2k|    {
 1755|  64.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  64.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  64.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  64.2k|        return std::move(this->get_unexpected().error());
 1757|  64.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  67.1k|    {
  473|  67.1k|        return m_unexpected;
  474|  67.1k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1624|   802k|        : base(unexpect, std::forward<Args>(args)...),
 1625|   802k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|   802k|    {
 1627|   802k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.30M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.30M|          m_has_value(false)
  451|  1.30M|    {
  452|  1.30M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|  3.64M|        : m_unexpected(std::forward<Err>(e))
  350|  3.64M|    {
  351|  3.64M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  3.64M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.64M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1614|   844k|        : base(unexpect, std::move(e.error())),
 1615|   844k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   844k|    {
 1617|   844k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   844k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   844k|          m_has_value(false)
  451|   844k|    {
  452|   844k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  9.02M|    {
 1315|  9.02M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1614|   209k|        : base(unexpect, std::move(e.error())),
 1615|   209k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   209k|    {
 1617|   209k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  1.11M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.11M|          m_has_value(false)
  451|  1.11M|    {
  452|  1.11M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  5.32M|    {
 1315|  5.32M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1568|  4.14M|        : base(std::in_place, std::forward<U>(val)),
 1569|  4.14M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  4.14M|    {
 1571|  4.14M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  4.14M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.14M|    {
  442|  4.14M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1738|  6.23M|    {
 1739|  6.23M|        return has_value();
 1740|  6.23M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|  9.79M|    {
  490|  9.79M|        return m_has_value;
  491|  9.79M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1744|   250k|    {
 1745|   250k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   250k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   250k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   250k|        return this->get_unexpected().error();
 1747|   250k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   250k|    {
  473|   250k|        return m_unexpected;
  474|   250k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1803|  2.67M|    {
 1804|  2.67M|        return std::move(value());
 1805|  2.67M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1767|  3.31M|    {
 1768|  3.31M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  3.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  3.31M|        return this->get_value();
 1770|  3.31M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|  3.31M|    {
  456|  3.31M|        return m_value;
  457|  3.31M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1614|   410k|        : base(unexpect, std::move(e.error())),
 1615|   410k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   410k|    {
 1617|   410k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  1.11M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.11M|          m_has_value(false)
  451|  1.11M|    {
  452|  1.11M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  3.59M|    {
 1315|  3.59M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1568|  2.47M|        : base(std::in_place, std::forward<U>(val)),
 1569|  2.47M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  2.47M|    {
 1571|  2.47M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.47M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.47M|    {
  442|  2.47M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1738|  4.21M|    {
 1739|  4.21M|        return has_value();
 1740|  4.21M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  6.63M|    {
  490|  6.63M|        return m_has_value;
  491|  6.63M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1744|   494k|    {
 1745|   494k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   494k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   494k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   494k|        return this->get_unexpected().error();
 1747|   494k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   494k|    {
  473|   494k|        return m_unexpected;
  474|   494k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1803|  1.61M|    {
 1804|  1.61M|        return std::move(value());
 1805|  1.61M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1767|  1.92M|    {
 1768|  1.92M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.92M|        return this->get_value();
 1770|  1.92M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  1.92M|    {
  456|  1.92M|        return m_value;
  457|  1.92M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1977|   939k|    {
 1978|   939k|        return detail::transform_error_impl(std::move(*this),
 1979|   939k|                                            std::forward<F>(f));
 1980|   939k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1460|   939k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   939k|    else {
 1471|   939k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   939k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   939k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 923k, False: 15.9k]
  |  |  ------------------
  ------------------
 1473|   939k|                   ? result(*std::forward<Exp>(exp))
 1474|   939k|                   : result(unexpect,
 1475|  15.9k|                            trivial_invoke(std::forward<F>(f),
 1476|  15.9k|                                           std::forward<Exp>(exp).error()));
 1477|   939k|    }
 1478|   939k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  3.58M|    {
  490|  3.58M|        return m_has_value;
  491|  3.58M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1803|   923k|    {
 1804|   923k|        return std::move(value());
 1805|   923k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1767|  1.23M|    {
 1768|  1.23M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.23M|        return this->get_value();
 1770|  1.23M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  1.23M|    {
  456|  1.23M|        return m_value;
  457|  1.23M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1754|  15.9k|    {
 1755|  15.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  15.9k|        return std::move(this->get_unexpected().error());
 1757|  15.9k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  22.4k|    {
  473|  22.4k|        return m_unexpected;
  474|  22.4k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1624|   909k|        : base(unexpect, std::forward<Args>(args)...),
 1625|   909k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|   909k|    {
 1627|   909k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8978|  2.27M|    {
 8979|  2.27M|        return m_current;
 8980|  2.27M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8871|  1.44M|    {
 8872|  1.44M|        return m_locale;
 8873|  1.44M|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8877|  1.44M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|  1.44M|    static_cast<    \
  |  | 1056|  1.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|  1.44M|    static_cast<    \
  |  | 1056|  1.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8878|  1.44M|    {
 8879|  1.44M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|   841k|    {
 2999|   841k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|   841k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|   841k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|   841k|    {
 2980|   841k|        return t.data();
 2981|   841k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|   231k|        : base(unexpect, std::move(e.error())),
 1615|   231k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   231k|    {
 1617|   231k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1568|  59.6k|        : base(std::in_place, std::forward<U>(val)),
 1569|  59.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  59.6k|    {
 1571|  59.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  59.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  59.6k|    {
  442|  59.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8978|  1.23M|    {
 8979|  1.23M|        return m_current;
 8980|  1.23M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8871|   919k|    {
 8872|   919k|        return m_locale;
 8873|   919k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8877|   919k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|   919k|    static_cast<    \
  |  | 1056|   919k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1055|   919k|    static_cast<    \
  |  | 1056|   919k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8878|   919k|    {
 8879|   919k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|   504k|        : base(unexpect, std::move(e.error())),
 1615|   504k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   504k|    {
 1617|   504k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1614|  3.89M|        : base(unexpect, std::move(e.error())),
 1615|  3.89M|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  3.89M|    {
 1617|  3.89M|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|  3.89M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|  3.89M|          m_has_value(false)
  550|  3.89M|    {
  551|  3.89M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  3.89M|    {
 1315|  3.89M|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1550|  12.7M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  12.7M|        : m_deferred_init(), m_has_value(true)
  529|  12.7M|    {
  530|  12.7M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4557|  9.44M|    {
 4558|  9.44M|        return x.is_at_end();
 4559|  9.44M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4601|  23.5M|    {
 4602|  23.5M|        if (m_end) {
  ------------------
  |  Branch (4602:13): [True: 0, False: 23.5M]
  ------------------
 4603|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4604|      0|        }
 4605|  23.5M|        if (!m_begin) {
  ------------------
  |  Branch (4605:13): [True: 0, False: 23.5M]
  ------------------
 4606|      0|            return true;
 4607|      0|        }
 4608|  23.5M|        return !read_at_position();
 4609|  23.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4581|   102M|    {
 4582|   102M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1051|   102M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   102M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|   102M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 102M]
  ------------------
 4585|      0|            return true;
 4586|      0|        }
 4587|       |
 4588|   102M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  985|   102M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 88.5M, False: 13.9M]
  |  |  ------------------
  ------------------
 4589|  88.5M|            return true;
 4590|  88.5M|        }
 4591|       |
 4592|  27.6M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4592:16): [True: 13.9M, False: 13.6M]
  ------------------
 4593|  13.9M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4593:17): [True: 291k, False: 13.6M]
  ------------------
 4594|   291k|                return false;
 4595|   291k|            }
 4596|  13.9M|        }
 4597|  13.6M|        return true;
 4598|  13.9M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4516|  26.5M|    {
 4517|  26.5M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1051|  26.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  26.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4518|       |
 4519|  26.5M|        if (!stores_parent()) {
  ------------------
  |  Branch (4519:13): [True: 0, False: 26.5M]
  ------------------
 4520|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4521|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4522|      0|            return *ptr;
 4523|      0|        }
 4524|       |
 4525|  26.5M|        auto res = read_at_position();
 4526|  26.5M|        SCN_EXPECT(res);
  ------------------
  |  | 1051|  26.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  26.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4527|  26.5M|        return parent()->get_character_at(m_position);
 4528|  26.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4386|  26.5M|    {
 4387|  26.5M|        if (SCN_UNLIKELY(
  ------------------
  |  |  986|  26.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 16.5M, False: 10.0M]
  |  |  ------------------
  ------------------
 4388|  26.5M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4389|  16.5M|            return m_putback_buffer[pos];
 4390|  16.5M|        }
 4391|  10.0M|        const auto start = pos - m_putback_buffer.size();
 4392|  10.0M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1051|  10.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  10.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4393|  10.0M|        return m_current_view[start];
 4394|  10.0M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1568|  6.89M|        : base(std::in_place, std::forward<U>(val)),
 1569|  6.89M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  6.89M|    {
 1571|  6.89M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  6.89M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  6.89M|    {
  442|  6.89M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  6.96M|    {
 1315|  6.96M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  349|   157k|        : m_unexpected(std::forward<Err>(e))
  350|   157k|    {
  351|   157k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|   157k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   157k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1614|  74.9k|        : base(unexpect, std::move(e.error())),
 1615|  74.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  74.9k|    {
 1617|  74.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  74.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  74.9k|          m_has_value(false)
  451|  74.9k|    {
  452|  74.9k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|   233k|        : m_unexpected(std::forward<Args>(args)...)
  359|   233k|    {
  360|   233k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|   233k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   233k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4502|  52.4M|    {
 4503|  52.4M|        ++m_position;
 4504|  52.4M|        (void)read_at_position();
 4505|  52.4M|        return *this;
 4506|  52.4M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1738|  3.03M|    {
 1739|  3.03M|        return has_value();
 1740|  3.03M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1793|   575k|    {
 1794|   575k|        return value();
 1795|   575k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4551|  25.2M|    {
 4552|  25.2M|        return !(lhs == rhs);
 4553|  25.2M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4546|  28.0M|    {
 4547|  28.0M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4547:16): [True: 28.0M, False: 0]
  |  Branch (4547:46): [True: 3.56M, False: 24.4M]
  ------------------
 4548|  28.0M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  76.6k|        : m_unexpected(std::forward<Err>(e))
  350|  76.6k|    {
  351|  76.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  76.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  76.6k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1614|  14.8k|        : base(unexpect, std::move(e.error())),
 1615|  14.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  14.8k|    {
 1617|  14.8k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  14.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.8k|          m_has_value(false)
  451|  14.8k|    {
  452|  14.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  1.48M|    {
 1315|  1.48M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|  1.46M|        : base(std::in_place, std::forward<U>(val)),
 1569|  1.46M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  1.46M|    {
 1571|  1.46M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|  1.46M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.46M|    {
  442|  1.46M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1738|  1.48M|    {
 1739|  1.48M|        return has_value();
 1740|  1.48M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.96M|    {
  490|  2.96M|        return m_has_value;
  491|  2.96M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1744|  14.8k|    {
 1745|  14.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  14.8k|        return this->get_unexpected().error();
 1747|  14.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.8k|    {
  473|  14.8k|        return m_unexpected;
  474|  14.8k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|  1.46M|    {
 1804|  1.46M|        return std::move(value());
 1805|  1.46M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|  1.46M|    {
 1768|  1.46M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.46M|        return this->get_value();
 1770|  1.46M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.46M|    {
  456|  1.46M|        return m_value;
  457|  1.46M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3482|  33.5M|    {
 3483|  33.5M|        return m_sentinel;
 3484|  33.5M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  349|  65.3k|        : m_unexpected(std::forward<Err>(e))
  350|  65.3k|    {
  351|  65.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  65.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  65.3k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  364|  13.1M|    {
  365|  13.1M|        return m_unexpected;
  366|  13.1M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  3.59M|        : m_unexpected(std::forward<Args>(args)...)
  359|  3.59M|    {
  360|  3.59M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  3.59M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  3.59M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  349|  15.9M|        : m_unexpected(std::forward<Err>(e))
  350|  15.9M|    {
  351|  15.9M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  15.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  15.9M|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  364|  15.9M|    {
  365|  15.9M|        return m_unexpected;
  366|  15.9M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  358|  15.9M|        : m_unexpected(std::forward<Args>(args)...)
  359|  15.9M|    {
  360|  15.9M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  15.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  15.9M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1348|   154k|{
 1349|   154k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1350|   154k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  349|  3.37M|        : m_unexpected(std::forward<Err>(e))
  350|  3.37M|    {
  351|  3.37M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1036|  3.37M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.37M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1744|  19.8k|    {
 1745|  19.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  19.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  19.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  19.8k|        return this->get_unexpected().error();
 1747|  19.8k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1614|  1.11M|        : base(unexpect, std::move(e.error())),
 1615|  1.11M|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  1.11M|    {
 1617|  1.11M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  1.14M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.14M|          m_has_value(false)
  451|  1.14M|    {
  452|  1.14M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  11.8M|    {
 1315|  11.8M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1568|   580k|        : base(std::in_place, std::forward<U>(val)),
 1569|   580k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   580k|    {
 1571|   580k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|   580k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   580k|    {
  442|   580k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1614|  5.99M|        : base(unexpect, std::move(e.error())),
 1615|  5.99M|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  5.99M|    {
 1617|  5.99M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  5.99M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  5.99M|          m_has_value(false)
  451|  5.99M|    {
  452|  5.99M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1738|  12.9M|    {
 1739|  12.9M|        return has_value();
 1740|  12.9M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  22.8M|    {
  490|  22.8M|        return m_has_value;
  491|  22.8M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1744|  3.04M|    {
 1745|  3.04M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  3.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  3.04M|        return this->get_unexpected().error();
 1747|  3.04M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  3.04M|    {
  473|  3.04M|        return m_unexpected;
  474|  3.04M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1568|  1.17M|        : base(std::in_place, std::forward<U>(val)),
 1569|  1.17M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  1.17M|    {
 1571|  1.17M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|  1.17M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.17M|    {
  442|  1.17M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  1.17M|    {
 1315|  1.17M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1614|    300|        : base(unexpect, std::move(e.error())),
 1615|    300|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|    300|    {
 1617|    300|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  449|    300|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    300|          m_has_value(false)
  451|    300|    {
  452|    300|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1793|  3.02M|    {
 1794|  3.02M|        return value();
 1795|  3.02M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|  5.83M|    {
 1768|  5.83M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  5.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  5.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  5.83M|        return this->get_value();
 1770|  5.83M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  5.83M|    {
  456|  5.83M|        return m_value;
  457|  5.83M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1738|   105k|    {
 1739|   105k|        return has_value();
 1740|   105k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|  2.34M|    {
  490|  2.34M|        return m_has_value;
  491|  2.34M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1803|  1.06M|    {
 1804|  1.06M|        return std::move(value());
 1805|  1.06M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1767|  1.17M|    {
 1768|  1.17M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.17M|        return this->get_value();
 1770|  1.17M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|  1.17M|    {
  456|  1.17M|        return m_value;
  457|  1.17M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1977|  2.84M|    {
 1978|  2.84M|        return detail::transform_error_impl(std::move(*this),
 1979|  2.84M|                                            std::forward<F>(f));
 1980|  2.84M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1460|  2.84M|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  2.84M|    else {
 1471|  2.84M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  2.84M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  2.84M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 2.80M, False: 35.4k]
  |  |  ------------------
  ------------------
 1473|  2.84M|                   ? result(*std::forward<Exp>(exp))
 1474|  2.84M|                   : result(unexpect,
 1475|  35.4k|                            trivial_invoke(std::forward<F>(f),
 1476|  35.4k|                                           std::forward<Exp>(exp).error()));
 1477|  2.84M|    }
 1478|  2.84M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1568|  4.13M|        : base(std::in_place, std::forward<U>(val)),
 1569|  4.13M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  4.13M|    {
 1571|  4.13M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  4.13M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.13M|    {
  442|  4.13M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1624|  35.4k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  35.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  35.4k|    {
 1627|  35.4k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|  2.80M|    {
 1804|  2.80M|        return std::move(value());
 1805|  2.80M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1738|  7.17M|    {
 1739|  7.17M|        return has_value();
 1740|  7.17M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  11.2M|    {
  490|  11.2M|        return m_has_value;
  491|  11.2M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1744|   305k|    {
 1745|   305k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   305k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   305k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   305k|        return this->get_unexpected().error();
 1747|   305k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   305k|    {
  473|   305k|        return m_unexpected;
  474|   305k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1803|  3.05M|    {
 1804|  3.05M|        return std::move(value());
 1805|  3.05M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1767|  3.81M|    {
 1768|  3.81M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  3.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  3.81M|        return this->get_value();
 1770|  3.81M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  3.81M|    {
  456|  3.81M|        return m_value;
  457|  3.81M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3478|  1.23M|    {
 3479|  1.23M|        return m_iterator;
 3480|  1.23M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3482|  1.23M|    {
 3483|  1.23M|        return m_sentinel;
 3484|  1.23M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3463|   948k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   948k|    static_cast<    \
  |  | 1056|   948k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   948k|    static_cast<    \
  |  | 1056|   948k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   948k|    {
 3465|   948k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4568|  14.1M|    {
 4569|  14.1M|        return !x.is_at_end();
 4570|  14.1M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1614|  22.4k|        : base(unexpect, std::move(e.error())),
 1615|  22.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  22.4k|    {
 1617|  22.4k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  22.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  22.4k|          m_has_value(false)
  451|  22.4k|    {
  452|  22.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  2.33M|    {
 1315|  2.33M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1568|  2.30M|        : base(std::in_place, std::forward<U>(val)),
 1569|  2.30M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  2.30M|    {
 1571|  2.30M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.30M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.30M|    {
  442|  2.30M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1738|  1.39M|    {
 1739|  1.39M|        return has_value();
 1740|  1.39M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1793|   307k|    {
 1794|   307k|        return value();
 1795|   307k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|  11.4k|        : base(unexpect, std::move(e.error())),
 1615|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  11.4k|    {
 1617|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  11.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.4k|          m_has_value(false)
  451|  11.4k|    {
  452|  11.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  1.24M|    {
 1315|  1.24M|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1568|  1.23M|        : base(std::in_place, std::forward<U>(val)),
 1569|  1.23M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  1.23M|    {
 1571|  1.23M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  1.23M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.23M|    {
  442|  1.23M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1738|  1.24M|    {
 1739|  1.24M|        return has_value();
 1740|  1.24M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.48M|    {
  490|  2.48M|        return m_has_value;
  491|  2.48M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1744|  11.4k|    {
 1745|  11.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  11.4k|        return this->get_unexpected().error();
 1747|  11.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  11.4k|    {
  473|  11.4k|        return m_unexpected;
  474|  11.4k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1803|  1.23M|    {
 1804|  1.23M|        return std::move(value());
 1805|  1.23M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1767|  1.23M|    {
 1768|  1.23M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.23M|        return this->get_value();
 1770|  1.23M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.23M|    {
  456|  1.23M|        return m_value;
  457|  1.23M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1744|  6.55k|    {
 1745|  6.55k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  6.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  6.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  6.55k|        return this->get_unexpected().error();
 1747|  6.55k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1614|   955k|        : base(unexpect, std::move(e.error())),
 1615|   955k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   955k|    {
 1617|   955k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   955k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   955k|          m_has_value(false)
  451|   955k|    {
  452|   955k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  5.29M|    {
 1315|  5.29M|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1568|   311k|        : base(std::in_place, std::forward<U>(val)),
 1569|   311k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   311k|    {
 1571|   311k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|   311k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   311k|    {
  442|   311k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|  3.62M|        : base(unexpect, std::move(e.error())),
 1615|  3.62M|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  3.62M|    {
 1617|  3.62M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  3.62M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.62M|          m_has_value(false)
  451|  3.62M|    {
  452|  3.62M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1738|  6.21M|    {
 1739|  6.21M|        return has_value();
 1740|  6.21M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  10.6M|    {
  490|  10.6M|        return m_has_value;
  491|  10.6M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1744|  2.53M|    {
 1745|  2.53M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  2.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  2.53M|        return this->get_unexpected().error();
 1747|  2.53M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  2.53M|    {
  473|  2.53M|        return m_unexpected;
  474|  2.53M|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1568|   956k|        : base(std::in_place, std::forward<U>(val)),
 1569|   956k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   956k|    {
 1571|   956k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   956k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   956k|    {
  442|   956k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   958k|    {
 1315|   958k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1614|  1.79k|        : base(unexpect, std::move(e.error())),
 1615|  1.79k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  1.79k|    {
 1617|  1.79k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  1.79k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.79k|          m_has_value(false)
  451|  1.79k|    {
  452|  1.79k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1793|   982k|    {
 1794|   982k|        return value();
 1795|   982k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1767|   982k|    {
 1768|   982k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   982k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   982k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   982k|        return this->get_value();
 1770|   982k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|   982k|    {
  456|   982k|        return m_value;
  457|   982k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1738|  34.4k|    {
 1739|  34.4k|        return has_value();
 1740|  34.4k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  1.91M|    {
  490|  1.91M|        return m_has_value;
  491|  1.91M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5errorEv:
 1744|  1.69k|    {
 1745|  1.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  1.69k|        return this->get_unexpected().error();
 1747|  1.69k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE14get_unexpectedEv:
  472|  1.69k|    {
  473|  1.69k|        return m_unexpected;
  474|  1.69k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1614|  1.69k|        : base(unexpect, std::move(e.error())),
 1615|  1.69k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  1.69k|    {
 1617|  1.69k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.69k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.69k|          m_has_value(false)
  451|  1.69k|    {
  452|  1.69k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  9.23k|    {
 1315|  9.23k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|   931k|    {
 1804|   931k|        return std::move(value());
 1805|   931k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|   956k|    {
 1768|   956k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   956k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   956k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   956k|        return this->get_value();
 1770|   956k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   956k|    {
  456|   956k|        return m_value;
  457|   956k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1568|   397k|        : base(std::in_place, std::forward<U>(val)),
 1569|   397k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   397k|    {
 1571|   397k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   397k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   397k|    {
  442|   397k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1568|  7.54k|        : base(std::in_place, std::forward<U>(val)),
 1569|  7.54k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  7.54k|    {
 1571|  7.54k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  7.54k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  7.54k|    {
  442|  7.54k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1977|  9.23k|    {
 1978|  9.23k|        return detail::transform_error_impl(std::move(*this),
 1979|  9.23k|                                            std::forward<F>(f));
 1980|  9.23k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1460|  9.23k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  9.23k|    else {
 1471|  9.23k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  9.23k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  9.23k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 7.54k, False: 1.69k]
  |  |  ------------------
  ------------------
 1473|  9.23k|                   ? result(*std::forward<Exp>(exp))
 1474|  9.23k|                   : result(unexpect,
 1475|  1.69k|                            trivial_invoke(std::forward<F>(f),
 1476|  1.69k|                                           std::forward<Exp>(exp).error()));
 1477|  9.23k|    }
 1478|  9.23k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  489|  18.4k|    {
  490|  18.4k|        return m_has_value;
  491|  18.4k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|  7.54k|    {
 1804|  7.54k|        return std::move(value());
 1805|  7.54k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|  7.54k|    {
 1768|  7.54k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  7.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  7.54k|        return this->get_value();
 1770|  7.54k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  455|  7.54k|    {
  456|  7.54k|        return m_value;
  457|  7.54k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1568|  7.54k|        : base(std::in_place, std::forward<U>(val)),
 1569|  7.54k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  7.54k|    {
 1571|  7.54k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  440|  7.54k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  7.54k|    {
  442|  7.54k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  9.23k|    {
 1315|  9.23k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5errorEv:
 1754|  1.69k|    {
 1755|  1.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  1.69k|        return std::move(this->get_unexpected().error());
 1757|  1.69k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE14get_unexpectedEv:
  472|  1.69k|    {
  473|  1.69k|        return m_unexpected;
  474|  1.69k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1624|  1.69k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  1.69k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  1.69k|    {
 1627|  1.69k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.69k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.69k|          m_has_value(false)
  451|  1.69k|    {
  452|  1.69k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1738|  9.23k|    {
 1739|  9.23k|        return has_value();
 1740|  9.23k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  489|  18.4k|    {
  490|  18.4k|        return m_has_value;
  491|  18.4k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5errorEv:
 1744|  1.69k|    {
 1745|  1.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  1.69k|        return this->get_unexpected().error();
 1747|  1.69k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.69k|    {
  473|  1.69k|        return m_unexpected;
  474|  1.69k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|  7.54k|    {
 1804|  7.54k|        return std::move(value());
 1805|  7.54k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|  7.54k|    {
 1768|  7.54k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  7.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  7.54k|        return this->get_value();
 1770|  7.54k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  455|  7.54k|    {
  456|  7.54k|        return m_value;
  457|  7.54k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|  3.10M|    {
 2999|  3.10M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|  3.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|  3.10M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|  3.10M|    {
 2980|  3.10M|        return t.data();
 2981|  3.10M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1568|  8.08M|        : base(std::in_place, std::forward<U>(val)),
 1569|  8.08M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  8.08M|    {
 1571|  8.08M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|  8.08M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  8.08M|    {
  442|  8.08M|    }
_ZNO3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1803|  5.45M|    {
 1804|  5.45M|        return std::move(value());
 1805|  5.45M|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1348|  3.45M|{
 1349|  3.45M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1350|  3.45M|}
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1977|  1.06M|    {
 1978|  1.06M|        return detail::transform_error_impl(std::move(*this),
 1979|  1.06M|                                            std::forward<F>(f));
 1980|  1.06M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1460|  1.06M|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  1.06M|    else {
 1471|  1.06M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  1.06M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  1.06M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 1.06M, False: 0]
  |  |  ------------------
  ------------------
 1473|  1.06M|                   ? result(*std::forward<Exp>(exp))
 1474|  1.06M|                   : result(unexpect,
 1475|      0|                            trivial_invoke(std::forward<F>(f),
 1476|      0|                                           std::forward<Exp>(exp).error()));
 1477|  1.06M|    }
 1478|  1.06M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1568|  1.06M|        : base(std::in_place, std::forward<U>(val)),
 1569|  1.06M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  1.06M|    {
 1571|  1.06M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|  1.06M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.06M|    {
  442|  1.06M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  1.06M|    {
 1315|  1.06M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1738|  1.06M|    {
 1739|  1.06M|        return has_value();
 1740|  1.06M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.13M|    {
  490|  2.13M|        return m_has_value;
  491|  2.13M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1803|  1.06M|    {
 1804|  1.06M|        return std::move(value());
 1805|  1.06M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1767|  1.06M|    {
 1768|  1.06M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.06M|        return this->get_value();
 1770|  1.06M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.06M|    {
  456|  1.06M|        return m_value;
  457|  1.06M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1963|  1.06M|    {
 1964|  1.06M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1965|  1.06M|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1460|  1.06M|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  1.06M|    else {
 1471|  1.06M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  1.06M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  1.06M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 1473|  1.06M|                   ? result(*std::forward<Exp>(exp))
 1474|  1.06M|                   : result(unexpect,
 1475|  1.06M|                            trivial_invoke(std::forward<F>(f),
 1476|  1.06M|                                           std::forward<Exp>(exp).error()));
 1477|  1.06M|    }
 1478|  1.06M|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1793|   755k|    {
 1794|   755k|        return value();
 1795|   755k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3934|   253k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1813|   105k|    {
 1814|   105k|        return &value();
 1815|   105k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2867|   755k|    {
 2868|   755k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   755k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   755k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2848|   755k|    {
 2849|   755k|        return decay_copy(t.begin());
 2850|   755k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2092|   755k|{
 2093|   755k|    return SCN_FWD(t);
  ------------------
  |  | 1057|   755k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|   755k|}
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3934|   459k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1977|   923k|    {
 1978|   923k|        return detail::transform_error_impl(std::move(*this),
 1979|   923k|                                            std::forward<F>(f));
 1980|   923k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1460|   923k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   923k|    else {
 1471|   923k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   923k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   923k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 923k, False: 0]
  |  |  ------------------
  ------------------
 1473|   923k|                   ? result(*std::forward<Exp>(exp))
 1474|   923k|                   : result(unexpect,
 1475|      0|                            trivial_invoke(std::forward<F>(f),
 1476|      0|                                           std::forward<Exp>(exp).error()));
 1477|   923k|    }
 1478|   923k|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|   923k|        : base(std::in_place, std::forward<U>(val)),
 1569|   923k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   923k|    {
 1571|   923k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   923k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   923k|    {
  442|   923k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   923k|    {
 1315|   923k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1738|   923k|    {
 1739|   923k|        return has_value();
 1740|   923k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.84M|    {
  490|  1.84M|        return m_has_value;
  491|  1.84M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|   923k|    {
 1804|   923k|        return std::move(value());
 1805|   923k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|   923k|    {
 1768|   923k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   923k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   923k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   923k|        return this->get_value();
 1770|   923k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   923k|    {
  456|   923k|        return m_value;
  457|   923k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1963|   893k|    {
 1964|   893k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1965|   893k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1460|   893k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   893k|    else {
 1471|   893k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   893k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   893k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 893k]
  |  |  ------------------
  ------------------
 1473|   893k|                   ? result(*std::forward<Exp>(exp))
 1474|   893k|                   : result(unexpect,
 1475|   893k|                            trivial_invoke(std::forward<F>(f),
 1476|   893k|                                           std::forward<Exp>(exp).error()));
 1477|   893k|    }
 1478|   893k|}
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1568|  57.7k|        : base(std::in_place, std::forward<U>(val)),
 1569|  57.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  57.7k|    {
 1571|  57.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|  57.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  57.7k|    {
  442|  57.7k|    }
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3909|   893k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1055|   893k|    static_cast<    \
  |  | 1056|   893k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3910|   893k|    {
 3911|   893k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1793|   635k|    {
 1794|   635k|        return value();
 1795|   635k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1813|  25.1k|    {
 1814|  25.1k|        return &value();
 1815|  25.1k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3909|  1.06M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1055|  1.06M|    static_cast<    \
  |  | 1056|  1.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3910|  1.06M|    {
 3911|  1.06M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4557|  5.30M|    {
 4558|  5.30M|        return x.is_at_end();
 4559|  5.30M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4601|  8.42M|    {
 4602|  8.42M|        if (m_end) {
  ------------------
  |  Branch (4602:13): [True: 0, False: 8.42M]
  ------------------
 4603|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4604|      0|        }
 4605|  8.42M|        if (!m_begin) {
  ------------------
  |  Branch (4605:13): [True: 0, False: 8.42M]
  ------------------
 4606|      0|            return true;
 4607|      0|        }
 4608|  8.42M|        return !read_at_position();
 4609|  8.42M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4581|  26.8M|    {
 4582|  26.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1051|  26.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  26.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|  26.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 26.8M]
  ------------------
 4585|      0|            return true;
 4586|      0|        }
 4587|       |
 4588|  26.8M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  985|  26.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 23.6M, False: 3.21M]
  |  |  ------------------
  ------------------
 4589|  23.6M|            return true;
 4590|  23.6M|        }
 4591|       |
 4592|  6.22M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4592:16): [True: 3.21M, False: 3.01M]
  ------------------
 4593|  3.21M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4593:17): [True: 205k, False: 3.01M]
  ------------------
 4594|   205k|                return false;
 4595|   205k|            }
 4596|  3.21M|        }
 4597|  3.01M|        return true;
 4598|  3.21M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4355|  34.7M|    {
 4356|  34.7M|        return m_putback_buffer.size() + m_current_view.size();
 4357|  34.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4516|  8.37M|    {
 4517|  8.37M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1051|  8.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  8.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4518|       |
 4519|  8.37M|        if (!stores_parent()) {
  ------------------
  |  Branch (4519:13): [True: 0, False: 8.37M]
  ------------------
 4520|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4521|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4522|      0|            return *ptr;
 4523|      0|        }
 4524|       |
 4525|  8.37M|        auto res = read_at_position();
 4526|  8.37M|        SCN_EXPECT(res);
  ------------------
  |  | 1051|  8.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  8.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4527|  8.37M|        return parent()->get_character_at(m_position);
 4528|  8.37M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4386|  8.37M|    {
 4387|  8.37M|        if (SCN_UNLIKELY(
  ------------------
  |  |  986|  8.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 7.07M, False: 1.30M]
  |  |  ------------------
  ------------------
 4388|  8.37M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4389|  7.07M|            return m_putback_buffer[pos];
 4390|  7.07M|        }
 4391|  1.30M|        const auto start = pos - m_putback_buffer.size();
 4392|  1.30M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1051|  1.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4393|  1.30M|        return m_current_view[start];
 4394|  1.30M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1568|  3.69M|        : base(std::in_place, std::forward<U>(val)),
 1569|  3.69M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  3.69M|    {
 1571|  3.69M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  3.69M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.69M|    {
  442|  3.69M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  3.76M|    {
 1315|  3.76M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1614|  67.1k|        : base(unexpect, std::move(e.error())),
 1615|  67.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  67.1k|    {
 1617|  67.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  67.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  67.1k|          m_has_value(false)
  451|  67.1k|    {
  452|  67.1k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4502|  10.0M|    {
 4503|  10.0M|        ++m_position;
 4504|  10.0M|        (void)read_at_position();
 4505|  10.0M|        return *this;
 4506|  10.0M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1738|  1.48M|    {
 1739|  1.48M|        return has_value();
 1740|  1.48M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1793|  28.8k|    {
 1794|  28.8k|        return value();
 1795|  28.8k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4551|  4.13M|    {
 4552|  4.13M|        return !(lhs == rhs);
 4553|  4.13M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4546|  5.58M|    {
 4547|  5.58M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4547:16): [True: 5.58M, False: 0]
  |  Branch (4547:46): [True: 1.75M, False: 3.82M]
  ------------------
 4548|  5.58M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4066|  3.02M|{
 4067|       |    if constexpr (sizeof(U) == 1) {
 4068|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4069|       |    }
 4070|       |    else if constexpr (sizeof(U) == 2) {
 4071|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4072|       |    }
 4073|  3.02M|    else {
 4074|       |        // utf-32
 4075|  3.02M|        static_assert(sizeof(U) == 4);
 4076|  3.02M|        SCN_UNUSED(ch);
  ------------------
  |  | 1036|  3.02M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4077|  3.02M|        return 1;
 4078|  3.02M|    }
 4079|  3.02M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4272|  3.02M|{
 4273|       |    if constexpr (sizeof(CharT) == 1) {
 4274|       |        return decode_utf8_code_point_exhaustive(input);
 4275|       |    }
 4276|       |    else if constexpr (sizeof(CharT) == 2) {
 4277|       |        return decode_utf16_code_point_exhaustive(input);
 4278|       |    }
 4279|  3.02M|    else {
 4280|  3.02M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1051|  3.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4281|  3.02M|        auto cp = static_cast<char32_t>(input.front());
 4282|  3.02M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  986|  3.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 183k, False: 2.84M]
  |  |  ------------------
  ------------------
 4283|   183k|            return invalid_code_point;
 4284|   183k|        }
 4285|  2.84M|        return cp;
 4286|  3.02M|    }
 4287|  3.02M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1614|  3.47k|        : base(unexpect, std::move(e.error())),
 1615|  3.47k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  3.47k|    {
 1617|  3.47k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  3.47k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.47k|          m_has_value(false)
  451|  3.47k|    {
  452|  3.47k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   775k|    {
 1315|   775k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|   772k|        : base(std::in_place, std::forward<U>(val)),
 1569|   772k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   772k|    {
 1571|   772k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   772k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   772k|    {
  442|   772k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1738|   775k|    {
 1739|   775k|        return has_value();
 1740|   775k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.55M|    {
  490|  1.55M|        return m_has_value;
  491|  1.55M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1744|  3.47k|    {
 1745|  3.47k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  3.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  3.47k|        return this->get_unexpected().error();
 1747|  3.47k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  3.47k|    {
  473|  3.47k|        return m_unexpected;
  474|  3.47k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|   772k|    {
 1804|   772k|        return std::move(value());
 1805|   772k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|   772k|    {
 1768|   772k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   772k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   772k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   772k|        return this->get_value();
 1770|   772k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   772k|    {
  456|   772k|        return m_value;
  457|   772k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3482|  13.7M|    {
 3483|  13.7M|        return m_sentinel;
 3484|  13.7M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1744|  2.87k|    {
 1745|  2.87k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  2.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  2.87k|        return this->get_unexpected().error();
 1747|  2.87k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1614|   686k|        : base(unexpect, std::move(e.error())),
 1615|   686k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   686k|    {
 1617|   686k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|   746k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   746k|          m_has_value(false)
  451|   746k|    {
  452|   746k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  6.50M|    {
 1315|  6.50M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1568|  28.8k|        : base(std::in_place, std::forward<U>(val)),
 1569|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  28.8k|    {
 1571|  28.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  28.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  28.8k|    {
  442|  28.8k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1614|  3.66M|        : base(unexpect, std::move(e.error())),
 1615|  3.66M|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  3.66M|    {
 1617|  3.66M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  3.66M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.66M|          m_has_value(false)
  451|  3.66M|    {
  452|  3.66M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1738|  7.12M|    {
 1739|  7.12M|        return has_value();
 1740|  7.12M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  12.5M|    {
  490|  12.5M|        return m_has_value;
  491|  12.5M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1744|  2.11M|    {
 1745|  2.11M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  2.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  2.11M|        return this->get_unexpected().error();
 1747|  2.11M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  2.11M|    {
  473|  2.11M|        return m_unexpected;
  474|  2.11M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1568|   639k|        : base(std::in_place, std::forward<U>(val)),
 1569|   639k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   639k|    {
 1571|   639k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   639k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   639k|    {
  442|   639k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   639k|    {
 1315|   639k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1614|     72|        : base(unexpect, std::move(e.error())),
 1615|     72|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|     72|    {
 1617|     72|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  449|     72|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     72|          m_has_value(false)
  451|     72|    {
  452|     72|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1793|   957k|    {
 1794|   957k|        return value();
 1795|   957k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1767|  2.55M|    {
 1768|  2.55M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  2.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  2.55M|        return this->get_value();
 1770|  2.55M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  2.55M|    {
  456|  2.55M|        return m_value;
  457|  2.55M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1738|  15.5k|    {
 1739|  15.5k|        return has_value();
 1740|  15.5k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|  1.27M|    {
  490|  1.27M|        return m_has_value;
  491|  1.27M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1803|   624k|    {
 1804|   624k|        return std::move(value());
 1805|   624k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1767|   639k|    {
 1768|   639k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   639k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   639k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   639k|        return this->get_value();
 1770|   639k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|   639k|    {
  456|   639k|        return m_value;
  457|   639k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1977|  1.65M|    {
 1978|  1.65M|        return detail::transform_error_impl(std::move(*this),
 1979|  1.65M|                                            std::forward<F>(f));
 1980|  1.65M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1460|  1.65M|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  1.65M|    else {
 1471|  1.65M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  1.65M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  1.65M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 1.59M, False: 59.5k]
  |  |  ------------------
  ------------------
 1473|  1.65M|                   ? result(*std::forward<Exp>(exp))
 1474|  1.65M|                   : result(unexpect,
 1475|  59.5k|                            trivial_invoke(std::forward<F>(f),
 1476|  59.5k|                                           std::forward<Exp>(exp).error()));
 1477|  1.65M|    }
 1478|  1.65M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1568|  2.06M|        : base(std::in_place, std::forward<U>(val)),
 1569|  2.06M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  2.06M|    {
 1571|  2.06M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  2.06M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.06M|    {
  442|  2.06M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1624|  59.5k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  59.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  59.5k|    {
 1627|  59.5k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1803|  1.59M|    {
 1804|  1.59M|        return std::move(value());
 1805|  1.59M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1738|  4.21M|    {
 1739|  4.21M|        return has_value();
 1740|  4.21M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  6.72M|    {
  490|  6.72M|        return m_has_value;
  491|  6.72M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1744|   682k|    {
 1745|   682k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|   682k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   682k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|   682k|        return this->get_unexpected().error();
 1747|   682k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   682k|    {
  473|   682k|        return m_unexpected;
  474|   682k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1803|  1.51M|    {
 1804|  1.51M|        return std::move(value());
 1805|  1.51M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1767|  1.83M|    {
 1768|  1.83M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.83M|        return this->get_value();
 1770|  1.83M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.83M|    {
  456|  1.83M|        return m_value;
  457|  1.83M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3478|   486k|    {
 3479|   486k|        return m_iterator;
 3480|   486k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3482|   486k|    {
 3483|   486k|        return m_sentinel;
 3484|   486k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3463|   447k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   447k|    static_cast<    \
  |  | 1056|   447k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1055|   447k|    static_cast<    \
  |  | 1056|   447k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3464|   447k|    {
 3465|   447k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4568|  3.12M|    {
 4569|  3.12M|        return !x.is_at_end();
 4570|  3.12M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1614|  65.2k|        : base(unexpect, std::move(e.error())),
 1615|  65.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  65.2k|    {
 1617|  65.2k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  65.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  65.2k|          m_has_value(false)
  451|  65.2k|    {
  452|  65.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  3.13M|    {
 1315|  3.13M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1568|  3.07M|        : base(std::in_place, std::forward<U>(val)),
 1569|  3.07M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  3.07M|    {
 1571|  3.07M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  3.07M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.07M|    {
  442|  3.07M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1738|   854k|    {
 1739|   854k|        return has_value();
 1740|   854k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  5.43M|    {
  490|  5.43M|        return m_has_value;
  491|  5.43M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1793|  12.5k|    {
 1794|  12.5k|        return value();
 1795|  12.5k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1767|  2.23M|    {
 1768|  2.23M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  2.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  2.23M|        return this->get_value();
 1770|  2.23M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  2.23M|    {
  456|  2.23M|        return m_value;
  457|  2.23M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|  3.47k|        : base(unexpect, std::move(e.error())),
 1615|  3.47k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  3.47k|    {
 1617|  3.47k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  3.47k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.47k|          m_has_value(false)
  451|  3.47k|    {
  452|  3.47k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   776k|    {
 1315|   776k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1568|   772k|        : base(std::in_place, std::forward<U>(val)),
 1569|   772k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   772k|    {
 1571|   772k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   772k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   772k|    {
  442|   772k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1977|   629k|    {
 1978|   629k|        return detail::transform_error_impl(std::move(*this),
 1979|   629k|                                            std::forward<F>(f));
 1980|   629k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1460|   629k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   629k|    else {
 1471|   629k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   629k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   629k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 624k, False: 4.68k]
  |  |  ------------------
  ------------------
 1473|   629k|                   ? result(*std::forward<Exp>(exp))
 1474|   629k|                   : result(unexpect,
 1475|  4.68k|                            trivial_invoke(std::forward<F>(f),
 1476|  4.68k|                                           std::forward<Exp>(exp).error()));
 1477|   629k|    }
 1478|   629k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1803|  2.21M|    {
 1804|  2.21M|        return std::move(value());
 1805|  2.21M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1754|  64.5k|    {
 1755|  64.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  64.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  64.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1756|  64.5k|        return std::move(this->get_unexpected().error());
 1757|  64.5k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  65.2k|    {
  473|  65.2k|        return m_unexpected;
  474|  65.2k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1624|   708k|        : base(unexpect, std::forward<Args>(args)...),
 1625|   708k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|   708k|    {
 1627|   708k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1738|   776k|    {
 1739|   776k|        return has_value();
 1740|   776k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.55M|    {
  490|  1.55M|        return m_has_value;
  491|  1.55M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1744|  3.47k|    {
 1745|  3.47k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  3.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  3.47k|        return this->get_unexpected().error();
 1747|  3.47k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  3.47k|    {
  473|  3.47k|        return m_unexpected;
  474|  3.47k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1803|   772k|    {
 1804|   772k|        return std::move(value());
 1805|   772k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1767|   772k|    {
 1768|   772k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   772k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   772k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   772k|        return this->get_value();
 1770|   772k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|   772k|    {
  456|   772k|        return m_value;
  457|   772k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1744|    732|    {
 1745|    732|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|    732|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|    732|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|    732|        return this->get_unexpected().error();
 1747|    732|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1614|   685k|        : base(unexpect, std::move(e.error())),
 1615|   685k|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|   685k|    {
 1617|   685k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   745k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   745k|          m_has_value(false)
  451|   745k|    {
  452|   745k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|  5.15M|    {
 1315|  5.15M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1568|  12.5k|        : base(std::in_place, std::forward<U>(val)),
 1569|  12.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  12.5k|    {
 1571|  12.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|  12.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  12.5k|    {
  442|  12.5k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1614|  2.65M|        : base(unexpect, std::move(e.error())),
 1615|  2.65M|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|  2.65M|    {
 1617|  2.65M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  2.65M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.65M|          m_has_value(false)
  451|  2.65M|    {
  452|  2.65M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1738|  5.77M|    {
 1739|  5.77M|        return has_value();
 1740|  5.77M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  10.3M|    {
  490|  10.3M|        return m_has_value;
  491|  10.3M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1744|  2.01M|    {
 1745|  2.01M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1051|  2.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1746|  2.01M|        return this->get_unexpected().error();
 1747|  2.01M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  2.01M|    {
  473|  2.01M|        return m_unexpected;
  474|  2.01M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1568|   630k|        : base(std::in_place, std::forward<U>(val)),
 1569|   630k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   630k|    {
 1571|   630k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   630k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   630k|    {
  442|   630k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   630k|    {
 1315|   630k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1614|     24|        : base(unexpect, std::move(e.error())),
 1615|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1616|     24|    {
 1617|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|     24|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     24|          m_has_value(false)
  451|     24|    {
  452|     24|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1793|   306k|    {
 1794|   306k|        return value();
 1795|   306k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1767|  1.90M|    {
 1768|  1.90M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|  1.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|  1.90M|        return this->get_value();
 1770|  1.90M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  1.90M|    {
  456|  1.90M|        return m_value;
  457|  1.90M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1738|  5.51k|    {
 1739|  5.51k|        return has_value();
 1740|  5.51k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  1.26M|    {
  490|  1.26M|        return m_has_value;
  491|  1.26M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|   624k|    {
 1804|   624k|        return std::move(value());
 1805|   624k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|   630k|    {
 1768|   630k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   630k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   630k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   630k|        return this->get_value();
 1770|   630k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   630k|    {
  456|   630k|        return m_value;
  457|   630k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1977|  1.65M|    {
 1978|  1.65M|        return detail::transform_error_impl(std::move(*this),
 1979|  1.65M|                                            std::forward<F>(f));
 1980|  1.65M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1460|  1.65M|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|  1.65M|    else {
 1471|  1.65M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|  1.65M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|  1.65M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 1.59M, False: 59.8k]
  |  |  ------------------
  ------------------
 1473|  1.65M|                   ? result(*std::forward<Exp>(exp))
 1474|  1.65M|                   : result(unexpect,
 1475|  59.8k|                            trivial_invoke(std::forward<F>(f),
 1476|  59.8k|                                           std::forward<Exp>(exp).error()));
 1477|  1.65M|    }
 1478|  1.65M|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1568|  1.74M|        : base(std::in_place, std::forward<U>(val)),
 1569|  1.74M|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  1.74M|    {
 1571|  1.74M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.74M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.74M|    {
  442|  1.74M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1624|  59.8k|        : base(unexpect, std::forward<Args>(args)...),
 1625|  59.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1626|  59.8k|    {
 1627|  59.8k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1803|  1.59M|    {
 1804|  1.59M|        return std::move(value());
 1805|  1.59M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2998|  1.46M|    {
 2999|  1.46M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1057|  1.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3000|  1.46M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2979|  1.46M|    {
 2980|  1.46M|        return t.data();
 2981|  1.46M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1977|   624k|    {
 1978|   624k|        return detail::transform_error_impl(std::move(*this),
 1979|   624k|                                            std::forward<F>(f));
 1980|   624k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1460|   624k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   624k|    else {
 1471|   624k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   624k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   624k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 624k, False: 0]
  |  |  ------------------
  ------------------
 1473|   624k|                   ? result(*std::forward<Exp>(exp))
 1474|   624k|                   : result(unexpect,
 1475|      0|                            trivial_invoke(std::forward<F>(f),
 1476|      0|                                           std::forward<Exp>(exp).error()));
 1477|   624k|    }
 1478|   624k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1568|   624k|        : base(std::in_place, std::forward<U>(val)),
 1569|   624k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   624k|    {
 1571|   624k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   624k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   624k|    {
  442|   624k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   624k|    {
 1315|   624k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1738|   624k|    {
 1739|   624k|        return has_value();
 1740|   624k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.24M|    {
  490|  1.24M|        return m_has_value;
  491|  1.24M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1803|   624k|    {
 1804|   624k|        return std::move(value());
 1805|   624k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1767|   624k|    {
 1768|   624k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   624k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   624k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   624k|        return this->get_value();
 1770|   624k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   624k|    {
  456|   624k|        return m_value;
  457|   624k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1963|   797k|    {
 1964|   797k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1965|   797k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1460|   797k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   797k|    else {
 1471|   797k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   797k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   797k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 797k]
  |  |  ------------------
  ------------------
 1473|   797k|                   ? result(*std::forward<Exp>(exp))
 1474|   797k|                   : result(unexpect,
 1475|   797k|                            trivial_invoke(std::forward<F>(f),
 1476|   797k|                                           std::forward<Exp>(exp).error()));
 1477|   797k|    }
 1478|   797k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1793|   317k|    {
 1794|   317k|        return value();
 1795|   317k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3934|   124k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1813|  15.4k|    {
 1814|  15.4k|        return &value();
 1815|  15.4k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2867|   500k|    {
 2868|   500k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1057|   500k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2869|   500k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2848|   500k|    {
 2849|   500k|        return decay_copy(t.begin());
 2850|   500k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2092|   500k|{
 2093|   500k|    return SCN_FWD(t);
  ------------------
  |  | 1057|   500k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2094|   500k|}
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3934|   279k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1977|   624k|    {
 1978|   624k|        return detail::transform_error_impl(std::move(*this),
 1979|   624k|                                            std::forward<F>(f));
 1980|   624k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1460|   624k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   624k|    else {
 1471|   624k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   624k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   624k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 624k, False: 0]
  |  |  ------------------
  ------------------
 1473|   624k|                   ? result(*std::forward<Exp>(exp))
 1474|   624k|                   : result(unexpect,
 1475|      0|                            trivial_invoke(std::forward<F>(f),
 1476|      0|                                           std::forward<Exp>(exp).error()));
 1477|   624k|    }
 1478|   624k|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1568|   624k|        : base(std::in_place, std::forward<U>(val)),
 1569|   624k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|   624k|    {
 1571|   624k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   624k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   624k|    {
  442|   624k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1314|   624k|    {
 1315|   624k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1738|   624k|    {
 1739|   624k|        return has_value();
 1740|   624k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.24M|    {
  490|  1.24M|        return m_has_value;
  491|  1.24M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1803|   624k|    {
 1804|   624k|        return std::move(value());
 1805|   624k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1767|   624k|    {
 1768|   624k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1051|   624k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   624k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1769|   624k|        return this->get_value();
 1770|   624k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   624k|    {
  456|   624k|        return m_value;
  457|   624k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1963|   703k|    {
 1964|   703k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1965|   703k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1460|   703k|{
 1461|       |    if constexpr (std::is_void_v<Ret>) {
 1462|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1463|       |        if (SCN_LIKELY(exp.has_value())) {
 1464|       |            return result(*std::forward<Exp>(exp));
 1465|       |        }
 1466|       |
 1467|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1468|       |        return result(unexpect, monostate{});
 1469|       |    }
 1470|   703k|    else {
 1471|   703k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1472|   703k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  985|   703k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 703k]
  |  |  ------------------
  ------------------
 1473|   703k|                   ? result(*std::forward<Exp>(exp))
 1474|   703k|                   : result(unexpect,
 1475|   703k|                            trivial_invoke(std::forward<F>(f),
 1476|   703k|                                           std::forward<Exp>(exp).error()));
 1477|   703k|    }
 1478|   703k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3909|   703k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1055|   703k|    static_cast<    \
  |  | 1056|   703k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3910|   703k|    {
 3911|   703k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1793|   317k|    {
 1794|   317k|        return value();
 1795|   317k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1813|  5.48k|    {
 1814|  5.48k|        return &value();
 1815|  5.48k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3909|   797k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1055|   797k|    static_cast<    \
  |  | 1056|   797k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3910|   797k|    {
 3911|   797k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4355|   133M|    {
 4356|   133M|        return m_putback_buffer.size() + m_current_view.size();
 4357|   133M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2ImvEEOT_:
 1568|  98.8k|        : base(std::in_place, std::forward<U>(val)),
 1569|  98.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1570|  98.8k|    {
 1571|  98.8k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJmEvEENSt3__110in_place_tEDpOT_:
  440|  98.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  98.8k|    {
  442|  98.8k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6193|  1.83M|    {
 6194|  1.83M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|  1.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.83M]
  |  |  ------------------
  ------------------
 6195|      0|            return max_size();
 6196|      0|        }
 6197|       |
 6198|  1.83M|        return static_cast<std::size_t>(m_desc &
 6199|  1.83M|                                        ((1 << detail::packed_arg_bits) - 1));
 6200|  1.83M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6219|  3.66M|    {
 6220|  3.66M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6221|  3.66M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6161|  1.83M|    {
 6162|  1.83M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|  1.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.83M]
  |  |  ------------------
  ------------------
 6163|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  985|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6164|      0|                return m_args[id];
 6165|      0|            }
 6166|      0|            return {};
 6167|      0|        }
 6168|       |
 6169|  1.83M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  986|  1.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.83M]
  |  |  ------------------
  ------------------
 6170|      0|            return {};
 6171|      0|        }
 6172|       |
 6173|  1.83M|        const auto t = type(id);
 6174|  1.83M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  986|  1.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.83M]
  |  |  ------------------
  ------------------
 6175|      0|            return {};
 6176|      0|        }
 6177|       |
 6178|  1.83M|        basic_scan_arg<Context> arg;
 6179|  1.83M|        arg.m_type = t;
 6180|  1.83M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6180:13): [True: 1.83M, False: 0]
  ------------------
 6181|  1.83M|            arg.m_value.ref_value = m_builtin_values[id];
 6182|  1.83M|        }
 6183|      0|        else {
 6184|      0|            arg.m_value = m_values[id];
 6185|      0|        }
 6186|  1.83M|        return arg;
 6187|  1.83M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6228|  1.83M|    {
 6229|       |        // First (0th) index is size, types start after that
 6230|  1.83M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6231|  1.83M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6232|  1.83M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6233|  1.83M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6223|  1.83M|    {
 6224|  1.83M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6225|  1.83M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5977|  3.46M|    {
 5978|  3.46M|        return m_type != detail::arg_type::none_type;
 5979|  3.46M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9361|   276k|{
 9362|   276k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|   276k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|   276k|{
 9251|   276k|#define SCN_VISIT(Type)                                                \
 9252|   276k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|   276k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|   276k|    }                                                                  \
 9255|   276k|    else {                                                             \
 9256|   276k|        return vis(monostate_val);                                     \
 9257|   276k|    }
 9258|       |
 9259|   276k|    monostate monostate_val{};
 9260|       |
 9261|   276k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 276k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 276k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 276k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 276k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 276k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 276k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 276k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 276k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 276k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 276k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 276k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 276k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 276k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 276k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 276k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 276k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 276k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|  88.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 88.7k, False: 187k]
  ------------------
 9305|  88.7k|            SCN_VISIT(float);
  ------------------
  |  | 9252|  88.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  88.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  88.7k|    }                                                                  \
  |  | 9255|  88.7k|    else {                                                             \
  |  | 9256|  88.7k|        return vis(monostate_val);                                     \
  |  | 9257|  88.7k|    }
  ------------------
 9306|   181k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 92.9k, False: 183k]
  ------------------
 9307|   181k|            SCN_VISIT(double);
  ------------------
  |  | 9252|   181k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   181k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   181k|    }                                                                  \
  |  | 9255|   181k|    else {                                                             \
  |  | 9256|   181k|        return vis(monostate_val);                                     \
  |  | 9257|   181k|    }
  ------------------
 9308|   276k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 94.9k, False: 181k]
  ------------------
 9309|   276k|            SCN_VISIT(long double);
  ------------------
  |  | 9252|   276k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   276k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   276k|    }                                                                  \
  |  | 9255|   276k|    else {                                                             \
  |  | 9256|   276k|        return vis(monostate_val);                                     \
  |  | 9257|   276k|    }
  ------------------
 9310|   276k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 276k]
  ------------------
 9311|   276k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|   276k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   276k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   276k|    }                                                                  \
  |  | 9255|   276k|    else {                                                             \
  |  | 9256|   276k|        return vis(monostate_val);                                     \
  |  | 9257|   276k|    }
  ------------------
 9312|   276k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 276k]
  ------------------
 9313|   276k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|   276k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   276k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   276k|    }                                                                  \
  |  | 9255|   276k|    else {                                                             \
  |  | 9256|   276k|        return vis(monostate_val);                                     \
  |  | 9257|   276k|    }
  ------------------
 9314|   276k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 276k]
  ------------------
 9315|   276k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|   276k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   276k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   276k|    }                                                                  \
  |  | 9255|   276k|    else {                                                             \
  |  | 9256|   276k|        return vis(monostate_val);                                     \
  |  | 9257|   276k|    }
  ------------------
 9316|   276k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 276k]
  ------------------
 9317|   276k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|   276k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   276k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   276k|    }                                                                  \
  |  | 9255|   276k|    else {                                                             \
  |  | 9256|   276k|        return vis(monostate_val);                                     \
  |  | 9257|   276k|    }
  ------------------
 9318|   276k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 276k]
  ------------------
 9319|   276k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|   276k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   276k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   276k|    }                                                                  \
  |  | 9255|   276k|    else {                                                             \
  |  | 9256|   276k|        return vis(monostate_val);                                     \
  |  | 9257|   276k|    }
  ------------------
 9320|   276k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 276k]
  ------------------
 9321|   276k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|   276k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   276k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   276k|    }                                                                  \
  |  | 9255|   276k|    else {                                                             \
  |  | 9256|   276k|        return vis(monostate_val);                                     \
  |  | 9257|   276k|    }
  ------------------
 9322|       |
 9323|   276k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 276k]
  ------------------
 9324|   276k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|   276k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|   276k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 276k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 276k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|   276k|            SCN_CLANG_POP
 9341|   276k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6022|  4.91M|{
 6023|  4.91M|    return arg.m_type;
 6024|  4.91M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6034|  2.02M|{
 6035|  2.02M|    return arg.m_value;
 6036|  2.02M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8962|   781k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1055|   781k|    static_cast<    \
  |  | 1056|   781k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8963|   781k|    {
 8964|   781k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4689|  1.08M|{
 4690|  1.08M|    if (is_contiguous()) {
  ------------------
  |  Branch (4690:9): [True: 0, False: 1.08M]
  ------------------
 4691|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4692|      0|                                ranges::default_sentinel};
 4693|      0|    }
 4694|  1.08M|    return ranges::subrange{forward_iterator{this, 0},
 4695|  1.08M|                            ranges::default_sentinel};
 4696|  1.08M|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4452|  1.08M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4453|  1.08M|    {
 4454|  1.08M|        SCN_EXPECT(parent);
  ------------------
  |  | 1051|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4455|  1.08M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1051|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  1.08M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9361|   303k|{
 9362|   303k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|   303k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|   303k|{
 9251|   303k|#define SCN_VISIT(Type)                                                \
 9252|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|   303k|    }                                                                  \
 9255|   303k|    else {                                                             \
 9256|   303k|        return vis(monostate_val);                                     \
 9257|   303k|    }
 9258|       |
 9259|   303k|    monostate monostate_val{};
 9260|       |
 9261|   303k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 303k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 303k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 303k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 303k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 303k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 303k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 303k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 303k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 303k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 303k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 303k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 303k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 303k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 303k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 303k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 303k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 303k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|  96.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 96.5k, False: 206k]
  ------------------
 9305|  96.5k|            SCN_VISIT(float);
  ------------------
  |  | 9252|  96.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  96.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  96.5k|    }                                                                  \
  |  | 9255|  96.5k|    else {                                                             \
  |  | 9256|  96.5k|        return vis(monostate_val);                                     \
  |  | 9257|  96.5k|    }
  ------------------
 9306|   199k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 102k, False: 200k]
  ------------------
 9307|   199k|            SCN_VISIT(double);
  ------------------
  |  | 9252|   199k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   199k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   199k|    }                                                                  \
  |  | 9255|   199k|    else {                                                             \
  |  | 9256|   199k|        return vis(monostate_val);                                     \
  |  | 9257|   199k|    }
  ------------------
 9308|   303k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 103k, False: 199k]
  ------------------
 9309|   303k|            SCN_VISIT(long double);
  ------------------
  |  | 9252|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   303k|    }                                                                  \
  |  | 9255|   303k|    else {                                                             \
  |  | 9256|   303k|        return vis(monostate_val);                                     \
  |  | 9257|   303k|    }
  ------------------
 9310|   303k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 303k]
  ------------------
 9311|   303k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   303k|    }                                                                  \
  |  | 9255|   303k|    else {                                                             \
  |  | 9256|   303k|        return vis(monostate_val);                                     \
  |  | 9257|   303k|    }
  ------------------
 9312|   303k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 303k]
  ------------------
 9313|   303k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   303k|    }                                                                  \
  |  | 9255|   303k|    else {                                                             \
  |  | 9256|   303k|        return vis(monostate_val);                                     \
  |  | 9257|   303k|    }
  ------------------
 9314|   303k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 303k]
  ------------------
 9315|   303k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   303k|    }                                                                  \
  |  | 9255|   303k|    else {                                                             \
  |  | 9256|   303k|        return vis(monostate_val);                                     \
  |  | 9257|   303k|    }
  ------------------
 9316|   303k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 303k]
  ------------------
 9317|   303k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   303k|    }                                                                  \
  |  | 9255|   303k|    else {                                                             \
  |  | 9256|   303k|        return vis(monostate_val);                                     \
  |  | 9257|   303k|    }
  ------------------
 9318|   303k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 303k]
  ------------------
 9319|   303k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   303k|    }                                                                  \
  |  | 9255|   303k|    else {                                                             \
  |  | 9256|   303k|        return vis(monostate_val);                                     \
  |  | 9257|   303k|    }
  ------------------
 9320|   303k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 303k]
  ------------------
 9321|   303k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|   303k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   303k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   303k|    }                                                                  \
  |  | 9255|   303k|    else {                                                             \
  |  | 9256|   303k|        return vis(monostate_val);                                     \
  |  | 9257|   303k|    }
  ------------------
 9322|       |
 9323|   303k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 303k]
  ------------------
 9324|   303k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|   303k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|   303k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 303k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 303k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|   303k|            SCN_CLANG_POP
 9341|   303k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6292|   662k|        : m_format{format},
 6293|   662k|          m_next_arg_id{next_arg_id},
 6294|   662k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|   662k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|   662k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|   662k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|   662k|    {
 6300|   662k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3073|   662k|    {
 3074|   662k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|   662k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3039|   662k|    {
 3040|   662k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|   662k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|   662k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|   662k|{
 7809|   662k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|   662k|    handler.check_args_exhausted();
 7811|   662k|    return handler.get_error();
 7812|   662k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|   662k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|   662k|    auto begin = format.data();
 7777|   662k|    auto it = begin;
 7778|   662k|    const auto end = format.data() + format.size();
 7779|       |
 7780|  1.25M|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 662k, False: 591k]
  ------------------
 7781|   662k|        const auto ch = *it++;
 7782|   662k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 662k, False: 0]
  ------------------
 7783|   662k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|   662k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|   662k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 71.1k, False: 591k]
  ------------------
 7787|  71.1k|                return;
 7788|  71.1k|            }
 7789|   662k|        }
 7790|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 0, False: 0]
  ------------------
 7791|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7792|      0|                handler.on_error("Unmatched '}' in format string");
 7793|      0|                return;
 7794|      0|            }
 7795|       |
 7796|      0|            handler.on_literal_text(begin, it);
 7797|      0|            begin = ++it;
 7798|      0|        }
 7799|   662k|    }
 7800|       |
 7801|   591k|    handler.on_literal_text(begin, end);
 7802|   591k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7705|   662k|{
 7706|   662k|    struct id_adapter {
 7707|   662k|        constexpr void operator()()
 7708|   662k|        {
 7709|   662k|            arg_id = handler.on_arg_id();
 7710|   662k|        }
 7711|   662k|        constexpr void operator()(std::size_t id)
 7712|   662k|        {
 7713|   662k|            arg_id = handler.on_arg_id(id);
 7714|   662k|        }
 7715|       |
 7716|   662k|        constexpr void on_error(const char* msg)
 7717|   662k|        {
 7718|   662k|            SCN_UNLIKELY_ATTR
 7719|   662k|            handler.on_error(msg);
 7720|   662k|        }
 7721|       |
 7722|   662k|        Handler& handler;
 7723|   662k|        std::size_t arg_id;
 7724|   662k|    };
 7725|       |
 7726|   662k|    ++begin;
 7727|   662k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 662k]
  |  |  ------------------
  ------------------
 7728|      0|        handler.on_error("Unexpected end of replacement field");
 7729|      0|        return begin;
 7730|      0|    }
 7731|       |
 7732|   662k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 0, False: 662k]
  ------------------
 7733|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|      0|    }
 7735|   662k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 0, False: 662k]
  ------------------
 7736|      0|        handler.on_literal_text(begin, begin + 1);
 7737|      0|    }
 7738|   662k|    else {
 7739|   662k|        auto adapter = id_adapter{handler, 0};
 7740|   662k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|   662k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 662k]
  |  |  ------------------
  ------------------
 7743|      0|            handler.on_error("Missing '}' in format string");
 7744|      0|            return begin;
 7745|      0|        }
 7746|       |
 7747|   662k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 0, False: 662k]
  ------------------
 7748|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|      0|        }
 7750|   662k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 662k, False: 0]
  ------------------
 7751|   662k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 662k]
  |  |  ------------------
  ------------------
 7752|      0|                handler.on_error("Unexpected end of replacement field");
 7753|      0|                return begin;
 7754|      0|            }
 7755|   662k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|   662k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 662k]
  |  |  |  Branch (986:45): [True: 0, False: 662k]
  |  |  |  Branch (986:45): [True: 0, False: 662k]
  |  |  ------------------
  ------------------
 7757|      0|                handler.on_error("Unknown format specifier");
 7758|      0|                return begin;
 7759|      0|            }
 7760|   662k|        }
 7761|      0|        else {
 7762|      0|            SCN_UNLIKELY_ATTR
 7763|      0|            handler.on_error("Missing '}' in format string");
 7764|      0|            return begin;
 7765|      0|        }
 7766|   662k|    }
 7767|   662k|    return begin + 1;
 7768|   662k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8861|  1.44M|    {
 8862|  1.44M|        return m_args.get(id);
 8863|  1.44M|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6327|  1.44M|    {
 6328|  1.44M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  986|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.44M]
  |  |  ------------------
  ------------------
 6329|      0|            on_error(
 6330|      0|                "Cannot switch from manual to automatic argument indexing");
 6331|      0|            return 0;
 6332|      0|        }
 6333|       |
 6334|  1.44M|        auto id = static_cast<size_t>(m_next_arg_id++);
 6335|  1.44M|        do_check_arg_id(id);
 6336|  1.44M|        return id;
 6337|  1.44M|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6821|  1.44M|{
 6822|  1.44M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6822:9): [Folded - Ignored]
  ------------------
 6823|  1.44M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6823:10): [Folded - Ignored]
  |  Branch (6823:22): [Folded - Ignored]
  ------------------
 6824|       |        // The cast below will cause an error on gcc pre-12
 6825|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6826|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6826:13): [True: 0, False: 0]
  ------------------
 6827|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6828|      0|            SCN_UNLIKELY_ATTR
 6829|      0|            on_error("Argument not found");
 6830|      0|        }
 6831|      0|    }
 6832|  1.44M|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|   662k|{
 7207|   662k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   662k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   662k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|   662k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 662k, False: 0]
  |  Branch (7208:26): [True: 0, False: 662k]
  ------------------
 7209|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|      0|    }
 7211|       |
 7212|   662k|    handler();
 7213|   662k|    return begin;
 7214|   662k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|   662k|        {
 7709|   662k|            arg_id = handler.on_arg_id();
 7710|   662k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6322|  1.44M|    {
 6323|  1.44M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6324|  1.44M|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6311|  2.88M|    {
 6312|  2.88M|        return m_format.data();
 6313|  2.88M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7887|   662k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1057|   662k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7888|   662k|    {
 7889|   662k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1051|   662k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   662k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7890|   662k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7621|   662k|{
 7622|   662k|    auto do_presentation = [&]() -> const CharT* {
 7623|   662k|        if (*begin == CharT{'['}) {
 7624|   662k|            auto set = parse_presentation_set(begin, end, handler);
 7625|   662k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7626|       |                // clang-format off
 7627|   662k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|   662k|                return begin;
 7630|   662k|            }
 7631|   662k|            handler.on_character_set_string(set);
 7632|   662k|            return begin;
 7633|   662k|        }
 7634|   662k|        if (*begin == CharT{'/'}) {
 7635|   662k|            return parse_presentation_regex(begin, end, handler);
 7636|   662k|        }
 7637|   662k|        presentation_type type = parse_presentation_type(*begin++);
 7638|   662k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7639|   662k|            handler.on_error("Invalid type specifier in format string");
 7640|   662k|            return begin;
 7641|   662k|        }
 7642|   662k|        handler.on_type(type);
 7643|   662k|        return begin;
 7644|   662k|    };
 7645|       |
 7646|   662k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7646:9): [True: 662k, False: 0]
  |  Branch (7646:28): [True: 662k, False: 0]
  ------------------
 7647|   662k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7647:9): [True: 662k, False: 0]
  |  Branch (7647:36): [True: 478k, False: 184k]
  ------------------
 7648|   478k|        return do_presentation();
 7649|   478k|    }
 7650|       |
 7651|   184k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 184k]
  |  |  ------------------
  ------------------
 7652|      0|        handler.on_error("Unexpected end of format string");
 7653|      0|        return begin;
 7654|      0|    }
 7655|       |
 7656|   184k|    begin = parse_align(begin, end, handler);
 7657|   184k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 184k]
  |  |  ------------------
  ------------------
 7658|      0|        handler.on_error("Unexpected end of format string");
 7659|      0|        return begin;
 7660|      0|    }
 7661|       |
 7662|   184k|    begin = parse_width(begin, end, handler);
 7663|   184k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 184k]
  |  |  ------------------
  ------------------
 7664|      0|        handler.on_error("Unexpected end of format string");
 7665|      0|        return begin;
 7666|      0|    }
 7667|       |
 7668|   184k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7668:9): [True: 0, False: 184k]
  ------------------
 7669|      0|        ++begin;
 7670|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7671|      0|            handler.on_error("Unexpected end of format string");
 7672|      0|            return begin;
 7673|      0|        }
 7674|      0|        begin = parse_precision(begin, end, handler);
 7675|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7676|      0|            handler.on_error("Unexpected end of format string");
 7677|      0|            return begin;
 7678|      0|        }
 7679|      0|    }
 7680|       |
 7681|   184k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7681:9): [True: 184k, False: 0]
  ------------------
 7682|   184k|        handler.on_localized();
 7683|   184k|        ++begin;
 7684|   184k|    }
 7685|   184k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 184k]
  |  |  ------------------
  ------------------
 7686|      0|        handler.on_error("Unexpected end of format string");
 7687|      0|        return begin;
 7688|      0|    }
 7689|       |
 7690|   184k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7690:9): [True: 184k, False: 0]
  |  Branch (7690:25): [True: 0, False: 184k]
  ------------------
 7691|      0|        do_presentation();
 7692|      0|    }
 7693|   184k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 184k]
  |  |  ------------------
  ------------------
 7694|      0|        handler.on_error("Unexpected end of format string");
 7695|      0|        return begin;
 7696|      0|    }
 7697|       |
 7698|   184k|    return begin;
 7699|   184k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7270|  1.44M|{
 7271|  1.44M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7271:13): [True: 1.03M, False: 407k]
  |  Branch (7271:33): [True: 1.03M, False: 0]
  ------------------
 7272|  1.44M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7272:13): [True: 407k, False: 0]
  |  Branch (7272:33): [True: 407k, False: 0]
  ------------------
 7273|  1.44M|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7622|   478k|    auto do_presentation = [&]() -> const CharT* {
 7623|   478k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7623:13): [True: 0, False: 478k]
  ------------------
 7624|      0|            auto set = parse_presentation_set(begin, end, handler);
 7625|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7626|       |                // clang-format off
 7627|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|      0|                return begin;
 7630|      0|            }
 7631|      0|            handler.on_character_set_string(set);
 7632|      0|            return begin;
 7633|      0|        }
 7634|   478k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7634:13): [True: 0, False: 478k]
  ------------------
 7635|      0|            return parse_presentation_regex(begin, end, handler);
 7636|      0|        }
 7637|   478k|        presentation_type type = parse_presentation_type(*begin++);
 7638|   478k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  986|   478k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 478k]
  |  |  ------------------
  ------------------
 7639|      0|            handler.on_error("Invalid type specifier in format string");
 7640|      0|            return begin;
 7641|      0|        }
 7642|   478k|        handler.on_type(type);
 7643|   478k|        return begin;
 7644|   478k|    };
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7218|  1.03M|{
 7219|  1.03M|    switch (type) {
 7220|      0|        case 'b':
  ------------------
  |  Branch (7220:9): [True: 0, False: 1.03M]
  ------------------
 7221|      0|        case 'B':
  ------------------
  |  Branch (7221:9): [True: 0, False: 1.03M]
  ------------------
 7222|      0|            return presentation_type::int_binary;
 7223|      0|        case 'd':
  ------------------
  |  Branch (7223:9): [True: 0, False: 1.03M]
  ------------------
 7224|      0|            return presentation_type::int_decimal;
 7225|      0|        case 'i':
  ------------------
  |  Branch (7225:9): [True: 0, False: 1.03M]
  ------------------
 7226|      0|            return presentation_type::int_generic;
 7227|      0|        case 'u':
  ------------------
  |  Branch (7227:9): [True: 0, False: 1.03M]
  ------------------
 7228|      0|            return presentation_type::int_unsigned_decimal;
 7229|      0|        case 'o':
  ------------------
  |  Branch (7229:9): [True: 0, False: 1.03M]
  ------------------
 7230|      0|            return presentation_type::int_octal;
 7231|      0|        case 'x':
  ------------------
  |  Branch (7231:9): [True: 0, False: 1.03M]
  ------------------
 7232|      0|        case 'X':
  ------------------
  |  Branch (7232:9): [True: 0, False: 1.03M]
  ------------------
 7233|      0|            return presentation_type::int_hex;
 7234|      0|        case 'r':
  ------------------
  |  Branch (7234:9): [True: 0, False: 1.03M]
  ------------------
 7235|      0|        case 'R':
  ------------------
  |  Branch (7235:9): [True: 0, False: 1.03M]
  ------------------
 7236|      0|            return presentation_type::int_arbitrary_base;
 7237|   441k|        case 'a':
  ------------------
  |  Branch (7237:9): [True: 441k, False: 595k]
  ------------------
 7238|   441k|        case 'A':
  ------------------
  |  Branch (7238:9): [True: 0, False: 1.03M]
  ------------------
 7239|   441k|            return presentation_type::float_hex;
 7240|  43.3k|        case 'e':
  ------------------
  |  Branch (7240:9): [True: 43.3k, False: 993k]
  ------------------
 7241|  43.3k|        case 'E':
  ------------------
  |  Branch (7241:9): [True: 0, False: 1.03M]
  ------------------
 7242|  43.3k|            return presentation_type::float_scientific;
 7243|   215k|        case 'f':
  ------------------
  |  Branch (7243:9): [True: 215k, False: 821k]
  ------------------
 7244|   215k|        case 'F':
  ------------------
  |  Branch (7244:9): [True: 0, False: 1.03M]
  ------------------
 7245|   215k|            return presentation_type::float_fixed;
 7246|   337k|        case 'g':
  ------------------
  |  Branch (7246:9): [True: 337k, False: 700k]
  ------------------
 7247|   337k|        case 'G':
  ------------------
  |  Branch (7247:9): [True: 0, False: 1.03M]
  ------------------
 7248|   337k|            return presentation_type::float_general;
 7249|      0|        case 's':
  ------------------
  |  Branch (7249:9): [True: 0, False: 1.03M]
  ------------------
 7250|      0|            return presentation_type::string;
 7251|      0|        case 'c':
  ------------------
  |  Branch (7251:9): [True: 0, False: 1.03M]
  ------------------
 7252|      0|            return presentation_type::character;
 7253|      0|        case '?':
  ------------------
  |  Branch (7253:9): [True: 0, False: 1.03M]
  ------------------
 7254|      0|            return presentation_type::escaped_character;
 7255|      0|        case 'p':
  ------------------
  |  Branch (7255:9): [True: 0, False: 1.03M]
  ------------------
 7256|      0|            return presentation_type::pointer;
 7257|      0|        case '[':
  ------------------
  |  Branch (7257:9): [True: 0, False: 1.03M]
  ------------------
 7258|      0|        case '/':
  ------------------
  |  Branch (7258:9): [True: 0, False: 1.03M]
  ------------------
 7259|       |            // Should be handled by parse_presentation_set and
 7260|       |            // parse_presentation_regex
 7261|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7262|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7263|      0|        default:
  ------------------
  |  Branch (7263:9): [True: 0, False: 1.03M]
  ------------------
 7264|      0|            return presentation_type::none;
 7265|  1.03M|    }
 7266|  1.03M|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7295|   184k|{
 7296|   184k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7297|       |
 7298|   184k|    auto check_align = [](wchar_t ch) {
 7299|   184k|        switch (ch) {
 7300|   184k|            case L'<':
 7301|   184k|                return align_type::left;
 7302|   184k|            case L'>':
 7303|   184k|                return align_type::right;
 7304|   184k|            case L'^':
 7305|   184k|                return align_type::center;
 7306|   184k|            default:
 7307|   184k|                return align_type::none;
 7308|   184k|        }
 7309|   184k|    };
 7310|       |
 7311|   184k|    auto potential_fill_len = code_point_length(begin, end);
 7312|   184k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  986|   369k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 184k]
  |  |  |  Branch (986:45): [True: 0, False: 184k]
  |  |  |  Branch (986:45): [True: 0, False: 184k]
  |  |  ------------------
  ------------------
 7313|   184k|                     std::distance(begin, end) < potential_fill_len)) {
 7314|      0|        handler.on_error("Invalid encoding in fill character");
 7315|      0|        return begin;
 7316|      0|    }
 7317|       |
 7318|   184k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7319|       |
 7320|   184k|    auto potential_fill = std::basic_string_view<CharT>{
 7321|   184k|        begin, static_cast<size_t>(potential_fill_len)};
 7322|   184k|    const auto begin_before_fill = begin;
 7323|   184k|    begin += potential_fill_len;
 7324|       |
 7325|   184k|    if (begin == end) {
  ------------------
  |  Branch (7325:9): [True: 0, False: 184k]
  ------------------
 7326|      0|        return begin_before_fill;
 7327|      0|    }
 7328|       |
 7329|   184k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7330|   184k|    const auto begin_after_fill = begin;
 7331|   184k|    ++begin;
 7332|       |
 7333|   184k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7333:9): [True: 184k, False: 0]
  ------------------
 7334|   184k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  986|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 184k]
  |  |  ------------------
  ------------------
 7335|      0|            handler.on_error("Invalid fill character '{' in format string");
 7336|      0|            return begin;
 7337|      0|        }
 7338|   184k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7338:13): [True: 0, False: 184k]
  ------------------
 7339|      0|            return begin_before_fill;
 7340|      0|        }
 7341|   184k|    }
 7342|       |
 7343|   184k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7343:9): [True: 184k, False: 0]
  ------------------
 7344|   184k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7344:13): [True: 0, False: 184k]
  ------------------
 7345|      0|            handler.on_align(potential_align_on_fill);
 7346|      0|            return begin_after_fill;
 7347|      0|        }
 7348|   184k|        return begin_before_fill;
 7349|   184k|    }
 7350|       |
 7351|      0|    handler.on_fill(potential_fill);
 7352|      0|    handler.on_align(potential_align_after_fill);
 7353|      0|    return begin;
 7354|   184k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7277|   407k|{
 7278|   407k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   407k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   407k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7279|       |    if constexpr (sizeof(CharT) != 1) {
 7280|       |        return 1;
 7281|       |    }
 7282|   407k|    else {
 7283|   407k|        const auto lengths =
 7284|   407k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7285|   407k|            "\3\4";
 7286|   407k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7287|   407k|        return len;
 7288|   407k|    }
 7289|   407k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7298|   369k|    auto check_align = [](wchar_t ch) {
 7299|   369k|        switch (ch) {
 7300|      0|            case L'<':
  ------------------
  |  Branch (7300:13): [True: 0, False: 369k]
  ------------------
 7301|      0|                return align_type::left;
 7302|      0|            case L'>':
  ------------------
  |  Branch (7302:13): [True: 0, False: 369k]
  ------------------
 7303|      0|                return align_type::right;
 7304|      0|            case L'^':
  ------------------
  |  Branch (7304:13): [True: 0, False: 369k]
  ------------------
 7305|      0|                return align_type::center;
 7306|   369k|            default:
  ------------------
  |  Branch (7306:13): [True: 369k, False: 0]
  ------------------
 7307|   369k|                return align_type::none;
 7308|   369k|        }
 7309|   369k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7360|   184k|{
 7361|   184k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7362|       |
 7363|   184k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7363:9): [True: 184k, False: 0]
  |  Branch (7363:33): [True: 0, False: 184k]
  ------------------
 7364|      0|        int width = parse_simple_int(begin, end);
 7365|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  985|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7366|      0|            handler.on_width(width);
 7367|      0|        }
 7368|      0|        else {
 7369|      0|            handler.on_error("Invalid field width");
 7370|      0|            return begin;
 7371|      0|        }
 7372|      0|    }
 7373|   184k|    return begin;
 7374|   184k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7893|   184k|    {
 7894|   184k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7895|   184k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7895:13): [True: 184k, False: 0]
  ------------------
 7896|   184k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7896:13): [True: 184k, False: 0]
  ------------------
 7897|   184k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7897:13): [True: 0, False: 184k]
  ------------------
 7898|   184k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7898:13): [True: 0, False: 0]
  ------------------
 7899|      0|            SCN_UNLIKELY_ATTR
 7900|       |            // clang-format off
 7901|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7902|       |            // clang-format on
 7903|      0|        }
 7904|       |
 7905|   184k|        Handler::on_localized();
 7906|   184k|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7040|   633k|    {
 7041|   633k|        if constexpr (!SCN_DISABLE_LOCALE) {
 7042|   633k|            m_specs.localized = true;
 7043|       |        }
 7044|       |        else {
 7045|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7046|       |        }
 7047|   633k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9361|   662k|{
 9362|   662k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|   662k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|   662k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|   662k|{
 9251|   662k|#define SCN_VISIT(Type)                                                \
 9252|   662k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|   662k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|   662k|    }                                                                  \
 9255|   662k|    else {                                                             \
 9256|   662k|        return vis(monostate_val);                                     \
 9257|   662k|    }
 9258|       |
 9259|   662k|    monostate monostate_val{};
 9260|       |
 9261|   662k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 662k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 662k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 662k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 662k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 662k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 662k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 662k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 662k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 662k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 662k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 662k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 662k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 662k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 662k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 662k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 662k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 662k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|   214k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 214k, False: 447k]
  ------------------
 9305|   214k|            SCN_VISIT(float);
  ------------------
  |  | 9252|   214k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   214k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   214k|    }                                                                  \
  |  | 9255|   214k|    else {                                                             \
  |  | 9256|   214k|        return vis(monostate_val);                                     \
  |  | 9257|   214k|    }
  ------------------
 9306|   437k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 222k, False: 440k]
  ------------------
 9307|   437k|            SCN_VISIT(double);
  ------------------
  |  | 9252|   437k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   437k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   437k|    }                                                                  \
  |  | 9255|   437k|    else {                                                             \
  |  | 9256|   437k|        return vis(monostate_val);                                     \
  |  | 9257|   437k|    }
  ------------------
 9308|   662k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 225k, False: 437k]
  ------------------
 9309|   662k|            SCN_VISIT(long double);
  ------------------
  |  | 9252|   662k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   662k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   662k|    }                                                                  \
  |  | 9255|   662k|    else {                                                             \
  |  | 9256|   662k|        return vis(monostate_val);                                     \
  |  | 9257|   662k|    }
  ------------------
 9310|   662k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 662k]
  ------------------
 9311|   662k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|   662k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   662k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   662k|    }                                                                  \
  |  | 9255|   662k|    else {                                                             \
  |  | 9256|   662k|        return vis(monostate_val);                                     \
  |  | 9257|   662k|    }
  ------------------
 9312|   662k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 662k]
  ------------------
 9313|   662k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|   662k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   662k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   662k|    }                                                                  \
  |  | 9255|   662k|    else {                                                             \
  |  | 9256|   662k|        return vis(monostate_val);                                     \
  |  | 9257|   662k|    }
  ------------------
 9314|   662k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 662k]
  ------------------
 9315|   662k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|   662k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   662k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   662k|    }                                                                  \
  |  | 9255|   662k|    else {                                                             \
  |  | 9256|   662k|        return vis(monostate_val);                                     \
  |  | 9257|   662k|    }
  ------------------
 9316|   662k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 662k]
  ------------------
 9317|   662k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|   662k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   662k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   662k|    }                                                                  \
  |  | 9255|   662k|    else {                                                             \
  |  | 9256|   662k|        return vis(monostate_val);                                     \
  |  | 9257|   662k|    }
  ------------------
 9318|   662k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 662k]
  ------------------
 9319|   662k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|   662k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   662k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   662k|    }                                                                  \
  |  | 9255|   662k|    else {                                                             \
  |  | 9256|   662k|        return vis(monostate_val);                                     \
  |  | 9257|   662k|    }
  ------------------
 9320|   662k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 662k]
  ------------------
 9321|   662k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|   662k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   662k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   662k|    }                                                                  \
  |  | 9255|   662k|    else {                                                             \
  |  | 9256|   662k|        return vis(monostate_val);                                     \
  |  | 9257|   662k|    }
  ------------------
 9322|       |
 9323|   662k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 662k]
  ------------------
 9324|   662k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|   662k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|   662k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 662k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 662k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|   662k|            SCN_CLANG_POP
 9341|   662k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6292|   781k|        : m_format{format},
 6293|   781k|          m_next_arg_id{next_arg_id},
 6294|   781k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|   781k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|   781k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|   781k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|   781k|    {
 6300|   781k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|   781k|{
 7809|   781k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|   781k|    handler.check_args_exhausted();
 7811|   781k|    return handler.get_error();
 7812|   781k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|   781k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|   781k|    auto begin = format.data();
 7777|   781k|    auto it = begin;
 7778|   781k|    const auto end = format.data() + format.size();
 7779|       |
 7780|  1.49M|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 781k, False: 710k]
  ------------------
 7781|   781k|        const auto ch = *it++;
 7782|   781k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 781k, False: 0]
  ------------------
 7783|   781k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|   781k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|   781k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 71.1k, False: 710k]
  ------------------
 7787|  71.1k|                return;
 7788|  71.1k|            }
 7789|   781k|        }
 7790|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 0, False: 0]
  ------------------
 7791|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7792|      0|                handler.on_error("Unmatched '}' in format string");
 7793|      0|                return;
 7794|      0|            }
 7795|       |
 7796|      0|            handler.on_literal_text(begin, it);
 7797|      0|            begin = ++it;
 7798|      0|        }
 7799|   781k|    }
 7800|       |
 7801|   710k|    handler.on_literal_text(begin, end);
 7802|   710k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 9000|   710k|    {
 9001|   710k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|   710k|    static_cast<    \
  |  | 1056|   710k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9002|   710k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7705|   781k|{
 7706|   781k|    struct id_adapter {
 7707|   781k|        constexpr void operator()()
 7708|   781k|        {
 7709|   781k|            arg_id = handler.on_arg_id();
 7710|   781k|        }
 7711|   781k|        constexpr void operator()(std::size_t id)
 7712|   781k|        {
 7713|   781k|            arg_id = handler.on_arg_id(id);
 7714|   781k|        }
 7715|       |
 7716|   781k|        constexpr void on_error(const char* msg)
 7717|   781k|        {
 7718|   781k|            SCN_UNLIKELY_ATTR
 7719|   781k|            handler.on_error(msg);
 7720|   781k|        }
 7721|       |
 7722|   781k|        Handler& handler;
 7723|   781k|        std::size_t arg_id;
 7724|   781k|    };
 7725|       |
 7726|   781k|    ++begin;
 7727|   781k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   781k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 781k]
  |  |  ------------------
  ------------------
 7728|      0|        handler.on_error("Unexpected end of replacement field");
 7729|      0|        return begin;
 7730|      0|    }
 7731|       |
 7732|   781k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 0, False: 781k]
  ------------------
 7733|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|      0|    }
 7735|   781k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 0, False: 781k]
  ------------------
 7736|      0|        handler.on_literal_text(begin, begin + 1);
 7737|      0|    }
 7738|   781k|    else {
 7739|   781k|        auto adapter = id_adapter{handler, 0};
 7740|   781k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|   781k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   781k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 781k]
  |  |  ------------------
  ------------------
 7743|      0|            handler.on_error("Missing '}' in format string");
 7744|      0|            return begin;
 7745|      0|        }
 7746|       |
 7747|   781k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 0, False: 781k]
  ------------------
 7748|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|      0|        }
 7750|   781k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 781k, False: 0]
  ------------------
 7751|   781k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|   781k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 781k]
  |  |  ------------------
  ------------------
 7752|      0|                handler.on_error("Unexpected end of replacement field");
 7753|      0|                return begin;
 7754|      0|            }
 7755|   781k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|   781k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 781k]
  |  |  |  Branch (986:45): [True: 0, False: 781k]
  |  |  |  Branch (986:45): [True: 0, False: 781k]
  |  |  ------------------
  ------------------
 7757|      0|                handler.on_error("Unknown format specifier");
 7758|      0|                return begin;
 7759|      0|            }
 7760|   781k|        }
 7761|      0|        else {
 7762|      0|            SCN_UNLIKELY_ATTR
 7763|      0|            handler.on_error("Missing '}' in format string");
 7764|      0|            return begin;
 7765|      0|        }
 7766|   781k|    }
 7767|   781k|    return begin + 1;
 7768|   781k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|   781k|{
 7207|   781k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   781k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   781k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|   781k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 781k, False: 0]
  |  Branch (7208:26): [True: 0, False: 781k]
  ------------------
 7209|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|      0|    }
 7211|       |
 7212|   781k|    handler();
 7213|   781k|    return begin;
 7214|   781k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|   781k|        {
 7709|   781k|            arg_id = handler.on_arg_id();
 7710|   781k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7887|   781k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1057|   781k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7888|   781k|    {
 7889|   781k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1051|   781k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   781k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7890|   781k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7621|   781k|{
 7622|   781k|    auto do_presentation = [&]() -> const CharT* {
 7623|   781k|        if (*begin == CharT{'['}) {
 7624|   781k|            auto set = parse_presentation_set(begin, end, handler);
 7625|   781k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7626|       |                // clang-format off
 7627|   781k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|   781k|                return begin;
 7630|   781k|            }
 7631|   781k|            handler.on_character_set_string(set);
 7632|   781k|            return begin;
 7633|   781k|        }
 7634|   781k|        if (*begin == CharT{'/'}) {
 7635|   781k|            return parse_presentation_regex(begin, end, handler);
 7636|   781k|        }
 7637|   781k|        presentation_type type = parse_presentation_type(*begin++);
 7638|   781k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7639|   781k|            handler.on_error("Invalid type specifier in format string");
 7640|   781k|            return begin;
 7641|   781k|        }
 7642|   781k|        handler.on_type(type);
 7643|   781k|        return begin;
 7644|   781k|    };
 7645|       |
 7646|   781k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7646:9): [True: 781k, False: 0]
  |  Branch (7646:28): [True: 781k, False: 0]
  ------------------
 7647|   781k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7647:9): [True: 781k, False: 0]
  |  Branch (7647:36): [True: 558k, False: 223k]
  ------------------
 7648|   558k|        return do_presentation();
 7649|   558k|    }
 7650|       |
 7651|   223k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 223k]
  |  |  ------------------
  ------------------
 7652|      0|        handler.on_error("Unexpected end of format string");
 7653|      0|        return begin;
 7654|      0|    }
 7655|       |
 7656|   223k|    begin = parse_align(begin, end, handler);
 7657|   223k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 223k]
  |  |  ------------------
  ------------------
 7658|      0|        handler.on_error("Unexpected end of format string");
 7659|      0|        return begin;
 7660|      0|    }
 7661|       |
 7662|   223k|    begin = parse_width(begin, end, handler);
 7663|   223k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 223k]
  |  |  ------------------
  ------------------
 7664|      0|        handler.on_error("Unexpected end of format string");
 7665|      0|        return begin;
 7666|      0|    }
 7667|       |
 7668|   223k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7668:9): [True: 0, False: 223k]
  ------------------
 7669|      0|        ++begin;
 7670|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7671|      0|            handler.on_error("Unexpected end of format string");
 7672|      0|            return begin;
 7673|      0|        }
 7674|      0|        begin = parse_precision(begin, end, handler);
 7675|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7676|      0|            handler.on_error("Unexpected end of format string");
 7677|      0|            return begin;
 7678|      0|        }
 7679|      0|    }
 7680|       |
 7681|   223k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7681:9): [True: 223k, False: 0]
  ------------------
 7682|   223k|        handler.on_localized();
 7683|   223k|        ++begin;
 7684|   223k|    }
 7685|   223k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 223k]
  |  |  ------------------
  ------------------
 7686|      0|        handler.on_error("Unexpected end of format string");
 7687|      0|        return begin;
 7688|      0|    }
 7689|       |
 7690|   223k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7690:9): [True: 223k, False: 0]
  |  Branch (7690:25): [True: 0, False: 223k]
  ------------------
 7691|      0|        do_presentation();
 7692|      0|    }
 7693|   223k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 223k]
  |  |  ------------------
  ------------------
 7694|      0|        handler.on_error("Unexpected end of format string");
 7695|      0|        return begin;
 7696|      0|    }
 7697|       |
 7698|   223k|    return begin;
 7699|   223k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7622|   558k|    auto do_presentation = [&]() -> const CharT* {
 7623|   558k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7623:13): [True: 0, False: 558k]
  ------------------
 7624|      0|            auto set = parse_presentation_set(begin, end, handler);
 7625|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7626|       |                // clang-format off
 7627|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|      0|                return begin;
 7630|      0|            }
 7631|      0|            handler.on_character_set_string(set);
 7632|      0|            return begin;
 7633|      0|        }
 7634|   558k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7634:13): [True: 0, False: 558k]
  ------------------
 7635|      0|            return parse_presentation_regex(begin, end, handler);
 7636|      0|        }
 7637|   558k|        presentation_type type = parse_presentation_type(*begin++);
 7638|   558k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  986|   558k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 558k]
  |  |  ------------------
  ------------------
 7639|      0|            handler.on_error("Invalid type specifier in format string");
 7640|      0|            return begin;
 7641|      0|        }
 7642|   558k|        handler.on_type(type);
 7643|   558k|        return begin;
 7644|   558k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7295|   223k|{
 7296|   223k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   223k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   223k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7297|       |
 7298|   223k|    auto check_align = [](wchar_t ch) {
 7299|   223k|        switch (ch) {
 7300|   223k|            case L'<':
 7301|   223k|                return align_type::left;
 7302|   223k|            case L'>':
 7303|   223k|                return align_type::right;
 7304|   223k|            case L'^':
 7305|   223k|                return align_type::center;
 7306|   223k|            default:
 7307|   223k|                return align_type::none;
 7308|   223k|        }
 7309|   223k|    };
 7310|       |
 7311|   223k|    auto potential_fill_len = code_point_length(begin, end);
 7312|   223k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  986|   446k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 223k]
  |  |  |  Branch (986:45): [True: 0, False: 223k]
  |  |  |  Branch (986:45): [True: 0, False: 223k]
  |  |  ------------------
  ------------------
 7313|   223k|                     std::distance(begin, end) < potential_fill_len)) {
 7314|      0|        handler.on_error("Invalid encoding in fill character");
 7315|      0|        return begin;
 7316|      0|    }
 7317|       |
 7318|   223k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7319|       |
 7320|   223k|    auto potential_fill = std::basic_string_view<CharT>{
 7321|   223k|        begin, static_cast<size_t>(potential_fill_len)};
 7322|   223k|    const auto begin_before_fill = begin;
 7323|   223k|    begin += potential_fill_len;
 7324|       |
 7325|   223k|    if (begin == end) {
  ------------------
  |  Branch (7325:9): [True: 0, False: 223k]
  ------------------
 7326|      0|        return begin_before_fill;
 7327|      0|    }
 7328|       |
 7329|   223k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7330|   223k|    const auto begin_after_fill = begin;
 7331|   223k|    ++begin;
 7332|       |
 7333|   223k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7333:9): [True: 223k, False: 0]
  ------------------
 7334|   223k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  986|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 223k]
  |  |  ------------------
  ------------------
 7335|      0|            handler.on_error("Invalid fill character '{' in format string");
 7336|      0|            return begin;
 7337|      0|        }
 7338|   223k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7338:13): [True: 0, False: 223k]
  ------------------
 7339|      0|            return begin_before_fill;
 7340|      0|        }
 7341|   223k|    }
 7342|       |
 7343|   223k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7343:9): [True: 223k, False: 0]
  ------------------
 7344|   223k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7344:13): [True: 0, False: 223k]
  ------------------
 7345|      0|            handler.on_align(potential_align_on_fill);
 7346|      0|            return begin_after_fill;
 7347|      0|        }
 7348|   223k|        return begin_before_fill;
 7349|   223k|    }
 7350|       |
 7351|      0|    handler.on_fill(potential_fill);
 7352|      0|    handler.on_align(potential_align_after_fill);
 7353|      0|    return begin;
 7354|   223k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7298|   446k|    auto check_align = [](wchar_t ch) {
 7299|   446k|        switch (ch) {
 7300|      0|            case L'<':
  ------------------
  |  Branch (7300:13): [True: 0, False: 446k]
  ------------------
 7301|      0|                return align_type::left;
 7302|      0|            case L'>':
  ------------------
  |  Branch (7302:13): [True: 0, False: 446k]
  ------------------
 7303|      0|                return align_type::right;
 7304|      0|            case L'^':
  ------------------
  |  Branch (7304:13): [True: 0, False: 446k]
  ------------------
 7305|      0|                return align_type::center;
 7306|   446k|            default:
  ------------------
  |  Branch (7306:13): [True: 446k, False: 0]
  ------------------
 7307|   446k|                return align_type::none;
 7308|   446k|        }
 7309|   446k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7360|   223k|{
 7361|   223k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   223k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   223k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7362|       |
 7363|   223k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7363:9): [True: 223k, False: 0]
  |  Branch (7363:33): [True: 0, False: 223k]
  ------------------
 7364|      0|        int width = parse_simple_int(begin, end);
 7365|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  985|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7366|      0|            handler.on_width(width);
 7367|      0|        }
 7368|      0|        else {
 7369|      0|            handler.on_error("Invalid field width");
 7370|      0|            return begin;
 7371|      0|        }
 7372|      0|    }
 7373|   223k|    return begin;
 7374|   223k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7893|   223k|    {
 7894|   223k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7895|   223k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7895:13): [True: 223k, False: 0]
  ------------------
 7896|   223k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7896:13): [True: 223k, False: 0]
  ------------------
 7897|   223k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7897:13): [True: 0, False: 223k]
  ------------------
 7898|   223k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7898:13): [True: 0, False: 0]
  ------------------
 7899|      0|            SCN_UNLIKELY_ATTR
 7900|       |            // clang-format off
 7901|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7902|       |            // clang-format on
 7903|      0|        }
 7904|       |
 7905|   223k|        Handler::on_localized();
 7906|   223k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9361|   781k|{
 9362|   781k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|   781k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|   781k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|   781k|{
 9251|   781k|#define SCN_VISIT(Type)                                                \
 9252|   781k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|   781k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|   781k|    }                                                                  \
 9255|   781k|    else {                                                             \
 9256|   781k|        return vis(monostate_val);                                     \
 9257|   781k|    }
 9258|       |
 9259|   781k|    monostate monostate_val{};
 9260|       |
 9261|   781k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 781k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 781k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 781k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 781k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 781k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 781k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 781k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 781k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 781k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 781k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 781k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 781k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 781k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 781k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 781k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 781k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 781k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|   251k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 251k, False: 530k]
  ------------------
 9305|   251k|            SCN_VISIT(float);
  ------------------
  |  | 9252|   251k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   251k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   251k|    }                                                                  \
  |  | 9255|   251k|    else {                                                             \
  |  | 9256|   251k|        return vis(monostate_val);                                     \
  |  | 9257|   251k|    }
  ------------------
 9306|   514k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 263k, False: 518k]
  ------------------
 9307|   514k|            SCN_VISIT(double);
  ------------------
  |  | 9252|   514k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   514k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   514k|    }                                                                  \
  |  | 9255|   514k|    else {                                                             \
  |  | 9256|   514k|        return vis(monostate_val);                                     \
  |  | 9257|   514k|    }
  ------------------
 9308|   781k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 267k, False: 514k]
  ------------------
 9309|   781k|            SCN_VISIT(long double);
  ------------------
  |  | 9252|   781k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   781k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   781k|    }                                                                  \
  |  | 9255|   781k|    else {                                                             \
  |  | 9256|   781k|        return vis(monostate_val);                                     \
  |  | 9257|   781k|    }
  ------------------
 9310|   781k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 781k]
  ------------------
 9311|   781k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|   781k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   781k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   781k|    }                                                                  \
  |  | 9255|   781k|    else {                                                             \
  |  | 9256|   781k|        return vis(monostate_val);                                     \
  |  | 9257|   781k|    }
  ------------------
 9312|   781k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 781k]
  ------------------
 9313|   781k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|   781k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   781k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   781k|    }                                                                  \
  |  | 9255|   781k|    else {                                                             \
  |  | 9256|   781k|        return vis(monostate_val);                                     \
  |  | 9257|   781k|    }
  ------------------
 9314|   781k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 781k]
  ------------------
 9315|   781k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|   781k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   781k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   781k|    }                                                                  \
  |  | 9255|   781k|    else {                                                             \
  |  | 9256|   781k|        return vis(monostate_val);                                     \
  |  | 9257|   781k|    }
  ------------------
 9316|   781k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 781k]
  ------------------
 9317|   781k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|   781k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   781k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   781k|    }                                                                  \
  |  | 9255|   781k|    else {                                                             \
  |  | 9256|   781k|        return vis(monostate_val);                                     \
  |  | 9257|   781k|    }
  ------------------
 9318|   781k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 781k]
  ------------------
 9319|   781k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|   781k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   781k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   781k|    }                                                                  \
  |  | 9255|   781k|    else {                                                             \
  |  | 9256|   781k|        return vis(monostate_val);                                     \
  |  | 9257|   781k|    }
  ------------------
 9320|   781k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 781k]
  ------------------
 9321|   781k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|   781k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   781k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   781k|    }                                                                  \
  |  | 9255|   781k|    else {                                                             \
  |  | 9256|   781k|        return vis(monostate_val);                                     \
  |  | 9257|   781k|    }
  ------------------
 9322|       |
 9323|   781k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 781k]
  ------------------
 9324|   781k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|   781k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|   781k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 781k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 781k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|   781k|            SCN_CLANG_POP
 9341|   781k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4350|  92.4k|    {
 4351|  92.4k|        return sync(0);
 4352|  92.4k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6193|  1.14M|    {
 6194|  1.14M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.14M]
  |  |  ------------------
  ------------------
 6195|      0|            return max_size();
 6196|      0|        }
 6197|       |
 6198|  1.14M|        return static_cast<std::size_t>(m_desc &
 6199|  1.14M|                                        ((1 << detail::packed_arg_bits) - 1));
 6200|  1.14M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6219|  2.29M|    {
 6220|  2.29M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6221|  2.29M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6161|  1.14M|    {
 6162|  1.14M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  986|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.14M]
  |  |  ------------------
  ------------------
 6163|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  985|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6164|      0|                return m_args[id];
 6165|      0|            }
 6166|      0|            return {};
 6167|      0|        }
 6168|       |
 6169|  1.14M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  986|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.14M]
  |  |  ------------------
  ------------------
 6170|      0|            return {};
 6171|      0|        }
 6172|       |
 6173|  1.14M|        const auto t = type(id);
 6174|  1.14M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  986|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.14M]
  |  |  ------------------
  ------------------
 6175|      0|            return {};
 6176|      0|        }
 6177|       |
 6178|  1.14M|        basic_scan_arg<Context> arg;
 6179|  1.14M|        arg.m_type = t;
 6180|  1.14M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6180:13): [True: 1.14M, False: 0]
  ------------------
 6181|  1.14M|            arg.m_value.ref_value = m_builtin_values[id];
 6182|  1.14M|        }
 6183|      0|        else {
 6184|      0|            arg.m_value = m_values[id];
 6185|      0|        }
 6186|  1.14M|        return arg;
 6187|  1.14M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6228|  1.14M|    {
 6229|       |        // First (0th) index is size, types start after that
 6230|  1.14M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6231|  1.14M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6232|  1.14M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6233|  1.14M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6223|  1.14M|    {
 6224|  1.14M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6225|  1.14M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5977|  2.17M|    {
 5978|  2.17M|        return m_type != detail::arg_type::none_type;
 5979|  2.17M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9361|   169k|{
 9362|   169k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|   169k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|   169k|{
 9251|   169k|#define SCN_VISIT(Type)                                                \
 9252|   169k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|   169k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|   169k|    }                                                                  \
 9255|   169k|    else {                                                             \
 9256|   169k|        return vis(monostate_val);                                     \
 9257|   169k|    }
 9258|       |
 9259|   169k|    monostate monostate_val{};
 9260|       |
 9261|   169k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 169k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 169k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 169k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 169k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 169k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 169k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 169k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 169k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 169k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 169k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 169k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 169k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 169k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 169k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 169k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 169k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 169k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|  48.9k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 48.9k, False: 120k]
  ------------------
 9305|  48.9k|            SCN_VISIT(float);
  ------------------
  |  | 9252|  48.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  48.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  48.9k|    }                                                                  \
  |  | 9255|  48.9k|    else {                                                             \
  |  | 9256|  48.9k|        return vis(monostate_val);                                     \
  |  | 9257|  48.9k|    }
  ------------------
 9306|   108k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 59.3k, False: 110k]
  ------------------
 9307|   108k|            SCN_VISIT(double);
  ------------------
  |  | 9252|   108k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   108k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   108k|    }                                                                  \
  |  | 9255|   108k|    else {                                                             \
  |  | 9256|   108k|        return vis(monostate_val);                                     \
  |  | 9257|   108k|    }
  ------------------
 9308|   169k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 61.2k, False: 108k]
  ------------------
 9309|   169k|            SCN_VISIT(long double);
  ------------------
  |  | 9252|   169k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   169k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   169k|    }                                                                  \
  |  | 9255|   169k|    else {                                                             \
  |  | 9256|   169k|        return vis(monostate_val);                                     \
  |  | 9257|   169k|    }
  ------------------
 9310|   169k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 169k]
  ------------------
 9311|   169k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|   169k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   169k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   169k|    }                                                                  \
  |  | 9255|   169k|    else {                                                             \
  |  | 9256|   169k|        return vis(monostate_val);                                     \
  |  | 9257|   169k|    }
  ------------------
 9312|   169k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 169k]
  ------------------
 9313|   169k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|   169k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   169k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   169k|    }                                                                  \
  |  | 9255|   169k|    else {                                                             \
  |  | 9256|   169k|        return vis(monostate_val);                                     \
  |  | 9257|   169k|    }
  ------------------
 9314|   169k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 169k]
  ------------------
 9315|   169k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|   169k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   169k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   169k|    }                                                                  \
  |  | 9255|   169k|    else {                                                             \
  |  | 9256|   169k|        return vis(monostate_val);                                     \
  |  | 9257|   169k|    }
  ------------------
 9316|   169k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 169k]
  ------------------
 9317|   169k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|   169k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   169k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   169k|    }                                                                  \
  |  | 9255|   169k|    else {                                                             \
  |  | 9256|   169k|        return vis(monostate_val);                                     \
  |  | 9257|   169k|    }
  ------------------
 9318|   169k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 169k]
  ------------------
 9319|   169k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|   169k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   169k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   169k|    }                                                                  \
  |  | 9255|   169k|    else {                                                             \
  |  | 9256|   169k|        return vis(monostate_val);                                     \
  |  | 9257|   169k|    }
  ------------------
 9320|   169k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 169k]
  ------------------
 9321|   169k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|   169k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   169k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   169k|    }                                                                  \
  |  | 9255|   169k|    else {                                                             \
  |  | 9256|   169k|        return vis(monostate_val);                                     \
  |  | 9257|   169k|    }
  ------------------
 9322|       |
 9323|   169k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 169k]
  ------------------
 9324|   169k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|   169k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|   169k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 169k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 169k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|   169k|            SCN_CLANG_POP
 9341|   169k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6022|  3.09M|{
 6023|  3.09M|    return arg.m_type;
 6024|  3.09M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6034|  1.25M|{
 6035|  1.25M|    return arg.m_value;
 6036|  1.25M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8962|   459k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1055|   459k|    static_cast<    \
  |  | 1056|   459k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8963|   459k|    {
 8964|   459k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6292|   460k|        : m_format{format},
 6293|   460k|          m_next_arg_id{next_arg_id},
 6294|   460k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|   460k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|   460k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|   460k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|   460k|    {
 6300|   460k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3073|   460k|    {
 3074|   460k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3075|   460k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3039|   460k|    {
 3040|   460k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1057|   460k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3041|   460k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|   460k|{
 7809|   460k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|   460k|    handler.check_args_exhausted();
 7811|   460k|    return handler.get_error();
 7812|   460k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|   460k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|   460k|    auto begin = format.data();
 7777|   460k|    auto it = begin;
 7778|   460k|    const auto end = format.data() + format.size();
 7779|       |
 7780|   777k|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 460k, False: 317k]
  ------------------
 7781|   460k|        const auto ch = *it++;
 7782|   460k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 460k, False: 0]
  ------------------
 7783|   460k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|   460k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|   460k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 142k, False: 317k]
  ------------------
 7787|   142k|                return;
 7788|   142k|            }
 7789|   460k|        }
 7790|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 0, False: 0]
  ------------------
 7791|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7792|      0|                handler.on_error("Unmatched '}' in format string");
 7793|      0|                return;
 7794|      0|            }
 7795|       |
 7796|      0|            handler.on_literal_text(begin, it);
 7797|      0|            begin = ++it;
 7798|      0|        }
 7799|   460k|    }
 7800|       |
 7801|   317k|    handler.on_literal_text(begin, end);
 7802|   317k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7705|   460k|{
 7706|   460k|    struct id_adapter {
 7707|   460k|        constexpr void operator()()
 7708|   460k|        {
 7709|   460k|            arg_id = handler.on_arg_id();
 7710|   460k|        }
 7711|   460k|        constexpr void operator()(std::size_t id)
 7712|   460k|        {
 7713|   460k|            arg_id = handler.on_arg_id(id);
 7714|   460k|        }
 7715|       |
 7716|   460k|        constexpr void on_error(const char* msg)
 7717|   460k|        {
 7718|   460k|            SCN_UNLIKELY_ATTR
 7719|   460k|            handler.on_error(msg);
 7720|   460k|        }
 7721|       |
 7722|   460k|        Handler& handler;
 7723|   460k|        std::size_t arg_id;
 7724|   460k|    };
 7725|       |
 7726|   460k|    ++begin;
 7727|   460k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   460k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 460k]
  |  |  ------------------
  ------------------
 7728|      0|        handler.on_error("Unexpected end of replacement field");
 7729|      0|        return begin;
 7730|      0|    }
 7731|       |
 7732|   460k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 0, False: 460k]
  ------------------
 7733|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|      0|    }
 7735|   460k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 0, False: 460k]
  ------------------
 7736|      0|        handler.on_literal_text(begin, begin + 1);
 7737|      0|    }
 7738|   460k|    else {
 7739|   460k|        auto adapter = id_adapter{handler, 0};
 7740|   460k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|   460k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   460k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 460k]
  |  |  ------------------
  ------------------
 7743|      0|            handler.on_error("Missing '}' in format string");
 7744|      0|            return begin;
 7745|      0|        }
 7746|       |
 7747|   460k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 0, False: 460k]
  ------------------
 7748|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|      0|        }
 7750|   460k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 460k, False: 0]
  ------------------
 7751|   460k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|   460k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 460k]
  |  |  ------------------
  ------------------
 7752|      0|                handler.on_error("Unexpected end of replacement field");
 7753|      0|                return begin;
 7754|      0|            }
 7755|   460k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|   460k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|   920k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 460k]
  |  |  |  Branch (986:45): [True: 0, False: 460k]
  |  |  |  Branch (986:45): [True: 0, False: 460k]
  |  |  ------------------
  ------------------
 7757|      0|                handler.on_error("Unknown format specifier");
 7758|      0|                return begin;
 7759|      0|            }
 7760|   460k|        }
 7761|      0|        else {
 7762|      0|            SCN_UNLIKELY_ATTR
 7763|      0|            handler.on_error("Missing '}' in format string");
 7764|      0|            return begin;
 7765|      0|        }
 7766|   460k|    }
 7767|   460k|    return begin + 1;
 7768|   460k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8861|   919k|    {
 8862|   919k|        return m_args.get(id);
 8863|   919k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6327|   919k|    {
 6328|   919k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  986|   919k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 919k]
  |  |  ------------------
  ------------------
 6329|      0|            on_error(
 6330|      0|                "Cannot switch from manual to automatic argument indexing");
 6331|      0|            return 0;
 6332|      0|        }
 6333|       |
 6334|   919k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6335|   919k|        do_check_arg_id(id);
 6336|   919k|        return id;
 6337|   919k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6821|   919k|{
 6822|   919k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6822:9): [Folded - Ignored]
  ------------------
 6823|   919k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  241|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6823:10): [Folded - Ignored]
  |  Branch (6823:22): [Folded - Ignored]
  ------------------
 6824|       |        // The cast below will cause an error on gcc pre-12
 6825|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6826|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6826:13): [True: 0, False: 0]
  ------------------
 6827|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6828|      0|            SCN_UNLIKELY_ATTR
 6829|      0|            on_error("Argument not found");
 6830|      0|        }
 6831|      0|    }
 6832|   919k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|   460k|{
 7207|   460k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   460k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   460k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|   460k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 460k, False: 0]
  |  Branch (7208:26): [True: 0, False: 460k]
  ------------------
 7209|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|      0|    }
 7211|       |
 7212|   460k|    handler();
 7213|   460k|    return begin;
 7214|   460k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|   460k|        {
 7709|   460k|            arg_id = handler.on_arg_id();
 7710|   460k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6322|   919k|    {
 6323|   919k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6324|   919k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4689|   629k|{
 4690|   629k|    if (is_contiguous()) {
  ------------------
  |  Branch (4690:9): [True: 0, False: 629k]
  ------------------
 4691|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4692|      0|                                ranges::default_sentinel};
 4693|      0|    }
 4694|   629k|    return ranges::subrange{forward_iterator{this, 0},
 4695|   629k|                            ranges::default_sentinel};
 4696|   629k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4452|   629k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4453|   629k|    {
 4454|   629k|        SCN_EXPECT(parent);
  ------------------
  |  | 1051|   629k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   629k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4455|   629k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1051|   629k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   629k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   629k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6311|  1.83M|    {
 6312|  1.83M|        return m_format.data();
 6313|  1.83M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7887|   460k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1057|   460k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7888|   460k|    {
 7889|   460k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1051|   460k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   460k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7890|   460k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7621|   460k|{
 7622|   460k|    auto do_presentation = [&]() -> const CharT* {
 7623|   460k|        if (*begin == CharT{'['}) {
 7624|   460k|            auto set = parse_presentation_set(begin, end, handler);
 7625|   460k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7626|       |                // clang-format off
 7627|   460k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|   460k|                return begin;
 7630|   460k|            }
 7631|   460k|            handler.on_character_set_string(set);
 7632|   460k|            return begin;
 7633|   460k|        }
 7634|   460k|        if (*begin == CharT{'/'}) {
 7635|   460k|            return parse_presentation_regex(begin, end, handler);
 7636|   460k|        }
 7637|   460k|        presentation_type type = parse_presentation_type(*begin++);
 7638|   460k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7639|   460k|            handler.on_error("Invalid type specifier in format string");
 7640|   460k|            return begin;
 7641|   460k|        }
 7642|   460k|        handler.on_type(type);
 7643|   460k|        return begin;
 7644|   460k|    };
 7645|       |
 7646|   460k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7646:9): [True: 460k, False: 0]
  |  Branch (7646:28): [True: 460k, False: 0]
  ------------------
 7647|   460k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7647:9): [True: 460k, False: 0]
  |  Branch (7647:36): [True: 347k, False: 112k]
  ------------------
 7648|   347k|        return do_presentation();
 7649|   347k|    }
 7650|       |
 7651|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7652|      0|        handler.on_error("Unexpected end of format string");
 7653|      0|        return begin;
 7654|      0|    }
 7655|       |
 7656|   112k|    begin = parse_align(begin, end, handler);
 7657|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7658|      0|        handler.on_error("Unexpected end of format string");
 7659|      0|        return begin;
 7660|      0|    }
 7661|       |
 7662|   112k|    begin = parse_width(begin, end, handler);
 7663|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7664|      0|        handler.on_error("Unexpected end of format string");
 7665|      0|        return begin;
 7666|      0|    }
 7667|       |
 7668|   112k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7668:9): [True: 0, False: 112k]
  ------------------
 7669|      0|        ++begin;
 7670|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7671|      0|            handler.on_error("Unexpected end of format string");
 7672|      0|            return begin;
 7673|      0|        }
 7674|      0|        begin = parse_precision(begin, end, handler);
 7675|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7676|      0|            handler.on_error("Unexpected end of format string");
 7677|      0|            return begin;
 7678|      0|        }
 7679|      0|    }
 7680|       |
 7681|   112k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7681:9): [True: 112k, False: 0]
  ------------------
 7682|   112k|        handler.on_localized();
 7683|   112k|        ++begin;
 7684|   112k|    }
 7685|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7686|      0|        handler.on_error("Unexpected end of format string");
 7687|      0|        return begin;
 7688|      0|    }
 7689|       |
 7690|   112k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7690:9): [True: 112k, False: 0]
  |  Branch (7690:25): [True: 0, False: 112k]
  ------------------
 7691|      0|        do_presentation();
 7692|      0|    }
 7693|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7694|      0|        handler.on_error("Unexpected end of format string");
 7695|      0|        return begin;
 7696|      0|    }
 7697|       |
 7698|   112k|    return begin;
 7699|   112k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7270|   919k|{
 7271|   919k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7271:13): [True: 693k, False: 225k]
  |  Branch (7271:33): [True: 693k, False: 0]
  ------------------
 7272|   919k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7272:13): [True: 225k, False: 0]
  |  Branch (7272:33): [True: 225k, False: 0]
  ------------------
 7273|   919k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7622|   347k|    auto do_presentation = [&]() -> const CharT* {
 7623|   347k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7623:13): [True: 0, False: 347k]
  ------------------
 7624|      0|            auto set = parse_presentation_set(begin, end, handler);
 7625|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7626|       |                // clang-format off
 7627|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|      0|                return begin;
 7630|      0|            }
 7631|      0|            handler.on_character_set_string(set);
 7632|      0|            return begin;
 7633|      0|        }
 7634|   347k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7634:13): [True: 0, False: 347k]
  ------------------
 7635|      0|            return parse_presentation_regex(begin, end, handler);
 7636|      0|        }
 7637|   347k|        presentation_type type = parse_presentation_type(*begin++);
 7638|   347k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  986|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 347k]
  |  |  ------------------
  ------------------
 7639|      0|            handler.on_error("Invalid type specifier in format string");
 7640|      0|            return begin;
 7641|      0|        }
 7642|   347k|        handler.on_type(type);
 7643|   347k|        return begin;
 7644|   347k|    };
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7218|   693k|{
 7219|   693k|    switch (type) {
 7220|      0|        case 'b':
  ------------------
  |  Branch (7220:9): [True: 0, False: 693k]
  ------------------
 7221|      0|        case 'B':
  ------------------
  |  Branch (7221:9): [True: 0, False: 693k]
  ------------------
 7222|      0|            return presentation_type::int_binary;
 7223|      0|        case 'd':
  ------------------
  |  Branch (7223:9): [True: 0, False: 693k]
  ------------------
 7224|      0|            return presentation_type::int_decimal;
 7225|      0|        case 'i':
  ------------------
  |  Branch (7225:9): [True: 0, False: 693k]
  ------------------
 7226|      0|            return presentation_type::int_generic;
 7227|      0|        case 'u':
  ------------------
  |  Branch (7227:9): [True: 0, False: 693k]
  ------------------
 7228|      0|            return presentation_type::int_unsigned_decimal;
 7229|      0|        case 'o':
  ------------------
  |  Branch (7229:9): [True: 0, False: 693k]
  ------------------
 7230|      0|            return presentation_type::int_octal;
 7231|      0|        case 'x':
  ------------------
  |  Branch (7231:9): [True: 0, False: 693k]
  ------------------
 7232|      0|        case 'X':
  ------------------
  |  Branch (7232:9): [True: 0, False: 693k]
  ------------------
 7233|      0|            return presentation_type::int_hex;
 7234|      0|        case 'r':
  ------------------
  |  Branch (7234:9): [True: 0, False: 693k]
  ------------------
 7235|      0|        case 'R':
  ------------------
  |  Branch (7235:9): [True: 0, False: 693k]
  ------------------
 7236|      0|            return presentation_type::int_arbitrary_base;
 7237|   249k|        case 'a':
  ------------------
  |  Branch (7237:9): [True: 249k, False: 444k]
  ------------------
 7238|   249k|        case 'A':
  ------------------
  |  Branch (7238:9): [True: 0, False: 693k]
  ------------------
 7239|   249k|            return presentation_type::float_hex;
 7240|  59.4k|        case 'e':
  ------------------
  |  Branch (7240:9): [True: 59.4k, False: 634k]
  ------------------
 7241|  59.4k|        case 'E':
  ------------------
  |  Branch (7241:9): [True: 0, False: 693k]
  ------------------
 7242|  59.4k|            return presentation_type::float_scientific;
 7243|   175k|        case 'f':
  ------------------
  |  Branch (7243:9): [True: 175k, False: 518k]
  ------------------
 7244|   175k|        case 'F':
  ------------------
  |  Branch (7244:9): [True: 0, False: 693k]
  ------------------
 7245|   175k|            return presentation_type::float_fixed;
 7246|   209k|        case 'g':
  ------------------
  |  Branch (7246:9): [True: 209k, False: 484k]
  ------------------
 7247|   209k|        case 'G':
  ------------------
  |  Branch (7247:9): [True: 0, False: 693k]
  ------------------
 7248|   209k|            return presentation_type::float_general;
 7249|      0|        case 's':
  ------------------
  |  Branch (7249:9): [True: 0, False: 693k]
  ------------------
 7250|      0|            return presentation_type::string;
 7251|      0|        case 'c':
  ------------------
  |  Branch (7251:9): [True: 0, False: 693k]
  ------------------
 7252|      0|            return presentation_type::character;
 7253|      0|        case '?':
  ------------------
  |  Branch (7253:9): [True: 0, False: 693k]
  ------------------
 7254|      0|            return presentation_type::escaped_character;
 7255|      0|        case 'p':
  ------------------
  |  Branch (7255:9): [True: 0, False: 693k]
  ------------------
 7256|      0|            return presentation_type::pointer;
 7257|      0|        case '[':
  ------------------
  |  Branch (7257:9): [True: 0, False: 693k]
  ------------------
 7258|      0|        case '/':
  ------------------
  |  Branch (7258:9): [True: 0, False: 693k]
  ------------------
 7259|       |            // Should be handled by parse_presentation_set and
 7260|       |            // parse_presentation_regex
 7261|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7262|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7263|      0|        default:
  ------------------
  |  Branch (7263:9): [True: 0, False: 693k]
  ------------------
 7264|      0|            return presentation_type::none;
 7265|   693k|    }
 7266|   693k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7295|   112k|{
 7296|   112k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7297|       |
 7298|   112k|    auto check_align = [](wchar_t ch) {
 7299|   112k|        switch (ch) {
 7300|   112k|            case L'<':
 7301|   112k|                return align_type::left;
 7302|   112k|            case L'>':
 7303|   112k|                return align_type::right;
 7304|   112k|            case L'^':
 7305|   112k|                return align_type::center;
 7306|   112k|            default:
 7307|   112k|                return align_type::none;
 7308|   112k|        }
 7309|   112k|    };
 7310|       |
 7311|   112k|    auto potential_fill_len = code_point_length(begin, end);
 7312|   112k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  986|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 112k]
  |  |  |  Branch (986:45): [True: 0, False: 112k]
  |  |  |  Branch (986:45): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7313|   112k|                     std::distance(begin, end) < potential_fill_len)) {
 7314|      0|        handler.on_error("Invalid encoding in fill character");
 7315|      0|        return begin;
 7316|      0|    }
 7317|       |
 7318|   112k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7319|       |
 7320|   112k|    auto potential_fill = std::basic_string_view<CharT>{
 7321|   112k|        begin, static_cast<size_t>(potential_fill_len)};
 7322|   112k|    const auto begin_before_fill = begin;
 7323|   112k|    begin += potential_fill_len;
 7324|       |
 7325|   112k|    if (begin == end) {
  ------------------
  |  Branch (7325:9): [True: 0, False: 112k]
  ------------------
 7326|      0|        return begin_before_fill;
 7327|      0|    }
 7328|       |
 7329|   112k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7330|   112k|    const auto begin_after_fill = begin;
 7331|   112k|    ++begin;
 7332|       |
 7333|   112k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7333:9): [True: 112k, False: 0]
  ------------------
 7334|   112k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  986|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7335|      0|            handler.on_error("Invalid fill character '{' in format string");
 7336|      0|            return begin;
 7337|      0|        }
 7338|   112k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7338:13): [True: 0, False: 112k]
  ------------------
 7339|      0|            return begin_before_fill;
 7340|      0|        }
 7341|   112k|    }
 7342|       |
 7343|   112k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7343:9): [True: 112k, False: 0]
  ------------------
 7344|   112k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7344:13): [True: 0, False: 112k]
  ------------------
 7345|      0|            handler.on_align(potential_align_on_fill);
 7346|      0|            return begin_after_fill;
 7347|      0|        }
 7348|   112k|        return begin_before_fill;
 7349|   112k|    }
 7350|       |
 7351|      0|    handler.on_fill(potential_fill);
 7352|      0|    handler.on_align(potential_align_after_fill);
 7353|      0|    return begin;
 7354|   112k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7277|   225k|{
 7278|   225k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   225k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   225k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7279|   225k|    if constexpr (sizeof(CharT) != 1) {
 7280|   225k|        return 1;
 7281|       |    }
 7282|       |    else {
 7283|       |        const auto lengths =
 7284|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7285|       |            "\3\4";
 7286|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7287|       |        return len;
 7288|       |    }
 7289|   225k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7298|   225k|    auto check_align = [](wchar_t ch) {
 7299|   225k|        switch (ch) {
 7300|      0|            case L'<':
  ------------------
  |  Branch (7300:13): [True: 0, False: 225k]
  ------------------
 7301|      0|                return align_type::left;
 7302|      0|            case L'>':
  ------------------
  |  Branch (7302:13): [True: 0, False: 225k]
  ------------------
 7303|      0|                return align_type::right;
 7304|      0|            case L'^':
  ------------------
  |  Branch (7304:13): [True: 0, False: 225k]
  ------------------
 7305|      0|                return align_type::center;
 7306|   225k|            default:
  ------------------
  |  Branch (7306:13): [True: 225k, False: 0]
  ------------------
 7307|   225k|                return align_type::none;
 7308|   225k|        }
 7309|   225k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7360|   112k|{
 7361|   112k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7362|       |
 7363|   112k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7363:9): [True: 112k, False: 0]
  |  Branch (7363:33): [True: 0, False: 112k]
  ------------------
 7364|      0|        int width = parse_simple_int(begin, end);
 7365|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  985|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7366|      0|            handler.on_width(width);
 7367|      0|        }
 7368|      0|        else {
 7369|      0|            handler.on_error("Invalid field width");
 7370|      0|            return begin;
 7371|      0|        }
 7372|      0|    }
 7373|   112k|    return begin;
 7374|   112k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7893|   112k|    {
 7894|   112k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7895|   112k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7895:13): [True: 112k, False: 0]
  ------------------
 7896|   112k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7896:13): [True: 112k, False: 0]
  ------------------
 7897|   112k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7897:13): [True: 0, False: 112k]
  ------------------
 7898|   112k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7898:13): [True: 0, False: 0]
  ------------------
 7899|      0|            SCN_UNLIKELY_ATTR
 7900|       |            // clang-format off
 7901|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7902|       |            // clang-format on
 7903|      0|        }
 7904|       |
 7905|   112k|        Handler::on_localized();
 7906|   112k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9361|   460k|{
 9362|   460k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|   460k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|   460k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|   460k|{
 9251|   460k|#define SCN_VISIT(Type)                                                \
 9252|   460k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|   460k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|   460k|    }                                                                  \
 9255|   460k|    else {                                                             \
 9256|   460k|        return vis(monostate_val);                                     \
 9257|   460k|    }
 9258|       |
 9259|   460k|    monostate monostate_val{};
 9260|       |
 9261|   460k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 460k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 460k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 460k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 460k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 460k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 460k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 460k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 460k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 460k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 460k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 460k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 460k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 460k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 460k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 460k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 460k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 460k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|   143k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 143k, False: 316k]
  ------------------
 9305|   143k|            SCN_VISIT(float);
  ------------------
  |  | 9252|   143k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   143k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   143k|    }                                                                  \
  |  | 9255|   143k|    else {                                                             \
  |  | 9256|   143k|        return vis(monostate_val);                                     \
  |  | 9257|   143k|    }
  ------------------
 9306|   300k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 157k, False: 302k]
  ------------------
 9307|   300k|            SCN_VISIT(double);
  ------------------
  |  | 9252|   300k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   300k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   300k|    }                                                                  \
  |  | 9255|   300k|    else {                                                             \
  |  | 9256|   300k|        return vis(monostate_val);                                     \
  |  | 9257|   300k|    }
  ------------------
 9308|   460k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 159k, False: 300k]
  ------------------
 9309|   460k|            SCN_VISIT(long double);
  ------------------
  |  | 9252|   460k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   460k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   460k|    }                                                                  \
  |  | 9255|   460k|    else {                                                             \
  |  | 9256|   460k|        return vis(monostate_val);                                     \
  |  | 9257|   460k|    }
  ------------------
 9310|   460k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 460k]
  ------------------
 9311|   460k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|   460k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   460k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   460k|    }                                                                  \
  |  | 9255|   460k|    else {                                                             \
  |  | 9256|   460k|        return vis(monostate_val);                                     \
  |  | 9257|   460k|    }
  ------------------
 9312|   460k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 460k]
  ------------------
 9313|   460k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|   460k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   460k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   460k|    }                                                                  \
  |  | 9255|   460k|    else {                                                             \
  |  | 9256|   460k|        return vis(monostate_val);                                     \
  |  | 9257|   460k|    }
  ------------------
 9314|   460k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 460k]
  ------------------
 9315|   460k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|   460k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   460k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   460k|    }                                                                  \
  |  | 9255|   460k|    else {                                                             \
  |  | 9256|   460k|        return vis(monostate_val);                                     \
  |  | 9257|   460k|    }
  ------------------
 9316|   460k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 460k]
  ------------------
 9317|   460k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|   460k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   460k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   460k|    }                                                                  \
  |  | 9255|   460k|    else {                                                             \
  |  | 9256|   460k|        return vis(monostate_val);                                     \
  |  | 9257|   460k|    }
  ------------------
 9318|   460k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 460k]
  ------------------
 9319|   460k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|   460k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   460k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   460k|    }                                                                  \
  |  | 9255|   460k|    else {                                                             \
  |  | 9256|   460k|        return vis(monostate_val);                                     \
  |  | 9257|   460k|    }
  ------------------
 9320|   460k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 460k]
  ------------------
 9321|   460k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|   460k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   460k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   460k|    }                                                                  \
  |  | 9255|   460k|    else {                                                             \
  |  | 9256|   460k|        return vis(monostate_val);                                     \
  |  | 9257|   460k|    }
  ------------------
 9322|       |
 9323|   460k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 460k]
  ------------------
 9324|   460k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|   460k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|   460k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 460k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 460k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|   460k|            SCN_CLANG_POP
 9341|   460k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9361|   169k|{
 9362|   169k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|   169k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|   169k|{
 9251|   169k|#define SCN_VISIT(Type)                                                \
 9252|   169k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|   169k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|   169k|    }                                                                  \
 9255|   169k|    else {                                                             \
 9256|   169k|        return vis(monostate_val);                                     \
 9257|   169k|    }
 9258|       |
 9259|   169k|    monostate monostate_val{};
 9260|       |
 9261|   169k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 169k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 169k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 169k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 169k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 169k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 169k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 169k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 169k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 169k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 169k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 169k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 169k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 169k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 169k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 169k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 169k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 169k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|  48.8k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 48.8k, False: 120k]
  ------------------
 9305|  48.8k|            SCN_VISIT(float);
  ------------------
  |  | 9252|  48.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|  48.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|  48.8k|    }                                                                  \
  |  | 9255|  48.8k|    else {                                                             \
  |  | 9256|  48.8k|        return vis(monostate_val);                                     \
  |  | 9257|  48.8k|    }
  ------------------
 9306|   108k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 59.2k, False: 110k]
  ------------------
 9307|   108k|            SCN_VISIT(double);
  ------------------
  |  | 9252|   108k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   108k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   108k|    }                                                                  \
  |  | 9255|   108k|    else {                                                             \
  |  | 9256|   108k|        return vis(monostate_val);                                     \
  |  | 9257|   108k|    }
  ------------------
 9308|   169k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 61.1k, False: 108k]
  ------------------
 9309|   169k|            SCN_VISIT(long double);
  ------------------
  |  | 9252|   169k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   169k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   169k|    }                                                                  \
  |  | 9255|   169k|    else {                                                             \
  |  | 9256|   169k|        return vis(monostate_val);                                     \
  |  | 9257|   169k|    }
  ------------------
 9310|   169k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 169k]
  ------------------
 9311|   169k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|   169k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   169k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   169k|    }                                                                  \
  |  | 9255|   169k|    else {                                                             \
  |  | 9256|   169k|        return vis(monostate_val);                                     \
  |  | 9257|   169k|    }
  ------------------
 9312|   169k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 169k]
  ------------------
 9313|   169k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|   169k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   169k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   169k|    }                                                                  \
  |  | 9255|   169k|    else {                                                             \
  |  | 9256|   169k|        return vis(monostate_val);                                     \
  |  | 9257|   169k|    }
  ------------------
 9314|   169k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 169k]
  ------------------
 9315|   169k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|   169k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   169k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   169k|    }                                                                  \
  |  | 9255|   169k|    else {                                                             \
  |  | 9256|   169k|        return vis(monostate_val);                                     \
  |  | 9257|   169k|    }
  ------------------
 9316|   169k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 169k]
  ------------------
 9317|   169k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|   169k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   169k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   169k|    }                                                                  \
  |  | 9255|   169k|    else {                                                             \
  |  | 9256|   169k|        return vis(monostate_val);                                     \
  |  | 9257|   169k|    }
  ------------------
 9318|   169k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 169k]
  ------------------
 9319|   169k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|   169k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   169k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   169k|    }                                                                  \
  |  | 9255|   169k|    else {                                                             \
  |  | 9256|   169k|        return vis(monostate_val);                                     \
  |  | 9257|   169k|    }
  ------------------
 9320|   169k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 169k]
  ------------------
 9321|   169k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|   169k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   169k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   169k|    }                                                                  \
  |  | 9255|   169k|    else {                                                             \
  |  | 9256|   169k|        return vis(monostate_val);                                     \
  |  | 9257|   169k|    }
  ------------------
 9322|       |
 9323|   169k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 169k]
  ------------------
 9324|   169k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|   169k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|   169k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 169k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 169k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|   169k|            SCN_CLANG_POP
 9341|   169k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6292|   459k|        : m_format{format},
 6293|   459k|          m_next_arg_id{next_arg_id},
 6294|   459k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6294:27): [Folded - Ignored]
  ------------------
 6295|   459k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6295:27): [Folded - Ignored]
  ------------------
 6296|       |          m_is_borrowed(
 6297|   459k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6297:16): [Folded - Ignored]
  |  Branch (6297:41): [Folded - Ignored]
  ------------------
 6298|   459k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6298:15): [Folded - Ignored]
  ------------------
 6299|   459k|    {
 6300|   459k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7808|   459k|{
 7809|   459k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7810|   459k|    handler.check_args_exhausted();
 7811|   459k|    return handler.get_error();
 7812|   459k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7773|   459k|{
 7774|       |    // TODO: memchr fast path with a larger (> 32) format string
 7775|       |
 7776|   459k|    auto begin = format.data();
 7777|   459k|    auto it = begin;
 7778|   459k|    const auto end = format.data() + format.size();
 7779|       |
 7780|   777k|    while (it != end) {
  ------------------
  |  Branch (7780:12): [True: 459k, False: 317k]
  ------------------
 7781|   459k|        const auto ch = *it++;
 7782|   459k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7782:13): [True: 459k, False: 0]
  ------------------
 7783|   459k|            handler.on_literal_text(begin, it - 1);
 7784|       |
 7785|   459k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7786|   459k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7786:17): [True: 142k, False: 317k]
  ------------------
 7787|   142k|                return;
 7788|   142k|            }
 7789|   459k|        }
 7790|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7790:18): [True: 0, False: 0]
  ------------------
 7791|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7792|      0|                handler.on_error("Unmatched '}' in format string");
 7793|      0|                return;
 7794|      0|            }
 7795|       |
 7796|      0|            handler.on_literal_text(begin, it);
 7797|      0|            begin = ++it;
 7798|      0|        }
 7799|   459k|    }
 7800|       |
 7801|   317k|    handler.on_literal_text(begin, end);
 7802|   317k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 9000|   317k|    {
 9001|   317k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|   317k|    static_cast<    \
  |  | 1056|   317k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9002|   317k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7705|   459k|{
 7706|   459k|    struct id_adapter {
 7707|   459k|        constexpr void operator()()
 7708|   459k|        {
 7709|   459k|            arg_id = handler.on_arg_id();
 7710|   459k|        }
 7711|   459k|        constexpr void operator()(std::size_t id)
 7712|   459k|        {
 7713|   459k|            arg_id = handler.on_arg_id(id);
 7714|   459k|        }
 7715|       |
 7716|   459k|        constexpr void on_error(const char* msg)
 7717|   459k|        {
 7718|   459k|            SCN_UNLIKELY_ATTR
 7719|   459k|            handler.on_error(msg);
 7720|   459k|        }
 7721|       |
 7722|   459k|        Handler& handler;
 7723|   459k|        std::size_t arg_id;
 7724|   459k|    };
 7725|       |
 7726|   459k|    ++begin;
 7727|   459k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   459k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 459k]
  |  |  ------------------
  ------------------
 7728|      0|        handler.on_error("Unexpected end of replacement field");
 7729|      0|        return begin;
 7730|      0|    }
 7731|       |
 7732|   459k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7732:9): [True: 0, False: 459k]
  ------------------
 7733|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7734|      0|    }
 7735|   459k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7735:14): [True: 0, False: 459k]
  ------------------
 7736|      0|        handler.on_literal_text(begin, begin + 1);
 7737|      0|    }
 7738|   459k|    else {
 7739|   459k|        auto adapter = id_adapter{handler, 0};
 7740|   459k|        begin = parse_arg_id(begin, end, adapter);
 7741|       |
 7742|   459k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   459k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 459k]
  |  |  ------------------
  ------------------
 7743|      0|            handler.on_error("Missing '}' in format string");
 7744|      0|            return begin;
 7745|      0|        }
 7746|       |
 7747|   459k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7747:13): [True: 0, False: 459k]
  ------------------
 7748|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7749|      0|        }
 7750|   459k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7750:18): [True: 459k, False: 0]
  ------------------
 7751|   459k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  986|   459k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 459k]
  |  |  ------------------
  ------------------
 7752|      0|                handler.on_error("Unexpected end of replacement field");
 7753|      0|                return begin;
 7754|      0|            }
 7755|   459k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7756|   459k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  986|   919k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 459k]
  |  |  |  Branch (986:45): [True: 0, False: 459k]
  |  |  |  Branch (986:45): [True: 0, False: 459k]
  |  |  ------------------
  ------------------
 7757|      0|                handler.on_error("Unknown format specifier");
 7758|      0|                return begin;
 7759|      0|            }
 7760|   459k|        }
 7761|      0|        else {
 7762|      0|            SCN_UNLIKELY_ATTR
 7763|      0|            handler.on_error("Missing '}' in format string");
 7764|      0|            return begin;
 7765|      0|        }
 7766|   459k|    }
 7767|   459k|    return begin + 1;
 7768|   459k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7206|   459k|{
 7207|   459k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   459k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   459k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7208|   459k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7208:9): [True: 459k, False: 0]
  |  Branch (7208:26): [True: 0, False: 459k]
  ------------------
 7209|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7210|      0|    }
 7211|       |
 7212|   459k|    handler();
 7213|   459k|    return begin;
 7214|   459k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7708|   459k|        {
 7709|   459k|            arg_id = handler.on_arg_id();
 7710|   459k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7887|   459k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1057|   459k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7888|   459k|    {
 7889|   459k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1051|   459k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   459k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7890|   459k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7621|   459k|{
 7622|   459k|    auto do_presentation = [&]() -> const CharT* {
 7623|   459k|        if (*begin == CharT{'['}) {
 7624|   459k|            auto set = parse_presentation_set(begin, end, handler);
 7625|   459k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7626|       |                // clang-format off
 7627|   459k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|   459k|                return begin;
 7630|   459k|            }
 7631|   459k|            handler.on_character_set_string(set);
 7632|   459k|            return begin;
 7633|   459k|        }
 7634|   459k|        if (*begin == CharT{'/'}) {
 7635|   459k|            return parse_presentation_regex(begin, end, handler);
 7636|   459k|        }
 7637|   459k|        presentation_type type = parse_presentation_type(*begin++);
 7638|   459k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7639|   459k|            handler.on_error("Invalid type specifier in format string");
 7640|   459k|            return begin;
 7641|   459k|        }
 7642|   459k|        handler.on_type(type);
 7643|   459k|        return begin;
 7644|   459k|    };
 7645|       |
 7646|   459k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7646:9): [True: 459k, False: 0]
  |  Branch (7646:28): [True: 459k, False: 0]
  ------------------
 7647|   459k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7647:9): [True: 459k, False: 0]
  |  Branch (7647:36): [True: 346k, False: 112k]
  ------------------
 7648|   346k|        return do_presentation();
 7649|   346k|    }
 7650|       |
 7651|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7652|      0|        handler.on_error("Unexpected end of format string");
 7653|      0|        return begin;
 7654|      0|    }
 7655|       |
 7656|   112k|    begin = parse_align(begin, end, handler);
 7657|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7658|      0|        handler.on_error("Unexpected end of format string");
 7659|      0|        return begin;
 7660|      0|    }
 7661|       |
 7662|   112k|    begin = parse_width(begin, end, handler);
 7663|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7664|      0|        handler.on_error("Unexpected end of format string");
 7665|      0|        return begin;
 7666|      0|    }
 7667|       |
 7668|   112k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7668:9): [True: 0, False: 112k]
  ------------------
 7669|      0|        ++begin;
 7670|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7671|      0|            handler.on_error("Unexpected end of format string");
 7672|      0|            return begin;
 7673|      0|        }
 7674|      0|        begin = parse_precision(begin, end, handler);
 7675|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7676|      0|            handler.on_error("Unexpected end of format string");
 7677|      0|            return begin;
 7678|      0|        }
 7679|      0|    }
 7680|       |
 7681|   112k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7681:9): [True: 112k, False: 0]
  ------------------
 7682|   112k|        handler.on_localized();
 7683|   112k|        ++begin;
 7684|   112k|    }
 7685|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7686|      0|        handler.on_error("Unexpected end of format string");
 7687|      0|        return begin;
 7688|      0|    }
 7689|       |
 7690|   112k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7690:9): [True: 112k, False: 0]
  |  Branch (7690:25): [True: 0, False: 112k]
  ------------------
 7691|      0|        do_presentation();
 7692|      0|    }
 7693|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  986|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7694|      0|        handler.on_error("Unexpected end of format string");
 7695|      0|        return begin;
 7696|      0|    }
 7697|       |
 7698|   112k|    return begin;
 7699|   112k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7622|   346k|    auto do_presentation = [&]() -> const CharT* {
 7623|   346k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7623:13): [True: 0, False: 346k]
  ------------------
 7624|      0|            auto set = parse_presentation_set(begin, end, handler);
 7625|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7626|       |                // clang-format off
 7627|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7628|       |                // clang-format on
 7629|      0|                return begin;
 7630|      0|            }
 7631|      0|            handler.on_character_set_string(set);
 7632|      0|            return begin;
 7633|      0|        }
 7634|   346k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7634:13): [True: 0, False: 346k]
  ------------------
 7635|      0|            return parse_presentation_regex(begin, end, handler);
 7636|      0|        }
 7637|   346k|        presentation_type type = parse_presentation_type(*begin++);
 7638|   346k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  986|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 346k]
  |  |  ------------------
  ------------------
 7639|      0|            handler.on_error("Invalid type specifier in format string");
 7640|      0|            return begin;
 7641|      0|        }
 7642|   346k|        handler.on_type(type);
 7643|   346k|        return begin;
 7644|   346k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7295|   112k|{
 7296|   112k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7297|       |
 7298|   112k|    auto check_align = [](wchar_t ch) {
 7299|   112k|        switch (ch) {
 7300|   112k|            case L'<':
 7301|   112k|                return align_type::left;
 7302|   112k|            case L'>':
 7303|   112k|                return align_type::right;
 7304|   112k|            case L'^':
 7305|   112k|                return align_type::center;
 7306|   112k|            default:
 7307|   112k|                return align_type::none;
 7308|   112k|        }
 7309|   112k|    };
 7310|       |
 7311|   112k|    auto potential_fill_len = code_point_length(begin, end);
 7312|   112k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  986|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 112k]
  |  |  |  Branch (986:45): [True: 0, False: 112k]
  |  |  |  Branch (986:45): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7313|   112k|                     std::distance(begin, end) < potential_fill_len)) {
 7314|      0|        handler.on_error("Invalid encoding in fill character");
 7315|      0|        return begin;
 7316|      0|    }
 7317|       |
 7318|   112k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7319|       |
 7320|   112k|    auto potential_fill = std::basic_string_view<CharT>{
 7321|   112k|        begin, static_cast<size_t>(potential_fill_len)};
 7322|   112k|    const auto begin_before_fill = begin;
 7323|   112k|    begin += potential_fill_len;
 7324|       |
 7325|   112k|    if (begin == end) {
  ------------------
  |  Branch (7325:9): [True: 0, False: 112k]
  ------------------
 7326|      0|        return begin_before_fill;
 7327|      0|    }
 7328|       |
 7329|   112k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7330|   112k|    const auto begin_after_fill = begin;
 7331|   112k|    ++begin;
 7332|       |
 7333|   112k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7333:9): [True: 112k, False: 0]
  ------------------
 7334|   112k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  986|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7335|      0|            handler.on_error("Invalid fill character '{' in format string");
 7336|      0|            return begin;
 7337|      0|        }
 7338|   112k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7338:13): [True: 0, False: 112k]
  ------------------
 7339|      0|            return begin_before_fill;
 7340|      0|        }
 7341|   112k|    }
 7342|       |
 7343|   112k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7343:9): [True: 112k, False: 0]
  ------------------
 7344|   112k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7344:13): [True: 0, False: 112k]
  ------------------
 7345|      0|            handler.on_align(potential_align_on_fill);
 7346|      0|            return begin_after_fill;
 7347|      0|        }
 7348|   112k|        return begin_before_fill;
 7349|   112k|    }
 7350|       |
 7351|      0|    handler.on_fill(potential_fill);
 7352|      0|    handler.on_align(potential_align_after_fill);
 7353|      0|    return begin;
 7354|   112k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7298|   225k|    auto check_align = [](wchar_t ch) {
 7299|   225k|        switch (ch) {
 7300|      0|            case L'<':
  ------------------
  |  Branch (7300:13): [True: 0, False: 225k]
  ------------------
 7301|      0|                return align_type::left;
 7302|      0|            case L'>':
  ------------------
  |  Branch (7302:13): [True: 0, False: 225k]
  ------------------
 7303|      0|                return align_type::right;
 7304|      0|            case L'^':
  ------------------
  |  Branch (7304:13): [True: 0, False: 225k]
  ------------------
 7305|      0|                return align_type::center;
 7306|   225k|            default:
  ------------------
  |  Branch (7306:13): [True: 225k, False: 0]
  ------------------
 7307|   225k|                return align_type::none;
 7308|   225k|        }
 7309|   225k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7360|   112k|{
 7361|   112k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1051|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7362|       |
 7363|   112k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7363:9): [True: 112k, False: 0]
  |  Branch (7363:33): [True: 0, False: 112k]
  ------------------
 7364|      0|        int width = parse_simple_int(begin, end);
 7365|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  985|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7366|      0|            handler.on_width(width);
 7367|      0|        }
 7368|      0|        else {
 7369|      0|            handler.on_error("Invalid field width");
 7370|      0|            return begin;
 7371|      0|        }
 7372|      0|    }
 7373|   112k|    return begin;
 7374|   112k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7893|   112k|    {
 7894|   112k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7895|   112k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7895:13): [True: 112k, False: 0]
  ------------------
 7896|   112k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7896:13): [True: 112k, False: 0]
  ------------------
 7897|   112k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7897:13): [True: 0, False: 112k]
  ------------------
 7898|   112k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7898:13): [True: 0, False: 0]
  ------------------
 7899|      0|            SCN_UNLIKELY_ATTR
 7900|       |            // clang-format off
 7901|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7902|       |            // clang-format on
 7903|      0|        }
 7904|       |
 7905|   112k|        Handler::on_localized();
 7906|   112k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9361|   459k|{
 9362|   459k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1057|   459k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9363|   459k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9250|   459k|{
 9251|   459k|#define SCN_VISIT(Type)                                                \
 9252|   459k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9253|   459k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9254|   459k|    }                                                                  \
 9255|   459k|    else {                                                             \
 9256|   459k|        return vis(monostate_val);                                     \
 9257|   459k|    }
 9258|       |
 9259|   459k|    monostate monostate_val{};
 9260|       |
 9261|   459k|    switch (get_arg_type(arg)) {
 9262|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 459k]
  ------------------
 9263|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 459k]
  ------------------
 9265|      0|            SCN_VISIT(short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 459k]
  ------------------
 9267|      0|            SCN_VISIT(int);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 459k]
  ------------------
 9269|      0|            SCN_VISIT(long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 459k]
  ------------------
 9271|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 459k]
  ------------------
 9273|      0|#if SCN_HAS_INT128
 9274|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9275|       |#else
 9276|       |            return vis(monostate_val);
 9277|       |#endif
 9278|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 459k]
  ------------------
 9279|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9280|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 459k]
  ------------------
 9281|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9282|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 459k]
  ------------------
 9283|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9284|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9284:9): [True: 0, False: 459k]
  ------------------
 9285|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9286|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9286:9): [True: 0, False: 459k]
  ------------------
 9287|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9288|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9288:9): [True: 0, False: 459k]
  ------------------
 9289|      0|#if SCN_HAS_INT128
 9290|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9291|       |#else
 9292|       |            return vis(monostate_val);
 9293|       |#endif
 9294|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9294:9): [True: 0, False: 459k]
  ------------------
 9295|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9296|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9296:9): [True: 0, False: 459k]
  ------------------
 9297|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9298|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9298:9): [True: 0, False: 459k]
  ------------------
 9299|      0|            SCN_VISIT(char);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9300|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9300:9): [True: 0, False: 459k]
  ------------------
 9301|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9302|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9302:9): [True: 0, False: 459k]
  ------------------
 9303|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9252|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|      0|    }                                                                  \
  |  | 9255|      0|    else {                                                             \
  |  | 9256|      0|        return vis(monostate_val);                                     \
  |  | 9257|      0|    }
  ------------------
 9304|   143k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9304:9): [True: 143k, False: 316k]
  ------------------
 9305|   143k|            SCN_VISIT(float);
  ------------------
  |  | 9252|   143k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   143k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   143k|    }                                                                  \
  |  | 9255|   143k|    else {                                                             \
  |  | 9256|   143k|        return vis(monostate_val);                                     \
  |  | 9257|   143k|    }
  ------------------
 9306|   300k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9306:9): [True: 157k, False: 302k]
  ------------------
 9307|   300k|            SCN_VISIT(double);
  ------------------
  |  | 9252|   300k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   300k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   300k|    }                                                                  \
  |  | 9255|   300k|    else {                                                             \
  |  | 9256|   300k|        return vis(monostate_val);                                     \
  |  | 9257|   300k|    }
  ------------------
 9308|   459k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9308:9): [True: 159k, False: 300k]
  ------------------
 9309|   459k|            SCN_VISIT(long double);
  ------------------
  |  | 9252|   459k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   459k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   459k|    }                                                                  \
  |  | 9255|   459k|    else {                                                             \
  |  | 9256|   459k|        return vis(monostate_val);                                     \
  |  | 9257|   459k|    }
  ------------------
 9310|   459k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9310:9): [True: 0, False: 459k]
  ------------------
 9311|   459k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9252|   459k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   459k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   459k|    }                                                                  \
  |  | 9255|   459k|    else {                                                             \
  |  | 9256|   459k|        return vis(monostate_val);                                     \
  |  | 9257|   459k|    }
  ------------------
 9312|   459k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9312:9): [True: 0, False: 459k]
  ------------------
 9313|   459k|            SCN_VISIT(std::string);
  ------------------
  |  | 9252|   459k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   459k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   459k|    }                                                                  \
  |  | 9255|   459k|    else {                                                             \
  |  | 9256|   459k|        return vis(monostate_val);                                     \
  |  | 9257|   459k|    }
  ------------------
 9314|   459k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9314:9): [True: 0, False: 459k]
  ------------------
 9315|   459k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9252|   459k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   459k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   459k|    }                                                                  \
  |  | 9255|   459k|    else {                                                             \
  |  | 9256|   459k|        return vis(monostate_val);                                     \
  |  | 9257|   459k|    }
  ------------------
 9316|   459k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9316:9): [True: 0, False: 459k]
  ------------------
 9317|   459k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9252|   459k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   459k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   459k|    }                                                                  \
  |  | 9255|   459k|    else {                                                             \
  |  | 9256|   459k|        return vis(monostate_val);                                     \
  |  | 9257|   459k|    }
  ------------------
 9318|   459k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9318:9): [True: 0, False: 459k]
  ------------------
 9319|   459k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9252|   459k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   459k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   459k|    }                                                                  \
  |  | 9255|   459k|    else {                                                             \
  |  | 9256|   459k|        return vis(monostate_val);                                     \
  |  | 9257|   459k|    }
  ------------------
 9320|   459k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9320:9): [True: 0, False: 459k]
  ------------------
 9321|   459k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9252|   459k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9253|   459k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9254|   459k|    }                                                                  \
  |  | 9255|   459k|    else {                                                             \
  |  | 9256|   459k|        return vis(monostate_val);                                     \
  |  | 9257|   459k|    }
  ------------------
 9322|       |
 9323|   459k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9323:9): [True: 0, False: 459k]
  ------------------
 9324|   459k|#if !SCN_DISABLE_TYPE_CUSTOM
 9325|   459k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9326|   459k|                get_arg_value(arg).custom_value));
 9327|       |#else
 9328|       |            return vis(monostate_val);
 9329|       |#endif
 9330|       |
 9331|      0|            SCN_CLANG_PUSH
 9332|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9333|       |
 9334|      0|            SCN_UNLIKELY_ATTR
 9335|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9335:9): [True: 0, False: 459k]
  ------------------
 9336|      0|        default: {
  ------------------
  |  Branch (9336:9): [True: 0, False: 459k]
  ------------------
 9337|      0|            return vis(monostate_val);
 9338|      0|        }
 9339|       |
 9340|   459k|            SCN_CLANG_POP
 9341|   459k|    }
 9342|       |
 9343|      0|#undef SCN_VISIT
 9344|       |
 9345|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9346|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9347|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4350|   184k|    {
 4351|   184k|        return sync(0);
 4352|   184k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6147|   193k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6147|   112k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  87.9k|{
   89|  87.9k|    auto result = make_scan_result<Source, Args...>();
   90|  87.9k|    fill_scan_result(result,
   91|  87.9k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  87.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  87.9k|                           make_scan_args<wscan_context>(result->values())));
   93|  87.9k|    return result;
   94|  87.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   286k|{
   44|   286k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1057|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   286k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  87.9k|{
  131|  87.9k|    auto result = make_scan_result<Source, Args...>();
  132|  87.9k|    fill_scan_result(result,
  133|  87.9k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  87.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  87.9k|                           make_scan_args<wscan_context>(result->values())));
  135|  87.9k|    return result;
  136|  87.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   286k|{
   60|   286k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1057|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   286k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  16.3k|{
  171|  16.3k|    auto result = make_scan_result<Source, T>();
  172|  16.3k|    fill_scan_result(
  173|  16.3k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  16.3k|                            detail::make_arg<wscan_context>(result->value())));
  175|  16.3k|    return result;
  176|  16.3k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  56.4k|{
   72|  56.4k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1057|  56.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  56.4k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  98.3k|{
   89|  98.3k|    auto result = make_scan_result<Source, Args...>();
   90|  98.3k|    fill_scan_result(result,
   91|  98.3k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  98.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  98.3k|                           make_scan_args<wscan_context>(result->values())));
   93|  98.3k|    return result;
   94|  98.3k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  98.3k|{
  131|  98.3k|    auto result = make_scan_result<Source, Args...>();
  132|  98.3k|    fill_scan_result(result,
  133|  98.3k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  98.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  98.3k|                           make_scan_args<wscan_context>(result->values())));
  135|  98.3k|    return result;
  136|  98.3k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  19.7k|{
  171|  19.7k|    auto result = make_scan_result<Source, T>();
  172|  19.7k|    fill_scan_result(
  173|  19.7k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  19.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  19.7k|                            detail::make_arg<wscan_context>(result->value())));
  175|  19.7k|    return result;
  176|  19.7k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   100k|{
   89|   100k|    auto result = make_scan_result<Source, Args...>();
   90|   100k|    fill_scan_result(result,
   91|   100k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   100k|                           make_scan_args<wscan_context>(result->values())));
   93|   100k|    return result;
   94|   100k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|   100k|{
  131|   100k|    auto result = make_scan_result<Source, Args...>();
  132|   100k|    fill_scan_result(result,
  133|   100k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   100k|                           make_scan_args<wscan_context>(result->values())));
  135|   100k|    return result;
  136|   100k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  20.4k|{
  171|  20.4k|    auto result = make_scan_result<Source, T>();
  172|  20.4k|    fill_scan_result(
  173|  20.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  20.4k|                            detail::make_arg<wscan_context>(result->value())));
  175|  20.4k|    return result;
  176|  20.4k|}
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  87.8k|{
   89|  87.8k|    auto result = make_scan_result<Source, Args...>();
   90|  87.8k|    fill_scan_result(result,
   91|  87.8k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  87.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  87.8k|                           make_scan_args<wscan_context>(result->values())));
   93|  87.8k|    return result;
   94|  87.8k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   286k|{
   44|   286k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1057|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   286k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  87.8k|{
  131|  87.8k|    auto result = make_scan_result<Source, Args...>();
  132|  87.8k|    fill_scan_result(result,
  133|  87.8k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  87.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  87.8k|                           make_scan_args<wscan_context>(result->values())));
  135|  87.8k|    return result;
  136|  87.8k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   286k|{
   60|   286k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1057|   286k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   286k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  16.2k|{
  171|  16.2k|    auto result = make_scan_result<Source, T>();
  172|  16.2k|    fill_scan_result(
  173|  16.2k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  16.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  16.2k|                            detail::make_arg<wscan_context>(result->value())));
  175|  16.2k|    return result;
  176|  16.2k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  56.4k|{
   72|  56.4k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1057|  56.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  56.4k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  98.2k|{
   89|  98.2k|    auto result = make_scan_result<Source, Args...>();
   90|  98.2k|    fill_scan_result(result,
   91|  98.2k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|  98.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  98.2k|                           make_scan_args<wscan_context>(result->values())));
   93|  98.2k|    return result;
   94|  98.2k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  98.2k|{
  131|  98.2k|    auto result = make_scan_result<Source, Args...>();
  132|  98.2k|    fill_scan_result(result,
  133|  98.2k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|  98.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  98.2k|                           make_scan_args<wscan_context>(result->values())));
  135|  98.2k|    return result;
  136|  98.2k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  19.7k|{
  171|  19.7k|    auto result = make_scan_result<Source, T>();
  172|  19.7k|    fill_scan_result(
  173|  19.7k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  19.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  19.7k|                            detail::make_arg<wscan_context>(result->value())));
  175|  19.7k|    return result;
  176|  19.7k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|   100k|{
   89|   100k|    auto result = make_scan_result<Source, Args...>();
   90|   100k|    fill_scan_result(result,
   91|   100k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1057|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   100k|                           make_scan_args<wscan_context>(result->values())));
   93|   100k|    return result;
   94|   100k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|   100k|{
  131|   100k|    auto result = make_scan_result<Source, Args...>();
  132|   100k|    fill_scan_result(result,
  133|   100k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1057|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   100k|                           make_scan_args<wscan_context>(result->values())));
  135|   100k|    return result;
  136|   100k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  20.3k|{
  171|  20.3k|    auto result = make_scan_result<Source, T>();
  172|  20.3k|    fill_scan_result(
  173|  20.3k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1057|  20.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  20.3k|                            detail::make_arg<wscan_context>(result->value())));
  175|  20.3k|    return result;
  176|  20.3k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  1.48M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  1.48M|{
  309|  1.48M|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  1.48M|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|   624k|{
  315|   624k|    static_assert(std::is_same_v<Locale, std::locale>);
  316|   624k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 312k, False: 312k]
  ------------------
  317|   624k|                    : std::locale{};
  318|   624k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1095|   606k|{
 1096|   606k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1097|   606k|                                  m_nan_payload_buffer, value);
 1098|   606k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  985|   606k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 589k, False: 16.6k]
  |  |  ------------------
  ------------------
 1099|   589k|        value = this->setsign(value);
 1100|   589k|        return n;
 1101|   589k|    }
 1102|       |
 1103|  16.6k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1103:9): [True: 4.77k, False: 11.8k]
  ------------------
 1104|  16.6k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1104:9): [True: 1.09k, False: 3.68k]
  ------------------
 1105|  1.09k|        return detail::unexpected_scan_error(
 1106|  1.09k|            scan_error::value_negative_overflow, n.error().msg());
 1107|  1.09k|    }
 1108|  15.5k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1108:9): [True: 939, False: 14.5k]
  ------------------
 1109|  15.5k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1109:9): [True: 110, False: 829]
  ------------------
 1110|    110|        return detail::unexpected_scan_error(
 1111|    110|            scan_error::value_negative_underflow, n.error().msg());
 1112|    110|    }
 1113|  15.4k|    return n;
 1114|  15.5k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1095|   295k|{
 1096|   295k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1097|   295k|                                  m_nan_payload_buffer, value);
 1098|   295k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  985|   295k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 260k, False: 34.7k]
  |  |  ------------------
  ------------------
 1099|   260k|        value = this->setsign(value);
 1100|   260k|        return n;
 1101|   260k|    }
 1102|       |
 1103|  34.7k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1103:9): [True: 3.00k, False: 31.7k]
  ------------------
 1104|  34.7k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1104:9): [True: 104, False: 2.90k]
  ------------------
 1105|    104|        return detail::unexpected_scan_error(
 1106|    104|            scan_error::value_negative_overflow, n.error().msg());
 1107|    104|    }
 1108|  34.6k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1108:9): [True: 870, False: 33.7k]
  ------------------
 1109|  34.6k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1109:9): [True: 50, False: 820]
  ------------------
 1110|     50|        return detail::unexpected_scan_error(
 1111|     50|            scan_error::value_negative_underflow, n.error().msg());
 1112|     50|    }
 1113|  34.6k|    return n;
 1114|  34.6k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1095|   634k|{
 1096|   634k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1097|   634k|                                  m_nan_payload_buffer, value);
 1098|   634k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  985|   634k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 620k, False: 14.2k]
  |  |  ------------------
  ------------------
 1099|   620k|        value = this->setsign(value);
 1100|   620k|        return n;
 1101|   620k|    }
 1102|       |
 1103|  14.2k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1103:9): [True: 2.51k, False: 11.7k]
  ------------------
 1104|  14.2k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1104:9): [True: 640, False: 1.87k]
  ------------------
 1105|    640|        return detail::unexpected_scan_error(
 1106|    640|            scan_error::value_negative_overflow, n.error().msg());
 1107|    640|    }
 1108|  13.5k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1108:9): [True: 309, False: 13.2k]
  ------------------
 1109|  13.5k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1109:9): [True: 93, False: 216]
  ------------------
 1110|     93|        return detail::unexpected_scan_error(
 1111|     93|            scan_error::value_negative_underflow, n.error().msg());
 1112|     93|    }
 1113|  13.4k|    return n;
 1114|  13.5k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1095|   342k|{
 1096|   342k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1097|   342k|                                  m_nan_payload_buffer, value);
 1098|   342k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  985|   342k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 309k, False: 33.3k]
  |  |  ------------------
  ------------------
 1099|   309k|        value = this->setsign(value);
 1100|   309k|        return n;
 1101|   309k|    }
 1102|       |
 1103|  33.3k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1103:9): [True: 1.73k, False: 31.6k]
  ------------------
 1104|  33.3k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1104:9): [True: 104, False: 1.62k]
  ------------------
 1105|    104|        return detail::unexpected_scan_error(
 1106|    104|            scan_error::value_negative_overflow, n.error().msg());
 1107|    104|    }
 1108|  33.2k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1108:9): [True: 206, False: 33.0k]
  ------------------
 1109|  33.2k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1109:9): [True: 18, False: 188]
  ------------------
 1110|     18|        return detail::unexpected_scan_error(
 1111|     18|            scan_error::value_negative_underflow, n.error().msg());
 1112|     18|    }
 1113|  33.2k|    return n;
 1114|  33.2k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1095|   642k|{
 1096|   642k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1097|   642k|                                  m_nan_payload_buffer, value);
 1098|   642k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  985|   642k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 629k, False: 12.4k]
  |  |  ------------------
  ------------------
 1099|   629k|        value = this->setsign(value);
 1100|   629k|        return n;
 1101|   629k|    }
 1102|       |
 1103|  12.4k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1103:9): [True: 577, False: 11.8k]
  ------------------
 1104|  12.4k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1104:9): [True: 252, False: 325]
  ------------------
 1105|    252|        return detail::unexpected_scan_error(
 1106|    252|            scan_error::value_negative_overflow, n.error().msg());
 1107|    252|    }
 1108|  12.1k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1108:9): [True: 100, False: 12.0k]
  ------------------
 1109|  12.1k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1109:9): [True: 40, False: 60]
  ------------------
 1110|     40|        return detail::unexpected_scan_error(
 1111|     40|            scan_error::value_negative_underflow, n.error().msg());
 1112|     40|    }
 1113|  12.1k|    return n;
 1114|  12.1k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1095|   350k|{
 1096|   350k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1097|   350k|                                  m_nan_payload_buffer, value);
 1098|   350k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  985|   350k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 318k, False: 32.1k]
  |  |  ------------------
  ------------------
 1099|   318k|        value = this->setsign(value);
 1100|   318k|        return n;
 1101|   318k|    }
 1102|       |
 1103|  32.1k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1103:9): [True: 146, False: 32.0k]
  ------------------
 1104|  32.1k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1104:9): [True: 32, False: 114]
  ------------------
 1105|     32|        return detail::unexpected_scan_error(
 1106|     32|            scan_error::value_negative_overflow, n.error().msg());
 1107|     32|    }
 1108|  32.1k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1108:9): [True: 82, False: 32.0k]
  ------------------
 1109|  32.1k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1109:9): [True: 18, False: 64]
  ------------------
 1110|     18|        return detail::unexpected_scan_error(
 1111|     18|            scan_error::value_negative_underflow, n.error().msg());
 1112|     18|    }
 1113|  32.1k|    return n;
 1114|  32.1k|}
_ZN3scn2v44impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1428|  7.54k|{
 1429|  7.54k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1051|  7.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1430|  7.54k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1051|  7.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1431|  7.54k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1051|  7.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1432|  7.54k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1051|  7.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  7.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1433|       |
 1434|  7.54k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1434:9): [True: 96, False: 7.44k]
  ------------------
 1435|     96|        SCN_UNLIKELY_ATTR
 1436|     96|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1437|     96|                                             "Invalid integer value");
 1438|     96|    }
 1439|       |
 1440|       |    // Skip leading zeroes
 1441|  7.44k|    auto start = source.data();
 1442|  7.44k|    const auto end = source.data() + source.size();
 1443|  7.44k|    {
 1444|  84.9k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1444:16): [True: 84.4k, False: 498]
  ------------------
 1445|  84.4k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1445:17): [True: 6.94k, False: 77.5k]
  ------------------
 1446|  6.94k|                break;
 1447|  6.94k|            }
 1448|  84.4k|        }
 1449|  7.44k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  986|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 564, False: 6.88k]
  |  |  |  Branch (986:45): [True: 498, False: 6.94k]
  |  |  |  Branch (986:45): [True: 66, False: 6.88k]
  |  |  ------------------
  ------------------
 1450|    564|            value = 0;
 1451|    564|            return ranges::next(source.begin(),
 1452|    564|                                ranges::distance(source.data(), start));
 1453|    564|        }
 1454|  7.44k|    }
 1455|       |
 1456|       |    if constexpr (std::is_same_v<CharT, char> &&
 1457|  6.88k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 1458|  6.88k|        if (base == 10) {
  ------------------
  |  Branch (1458:13): [True: 6.88k, False: 0]
  ------------------
 1459|  6.88k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3939|  6.88k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  6.88k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  6.88k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  6.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 660, False: 6.22k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    660|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    660|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    660|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    660|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    660|    }                                                  \
  |  |  |  | 3938|  6.88k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  6.22k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1460|  6.22k|                             detail::make_string_view_from_pointers(start, end),
 1461|  6.22k|                             value, sign == sign_type::minus_sign));
 1462|  6.22k|            return ranges::next(source.begin(),
 1463|  6.22k|                                ranges::distance(source.data(), ptr));
 1464|  6.88k|        }
 1465|  6.88k|    }
 1466|       |
 1467|  6.88k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3939|  6.88k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  6.88k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  6.88k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  6.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 6.88k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  6.88k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  6.88k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1468|  6.88k|                     detail::make_string_view_from_pointers(start, end), value,
 1469|  6.88k|                     base, sign == sign_type::minus_sign));
 1470|  6.88k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1471|  6.88k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2179|   423k|{
 2180|   423k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2181|   423k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2187|   492k|{
 2188|   492k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2189|   492k|    return sync_after_vscan(source, n);
 2190|   492k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2197|   286k|{
 2198|   286k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2199|   286k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2205|   286k|{
 2206|   286k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2207|   286k|    return sync_after_vscan(source, n);
 2208|   286k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   841k|{
  207|   841k|    return find_classic_impl(
  208|   841k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   841k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   841k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  2.01M|{
  215|  2.01M|    return find_classic_impl(
  216|  2.01M|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  2.01M|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  2.01M|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2148|   423k|{
 2149|   423k|    return vscan_internal(source, format, args);
 2150|   423k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2154|   492k|{
 2155|   492k|    auto n = vscan_internal(source, format, args);
 2156|   492k|    return sync_after_vscan(source, n);
 2157|   492k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2162|   286k|{
 2163|   286k|    return vscan_internal(source, format, args);
 2164|   286k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2168|   286k|{
 2169|   286k|    auto n = vscan_internal(source, format, args);
 2170|   286k|    return sync_after_vscan(source, n);
 2171|   286k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2234|  92.2k|{
 2235|  92.2k|    return vscan_value_internal(source, arg);
 2236|  92.2k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2239|   101k|{
 2240|   101k|    auto n = vscan_value_internal(source, arg);
 2241|   101k|    return sync_after_vscan(source, n);
 2242|   101k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2247|  56.4k|{
 2248|  56.4k|    return vscan_value_internal(source, arg);
 2249|  56.4k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2253|  56.4k|{
 2254|  56.4k|    auto n = vscan_value_internal(source, arg);
 2255|  56.4k|    return sync_after_vscan(source, n);
 2256|  56.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113maxdigits_u64Ei:
 1203|  6.88k|{
 1204|  6.88k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  | 1051|  6.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  6.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1205|  6.88k|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1206|  6.88k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112min_safe_u64Ei:
 1247|     66|{
 1248|     66|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  | 1051|     66|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|     66|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1249|     66|    return min_safe_u64_table[static_cast<size_t>(base)];
 1250|     66|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowImEEbmmib:
 1257|  6.88k|{
 1258|  6.88k|    auto max_digits = maxdigits_u64(base);
 1259|  6.88k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1259:9): [True: 594, False: 6.28k]
  ------------------
 1260|    594|        return true;
 1261|    594|    }
 1262|  6.28k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1262:9): [True: 66, False: 6.22k]
  |  Branch (1262:39): [True: 66, False: 0]
  ------------------
 1263|     66|        return true;
 1264|     66|    }
 1265|       |    if constexpr (!std::is_same_v<T, uint64_t>) {
 1266|       |        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
 1267|       |                      static_cast<uint64_t>(is_negative)) {
 1268|       |            SCN_UNLIKELY_ATTR
 1269|       |            return true;
 1270|       |        }
 1271|       |    }
 1272|       |
 1273|  6.22k|    return false;
 1274|  6.28k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultImmEET_T0_b:
 1278|  6.22k|{
 1279|  6.22k|    if (is_negative) {
  ------------------
  |  Branch (1279:9): [True: 0, False: 6.22k]
  ------------------
 1280|      0|        SCN_MSVC_PUSH
 1281|      0|        SCN_MSVC_IGNORE(4146)
 1282|      0|        return static_cast<T>(
 1283|      0|            -std::numeric_limits<T>::max() -
 1284|      0|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 1285|      0|        SCN_MSVC_POP
 1286|      0|    }
 1287|       |
 1288|  6.22k|    return static_cast<T>(acc);
 1289|  6.22k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
 1141|  8.91k|{
 1142|  8.91k|    uint64_t val{};
 1143|  8.91k|    std::memcpy(&val, input, sizeof(uint64_t));
 1144|       |    if constexpr (SCN_IS_BIG_ENDIAN) {
 1145|       |        val = byteswap(val);
 1146|       |    }
 1147|  8.91k|    return val;
 1148|  8.91k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
 1151|  4.38k|{
 1152|  4.38k|    constexpr uint64_t mask = 0x000000FF000000FF;
 1153|  4.38k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
 1154|  4.38k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
 1155|  4.38k|    word -= 0x3030303030303030;
 1156|  4.38k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
 1157|  4.38k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
 1158|  4.38k|    return static_cast<uint32_t>(word);
 1159|  4.38k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
 1162|  4.53k|{
 1163|  4.53k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
 1164|  4.53k|              0x8080808080808080));
 1165|  4.53k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   841k|{
  131|   841k|    auto it = source.begin();
  132|       |
  133|  2.78M|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 2.24M, False: 546k]
  ------------------
  134|  2.24M|        auto sv =
  135|  2.24M|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  2.24M|                .substr(0, 8);
  137|       |
  138|  2.24M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 2.18M, False: 60.9k]
  ------------------
  139|  2.18M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  2.18M|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  2.18M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 269k, False: 1.91M]
  ------------------
  142|   269k|                break;
  143|   269k|            }
  144|  1.91M|            continue;
  145|  2.18M|        }
  146|       |
  147|   202k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 165k, False: 36.1k]
  ------------------
  148|   165k|            auto tmp =
  149|   165k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   165k|            auto res = get_next_code_point(tmp);
  151|   165k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 24.7k, False: 141k]
  ------------------
  152|  24.7k|                return it;
  153|  24.7k|            }
  154|   141k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|   141k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   141k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1052|   141k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   141k|        }
  158|  60.9k|    }
  159|       |
  160|   816k|    return detail::make_string_view_iterator(source, it);
  161|   841k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  3.47M|{
  118|  3.47M|    static_assert(sizeof(*source.data()) == 1);
  119|  3.47M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1051|  3.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  3.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  3.47M|    uint64_t word{};
  121|  3.47M|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  3.47M|    return has_byte_greater(word, 127) != 0;
  124|  3.47M|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  13.3M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   165k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  2.01M|{
  131|  2.01M|    auto it = source.begin();
  132|       |
  133|  2.19M|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 1.23M, False: 963k]
  ------------------
  134|  1.23M|        auto sv =
  135|  1.23M|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  1.23M|                .substr(0, 8);
  137|       |
  138|  1.23M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 1.15M, False: 80.7k]
  ------------------
  139|  1.15M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  1.15M|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  1.15M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 978k, False: 173k]
  ------------------
  142|   978k|                break;
  143|   978k|            }
  144|   173k|            continue;
  145|  1.15M|        }
  146|       |
  147|   145k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 139k, False: 6.66k]
  ------------------
  148|   139k|            auto tmp =
  149|   139k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   139k|            auto res = get_next_code_point(tmp);
  151|   139k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 74.1k, False: 65.1k]
  ------------------
  152|  74.1k|                return it;
  153|  74.1k|            }
  154|  65.1k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  65.1k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  65.1k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1052|  65.1k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|  65.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  65.1k|        }
  158|  80.7k|    }
  159|       |
  160|  1.94M|    return detail::make_string_view_iterator(source, it);
  161|  2.01M|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|  1.74M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|   139k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  988|   606k|{
  989|   606k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (989:9): [True: 3.27k, False: 603k]
  ------------------
  990|  3.27k|        if constexpr (std::numeric_limits<T>::has_infinity) {
  991|  3.27k|            value = std::numeric_limits<T>::infinity();
  992|  3.27k|            return std::strlen("inf");
  993|       |        }
  994|       |        else {
  995|       |            return detail::unexpected_scan_error(
  996|       |                scan_error::invalid_scanned_value,
  997|       |                "Type doesn't support infinities");
  998|       |        }
  999|  3.27k|    }
 1000|   606k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1000:9): [True: 2.93k, False: 603k]
  ------------------
 1001|  2.93k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1002|  2.93k|            value = std::numeric_limits<T>::infinity();
 1003|  2.93k|            return std::strlen("infinity");
 1004|       |        }
 1005|       |        else {
 1006|       |            return detail::unexpected_scan_error(
 1007|       |                scan_error::invalid_scanned_value,
 1008|       |                "Type doesn't support infinities");
 1009|       |        }
 1010|  2.93k|    }
 1011|   606k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1011:9): [True: 25.8k, False: 580k]
  ------------------
 1012|  25.8k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1013|  25.8k|            value = std::numeric_limits<T>::quiet_NaN();
 1014|  25.8k|            return std::strlen("nan");
 1015|       |        }
 1016|       |        else {
 1017|       |            return detail::unexpected_scan_error(
 1018|       |                scan_error::invalid_scanned_value,
 1019|       |                "Type doesn't support quiet NaNs");
 1020|       |        }
 1021|  25.8k|    }
 1022|   606k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1022:9): [True: 3.02k, False: 603k]
  ------------------
 1023|  3.02k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1024|  3.02k|            value = std::numeric_limits<T>::quiet_NaN();
 1025|       |
 1026|  3.02k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1027|       |                // TODO: 128-bit payloads
 1028|  3.02k|                std::uint64_t payload{};
 1029|  3.02k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1029:26): [True: 2.26k, False: 760]
  ------------------
 1030|  3.02k|                        nan_payload.view(), payload, {})) {
 1031|  2.26k|                    apply_nan_payload(value, payload);
 1032|  2.26k|                }
 1033|    760|                else if (result.error().code() ==
  ------------------
  |  Branch (1033:26): [True: 220, False: 540]
  ------------------
 1034|    760|                         scan_error::value_positive_overflow) {
 1035|    220|                    apply_nan_payload(
 1036|    220|                        value, std::numeric_limits<std::uint64_t>::max());
 1037|    220|                }
 1038|  3.02k|            }
 1039|       |
 1040|  3.02k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1041|  3.02k|                                               nan_payload.view().size());
 1042|       |        }
 1043|       |        else {
 1044|       |            return detail::unexpected_scan_error(
 1045|       |                scan_error::invalid_scanned_value,
 1046|       |                "Type doesn't support quiet NaNs");
 1047|       |        }
 1048|  3.02k|    }
 1049|       |
 1050|   606k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1051|   606k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   606k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1051|   571k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1051:9): [True: 123k, False: 448k]
  ------------------
 1052|   123k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  986|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.00k, False: 120k]
  |  |  ------------------
  ------------------
 1053|  3.00k|            return detail::unexpected_scan_error(
 1054|  3.00k|                scan_error::invalid_scanned_value,
 1055|  3.00k|                "Invalid floating-point digit");
 1056|  3.00k|        }
 1057|   123k|    }
 1058|   568k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  986|   568k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 7.90k, False: 560k]
  |  |  ------------------
  ------------------
 1059|  7.90k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1060|  7.90k|                                             "Invalid floating-point digit");
 1061|  7.90k|    }
 1062|       |
 1063|   560k|#if !SCN_DISABLE_FAST_FLOAT
 1064|       |    if constexpr (std::is_same_v<T, long double>) {
 1065|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1066|       |            // If double == long double (true on Windows),
 1067|       |            // use fast_float with double
 1068|       |            double tmp{};
 1069|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1070|       |            value = tmp;
 1071|       |            return ret;
 1072|       |        }
 1073|       |        else {
 1074|       |            // long doubles aren't supported by fast_float ->
 1075|       |            // fall back to from_chars or strtod
 1076|       |            return fast_float_fallback(data, value);
 1077|       |        }
 1078|       |    }
 1079|   560k|    else {
 1080|       |        // Default to fast_float
 1081|   560k|        return fast_float_impl<CharT, T>{data}(value);
 1082|   560k|    }
 1083|       |#else
 1084|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1085|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1086|       |
 1087|       |    return fast_float_fallback(data, value);
 1088|       |#endif
 1089|   560k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIfEEvRT_m:
  971|  2.48k|{
  972|       |    if constexpr (!std::is_same_v<F, long double> ||
  973|       |                  !std::is_same_v<float_nan_traits_for_long_double,
  974|  2.48k|                                  nil_float_nan_traits>) {
  975|  2.48k|        using traits = float_nan_traits<F>;
  976|  2.48k|        typename traits::repr bits{};
  977|  2.48k|        std::memcpy(&bits, &value, sizeof(bits));
  978|  2.48k|        traits::apply(bits, payload);
  979|  2.48k|        std::memcpy(&value, &bits, sizeof(bits));
  980|  2.48k|    }
  981|  2.48k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116float_nan_traitsIfE5applyERNS4_4reprEm:
  822|  2.48k|    {
  823|  2.48k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  | 1051|  2.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  824|  2.48k|        SCN_EXPECT(r.exponent == 0xff);
  ------------------
  |  | 1051|  2.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  825|  2.48k|        r.mantissa = payload;
  826|  2.48k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
  741|   560k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  742|   560k|    {
  743|   560k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  368|  2.04M|    {
  369|  2.04M|        return {kind, options};
  370|  2.04M|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcfEclERf:
  746|   560k|    {
  747|   560k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (747:13): [True: 120k, False: 440k]
  ------------------
  748|   560k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (748:13): [True: 24.4k, False: 415k]
  ------------------
  749|       |            // fast_float doesn't support hexfloats
  750|   144k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  751|   144k|                                              value);
  752|   144k|        }
  753|       |
  754|   415k|        const auto flags = get_flags();
  755|   415k|        const auto view = get_view();
  756|   415k|        const auto result = fast_float::from_chars(
  757|   415k|            view.data(), view.data() + view.size(), value, flags);
  758|       |
  759|   415k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  986|   415k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 415k]
  |  |  ------------------
  ------------------
  760|      0|            return detail::unexpected_scan_error(
  761|      0|                scan_error::invalid_scanned_value,
  762|      0|                "fast_float: invalid_argument");
  763|      0|        }
  764|   415k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  986|   415k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 4.92k, False: 410k]
  |  |  ------------------
  ------------------
  765|       |            // may just be very large: fall back
  766|  4.92k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  767|  4.92k|                                              value);
  768|  4.92k|        }
  769|       |
  770|   410k|        return result.ptr - view.data();
  771|   415k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   149k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   149k|    {
  709|   149k|#if !SCN_DISABLE_STRTOD
  710|   149k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   149k|    }
  717|   149k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  551|   149k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   149k|    {
  553|   149k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  382|   217k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEclERf:
  556|   149k|    {
  557|   149k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   149k|                           generic_strtod);
  559|   149k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  388|   149k|    {
  389|   149k|        CharT* end{};
  390|   149k|        errno = 0;
  391|   149k|        value = strtod_cb(src, &end);
  392|   149k|        const auto saved_errno = errno;
  393|   149k|        auto chars_read = end - src;
  394|       |
  395|   149k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3929|   149k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 5.71k, False: 143k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  5.71k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  5.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  5.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  5.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  5.71k|    }
  ------------------
  396|       |
  397|   143k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 119k, False: 24.2k]
  ------------------
  398|   143k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 119k, False: 0]
  ------------------
  399|   119k|            chars_read -= 2;
  400|   119k|        }
  401|       |
  402|   143k|        return chars_read;
  403|   149k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  431|   217k|    {
  432|   217k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (432:13): [True: 88.0k, False: 129k]
  |  Branch (432:37): [True: 0, False: 88.0k]
  ------------------
  433|      0|            SCN_UNLIKELY_ATTR
  434|      0|            return detail::unexpected_scan_error(
  435|      0|                scan_error::invalid_scanned_value,
  436|      0|                "strtod failed: No conversion");
  437|      0|        }
  438|       |
  439|   217k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (439:13): [True: 24.9k, False: 192k]
  ------------------
  440|   217k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (440:13): [True: 0, False: 24.9k]
  ------------------
  441|      0|            SCN_UNLIKELY_ATTR
  442|      0|            return detail::unexpected_scan_error(
  443|      0|                scan_error::invalid_scanned_value,
  444|      0|                "Hexfloats disallowed by format string");
  445|      0|        }
  446|       |
  447|   217k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (447:13): [True: 9.60k, False: 208k]
  |  Branch (447:34): [True: 1.80k, False: 7.79k]
  ------------------
  448|  1.80k|            SCN_UNLIKELY_ATTR
  449|  1.80k|            return detail::unexpected_scan_error(
  450|  1.80k|                scan_error::value_positive_underflow,
  451|  1.80k|                "strtod failed: underflow");
  452|  1.80k|        }
  453|       |
  454|   215k|        SCN_GCC_COMPAT_PUSH
  455|   215k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  456|       |
  457|   215k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (457:13): [True: 215k, False: 0]
  ------------------
  458|   215k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (458:13): [True: 215k, False: 0]
  ------------------
  459|   215k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (459:13): [True: 7.78k, False: 208k]
  ------------------
  460|  7.78k|            SCN_UNLIKELY_ATTR
  461|  7.78k|            return detail::unexpected_scan_error(
  462|  7.78k|                scan_error::value_positive_overflow, "strtod failed: overflow");
  463|  7.78k|        }
  464|       |
  465|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  466|       |
  467|   208k|            return {};
  468|   215k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEf:
  343|   227k|{
  344|   227k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (344:12): [True: 89.8k, False: 137k]
  |  Branch (344:25): [True: 0, False: 137k]
  ------------------
  345|   227k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   149k|    {
  409|   149k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 145k, False: 4.17k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   145k|            auto first_space = read_until_classic_space(input.view());
  412|   145k|            input.assign(
  413|   145k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   145k|        }
  415|       |
  416|   149k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 120k, False: 29.3k]
  ------------------
  417|   120k|            if constexpr (std::is_same_v<CharT, char>) {
  418|   120k|                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|       |            else {
  421|       |                input.get_allocated_string().insert(0, L"0x");
  422|       |            }
  423|   120k|        }
  424|       |
  425|   149k|        return input.get_allocated_string().c_str();
  426|   149k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  563|   149k|    {
  564|   149k|        if constexpr (std::is_same_v<CharT, char>) {
  565|   149k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|       |        else {
  568|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|       |        }
  570|   149k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  471|   149k|    {
  472|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  473|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  474|       |        if constexpr (std::is_same_v<T, float>) {
  475|       |            return ::strtof_l(str, str_end, cloc);
  476|       |        }
  477|       |        else if constexpr (std::is_same_v<T, double>) {
  478|       |            return ::strtod_l(str, str_end, cloc);
  479|       |        }
  480|       |        else if constexpr (std::is_same_v<T, long double>) {
  481|       |            return ::strtold_l(str, str_end, cloc);
  482|       |        }
  483|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  484|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  485|       |        if constexpr (std::is_same_v<T, float>) {
  486|       |            return ::_strtof_l(str, str_end, cloc);
  487|       |        }
  488|       |        else if constexpr (std::is_same_v<T, double>) {
  489|       |            return ::_strtod_l(str, str_end, cloc);
  490|       |        }
  491|       |        else if constexpr (std::is_same_v<T, long double>) {
  492|       |            return ::_strtold_l(str, str_end, cloc);
  493|       |        }
  494|       |#else
  495|   149k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  496|   149k|        if constexpr (std::is_same_v<T, float>) {
  497|   149k|            return std::strtof(str, str_end);
  498|       |        }
  499|       |        else if constexpr (std::is_same_v<T, double>) {
  500|       |            return std::strtod(str, str_end);
  501|       |        }
  502|       |        else if constexpr (std::is_same_v<T, long double>) {
  503|       |            return std::strtold(str, str_end);
  504|       |        }
  505|   149k|#endif
  506|   149k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
  723|  1.29M|    {
  724|  1.29M|        unsigned format_flags{};
  725|  1.29M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (725:13): [True: 1.28M, False: 10.7k]
  ------------------
  726|  1.28M|            format_flags |=
  727|  1.28M|                static_cast<unsigned>(fast_float::chars_format::fixed);
  728|  1.28M|        }
  729|  1.29M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (729:13): [True: 1.10M, False: 198k]
  ------------------
  730|  1.10M|            format_flags |=
  731|  1.10M|                static_cast<unsigned>(fast_float::chars_format::scientific);
  732|  1.10M|        }
  733|       |
  734|  1.29M|        return static_cast<fast_float::chars_format>(format_flags);
  735|  1.29M|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
  775|   415k|    {
  776|   415k|        if constexpr (sizeof(CharT) == 1) {
  777|   415k|            return m_input.view();
  778|       |        }
  779|       |        else if constexpr (sizeof(CharT) == 2) {
  780|       |            return std::u16string_view{
  781|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  782|       |                m_input.view().size()};
  783|       |        }
  784|       |        else {
  785|       |            return std::u32string_view{
  786|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
  787|       |                m_input.view().size()};
  788|       |        }
  789|   415k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  988|   295k|{
  989|   295k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (989:9): [True: 0, False: 295k]
  ------------------
  990|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
  991|      0|            value = std::numeric_limits<T>::infinity();
  992|      0|            return std::strlen("inf");
  993|       |        }
  994|       |        else {
  995|       |            return detail::unexpected_scan_error(
  996|       |                scan_error::invalid_scanned_value,
  997|       |                "Type doesn't support infinities");
  998|       |        }
  999|      0|    }
 1000|   295k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1000:9): [True: 0, False: 295k]
  ------------------
 1001|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1002|      0|            value = std::numeric_limits<T>::infinity();
 1003|      0|            return std::strlen("infinity");
 1004|       |        }
 1005|       |        else {
 1006|       |            return detail::unexpected_scan_error(
 1007|       |                scan_error::invalid_scanned_value,
 1008|       |                "Type doesn't support infinities");
 1009|       |        }
 1010|      0|    }
 1011|   295k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1011:9): [True: 0, False: 295k]
  ------------------
 1012|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1013|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1014|      0|            return std::strlen("nan");
 1015|       |        }
 1016|       |        else {
 1017|       |            return detail::unexpected_scan_error(
 1018|       |                scan_error::invalid_scanned_value,
 1019|       |                "Type doesn't support quiet NaNs");
 1020|       |        }
 1021|      0|    }
 1022|   295k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1022:9): [True: 0, False: 295k]
  ------------------
 1023|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1024|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1025|       |
 1026|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1027|       |                // TODO: 128-bit payloads
 1028|      0|                std::uint64_t payload{};
 1029|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1029:26): [True: 0, False: 0]
  ------------------
 1030|      0|                        nan_payload.view(), payload, {})) {
 1031|      0|                    apply_nan_payload(value, payload);
 1032|      0|                }
 1033|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1033:26): [True: 0, False: 0]
  ------------------
 1034|      0|                         scan_error::value_positive_overflow) {
 1035|      0|                    apply_nan_payload(
 1036|      0|                        value, std::numeric_limits<std::uint64_t>::max());
 1037|      0|                }
 1038|      0|            }
 1039|       |
 1040|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1041|      0|                                               nan_payload.view().size());
 1042|       |        }
 1043|       |        else {
 1044|       |            return detail::unexpected_scan_error(
 1045|       |                scan_error::invalid_scanned_value,
 1046|       |                "Type doesn't support quiet NaNs");
 1047|       |        }
 1048|      0|    }
 1049|       |
 1050|   295k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1051|   295k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   295k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1051|   295k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1051:9): [True: 73.0k, False: 222k]
  ------------------
 1052|  73.0k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  986|  73.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 9.01k, False: 64.0k]
  |  |  ------------------
  ------------------
 1053|  9.01k|            return detail::unexpected_scan_error(
 1054|  9.01k|                scan_error::invalid_scanned_value,
 1055|  9.01k|                "Invalid floating-point digit");
 1056|  9.01k|        }
 1057|  73.0k|    }
 1058|   286k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  986|   286k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 21.8k, False: 264k]
  |  |  ------------------
  ------------------
 1059|  21.8k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1060|  21.8k|                                             "Invalid floating-point digit");
 1061|  21.8k|    }
 1062|       |
 1063|   264k|#if !SCN_DISABLE_FAST_FLOAT
 1064|       |    if constexpr (std::is_same_v<T, long double>) {
 1065|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1066|       |            // If double == long double (true on Windows),
 1067|       |            // use fast_float with double
 1068|       |            double tmp{};
 1069|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1070|       |            value = tmp;
 1071|       |            return ret;
 1072|       |        }
 1073|       |        else {
 1074|       |            // long doubles aren't supported by fast_float ->
 1075|       |            // fall back to from_chars or strtod
 1076|       |            return fast_float_fallback(data, value);
 1077|       |        }
 1078|       |    }
 1079|   264k|    else {
 1080|       |        // Default to fast_float
 1081|   264k|        return fast_float_impl<CharT, T>{data}(value);
 1082|   264k|    }
 1083|       |#else
 1084|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1085|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1086|       |
 1087|       |    return fast_float_fallback(data, value);
 1088|       |#endif
 1089|   264k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
  741|   264k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  742|   264k|    {
  743|   264k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  368|  1.02M|    {
  369|  1.02M|        return {kind, options};
  370|  1.02M|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwfEclERf:
  746|   264k|    {
  747|   264k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (747:13): [True: 64.0k, False: 200k]
  ------------------
  748|   264k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (748:13): [True: 475, False: 200k]
  ------------------
  749|       |            // fast_float doesn't support hexfloats
  750|  64.5k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  751|  64.5k|                                              value);
  752|  64.5k|        }
  753|       |
  754|   200k|        const auto flags = get_flags();
  755|   200k|        const auto view = get_view();
  756|   200k|        const auto result = fast_float::from_chars(
  757|   200k|            view.data(), view.data() + view.size(), value, flags);
  758|       |
  759|   200k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  986|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
  760|      0|            return detail::unexpected_scan_error(
  761|      0|                scan_error::invalid_scanned_value,
  762|      0|                "fast_float: invalid_argument");
  763|      0|        }
  764|   200k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  986|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.77k, False: 196k]
  |  |  ------------------
  ------------------
  765|       |            // may just be very large: fall back
  766|  3.77k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  767|  3.77k|                                              value);
  768|  3.77k|        }
  769|       |
  770|   196k|        return result.ptr - view.data();
  771|   200k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|  68.2k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|  68.2k|    {
  709|  68.2k|#if !SCN_DISABLE_STRTOD
  710|  68.2k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|  68.2k|    }
  717|  68.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  551|  68.2k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|  68.2k|    {
  553|  68.2k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEclERf:
  556|  68.2k|    {
  557|  68.2k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|  68.2k|                           generic_strtod);
  559|  68.2k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  388|  68.2k|    {
  389|  68.2k|        CharT* end{};
  390|  68.2k|        errno = 0;
  391|  68.2k|        value = strtod_cb(src, &end);
  392|  68.2k|        const auto saved_errno = errno;
  393|  68.2k|        auto chars_read = end - src;
  394|       |
  395|  68.2k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3929|  68.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 3.87k, False: 64.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  3.87k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  3.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  3.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  3.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.87k|    }
  ------------------
  396|       |
  397|  64.3k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 63.9k, False: 475]
  ------------------
  398|  64.3k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 63.9k, False: 0]
  ------------------
  399|  63.9k|            chars_read -= 2;
  400|  63.9k|        }
  401|       |
  402|  64.3k|        return chars_read;
  403|  68.2k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|  68.2k|    {
  409|  68.2k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 65.8k, False: 2.46k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|  65.8k|            auto first_space = read_until_classic_space(input.view());
  412|  65.8k|            input.assign(
  413|  65.8k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|  65.8k|        }
  415|       |
  416|  68.2k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 64.0k, False: 4.24k]
  ------------------
  417|       |            if constexpr (std::is_same_v<CharT, char>) {
  418|       |                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|  64.0k|            else {
  421|  64.0k|                input.get_allocated_string().insert(0, L"0x");
  422|  64.0k|            }
  423|  64.0k|        }
  424|       |
  425|  68.2k|        return input.get_allocated_string().c_str();
  426|  68.2k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  563|  68.2k|    {
  564|       |        if constexpr (std::is_same_v<CharT, char>) {
  565|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|  68.2k|        else {
  568|  68.2k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|  68.2k|        }
  570|  68.2k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  509|  68.2k|    {
  510|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  511|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  512|       |        if constexpr (std::is_same_v<T, float>) {
  513|       |            return ::wcstof_l(str, str_end, cloc);
  514|       |        }
  515|       |        else if constexpr (std::is_same_v<T, double>) {
  516|       |            return ::wcstod_l(str, str_end, cloc);
  517|       |        }
  518|       |        else if constexpr (std::is_same_v<T, long double>) {
  519|       |            return ::wcstold_l(str, str_end, cloc);
  520|       |        }
  521|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  522|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  523|       |        if constexpr (std::is_same_v<T, float>) {
  524|       |            return ::_wcstof_l(str, str_end, cloc);
  525|       |        }
  526|       |        else if constexpr (std::is_same_v<T, double>) {
  527|       |            return ::_wcstod_l(str, str_end, cloc);
  528|       |        }
  529|       |        else if constexpr (std::is_same_v<T, long double>) {
  530|       |            return ::_wcstold_l(str, str_end, cloc);
  531|       |        }
  532|       |#else
  533|  68.2k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  534|  68.2k|        if constexpr (std::is_same_v<T, float>) {
  535|  68.2k|            return std::wcstof(str, str_end);
  536|       |        }
  537|       |        else if constexpr (std::is_same_v<T, double>) {
  538|       |            return std::wcstod(str, str_end);
  539|       |        }
  540|       |        else if constexpr (std::is_same_v<T, long double>) {
  541|       |            return std::wcstold(str, str_end);
  542|       |        }
  543|  68.2k|#endif
  544|  68.2k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
  775|   200k|    {
  776|       |        if constexpr (sizeof(CharT) == 1) {
  777|       |            return m_input.view();
  778|       |        }
  779|       |        else if constexpr (sizeof(CharT) == 2) {
  780|       |            return std::u16string_view{
  781|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  782|       |                m_input.view().size()};
  783|       |        }
  784|   200k|        else {
  785|   200k|            return std::u32string_view{
  786|   200k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  787|   200k|                m_input.view().size()};
  788|   200k|        }
  789|   200k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  988|   634k|{
  989|   634k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (989:9): [True: 3.70k, False: 630k]
  ------------------
  990|  3.70k|        if constexpr (std::numeric_limits<T>::has_infinity) {
  991|  3.70k|            value = std::numeric_limits<T>::infinity();
  992|  3.70k|            return std::strlen("inf");
  993|       |        }
  994|       |        else {
  995|       |            return detail::unexpected_scan_error(
  996|       |                scan_error::invalid_scanned_value,
  997|       |                "Type doesn't support infinities");
  998|       |        }
  999|  3.70k|    }
 1000|   634k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1000:9): [True: 3.10k, False: 631k]
  ------------------
 1001|  3.10k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1002|  3.10k|            value = std::numeric_limits<T>::infinity();
 1003|  3.10k|            return std::strlen("infinity");
 1004|       |        }
 1005|       |        else {
 1006|       |            return detail::unexpected_scan_error(
 1007|       |                scan_error::invalid_scanned_value,
 1008|       |                "Type doesn't support infinities");
 1009|       |        }
 1010|  3.10k|    }
 1011|   634k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1011:9): [True: 26.3k, False: 607k]
  ------------------
 1012|  26.3k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1013|  26.3k|            value = std::numeric_limits<T>::quiet_NaN();
 1014|  26.3k|            return std::strlen("nan");
 1015|       |        }
 1016|       |        else {
 1017|       |            return detail::unexpected_scan_error(
 1018|       |                scan_error::invalid_scanned_value,
 1019|       |                "Type doesn't support quiet NaNs");
 1020|       |        }
 1021|  26.3k|    }
 1022|   634k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1022:9): [True: 3.09k, False: 631k]
  ------------------
 1023|  3.09k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1024|  3.09k|            value = std::numeric_limits<T>::quiet_NaN();
 1025|       |
 1026|  3.09k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1027|       |                // TODO: 128-bit payloads
 1028|  3.09k|                std::uint64_t payload{};
 1029|  3.09k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1029:26): [True: 2.26k, False: 830]
  ------------------
 1030|  3.09k|                        nan_payload.view(), payload, {})) {
 1031|  2.26k|                    apply_nan_payload(value, payload);
 1032|  2.26k|                }
 1033|    830|                else if (result.error().code() ==
  ------------------
  |  Branch (1033:26): [True: 220, False: 610]
  ------------------
 1034|    830|                         scan_error::value_positive_overflow) {
 1035|    220|                    apply_nan_payload(
 1036|    220|                        value, std::numeric_limits<std::uint64_t>::max());
 1037|    220|                }
 1038|  3.09k|            }
 1039|       |
 1040|  3.09k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1041|  3.09k|                                               nan_payload.view().size());
 1042|       |        }
 1043|       |        else {
 1044|       |            return detail::unexpected_scan_error(
 1045|       |                scan_error::invalid_scanned_value,
 1046|       |                "Type doesn't support quiet NaNs");
 1047|       |        }
 1048|  3.09k|    }
 1049|       |
 1050|   634k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1051|   634k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   634k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1051|   598k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1051:9): [True: 126k, False: 471k]
  ------------------
 1052|   126k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  986|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.06k, False: 123k]
  |  |  ------------------
  ------------------
 1053|  3.06k|            return detail::unexpected_scan_error(
 1054|  3.06k|                scan_error::invalid_scanned_value,
 1055|  3.06k|                "Invalid floating-point digit");
 1056|  3.06k|        }
 1057|   126k|    }
 1058|   595k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  986|   595k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 8.33k, False: 586k]
  |  |  ------------------
  ------------------
 1059|  8.33k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1060|  8.33k|                                             "Invalid floating-point digit");
 1061|  8.33k|    }
 1062|       |
 1063|   586k|#if !SCN_DISABLE_FAST_FLOAT
 1064|       |    if constexpr (std::is_same_v<T, long double>) {
 1065|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1066|       |            // If double == long double (true on Windows),
 1067|       |            // use fast_float with double
 1068|       |            double tmp{};
 1069|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1070|       |            value = tmp;
 1071|       |            return ret;
 1072|       |        }
 1073|       |        else {
 1074|       |            // long doubles aren't supported by fast_float ->
 1075|       |            // fall back to from_chars or strtod
 1076|       |            return fast_float_fallback(data, value);
 1077|       |        }
 1078|       |    }
 1079|   586k|    else {
 1080|       |        // Default to fast_float
 1081|   586k|        return fast_float_impl<CharT, T>{data}(value);
 1082|   586k|    }
 1083|       |#else
 1084|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1085|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1086|       |
 1087|       |    return fast_float_fallback(data, value);
 1088|       |#endif
 1089|   586k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIdEEvRT_m:
  971|  2.48k|{
  972|       |    if constexpr (!std::is_same_v<F, long double> ||
  973|       |                  !std::is_same_v<float_nan_traits_for_long_double,
  974|  2.48k|                                  nil_float_nan_traits>) {
  975|  2.48k|        using traits = float_nan_traits<F>;
  976|  2.48k|        typename traits::repr bits{};
  977|  2.48k|        std::memcpy(&bits, &value, sizeof(bits));
  978|  2.48k|        traits::apply(bits, payload);
  979|  2.48k|        std::memcpy(&value, &bits, sizeof(bits));
  980|  2.48k|    }
  981|  2.48k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116float_nan_traitsIdE5applyERNS4_4reprEm:
  856|  2.48k|    {
  857|  2.48k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  | 1051|  2.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  858|  2.48k|        SCN_EXPECT(r.exponent == (1u << 11u) - 1u);
  ------------------
  |  | 1051|  2.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  859|  2.48k|        r.mantissa0 = payload >> 32;
  860|  2.48k|        r.mantissa1 = payload;
  861|  2.48k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
  741|   586k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  742|   586k|    {
  743|   586k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcdEclERd:
  746|   586k|    {
  747|   586k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (747:13): [True: 123k, False: 462k]
  ------------------
  748|   586k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (748:13): [True: 26.1k, False: 436k]
  ------------------
  749|       |            // fast_float doesn't support hexfloats
  750|   149k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  751|   149k|                                              value);
  752|   149k|        }
  753|       |
  754|   436k|        const auto flags = get_flags();
  755|   436k|        const auto view = get_view();
  756|   436k|        const auto result = fast_float::from_chars(
  757|   436k|            view.data(), view.data() + view.size(), value, flags);
  758|       |
  759|   436k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  986|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 436k]
  |  |  ------------------
  ------------------
  760|      0|            return detail::unexpected_scan_error(
  761|      0|                scan_error::invalid_scanned_value,
  762|      0|                "fast_float: invalid_argument");
  763|      0|        }
  764|   436k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  986|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.40k, False: 434k]
  |  |  ------------------
  ------------------
  765|       |            // may just be very large: fall back
  766|  2.40k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  767|  2.40k|                                              value);
  768|  2.40k|        }
  769|       |
  770|   434k|        return result.ptr - view.data();
  771|   436k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   152k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   152k|    {
  709|   152k|#if !SCN_DISABLE_STRTOD
  710|   152k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   152k|    }
  717|   152k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  551|   152k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   152k|    {
  553|   152k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  382|   218k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEclERd:
  556|   152k|    {
  557|   152k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   152k|                           generic_strtod);
  559|   152k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  388|   152k|    {
  389|   152k|        CharT* end{};
  390|   152k|        errno = 0;
  391|   152k|        value = strtod_cb(src, &end);
  392|   152k|        const auto saved_errno = errno;
  393|   152k|        auto chars_read = end - src;
  394|       |
  395|   152k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3929|   152k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 2.82k, False: 149k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  2.82k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  2.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  2.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  2.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.82k|    }
  ------------------
  396|       |
  397|   149k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 123k, False: 26.0k]
  ------------------
  398|   149k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 123k, False: 0]
  ------------------
  399|   123k|            chars_read -= 2;
  400|   123k|        }
  401|       |
  402|   149k|        return chars_read;
  403|   152k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  431|   218k|    {
  432|   218k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (432:13): [True: 87.3k, False: 131k]
  |  Branch (432:37): [True: 0, False: 87.3k]
  ------------------
  433|      0|            SCN_UNLIKELY_ATTR
  434|      0|            return detail::unexpected_scan_error(
  435|      0|                scan_error::invalid_scanned_value,
  436|      0|                "strtod failed: No conversion");
  437|      0|        }
  438|       |
  439|   218k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (439:13): [True: 26.5k, False: 192k]
  ------------------
  440|   218k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (440:13): [True: 0, False: 26.5k]
  ------------------
  441|      0|            SCN_UNLIKELY_ATTR
  442|      0|            return detail::unexpected_scan_error(
  443|      0|                scan_error::invalid_scanned_value,
  444|      0|                "Hexfloats disallowed by format string");
  445|      0|        }
  446|       |
  447|   218k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (447:13): [True: 4.75k, False: 213k]
  |  Branch (447:34): [True: 515, False: 4.24k]
  ------------------
  448|    515|            SCN_UNLIKELY_ATTR
  449|    515|            return detail::unexpected_scan_error(
  450|    515|                scan_error::value_positive_underflow,
  451|    515|                "strtod failed: underflow");
  452|    515|        }
  453|       |
  454|   218k|        SCN_GCC_COMPAT_PUSH
  455|   218k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  456|       |
  457|   218k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (457:13): [True: 218k, False: 0]
  ------------------
  458|   218k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (458:13): [True: 218k, False: 0]
  ------------------
  459|   218k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (459:13): [True: 4.24k, False: 213k]
  ------------------
  460|  4.24k|            SCN_UNLIKELY_ATTR
  461|  4.24k|            return detail::unexpected_scan_error(
  462|  4.24k|                scan_error::value_positive_overflow, "strtod failed: overflow");
  463|  4.24k|        }
  464|       |
  465|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  466|       |
  467|   213k|            return {};
  468|   218k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEd:
  347|   223k|{
  348|   223k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (348:12): [True: 87.8k, False: 135k]
  |  Branch (348:24): [True: 0, False: 135k]
  ------------------
  349|   223k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   152k|    {
  409|   152k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 149k, False: 3.08k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   149k|            auto first_space = read_until_classic_space(input.view());
  412|   149k|            input.assign(
  413|   149k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   149k|        }
  415|       |
  416|   152k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 123k, False: 28.5k]
  ------------------
  417|   123k|            if constexpr (std::is_same_v<CharT, char>) {
  418|   123k|                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|       |            else {
  421|       |                input.get_allocated_string().insert(0, L"0x");
  422|       |            }
  423|   123k|        }
  424|       |
  425|   152k|        return input.get_allocated_string().c_str();
  426|   152k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  563|   152k|    {
  564|   152k|        if constexpr (std::is_same_v<CharT, char>) {
  565|   152k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|       |        else {
  568|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|       |        }
  570|   152k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  471|   152k|    {
  472|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  473|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  474|       |        if constexpr (std::is_same_v<T, float>) {
  475|       |            return ::strtof_l(str, str_end, cloc);
  476|       |        }
  477|       |        else if constexpr (std::is_same_v<T, double>) {
  478|       |            return ::strtod_l(str, str_end, cloc);
  479|       |        }
  480|       |        else if constexpr (std::is_same_v<T, long double>) {
  481|       |            return ::strtold_l(str, str_end, cloc);
  482|       |        }
  483|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  484|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  485|       |        if constexpr (std::is_same_v<T, float>) {
  486|       |            return ::_strtof_l(str, str_end, cloc);
  487|       |        }
  488|       |        else if constexpr (std::is_same_v<T, double>) {
  489|       |            return ::_strtod_l(str, str_end, cloc);
  490|       |        }
  491|       |        else if constexpr (std::is_same_v<T, long double>) {
  492|       |            return ::_strtold_l(str, str_end, cloc);
  493|       |        }
  494|       |#else
  495|   152k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  496|       |        if constexpr (std::is_same_v<T, float>) {
  497|       |            return std::strtof(str, str_end);
  498|       |        }
  499|   152k|        else if constexpr (std::is_same_v<T, double>) {
  500|   152k|            return std::strtod(str, str_end);
  501|       |        }
  502|       |        else if constexpr (std::is_same_v<T, long double>) {
  503|       |            return std::strtold(str, str_end);
  504|       |        }
  505|   152k|#endif
  506|   152k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
  775|   436k|    {
  776|   436k|        if constexpr (sizeof(CharT) == 1) {
  777|   436k|            return m_input.view();
  778|       |        }
  779|       |        else if constexpr (sizeof(CharT) == 2) {
  780|       |            return std::u16string_view{
  781|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  782|       |                m_input.view().size()};
  783|       |        }
  784|       |        else {
  785|       |            return std::u32string_view{
  786|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
  787|       |                m_input.view().size()};
  788|       |        }
  789|   436k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  988|   342k|{
  989|   342k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (989:9): [True: 0, False: 342k]
  ------------------
  990|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
  991|      0|            value = std::numeric_limits<T>::infinity();
  992|      0|            return std::strlen("inf");
  993|       |        }
  994|       |        else {
  995|       |            return detail::unexpected_scan_error(
  996|       |                scan_error::invalid_scanned_value,
  997|       |                "Type doesn't support infinities");
  998|       |        }
  999|      0|    }
 1000|   342k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1000:9): [True: 0, False: 342k]
  ------------------
 1001|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1002|      0|            value = std::numeric_limits<T>::infinity();
 1003|      0|            return std::strlen("infinity");
 1004|       |        }
 1005|       |        else {
 1006|       |            return detail::unexpected_scan_error(
 1007|       |                scan_error::invalid_scanned_value,
 1008|       |                "Type doesn't support infinities");
 1009|       |        }
 1010|      0|    }
 1011|   342k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1011:9): [True: 0, False: 342k]
  ------------------
 1012|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1013|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1014|      0|            return std::strlen("nan");
 1015|       |        }
 1016|       |        else {
 1017|       |            return detail::unexpected_scan_error(
 1018|       |                scan_error::invalid_scanned_value,
 1019|       |                "Type doesn't support quiet NaNs");
 1020|       |        }
 1021|      0|    }
 1022|   342k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1022:9): [True: 0, False: 342k]
  ------------------
 1023|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1024|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1025|       |
 1026|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1027|       |                // TODO: 128-bit payloads
 1028|      0|                std::uint64_t payload{};
 1029|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1029:26): [True: 0, False: 0]
  ------------------
 1030|      0|                        nan_payload.view(), payload, {})) {
 1031|      0|                    apply_nan_payload(value, payload);
 1032|      0|                }
 1033|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1033:26): [True: 0, False: 0]
  ------------------
 1034|      0|                         scan_error::value_positive_overflow) {
 1035|      0|                    apply_nan_payload(
 1036|      0|                        value, std::numeric_limits<std::uint64_t>::max());
 1037|      0|                }
 1038|      0|            }
 1039|       |
 1040|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1041|      0|                                               nan_payload.view().size());
 1042|       |        }
 1043|       |        else {
 1044|       |            return detail::unexpected_scan_error(
 1045|       |                scan_error::invalid_scanned_value,
 1046|       |                "Type doesn't support quiet NaNs");
 1047|       |        }
 1048|      0|    }
 1049|       |
 1050|   342k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1051|   342k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   342k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1051|   342k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1051:9): [True: 73.0k, False: 269k]
  ------------------
 1052|  73.0k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  986|  73.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 9.02k, False: 64.0k]
  |  |  ------------------
  ------------------
 1053|  9.02k|            return detail::unexpected_scan_error(
 1054|  9.02k|                scan_error::invalid_scanned_value,
 1055|  9.02k|                "Invalid floating-point digit");
 1056|  9.02k|        }
 1057|  73.0k|    }
 1058|   333k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  986|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 22.4k, False: 311k]
  |  |  ------------------
  ------------------
 1059|  22.4k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1060|  22.4k|                                             "Invalid floating-point digit");
 1061|  22.4k|    }
 1062|       |
 1063|   311k|#if !SCN_DISABLE_FAST_FLOAT
 1064|       |    if constexpr (std::is_same_v<T, long double>) {
 1065|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1066|       |            // If double == long double (true on Windows),
 1067|       |            // use fast_float with double
 1068|       |            double tmp{};
 1069|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1070|       |            value = tmp;
 1071|       |            return ret;
 1072|       |        }
 1073|       |        else {
 1074|       |            // long doubles aren't supported by fast_float ->
 1075|       |            // fall back to from_chars or strtod
 1076|       |            return fast_float_fallback(data, value);
 1077|       |        }
 1078|       |    }
 1079|   311k|    else {
 1080|       |        // Default to fast_float
 1081|   311k|        return fast_float_impl<CharT, T>{data}(value);
 1082|   311k|    }
 1083|       |#else
 1084|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1085|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1086|       |
 1087|       |    return fast_float_fallback(data, value);
 1088|       |#endif
 1089|   311k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
  741|   311k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  742|   311k|    {
  743|   311k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwdEclERd:
  746|   311k|    {
  747|   311k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (747:13): [True: 64.0k, False: 247k]
  ------------------
  748|   311k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (748:13): [True: 475, False: 246k]
  ------------------
  749|       |            // fast_float doesn't support hexfloats
  750|  64.5k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  751|  64.5k|                                              value);
  752|  64.5k|        }
  753|       |
  754|   246k|        const auto flags = get_flags();
  755|   246k|        const auto view = get_view();
  756|   246k|        const auto result = fast_float::from_chars(
  757|   246k|            view.data(), view.data() + view.size(), value, flags);
  758|       |
  759|   246k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  986|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 246k]
  |  |  ------------------
  ------------------
  760|      0|            return detail::unexpected_scan_error(
  761|      0|                scan_error::invalid_scanned_value,
  762|      0|                "fast_float: invalid_argument");
  763|      0|        }
  764|   246k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  986|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.85k, False: 244k]
  |  |  ------------------
  ------------------
  765|       |            // may just be very large: fall back
  766|  1.85k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  767|  1.85k|                                              value);
  768|  1.85k|        }
  769|       |
  770|   244k|        return result.ptr - view.data();
  771|   246k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|  66.3k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|  66.3k|    {
  709|  66.3k|#if !SCN_DISABLE_STRTOD
  710|  66.3k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|  66.3k|    }
  717|  66.3k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  551|  66.3k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|  66.3k|    {
  553|  66.3k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEclERd:
  556|  66.3k|    {
  557|  66.3k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|  66.3k|                           generic_strtod);
  559|  66.3k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  388|  66.3k|    {
  389|  66.3k|        CharT* end{};
  390|  66.3k|        errno = 0;
  391|  66.3k|        value = strtod_cb(src, &end);
  392|  66.3k|        const auto saved_errno = errno;
  393|  66.3k|        auto chars_read = end - src;
  394|       |
  395|  66.3k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3929|  66.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  66.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 1.93k, False: 64.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|  1.93k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|  1.93k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  1.93k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  1.93k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.93k|    }
  ------------------
  396|       |
  397|  64.4k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 63.9k, False: 475]
  ------------------
  398|  64.4k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 63.9k, False: 0]
  ------------------
  399|  63.9k|            chars_read -= 2;
  400|  63.9k|        }
  401|       |
  402|  64.4k|        return chars_read;
  403|  66.3k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|  66.3k|    {
  409|  66.3k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 64.8k, False: 1.50k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|  64.8k|            auto first_space = read_until_classic_space(input.view());
  412|  64.8k|            input.assign(
  413|  64.8k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|  64.8k|        }
  415|       |
  416|  66.3k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 64.0k, False: 2.32k]
  ------------------
  417|       |            if constexpr (std::is_same_v<CharT, char>) {
  418|       |                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|  64.0k|            else {
  421|  64.0k|                input.get_allocated_string().insert(0, L"0x");
  422|  64.0k|            }
  423|  64.0k|        }
  424|       |
  425|  66.3k|        return input.get_allocated_string().c_str();
  426|  66.3k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  563|  66.3k|    {
  564|       |        if constexpr (std::is_same_v<CharT, char>) {
  565|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|  66.3k|        else {
  568|  66.3k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|  66.3k|        }
  570|  66.3k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  509|  66.3k|    {
  510|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  511|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  512|       |        if constexpr (std::is_same_v<T, float>) {
  513|       |            return ::wcstof_l(str, str_end, cloc);
  514|       |        }
  515|       |        else if constexpr (std::is_same_v<T, double>) {
  516|       |            return ::wcstod_l(str, str_end, cloc);
  517|       |        }
  518|       |        else if constexpr (std::is_same_v<T, long double>) {
  519|       |            return ::wcstold_l(str, str_end, cloc);
  520|       |        }
  521|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  522|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  523|       |        if constexpr (std::is_same_v<T, float>) {
  524|       |            return ::_wcstof_l(str, str_end, cloc);
  525|       |        }
  526|       |        else if constexpr (std::is_same_v<T, double>) {
  527|       |            return ::_wcstod_l(str, str_end, cloc);
  528|       |        }
  529|       |        else if constexpr (std::is_same_v<T, long double>) {
  530|       |            return ::_wcstold_l(str, str_end, cloc);
  531|       |        }
  532|       |#else
  533|  66.3k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  534|       |        if constexpr (std::is_same_v<T, float>) {
  535|       |            return std::wcstof(str, str_end);
  536|       |        }
  537|  66.3k|        else if constexpr (std::is_same_v<T, double>) {
  538|  66.3k|            return std::wcstod(str, str_end);
  539|       |        }
  540|       |        else if constexpr (std::is_same_v<T, long double>) {
  541|       |            return std::wcstold(str, str_end);
  542|       |        }
  543|  66.3k|#endif
  544|  66.3k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
  775|   246k|    {
  776|       |        if constexpr (sizeof(CharT) == 1) {
  777|       |            return m_input.view();
  778|       |        }
  779|       |        else if constexpr (sizeof(CharT) == 2) {
  780|       |            return std::u16string_view{
  781|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  782|       |                m_input.view().size()};
  783|       |        }
  784|   246k|        else {
  785|   246k|            return std::u32string_view{
  786|   246k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  787|   246k|                m_input.view().size()};
  788|   246k|        }
  789|   246k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  988|   642k|{
  989|   642k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (989:9): [True: 3.83k, False: 638k]
  ------------------
  990|  3.83k|        if constexpr (std::numeric_limits<T>::has_infinity) {
  991|  3.83k|            value = std::numeric_limits<T>::infinity();
  992|  3.83k|            return std::strlen("inf");
  993|       |        }
  994|       |        else {
  995|       |            return detail::unexpected_scan_error(
  996|       |                scan_error::invalid_scanned_value,
  997|       |                "Type doesn't support infinities");
  998|       |        }
  999|  3.83k|    }
 1000|   642k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1000:9): [True: 3.23k, False: 638k]
  ------------------
 1001|  3.23k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1002|  3.23k|            value = std::numeric_limits<T>::infinity();
 1003|  3.23k|            return std::strlen("infinity");
 1004|       |        }
 1005|       |        else {
 1006|       |            return detail::unexpected_scan_error(
 1007|       |                scan_error::invalid_scanned_value,
 1008|       |                "Type doesn't support infinities");
 1009|       |        }
 1010|  3.23k|    }
 1011|   642k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1011:9): [True: 26.5k, False: 615k]
  ------------------
 1012|  26.5k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1013|  26.5k|            value = std::numeric_limits<T>::quiet_NaN();
 1014|  26.5k|            return std::strlen("nan");
 1015|       |        }
 1016|       |        else {
 1017|       |            return detail::unexpected_scan_error(
 1018|       |                scan_error::invalid_scanned_value,
 1019|       |                "Type doesn't support quiet NaNs");
 1020|       |        }
 1021|  26.5k|    }
 1022|   642k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1022:9): [True: 3.12k, False: 638k]
  ------------------
 1023|  3.12k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1024|  3.12k|            value = std::numeric_limits<T>::quiet_NaN();
 1025|       |
 1026|  3.12k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1027|       |                // TODO: 128-bit payloads
 1028|  3.12k|                std::uint64_t payload{};
 1029|  3.12k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1029:26): [True: 2.26k, False: 862]
  ------------------
 1030|  3.12k|                        nan_payload.view(), payload, {})) {
 1031|  2.26k|                    apply_nan_payload(value, payload);
 1032|  2.26k|                }
 1033|    862|                else if (result.error().code() ==
  ------------------
  |  Branch (1033:26): [True: 220, False: 642]
  ------------------
 1034|    862|                         scan_error::value_positive_overflow) {
 1035|    220|                    apply_nan_payload(
 1036|    220|                        value, std::numeric_limits<std::uint64_t>::max());
 1037|    220|                }
 1038|  3.12k|            }
 1039|       |
 1040|  3.12k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1041|  3.12k|                                               nan_payload.view().size());
 1042|       |        }
 1043|       |        else {
 1044|       |            return detail::unexpected_scan_error(
 1045|       |                scan_error::invalid_scanned_value,
 1046|       |                "Type doesn't support quiet NaNs");
 1047|       |        }
 1048|  3.12k|    }
 1049|       |
 1050|   642k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1051|   642k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   642k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1051|   605k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1051:9): [True: 127k, False: 477k]
  ------------------
 1052|   127k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  986|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.13k, False: 124k]
  |  |  ------------------
  ------------------
 1053|  3.13k|            return detail::unexpected_scan_error(
 1054|  3.13k|                scan_error::invalid_scanned_value,
 1055|  3.13k|                "Invalid floating-point digit");
 1056|  3.13k|        }
 1057|   127k|    }
 1058|   602k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  986|   602k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 8.63k, False: 593k]
  |  |  ------------------
  ------------------
 1059|  8.63k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1060|  8.63k|                                             "Invalid floating-point digit");
 1061|  8.63k|    }
 1062|       |
 1063|   593k|#if !SCN_DISABLE_FAST_FLOAT
 1064|   593k|    if constexpr (std::is_same_v<T, long double>) {
 1065|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1066|       |            // If double == long double (true on Windows),
 1067|       |            // use fast_float with double
 1068|       |            double tmp{};
 1069|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1070|       |            value = tmp;
 1071|       |            return ret;
 1072|       |        }
 1073|   593k|        else {
 1074|       |            // long doubles aren't supported by fast_float ->
 1075|       |            // fall back to from_chars or strtod
 1076|   593k|            return fast_float_fallback(data, value);
 1077|   593k|        }
 1078|       |    }
 1079|       |    else {
 1080|       |        // Default to fast_float
 1081|       |        return fast_float_impl<CharT, T>{data}(value);
 1082|       |    }
 1083|       |#else
 1084|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1085|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1086|       |
 1087|       |    return fast_float_fallback(data, value);
 1088|       |#endif
 1089|   593k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIeEEvRT_m:
  971|  2.48k|{
  972|       |    if constexpr (!std::is_same_v<F, long double> ||
  973|       |                  !std::is_same_v<float_nan_traits_for_long_double,
  974|  2.48k|                                  nil_float_nan_traits>) {
  975|  2.48k|        using traits = float_nan_traits<F>;
  976|  2.48k|        typename traits::repr bits{};
  977|  2.48k|        std::memcpy(&bits, &value, sizeof(bits));
  978|  2.48k|        traits::apply(bits, payload);
  979|  2.48k|        std::memcpy(&value, &bits, sizeof(bits));
  980|  2.48k|    }
  981|  2.48k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120float_nan_traits_x875applyERNS3_4reprEm:
  896|  2.48k|    {
  897|  2.48k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  | 1051|  2.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  898|  2.48k|        SCN_EXPECT(r.exponent == (1u << 15u) - 1u);
  ------------------
  |  | 1051|  2.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  899|  2.48k|        r.mantissa0 = payload >> 32;
  900|  2.48k|        r.mantissa1 = payload;
  901|  2.48k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   593k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   593k|    {
  709|   593k|#if !SCN_DISABLE_STRTOD
  710|   593k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   593k|    }
  717|   593k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  551|   593k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   593k|    {
  553|   593k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  382|   912k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEclERe:
  556|   593k|    {
  557|   593k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   593k|                           generic_strtod);
  559|   593k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  388|   593k|    {
  389|   593k|        CharT* end{};
  390|   593k|        errno = 0;
  391|   593k|        value = strtod_cb(src, &end);
  392|   593k|        const auto saved_errno = errno;
  393|   593k|        auto chars_read = end - src;
  394|       |
  395|   593k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3929|   593k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   593k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 677, False: 592k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|    677|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|    677|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    677|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    677|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    677|    }
  ------------------
  396|       |
  397|   592k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 124k, False: 468k]
  ------------------
  398|   592k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 124k, False: 0]
  ------------------
  399|   124k|            chars_read -= 2;
  400|   124k|        }
  401|       |
  402|   592k|        return chars_read;
  403|   593k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  431|   912k|    {
  432|   912k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (432:13): [True: 412k, False: 499k]
  |  Branch (432:37): [True: 0, False: 412k]
  ------------------
  433|      0|            SCN_UNLIKELY_ATTR
  434|      0|            return detail::unexpected_scan_error(
  435|      0|                scan_error::invalid_scanned_value,
  436|      0|                "strtod failed: No conversion");
  437|      0|        }
  438|       |
  439|   912k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (439:13): [True: 26.6k, False: 885k]
  ------------------
  440|   912k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (440:13): [True: 0, False: 26.6k]
  ------------------
  441|      0|            SCN_UNLIKELY_ATTR
  442|      0|            return detail::unexpected_scan_error(
  443|      0|                scan_error::invalid_scanned_value,
  444|      0|                "Hexfloats disallowed by format string");
  445|      0|        }
  446|       |
  447|   912k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (447:13): [True: 905, False: 911k]
  |  Branch (447:34): [True: 182, False: 723]
  ------------------
  448|    182|            SCN_UNLIKELY_ATTR
  449|    182|            return detail::unexpected_scan_error(
  450|    182|                scan_error::value_positive_underflow,
  451|    182|                "strtod failed: underflow");
  452|    182|        }
  453|       |
  454|   912k|        SCN_GCC_COMPAT_PUSH
  455|   912k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  456|       |
  457|   912k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (457:13): [True: 912k, False: 0]
  ------------------
  458|   912k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (458:13): [True: 912k, False: 0]
  ------------------
  459|   912k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (459:13): [True: 723, False: 911k]
  ------------------
  460|    723|            SCN_UNLIKELY_ATTR
  461|    723|            return detail::unexpected_scan_error(
  462|    723|                scan_error::value_positive_overflow, "strtod failed: overflow");
  463|    723|        }
  464|       |
  465|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  466|       |
  467|   911k|            return {};
  468|   912k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEe:
  351|   913k|{
  352|   913k|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (352:12): [True: 412k, False: 500k]
  |  Branch (352:26): [True: 0, False: 500k]
  ------------------
  353|   913k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   593k|    {
  409|   593k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 546k, False: 46.9k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   546k|            auto first_space = read_until_classic_space(input.view());
  412|   546k|            input.assign(
  413|   546k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   546k|        }
  415|       |
  416|   593k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 124k, False: 469k]
  ------------------
  417|   124k|            if constexpr (std::is_same_v<CharT, char>) {
  418|   124k|                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|       |            else {
  421|       |                input.get_allocated_string().insert(0, L"0x");
  422|       |            }
  423|   124k|        }
  424|       |
  425|   593k|        return input.get_allocated_string().c_str();
  426|   593k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  563|   593k|    {
  564|   593k|        if constexpr (std::is_same_v<CharT, char>) {
  565|   593k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|       |        else {
  568|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|       |        }
  570|   593k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  471|   593k|    {
  472|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  473|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  474|       |        if constexpr (std::is_same_v<T, float>) {
  475|       |            return ::strtof_l(str, str_end, cloc);
  476|       |        }
  477|       |        else if constexpr (std::is_same_v<T, double>) {
  478|       |            return ::strtod_l(str, str_end, cloc);
  479|       |        }
  480|       |        else if constexpr (std::is_same_v<T, long double>) {
  481|       |            return ::strtold_l(str, str_end, cloc);
  482|       |        }
  483|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  484|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  485|       |        if constexpr (std::is_same_v<T, float>) {
  486|       |            return ::_strtof_l(str, str_end, cloc);
  487|       |        }
  488|       |        else if constexpr (std::is_same_v<T, double>) {
  489|       |            return ::_strtod_l(str, str_end, cloc);
  490|       |        }
  491|       |        else if constexpr (std::is_same_v<T, long double>) {
  492|       |            return ::_strtold_l(str, str_end, cloc);
  493|       |        }
  494|       |#else
  495|   593k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  496|       |        if constexpr (std::is_same_v<T, float>) {
  497|       |            return std::strtof(str, str_end);
  498|       |        }
  499|       |        else if constexpr (std::is_same_v<T, double>) {
  500|       |            return std::strtod(str, str_end);
  501|       |        }
  502|   593k|        else if constexpr (std::is_same_v<T, long double>) {
  503|   593k|            return std::strtold(str, str_end);
  504|   593k|        }
  505|   593k|#endif
  506|   593k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  988|   350k|{
  989|   350k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (989:9): [True: 0, False: 350k]
  ------------------
  990|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
  991|      0|            value = std::numeric_limits<T>::infinity();
  992|      0|            return std::strlen("inf");
  993|       |        }
  994|       |        else {
  995|       |            return detail::unexpected_scan_error(
  996|       |                scan_error::invalid_scanned_value,
  997|       |                "Type doesn't support infinities");
  998|       |        }
  999|      0|    }
 1000|   350k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1000:9): [True: 0, False: 350k]
  ------------------
 1001|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1002|      0|            value = std::numeric_limits<T>::infinity();
 1003|      0|            return std::strlen("infinity");
 1004|       |        }
 1005|       |        else {
 1006|       |            return detail::unexpected_scan_error(
 1007|       |                scan_error::invalid_scanned_value,
 1008|       |                "Type doesn't support infinities");
 1009|       |        }
 1010|      0|    }
 1011|   350k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1011:9): [True: 0, False: 350k]
  ------------------
 1012|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1013|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1014|      0|            return std::strlen("nan");
 1015|       |        }
 1016|       |        else {
 1017|       |            return detail::unexpected_scan_error(
 1018|       |                scan_error::invalid_scanned_value,
 1019|       |                "Type doesn't support quiet NaNs");
 1020|       |        }
 1021|      0|    }
 1022|   350k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1022:9): [True: 0, False: 350k]
  ------------------
 1023|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1024|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1025|       |
 1026|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1027|       |                // TODO: 128-bit payloads
 1028|      0|                std::uint64_t payload{};
 1029|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1029:26): [True: 0, False: 0]
  ------------------
 1030|      0|                        nan_payload.view(), payload, {})) {
 1031|      0|                    apply_nan_payload(value, payload);
 1032|      0|                }
 1033|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1033:26): [True: 0, False: 0]
  ------------------
 1034|      0|                         scan_error::value_positive_overflow) {
 1035|      0|                    apply_nan_payload(
 1036|      0|                        value, std::numeric_limits<std::uint64_t>::max());
 1037|      0|                }
 1038|      0|            }
 1039|       |
 1040|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1041|      0|                                               nan_payload.view().size());
 1042|       |        }
 1043|       |        else {
 1044|       |            return detail::unexpected_scan_error(
 1045|       |                scan_error::invalid_scanned_value,
 1046|       |                "Type doesn't support quiet NaNs");
 1047|       |        }
 1048|      0|    }
 1049|       |
 1050|   350k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1051|   350k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   350k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1051|   350k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1051:9): [True: 73.1k, False: 277k]
  ------------------
 1052|  73.1k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  986|  73.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 9.03k, False: 64.0k]
  |  |  ------------------
  ------------------
 1053|  9.03k|            return detail::unexpected_scan_error(
 1054|  9.03k|                scan_error::invalid_scanned_value,
 1055|  9.03k|                "Invalid floating-point digit");
 1056|  9.03k|        }
 1057|  73.1k|    }
 1058|   341k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  986|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 22.8k, False: 318k]
  |  |  ------------------
  ------------------
 1059|  22.8k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1060|  22.8k|                                             "Invalid floating-point digit");
 1061|  22.8k|    }
 1062|       |
 1063|   318k|#if !SCN_DISABLE_FAST_FLOAT
 1064|   318k|    if constexpr (std::is_same_v<T, long double>) {
 1065|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1066|       |            // If double == long double (true on Windows),
 1067|       |            // use fast_float with double
 1068|       |            double tmp{};
 1069|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1070|       |            value = tmp;
 1071|       |            return ret;
 1072|       |        }
 1073|   318k|        else {
 1074|       |            // long doubles aren't supported by fast_float ->
 1075|       |            // fall back to from_chars or strtod
 1076|   318k|            return fast_float_fallback(data, value);
 1077|   318k|        }
 1078|       |    }
 1079|       |    else {
 1080|       |        // Default to fast_float
 1081|       |        return fast_float_impl<CharT, T>{data}(value);
 1082|       |    }
 1083|       |#else
 1084|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
 1085|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
 1086|       |
 1087|       |    return fast_float_fallback(data, value);
 1088|       |#endif
 1089|   318k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   318k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   318k|    {
  709|   318k|#if !SCN_DISABLE_STRTOD
  710|   318k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   318k|    }
  717|   318k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  551|   318k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   318k|    {
  553|   318k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEclERe:
  556|   318k|    {
  557|   318k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   318k|                           generic_strtod);
  559|   318k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  388|   318k|    {
  389|   318k|        CharT* end{};
  390|   318k|        errno = 0;
  391|   318k|        value = strtod_cb(src, &end);
  392|   318k|        const auto saved_errno = errno;
  393|   318k|        auto chars_read = end - src;
  394|       |
  395|   318k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3929|   318k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 228, False: 318k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|    228|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|    228|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|    228|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|    228|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    228|    }
  ------------------
  396|       |
  397|   318k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 64.0k, False: 254k]
  ------------------
  398|   318k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 64.0k, False: 0]
  ------------------
  399|  64.0k|            chars_read -= 2;
  400|  64.0k|        }
  401|       |
  402|   318k|        return chars_read;
  403|   318k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   318k|    {
  409|   318k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 311k, False: 7.04k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   311k|            auto first_space = read_until_classic_space(input.view());
  412|   311k|            input.assign(
  413|   311k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   311k|        }
  415|       |
  416|   318k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 64.0k, False: 254k]
  ------------------
  417|       |            if constexpr (std::is_same_v<CharT, char>) {
  418|       |                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|  64.0k|            else {
  421|  64.0k|                input.get_allocated_string().insert(0, L"0x");
  422|  64.0k|            }
  423|  64.0k|        }
  424|       |
  425|   318k|        return input.get_allocated_string().c_str();
  426|   318k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  563|   318k|    {
  564|       |        if constexpr (std::is_same_v<CharT, char>) {
  565|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|   318k|        else {
  568|   318k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|   318k|        }
  570|   318k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  509|   318k|    {
  510|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  511|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  512|       |        if constexpr (std::is_same_v<T, float>) {
  513|       |            return ::wcstof_l(str, str_end, cloc);
  514|       |        }
  515|       |        else if constexpr (std::is_same_v<T, double>) {
  516|       |            return ::wcstod_l(str, str_end, cloc);
  517|       |        }
  518|       |        else if constexpr (std::is_same_v<T, long double>) {
  519|       |            return ::wcstold_l(str, str_end, cloc);
  520|       |        }
  521|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  522|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  523|       |        if constexpr (std::is_same_v<T, float>) {
  524|       |            return ::_wcstof_l(str, str_end, cloc);
  525|       |        }
  526|       |        else if constexpr (std::is_same_v<T, double>) {
  527|       |            return ::_wcstod_l(str, str_end, cloc);
  528|       |        }
  529|       |        else if constexpr (std::is_same_v<T, long double>) {
  530|       |            return ::_wcstold_l(str, str_end, cloc);
  531|       |        }
  532|       |#else
  533|   318k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  534|       |        if constexpr (std::is_same_v<T, float>) {
  535|       |            return std::wcstof(str, str_end);
  536|       |        }
  537|       |        else if constexpr (std::is_same_v<T, double>) {
  538|       |            return std::wcstod(str, str_end);
  539|       |        }
  540|   318k|        else if constexpr (std::is_same_v<T, long double>) {
  541|   318k|            return std::wcstold(str, str_end);
  542|   318k|        }
  543|   318k|#endif
  544|   318k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
 1183|  6.88k|{
 1184|  6.88k|    loop_parse_if_eight_decimal_digits(begin, end, val);
 1185|       |
 1186|  24.9k|    while (begin != end) {
  ------------------
  |  Branch (1186:12): [True: 18.6k, False: 6.39k]
  ------------------
 1187|  18.6k|        const auto digit = char_to_int(*begin);
 1188|  18.6k|        if (digit >= 10) {
  ------------------
  |  Branch (1188:13): [True: 486, False: 18.1k]
  ------------------
 1189|    486|            break;
 1190|    486|        }
 1191|  18.1k|        val = 10ull * val + static_cast<uint64_t>(digit);
 1192|  18.1k|        ++begin;
 1193|  18.1k|    }
 1194|       |
 1195|  6.88k|    return begin;
 1196|  6.88k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
 1170|  6.88k|{
 1171|  6.88k|    while (
 1172|  11.2k|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (1172:9): [True: 4.53k, False: 6.72k]
  ------------------
 1173|  11.2k|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (1173:9): [True: 4.38k, False: 156]
  ------------------
 1174|  4.38k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
 1175|  4.38k|                                      get_eight_digits_word(p));
 1176|  4.38k|        p += 8;
 1177|  4.38k|    }
 1178|  6.88k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastImEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1295|  6.88k|{
 1296|  6.88k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 1297|       |
 1298|  6.88k|    uint64_t u64val{};
 1299|  6.88k|    auto ptr = parse_decimal_integer_fast_impl(
 1300|  6.88k|        input.data(), input.data() + input.size(), u64val);
 1301|       |
 1302|  6.88k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1303|  6.88k|    if (SCN_UNLIKELY(
  ------------------
  |  |  986|  6.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 660, False: 6.22k]
  |  |  ------------------
  ------------------
 1304|  6.88k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1305|    660|        return detail::unexpected_scan_error(
 1306|    660|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (1306:13): [True: 0, False: 660]
  ------------------
 1307|    660|                        : scan_error::value_positive_overflow,
 1308|    660|            "Integer overflow");
 1309|    660|    }
 1310|       |
 1311|  6.22k|    val = store_result<T>(u64val, is_negative);
 1312|  6.22k|    return ptr;
 1313|  6.88k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2045|   984k|{
 2046|   984k|    const auto argcount = args.size();
 2047|   984k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2047:9): [True: 202k, False: 781k]
  |  Branch (2047:60): [True: 202k, False: 0]
  ------------------
 2048|   202k|        auto arg = args.get(0);
 2049|   202k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|   202k|    static_cast<    \
  |  | 1056|   202k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2050|   202k|    }
 2051|       |
 2052|   781k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2052:9): [True: 0, False: 781k]
  ------------------
 2053|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2054|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2056|      0|        return vscan_parse_format_string(format, handler);
 2057|      0|    }
 2058|       |
 2059|   781k|    SCN_UNLIKELY_ATTR
 2060|   781k|    {
 2061|   781k|        auto handler = format_handler<false, CharT>{
 2062|   781k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   781k|    static_cast<    \
  |  | 1056|   781k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   781k|    static_cast<    \
  |  | 1056|   781k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   781k|        return vscan_parse_format_string(format, handler);
 2064|   781k|    }
 2065|   781k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1593|  1.83M|{
 1594|  1.83M|    if (format.size() != 2) {
  ------------------
  |  Branch (1594:9): [True: 1.44M, False: 386k]
  ------------------
 1595|  1.44M|        return false;
 1596|  1.44M|    }
 1597|   386k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1597:12): [True: 386k, False: 0]
  |  Branch (1597:39): [True: 386k, False: 0]
  ------------------
 1598|  1.83M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1626|   303k|{
 1627|   303k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 303k]
  |  |  ------------------
  ------------------
 1628|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1629|      0|                                             "Argument #0 not found");
 1630|      0|    }
 1631|       |
 1632|   303k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  985|   303k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 303k]
  |  |  ------------------
  ------------------
 1633|      0|        auto reader = impl::default_arg_reader<
 1634|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1635|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1636|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1637|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1638|      0|    }
 1639|       |
 1640|   303k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1641|   303k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1055|   303k|    static_cast<    \
  |  | 1056|   303k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1642|   303k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|   303k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   303k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   303k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 21.3k, False: 281k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  21.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  21.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  21.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  21.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  21.3k|    }                                                  \
  |  |  |  | 3938|   303k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1643|   281k|    return it.position();
 1644|   303k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1869|   662k|        : format_handler_base{argcount},
 1870|   662k|          parse_ctx{source_tag<Source&&>, format},
 1871|   662k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|   662k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   662k|    static_cast<    \
  |  | 1056|   662k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   662k|    static_cast<    \
  |  | 1056|   662k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|   662k|    {
 1873|   662k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1687|  2.36M|    format_handler_base(size_t argcount) : args_count(argcount)
 1688|  2.36M|    {
 1689|  2.36M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  986|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
 1690|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1691|      0|        }
 1692|  2.36M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1820|   662k|        : contiguous_ctx(source, args, loc)
 1821|   662k|    {
 1822|   662k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|   662k|{
 2011|   662k|    const auto beg = handler.get_ctx().begin();
 2012|   662k|    detail::parse_format_string<false>(format, handler);
 2013|   662k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 71.1k, False: 591k]
  |  |  ------------------
  ------------------
 2014|  71.1k|        return unexpected(err.error());
 2015|  71.1k|    }
 2016|   591k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|   662k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1994|  4.49M|    {
 1995|  4.49M|        return ctx.get();
 1996|  4.49M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1825|  4.49M|    {
 1826|  4.49M|        return contiguous_ctx;
 1827|  4.49M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1876|  1.25M|    {
 1877|  1.25M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 0, False: 1.25M]
  ------------------
 1878|      0|            auto it = get_ctx().begin();
 1879|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 0, False: 0]
  ------------------
 1880|      0|                SCN_UNLIKELY_ATTR
 1881|      0|                return on_error(
 1882|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|      0|            }
 1884|       |
 1885|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|      0|                    detail::make_string_view_from_pointers(begin, end));
 1887|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 0, False: 0]
  ------------------
 1888|      0|                SCN_UNLIKELY_ATTR
 1889|      0|                return on_error({scan_error::invalid_format_string,
 1890|      0|                                 "Invalid encoding in format string"});
 1891|      0|            }
 1892|      0|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 0, False: 0]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|      0|                get_ctx().advance_to(
 1895|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|      0|                auto begin_it = impl::read_while_classic_space(
 1898|      0|                    detail::make_string_view_from_pointers(
 1899|      0|                        detail::to_address(after_space_it),
 1900|      0|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|      0|                begin = detail::to_address(begin_it) - 1;
 1903|      0|                continue;
 1904|      0|            }
 1905|       |
 1906|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 0, False: 0]
  ------------------
 1907|      0|                SCN_UNLIKELY_ATTR
 1908|      0|                return on_error({scan_error::invalid_literal,
 1909|      0|                                 "Unexpected literal character in source"});
 1910|      0|            }
 1911|      0|            get_ctx().advance_to(ranges::next(it));
 1912|      0|        }
 1913|  1.25M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1736|   426k|    {
 1737|   426k|        error = unexpected(err);
 1738|   426k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1648|   662k|{
 1649|   662k|    auto arg = ctx.arg(id);
 1650|   662k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 662k]
  |  |  ------------------
  ------------------
 1651|      0|        handler.on_error("Failed to find argument with ID");
 1652|      0|    }
 1653|   662k|    return arg;
 1654|   662k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1762|  2.36M|    {
 1763|  2.36M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  986|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
 1764|      0|            on_error({scan_error::invalid_format_string,
 1765|      0|                      "Argument ID out-of-range"});
 1766|      0|            return;
 1767|      0|        }
 1768|       |
 1769|  2.36M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  986|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
 1770|      0|            on_error({scan_error::invalid_format_string,
 1771|      0|                      "Argument with this ID has already been scanned"});
 1772|      0|        }
 1773|       |
 1774|  2.36M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  985|  2.36M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 2.36M, False: 0]
  |  |  ------------------
  ------------------
 1775|  2.36M|            visited_args_lower64 |= (1ull << id);
 1776|  2.36M|            return;
 1777|  2.36M|        }
 1778|       |
 1779|      0|        id -= 64;
 1780|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1781|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1746|  2.36M|    {
 1747|  2.36M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  986|  2.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 2.36M]
  |  |  ------------------
  ------------------
 1748|      0|            on_error({scan_error::invalid_format_string,
 1749|      0|                      "Argument ID out-of-range"});
 1750|      0|            return false;
 1751|      0|        }
 1752|       |
 1753|  2.36M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  985|  2.36M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 2.36M, False: 0]
  |  |  ------------------
  ------------------
 1754|  2.36M|            return (visited_args_lower64 >> id) & 1ull;
 1755|  2.36M|        }
 1756|       |
 1757|      0|        id -= 64;
 1758|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1759|  2.36M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1916|   662k|    {
 1917|   662k|        return parse_ctx.next_arg_id();
 1918|   662k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1956|   662k|    {
 1957|   662k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|   662k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|   662k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 0, False: 662k]
  ------------------
 1961|      0|            parse_ctx.advance_to(begin);
 1962|      0|            on_visit_scan_arg(
 1963|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1964|      0|                    parse_ctx, get_custom_ctx()},
 1965|      0|                arg);
 1966|      0|            return parse_ctx.begin();
 1967|      0|        }
 1968|       |
 1969|   662k|        auto specs = detail::format_specs{};
 1970|   662k|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|   662k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|   662k|            detail::get_arg_type(arg)};
 1973|       |
 1974|   662k|        begin = detail::parse_format_specs(begin, end, handler);
 1975|   662k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 0, False: 662k]
  |  Branch (1975:29): [True: 0, False: 662k]
  ------------------
 1976|      0|            SCN_UNLIKELY_ATTR
 1977|      0|            on_error({scan_error::invalid_format_string,
 1978|      0|                      "Missing '}' in format string"});
 1979|      0|            return parse_ctx.begin();
 1980|      0|        }
 1981|   662k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 662k]
  |  |  ------------------
  ------------------
 1982|      0|            return parse_ctx.begin();
 1983|      0|        }
 1984|   662k|        parse_ctx.advance_to(begin);
 1985|       |
 1986|   662k|        on_visit_scan_arg(
 1987|   662k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|   662k|                                           get_ctx().locale()},
 1989|   662k|            arg);
 1990|   662k|        return parse_ctx.begin();
 1991|   662k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1666|   662k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1667|   662k|    {
 1668|   662k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1927|   662k|    {
 1928|   662k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 0, False: 662k]
  |  Branch (1928:13): [True: 0, False: 662k]
  |  Branch (1928:29): [True: 0, False: 662k]
  ------------------
 1929|      0|            SCN_UNLIKELY_ATTR
 1930|      0|            return;
 1931|      0|        }
 1932|       |
 1933|   662k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|   662k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|   662k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 71.1k, False: 591k]
  |  |  ------------------
  ------------------
 1935|  71.1k|            on_error(r.error());
 1936|  71.1k|        }
 1937|   591k|        else {
 1938|   591k|            get_ctx().advance_to(*r);
 1939|   591k|        }
 1940|   662k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1695|  2.36M|    {
 1696|  2.36M|        {
 1697|  2.36M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1697:45): [True: 0, False: 2.36M]
  ------------------
 1698|  2.36M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1698:35): [True: 0, False: 2.36M]
  ------------------
 1699|  2.36M|                                      ? std::numeric_limits<uint64_t>::max()
 1700|  2.36M|                                      : (1ull << args_count_lower64) - 1;
 1701|       |
 1702|  2.36M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1702:17): [True: 0, False: 2.36M]
  ------------------
 1703|      0|                return on_error({scan_error::invalid_format_string,
 1704|      0|                                 "Argument list not exhausted"});
 1705|      0|            }
 1706|  2.36M|        }
 1707|       |
 1708|  2.36M|        if (args_count < 64) {
  ------------------
  |  Branch (1708:13): [True: 2.36M, False: 0]
  ------------------
 1709|  2.36M|            return;
 1710|  2.36M|        }
 1711|       |
 1712|      0|        auto last_args_count = args_count - 64;
 1713|      0|        for (auto it = visited_args_upper.begin();
 1714|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1714:14): [True: 0, False: 0]
  ------------------
 1715|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1715:17): [True: 0, False: 0]
  ------------------
 1716|      0|                return on_error({scan_error::invalid_format_string,
 1717|      0|                                 "Argument list not exhausted"});
 1718|      0|            }
 1719|      0|            last_args_count -= 8;
 1720|      0|        }
 1721|       |
 1722|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1723|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1723:13): [True: 0, False: 0]
  ------------------
 1724|      0|            return on_error({scan_error::invalid_format_string,
 1725|      0|                             "Argument list not exhausted"});
 1726|      0|        }
 1727|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1741|  9.45M|    {
 1742|  9.45M|        return error;
 1743|  9.45M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1869|   781k|        : format_handler_base{argcount},
 1870|   781k|          parse_ctx{source_tag<Source&&>, format},
 1871|   781k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|   781k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   781k|    static_cast<    \
  |  | 1056|   781k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   781k|    static_cast<    \
  |  | 1056|   781k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|   781k|    {
 1873|   781k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1796|   781k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1055|   781k|    static_cast<    \
  |  | 1056|   781k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1797|   781k|    {
 1798|   781k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|   781k|{
 2011|   781k|    const auto beg = handler.get_ctx().begin();
 2012|   781k|    detail::parse_format_string<false>(format, handler);
 2013|   781k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|   781k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 71.1k, False: 710k]
  |  |  ------------------
  ------------------
 2014|  71.1k|        return unexpected(err.error());
 2015|  71.1k|    }
 2016|   710k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|   781k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1994|  5.33M|    {
 1995|  5.33M|        return ctx.get();
 1996|  5.33M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1801|  5.33M|    {
 1802|  5.33M|        return ctx;
 1803|  5.33M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1876|  1.49M|    {
 1877|  1.49M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 0, False: 1.49M]
  ------------------
 1878|      0|            auto it = get_ctx().begin();
 1879|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 0, False: 0]
  ------------------
 1880|      0|                SCN_UNLIKELY_ATTR
 1881|      0|                return on_error(
 1882|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|      0|            }
 1884|       |
 1885|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|      0|                    detail::make_string_view_from_pointers(begin, end));
 1887|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 0, False: 0]
  ------------------
 1888|      0|                SCN_UNLIKELY_ATTR
 1889|      0|                return on_error({scan_error::invalid_format_string,
 1890|      0|                                 "Invalid encoding in format string"});
 1891|      0|            }
 1892|      0|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 0, False: 0]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|      0|                get_ctx().advance_to(
 1895|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|      0|                auto begin_it = impl::read_while_classic_space(
 1898|      0|                    detail::make_string_view_from_pointers(
 1899|      0|                        detail::to_address(after_space_it),
 1900|      0|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|      0|                begin = detail::to_address(begin_it) - 1;
 1903|      0|                continue;
 1904|      0|            }
 1905|       |
 1906|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 0, False: 0]
  ------------------
 1907|      0|                SCN_UNLIKELY_ATTR
 1908|      0|                return on_error({scan_error::invalid_literal,
 1909|      0|                                 "Unexpected literal character in source"});
 1910|      0|            }
 1911|      0|            get_ctx().advance_to(ranges::next(it));
 1912|      0|        }
 1913|  1.49M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1648|   781k|{
 1649|   781k|    auto arg = ctx.arg(id);
 1650|   781k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|   781k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 781k]
  |  |  ------------------
  ------------------
 1651|      0|        handler.on_error("Failed to find argument with ID");
 1652|      0|    }
 1653|   781k|    return arg;
 1654|   781k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1916|   781k|    {
 1917|   781k|        return parse_ctx.next_arg_id();
 1918|   781k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1956|   781k|    {
 1957|   781k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|   781k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|   781k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 0, False: 781k]
  ------------------
 1961|      0|            parse_ctx.advance_to(begin);
 1962|      0|            on_visit_scan_arg(
 1963|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1964|      0|                    parse_ctx, get_custom_ctx()},
 1965|      0|                arg);
 1966|      0|            return parse_ctx.begin();
 1967|      0|        }
 1968|       |
 1969|   781k|        auto specs = detail::format_specs{};
 1970|   781k|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|   781k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|   781k|            detail::get_arg_type(arg)};
 1973|       |
 1974|   781k|        begin = detail::parse_format_specs(begin, end, handler);
 1975|   781k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 0, False: 781k]
  |  Branch (1975:29): [True: 0, False: 781k]
  ------------------
 1976|      0|            SCN_UNLIKELY_ATTR
 1977|      0|            on_error({scan_error::invalid_format_string,
 1978|      0|                      "Missing '}' in format string"});
 1979|      0|            return parse_ctx.begin();
 1980|      0|        }
 1981|   781k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|   781k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 781k]
  |  |  ------------------
  ------------------
 1982|      0|            return parse_ctx.begin();
 1983|      0|        }
 1984|   781k|        parse_ctx.advance_to(begin);
 1985|       |
 1986|   781k|        on_visit_scan_arg(
 1987|   781k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|   781k|                                           get_ctx().locale()},
 1989|   781k|            arg);
 1990|   781k|        return parse_ctx.begin();
 1991|   781k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 1666|   781k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1667|   781k|    {
 1668|   781k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1927|   781k|    {
 1928|   781k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 0, False: 781k]
  |  Branch (1928:13): [True: 0, False: 781k]
  |  Branch (1928:29): [True: 0, False: 781k]
  ------------------
 1929|      0|            SCN_UNLIKELY_ATTR
 1930|      0|            return;
 1931|      0|        }
 1932|       |
 1933|   781k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|   781k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|   781k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   781k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 71.1k, False: 710k]
  |  |  ------------------
  ------------------
 1935|  71.1k|            on_error(r.error());
 1936|  71.1k|        }
 1937|   710k|        else {
 1938|   710k|            get_ctx().advance_to(*r);
 1939|   710k|        }
 1940|   781k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2025|   847k|{
 2026|   847k|    const auto argcount = args.size();
 2027|   847k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2027:9): [True: 184k, False: 662k]
  |  Branch (2027:60): [True: 184k, False: 0]
  ------------------
 2028|   184k|        auto arg = args.get(0);
 2029|   184k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|   184k|    static_cast<    \
  |  | 1056|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2030|   184k|    }
 2031|       |
 2032|   662k|    auto handler = format_handler<true, CharT>{
 2033|   662k|        ranges::subrange<const CharT*>{source.data(),
 2034|   662k|                                       source.data() + source.size()},
 2035|   662k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   662k|    static_cast<    \
  |  | 1056|   662k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   662k|    static_cast<    \
  |  | 1056|   662k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2036|   662k|    return vscan_parse_format_string(format, handler);
 2037|   847k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1606|   276k|{
 1607|   276k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 276k]
  |  |  ------------------
  ------------------
 1608|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1609|      0|                                             "Argument #0 not found");
 1610|      0|    }
 1611|       |
 1612|   276k|    auto reader =
 1613|   276k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1614|   276k|            ranges::subrange<const CharT*>{source.data(),
 1615|   276k|                                           source.data() + source.size()},
 1616|   276k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1055|   276k|    static_cast<    \
  |  | 1056|   276k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1617|   276k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|   276k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   276k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   276k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 21.3k, False: 255k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  21.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  21.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  21.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  21.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  21.3k|    }                                                  \
  |  |  |  | 3938|   276k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1618|   255k|    return ranges::distance(source.data(), it);
 1619|   276k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2125|  1.08M|{
 2126|  1.08M|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  985|  1.08M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 992k, False: 92.4k]
  |  |  ------------------
  ------------------
 2127|   992k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  986|   992k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 992k]
  |  |  ------------------
  ------------------
 2128|      0|            return detail::unexpected_scan_error(
 2129|      0|                scan_error::invalid_source_state,
 2130|      0|                "Failed to sync with underlying source");
 2131|      0|        }
 2132|   992k|    }
 2133|  92.4k|    else {
 2134|  92.4k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  986|  92.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 92.4k]
  |  |  ------------------
  ------------------
 2135|      0|            return detail::unexpected_scan_error(
 2136|      0|                scan_error::invalid_source_state,
 2137|      0|                "Failed to sync with underlying source");
 2138|      0|        }
 2139|  92.4k|    }
 2140|  1.08M|    return result;
 2141|  1.08M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2025|   573k|{
 2026|   573k|    const auto argcount = args.size();
 2027|   573k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2027:9): [True: 112k, False: 460k]
  |  Branch (2027:60): [True: 112k, False: 0]
  ------------------
 2028|   112k|        auto arg = args.get(0);
 2029|   112k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|   112k|    static_cast<    \
  |  | 1056|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2030|   112k|    }
 2031|       |
 2032|   460k|    auto handler = format_handler<true, CharT>{
 2033|   460k|        ranges::subrange<const CharT*>{source.data(),
 2034|   460k|                                       source.data() + source.size()},
 2035|   460k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   460k|    static_cast<    \
  |  | 1056|   460k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   460k|    static_cast<    \
  |  | 1056|   460k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2036|   460k|    return vscan_parse_format_string(format, handler);
 2037|   573k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1593|  1.14M|{
 1594|  1.14M|    if (format.size() != 2) {
  ------------------
  |  Branch (1594:9): [True: 919k, False: 225k]
  ------------------
 1595|   919k|        return false;
 1596|   919k|    }
 1597|   225k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1597:12): [True: 225k, False: 0]
  |  Branch (1597:39): [True: 225k, False: 0]
  ------------------
 1598|  1.14M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1606|   169k|{
 1607|   169k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 169k]
  |  |  ------------------
  ------------------
 1608|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1609|      0|                                             "Argument #0 not found");
 1610|      0|    }
 1611|       |
 1612|   169k|    auto reader =
 1613|   169k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1614|   169k|            ranges::subrange<const CharT*>{source.data(),
 1615|   169k|                                           source.data() + source.size()},
 1616|   169k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1055|   169k|    static_cast<    \
  |  | 1056|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1617|   169k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|   169k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   169k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   169k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 42.6k, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  42.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  42.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  42.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  42.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  42.6k|    }                                                  \
  |  |  |  | 3938|   169k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1618|   126k|    return ranges::distance(source.data(), it);
 1619|   169k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1869|   460k|        : format_handler_base{argcount},
 1870|   460k|          parse_ctx{source_tag<Source&&>, format},
 1871|   460k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|   460k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   460k|    static_cast<    \
  |  | 1056|   460k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   460k|    static_cast<    \
  |  | 1056|   460k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|   460k|    {
 1873|   460k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1820|   460k|        : contiguous_ctx(source, args, loc)
 1821|   460k|    {
 1822|   460k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|   460k|{
 2011|   460k|    const auto beg = handler.get_ctx().begin();
 2012|   460k|    detail::parse_format_string<false>(format, handler);
 2013|   460k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|   460k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 142k, False: 317k]
  |  |  ------------------
  ------------------
 2014|   142k|        return unexpected(err.error());
 2015|   142k|    }
 2016|   317k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|   460k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1994|  2.93M|    {
 1995|  2.93M|        return ctx.get();
 1996|  2.93M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1825|  2.93M|    {
 1826|  2.93M|        return contiguous_ctx;
 1827|  2.93M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1876|   777k|    {
 1877|   777k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 0, False: 777k]
  ------------------
 1878|      0|            auto it = get_ctx().begin();
 1879|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 0, False: 0]
  ------------------
 1880|      0|                SCN_UNLIKELY_ATTR
 1881|      0|                return on_error(
 1882|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|      0|            }
 1884|       |
 1885|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|      0|                    detail::make_string_view_from_pointers(begin, end));
 1887|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 0, False: 0]
  ------------------
 1888|      0|                SCN_UNLIKELY_ATTR
 1889|      0|                return on_error({scan_error::invalid_format_string,
 1890|      0|                                 "Invalid encoding in format string"});
 1891|      0|            }
 1892|      0|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 0, False: 0]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|      0|                get_ctx().advance_to(
 1895|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|      0|                auto begin_it = impl::read_while_classic_space(
 1898|      0|                    detail::make_string_view_from_pointers(
 1899|      0|                        detail::to_address(after_space_it),
 1900|      0|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|      0|                begin = detail::to_address(begin_it) - 1;
 1903|      0|                continue;
 1904|      0|            }
 1905|       |
 1906|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 0, False: 0]
  ------------------
 1907|      0|                SCN_UNLIKELY_ATTR
 1908|      0|                return on_error({scan_error::invalid_literal,
 1909|      0|                                 "Unexpected literal character in source"});
 1910|      0|            }
 1911|      0|            get_ctx().advance_to(ranges::next(it));
 1912|      0|        }
 1913|   777k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1648|   460k|{
 1649|   460k|    auto arg = ctx.arg(id);
 1650|   460k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|   460k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 460k]
  |  |  ------------------
  ------------------
 1651|      0|        handler.on_error("Failed to find argument with ID");
 1652|      0|    }
 1653|   460k|    return arg;
 1654|   460k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1916|   460k|    {
 1917|   460k|        return parse_ctx.next_arg_id();
 1918|   460k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1956|   460k|    {
 1957|   460k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|   460k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|   460k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 0, False: 460k]
  ------------------
 1961|      0|            parse_ctx.advance_to(begin);
 1962|      0|            on_visit_scan_arg(
 1963|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1964|      0|                    parse_ctx, get_custom_ctx()},
 1965|      0|                arg);
 1966|      0|            return parse_ctx.begin();
 1967|      0|        }
 1968|       |
 1969|   460k|        auto specs = detail::format_specs{};
 1970|   460k|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|   460k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|   460k|            detail::get_arg_type(arg)};
 1973|       |
 1974|   460k|        begin = detail::parse_format_specs(begin, end, handler);
 1975|   460k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 0, False: 460k]
  |  Branch (1975:29): [True: 0, False: 460k]
  ------------------
 1976|      0|            SCN_UNLIKELY_ATTR
 1977|      0|            on_error({scan_error::invalid_format_string,
 1978|      0|                      "Missing '}' in format string"});
 1979|      0|            return parse_ctx.begin();
 1980|      0|        }
 1981|   460k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|   460k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 460k]
  |  |  ------------------
  ------------------
 1982|      0|            return parse_ctx.begin();
 1983|      0|        }
 1984|   460k|        parse_ctx.advance_to(begin);
 1985|       |
 1986|   460k|        on_visit_scan_arg(
 1987|   460k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|   460k|                                           get_ctx().locale()},
 1989|   460k|            arg);
 1990|   460k|        return parse_ctx.begin();
 1991|   460k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1666|   460k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1667|   460k|    {
 1668|   460k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1927|   460k|    {
 1928|   460k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 0, False: 460k]
  |  Branch (1928:13): [True: 0, False: 460k]
  |  Branch (1928:29): [True: 0, False: 460k]
  ------------------
 1929|      0|            SCN_UNLIKELY_ATTR
 1930|      0|            return;
 1931|      0|        }
 1932|       |
 1933|   460k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|   460k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|   460k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   460k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 142k, False: 317k]
  |  |  ------------------
  ------------------
 1935|   142k|            on_error(r.error());
 1936|   142k|        }
 1937|   317k|        else {
 1938|   317k|            get_ctx().advance_to(*r);
 1939|   317k|        }
 1940|   460k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2045|   572k|{
 2046|   572k|    const auto argcount = args.size();
 2047|   572k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2047:9): [True: 112k, False: 459k]
  |  Branch (2047:60): [True: 112k, False: 0]
  ------------------
 2048|   112k|        auto arg = args.get(0);
 2049|   112k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1055|   112k|    static_cast<    \
  |  | 1056|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2050|   112k|    }
 2051|       |
 2052|   459k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2052:9): [True: 0, False: 459k]
  ------------------
 2053|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2054|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2056|      0|        return vscan_parse_format_string(format, handler);
 2057|      0|    }
 2058|       |
 2059|   459k|    SCN_UNLIKELY_ATTR
 2060|   459k|    {
 2061|   459k|        auto handler = format_handler<false, CharT>{
 2062|   459k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   459k|    static_cast<    \
  |  | 1056|   459k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1055|   459k|    static_cast<    \
  |  | 1056|   459k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   459k|        return vscan_parse_format_string(format, handler);
 2064|   459k|    }
 2065|   459k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1626|   169k|{
 1627|   169k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 169k]
  |  |  ------------------
  ------------------
 1628|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1629|      0|                                             "Argument #0 not found");
 1630|      0|    }
 1631|       |
 1632|   169k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  985|   169k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 169k]
  |  |  ------------------
  ------------------
 1633|      0|        auto reader = impl::default_arg_reader<
 1634|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1635|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1055|      0|    static_cast<    \
  |  | 1056|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1636|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1637|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1638|      0|    }
 1639|       |
 1640|   169k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1641|   169k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1055|   169k|    static_cast<    \
  |  | 1056|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1642|   169k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3939|   169k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   169k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   169k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 42.6k, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  42.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  42.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  42.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  42.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  42.6k|    }                                                  \
  |  |  |  | 3938|   169k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1643|   126k|    return it.position();
 1644|   169k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1869|   459k|        : format_handler_base{argcount},
 1870|   459k|          parse_ctx{source_tag<Source&&>, format},
 1871|   459k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1057|   459k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   459k|    static_cast<    \
  |  | 1056|   459k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1055|   459k|    static_cast<    \
  |  | 1056|   459k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1872|   459k|    {
 1873|   459k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1796|   459k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1055|   459k|    static_cast<    \
  |  | 1056|   459k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1797|   459k|    {
 1798|   459k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2010|   459k|{
 2011|   459k|    const auto beg = handler.get_ctx().begin();
 2012|   459k|    detail::parse_format_string<false>(format, handler);
 2013|   459k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  986|   459k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 142k, False: 317k]
  |  |  ------------------
  ------------------
 2014|   142k|        return unexpected(err.error());
 2015|   142k|    }
 2016|   317k|    return ranges::distance(beg, handler.get_ctx().begin());
 2017|   459k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1994|  2.93M|    {
 1995|  2.93M|        return ctx.get();
 1996|  2.93M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1801|  2.93M|    {
 1802|  2.93M|        return ctx;
 1803|  2.93M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1876|   777k|    {
 1877|   777k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1877:16): [True: 0, False: 777k]
  ------------------
 1878|      0|            auto it = get_ctx().begin();
 1879|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1879:17): [True: 0, False: 0]
  ------------------
 1880|      0|                SCN_UNLIKELY_ATTR
 1881|      0|                return on_error(
 1882|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1883|      0|            }
 1884|       |
 1885|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1886|      0|                    detail::make_string_view_from_pointers(begin, end));
 1887|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1887:17): [True: 0, False: 0]
  ------------------
 1888|      0|                SCN_UNLIKELY_ATTR
 1889|      0|                return on_error({scan_error::invalid_format_string,
 1890|      0|                                 "Invalid encoding in format string"});
 1891|      0|            }
 1892|      0|            else if (is_space) {
  ------------------
  |  Branch (1892:22): [True: 0, False: 0]
  ------------------
 1893|       |                // Skip all whitespace in input
 1894|      0|                get_ctx().advance_to(
 1895|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1896|       |                // And, skip all whitespace in the format string
 1897|      0|                auto begin_it = impl::read_while_classic_space(
 1898|      0|                    detail::make_string_view_from_pointers(
 1899|      0|                        detail::to_address(after_space_it),
 1900|      0|                        detail::to_address(end)));
 1901|       |                // (-1 because of the for loop ++begin)
 1902|      0|                begin = detail::to_address(begin_it) - 1;
 1903|      0|                continue;
 1904|      0|            }
 1905|       |
 1906|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1906:17): [True: 0, False: 0]
  ------------------
 1907|      0|                SCN_UNLIKELY_ATTR
 1908|      0|                return on_error({scan_error::invalid_literal,
 1909|      0|                                 "Unexpected literal character in source"});
 1910|      0|            }
 1911|      0|            get_ctx().advance_to(ranges::next(it));
 1912|      0|        }
 1913|   777k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1648|   459k|{
 1649|   459k|    auto arg = ctx.arg(id);
 1650|   459k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  986|   459k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 459k]
  |  |  ------------------
  ------------------
 1651|      0|        handler.on_error("Failed to find argument with ID");
 1652|      0|    }
 1653|   459k|    return arg;
 1654|   459k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1916|   459k|    {
 1917|   459k|        return parse_ctx.next_arg_id();
 1918|   459k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1956|   459k|    {
 1957|   459k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1958|   459k|        set_arg_as_visited(arg_id);
 1959|       |
 1960|   459k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1960:13): [True: 0, False: 459k]
  ------------------
 1961|      0|            parse_ctx.advance_to(begin);
 1962|      0|            on_visit_scan_arg(
 1963|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1964|      0|                    parse_ctx, get_custom_ctx()},
 1965|      0|                arg);
 1966|      0|            return parse_ctx.begin();
 1967|      0|        }
 1968|       |
 1969|   459k|        auto specs = detail::format_specs{};
 1970|   459k|        detail::specs_checker<specs_handler<context_type>> handler{
 1971|   459k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1972|   459k|            detail::get_arg_type(arg)};
 1973|       |
 1974|   459k|        begin = detail::parse_format_specs(begin, end, handler);
 1975|   459k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1975:13): [True: 0, False: 459k]
  |  Branch (1975:29): [True: 0, False: 459k]
  ------------------
 1976|      0|            SCN_UNLIKELY_ATTR
 1977|      0|            on_error({scan_error::invalid_format_string,
 1978|      0|                      "Missing '}' in format string"});
 1979|      0|            return parse_ctx.begin();
 1980|      0|        }
 1981|   459k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  986|   459k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 459k]
  |  |  ------------------
  ------------------
 1982|      0|            return parse_ctx.begin();
 1983|      0|        }
 1984|   459k|        parse_ctx.advance_to(begin);
 1985|       |
 1986|   459k|        on_visit_scan_arg(
 1987|   459k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1988|   459k|                                           get_ctx().locale()},
 1989|   459k|            arg);
 1990|   459k|        return parse_ctx.begin();
 1991|   459k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 1666|   459k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1667|   459k|    {
 1668|   459k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1927|   459k|    {
 1928|   459k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1928:13): [True: 0, False: 459k]
  |  Branch (1928:13): [True: 0, False: 459k]
  |  Branch (1928:29): [True: 0, False: 459k]
  ------------------
 1929|      0|            SCN_UNLIKELY_ATTR
 1930|      0|            return;
 1931|      0|        }
 1932|       |
 1933|   459k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1057|   459k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1934|   459k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   459k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 142k, False: 317k]
  |  |  ------------------
  ------------------
 1935|   142k|            on_error(r.error());
 1936|   142k|        }
 1937|   317k|        else {
 1938|   317k|            get_ctx().advance_to(*r);
 1939|   317k|        }
 1940|   459k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2125|   629k|{
 2126|   629k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  985|   629k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 444k, False: 184k]
  |  |  ------------------
  ------------------
 2127|   444k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  986|   444k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 444k]
  |  |  ------------------
  ------------------
 2128|      0|            return detail::unexpected_scan_error(
 2129|      0|                scan_error::invalid_source_state,
 2130|      0|                "Failed to sync with underlying source");
 2131|      0|        }
 2132|   444k|    }
 2133|   184k|    else {
 2134|   184k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  986|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 184k]
  |  |  ------------------
  ------------------
 2135|      0|            return detail::unexpected_scan_error(
 2136|      0|                scan_error::invalid_source_state,
 2137|      0|                "Failed to sync with underlying source");
 2138|      0|        }
 2139|   184k|    }
 2140|   629k|    return result;
 2141|   629k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2071|  92.2k|{
 2072|  92.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1057|  92.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2073|  92.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2071|   101k|{
 2072|   101k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1057|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2073|   101k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2071|  56.4k|{
 2072|  56.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1057|  56.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2073|  56.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2071|  56.4k|{
 2072|  56.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1057|  56.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2073|  56.4k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|  2.37k|{
 1462|  2.37k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|  2.37k|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|  2.37k|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|  2.37k|            return transcode_to_string_impl_to32(src, dest);
 1473|  2.37k|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|  2.37k|    SCN_EXPECT(false);
  ------------------
  |  | 1051|  2.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|  2.37k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|  2.37k|{
 1355|  2.37k|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|  2.37k|    auto it = src.begin();
 1358|   675k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 673k, False: 2.37k]
  ------------------
 1359|   673k|        auto res = get_next_code_point(
 1360|   673k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   673k|                                                                 src.end()));
 1362|   673k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  986|   673k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.99k, False: 671k]
  |  |  ------------------
  ------------------
 1363|  1.99k|            dest.push_back(DestCharT{0xfffd});
 1364|  1.99k|        }
 1365|   671k|        else {
 1366|   671k|            dest.push_back(res.value);
 1367|   671k|        }
 1368|   673k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   673k|    }
 1370|  2.37k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   978k|{
 1279|   978k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1051|   978k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   978k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   978k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   978k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|   978k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 27.5k, False: 950k]
  |  |  ------------------
  ------------------
 1283|  27.5k|        return {get_start_for_next_code_point(input),
 1284|  27.5k|                detail::invalid_code_point};
 1285|  27.5k|    }
 1286|   950k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  986|   950k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.64k, False: 947k]
  |  |  ------------------
  ------------------
 1287|  3.64k|        return {input.end(), detail::invalid_code_point};
 1288|  3.64k|    }
 1289|       |
 1290|   947k|    return {input.begin() + len,
 1291|   947k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   950k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  27.5k|{
 1265|  27.5k|    auto it = input.begin();
 1266|   171k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 163k, False: 7.52k]
  ------------------
 1267|   163k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 20.0k, False: 143k]
  ------------------
 1268|  20.0k|            break;
 1269|  20.0k|        }
 1270|   163k|    }
 1271|  27.5k|    return it;
 1272|  27.5k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  29.4M|    constexpr parse_error(code c) : m_code(c)
  808|  29.4M|    {
  809|  29.4M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1036|  29.4M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  29.4M|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  13.2M|    {
  823|  13.2M|        return a.m_code == b.m_code;
  824|  13.2M|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|  3.45M|    {
  827|  3.45M|        return !(a == b);
  828|  3.45M|    }
_ZN3scn2v44impl16clocale_restorerC2Ei:
 1825|  1.34M|    clocale_restorer(int cat) : m_category(cat)
 1826|  1.34M|    {
 1827|  1.34M|        const auto loc = std::setlocale(cat, nullptr);
 1828|  1.34M|        std::strcpy(m_locbuf, loc);
 1829|  1.34M|    }
_ZN3scn2v44impl16clocale_restorerD2Ev:
 1831|  1.34M|    {
 1832|       |        // Restore locale to what it was before
 1833|  1.34M|        std::setlocale(m_category, m_locbuf);
 1834|  1.34M|    }
_ZN3scn2v44impl25set_clocale_classic_guardC2Ei:
 1854|  1.34M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1855|  1.34M|    {
 1856|  1.34M|        std::setlocale(cat, "C");
 1857|  1.34M|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3050|  2.36M|    {
 3051|  2.36M|        return m_msg == nullptr;
 3052|  2.36M|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3686|  2.33M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  15.1M|{
  458|  15.1M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  15.1M|        static_cast<unsigned char>(ch))];
  460|  15.1M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   202k|{
  469|   202k|    return static_cast<unsigned char>(ch) <= 127;
  470|   202k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  3.47M|{
  539|  3.47M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  3.47M|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  10.9M|{
  784|  10.9M|    return e != eof_error::good;
  785|  10.9M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  46.6k|{
  798|  46.6k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1051|  46.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  46.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  46.6k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  46.6k|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   220k|{
  845|   220k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1051|   220k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   220k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   220k|    return parse_error::eof;
  847|   220k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.45M|{
  854|  3.45M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.45M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.45M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 80.5k, False: 3.37M]
  ------------------
  859|  80.5k|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|  80.5k|    }
  861|       |
  862|  3.37M|    return detail::unexpected_scan_error(code, msg);
  863|  3.45M|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.45M|{
  868|  3.45M|    return [code, msg](parse_error err) {
  869|  3.45M|        assert(err != parse_error::good);
  870|  3.45M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  3.45M|    };
  872|  3.45M|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2319|  2.42M|{
 2320|  2.42M|    unsigned char running_diff{0};
 2321|  9.10M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2321:24): [True: 6.68M, False: 2.42M]
  ------------------
 2322|  6.68M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2323|  6.68M|    }
 2324|  2.42M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2324:12): [True: 76.0k, False: 2.34M]
  |  Branch (2324:33): [True: 18.7k, False: 2.32M]
  ------------------
 2325|  2.42M|}
_ZN3scn2v44impl11char_to_intEc:
 3239|  18.4M|{
 3240|  18.4M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3241|  18.4M|}
_ZN3scn2v44impl11char_to_intEw:
 3243|  3.46M|{
 3244|  3.46M|#if WCHAR_MIN < 0
 3245|  3.46M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3245:9): [True: 3.44M, False: 15.0k]
  |  Branch (3245:20): [True: 2.20M, False: 1.24M]
  ------------------
 3246|       |#else
 3247|       |    if (ch <= 255) {
 3248|       |#endif
 3249|  2.20M|        return char_to_int(static_cast<char>(ch));
 3250|  2.20M|    }
 3251|  1.26M|    return 255;
 3252|  3.46M|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6046|  1.93M|{
 6047|  1.93M|    if (specs.width != 0) {
  ------------------
  |  Branch (6047:9): [True: 0, False: 1.93M]
  ------------------
 6048|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6048:13): [True: 0, False: 0]
  ------------------
 6049|      0|            return detail::unexpected_scan_error(
 6050|      0|                scan_error::length_too_short,
 6051|      0|                "Scanned value too narrow, width did not exceed what "
 6052|      0|                "was specified in the format string");
 6053|      0|        }
 6054|      0|    }
 6055|  1.93M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6055:9): [True: 0, False: 1.93M]
  ------------------
 6056|       |        // Ensured by take_width_view
 6057|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  | 1052|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6058|      0|                   specs.precision);
 6059|      0|    }
 6060|  1.93M|    return {};
 6061|  1.93M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.73M|    {
  304|  2.73M|        ranges::advance(x, n);
  305|  2.73M|        return x;
  306|  2.73M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.73M|    {
  268|  2.73M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.73M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  2.73M|    {
  151|  2.73M|        i += n;
  152|  2.73M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  3.24M|    {
  108|  3.24M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.24M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  3.24M|    {
   87|  3.24M|        return s - i;
   88|  3.24M|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.03M|    {
  304|  2.03M|        ranges::advance(x, n);
  305|  2.03M|        return x;
  306|  2.03M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.03M|    {
  268|  2.03M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.03M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  2.03M|    {
  151|  2.03M|        i += n;
  152|  2.03M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   588k|    {
  108|   588k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   588k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   588k|    {
   87|   588k|        return s - i;
   88|   588k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|  1.91M|    {
 2993|  1.91M|        return m_current;
 2994|  1.91M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|  1.23M|    {
 2993|  1.23M|        return m_current;
 2994|  1.23M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|  1.08M|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|  1.08M|                               detail::char_t<Range>>::forward_iterator>) {
  990|  1.08M|        auto beg = r.begin();
  991|  1.08M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 1.08M, False: 0]
  ------------------
  992|  1.08M|            return false;
  993|  1.08M|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|  1.08M|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|  2.84M|{
 1956|  2.84M|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1051|  2.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  2.84M|    else {
 1967|  2.84M|        auto it = range.begin();
 1968|  2.84M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 1.75M, False: 1.09M]
  ------------------
 1969|  1.75M|            return ranges::next(it, count);
 1970|  1.75M|        }
 1971|       |
 1972|  4.33M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 3.27M, False: 1.05M]
  ------------------
 1973|  3.27M|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 35.4k, False: 3.24M]
  ------------------
 1974|  35.4k|                return unexpected(eof_error::eof);
 1975|  35.4k|            }
 1976|  3.27M|        }
 1977|       |
 1978|  1.05M|        return it;
 1979|  1.09M|    }
 1980|  2.84M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  2.84M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  2.84M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  2.84M|        else {
 1107|  2.84M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 2.84M, False: 0]
  ------------------
 1108|  2.84M|                return static_cast<size_t>(
 1109|  2.84M|                    r.begin().parent()->chars_available() -
 1110|  2.84M|                    r.begin().position());
 1111|  2.84M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  2.84M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  2.84M|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  28.4M|    {
  763|  28.4M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|  28.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  28.4M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.59M|        : m_fptr([](storage fn,
  743|  2.59M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.59M|              cvref<T> obj = *get<T>(fn);
  745|  2.59M|              if constexpr (std::is_void_v<R>) {
  746|  2.59M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.59M|              }
  748|  2.59M|              else {
  749|  2.59M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.59M|              }
  751|  2.59M|          }),
  752|  2.59M|          m_storage(std::addressof(f))
  753|  2.59M|    {
  754|  2.59M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  14.2M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.2M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  14.2M|              else {
  749|  14.2M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.2M|              }
  751|  14.2M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  14.2M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  14.2M|        else if constexpr (std::is_object_v<T>) {
  688|  14.2M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  14.2M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.59M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.59M|        {
  662|  2.59M|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  8.66M|    {
  763|  8.66M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|  8.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  8.66M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.20M|        : m_fptr([](storage fn,
  743|  2.20M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.20M|              cvref<T> obj = *get<T>(fn);
  745|  2.20M|              if constexpr (std::is_void_v<R>) {
  746|  2.20M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.20M|              }
  748|  2.20M|              else {
  749|  2.20M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.20M|              }
  751|  2.20M|          }),
  752|  2.20M|          m_storage(std::addressof(f))
  753|  2.20M|    {
  754|  2.20M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  3.90M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.90M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.90M|              else {
  749|  3.90M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.90M|              }
  751|  3.90M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  3.90M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.90M|        else if constexpr (std::is_object_v<T>) {
  688|  3.90M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.90M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.20M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.20M|        {
  662|  2.20M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|   781k|    {
 6075|   781k|        const bool need_skipped_width =
 6076|   781k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 781k]
  |  Branch (6076:33): [True: 0, False: 781k]
  ------------------
 6077|   781k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   781k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 781k]
  ------------------
 6081|   781k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 781k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   781k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 781k, False: 0]
  |  Branch (6085:56): [True: 781k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   781k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 781k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|  1.54M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3939|   781k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   781k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   781k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   781k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 14.8k, False: 767k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  14.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  14.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  14.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  14.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  14.8k|    }                                                  \
  |  |  |  | 3938|   781k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   767k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  1.54M|                            make_eof_scan_error));
 6096|       |
 6097|  1.54M|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 767k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   767k|            return result_type{it, 0};
 6105|  1.54M|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   781k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  2.07M|{
 2075|  2.07M|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  2.07M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  2.07M|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  2.07M|    else {
 2060|  2.07M|        auto first = range.begin();
 2061|  11.5M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 11.5M, False: 27.2k]
  ------------------
 2062|  11.5M|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 2.04M, False: 9.47M]
  ------------------
 2063|  2.04M|                return first;
 2064|  2.04M|            }
 2065|  11.5M|        }
 2066|  27.2k|        return first;
 2067|  2.07M|    }
 2068|  2.07M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.82M|    {
  108|  1.82M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.82M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.82M|    {
   94|  1.82M|        iter_difference_t<I> counter{0};
   95|  18.5M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 16.7M, False: 1.82M]
  ------------------
   96|  16.7M|            ++i;
   97|  16.7M|            ++counter;
   98|  16.7M|        }
   99|  1.82M|        return counter;
  100|  1.82M|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.45M|    return [code, msg](parse_error err) {
  869|  3.45M|        assert(err != parse_error::good);
  870|  3.45M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  3.45M|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|   400k|    {
 1879|   400k|        auto stdloc = loc.get<std::locale>();
 1880|   400k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   400k|        grouping = numpunct.grouping();
 1882|   400k|        thousands_sep =
 1883|   400k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 400k]
  ------------------
 1884|   400k|        decimal_point = numpunct.decimal_point();
 1885|   400k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|   400k|{
 1816|   400k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 400k, False: 0]
  ------------------
 1817|   400k|        return std::use_facet<Facet>(stdloc);
 1818|   400k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   400k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|  3.03M|{
 1945|  3.03M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  3.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 19.8k, False: 3.01M]
  |  |  ------------------
  ------------------
 1946|  19.8k|        return unexpected(e);
 1947|  19.8k|    }
 1948|       |
 1949|  3.01M|    return ranges::next(range.begin());
 1950|  3.03M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  4.42M|{
  951|  4.42M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|  4.42M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 39.5k, False: 4.38M]
  |  |  ------------------
  ------------------
  952|  39.5k|        return eof_error::eof;
  953|  39.5k|    }
  954|  4.38M|    return eof_error::good;
  955|  4.42M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  6.16M|{
  945|  6.16M|    return is_range_eof(r.begin(), r.end());
  946|  6.16M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  6.16M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  6.16M|    {
  938|  6.16M|        return begin == end;
  939|  6.16M|    }
  940|  6.16M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  3.01M|    {
  296|  3.01M|        ++x;
  297|  3.01M|        return x;
  298|  3.01M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3257|  1.17M|{
 3258|  1.17M|    auto r = read_one_of_code_unit(range, "+-");
 3259|  1.17M|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 888k, False: 281k]
  ------------------
 3260|   888k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 888k, False: 300]
  ------------------
 3261|   888k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   888k|        }
 3263|    300|        return unexpected(eof_error::eof);
 3264|   888k|    }
 3265|       |
 3266|   281k|    auto& it = *r;
 3267|   281k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 117k, False: 164k]
  ------------------
 3268|   117k|        return std::pair{it, sign_type::minus_sign};
 3269|   117k|    }
 3270|   164k|    return std::pair{it, sign_type::plus_sign};
 3271|   281k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|  2.03M|{
 2372|  2.03M|    auto it = read_code_unit(range);
 2373|  2.03M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|  2.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 11.4k, False: 2.01M]
  |  |  ------------------
  ------------------
 2374|  11.4k|        return unexpected(make_eof_parse_error(it.error()));
 2375|  11.4k|    }
 2376|       |
 2377|  3.80M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 3.80M, False: 1.63M]
  ------------------
 2378|  3.80M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 387k, False: 3.41M]
  ------------------
 2379|   387k|            return *it;
 2380|   387k|        }
 2381|  3.80M|    }
 2382|       |
 2383|  1.63M|    return unexpected(parse_error::error);
 2384|  2.01M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|  2.84M|{
 2331|  2.84M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  2.84M|    else {
 2344|  2.84M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  2.84M|            if (ch < 'A' || ch > 'Z') {
 2346|  2.84M|                return ch;
 2347|  2.84M|            }
 2348|  2.84M|            return static_cast<char_type>(ch +
 2349|  2.84M|                                          static_cast<char_type>('a' - 'A'));
 2350|  2.84M|        };
 2351|       |
 2352|  2.84M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3939|  2.84M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  2.84M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  2.84M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  2.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 35.4k, False: 2.80M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  35.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  35.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  35.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  35.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  35.4k|    }                                                  \
  |  |  |  | 3938|  2.84M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  2.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  2.80M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  2.80M|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  2.80M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  986|  2.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.70M, False: 102k]
  |  |  ------------------
  ------------------
 2357|  2.80M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  2.80M|                    return ascii_tolower(a) ==
 2359|  2.80M|                           static_cast<detail::char_t<Range>>(b);
 2360|  2.80M|                }))) {
 2361|  2.70M|            return unexpected(parse_error::error);
 2362|  2.70M|        }
 2363|       |
 2364|   102k|        return it;
 2365|  2.80M|    }
 2366|  2.84M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2344|  3.23M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  3.23M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 2.91M, False: 325k]
  |  Branch (2345:29): [True: 260k, False: 65.0k]
  ------------------
 2346|  3.17M|                return ch;
 2347|  3.17M|            }
 2348|  65.0k|            return static_cast<char_type>(ch +
 2349|  65.0k|                                          static_cast<char_type>('a' - 'A'));
 2350|  3.23M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|  1.00M|{
 2246|  1.00M|    auto it = read_code_unit(range);
 2247|  1.00M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 8.39k, False: 998k]
  |  |  ------------------
  ------------------
 2248|  8.39k|        return unexpected(make_eof_parse_error(it.error()));
 2249|  8.39k|    }
 2250|       |
 2251|   998k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  986|   998k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 810k, False: 188k]
  |  |  ------------------
  ------------------
 2252|   998k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   810k|        return unexpected(parse_error::error);
 2254|   810k|    }
 2255|       |
 2256|   188k|    return *it;
 2257|   998k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|  2.06M|{
 2095|  2.06M|    auto it = read_while_code_unit(range, pred);
 2096|  2.06M|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 848k, False: 1.22M]
  ------------------
 2097|   848k|        return unexpected(parse_error::error);
 2098|   848k|    }
 2099|  1.22M|    return it;
 2100|  2.06M|}
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   948k|    {
 1720|   948k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   948k|                           ranges::common_range<Range>) {
 1737|   948k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   948k|            auto end_seg = range.end().contiguous_segment();
 1739|   948k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  986|   948k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 141k, False: 807k]
  |  |  ------------------
  ------------------
 1740|   948k|                             detail::to_address(end_seg.end()))) {
 1741|   141k|                auto& str = m_storage.emplace();
 1742|   141k|                str.reserve(range.end().position() - range.begin().position());
 1743|   141k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|   141k|                m_view = string_view_type{str};
 1745|   141k|                return;
 1746|   141k|            }
 1747|       |
 1748|   807k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   807k|                                                            end_seg.data());
 1750|   807k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   948k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|  6.47M|    {
 1681|  6.47M|        return m_view;
 1682|  6.47M|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|  3.97M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|   698k|    {
 6117|   698k|        const bool need_skipped_width =
 6118|   698k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 698k]
  |  Branch (6118:33): [True: 0, False: 698k]
  ------------------
 6119|   698k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   698k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 698k]
  ------------------
 6122|   698k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 698k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   698k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 698k, False: 0]
  ------------------
 6131|   698k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 698k]
  ------------------
 6132|   698k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   698k|        return result_type{rng.begin(), 0};
 6156|   698k|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|  1.38M|{
 1945|  1.38M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  1.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 4.85k, False: 1.37M]
  |  |  ------------------
  ------------------
 1946|  4.85k|        return unexpected(e);
 1947|  4.85k|    }
 1948|       |
 1949|  1.37M|    return ranges::next(range.begin());
 1950|  1.38M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  2.60M|{
  951|  2.60M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|  2.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 20.8k, False: 2.58M]
  |  |  ------------------
  ------------------
  952|  20.8k|        return eof_error::eof;
  953|  20.8k|    }
  954|  2.58M|    return eof_error::good;
  955|  2.60M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  2.60M|{
  945|  2.60M|    return is_range_eof(r.begin(), r.end());
  946|  2.60M|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  2.61M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  2.61M|    {
  938|  2.61M|        return begin == end;
  939|  2.61M|    }
  940|  2.61M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.38M|    {
  296|  1.38M|        ++x;
  297|  1.38M|        return x;
  298|  1.38M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|   948k|{
 3258|   948k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   948k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 720k, False: 228k]
  ------------------
 3260|   720k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 720k, False: 96]
  ------------------
 3261|   720k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   720k|        }
 3263|     96|        return unexpected(eof_error::eof);
 3264|   720k|    }
 3265|       |
 3266|   228k|    auto& it = *r;
 3267|   228k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 105k, False: 122k]
  ------------------
 3268|   105k|        return std::pair{it, sign_type::minus_sign};
 3269|   105k|    }
 3270|   122k|    return std::pair{it, sign_type::plus_sign};
 3271|   228k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|  1.09M|{
 2372|  1.09M|    auto it = read_code_unit(range);
 2373|  1.09M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.04k, False: 1.09M]
  |  |  ------------------
  ------------------
 2374|  2.04k|        return unexpected(make_eof_parse_error(it.error()));
 2375|  2.04k|    }
 2376|       |
 2377|  2.05M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 2.05M, False: 842k]
  ------------------
 2378|  2.05M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 253k, False: 1.79M]
  ------------------
 2379|   253k|            return *it;
 2380|   253k|        }
 2381|  2.05M|    }
 2382|       |
 2383|   842k|    return unexpected(parse_error::error);
 2384|  1.09M|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3343|  7.54k|{
 3344|  7.54k|    switch (base) {
 3345|      0|        case 2:
  ------------------
  |  Branch (3345:9): [True: 0, False: 7.54k]
  ------------------
 3346|       |            // allow 0b/0B
 3347|      0|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3348|      0|                    false};
 3349|       |
 3350|      0|        case 8: {
  ------------------
  |  Branch (3350:9): [True: 0, False: 7.54k]
  ------------------
 3351|       |            // allow 0o/0O/0
 3352|      0|            bool zero_parsed = false;
 3353|      0|            auto it = apply_opt(
 3354|      0|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3355|      0|            return {it, 8, zero_parsed};
 3356|      0|        }
 3357|       |
 3358|      0|        case 16:
  ------------------
  |  Branch (3358:9): [True: 0, False: 7.54k]
  ------------------
 3359|       |            // allow 0x/0X
 3360|      0|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3361|      0|                    false};
 3362|       |
 3363|      0|        case 0:
  ------------------
  |  Branch (3363:9): [True: 0, False: 7.54k]
  ------------------
 3364|       |            // detect base
 3365|      0|            return parse_integer_base_prefix_for_detection(range);
 3366|       |
 3367|  7.54k|        default:
  ------------------
  |  Branch (3367:9): [True: 7.54k, False: 0]
  ------------------
 3368|       |            // no base prefix allowed
 3369|  7.54k|            return {range.begin(), base, false};
 3370|  7.54k|    }
 3371|  7.54k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  2.45M|{
 2331|  2.45M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|  2.45M|                  std::is_same_v<char_type, char>) {
 2335|  2.45M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2335:13): [True: 35.3k, False: 2.42M]
  ------------------
 2336|  35.3k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|  35.3k|        }
 2338|  2.42M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2338:13): [True: 2.32M, False: 94.7k]
  ------------------
 2339|  2.32M|            return unexpected(parse_error::error);
 2340|  2.32M|        }
 2341|  94.7k|        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|       |    else {
 2344|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|       |            if (ch < 'A' || ch > 'Z') {
 2346|       |                return ch;
 2347|       |            }
 2348|       |            return static_cast<char_type>(ch +
 2349|       |                                          static_cast<char_type>('a' - 'A'));
 2350|       |        };
 2351|       |
 2352|       |        SCN_TRY(it, read_exactly_n_code_units(
 2353|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|       |                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|       |        if (SCN_UNLIKELY(!std::equal(
 2357|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|       |                    return ascii_tolower(a) ==
 2359|       |                           static_cast<detail::char_t<Range>>(b);
 2360|       |                }))) {
 2361|       |            return unexpected(parse_error::error);
 2362|       |        }
 2363|       |
 2364|       |        return it;
 2365|       |    }
 2366|  2.45M|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|   285k|{
 2246|   285k|    auto it = read_code_unit(range);
 2247|   285k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.80k, False: 282k]
  |  |  ------------------
  ------------------
 2248|  2.80k|        return unexpected(make_eof_parse_error(it.error()));
 2249|  2.80k|    }
 2250|       |
 2251|   282k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  986|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 229k, False: 53.2k]
  |  |  ------------------
  ------------------
 2252|   282k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   229k|        return unexpected(parse_error::error);
 2254|   229k|    }
 2255|       |
 2256|  53.2k|    return *it;
 2257|   282k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3410|  7.54k|{
 3411|  7.54k|    using char_type = detail::char_t<Range>;
 3412|       |
 3413|  7.54k|    if constexpr (ranges::contiguous_range<Range>) {
 3414|  7.54k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  7.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 7.54k]
  |  |  ------------------
  ------------------
 3415|      0|            return detail::unexpected_scan_error(
 3416|      0|                scan_error::invalid_scanned_value,
 3417|      0|                "Failed to parse integer: No digits found");
 3418|      0|        }
 3419|  7.54k|        return range.end();
 3420|       |    }
 3421|       |    else {
 3422|       |        return read_while1_code_unit(range,
 3423|       |                                     [&](char_type ch) noexcept {
 3424|       |                                         return char_to_int(ch) < base;
 3425|       |                                     })
 3426|       |            .transform_error(map_parse_error_to_scan_error(
 3427|       |                scan_error::invalid_scanned_value,
 3428|       |                "Failed to parse integer: No digits found"));
 3429|       |    }
 3430|  7.54k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  7.54k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  7.54k|                  ranges::sized_range<Range>) {
 1785|  7.54k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1057|  7.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  7.54k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  7.54k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  7.54k|    {
 1589|  7.54k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  3.56M|    {
 1602|  3.56M|        return sv;
 1603|  3.56M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|   524k|{
 2075|   524k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   524k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|   524k|{
 2056|   524k|    if constexpr (ranges::common_range<Range>) {
 2057|   524k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|   524k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   935k|{
 3066|   935k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 935k, False: 0]
  ------------------
 3067|   935k|        auto it = read_while_classic_space(range);
 3068|   935k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   935k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   935k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 11.9k, False: 923k]
  |  |  ------------------
  ------------------
 3070|  11.9k|            return unexpected(e);
 3071|  11.9k|        }
 3072|       |
 3073|   923k|        return it;
 3074|   935k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   935k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   935k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|   935k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|   935k|        auto buf = make_contiguous_buffer(range);
 2220|   935k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|   935k|        return ranges::next(range.begin(),
 2222|   935k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|   935k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   935k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   935k|                  ranges::sized_range<Range>) {
 1785|   935k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1057|   935k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   935k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   935k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   935k|    {
 1589|   935k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  2.87M|    {
  304|  2.87M|        ranges::advance(x, n);
  305|  2.87M|        return x;
  306|  2.87M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  3.82M|    {
  268|  3.82M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.82M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  3.82M|    {
  181|  18.2M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 14.4M, False: 3.82M]
  ------------------
  182|  14.4M|            ++i;
  183|  14.4M|        }
  184|  3.82M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|   251k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   251k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   251k|            auto rd = make_reader<T, char_type>();
 6237|   251k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|   251k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 251k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6238|       |
 6239|   251k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 251k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   251k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   251k|                return impl(rd, range, value);
 6242|   251k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   251k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|  1.44M|    {
 3156|  1.44M|        reader_error_handler eh{};
 3157|  1.44M|        get_derived().check_specs_impl(specs, eh);
 3158|  1.44M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  986|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.44M]
  |  |  ------------------
  ------------------
 3159|      0|            return detail::unexpected_scan_error(
 3160|      0|                scan_error::invalid_format_string, eh.m_msg);
 3161|      0|        }
 3162|  1.44M|        return {};
 3163|  1.44M|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3167|  1.44M|    {
 3168|  1.44M|        return static_cast<Derived&>(*this);
 3169|  1.44M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4177|  1.44M|    {
 4178|  1.44M|        detail::check_float_type_specs(specs, eh);
 4179|  1.44M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   251k|    {
 6162|   251k|        const bool need_skipped_width =
 6163|   251k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 251k]
  |  Branch (6163:33): [True: 0, False: 251k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   251k|        auto it = rng.begin();
 6167|   251k|        std::ptrdiff_t prefix_width = 0;
 6168|   251k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 251k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   251k|        else {
 6176|   251k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|   251k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   251k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   251k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 4.48k, False: 246k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  4.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  4.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.48k|    }                                                  \
  |  |  |  | 3938|   251k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   246k|            std::tie(it, prefix_width) = prefix_result;
 6178|   246k|        }
 6179|   246k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   246k|        std::ptrdiff_t value_width = 0;
 6183|   246k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 246k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   246k|        else {
 6199|   246k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|   246k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|   246k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 19.2k, False: 227k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  19.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  19.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  19.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  19.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  19.2k|    }                                                  \
  |  | 3938|   246k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   227k|                                             specs, value, loc));
 6201|       |
 6202|   227k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 227k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   227k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   227k|        std::ptrdiff_t postfix_width = 0;
 6211|   227k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 223k, False: 3.60k]
  ------------------
 6212|   223k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|   223k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   223k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   223k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 223k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|   223k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   223k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   223k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   223k|                                 value_width));
 6216|   223k|            std::tie(it, postfix_width) = postfix_result;
 6217|   223k|        }
 6218|       |
 6219|   227k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|   227k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 227k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|   227k|            specs, prefix_width, value_width, postfix_width));
 6221|   227k|        return it;
 6222|   227k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3150|  3.30M|    {
 3151|  3.30M|        return true;
 3152|  3.30M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4249|  1.41M|    {
 4250|  1.41M|        unsigned options{};
 4251|  1.41M|        if (specs.localized) {
  ------------------
  |  Branch (4251:13): [True: 400k, False: 1.01M]
  ------------------
 4252|   400k|            options |= float_reader_base::allow_thsep;
 4253|   400k|        }
 4254|       |
 4255|  1.41M|        SCN_GCC_COMPAT_PUSH
 4256|  1.41M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4257|       |
 4258|  1.41M|        switch (specs.type) {
 4259|   212k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4259:13): [True: 212k, False: 1.20M]
  ------------------
 4260|   212k|                return options | float_reader_base::allow_fixed;
 4261|       |
 4262|  41.6k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4262:13): [True: 41.6k, False: 1.37M]
  ------------------
 4263|  41.6k|                return options | float_reader_base::allow_scientific;
 4264|       |
 4265|   432k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4265:13): [True: 432k, False: 985k]
  ------------------
 4266|   432k|                return options | float_reader_base::allow_hex;
 4267|       |
 4268|   331k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4268:13): [True: 331k, False: 1.08M]
  ------------------
 4269|   331k|                return options | float_reader_base::allow_scientific |
 4270|   331k|                       float_reader_base::allow_fixed;
 4271|       |
 4272|   400k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4272:13): [True: 400k, False: 1.01M]
  ------------------
 4273|   400k|                return options | float_reader_base::allow_scientific |
 4274|   400k|                       float_reader_base::allow_fixed |
 4275|   400k|                       float_reader_base::allow_hex;
 4276|       |
 4277|      0|            default:
  ------------------
  |  Branch (4277:13): [True: 0, False: 1.41M]
  ------------------
 4278|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4279|  1.41M|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4280|  1.41M|        }
 4281|       |
 4282|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4283|  1.41M|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3701|  1.41M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1869|  1.98M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1630|  3.97M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3732|   606k|    {
 3733|   606k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1051|   606k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   606k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   606k|        const std::ptrdiff_t sign_len =
 3736|   606k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 150k, False: 455k]
  ------------------
 3737|       |
 3738|   606k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3939|   606k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   606k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   606k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   606k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 16.6k, False: 589k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  16.6k|    }                                                  \
  |  |  |  | 3938|   606k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   589k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   589k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   606k|    }
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 4089|  1.88M|    {
 4090|  1.88M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4090:13): [True: 1.88M, False: 0]
  ------------------
 4091|  1.88M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4091:13): [True: 1.88M, False: 0]
  ------------------
 4092|  1.88M|            return;
 4093|  1.88M|        }
 4094|       |
 4095|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4096|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4096:13): [True: 0, False: 0]
  ------------------
 4097|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4097:27): [True: 0, False: 0]
  ------------------
 4098|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4098:21): [True: 0, False: 0]
  ------------------
 4099|      0|                    ch = CharT{'.'};
 4100|      0|                }
 4101|      0|            }
 4102|      0|        }
 4103|       |
 4104|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4104:13): [True: 0, False: 0]
  ------------------
 4105|      0|            return;
 4106|      0|        }
 4107|       |
 4108|      0|        auto first =
 4109|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4110|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4110:13): [True: 0, False: 0]
  ------------------
 4111|      0|            return;
 4112|      0|        }
 4113|       |
 4114|      0|        m_thsep_indices.push_back(
 4115|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4116|       |
 4117|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4117:31): [True: 0, False: 0]
  ------------------
 4118|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4118:17): [True: 0, False: 0]
  ------------------
 4119|      0|                *first++ = std::move(*it);
 4120|      0|            }
 4121|      0|            else {
 4122|      0|                m_thsep_indices.push_back(
 4123|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4124|      0|            }
 4125|      0|        }
 4126|       |
 4127|      0|        str.erase(first, str.end());
 4128|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|  2.15M|    {
 1686|  2.15M|        return m_storage.has_value();
 1687|  2.15M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|  1.26M|    {
 1691|  1.26M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1051|  1.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.26M|        return *m_storage;
 1693|  1.26M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   246k|    {
 4203|   246k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   246k|#if !SCN_DISABLE_LOCALE
 4206|   246k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 69.1k, False: 177k]
  ------------------
 4207|  69.1k|            return read_impl<Range>(
 4208|  69.1k|                range, rd,
 4209|  69.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  69.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  69.1k|                },
 4212|  69.1k|                value, loc);
 4213|  69.1k|        }
 4214|   177k|#endif
 4215|       |
 4216|   177k|        return read_impl<Range>(
 4217|   177k|            range, rd,
 4218|   177k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   177k|                return r.read_source(SCN_FWD(args)...);
 4220|   177k|            },
 4221|   177k|            value);
 4222|   246k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   341k|    {
 4239|   341k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   341k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 21.7k, False: 319k]
  |  |  ------------------
  ------------------
 4241|  21.7k|            return unexpected(r.error());
 4242|  21.7k|        }
 4243|       |
 4244|   319k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3939|   319k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   319k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   319k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 3.12k, False: 316k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  3.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  3.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.12k|    }                                                  \
  |  |  |  | 3938|   319k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   316k|        return ranges::next(range.begin(), n);
 4246|   319k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.06M|    {
  763|  1.06M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.06M|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  69.1k|        : m_fptr([](storage fn,
  743|  69.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  69.1k|              cvref<T> obj = *get<T>(fn);
  745|  69.1k|              if constexpr (std::is_void_v<R>) {
  746|  69.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  69.1k|              }
  748|  69.1k|              else {
  749|  69.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  69.1k|              }
  751|  69.1k|          }),
  752|  69.1k|          m_storage(std::addressof(f))
  753|  69.1k|    {
  754|  69.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  69.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  69.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  69.1k|              else {
  749|  69.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  69.1k|              }
  751|  69.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  69.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  69.1k|        else if constexpr (std::is_object_v<T>) {
  688|  69.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  69.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  69.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  69.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1057|  69.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  69.1k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3720|   219k|    {
 3721|   219k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|   219k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  985|   219k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 219k]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|   219k|        return read_source_impl(range);
 3727|   219k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3746|  1.06M|    {
 3747|  1.06M|        SCN_TRY(sign_result,
  ------------------
  |  | 3939|  1.06M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.06M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.06M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 1.06M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  1.06M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|  1.06M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|  1.06M|        auto it = sign_result.first;
 3750|  1.06M|        m_sign = sign_result.second;
 3751|       |
 3752|  1.06M|        auto digits_begin = it;
 3753|  1.06M|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|       |                      ranges::sized_range<Range>) {
 3756|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3757|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|       |                SCN_TRY_ASSIGN(
 3759|       |                    it,
 3760|       |                    do_read_source_impl(
 3761|       |                        r,
 3762|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|       |            }
 3765|       |            else {
 3766|       |                auto cb = [&](const auto& rr)
 3767|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|       |                    auto res = read_all(rr);
 3769|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|       |                        return detail::unexpected_scan_error(
 3771|       |                            scan_error::invalid_scanned_value,
 3772|       |                            "Invalid float value");
 3773|       |                    }
 3774|       |                    return res;
 3775|       |                };
 3776|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3777|       |            }
 3778|       |        }
 3779|  1.06M|        else {
 3780|  1.06M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3934|  1.06M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|  1.06M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 67.7k, False: 997k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  67.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  67.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  67.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  67.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  67.7k|    }                                                  \
  |  | 3938|  1.06M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3781|   997k|                it,
 3782|   997k|                do_read_source_impl(
 3783|   997k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|   997k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|   997k|        }
 3786|       |
 3787|  1.06M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1051|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|   997k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 992k, False: 5.54k]
  |  Branch (3789:48): [True: 987k, False: 4.83k]
  ------------------
 3790|   997k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 947k, False: 39.8k]
  ------------------
 3791|   997k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 942k, False: 4.68k]
  ------------------
 3792|   942k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|   942k|        }
 3794|       |
 3795|   997k|        handle_separators();
 3796|       |
 3797|   997k|        return it;
 3798|  1.06M|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4032|  1.06M|    {
 4033|  1.06M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|  1.06M|        const bool allowed_nonhex =
 4035|  1.06M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|  1.06M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|  1.06M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 1.05M, False: 10.3k]
  |  Branch (4038:45): [True: 0, False: 1.05M]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|  1.06M|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 10.3k, False: 1.05M]
  ------------------
 4044|  10.3k|            return *r;
 4045|  10.3k|        }
 4046|       |
 4047|  1.05M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 1.01M, False: 44.5k]
  |  Branch (4047:45): [True: 1.54k, False: 1.00M]
  ------------------
 4048|  1.54k|            return unexpected(r.error());
 4049|  1.54k|        }
 4050|  1.05M|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 44.5k, False: 1.00M]
  ------------------
 4051|  44.5k|            return *r;
 4052|  44.5k|        }
 4053|       |
 4054|  1.00M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 713k, False: 295k]
  |  Branch (4054:28): [True: 224k, False: 489k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|   224k|            auto it = range.begin();
 4058|       |
 4059|   224k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 12.4k, False: 211k]
  ------------------
 4060|  12.4k|                m_kind = float_kind::hex_with_prefix;
 4061|  12.4k|                it = *r;
 4062|  12.4k|            }
 4063|   211k|            else {
 4064|   211k|                m_kind = float_kind::hex_without_prefix;
 4065|   211k|            }
 4066|       |
 4067|   224k|            return read_hex(ranges::subrange{it, range.end()});
 4068|   224k|        }
 4069|   784k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 295k, False: 489k]
  |  Branch (4069:29): [True: 295k, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|   295k|            m_kind = float_kind::generic;
 4073|   295k|            return read_regular_float(range);
 4074|   295k|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|   489k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  986|   489k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 29.1k, False: 459k]
  |  |  ------------------
  ------------------
 4080|  29.1k|            m_kind = float_kind::hex_with_prefix;
 4081|  29.1k|            return read_hex(ranges::subrange{*r, range.end()});
 4082|  29.1k|        }
 4083|       |
 4084|   459k|        m_kind = float_kind::generic;
 4085|   459k|        return read_regular(range);
 4086|   489k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3840|  1.06M|    {
 3841|  1.06M|        auto it = range.begin();
 3842|  1.06M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 1.05M, False: 10.3k]
  ------------------
 3843|  1.05M|            return unexpected(r.error());
 3844|  1.05M|        }
 3845|  10.3k|        else {
 3846|  10.3k|            it = *r;
 3847|  10.3k|        }
 3848|       |
 3849|  10.3k|        if (auto r = read_matching_string_classic_nocase(
 3850|  10.3k|                ranges::subrange{it, range.end()}, "inity");
 3851|  10.3k|            !r) {
  ------------------
  |  Branch (3851:13): [True: 5.54k, False: 4.83k]
  ------------------
 3852|  5.54k|            m_kind = float_kind::inf_short;
 3853|  5.54k|            return it;
 3854|  5.54k|        }
 3855|  4.83k|        else {
 3856|  4.83k|            m_kind = float_kind::inf_long;
 3857|  4.83k|            return *r;
 3858|  4.83k|        }
 3859|  10.3k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3863|  1.05M|    {
 3864|  1.05M|        auto it = range.begin();
 3865|  1.05M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 1.00M, False: 46.0k]
  ------------------
 3866|  1.00M|            return r.transform_error(map_parse_error_to_scan_error(
 3867|  1.00M|                scan_error::invalid_scanned_value,
 3868|  1.00M|                "Invalid floating-point NaN value"));
 3869|  1.00M|        }
 3870|  46.0k|        else {
 3871|  46.0k|            it = *r;
 3872|  46.0k|        }
 3873|       |
 3874|  46.0k|        if (auto r =
 3875|  46.0k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|  46.0k|            !r) {
  ------------------
  |  Branch (3876:13): [True: 39.8k, False: 6.22k]
  ------------------
 3877|  39.8k|            m_kind = float_kind::nan_simple;
 3878|  39.8k|            return it;
 3879|  39.8k|        }
 3880|  6.22k|        else {
 3881|  6.22k|            it = *r;
 3882|  6.22k|        }
 3883|       |
 3884|  6.22k|        auto payload_beg_it = it;
 3885|  6.22k|        it = read_while_code_unit(
 3886|  6.22k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|  6.22k|                return is_ascii_char(ch) &&
 3888|  6.22k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|  6.22k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|  6.22k|            });
 3891|  6.22k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|  6.22k|        m_kind = float_kind::nan_with_payload;
 3894|  6.22k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 4.68k, False: 1.54k]
  ------------------
 3895|  6.22k|                                             ')')) {
 3896|  4.68k|            return *r;
 3897|  4.68k|        }
 3898|  1.54k|        return detail::unexpected_scan_error(
 3899|  1.54k|            scan_error::invalid_scanned_value,
 3900|  1.54k|            "Invalid floating-point NaN payload");
 3901|  6.22k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  6.22k|        : m_fptr([](storage fn,
  743|  6.22k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.22k|              cvref<T> obj = *get<T>(fn);
  745|  6.22k|              if constexpr (std::is_void_v<R>) {
  746|  6.22k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.22k|              }
  748|  6.22k|              else {
  749|  6.22k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.22k|              }
  751|  6.22k|          }),
  752|  6.22k|          m_storage(std::addressof(f))
  753|  6.22k|    {
  754|  6.22k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|   102k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   102k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   102k|              else {
  749|   102k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   102k|              }
  751|   102k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|   102k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   102k|        else if constexpr (std::is_object_v<T>) {
  688|   102k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   102k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3886|   102k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|   102k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3887:24): [True: 102k, False: 83]
  ------------------
 3888|   102k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3888:26): [True: 97.6k, False: 5.13k]
  |  Branch (3888:39): [True: 89.5k, False: 8.10k]
  |  Branch (3888:54): [True: 2.82k, False: 10.4k]
  |  Branch (3888:67): [True: 2.73k, False: 83]
  ------------------
 3889|   102k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3889:26): [True: 5.36k, False: 5.13k]
  |  Branch (3889:39): [True: 2.56k, False: 2.80k]
  |  Branch (3889:53): [True: 2.72k, False: 5.21k]
  ------------------
 3890|   102k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  6.22k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  6.22k|        {
  662|  6.22k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   713k|    {
 3834|   713k|        return read_matching_string_classic_nocase(range, "0x");
 3835|   713k|    }
_ZN3scn2v44impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3934|   253k|    {
 3935|   253k|        auto it = range.begin();
 3936|       |
 3937|   253k|        std::ptrdiff_t digits_count = 0;
 3938|   253k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3939|   253k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 8.40k, False: 245k]
  |  |  ------------------
  ------------------
 3940|  8.40k|            return r.transform_error(map_parse_error_to_scan_error(
 3941|  8.40k|                scan_error::invalid_scanned_value,
 3942|  8.40k|                "Invalid hexadecimal floating-point value"));
 3943|  8.40k|        }
 3944|   245k|        else {
 3945|   245k|            digits_count += ranges::distance(it, *r);
 3946|   245k|            it = *r;
 3947|   245k|        }
 3948|       |
 3949|   245k|        m_integral_part_length = digits_count;
 3950|   245k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3950:18): [True: 37.7k, False: 207k]
  ------------------
 3951|   245k|                                             m_locale_options.decimal_point)) {
 3952|  37.7k|            it = *r;
 3953|  37.7k|        }
 3954|       |
 3955|   245k|        if (auto r =
  ------------------
  |  Branch (3955:18): [True: 34.0k, False: 211k]
  ------------------
 3956|   245k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3957|  34.0k|            digits_count += ranges::distance(it, *r);
 3958|  34.0k|            it = *r;
 3959|  34.0k|        }
 3960|       |
 3961|   245k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  986|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 245k]
  |  |  ------------------
  ------------------
 3962|      0|            return detail::unexpected_scan_error(
 3963|      0|                scan_error::invalid_scanned_value,
 3964|      0|                "No significand digits in hexfloat");
 3965|      0|        }
 3966|       |
 3967|   245k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3968|       |
 3969|   245k|        return it;
 3970|   245k|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3818|   498k|    {
 3819|   498k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  986|   498k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 498k]
  |  |  |  Branch (986:45): [True: 0, False: 498k]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3820|   498k|                         thsep_allowed)) {
 3821|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3822|      0|                return char_to_int(ch) < 16 ||
 3823|      0|                       ch == m_locale_options.thousands_sep;
 3824|      0|            });
 3825|      0|        }
 3826|       |
 3827|   498k|        return read_while1_code_unit(
 3828|   498k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3829|   498k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   498k|        : m_fptr([](storage fn,
  743|   498k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   498k|              cvref<T> obj = *get<T>(fn);
  745|   498k|              if constexpr (std::is_void_v<R>) {
  746|   498k|                  obj(static_cast<decltype(args)>(args)...);
  747|   498k|              }
  748|   498k|              else {
  749|   498k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   498k|              }
  751|   498k|          }),
  752|   498k|          m_storage(std::addressof(f))
  753|   498k|    {
  754|   498k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  2.70M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.70M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.70M|              else {
  749|  2.70M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.70M|              }
  751|  2.70M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  2.70M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.70M|        else if constexpr (std::is_object_v<T>) {
  688|  2.70M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.70M|    }
_ZZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3828|  2.70M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   498k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   498k|        {
  662|   498k|        }
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3906|   859k|    {
 3907|   859k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 105k, False: 754k]
  ------------------
 3908|   105k|            auto beg_exp_it = range.begin();
 3909|   105k|            auto it = *r;
 3910|       |
 3911|   105k|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 105k, False: 300]
  ------------------
 3912|   105k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|   105k|                it = r_sign->first;
 3914|   105k|            }
 3915|       |
 3916|   105k|            if (auto r_exp = read_while1_code_unit(
 3917|   105k|                    ranges::subrange{it, range.end()},
 3918|   105k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|   105k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  986|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.80k, False: 103k]
  |  |  ------------------
  ------------------
 3920|  1.80k|                it = beg_exp_it;
 3921|  1.80k|            }
 3922|   103k|            else {
 3923|   103k|                it = *r_exp;
 3924|   103k|            }
 3925|       |
 3926|   105k|            return it;
 3927|   105k|        }
 3928|   754k|        return range.begin();
 3929|   859k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|   105k|        : m_fptr([](storage fn,
  743|   105k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   105k|              cvref<T> obj = *get<T>(fn);
  745|   105k|              if constexpr (std::is_void_v<R>) {
  746|   105k|                  obj(static_cast<decltype(args)>(args)...);
  747|   105k|              }
  748|   105k|              else {
  749|   105k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   105k|              }
  751|   105k|          }),
  752|   105k|          m_storage(std::addressof(f))
  753|   105k|    {
  754|   105k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|   333k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   333k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   333k|              else {
  749|   333k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   333k|              }
  751|   333k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   333k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   333k|        else if constexpr (std::is_object_v<T>) {
  688|   333k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   333k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3918|   333k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|   105k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   105k|        {
  662|   105k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3975|   755k|    {
 3976|   755k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|   755k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 647k, False: 107k]
  |  Branch (3977:50): [True: 20.2k, False: 627k]
  ------------------
 3978|       |
 3979|   755k|        auto it = ranges::begin(range);
 3980|   755k|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|   755k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|   755k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   755k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 45.7k, False: 709k]
  |  |  ------------------
  ------------------
 3984|  45.7k|            return r.transform_error(
 3985|  45.7k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|  45.7k|                                              "Invalid floating-point value"));
 3987|  45.7k|        }
 3988|   709k|        else {
 3989|   709k|            digits_count += ranges::distance(it, *r);
 3990|   709k|            it = *r;
 3991|   709k|        }
 3992|       |
 3993|   709k|        m_integral_part_length = digits_count;
 3994|   709k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 139k, False: 570k]
  ------------------
 3995|   709k|                                             m_locale_options.decimal_point)) {
 3996|   139k|            it = *r;
 3997|   139k|        }
 3998|       |
 3999|   709k|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 128k, False: 580k]
  ------------------
 4000|   709k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|   128k|            digits_count += ranges::distance(it, *r);
 4002|   128k|            it = *r;
 4003|   128k|        }
 4004|       |
 4005|   709k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  986|   709k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 709k]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|   709k|        auto beg_exp_it = it;
 4012|   709k|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 614k, False: 95.1k]
  ------------------
 4013|   614k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|   614k|        }
 4015|   709k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 19.4k, False: 690k]
  |  Branch (4015:29): [True: 12.0k, False: 7.42k]
  ------------------
 4016|  12.0k|            return detail::unexpected_scan_error(
 4017|  12.0k|                scan_error::invalid_scanned_value,
 4018|  12.0k|                "No exponent given to scientific float");
 4019|  12.0k|        }
 4020|       |
 4021|   697k|        m_kind =
 4022|   697k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 594k, False: 102k]
  ------------------
 4023|       |
 4024|   697k|        return it;
 4025|   709k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3803|  1.46M|    {
 3804|  1.46M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  986|  1.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.46M]
  |  |  |  Branch (986:45): [True: 0, False: 1.46M]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|  1.46M|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|  1.46M|        return read_while1_code_unit(
 3813|  1.46M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|  1.46M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  1.46M|        : m_fptr([](storage fn,
  743|  1.46M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.46M|              cvref<T> obj = *get<T>(fn);
  745|  1.46M|              if constexpr (std::is_void_v<R>) {
  746|  1.46M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.46M|              }
  748|  1.46M|              else {
  749|  1.46M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.46M|              }
  751|  1.46M|          }),
  752|  1.46M|          m_storage(std::addressof(f))
  753|  1.46M|    {
  754|  1.46M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  8.37M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.37M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  8.37M|              else {
  749|  8.37M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.37M|              }
  751|  8.37M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  8.37M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  8.37M|        else if constexpr (std::is_object_v<T>) {
  688|  8.37M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  8.37M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3813|  8.37M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  1.46M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.46M|        {
  662|  1.46M|        }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1675|   948k|    {
 1676|   948k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1057|   948k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   948k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  69.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  69.1k|        {
  662|  69.1k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   177k|        : m_fptr([](storage fn,
  743|   177k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   177k|              cvref<T> obj = *get<T>(fn);
  745|   177k|              if constexpr (std::is_void_v<R>) {
  746|   177k|                  obj(static_cast<decltype(args)>(args)...);
  747|   177k|              }
  748|   177k|              else {
  749|   177k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   177k|              }
  751|   177k|          }),
  752|   177k|          m_storage(std::addressof(f))
  753|   177k|    {
  754|   177k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   177k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   177k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   177k|              else {
  749|   177k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   177k|              }
  751|   177k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   177k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   177k|        else if constexpr (std::is_object_v<T>) {
  688|   177k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   177k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   177k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   177k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   177k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3706|   846k|    {
 3707|   846k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  986|   846k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 846k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|   846k|        return read_source_impl(range);
 3713|   846k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   177k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   177k|        {
  662|   177k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   211k|    {
 4203|   211k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   211k|#if !SCN_DISABLE_LOCALE
 4206|   211k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 58.3k, False: 153k]
  ------------------
 4207|  58.3k|            return read_impl<Range>(
 4208|  58.3k|                range, rd,
 4209|  58.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  58.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  58.3k|                },
 4212|  58.3k|                value, loc);
 4213|  58.3k|        }
 4214|   153k|#endif
 4215|       |
 4216|   153k|        return read_impl<Range>(
 4217|   153k|            range, rd,
 4218|   153k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   153k|                return r.read_source(SCN_FWD(args)...);
 4220|   153k|            },
 4221|   153k|            value);
 4222|   211k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   298k|    {
 4239|   298k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   298k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 12.4k, False: 286k]
  |  |  ------------------
  ------------------
 4241|  12.4k|            return unexpected(r.error());
 4242|  12.4k|        }
 4243|       |
 4244|   286k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3939|   286k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   286k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   286k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   286k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 13.4k, False: 272k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  13.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  13.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  13.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  13.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.4k|    }                                                  \
  |  |  |  | 3938|   286k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   272k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   272k|        return ranges::next(range.begin(), n);
 4246|   286k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   923k|    {
  763|   923k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|   923k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   923k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  58.3k|        : m_fptr([](storage fn,
  743|  58.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.3k|              cvref<T> obj = *get<T>(fn);
  745|  58.3k|              if constexpr (std::is_void_v<R>) {
  746|  58.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  58.3k|              }
  748|  58.3k|              else {
  749|  58.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.3k|              }
  751|  58.3k|          }),
  752|  58.3k|          m_storage(std::addressof(f))
  753|  58.3k|    {
  754|  58.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  58.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  58.3k|              else {
  749|  58.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.3k|              }
  751|  58.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  58.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  58.3k|        else if constexpr (std::is_object_v<T>) {
  688|  58.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  58.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  58.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  58.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1057|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  58.3k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3720|   181k|    {
 3721|   181k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|   181k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  985|   181k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 181k]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|   181k|        return read_source_impl(range);
 3727|   181k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3746|   923k|    {
 3747|   923k|        SCN_TRY(sign_result,
  ------------------
  |  | 3939|   923k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   923k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   923k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   923k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 923k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|   923k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   923k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|   923k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|   923k|        auto it = sign_result.first;
 3750|   923k|        m_sign = sign_result.second;
 3751|       |
 3752|   923k|        auto digits_begin = it;
 3753|   923k|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|   923k|                      ranges::sized_range<Range>) {
 3756|   923k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  986|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 923k]
  |  |  |  Branch (986:45): [True: 0, False: 923k]
  |  |  |  Branch (986:45): [True: 0, False: 923k]
  |  |  ------------------
  ------------------
 3757|   923k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|    }                                                  \
  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3759|      0|                    it,
 3760|      0|                    do_read_source_impl(
 3761|      0|                        r,
 3762|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|      0|            }
 3765|   923k|            else {
 3766|   923k|                auto cb = [&](const auto& rr)
 3767|   923k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|   923k|                    auto res = read_all(rr);
 3769|   923k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|   923k|                        return detail::unexpected_scan_error(
 3771|   923k|                            scan_error::invalid_scanned_value,
 3772|   923k|                            "Invalid float value");
 3773|   923k|                    }
 3774|   923k|                    return res;
 3775|   923k|                };
 3776|   923k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3934|   923k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|   923k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|   923k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 38.3k, False: 885k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  38.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  38.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  38.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  38.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  38.3k|    }                                                  \
  |  | 3938|   923k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|   923k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3777|   885k|            }
 3778|       |        }
 3779|       |        else {
 3780|       |            SCN_TRY_ASSIGN(
 3781|       |                it,
 3782|       |                do_read_source_impl(
 3783|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|       |        }
 3786|       |
 3787|   923k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1051|   923k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   923k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|   885k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 879k, False: 5.26k]
  |  Branch (3789:48): [True: 875k, False: 4.43k]
  ------------------
 3790|   885k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 836k, False: 38.9k]
  ------------------
 3791|   885k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 832k, False: 4.55k]
  ------------------
 3792|   832k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|   832k|        }
 3794|       |
 3795|   885k|        handle_separators();
 3796|       |
 3797|   885k|        return it;
 3798|   923k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3840|   923k|    {
 3841|   923k|        auto it = range.begin();
 3842|   923k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 913k, False: 9.69k]
  ------------------
 3843|   913k|            return unexpected(r.error());
 3844|   913k|        }
 3845|  9.69k|        else {
 3846|  9.69k|            it = *r;
 3847|  9.69k|        }
 3848|       |
 3849|  9.69k|        if (auto r = read_matching_string_classic_nocase(
 3850|  9.69k|                ranges::subrange{it, range.end()}, "inity");
 3851|  9.69k|            !r) {
  ------------------
  |  Branch (3851:13): [True: 5.26k, False: 4.43k]
  ------------------
 3852|  5.26k|            m_kind = float_kind::inf_short;
 3853|  5.26k|            return it;
 3854|  5.26k|        }
 3855|  4.43k|        else {
 3856|  4.43k|            m_kind = float_kind::inf_long;
 3857|  4.43k|            return *r;
 3858|  4.43k|        }
 3859|  9.69k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3863|   913k|    {
 3864|   913k|        auto it = range.begin();
 3865|   913k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 868k, False: 44.9k]
  ------------------
 3866|   868k|            return r.transform_error(map_parse_error_to_scan_error(
 3867|   868k|                scan_error::invalid_scanned_value,
 3868|   868k|                "Invalid floating-point NaN value"));
 3869|   868k|        }
 3870|  44.9k|        else {
 3871|  44.9k|            it = *r;
 3872|  44.9k|        }
 3873|       |
 3874|  44.9k|        if (auto r =
 3875|  44.9k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|  44.9k|            !r) {
  ------------------
  |  Branch (3876:13): [True: 38.9k, False: 6.03k]
  ------------------
 3877|  38.9k|            m_kind = float_kind::nan_simple;
 3878|  38.9k|            return it;
 3879|  38.9k|        }
 3880|  6.03k|        else {
 3881|  6.03k|            it = *r;
 3882|  6.03k|        }
 3883|       |
 3884|  6.03k|        auto payload_beg_it = it;
 3885|  6.03k|        it = read_while_code_unit(
 3886|  6.03k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|  6.03k|                return is_ascii_char(ch) &&
 3888|  6.03k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|  6.03k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|  6.03k|            });
 3891|  6.03k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|  6.03k|        m_kind = float_kind::nan_with_payload;
 3894|  6.03k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 4.55k, False: 1.48k]
  ------------------
 3895|  6.03k|                                             ')')) {
 3896|  4.55k|            return *r;
 3897|  4.55k|        }
 3898|  1.48k|        return detail::unexpected_scan_error(
 3899|  1.48k|            scan_error::invalid_scanned_value,
 3900|  1.48k|            "Invalid floating-point NaN payload");
 3901|  6.03k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|  6.03k|        : m_fptr([](storage fn,
  743|  6.03k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.03k|              cvref<T> obj = *get<T>(fn);
  745|  6.03k|              if constexpr (std::is_void_v<R>) {
  746|  6.03k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.03k|              }
  748|  6.03k|              else {
  749|  6.03k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.03k|              }
  751|  6.03k|          }),
  752|  6.03k|          m_storage(std::addressof(f))
  753|  6.03k|    {
  754|  6.03k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  99.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  99.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  99.4k|              else {
  749|  99.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  99.4k|              }
  751|  99.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  99.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  99.4k|        else if constexpr (std::is_object_v<T>) {
  688|  99.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  99.4k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3886|  99.4k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|  99.4k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3887:24): [True: 99.3k, False: 83]
  ------------------
 3888|  99.4k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3888:26): [True: 94.4k, False: 4.95k]
  |  Branch (3888:39): [True: 86.3k, False: 8.07k]
  |  Branch (3888:54): [True: 2.79k, False: 10.2k]
  |  Branch (3888:67): [True: 2.70k, False: 83]
  ------------------
 3889|  99.3k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3889:26): [True: 5.36k, False: 4.95k]
  |  Branch (3889:39): [True: 2.56k, False: 2.80k]
  |  Branch (3889:53): [True: 2.72k, False: 5.03k]
  ------------------
 3890|  99.4k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  6.03k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  6.03k|        {
  662|  6.03k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   610k|    {
 3834|   610k|        return read_matching_string_classic_nocase(range, "0x");
 3835|   610k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|   518k|{
 2095|   518k|    auto it = read_while_code_unit(range, pred);
 2096|   518k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 220k, False: 297k]
  ------------------
 2097|   220k|        return unexpected(parse_error::error);
 2098|   220k|    }
 2099|   297k|    return it;
 2100|   518k|}
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3906|   149k|    {
 3907|   149k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 25.2k, False: 124k]
  ------------------
 3908|  25.2k|            auto beg_exp_it = range.begin();
 3909|  25.2k|            auto it = *r;
 3910|       |
 3911|  25.2k|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 25.1k, False: 96]
  ------------------
 3912|  25.2k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|  25.1k|                it = r_sign->first;
 3914|  25.1k|            }
 3915|       |
 3916|  25.2k|            if (auto r_exp = read_while1_code_unit(
 3917|  25.2k|                    ranges::subrange{it, range.end()},
 3918|  25.2k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|  25.2k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  986|  25.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 658, False: 24.5k]
  |  |  ------------------
  ------------------
 3920|    658|                it = beg_exp_it;
 3921|    658|            }
 3922|  24.5k|            else {
 3923|  24.5k|                it = *r_exp;
 3924|  24.5k|            }
 3925|       |
 3926|  25.2k|            return it;
 3927|  25.2k|        }
 3928|   124k|        return range.begin();
 3929|   149k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  25.2k|        : m_fptr([](storage fn,
  743|  25.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.2k|              cvref<T> obj = *get<T>(fn);
  745|  25.2k|              if constexpr (std::is_void_v<R>) {
  746|  25.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  25.2k|              }
  748|  25.2k|              else {
  749|  25.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.2k|              }
  751|  25.2k|          }),
  752|  25.2k|          m_storage(std::addressof(f))
  753|  25.2k|    {
  754|  25.2k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|  72.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  72.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  72.9k|              else {
  749|  72.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  72.9k|              }
  751|  72.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  72.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  72.9k|        else if constexpr (std::is_object_v<T>) {
  688|  72.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  72.9k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3918|  72.9k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  25.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  25.2k|        {
  662|  25.2k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3975|   258k|    {
 3976|   258k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|   258k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 161k, False: 97.5k]
  |  Branch (3977:50): [True: 18.8k, False: 142k]
  ------------------
 3978|       |
 3979|   258k|        auto it = ranges::begin(range);
 3980|   258k|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|   258k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|   258k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 24.3k, False: 234k]
  |  |  ------------------
  ------------------
 3984|  24.3k|            return r.transform_error(
 3985|  24.3k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|  24.3k|                                              "Invalid floating-point value"));
 3987|  24.3k|        }
 3988|   234k|        else {
 3989|   234k|            digits_count += ranges::distance(it, *r);
 3990|   234k|            it = *r;
 3991|   234k|        }
 3992|       |
 3993|   234k|        m_integral_part_length = digits_count;
 3994|   234k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 42.6k, False: 191k]
  ------------------
 3995|   234k|                                             m_locale_options.decimal_point)) {
 3996|  42.6k|            it = *r;
 3997|  42.6k|        }
 3998|       |
 3999|   234k|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 38.7k, False: 195k]
  ------------------
 4000|   234k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|  38.7k|            digits_count += ranges::distance(it, *r);
 4002|  38.7k|            it = *r;
 4003|  38.7k|        }
 4004|       |
 4005|   234k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  986|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 234k]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|   234k|        auto beg_exp_it = it;
 4012|   234k|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 149k, False: 85.0k]
  ------------------
 4013|   149k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|   149k|        }
 4015|   234k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 17.6k, False: 216k]
  |  Branch (4015:29): [True: 11.7k, False: 5.88k]
  ------------------
 4016|  11.7k|            return detail::unexpected_scan_error(
 4017|  11.7k|                scan_error::invalid_scanned_value,
 4018|  11.7k|                "No exponent given to scientific float");
 4019|  11.7k|        }
 4020|       |
 4021|   222k|        m_kind =
 4022|   222k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 197k, False: 24.5k]
  ------------------
 4023|       |
 4024|   222k|        return it;
 4025|   234k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3803|   492k|    {
 3804|   492k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  986|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 492k]
  |  |  |  Branch (986:45): [True: 0, False: 492k]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|   492k|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|   492k|        return read_while1_code_unit(
 3813|   492k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|   492k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   492k|        : m_fptr([](storage fn,
  743|   492k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   492k|              cvref<T> obj = *get<T>(fn);
  745|   492k|              if constexpr (std::is_void_v<R>) {
  746|   492k|                  obj(static_cast<decltype(args)>(args)...);
  747|   492k|              }
  748|   492k|              else {
  749|   492k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   492k|              }
  751|   492k|          }),
  752|   492k|          m_storage(std::addressof(f))
  753|   492k|    {
  754|   492k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  2.55M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.55M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.55M|              else {
  749|  2.55M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.55M|              }
  751|  2.55M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  2.55M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.55M|        else if constexpr (std::is_object_v<T>) {
  688|  2.55M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.55M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3813|  2.55M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   492k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   492k|        {
  662|   492k|        }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4032|   923k|    {
 4033|   923k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|   923k|        const bool allowed_nonhex =
 4035|   923k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|   923k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|   923k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 913k, False: 9.69k]
  |  Branch (4038:45): [True: 0, False: 913k]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|   923k|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 9.69k, False: 913k]
  ------------------
 4044|  9.69k|            return *r;
 4045|  9.69k|        }
 4046|       |
 4047|   913k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 870k, False: 43.4k]
  |  Branch (4047:45): [True: 1.48k, False: 868k]
  ------------------
 4048|  1.48k|            return unexpected(r.error());
 4049|  1.48k|        }
 4050|   912k|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 43.4k, False: 868k]
  ------------------
 4051|  43.4k|            return *r;
 4052|  43.4k|        }
 4053|       |
 4054|   868k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 610k, False: 258k]
  |  Branch (4054:28): [True: 183k, False: 426k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|   183k|            auto it = range.begin();
 4058|       |
 4059|   183k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 10.2k, False: 173k]
  ------------------
 4060|  10.2k|                m_kind = float_kind::hex_with_prefix;
 4061|  10.2k|                it = *r;
 4062|  10.2k|            }
 4063|   173k|            else {
 4064|   173k|                m_kind = float_kind::hex_without_prefix;
 4065|   173k|            }
 4066|       |
 4067|   183k|            return read_hex(ranges::subrange{it, range.end()});
 4068|   183k|        }
 4069|   684k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 258k, False: 426k]
  |  Branch (4069:29): [True: 258k, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|   258k|            m_kind = float_kind::generic;
 4073|   258k|            return read_regular_float(range);
 4074|   258k|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|   426k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  986|   426k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 25.4k, False: 400k]
  |  |  ------------------
  ------------------
 4080|  25.4k|            m_kind = float_kind::hex_with_prefix;
 4081|  25.4k|            return read_hex(ranges::subrange{*r, range.end()});
 4082|  25.4k|        }
 4083|       |
 4084|   400k|        m_kind = float_kind::generic;
 4085|   400k|        return read_regular(range);
 4086|   426k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3767|   610k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|   610k|                    auto res = read_all(rr);
 3769|   610k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  986|   610k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 800, False: 609k]
  |  |  ------------------
  ------------------
 3770|    800|                        return detail::unexpected_scan_error(
 3771|    800|                            scan_error::invalid_scanned_value,
 3772|    800|                            "Invalid float value");
 3773|    800|                    }
 3774|   609k|                    return res;
 3775|   610k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|   610k|{
 1938|   610k|    return ranges::next(range.begin(), range.end());
 1939|   610k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   610k|    {
  313|   610k|        ranges::advance(x, bound);
  314|   610k|        return x;
  315|   610k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   610k|    {
  275|   610k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   610k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   610k|    {
  190|   610k|        i = std::move(bound);
  191|   610k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|   838k|    {
 1676|   838k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1057|   838k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   838k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1719|   838k|    {
 1720|   838k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|   838k|                      ranges::sized_range<Range>) {
 1725|   838k|            m_storage.reset();
 1726|   838k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   838k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  58.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  58.3k|        {
  662|  58.3k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   153k|        : m_fptr([](storage fn,
  743|   153k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   153k|              cvref<T> obj = *get<T>(fn);
  745|   153k|              if constexpr (std::is_void_v<R>) {
  746|   153k|                  obj(static_cast<decltype(args)>(args)...);
  747|   153k|              }
  748|   153k|              else {
  749|   153k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   153k|              }
  751|   153k|          }),
  752|   153k|          m_storage(std::addressof(f))
  753|   153k|    {
  754|   153k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   153k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   153k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   153k|              else {
  749|   153k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   153k|              }
  751|   153k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   153k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   153k|        else if constexpr (std::is_object_v<T>) {
  688|   153k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   153k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   153k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   153k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   153k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3706|   742k|    {
 3707|   742k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  986|   742k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 742k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|   742k|        return read_source_impl(range);
 3713|   742k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   153k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   153k|        {
  662|   153k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|   263k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   263k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   263k|            auto rd = make_reader<T, char_type>();
 6237|   263k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|   263k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 263k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6238|       |
 6239|   263k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 263k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   263k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   263k|                return impl(rd, range, value);
 6242|   263k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   263k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   263k|    {
 6162|   263k|        const bool need_skipped_width =
 6163|   263k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 263k]
  |  Branch (6163:33): [True: 0, False: 263k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   263k|        auto it = rng.begin();
 6167|   263k|        std::ptrdiff_t prefix_width = 0;
 6168|   263k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 263k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   263k|        else {
 6176|   263k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|   263k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   263k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   263k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 5.02k, False: 258k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  5.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  5.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.02k|    }                                                  \
  |  |  |  | 3938|   263k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   258k|            std::tie(it, prefix_width) = prefix_result;
 6178|   258k|        }
 6179|   258k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   258k|        std::ptrdiff_t value_width = 0;
 6183|   258k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 258k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   258k|        else {
 6199|   258k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|   258k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|   258k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 18.6k, False: 240k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  18.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  18.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  18.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  18.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  18.6k|    }                                                  \
  |  | 3938|   258k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   240k|                                             specs, value, loc));
 6201|       |
 6202|   240k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 240k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   240k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   240k|        std::ptrdiff_t postfix_width = 0;
 6211|   240k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 236k, False: 4.02k]
  ------------------
 6212|   236k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|   236k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   236k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   236k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 236k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|   236k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   236k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   236k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   236k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   236k|                                 value_width));
 6216|   236k|            std::tie(it, postfix_width) = postfix_result;
 6217|   236k|        }
 6218|       |
 6219|   240k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|   240k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 240k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|   240k|            specs, prefix_width, value_width, postfix_width));
 6221|   240k|        return it;
 6222|   240k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3732|   634k|    {
 3733|   634k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1051|   634k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   634k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   634k|        const std::ptrdiff_t sign_len =
 3736|   634k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 157k, False: 476k]
  ------------------
 3737|       |
 3738|   634k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3939|   634k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   634k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   634k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   634k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 14.2k, False: 620k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  14.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  14.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  14.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  14.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  14.2k|    }                                                  \
  |  |  |  | 3938|   634k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   620k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   620k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   634k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   258k|    {
 4203|   258k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   258k|#if !SCN_DISABLE_LOCALE
 4206|   258k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 74.3k, False: 184k]
  ------------------
 4207|  74.3k|            return read_impl<Range>(
 4208|  74.3k|                range, rd,
 4209|  74.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  74.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  74.3k|                },
 4212|  74.3k|                value, loc);
 4213|  74.3k|        }
 4214|   184k|#endif
 4215|       |
 4216|   184k|        return read_impl<Range>(
 4217|   184k|            range, rd,
 4218|   184k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   184k|                return r.read_source(SCN_FWD(args)...);
 4220|   184k|            },
 4221|   184k|            value);
 4222|   258k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   359k|    {
 4239|   359k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   359k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   359k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 22.6k, False: 337k]
  |  |  ------------------
  ------------------
 4241|  22.6k|            return unexpected(r.error());
 4242|  22.6k|        }
 4243|       |
 4244|   337k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3939|   337k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   337k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   337k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   337k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.53k, False: 335k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.53k|    }                                                  \
  |  |  |  | 3938|   337k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   335k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   335k|        return ranges::next(range.begin(), n);
 4246|   337k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  74.3k|        : m_fptr([](storage fn,
  743|  74.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  74.3k|              cvref<T> obj = *get<T>(fn);
  745|  74.3k|              if constexpr (std::is_void_v<R>) {
  746|  74.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  74.3k|              }
  748|  74.3k|              else {
  749|  74.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  74.3k|              }
  751|  74.3k|          }),
  752|  74.3k|          m_storage(std::addressof(f))
  753|  74.3k|    {
  754|  74.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  74.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  74.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  74.3k|              else {
  749|  74.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  74.3k|              }
  751|  74.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  74.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  74.3k|        else if constexpr (std::is_object_v<T>) {
  688|  74.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  74.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  74.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  74.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1057|  74.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  74.3k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  74.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  74.3k|        {
  662|  74.3k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   184k|        : m_fptr([](storage fn,
  743|   184k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   184k|              cvref<T> obj = *get<T>(fn);
  745|   184k|              if constexpr (std::is_void_v<R>) {
  746|   184k|                  obj(static_cast<decltype(args)>(args)...);
  747|   184k|              }
  748|   184k|              else {
  749|   184k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   184k|              }
  751|   184k|          }),
  752|   184k|          m_storage(std::addressof(f))
  753|   184k|    {
  754|   184k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   184k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   184k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   184k|              else {
  749|   184k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   184k|              }
  751|   184k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   184k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   184k|        else if constexpr (std::is_object_v<T>) {
  688|   184k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   184k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   184k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   184k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   184k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   184k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   184k|        {
  662|   184k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   218k|    {
 4203|   218k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   218k|#if !SCN_DISABLE_LOCALE
 4206|   218k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 60.9k, False: 157k]
  ------------------
 4207|  60.9k|            return read_impl<Range>(
 4208|  60.9k|                range, rd,
 4209|  60.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  60.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  60.9k|                },
 4212|  60.9k|                value, loc);
 4213|  60.9k|        }
 4214|   157k|#endif
 4215|       |
 4216|   157k|        return read_impl<Range>(
 4217|   157k|            range, rd,
 4218|   157k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   157k|                return r.read_source(SCN_FWD(args)...);
 4220|   157k|            },
 4221|   157k|            value);
 4222|   218k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   310k|    {
 4239|   310k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   310k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 12.7k, False: 297k]
  |  |  ------------------
  ------------------
 4241|  12.7k|            return unexpected(r.error());
 4242|  12.7k|        }
 4243|       |
 4244|   297k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3939|   297k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   297k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   297k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12.6k, False: 284k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  12.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  12.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  12.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  12.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.6k|    }                                                  \
  |  |  |  | 3938|   297k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   284k|        return ranges::next(range.begin(), n);
 4246|   297k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  60.9k|        : m_fptr([](storage fn,
  743|  60.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.9k|              cvref<T> obj = *get<T>(fn);
  745|  60.9k|              if constexpr (std::is_void_v<R>) {
  746|  60.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  60.9k|              }
  748|  60.9k|              else {
  749|  60.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.9k|              }
  751|  60.9k|          }),
  752|  60.9k|          m_storage(std::addressof(f))
  753|  60.9k|    {
  754|  60.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  60.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  60.9k|              else {
  749|  60.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.9k|              }
  751|  60.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  60.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  60.9k|        else if constexpr (std::is_object_v<T>) {
  688|  60.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  60.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  60.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  60.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1057|  60.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  60.9k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  60.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  60.9k|        {
  662|  60.9k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   157k|        : m_fptr([](storage fn,
  743|   157k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   157k|              cvref<T> obj = *get<T>(fn);
  745|   157k|              if constexpr (std::is_void_v<R>) {
  746|   157k|                  obj(static_cast<decltype(args)>(args)...);
  747|   157k|              }
  748|   157k|              else {
  749|   157k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   157k|              }
  751|   157k|          }),
  752|   157k|          m_storage(std::addressof(f))
  753|   157k|    {
  754|   157k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   157k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   157k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   157k|              else {
  749|   157k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   157k|              }
  751|   157k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   157k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   157k|        else if constexpr (std::is_object_v<T>) {
  688|   157k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   157k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   157k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   157k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   157k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   157k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   157k|        {
  662|   157k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|   267k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   267k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   267k|            auto rd = make_reader<T, char_type>();
 6237|   267k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|   267k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 267k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6238|       |
 6239|   267k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 267k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   267k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   267k|                return impl(rd, range, value);
 6242|   267k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   267k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   267k|    {
 6162|   267k|        const bool need_skipped_width =
 6163|   267k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 267k]
  |  Branch (6163:33): [True: 0, False: 267k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   267k|        auto it = rng.begin();
 6167|   267k|        std::ptrdiff_t prefix_width = 0;
 6168|   267k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 267k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   267k|        else {
 6176|   267k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|   267k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   267k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   267k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 5.33k, False: 261k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  5.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  5.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.33k|    }                                                  \
  |  |  |  | 3938|   267k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   261k|            std::tie(it, prefix_width) = prefix_result;
 6178|   261k|        }
 6179|   261k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   261k|        std::ptrdiff_t value_width = 0;
 6183|   261k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 261k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   261k|        else {
 6199|   261k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|   261k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|   261k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 18.3k, False: 243k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  18.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  18.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  18.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  18.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  18.3k|    }                                                  \
  |  | 3938|   261k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   243k|                                             specs, value, loc));
 6201|       |
 6202|   243k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 243k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   243k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   243k|        std::ptrdiff_t postfix_width = 0;
 6211|   243k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 239k, False: 4.28k]
  ------------------
 6212|   239k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|   239k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   239k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   239k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 239k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|   239k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   239k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   239k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   239k|                                 value_width));
 6216|   239k|            std::tie(it, postfix_width) = postfix_result;
 6217|   239k|        }
 6218|       |
 6219|   243k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|   243k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 243k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|   243k|            specs, prefix_width, value_width, postfix_width));
 6221|   243k|        return it;
 6222|   243k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3732|   642k|    {
 3733|   642k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1051|   642k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   642k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   642k|        const std::ptrdiff_t sign_len =
 3736|   642k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 162k, False: 479k]
  ------------------
 3737|       |
 3738|   642k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3939|   642k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   642k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   642k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   642k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12.4k, False: 629k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.4k|    }                                                  \
  |  |  |  | 3938|   642k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   629k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   629k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   642k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   261k|    {
 4203|   261k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   261k|#if !SCN_DISABLE_LOCALE
 4206|   261k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 75.6k, False: 186k]
  ------------------
 4207|  75.6k|            return read_impl<Range>(
 4208|  75.6k|                range, rd,
 4209|  75.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  75.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  75.6k|                },
 4212|  75.6k|                value, loc);
 4213|  75.6k|        }
 4214|   186k|#endif
 4215|       |
 4216|   186k|        return read_impl<Range>(
 4217|   186k|            range, rd,
 4218|   186k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   186k|                return r.read_source(SCN_FWD(args)...);
 4220|   186k|            },
 4221|   186k|            value);
 4222|   261k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   363k|    {
 4239|   363k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   363k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   363k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 23.3k, False: 340k]
  |  |  ------------------
  ------------------
 4241|  23.3k|            return unexpected(r.error());
 4242|  23.3k|        }
 4243|       |
 4244|   340k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3939|   340k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   340k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   340k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   340k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 428, False: 340k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    428|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    428|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    428|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    428|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    428|    }                                                  \
  |  |  |  | 3938|   340k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   340k|        return ranges::next(range.begin(), n);
 4246|   340k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  75.6k|        : m_fptr([](storage fn,
  743|  75.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  75.6k|              cvref<T> obj = *get<T>(fn);
  745|  75.6k|              if constexpr (std::is_void_v<R>) {
  746|  75.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  75.6k|              }
  748|  75.6k|              else {
  749|  75.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  75.6k|              }
  751|  75.6k|          }),
  752|  75.6k|          m_storage(std::addressof(f))
  753|  75.6k|    {
  754|  75.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  75.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  75.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  75.6k|              else {
  749|  75.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  75.6k|              }
  751|  75.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  75.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  75.6k|        else if constexpr (std::is_object_v<T>) {
  688|  75.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  75.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  75.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  75.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1057|  75.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  75.6k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  75.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  75.6k|        {
  662|  75.6k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   186k|        : m_fptr([](storage fn,
  743|   186k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   186k|              cvref<T> obj = *get<T>(fn);
  745|   186k|              if constexpr (std::is_void_v<R>) {
  746|   186k|                  obj(static_cast<decltype(args)>(args)...);
  747|   186k|              }
  748|   186k|              else {
  749|   186k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   186k|              }
  751|   186k|          }),
  752|   186k|          m_storage(std::addressof(f))
  753|   186k|    {
  754|   186k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   186k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   186k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   186k|              else {
  749|   186k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   186k|              }
  751|   186k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   186k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   186k|        else if constexpr (std::is_object_v<T>) {
  688|   186k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   186k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   186k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   186k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   186k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   186k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   186k|        {
  662|   186k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   221k|    {
 4203|   221k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   221k|#if !SCN_DISABLE_LOCALE
 4206|   221k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 62.2k, False: 158k]
  ------------------
 4207|  62.2k|            return read_impl<Range>(
 4208|  62.2k|                range, rd,
 4209|  62.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  62.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  62.2k|                },
 4212|  62.2k|                value, loc);
 4213|  62.2k|        }
 4214|   158k|#endif
 4215|       |
 4216|   158k|        return read_impl<Range>(
 4217|   158k|            range, rd,
 4218|   158k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   158k|                return r.read_source(SCN_FWD(args)...);
 4220|   158k|            },
 4221|   158k|            value);
 4222|   221k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   314k|    {
 4239|   314k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   314k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 13.0k, False: 301k]
  |  |  ------------------
  ------------------
 4241|  13.0k|            return unexpected(r.error());
 4242|  13.0k|        }
 4243|       |
 4244|   301k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3939|   301k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   301k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   301k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   301k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 12.0k, False: 289k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  12.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  12.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  12.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  12.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.0k|    }                                                  \
  |  |  |  | 3938|   301k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   289k|        return ranges::next(range.begin(), n);
 4246|   301k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  62.2k|        : m_fptr([](storage fn,
  743|  62.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  62.2k|              cvref<T> obj = *get<T>(fn);
  745|  62.2k|              if constexpr (std::is_void_v<R>) {
  746|  62.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  62.2k|              }
  748|  62.2k|              else {
  749|  62.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  62.2k|              }
  751|  62.2k|          }),
  752|  62.2k|          m_storage(std::addressof(f))
  753|  62.2k|    {
  754|  62.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  62.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  62.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  62.2k|              else {
  749|  62.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  62.2k|              }
  751|  62.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  62.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  62.2k|        else if constexpr (std::is_object_v<T>) {
  688|  62.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  62.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  62.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  62.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1057|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  62.2k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  62.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  62.2k|        {
  662|  62.2k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   158k|        : m_fptr([](storage fn,
  743|   158k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   158k|              cvref<T> obj = *get<T>(fn);
  745|   158k|              if constexpr (std::is_void_v<R>) {
  746|   158k|                  obj(static_cast<decltype(args)>(args)...);
  747|   158k|              }
  748|   158k|              else {
  749|   158k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   158k|              }
  751|   158k|          }),
  752|   158k|          m_storage(std::addressof(f))
  753|   158k|    {
  754|   158k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   158k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   158k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   158k|              else {
  749|   158k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   158k|              }
  751|   158k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   158k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   158k|        else if constexpr (std::is_object_v<T>) {
  688|   158k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   158k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   158k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   158k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   158k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   158k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   158k|        {
  662|   158k|        }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|  1.08M|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|  1.08M|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|  1.08M|        else {
 1055|  1.08M|            return r.begin().contiguous_segment();
 1056|  1.08M|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|  1.08M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   951k|{
 2160|   951k|    auto it = range.begin();
 2161|  1.76M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.74M, False: 15.4k]
  ------------------
 2162|  1.74M|        const auto val =
 2163|  1.74M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.74M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|  1.74M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 1.73M, False: 12.5k]
  |  |  ------------------
  ------------------
 2165|  1.73M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.73M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.73M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 936k, False: 796k]
  ------------------
 2168|   936k|                return it;
 2169|   936k|            }
 2170|  1.73M|        }
 2171|   809k|        it = val.iterator;
 2172|   809k|    }
 2173|       |
 2174|  15.4k|    return it;
 2175|   951k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.74M|{
 1998|  1.74M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1051|  1.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.74M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.74M|    auto it = range.begin();
 2002|  1.74M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.74M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|  1.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 12.5k, False: 1.73M]
  |  |  ------------------
  ------------------
 2005|  12.5k|        ++it;
 2006|  12.5k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  12.5k|        return {it, {}};
 2008|  12.5k|    }
 2009|       |
 2010|  1.73M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.71M, False: 18.6k]
  ------------------
 2011|  1.71M|        ++it;
 2012|  1.71M|        return {it, string_type(1, *range.begin())};
 2013|  1.71M|    }
 2014|       |
 2015|  18.6k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  18.6k|    return {it, string_type{range.begin(), it}};
 2017|  1.73M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  12.5k|{
 1265|  12.5k|    auto it = input.begin();
 1266|  87.5k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 86.1k, False: 1.36k]
  ------------------
 1267|  86.1k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 11.2k, False: 74.9k]
  ------------------
 1268|  11.2k|            break;
 1269|  11.2k|        }
 1270|  86.1k|    }
 1271|  12.5k|    return it;
 1272|  12.5k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  18.6k|    {
  283|  18.6k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  18.6k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  18.6k|    {
  252|  18.6k|        constexpr iter_difference_t<I> zero{0};
  253|  18.6k|        iter_difference_t<I> counter{0};
  254|       |
  255|  56.6k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 38.9k, False: 17.6k]
  |  Branch (255:30): [True: 37.9k, False: 1.01k]
  ------------------
  256|  37.9k|            ++i;
  257|  37.9k|            ++counter;
  258|  37.9k|        }
  259|       |
  260|  18.6k|        return counter;
  261|  18.6k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|  1.74M|    {
 1989|  1.74M|        return !codepoint.empty();
 1990|  1.74M|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   951k|{
 2181|   951k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   951k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  1.08M|{
 3066|  1.08M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 1.08M, False: 0]
  ------------------
 3067|  1.08M|        auto it = read_while_classic_space(range);
 3068|  1.08M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  1.08M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 15.4k, False: 1.06M]
  |  |  ------------------
  ------------------
 3070|  15.4k|            return unexpected(e);
 3071|  15.4k|        }
 3072|       |
 3073|  1.06M|        return it;
 3074|  1.08M|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  1.08M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  1.08M|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  1.08M|    else {
 2225|  1.08M|        auto it = range.begin();
 2226|       |
 2227|  1.08M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|  1.08M|            auto seg = get_contiguous_beginning(range);
 2229|  1.08M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|  1.08M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 129k, False: 951k]
  ------------------
 2231|   129k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|   129k|            }
 2233|   951k|            ranges::advance(it, seg.size());
 2234|   951k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.08M|            return detail::is_cp_space(cp);
 2238|  1.08M|        });
 2239|  1.08M|    }
 2240|  1.08M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   951k|        : m_fptr([](storage fn,
  743|   951k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   951k|              cvref<T> obj = *get<T>(fn);
  745|   951k|              if constexpr (std::is_void_v<R>) {
  746|   951k|                  obj(static_cast<decltype(args)>(args)...);
  747|   951k|              }
  748|   951k|              else {
  749|   951k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   951k|              }
  751|   951k|          }),
  752|   951k|          m_storage(std::addressof(f))
  753|   951k|    {
  754|   951k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.73M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.73M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.73M|              else {
  749|  1.73M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.73M|              }
  751|  1.73M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.73M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.73M|        else if constexpr (std::is_object_v<T>) {
  688|  1.73M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.73M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  1.73M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.73M|            return detail::is_cp_space(cp);
 2238|  1.73M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   951k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   951k|        {
  662|   951k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   629k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   629k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   629k|        auto beg = r.begin();
  991|   629k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 629k, False: 0]
  ------------------
  992|   629k|            return false;
  993|   629k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   629k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|  1.65M|{
 1956|  1.65M|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1051|  1.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  1.65M|    else {
 1967|  1.65M|        auto it = range.begin();
 1968|  1.65M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 994k, False: 658k]
  ------------------
 1969|   994k|            return ranges::next(it, count);
 1970|   994k|        }
 1971|       |
 1972|  2.53M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 1.93M, False: 598k]
  ------------------
 1973|  1.93M|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 59.5k, False: 1.87M]
  ------------------
 1974|  59.5k|                return unexpected(eof_error::eof);
 1975|  59.5k|            }
 1976|  1.93M|        }
 1977|       |
 1978|   598k|        return it;
 1979|   658k|    }
 1980|  1.65M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  1.65M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  1.65M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  1.65M|        else {
 1107|  1.65M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 1.65M, False: 0]
  ------------------
 1108|  1.65M|                return static_cast<size_t>(
 1109|  1.65M|                    r.begin().parent()->chars_available() -
 1110|  1.65M|                    r.begin().position());
 1111|  1.65M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  1.65M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  1.65M|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  4.56M|    {
  763|  4.56M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|  4.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  4.56M|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.45M|        : m_fptr([](storage fn,
  743|  1.45M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.45M|              cvref<T> obj = *get<T>(fn);
  745|  1.45M|              if constexpr (std::is_void_v<R>) {
  746|  1.45M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.45M|              }
  748|  1.45M|              else {
  749|  1.45M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.45M|              }
  751|  1.45M|          }),
  752|  1.45M|          m_storage(std::addressof(f))
  753|  1.45M|    {
  754|  1.45M|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  2.28M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.28M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.28M|              else {
  749|  2.28M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.28M|              }
  751|  2.28M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  2.28M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.28M|        else if constexpr (std::is_object_v<T>) {
  688|  2.28M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.28M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.45M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.45M|        {
  662|  1.45M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|   459k|    {
 6075|   459k|        const bool need_skipped_width =
 6076|   459k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 459k]
  |  Branch (6076:33): [True: 0, False: 459k]
  ------------------
 6077|   459k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   459k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 459k]
  ------------------
 6081|   459k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 459k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   459k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 459k, False: 0]
  |  Branch (6085:56): [True: 459k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   459k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 459k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   916k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3939|   459k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   459k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   459k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   459k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 3.47k, False: 456k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  3.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  3.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.47k|    }                                                  \
  |  |  |  | 3938|   459k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   456k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   916k|                            make_eof_scan_error));
 6096|       |
 6097|   916k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 456k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   456k|            return result_type{it, 0};
 6105|   916k|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   459k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  1.09M|{
 2075|  1.09M|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  1.09M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  1.09M|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  1.09M|    else {
 2060|  1.09M|        auto first = range.begin();
 2061|  1.71M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 1.71M, False: 4.40k]
  ------------------
 2062|  1.71M|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 1.08M, False: 626k]
  ------------------
 2063|  1.08M|                return first;
 2064|  1.08M|            }
 2065|  1.71M|        }
 2066|  4.40k|        return first;
 2067|  1.09M|    }
 2068|  1.09M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   774k|    {
  108|   774k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   774k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   774k|    {
   94|   774k|        iter_difference_t<I> counter{0};
   95|  2.13M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.36M, False: 774k]
  ------------------
   96|  1.36M|            ++i;
   97|  1.36M|            ++counter;
   98|  1.36M|        }
   99|   774k|        return counter;
  100|   774k|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|   224k|    {
 1879|   224k|        auto stdloc = loc.get<std::locale>();
 1880|   224k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   224k|        grouping = numpunct.grouping();
 1882|   224k|        thousands_sep =
 1883|   224k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 224k]
  ------------------
 1884|   224k|        decimal_point = numpunct.decimal_point();
 1885|   224k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|   224k|{
 1816|   224k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 224k, False: 0]
  ------------------
 1817|   224k|        return std::use_facet<Facet>(stdloc);
 1818|   224k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   224k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|  1.48M|{
 1945|  1.48M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 2.87k, False: 1.47M]
  |  |  ------------------
  ------------------
 1946|  2.87k|        return unexpected(e);
 1947|  2.87k|    }
 1948|       |
 1949|  1.47M|    return ranges::next(range.begin());
 1950|  1.48M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  2.28M|{
  951|  2.28M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|  2.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 7.56k, False: 2.27M]
  |  |  ------------------
  ------------------
  952|  7.56k|        return eof_error::eof;
  953|  7.56k|    }
  954|  2.27M|    return eof_error::good;
  955|  2.28M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  3.36M|{
  945|  3.36M|    return is_range_eof(r.begin(), r.end());
  946|  3.36M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  3.36M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.36M|    {
  938|  3.36M|        return begin == end;
  939|  3.36M|    }
  940|  3.36M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.47M|    {
  296|  1.47M|        ++x;
  297|  1.47M|        return x;
  298|  1.47M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3257|   639k|{
 3258|   639k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   639k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 633k, False: 6.67k]
  ------------------
 3260|   633k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 633k, False: 72]
  ------------------
 3261|   633k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   633k|        }
 3263|     72|        return unexpected(eof_error::eof);
 3264|   633k|    }
 3265|       |
 3266|  6.67k|    auto& it = *r;
 3267|  6.67k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 4.92k, False: 1.74k]
  ------------------
 3268|  4.92k|        return std::pair{it, sign_type::minus_sign};
 3269|  4.92k|    }
 3270|  1.74k|    return std::pair{it, sign_type::plus_sign};
 3271|  6.67k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|  1.03M|{
 2372|  1.03M|    auto it = read_code_unit(range);
 2373|  1.03M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.65k, False: 1.02M]
  |  |  ------------------
  ------------------
 2374|  1.65k|        return unexpected(make_eof_parse_error(it.error()));
 2375|  1.65k|    }
 2376|       |
 2377|  2.05M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 2.05M, False: 1.00M]
  ------------------
 2378|  2.05M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 22.1k, False: 2.03M]
  ------------------
 2379|  22.1k|            return *it;
 2380|  22.1k|        }
 2381|  2.05M|    }
 2382|       |
 2383|  1.00M|    return unexpected(parse_error::error);
 2384|  1.02M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|  1.65M|{
 2331|  1.65M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  1.65M|    else {
 2344|  1.65M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.65M|            if (ch < 'A' || ch > 'Z') {
 2346|  1.65M|                return ch;
 2347|  1.65M|            }
 2348|  1.65M|            return static_cast<char_type>(ch +
 2349|  1.65M|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.65M|        };
 2351|       |
 2352|  1.65M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3939|  1.65M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.65M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.65M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 59.5k, False: 1.59M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  59.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  59.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  59.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  59.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  59.5k|    }                                                  \
  |  |  |  | 3938|  1.65M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  1.59M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  1.59M|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  1.59M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  986|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.59M, False: 926]
  |  |  ------------------
  ------------------
 2357|  1.59M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  1.59M|                    return ascii_tolower(a) ==
 2359|  1.59M|                           static_cast<detail::char_t<Range>>(b);
 2360|  1.59M|                }))) {
 2361|  1.59M|            return unexpected(parse_error::error);
 2362|  1.59M|        }
 2363|       |
 2364|    926|        return it;
 2365|  1.59M|    }
 2366|  1.65M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  1.86M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.86M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 1.47M, False: 388k]
  |  Branch (2345:29): [True: 374k, False: 14.2k]
  ------------------
 2346|  1.84M|                return ch;
 2347|  1.84M|            }
 2348|  14.2k|            return static_cast<char_type>(ch +
 2349|  14.2k|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.86M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|   451k|{
 2246|   451k|    auto it = read_code_unit(range);
 2247|   451k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|   451k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.22k, False: 449k]
  |  |  ------------------
  ------------------
 2248|  1.22k|        return unexpected(make_eof_parse_error(it.error()));
 2249|  1.22k|    }
 2250|       |
 2251|   449k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  986|   449k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 443k, False: 6.71k]
  |  |  ------------------
  ------------------
 2252|   449k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   443k|        return unexpected(parse_error::error);
 2254|   443k|    }
 2255|       |
 2256|  6.71k|    return *it;
 2257|   449k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|  1.09M|{
 2095|  1.09M|    auto it = read_while_code_unit(range, pred);
 2096|  1.09M|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 619k, False: 471k]
  ------------------
 2097|   619k|        return unexpected(parse_error::error);
 2098|   619k|    }
 2099|   471k|    return it;
 2100|  1.09M|}
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|   447k|    {
 1720|   447k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   447k|                           ranges::common_range<Range>) {
 1737|   447k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   447k|            auto end_seg = range.end().contiguous_segment();
 1739|   447k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  986|   447k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 19.6k, False: 427k]
  |  |  ------------------
  ------------------
 1740|   447k|                             detail::to_address(end_seg.end()))) {
 1741|  19.6k|                auto& str = m_storage.emplace();
 1742|  19.6k|                str.reserve(range.end().position() - range.begin().position());
 1743|  19.6k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  19.6k|                m_view = string_view_type{str};
 1745|  19.6k|                return;
 1746|  19.6k|            }
 1747|       |
 1748|   427k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   427k|                                                            end_seg.data());
 1750|   427k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   447k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  3.94M|    {
 1681|  3.94M|        return m_view;
 1682|  3.94M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  2.49M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|   315k|    {
 6117|   315k|        const bool need_skipped_width =
 6118|   315k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 315k]
  |  Branch (6118:33): [True: 0, False: 315k]
  ------------------
 6119|   315k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   315k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 315k]
  ------------------
 6122|   315k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 315k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   315k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 315k, False: 0]
  ------------------
 6131|   315k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 315k]
  ------------------
 6132|   315k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   315k|        return result_type{rng.begin(), 0};
 6156|   315k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  1.65M|{
 1956|  1.65M|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1051|  1.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  1.65M|    if constexpr (ranges::sized_range<Range>) {
 1959|  1.65M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  1.65M|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 59.8k, False: 1.59M]
  ------------------
 1961|  59.8k|            return unexpected(eof_error::eof);
 1962|  59.8k|        }
 1963|       |
 1964|  1.59M|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  1.65M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  1.93M|{
 1998|  1.93M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1051|  1.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.93M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.93M|    auto it = range.begin();
 2002|  1.93M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.93M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|  1.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.93M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  1.93M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.93M, False: 0]
  ------------------
 2011|  1.93M|        ++it;
 2012|  1.93M|        return {it, string_type(1, *range.begin())};
 2013|  1.93M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  1.93M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  3.59M|{
  945|  3.59M|    return is_range_eof(r.begin(), r.end());
  946|  3.59M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  3.59M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.59M|    {
  938|  3.59M|        return begin == end;
  939|  3.59M|    }
  940|  3.59M|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   403k|    {
  190|   403k|        i = std::move(bound);
  191|   403k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  1.93M|    {
 1989|  1.93M|        return !codepoint.empty();
 1990|  1.93M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  1.65M|{
  951|  1.65M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|  1.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 5.42k, False: 1.64M]
  |  |  ------------------
  ------------------
  952|  5.42k|        return eof_error::eof;
  953|  5.42k|    }
  954|  1.64M|    return eof_error::good;
  955|  1.65M|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   854k|{
 1945|   854k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   854k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 732, False: 853k]
  |  |  ------------------
  ------------------
 1946|    732|        return unexpected(e);
 1947|    732|    }
 1948|       |
 1949|   853k|    return ranges::next(range.begin());
 1950|   854k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   853k|    {
  296|   853k|        ++x;
  297|   853k|        return x;
  298|   853k|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3257|   630k|{
 3258|   630k|    auto r = read_one_of_code_unit(range, "+-");
 3259|   630k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 625k, False: 4.46k]
  ------------------
 3260|   625k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 625k, False: 24]
  ------------------
 3261|   625k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|   625k|        }
 3263|     24|        return unexpected(eof_error::eof);
 3264|   625k|    }
 3265|       |
 3266|  4.46k|    auto& it = *r;
 3267|  4.46k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 2.93k, False: 1.53k]
  ------------------
 3268|  2.93k|        return std::pair{it, sign_type::minus_sign};
 3269|  2.93k|    }
 3270|  1.53k|    return std::pair{it, sign_type::plus_sign};
 3271|  4.46k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|   712k|{
 2372|   712k|    auto it = read_code_unit(range);
 2373|   712k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|   712k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 388, False: 712k]
  |  |  ------------------
  ------------------
 2374|    388|        return unexpected(make_eof_parse_error(it.error()));
 2375|    388|    }
 2376|       |
 2377|  1.42M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 1.42M, False: 702k]
  ------------------
 2378|  1.42M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 9.98k, False: 1.41M]
  ------------------
 2379|  9.98k|            return *it;
 2380|  9.98k|        }
 2381|  1.42M|    }
 2382|       |
 2383|   702k|    return unexpected(parse_error::error);
 2384|   712k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  1.65M|{
 2331|  1.65M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  1.65M|    else {
 2344|  1.65M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.65M|            if (ch < 'A' || ch > 'Z') {
 2346|  1.65M|                return ch;
 2347|  1.65M|            }
 2348|  1.65M|            return static_cast<char_type>(ch +
 2349|  1.65M|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.65M|        };
 2351|       |
 2352|  1.65M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3939|  1.65M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  1.65M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  1.65M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  1.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 59.8k, False: 1.59M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  59.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  59.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  59.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  59.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  59.8k|    }                                                  \
  |  |  |  | 3938|  1.65M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  1.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  1.59M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  1.59M|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  1.59M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  986|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.59M, False: 926]
  |  |  ------------------
  ------------------
 2357|  1.59M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  1.59M|                    return ascii_tolower(a) ==
 2359|  1.59M|                           static_cast<detail::char_t<Range>>(b);
 2360|  1.59M|                }))) {
 2361|  1.59M|            return unexpected(parse_error::error);
 2362|  1.59M|        }
 2363|       |
 2364|    926|        return it;
 2365|  1.59M|    }
 2366|  1.65M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  1.86M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.86M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 1.47M, False: 390k]
  |  Branch (2345:29): [True: 375k, False: 14.3k]
  ------------------
 2346|  1.84M|                return ch;
 2347|  1.84M|            }
 2348|  14.3k|            return static_cast<char_type>(ch +
 2349|  14.3k|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.86M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|   141k|{
 2246|   141k|    auto it = read_code_unit(range);
 2247|   141k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 344, False: 141k]
  |  |  ------------------
  ------------------
 2248|    344|        return unexpected(make_eof_parse_error(it.error()));
 2249|    344|    }
 2250|       |
 2251|   141k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  986|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 138k, False: 2.56k]
  |  |  ------------------
  ------------------
 2252|   141k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   138k|        return unexpected(parse_error::error);
 2254|   138k|    }
 2255|       |
 2256|  2.56k|    return *it;
 2257|   141k|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|   368k|{
 2075|   368k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   368k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|   368k|{
 2056|   368k|    if constexpr (ranges::common_range<Range>) {
 2057|   368k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|   368k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   628k|{
 3066|   628k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 628k, False: 0]
  ------------------
 3067|   628k|        auto it = read_while_classic_space(range);
 3068|   628k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   628k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   628k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 4.03k, False: 624k]
  |  |  ------------------
  ------------------
 3070|  4.03k|            return unexpected(e);
 3071|  4.03k|        }
 3072|       |
 3073|   624k|        return it;
 3074|   628k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   628k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   628k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   628k|    else {
 2225|   628k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   628k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   628k|            return detail::is_cp_space(cp);
 2238|   628k|        });
 2239|   628k|    }
 2240|   628k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|   628k|{
 2181|   628k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   628k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  1.07M|{
 2160|  1.07M|    auto it = range.begin();
 2161|  2.21M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.93M, False: 275k]
  ------------------
 2162|  1.93M|        const auto val =
 2163|  1.93M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.93M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|  1.93M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 1.93M, False: 0]
  |  |  ------------------
  ------------------
 2165|  1.93M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.93M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.93M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 795k, False: 1.14M]
  ------------------
 2168|   795k|                return it;
 2169|   795k|            }
 2170|  1.93M|        }
 2171|  1.14M|        it = val.iterator;
 2172|  1.14M|    }
 2173|       |
 2174|   275k|    return it;
 2175|  1.07M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   628k|        : m_fptr([](storage fn,
  743|   628k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   628k|              cvref<T> obj = *get<T>(fn);
  745|   628k|              if constexpr (std::is_void_v<R>) {
  746|   628k|                  obj(static_cast<decltype(args)>(args)...);
  747|   628k|              }
  748|   628k|              else {
  749|   628k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   628k|              }
  751|   628k|          }),
  752|   628k|          m_storage(std::addressof(f))
  753|   628k|    {
  754|   628k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  1.08M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.08M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.08M|              else {
  749|  1.08M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.08M|              }
  751|  1.08M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  1.08M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.08M|        else if constexpr (std::is_object_v<T>) {
  688|  1.08M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.08M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|  1.08M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.08M|            return detail::is_cp_space(cp);
 2238|  1.08M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   628k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   628k|        {
  662|   628k|        }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.43M|    {
  304|  1.43M|        ranges::advance(x, n);
  305|  1.43M|        return x;
  306|  1.43M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.43M|    {
  268|  1.43M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.43M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.43M|    {
  181|  4.64M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 3.20M, False: 1.43M]
  ------------------
  182|  3.20M|            ++i;
  183|  3.20M|        }
  184|  1.43M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|   143k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   143k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   143k|            auto rd = make_reader<T, char_type>();
 6237|   143k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|   143k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 143k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6238|       |
 6239|   143k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 143k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   143k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   143k|                return impl(rd, range, value);
 6242|   143k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   143k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|   919k|    {
 3156|   919k|        reader_error_handler eh{};
 3157|   919k|        get_derived().check_specs_impl(specs, eh);
 3158|   919k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  986|   919k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 919k]
  |  |  ------------------
  ------------------
 3159|      0|            return detail::unexpected_scan_error(
 3160|      0|                scan_error::invalid_format_string, eh.m_msg);
 3161|      0|        }
 3162|   919k|        return {};
 3163|   919k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3167|   919k|    {
 3168|   919k|        return static_cast<Derived&>(*this);
 3169|   919k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4177|   919k|    {
 4178|   919k|        detail::check_float_type_specs(specs, eh);
 4179|   919k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   143k|    {
 6162|   143k|        const bool need_skipped_width =
 6163|   143k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 143k]
  |  Branch (6163:33): [True: 0, False: 143k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   143k|        auto it = rng.begin();
 6167|   143k|        std::ptrdiff_t prefix_width = 0;
 6168|   143k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 143k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   143k|        else {
 6176|   143k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|   143k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   143k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   143k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.07k, False: 142k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.07k|    }                                                  \
  |  |  |  | 3938|   143k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   142k|            std::tie(it, prefix_width) = prefix_result;
 6178|   142k|        }
 6179|   142k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   142k|        std::ptrdiff_t value_width = 0;
 6183|   142k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 142k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   142k|        else {
 6199|   142k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 46.3k, False: 95.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  46.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  46.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  46.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  46.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  46.3k|    }                                                  \
  |  | 3938|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  95.7k|                                             specs, value, loc));
 6201|       |
 6202|  95.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 95.7k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  95.7k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  95.7k|        std::ptrdiff_t postfix_width = 0;
 6211|  95.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 95.1k, False: 532]
  ------------------
 6212|  95.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  95.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  95.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  95.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  95.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 95.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  95.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  95.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  95.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  95.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  95.1k|                                 value_width));
 6216|  95.1k|            std::tie(it, postfix_width) = postfix_result;
 6217|  95.1k|        }
 6218|       |
 6219|  95.7k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  95.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  95.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 95.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  95.7k|            specs, prefix_width, value_width, postfix_width));
 6221|  95.7k|        return it;
 6222|  95.7k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3150|  1.89M|    {
 3151|  1.89M|        return true;
 3152|  1.89M|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4249|   912k|    {
 4250|   912k|        unsigned options{};
 4251|   912k|        if (specs.localized) {
  ------------------
  |  Branch (4251:13): [True: 224k, False: 688k]
  ------------------
 4252|   224k|            options |= float_reader_base::allow_thsep;
 4253|   224k|        }
 4254|       |
 4255|   912k|        SCN_GCC_COMPAT_PUSH
 4256|   912k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4257|       |
 4258|   912k|        switch (specs.type) {
 4259|   174k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4259:13): [True: 174k, False: 738k]
  ------------------
 4260|   174k|                return options | float_reader_base::allow_fixed;
 4261|       |
 4262|  58.9k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4262:13): [True: 58.9k, False: 853k]
  ------------------
 4263|  58.9k|                return options | float_reader_base::allow_scientific;
 4264|       |
 4265|   246k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4265:13): [True: 246k, False: 665k]
  ------------------
 4266|   246k|                return options | float_reader_base::allow_hex;
 4267|       |
 4268|   208k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4268:13): [True: 208k, False: 704k]
  ------------------
 4269|   208k|                return options | float_reader_base::allow_scientific |
 4270|   208k|                       float_reader_base::allow_fixed;
 4271|       |
 4272|   224k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4272:13): [True: 224k, False: 688k]
  ------------------
 4273|   224k|                return options | float_reader_base::allow_scientific |
 4274|   224k|                       float_reader_base::allow_fixed |
 4275|   224k|                       float_reader_base::allow_hex;
 4276|       |
 4277|      0|            default:
  ------------------
  |  Branch (4277:13): [True: 0, False: 912k]
  ------------------
 4278|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1051|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4279|   912k|                SCN_UNREACHABLE;
  ------------------
  |  | 1014|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4280|   912k|        }
 4281|       |
 4282|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4283|   912k|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3701|   912k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1869|  1.24M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1630|  2.49M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3732|   295k|    {
 3733|   295k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1051|   295k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   295k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   295k|        const std::ptrdiff_t sign_len =
 3736|   295k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 2.02k, False: 293k]
  ------------------
 3737|       |
 3738|   295k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3939|   295k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   295k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   295k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 34.7k, False: 260k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  34.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  34.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  34.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  34.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  34.7k|    }                                                  \
  |  |  |  | 3938|   295k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   260k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   260k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   295k|    }
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 4089|   989k|    {
 4090|   989k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4090:13): [True: 989k, False: 0]
  ------------------
 4091|   989k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4091:13): [True: 989k, False: 0]
  ------------------
 4092|   989k|            return;
 4093|   989k|        }
 4094|       |
 4095|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4096|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4096:13): [True: 0, False: 0]
  ------------------
 4097|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4097:27): [True: 0, False: 0]
  ------------------
 4098|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4098:21): [True: 0, False: 0]
  ------------------
 4099|      0|                    ch = CharT{'.'};
 4100|      0|                }
 4101|      0|            }
 4102|      0|        }
 4103|       |
 4104|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4104:13): [True: 0, False: 0]
  ------------------
 4105|      0|            return;
 4106|      0|        }
 4107|       |
 4108|      0|        auto first =
 4109|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4110|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4110:13): [True: 0, False: 0]
  ------------------
 4111|      0|            return;
 4112|      0|        }
 4113|       |
 4114|      0|        m_thsep_indices.push_back(
 4115|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4116|       |
 4117|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4117:31): [True: 0, False: 0]
  ------------------
 4118|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4118:17): [True: 0, False: 0]
  ------------------
 4119|      0|                *first++ = std::move(*it);
 4120|      0|            }
 4121|      0|            else {
 4122|      0|                m_thsep_indices.push_back(
 4123|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4124|      0|            }
 4125|      0|        }
 4126|       |
 4127|      0|        str.erase(first, str.end());
 4128|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|  1.09M|    {
 1686|  1.09M|        return m_storage.has_value();
 1687|  1.09M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|   645k|    {
 1691|   645k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1051|   645k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   645k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|   645k|        return *m_storage;
 1693|   645k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   142k|    {
 4203|   142k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   142k|#if !SCN_DISABLE_LOCALE
 4206|   142k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 32.3k, False: 109k]
  ------------------
 4207|  32.3k|            return read_impl<Range>(
 4208|  32.3k|                range, rd,
 4209|  32.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  32.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  32.3k|                },
 4212|  32.3k|                value, loc);
 4213|  32.3k|        }
 4214|   109k|#endif
 4215|       |
 4216|   109k|        return read_impl<Range>(
 4217|   109k|            range, rd,
 4218|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   109k|                return r.read_source(SCN_FWD(args)...);
 4220|   109k|            },
 4221|   109k|            value);
 4222|   142k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   190k|    {
 4239|   190k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   190k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 58.2k, False: 132k]
  |  |  ------------------
  ------------------
 4241|  58.2k|            return unexpected(r.error());
 4242|  58.2k|        }
 4243|       |
 4244|   132k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3939|   132k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   132k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   132k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.95k, False: 130k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.95k|    }                                                  \
  |  |  |  | 3938|   132k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   130k|        return ranges::next(range.begin(), n);
 4246|   132k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   624k|    {
  763|   624k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|   624k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   624k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  32.3k|        : m_fptr([](storage fn,
  743|  32.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.3k|              cvref<T> obj = *get<T>(fn);
  745|  32.3k|              if constexpr (std::is_void_v<R>) {
  746|  32.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  32.3k|              }
  748|  32.3k|              else {
  749|  32.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.3k|              }
  751|  32.3k|          }),
  752|  32.3k|          m_storage(std::addressof(f))
  753|  32.3k|    {
  754|  32.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  32.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  32.3k|              else {
  749|  32.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.3k|              }
  751|  32.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  32.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  32.3k|        else if constexpr (std::is_object_v<T>) {
  688|  32.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  32.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  32.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  32.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1057|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  32.3k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3720|   112k|    {
 3721|   112k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|   112k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  985|   112k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|   112k|        return read_source_impl(range);
 3727|   112k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3746|   624k|    {
 3747|   624k|        SCN_TRY(sign_result,
  ------------------
  |  | 3939|   624k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   624k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   624k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   624k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 624k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|   624k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   624k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|   624k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|   624k|        auto it = sign_result.first;
 3750|   624k|        m_sign = sign_result.second;
 3751|       |
 3752|   624k|        auto digits_begin = it;
 3753|   624k|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|       |                      ranges::sized_range<Range>) {
 3756|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3757|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|       |                SCN_TRY_ASSIGN(
 3759|       |                    it,
 3760|       |                    do_read_source_impl(
 3761|       |                        r,
 3762|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|       |            }
 3765|       |            else {
 3766|       |                auto cb = [&](const auto& rr)
 3767|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|       |                    auto res = read_all(rr);
 3769|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|       |                        return detail::unexpected_scan_error(
 3771|       |                            scan_error::invalid_scanned_value,
 3772|       |                            "Invalid float value");
 3773|       |                    }
 3774|       |                    return res;
 3775|       |                };
 3776|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3777|       |            }
 3778|       |        }
 3779|   624k|        else {
 3780|   624k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3934|   624k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|   624k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|   624k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 177k, False: 447k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|   177k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|   177k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|   177k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|   177k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|   177k|    }                                                  \
  |  | 3938|   624k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|   624k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3781|   447k|                it,
 3782|   447k|                do_read_source_impl(
 3783|   447k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|   447k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|   447k|        }
 3786|       |
 3787|   624k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1051|   624k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   624k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|   447k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 447k, False: 0]
  |  Branch (3789:48): [True: 447k, False: 0]
  ------------------
 3790|   447k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 447k, False: 0]
  ------------------
 3791|   447k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 447k, False: 0]
  ------------------
 3792|   447k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|   447k|        }
 3794|       |
 3795|   447k|        handle_separators();
 3796|       |
 3797|   447k|        return it;
 3798|   624k|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4032|   624k|    {
 4033|   624k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|   624k|        const bool allowed_nonhex =
 4035|   624k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|   624k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|   624k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 624k, False: 0]
  |  Branch (4038:45): [True: 0, False: 624k]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|   624k|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 624k]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|   624k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 624k, False: 0]
  |  Branch (4047:45): [True: 0, False: 624k]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|   624k|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 624k]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|   624k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 403k, False: 220k]
  |  Branch (4054:28): [True: 123k, False: 280k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|   123k|            auto it = range.begin();
 4058|       |
 4059|   123k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 276, False: 123k]
  ------------------
 4060|    276|                m_kind = float_kind::hex_with_prefix;
 4061|    276|                it = *r;
 4062|    276|            }
 4063|   123k|            else {
 4064|   123k|                m_kind = float_kind::hex_without_prefix;
 4065|   123k|            }
 4066|       |
 4067|   123k|            return read_hex(ranges::subrange{it, range.end()});
 4068|   123k|        }
 4069|   501k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 220k, False: 280k]
  |  Branch (4069:29): [True: 220k, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|   220k|            m_kind = float_kind::generic;
 4073|   220k|            return read_regular_float(range);
 4074|   220k|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|   280k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  986|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 650, False: 279k]
  |  |  ------------------
  ------------------
 4080|    650|            m_kind = float_kind::hex_with_prefix;
 4081|    650|            return read_hex(ranges::subrange{*r, range.end()});
 4082|    650|        }
 4083|       |
 4084|   279k|        m_kind = float_kind::generic;
 4085|   279k|        return read_regular(range);
 4086|   280k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3840|   624k|    {
 3841|   624k|        auto it = range.begin();
 3842|   624k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 624k, False: 0]
  ------------------
 3843|   624k|            return unexpected(r.error());
 3844|   624k|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3863|   624k|    {
 3864|   624k|        auto it = range.begin();
 3865|   624k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 624k, False: 0]
  ------------------
 3866|   624k|            return r.transform_error(map_parse_error_to_scan_error(
 3867|   624k|                scan_error::invalid_scanned_value,
 3868|   624k|                "Invalid floating-point NaN value"));
 3869|   624k|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   403k|    {
 3834|   403k|        return read_matching_string_classic_nocase(range, "0x");
 3835|   403k|    }
_ZN3scn2v44impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3934|   124k|    {
 3935|   124k|        auto it = range.begin();
 3936|       |
 3937|   124k|        std::ptrdiff_t digits_count = 0;
 3938|   124k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3939|   124k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 27.4k, False: 96.6k]
  |  |  ------------------
  ------------------
 3940|  27.4k|            return r.transform_error(map_parse_error_to_scan_error(
 3941|  27.4k|                scan_error::invalid_scanned_value,
 3942|  27.4k|                "Invalid hexadecimal floating-point value"));
 3943|  27.4k|        }
 3944|  96.6k|        else {
 3945|  96.6k|            digits_count += ranges::distance(it, *r);
 3946|  96.6k|            it = *r;
 3947|  96.6k|        }
 3948|       |
 3949|  96.6k|        m_integral_part_length = digits_count;
 3950|  96.6k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3950:18): [True: 1.21k, False: 95.4k]
  ------------------
 3951|  96.6k|                                             m_locale_options.decimal_point)) {
 3952|  1.21k|            it = *r;
 3953|  1.21k|        }
 3954|       |
 3955|  96.6k|        if (auto r =
  ------------------
  |  Branch (3955:18): [True: 1.04k, False: 95.5k]
  ------------------
 3956|  96.6k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3957|  1.04k|            digits_count += ranges::distance(it, *r);
 3958|  1.04k|            it = *r;
 3959|  1.04k|        }
 3960|       |
 3961|  96.6k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  986|  96.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 96.6k]
  |  |  ------------------
  ------------------
 3962|      0|            return detail::unexpected_scan_error(
 3963|      0|                scan_error::invalid_scanned_value,
 3964|      0|                "No significand digits in hexfloat");
 3965|      0|        }
 3966|       |
 3967|  96.6k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3968|       |
 3969|  96.6k|        return it;
 3970|  96.6k|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3818|   220k|    {
 3819|   220k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  986|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 220k]
  |  |  |  Branch (986:45): [True: 0, False: 220k]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3820|   220k|                         thsep_allowed)) {
 3821|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3822|      0|                return char_to_int(ch) < 16 ||
 3823|      0|                       ch == m_locale_options.thousands_sep;
 3824|      0|            });
 3825|      0|        }
 3826|       |
 3827|   220k|        return read_while1_code_unit(
 3828|   220k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3829|   220k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   220k|        : m_fptr([](storage fn,
  743|   220k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   220k|              cvref<T> obj = *get<T>(fn);
  745|   220k|              if constexpr (std::is_void_v<R>) {
  746|   220k|                  obj(static_cast<decltype(args)>(args)...);
  747|   220k|              }
  748|   220k|              else {
  749|   220k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   220k|              }
  751|   220k|          }),
  752|   220k|          m_storage(std::addressof(f))
  753|   220k|    {
  754|   220k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|   353k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   353k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   353k|              else {
  749|   353k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   353k|              }
  751|   353k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   353k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   353k|        else if constexpr (std::is_object_v<T>) {
  688|   353k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   353k|    }
_ZZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3828|   353k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   220k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   220k|        {
  662|   220k|        }
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3906|   391k|    {
 3907|   391k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 15.5k, False: 376k]
  ------------------
 3908|  15.5k|            auto beg_exp_it = range.begin();
 3909|  15.5k|            auto it = *r;
 3910|       |
 3911|  15.5k|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 15.4k, False: 72]
  ------------------
 3912|  15.5k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|  15.4k|                it = r_sign->first;
 3914|  15.4k|            }
 3915|       |
 3916|  15.5k|            if (auto r_exp = read_while1_code_unit(
 3917|  15.5k|                    ranges::subrange{it, range.end()},
 3918|  15.5k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|  15.5k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  986|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.25k, False: 14.2k]
  |  |  ------------------
  ------------------
 3920|  1.25k|                it = beg_exp_it;
 3921|  1.25k|            }
 3922|  14.2k|            else {
 3923|  14.2k|                it = *r_exp;
 3924|  14.2k|            }
 3925|       |
 3926|  15.5k|            return it;
 3927|  15.5k|        }
 3928|   376k|        return range.begin();
 3929|   391k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  15.5k|        : m_fptr([](storage fn,
  743|  15.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.5k|              cvref<T> obj = *get<T>(fn);
  745|  15.5k|              if constexpr (std::is_void_v<R>) {
  746|  15.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.5k|              }
  748|  15.5k|              else {
  749|  15.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.5k|              }
  751|  15.5k|          }),
  752|  15.5k|          m_storage(std::addressof(f))
  753|  15.5k|    {
  754|  15.5k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  49.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  49.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  49.0k|              else {
  749|  49.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  49.0k|              }
  751|  49.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  49.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  49.0k|        else if constexpr (std::is_object_v<T>) {
  688|  49.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  49.0k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3918|  49.0k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  15.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  15.5k|        {
  662|  15.5k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3975|   500k|    {
 3976|   500k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|   500k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 412k, False: 87.3k]
  |  Branch (3977:50): [True: 29.4k, False: 383k]
  ------------------
 3978|       |
 3979|   500k|        auto it = ranges::begin(range);
 3980|   500k|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|   500k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|   500k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   500k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 145k, False: 354k]
  |  |  ------------------
  ------------------
 3984|   145k|            return r.transform_error(
 3985|   145k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|   145k|                                              "Invalid floating-point value"));
 3987|   145k|        }
 3988|   354k|        else {
 3989|   354k|            digits_count += ranges::distance(it, *r);
 3990|   354k|            it = *r;
 3991|   354k|        }
 3992|       |
 3993|   354k|        m_integral_part_length = digits_count;
 3994|   354k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 5.50k, False: 348k]
  ------------------
 3995|   354k|                                             m_locale_options.decimal_point)) {
 3996|  5.50k|            it = *r;
 3997|  5.50k|        }
 3998|       |
 3999|   354k|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 4.72k, False: 349k]
  ------------------
 4000|   354k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|  4.72k|            digits_count += ranges::distance(it, *r);
 4002|  4.72k|            it = *r;
 4003|  4.72k|        }
 4004|       |
 4005|   354k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  986|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|   354k|        auto beg_exp_it = it;
 4012|   354k|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 295k, False: 59.4k]
  ------------------
 4013|   295k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|   295k|        }
 4015|   354k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 5.30k, False: 349k]
  |  Branch (4015:29): [True: 3.86k, False: 1.43k]
  ------------------
 4016|  3.86k|            return detail::unexpected_scan_error(
 4017|  3.86k|                scan_error::invalid_scanned_value,
 4018|  3.86k|                "No exponent given to scientific float");
 4019|  3.86k|        }
 4020|       |
 4021|   350k|        m_kind =
 4022|   350k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 336k, False: 14.0k]
  ------------------
 4023|       |
 4024|   350k|        return it;
 4025|   354k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3803|   854k|    {
 3804|   854k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  986|   854k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 854k]
  |  |  |  Branch (986:45): [True: 0, False: 854k]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|   854k|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|   854k|        return read_while1_code_unit(
 3813|   854k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|   854k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   854k|        : m_fptr([](storage fn,
  743|   854k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   854k|              cvref<T> obj = *get<T>(fn);
  745|   854k|              if constexpr (std::is_void_v<R>) {
  746|   854k|                  obj(static_cast<decltype(args)>(args)...);
  747|   854k|              }
  748|   854k|              else {
  749|   854k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   854k|              }
  751|   854k|          }),
  752|   854k|          m_storage(std::addressof(f))
  753|   854k|    {
  754|   854k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.31M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.31M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.31M|              else {
  749|  1.31M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.31M|              }
  751|  1.31M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  1.31M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.31M|        else if constexpr (std::is_object_v<T>) {
  688|  1.31M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.31M|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3813|  1.31M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   854k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   854k|        {
  662|   854k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1675|   447k|    {
 1676|   447k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1057|   447k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   447k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  32.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  32.3k|        {
  662|  32.3k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   109k|        : m_fptr([](storage fn,
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|   109k|              if constexpr (std::is_void_v<R>) {
  746|   109k|                  obj(static_cast<decltype(args)>(args)...);
  747|   109k|              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
  752|   109k|          m_storage(std::addressof(f))
  753|   109k|    {
  754|   109k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   109k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   109k|        else if constexpr (std::is_object_v<T>) {
  688|   109k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   109k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   109k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   109k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3706|   512k|    {
 3707|   512k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  986|   512k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 512k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|   512k|        return read_source_impl(range);
 3713|   512k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   109k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   109k|        {
  662|   109k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   142k|    {
 4203|   142k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   142k|#if !SCN_DISABLE_LOCALE
 4206|   142k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 32.4k, False: 109k]
  ------------------
 4207|  32.4k|            return read_impl<Range>(
 4208|  32.4k|                range, rd,
 4209|  32.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  32.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  32.4k|                },
 4212|  32.4k|                value, loc);
 4213|  32.4k|        }
 4214|   109k|#endif
 4215|       |
 4216|   109k|        return read_impl<Range>(
 4217|   109k|            range, rd,
 4218|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   109k|                return r.read_source(SCN_FWD(args)...);
 4220|   109k|            },
 4221|   109k|            value);
 4222|   142k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   190k|    {
 4239|   190k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   190k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 27.4k, False: 163k]
  |  |  ------------------
  ------------------
 4241|  27.4k|            return unexpected(r.error());
 4242|  27.4k|        }
 4243|       |
 4244|   163k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3939|   163k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   163k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   163k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 32.8k, False: 130k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  32.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  32.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  32.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  32.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  32.8k|    }                                                  \
  |  |  |  | 3938|   163k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   130k|        return ranges::next(range.begin(), n);
 4246|   163k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   624k|    {
  763|   624k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1057|   624k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   624k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  32.4k|        : m_fptr([](storage fn,
  743|  32.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.4k|              cvref<T> obj = *get<T>(fn);
  745|  32.4k|              if constexpr (std::is_void_v<R>) {
  746|  32.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  32.4k|              }
  748|  32.4k|              else {
  749|  32.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.4k|              }
  751|  32.4k|          }),
  752|  32.4k|          m_storage(std::addressof(f))
  753|  32.4k|    {
  754|  32.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  32.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  32.4k|              else {
  749|  32.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.4k|              }
  751|  32.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  32.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  32.4k|        else if constexpr (std::is_object_v<T>) {
  688|  32.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  32.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  32.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  32.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1057|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  32.4k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3720|   112k|    {
 3721|   112k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3722|   112k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  985|   112k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 3723|      0|            m_locale_options.thousands_sep = CharT{0};
 3724|      0|        }
 3725|       |
 3726|   112k|        return read_source_impl(range);
 3727|   112k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3746|   624k|    {
 3747|   624k|        SCN_TRY(sign_result,
  ------------------
  |  | 3939|   624k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   624k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   624k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   624k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 624k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|   624k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   624k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3748|   624k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3749|   624k|        auto it = sign_result.first;
 3750|   624k|        m_sign = sign_result.second;
 3751|       |
 3752|   624k|        auto digits_begin = it;
 3753|   624k|        auto r = ranges::subrange{it, range.end()};
 3754|       |        if constexpr (ranges::contiguous_range<Range> &&
 3755|   624k|                      ranges::sized_range<Range>) {
 3756|   624k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  986|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 624k]
  |  |  |  Branch (986:45): [True: 0, False: 624k]
  |  |  |  Branch (986:45): [True: 0, False: 624k]
  |  |  ------------------
  ------------------
 3757|   624k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3758|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|    }                                                  \
  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3759|      0|                    it,
 3760|      0|                    do_read_source_impl(
 3761|      0|                        r,
 3762|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3763|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3764|      0|            }
 3765|   624k|            else {
 3766|   624k|                auto cb = [&](const auto& rr)
 3767|   624k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|   624k|                    auto res = read_all(rr);
 3769|   624k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3770|   624k|                        return detail::unexpected_scan_error(
 3771|   624k|                            scan_error::invalid_scanned_value,
 3772|   624k|                            "Invalid float value");
 3773|   624k|                    }
 3774|   624k|                    return res;
 3775|   624k|                };
 3776|   624k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3934|   624k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|   624k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|   624k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 83.0k, False: 541k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  83.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  83.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  83.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  83.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  83.0k|    }                                                  \
  |  | 3938|   624k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|   624k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3777|   541k|            }
 3778|       |        }
 3779|       |        else {
 3780|       |            SCN_TRY_ASSIGN(
 3781|       |                it,
 3782|       |                do_read_source_impl(
 3783|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3784|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3785|       |        }
 3786|       |
 3787|   624k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1051|   624k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   624k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3788|       |
 3789|   541k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3789:13): [True: 541k, False: 0]
  |  Branch (3789:48): [True: 541k, False: 0]
  ------------------
 3790|   541k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3790:13): [True: 541k, False: 0]
  ------------------
 3791|   541k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3791:13): [True: 541k, False: 0]
  ------------------
 3792|   541k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3793|   541k|        }
 3794|       |
 3795|   541k|        handle_separators();
 3796|       |
 3797|   541k|        return it;
 3798|   624k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3840|   624k|    {
 3841|   624k|        auto it = range.begin();
 3842|   624k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3842:73): [True: 624k, False: 0]
  ------------------
 3843|   624k|            return unexpected(r.error());
 3844|   624k|        }
 3845|      0|        else {
 3846|      0|            it = *r;
 3847|      0|        }
 3848|       |
 3849|      0|        if (auto r = read_matching_string_classic_nocase(
 3850|      0|                ranges::subrange{it, range.end()}, "inity");
 3851|      0|            !r) {
  ------------------
  |  Branch (3851:13): [True: 0, False: 0]
  ------------------
 3852|      0|            m_kind = float_kind::inf_short;
 3853|      0|            return it;
 3854|      0|        }
 3855|      0|        else {
 3856|      0|            m_kind = float_kind::inf_long;
 3857|      0|            return *r;
 3858|      0|        }
 3859|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3863|   624k|    {
 3864|   624k|        auto it = range.begin();
 3865|   624k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3865:73): [True: 624k, False: 0]
  ------------------
 3866|   624k|            return r.transform_error(map_parse_error_to_scan_error(
 3867|   624k|                scan_error::invalid_scanned_value,
 3868|   624k|                "Invalid floating-point NaN value"));
 3869|   624k|        }
 3870|      0|        else {
 3871|      0|            it = *r;
 3872|      0|        }
 3873|       |
 3874|      0|        if (auto r =
 3875|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3876|      0|            !r) {
  ------------------
  |  Branch (3876:13): [True: 0, False: 0]
  ------------------
 3877|      0|            m_kind = float_kind::nan_simple;
 3878|      0|            return it;
 3879|      0|        }
 3880|      0|        else {
 3881|      0|            it = *r;
 3882|      0|        }
 3883|       |
 3884|      0|        auto payload_beg_it = it;
 3885|      0|        it = read_while_code_unit(
 3886|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3887|      0|                return is_ascii_char(ch) &&
 3888|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3889|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3890|      0|            });
 3891|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3892|       |
 3893|      0|        m_kind = float_kind::nan_with_payload;
 3894|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3894:18): [True: 0, False: 0]
  ------------------
 3895|      0|                                             ')')) {
 3896|      0|            return *r;
 3897|      0|        }
 3898|      0|        return detail::unexpected_scan_error(
 3899|      0|            scan_error::invalid_scanned_value,
 3900|      0|            "Invalid floating-point NaN payload");
 3901|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   403k|    {
 3834|   403k|        return read_matching_string_classic_nocase(range, "0x");
 3835|   403k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|   368k|{
 2095|   368k|    auto it = read_while_code_unit(range, pred);
 2096|   368k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 219k, False: 149k]
  ------------------
 2097|   219k|        return unexpected(parse_error::error);
 2098|   219k|    }
 2099|   149k|    return it;
 2100|   368k|}
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3906|  82.4k|    {
 3907|  82.4k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3907:18): [True: 5.51k, False: 76.9k]
  ------------------
 3908|  5.51k|            auto beg_exp_it = range.begin();
 3909|  5.51k|            auto it = *r;
 3910|       |
 3911|  5.51k|            if (auto r_sign =
  ------------------
  |  Branch (3911:22): [True: 5.48k, False: 24]
  ------------------
 3912|  5.51k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3913|  5.48k|                it = r_sign->first;
 3914|  5.48k|            }
 3915|       |
 3916|  5.51k|            if (auto r_exp = read_while1_code_unit(
 3917|  5.51k|                    ranges::subrange{it, range.end()},
 3918|  5.51k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3919|  5.51k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  986|  5.51k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 474, False: 5.03k]
  |  |  ------------------
  ------------------
 3920|    474|                it = beg_exp_it;
 3921|    474|            }
 3922|  5.03k|            else {
 3923|  5.03k|                it = *r_exp;
 3924|  5.03k|            }
 3925|       |
 3926|  5.51k|            return it;
 3927|  5.51k|        }
 3928|  76.9k|        return range.begin();
 3929|  82.4k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  5.51k|        : m_fptr([](storage fn,
  743|  5.51k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.51k|              cvref<T> obj = *get<T>(fn);
  745|  5.51k|              if constexpr (std::is_void_v<R>) {
  746|  5.51k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.51k|              }
  748|  5.51k|              else {
  749|  5.51k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.51k|              }
  751|  5.51k|          }),
  752|  5.51k|          m_storage(std::addressof(f))
  753|  5.51k|    {
  754|  5.51k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|  16.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  16.9k|              else {
  749|  16.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.9k|              }
  751|  16.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  16.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  16.9k|        else if constexpr (std::is_object_v<T>) {
  688|  16.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  16.9k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3918|  16.9k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  5.51k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.51k|        {
  662|  5.51k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3975|   220k|    {
 3976|   220k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3977|   220k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3977:35): [True: 133k, False: 87.3k]
  |  Branch (3977:50): [True: 29.4k, False: 104k]
  ------------------
 3978|       |
 3979|   220k|        auto it = ranges::begin(range);
 3980|   220k|        std::ptrdiff_t digits_count = 0;
 3981|       |
 3982|   220k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3983|   220k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 78.9k, False: 141k]
  |  |  ------------------
  ------------------
 3984|  78.9k|            return r.transform_error(
 3985|  78.9k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3986|  78.9k|                                              "Invalid floating-point value"));
 3987|  78.9k|        }
 3988|   141k|        else {
 3989|   141k|            digits_count += ranges::distance(it, *r);
 3990|   141k|            it = *r;
 3991|   141k|        }
 3992|       |
 3993|   141k|        m_integral_part_length = digits_count;
 3994|   141k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3994:18): [True: 2.56k, False: 139k]
  ------------------
 3995|   141k|                                             m_locale_options.decimal_point)) {
 3996|  2.56k|            it = *r;
 3997|  2.56k|        }
 3998|       |
 3999|   141k|        if (auto r =
  ------------------
  |  Branch (3999:18): [True: 2.19k, False: 139k]
  ------------------
 4000|   141k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4001|  2.19k|            digits_count += ranges::distance(it, *r);
 4002|  2.19k|            it = *r;
 4003|  2.19k|        }
 4004|       |
 4005|   141k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  986|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 141k]
  |  |  ------------------
  ------------------
 4006|      0|            return detail::unexpected_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "No significand digits in float");
 4009|      0|        }
 4010|       |
 4011|   141k|        auto beg_exp_it = it;
 4012|   141k|        if (allowed_exp) {
  ------------------
  |  Branch (4012:13): [True: 82.4k, False: 59.4k]
  ------------------
 4013|  82.4k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4014|  82.4k|        }
 4015|   141k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4015:13): [True: 5.30k, False: 136k]
  |  Branch (4015:29): [True: 3.86k, False: 1.43k]
  ------------------
 4016|  3.86k|            return detail::unexpected_scan_error(
 4017|  3.86k|                scan_error::invalid_scanned_value,
 4018|  3.86k|                "No exponent given to scientific float");
 4019|  3.86k|        }
 4020|       |
 4021|   137k|        m_kind =
 4022|   137k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4022:13): [True: 132k, False: 5.03k]
  ------------------
 4023|       |
 4024|   137k|        return it;
 4025|   141k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3803|   362k|    {
 3804|   362k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  986|   362k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 362k]
  |  |  |  Branch (986:45): [True: 0, False: 362k]
  |  |  |  Branch (986:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3805|   362k|                         thsep_allowed)) {
 3806|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3807|      0|                return char_to_int(ch) < 10 ||
 3808|      0|                       ch == m_locale_options.thousands_sep;
 3809|      0|            });
 3810|      0|        }
 3811|       |
 3812|   362k|        return read_while1_code_unit(
 3813|   362k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3814|   362k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   362k|        : m_fptr([](storage fn,
  743|   362k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   362k|              cvref<T> obj = *get<T>(fn);
  745|   362k|              if constexpr (std::is_void_v<R>) {
  746|   362k|                  obj(static_cast<decltype(args)>(args)...);
  747|   362k|              }
  748|   362k|              else {
  749|   362k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   362k|              }
  751|   362k|          }),
  752|   362k|          m_storage(std::addressof(f))
  753|   362k|    {
  754|   362k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|   551k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   551k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   551k|              else {
  749|   551k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   551k|              }
  751|   551k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   551k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   551k|        else if constexpr (std::is_object_v<T>) {
  688|   551k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   551k|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3813|   551k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   362k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   362k|        {
  662|   362k|        }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4032|   624k|    {
 4033|   624k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4034|   624k|        const bool allowed_nonhex =
 4035|   624k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4036|   624k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4037|       |
 4038|   624k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4038:39): [True: 624k, False: 0]
  |  Branch (4038:45): [True: 0, False: 624k]
  ------------------
 4039|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4040|      0|                scan_error::invalid_scanned_value,
 4041|      0|                "Invalid infinite floating-point value"));
 4042|      0|        }
 4043|   624k|        else if (r) {
  ------------------
  |  Branch (4043:18): [True: 0, False: 624k]
  ------------------
 4044|      0|            return *r;
 4045|      0|        }
 4046|       |
 4047|   624k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4047:39): [True: 624k, False: 0]
  |  Branch (4047:45): [True: 0, False: 624k]
  ------------------
 4048|      0|            return unexpected(r.error());
 4049|      0|        }
 4050|   624k|        else if (r) {
  ------------------
  |  Branch (4050:18): [True: 0, False: 624k]
  ------------------
 4051|      0|            return *r;
 4052|      0|        }
 4053|       |
 4054|   624k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4054:13): [True: 403k, False: 220k]
  |  Branch (4054:28): [True: 123k, False: 280k]
  ------------------
 4055|       |            // only hex allowed:
 4056|       |            // prefix "0x" allowed, not required
 4057|   123k|            auto it = range.begin();
 4058|       |
 4059|   123k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4059:22): [True: 276, False: 123k]
  ------------------
 4060|    276|                m_kind = float_kind::hex_with_prefix;
 4061|    276|                it = *r;
 4062|    276|            }
 4063|   123k|            else {
 4064|   123k|                m_kind = float_kind::hex_without_prefix;
 4065|   123k|            }
 4066|       |
 4067|   123k|            return read_hex(ranges::subrange{it, range.end()});
 4068|   123k|        }
 4069|   501k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4069:13): [True: 220k, False: 280k]
  |  Branch (4069:29): [True: 220k, False: 0]
  ------------------
 4070|       |            // only nonhex allowed:
 4071|       |            // no prefix allowed
 4072|   220k|            m_kind = float_kind::generic;
 4073|   220k|            return read_regular_float(range);
 4074|   220k|        }
 4075|       |        // both hex and nonhex allowed:
 4076|       |        // check for "0x" prefix -> hex,
 4077|       |        // regular otherwise
 4078|       |
 4079|   280k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  986|   280k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 650, False: 279k]
  |  |  ------------------
  ------------------
 4080|    650|            m_kind = float_kind::hex_with_prefix;
 4081|    650|            return read_hex(ranges::subrange{*r, range.end()});
 4082|    650|        }
 4083|       |
 4084|   279k|        m_kind = float_kind::generic;
 4085|   279k|        return read_regular(range);
 4086|   280k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3767|   403k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3768|   403k|                    auto res = read_all(rr);
 3769|   403k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  986|   403k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 171, False: 403k]
  |  |  ------------------
  ------------------
 3770|    171|                        return detail::unexpected_scan_error(
 3771|    171|                            scan_error::invalid_scanned_value,
 3772|    171|                            "Invalid float value");
 3773|    171|                    }
 3774|   403k|                    return res;
 3775|   403k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|   403k|{
 1938|   403k|    return ranges::next(range.begin(), range.end());
 1939|   403k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   403k|    {
  313|   403k|        ranges::advance(x, bound);
  314|   403k|        return x;
  315|   403k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   403k|    {
  275|   403k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   403k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|   541k|    {
 1676|   541k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1057|   541k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   541k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1719|   541k|    {
 1720|   541k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|   541k|                      ranges::sized_range<Range>) {
 1725|   541k|            m_storage.reset();
 1726|   541k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   541k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  32.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  32.4k|        {
  662|  32.4k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   109k|        : m_fptr([](storage fn,
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|   109k|              if constexpr (std::is_void_v<R>) {
  746|   109k|                  obj(static_cast<decltype(args)>(args)...);
  747|   109k|              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
  752|   109k|          m_storage(std::addressof(f))
  753|   109k|    {
  754|   109k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   109k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   109k|        else if constexpr (std::is_object_v<T>) {
  688|   109k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   109k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   109k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   109k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3706|   512k|    {
 3707|   512k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  986|   512k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 512k]
  |  |  ------------------
  ------------------
 3708|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3709|      0|                classic_with_thsep_tag{}};
 3710|      0|        }
 3711|       |
 3712|   512k|        return read_source_impl(range);
 3713|   512k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   109k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   109k|        {
  662|   109k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|   157k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   157k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   157k|            auto rd = make_reader<T, char_type>();
 6237|   157k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|   157k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 157k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6238|       |
 6239|   157k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 157k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   157k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   157k|                return impl(rd, range, value);
 6242|   157k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   157k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   157k|    {
 6162|   157k|        const bool need_skipped_width =
 6163|   157k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 157k]
  |  Branch (6163:33): [True: 0, False: 157k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   157k|        auto it = rng.begin();
 6167|   157k|        std::ptrdiff_t prefix_width = 0;
 6168|   157k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 157k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   157k|        else {
 6176|   157k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.16k, False: 155k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.16k|    }                                                  \
  |  |  |  | 3938|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   155k|            std::tie(it, prefix_width) = prefix_result;
 6178|   155k|        }
 6179|   155k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   155k|        std::ptrdiff_t value_width = 0;
 6183|   155k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 155k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   155k|        else {
 6199|   155k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 46.2k, False: 109k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  46.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  46.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  46.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  46.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  46.2k|    }                                                  \
  |  | 3938|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   109k|                                             specs, value, loc));
 6201|       |
 6202|   109k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 109k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   109k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   109k|        std::ptrdiff_t postfix_width = 0;
 6211|   109k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 109k, False: 588]
  ------------------
 6212|   109k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   109k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   109k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   109k|                                 value_width));
 6216|   109k|            std::tie(it, postfix_width) = postfix_result;
 6217|   109k|        }
 6218|       |
 6219|   109k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|   109k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 109k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|   109k|            specs, prefix_width, value_width, postfix_width));
 6221|   109k|        return it;
 6222|   109k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3732|   342k|    {
 3733|   342k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1051|   342k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   342k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   342k|        const std::ptrdiff_t sign_len =
 3736|   342k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 2.08k, False: 340k]
  ------------------
 3737|       |
 3738|   342k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3939|   342k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   342k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   342k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   342k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 33.3k, False: 309k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  33.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  33.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  33.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  33.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  33.3k|    }                                                  \
  |  |  |  | 3938|   342k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   309k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   342k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   155k|    {
 4203|   155k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   155k|#if !SCN_DISABLE_LOCALE
 4206|   155k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 39.2k, False: 116k]
  ------------------
 4207|  39.2k|            return read_impl<Range>(
 4208|  39.2k|                range, rd,
 4209|  39.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  39.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  39.2k|                },
 4212|  39.2k|                value, loc);
 4213|  39.2k|        }
 4214|   116k|#endif
 4215|       |
 4216|   116k|        return read_impl<Range>(
 4217|   116k|            range, rd,
 4218|   116k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   116k|                return r.read_source(SCN_FWD(args)...);
 4220|   116k|            },
 4221|   116k|            value);
 4222|   155k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   214k|    {
 4239|   214k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   214k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 59.0k, False: 155k]
  |  |  ------------------
  ------------------
 4241|  59.0k|            return unexpected(r.error());
 4242|  59.0k|        }
 4243|       |
 4244|   155k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3939|   155k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 987, False: 154k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    987|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    987|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    987|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    987|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    987|    }                                                  \
  |  |  |  | 3938|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   154k|        return ranges::next(range.begin(), n);
 4246|   155k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  39.2k|        : m_fptr([](storage fn,
  743|  39.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.2k|              cvref<T> obj = *get<T>(fn);
  745|  39.2k|              if constexpr (std::is_void_v<R>) {
  746|  39.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  39.2k|              }
  748|  39.2k|              else {
  749|  39.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.2k|              }
  751|  39.2k|          }),
  752|  39.2k|          m_storage(std::addressof(f))
  753|  39.2k|    {
  754|  39.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  39.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  39.2k|              else {
  749|  39.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.2k|              }
  751|  39.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  39.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  39.2k|        else if constexpr (std::is_object_v<T>) {
  688|  39.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  39.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  39.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  39.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1057|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  39.2k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  39.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  39.2k|        {
  662|  39.2k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   116k|        : m_fptr([](storage fn,
  743|   116k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   116k|              cvref<T> obj = *get<T>(fn);
  745|   116k|              if constexpr (std::is_void_v<R>) {
  746|   116k|                  obj(static_cast<decltype(args)>(args)...);
  747|   116k|              }
  748|   116k|              else {
  749|   116k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   116k|              }
  751|   116k|          }),
  752|   116k|          m_storage(std::addressof(f))
  753|   116k|    {
  754|   116k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   116k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   116k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   116k|              else {
  749|   116k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   116k|              }
  751|   116k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   116k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   116k|        else if constexpr (std::is_object_v<T>) {
  688|   116k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   116k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   116k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   116k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   116k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   116k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   116k|        {
  662|   116k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   155k|    {
 4203|   155k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   155k|#if !SCN_DISABLE_LOCALE
 4206|   155k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 39.2k, False: 116k]
  ------------------
 4207|  39.2k|            return read_impl<Range>(
 4208|  39.2k|                range, rd,
 4209|  39.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  39.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  39.2k|                },
 4212|  39.2k|                value, loc);
 4213|  39.2k|        }
 4214|   116k|#endif
 4215|       |
 4216|   116k|        return read_impl<Range>(
 4217|   116k|            range, rd,
 4218|   116k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   116k|                return r.read_source(SCN_FWD(args)...);
 4220|   116k|            },
 4221|   116k|            value);
 4222|   155k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   214k|    {
 4239|   214k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   214k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 27.6k, False: 187k]
  |  |  ------------------
  ------------------
 4241|  27.6k|            return unexpected(r.error());
 4242|  27.6k|        }
 4243|       |
 4244|   187k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3939|   187k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   187k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   187k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 32.3k, False: 154k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  32.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  32.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  32.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  32.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  32.3k|    }                                                  \
  |  |  |  | 3938|   187k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   154k|        return ranges::next(range.begin(), n);
 4246|   187k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  39.2k|        : m_fptr([](storage fn,
  743|  39.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.2k|              cvref<T> obj = *get<T>(fn);
  745|  39.2k|              if constexpr (std::is_void_v<R>) {
  746|  39.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  39.2k|              }
  748|  39.2k|              else {
  749|  39.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.2k|              }
  751|  39.2k|          }),
  752|  39.2k|          m_storage(std::addressof(f))
  753|  39.2k|    {
  754|  39.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  39.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  39.2k|              else {
  749|  39.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.2k|              }
  751|  39.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  39.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  39.2k|        else if constexpr (std::is_object_v<T>) {
  688|  39.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  39.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  39.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  39.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1057|  39.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  39.2k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  39.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  39.2k|        {
  662|  39.2k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   116k|        : m_fptr([](storage fn,
  743|   116k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   116k|              cvref<T> obj = *get<T>(fn);
  745|   116k|              if constexpr (std::is_void_v<R>) {
  746|   116k|                  obj(static_cast<decltype(args)>(args)...);
  747|   116k|              }
  748|   116k|              else {
  749|   116k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   116k|              }
  751|   116k|          }),
  752|   116k|          m_storage(std::addressof(f))
  753|   116k|    {
  754|   116k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   116k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   116k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   116k|              else {
  749|   116k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   116k|              }
  751|   116k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   116k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   116k|        else if constexpr (std::is_object_v<T>) {
  688|   116k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   116k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   116k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   116k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   116k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   116k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   116k|        {
  662|   116k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|   159k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   159k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   159k|            auto rd = make_reader<T, char_type>();
 6237|   159k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|   159k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 159k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6238|       |
 6239|   159k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 159k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   159k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   159k|                return impl(rd, range, value);
 6242|   159k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   159k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6161|   159k|    {
 6162|   159k|        const bool need_skipped_width =
 6163|   159k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 159k]
  |  Branch (6163:33): [True: 0, False: 159k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   159k|        auto it = rng.begin();
 6167|   159k|        std::ptrdiff_t prefix_width = 0;
 6168|   159k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 159k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   159k|        else {
 6176|   159k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|   159k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   159k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   159k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.23k, False: 158k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.23k|    }                                                  \
  |  |  |  | 3938|   159k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   158k|            std::tie(it, prefix_width) = prefix_result;
 6178|   158k|        }
 6179|   158k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   158k|        std::ptrdiff_t value_width = 0;
 6183|   158k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 158k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   158k|        else {
 6199|   158k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 46.1k, False: 112k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  46.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  46.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  46.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  46.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  46.1k|    }                                                  \
  |  | 3938|   158k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   112k|                                             specs, value, loc));
 6201|       |
 6202|   112k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 112k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   112k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   112k|        std::ptrdiff_t postfix_width = 0;
 6211|   112k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 111k, False: 636]
  ------------------
 6212|   111k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 111k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   111k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   111k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   111k|                                 value_width));
 6216|   111k|            std::tie(it, postfix_width) = postfix_result;
 6217|   111k|        }
 6218|       |
 6219|   112k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|   112k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 112k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|   112k|            specs, prefix_width, value_width, postfix_width));
 6221|   112k|        return it;
 6222|   112k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3732|   350k|    {
 3733|   350k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1051|   350k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   350k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3734|       |
 3735|   350k|        const std::ptrdiff_t sign_len =
 3736|   350k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3736:13): [True: 2.11k, False: 348k]
  ------------------
 3737|       |
 3738|   350k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3939|   350k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   350k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   350k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   350k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 32.1k, False: 318k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  32.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  32.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  32.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  32.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  32.1k|    }                                                  \
  |  |  |  | 3938|   350k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3739|   318k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3740|   350k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4202|   158k|    {
 4203|   158k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   158k|#if !SCN_DISABLE_LOCALE
 4206|   158k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 40.4k, False: 117k]
  ------------------
 4207|  40.4k|            return read_impl<Range>(
 4208|  40.4k|                range, rd,
 4209|  40.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  40.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  40.4k|                },
 4212|  40.4k|                value, loc);
 4213|  40.4k|        }
 4214|   117k|#endif
 4215|       |
 4216|   117k|        return read_impl<Range>(
 4217|   117k|            range, rd,
 4218|   117k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   117k|                return r.read_source(SCN_FWD(args)...);
 4220|   117k|            },
 4221|   117k|            value);
 4222|   158k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4238|   219k|    {
 4239|   219k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   219k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 59.8k, False: 159k]
  |  |  ------------------
  ------------------
 4241|  59.8k|            return unexpected(r.error());
 4242|  59.8k|        }
 4243|       |
 4244|   159k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3939|   159k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   159k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   159k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 138, False: 159k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    138|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    138|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    138|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    138|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    138|    }                                                  \
  |  |  |  | 3938|   159k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   159k|        return ranges::next(range.begin(), n);
 4246|   159k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  40.4k|        : m_fptr([](storage fn,
  743|  40.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.4k|              cvref<T> obj = *get<T>(fn);
  745|  40.4k|              if constexpr (std::is_void_v<R>) {
  746|  40.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.4k|              }
  748|  40.4k|              else {
  749|  40.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.4k|              }
  751|  40.4k|          }),
  752|  40.4k|          m_storage(std::addressof(f))
  753|  40.4k|    {
  754|  40.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  40.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  40.4k|              else {
  749|  40.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.4k|              }
  751|  40.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  40.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  40.4k|        else if constexpr (std::is_object_v<T>) {
  688|  40.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  40.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4209|  40.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  40.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1057|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  40.4k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  40.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  40.4k|        {
  662|  40.4k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   117k|        : m_fptr([](storage fn,
  743|   117k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   117k|              cvref<T> obj = *get<T>(fn);
  745|   117k|              if constexpr (std::is_void_v<R>) {
  746|   117k|                  obj(static_cast<decltype(args)>(args)...);
  747|   117k|              }
  748|   117k|              else {
  749|   117k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   117k|              }
  751|   117k|          }),
  752|   117k|          m_storage(std::addressof(f))
  753|   117k|    {
  754|   117k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   117k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   117k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   117k|              else {
  749|   117k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   117k|              }
  751|   117k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   117k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   117k|        else if constexpr (std::is_object_v<T>) {
  688|   117k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   117k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4218|   117k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   117k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   117k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   117k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   117k|        {
  662|   117k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4202|   158k|    {
 4203|   158k|        float_reader<CharT> rd{get_options(specs)};
 4204|       |
 4205|   158k|#if !SCN_DISABLE_LOCALE
 4206|   158k|        if (specs.localized) {
  ------------------
  |  Branch (4206:13): [True: 40.5k, False: 117k]
  ------------------
 4207|  40.5k|            return read_impl<Range>(
 4208|  40.5k|                range, rd,
 4209|  40.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  40.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4211|  40.5k|                },
 4212|  40.5k|                value, loc);
 4213|  40.5k|        }
 4214|   117k|#endif
 4215|       |
 4216|   117k|        return read_impl<Range>(
 4217|   117k|            range, rd,
 4218|   117k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   117k|                return r.read_source(SCN_FWD(args)...);
 4220|   117k|            },
 4221|   117k|            value);
 4222|   158k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4238|   219k|    {
 4239|   219k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4240|   219k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  986|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 27.9k, False: 191k]
  |  |  ------------------
  ------------------
 4241|  27.9k|            return unexpected(r.error());
 4242|  27.9k|        }
 4243|       |
 4244|   191k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3939|   191k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   191k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   191k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 32.0k, False: 159k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  32.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  32.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  32.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  32.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  32.0k|    }                                                  \
  |  |  |  | 3938|   191k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4245|   159k|        return ranges::next(range.begin(), n);
 4246|   191k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  40.5k|        : m_fptr([](storage fn,
  743|  40.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.5k|              cvref<T> obj = *get<T>(fn);
  745|  40.5k|              if constexpr (std::is_void_v<R>) {
  746|  40.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.5k|              }
  748|  40.5k|              else {
  749|  40.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.5k|              }
  751|  40.5k|          }),
  752|  40.5k|          m_storage(std::addressof(f))
  753|  40.5k|    {
  754|  40.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  40.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  40.5k|              else {
  749|  40.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.5k|              }
  751|  40.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  40.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  40.5k|        else if constexpr (std::is_object_v<T>) {
  688|  40.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  40.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4209|  40.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4210|  40.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1057|  40.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4211|  40.5k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  40.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  40.5k|        {
  662|  40.5k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   117k|        : m_fptr([](storage fn,
  743|   117k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   117k|              cvref<T> obj = *get<T>(fn);
  745|   117k|              if constexpr (std::is_void_v<R>) {
  746|   117k|                  obj(static_cast<decltype(args)>(args)...);
  747|   117k|              }
  748|   117k|              else {
  749|   117k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   117k|              }
  751|   117k|          }),
  752|   117k|          m_storage(std::addressof(f))
  753|   117k|    {
  754|   117k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   117k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   117k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   117k|              else {
  749|   117k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   117k|              }
  751|   117k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   117k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   117k|        else if constexpr (std::is_object_v<T>) {
  688|   117k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   117k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4218|   117k|            [](float_reader<CharT>& r, auto&&... args) {
 4219|   117k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4220|   117k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   117k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   117k|        {
  662|   117k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   628k|{
 2160|   628k|    auto it = range.begin();
 2161|  1.08M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.08M, False: 4.03k]
  ------------------
 2162|  1.08M|        const auto val =
 2163|  1.08M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.08M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  985|  1.08M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (985:25): [True: 1.08M, False: 0]
  |  |  ------------------
  ------------------
 2165|  1.08M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.08M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.08M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 624k, False: 461k]
  ------------------
 2168|   624k|                return it;
 2169|   624k|            }
 2170|  1.08M|        }
 2171|   461k|        it = val.iterator;
 2172|   461k|    }
 2173|       |
 2174|  4.03k|    return it;
 2175|   628k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.08M|{
 1998|  1.08M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1051|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.08M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.08M|    auto it = range.begin();
 2002|  1.08M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.08M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  986|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 0, False: 1.08M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  1.08M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.08M, False: 0]
  ------------------
 2011|  1.08M|        ++it;
 2012|  1.08M|        return {it, string_type(1, *range.begin())};
 2013|  1.08M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  1.08M|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|  1.08M|    {
 1989|  1.08M|        return !codepoint.empty();
 1990|  1.08M|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   628k|{
 2181|   628k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   628k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   628k|{
 3066|   628k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 628k, False: 0]
  ------------------
 3067|   628k|        auto it = read_while_classic_space(range);
 3068|   628k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   628k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   628k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 4.03k, False: 624k]
  |  |  ------------------
  ------------------
 3070|  4.03k|            return unexpected(e);
 3071|  4.03k|        }
 3072|       |
 3073|   624k|        return it;
 3074|   628k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   628k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   628k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   628k|    else {
 2225|   628k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   628k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   628k|            return detail::is_cp_space(cp);
 2238|   628k|        });
 2239|   628k|    }
 2240|   628k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   628k|        : m_fptr([](storage fn,
  743|   628k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   628k|              cvref<T> obj = *get<T>(fn);
  745|   628k|              if constexpr (std::is_void_v<R>) {
  746|   628k|                  obj(static_cast<decltype(args)>(args)...);
  747|   628k|              }
  748|   628k|              else {
  749|   628k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   628k|              }
  751|   628k|          }),
  752|   628k|          m_storage(std::addressof(f))
  753|   628k|    {
  754|   628k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.08M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.08M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.08M|              else {
  749|  1.08M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.08M|              }
  751|  1.08M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.08M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.08M|        else if constexpr (std::is_object_v<T>) {
  688|  1.08M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.08M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  1.08M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.08M|            return detail::is_cp_space(cp);
 2238|  1.08M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   628k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   628k|        {
  662|   628k|        }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS0_13scan_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS5_9add_constIT_E4typeEEEEEEESD_RT0_NS0_6detail10locale_refE:
 3578|  9.23k|    {
 3579|  9.23k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  9.23k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3580|  9.23k|        return read_default_with_base(range, value, 10);
 3581|  9.23k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS0_13scan_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS5_9add_constIT_E4typeEEEEEEESD_RT0_i:
 3542|  9.23k|    {
 3543|  9.23k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3939|  9.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  9.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  9.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  9.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.69k, False: 7.54k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.69k|    }                                                  \
  |  |  |  | 3938|  9.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3544|  7.54k|                                   .transform_error(make_eof_scan_error));
 3545|       |
 3546|  7.54k|        if constexpr (!std::is_signed_v<T>) {
 3547|  7.54k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3547:17): [True: 0, False: 7.54k]
  ------------------
 3548|      0|                return detail::unexpected_scan_error(
 3549|      0|                    scan_error::invalid_scanned_value,
 3550|      0|                    "Unexpected '-' sign when parsing an "
 3551|      0|                    "unsigned value");
 3552|      0|            }
 3553|  7.54k|        }
 3554|       |
 3555|  7.54k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3555:13): [True: 0, False: 7.54k]
  ------------------
 3556|      0|            value = T{0};
 3557|      0|            return std::next(prefix_result.iterator);
 3558|      0|        }
 3559|       |
 3560|  15.0k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3939|  7.54k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.54k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.54k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 7.54k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  7.54k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3561|  15.0k|                parse_integer_digits_without_thsep(
 3562|  15.0k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3563|  15.0k|                    prefix_result.parsed_base));
 3564|       |
 3565|  15.0k|        auto buf = make_contiguous_buffer(
 3566|  15.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3567|  15.0k|        SCN_TRY(result_it,
  ------------------
  |  | 3939|  7.54k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  7.54k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  7.54k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  7.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 756, False: 6.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    756|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    756|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    756|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    756|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    756|    }                                                  \
  |  |  |  | 3938|  7.54k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  6.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3568|  6.78k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3569|  6.78k|                                    prefix_result.parsed_base));
 3570|       |
 3571|  6.78k|        return ranges::next(prefix_result.iterator,
 3572|  6.78k|                            ranges::distance(buf.view().begin(), result_it));
 3573|  15.0k|    }
_ZN3scn2v44impl20parse_integer_prefixINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEEEESC_i:
 3376|  9.23k|{
 3377|  9.23k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3939|  9.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  9.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  9.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  9.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.69k, False: 7.54k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.69k|    }                                                  \
  |  |  |  | 3938|  9.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  7.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3378|  7.54k|    auto [base_prefix_begin_it, sign] = sign_result;
 3379|       |
 3380|  7.54k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3381|  7.54k|        parse_integer_base_prefix(
 3382|  7.54k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3383|       |
 3384|  7.54k|    if (parsed_zero) {
  ------------------
  |  Branch (3384:9): [True: 0, False: 7.54k]
  ------------------
 3385|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3385:13): [True: 0, False: 0]
  ------------------
 3386|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3386:13): [True: 0, False: 0]
  ------------------
 3387|      0|            digits_begin_it = base_prefix_begin_it;
 3388|      0|        }
 3389|      0|        else {
 3390|      0|            parsed_zero = false;
 3391|      0|        }
 3392|      0|    }
 3393|  7.54k|    else {
 3394|  7.54k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3394:13): [True: 0, False: 7.54k]
  ------------------
 3395|  7.54k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3395:13): [True: 96, False: 7.44k]
  ------------------
 3396|     96|            digits_begin_it = base_prefix_begin_it;
 3397|     96|        }
 3398|  7.54k|    }
 3399|       |
 3400|  7.54k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3400:9): [True: 7.54k, False: 0]
  ------------------
 3401|  7.54k|        sign = sign_type::plus_sign;
 3402|  7.54k|    }
 3403|  7.54k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3404|  7.54k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3405|  9.23k|}
_ZN3scn2v44impl18parse_numeric_signINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedINS3_4pairIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESC_:
 3257|  9.23k|{
 3258|  9.23k|    auto r = read_one_of_code_unit(range, "+-");
 3259|  9.23k|    if (!r) {
  ------------------
  |  Branch (3259:9): [True: 9.23k, False: 0]
  ------------------
 3260|  9.23k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3260:13): [True: 7.54k, False: 1.69k]
  ------------------
 3261|  7.54k|            return std::pair{range.begin(), sign_type::default_sign};
 3262|  7.54k|        }
 3263|  1.69k|        return unexpected(eof_error::eof);
 3264|  9.23k|    }
 3265|       |
 3266|      0|    auto& it = *r;
 3267|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3267:9): [True: 0, False: 0]
  ------------------
 3268|      0|        return std::pair{it, sign_type::minus_sign};
 3269|      0|    }
 3270|      0|    return std::pair{it, sign_type::plus_sign};
 3271|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_14parse_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEESB_S7_:
 2371|  9.23k|{
 2372|  9.23k|    auto it = read_code_unit(range);
 2373|  9.23k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  986|  9.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.69k, False: 7.54k]
  |  |  ------------------
  ------------------
 2374|  1.69k|        return unexpected(make_eof_parse_error(it.error()));
 2375|  1.69k|    }
 2376|       |
 2377|  15.0k|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 15.0k, False: 7.54k]
  ------------------
 2378|  15.0k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 0, False: 15.0k]
  ------------------
 2379|      0|            return *it;
 2380|      0|        }
 2381|  15.0k|    }
 2382|       |
 2383|  7.54k|    return unexpected(parse_error::error);
 2384|  7.54k|}
_ZN3scn2v44impl14read_code_unitINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEESB_:
 1944|  9.23k|{
 1945|  9.23k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|  9.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.69k, False: 7.54k]
  |  |  ------------------
  ------------------
 1946|  1.69k|        return unexpected(e);
 1947|  1.69k|    }
 1948|       |
 1949|  7.54k|    return ranges::next(range.begin());
 1950|  9.23k|}
_ZN3scn2v44impl9eof_checkINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_9eof_errorET_:
  950|  9.23k|{
  951|  9.23k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  986|  9.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 1.69k, False: 7.54k]
  |  |  ------------------
  ------------------
  952|  1.69k|        return eof_error::eof;
  953|  1.69k|    }
  954|  7.54k|    return eof_error::good;
  955|  9.23k|}
_ZN3scn2v44impl12is_range_eofINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEbT_:
  944|  9.23k|{
  945|  9.23k|    return is_range_eof(r.begin(), r.end());
  946|  9.23k|}
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2186|   841k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|   841k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|   841k|        auto buf = make_contiguous_buffer(range);
 2191|   841k|        auto it = find_classic_space_narrow_fast(buf.view());
 2192|   841k|        return ranges::next(range.begin(),
 2193|   841k|                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|       |    else {
 2196|       |        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|       |        return read_until_code_point(
 2208|       |            ranges::subrange{it, range.end()},
 2209|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|       |    }
 2211|   841k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1781|   841k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   841k|                  ranges::sized_range<Range>) {
 1785|   841k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1057|   841k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   841k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1587|   841k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   841k|    {
 1589|   841k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|   841k|    {
 1676|   841k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1057|   841k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   841k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1719|   841k|    {
 1720|   841k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|   841k|                                          std::basic_string<CharT>>) {
 1730|   841k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  | 1057|   841k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|   841k|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   841k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIfEET_S5_:
 4132|   589k|    {
 4133|   589k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 66.5k, False: 523k]
  ------------------
 4134|  66.5k|            return std::copysign(value, T{-1.0});
 4135|  66.5k|        }
 4136|   523k|        return std::copysign(value, T{1.0});
 4137|   589k|    }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2186|   442k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|   442k|    else {
 2196|   442k|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|   442k|        return read_until_code_point(
 2208|   442k|            ranges::subrange{it, range.end()},
 2209|   442k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|   442k|    }
 2211|   442k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|   442k|        : m_fptr([](storage fn,
  743|   442k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   442k|              cvref<T> obj = *get<T>(fn);
  745|   442k|              if constexpr (std::is_void_v<R>) {
  746|   442k|                  obj(static_cast<decltype(args)>(args)...);
  747|   442k|              }
  748|   442k|              else {
  749|   442k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   442k|              }
  751|   442k|          }),
  752|   442k|          m_storage(std::addressof(f))
  753|   442k|    {
  754|   442k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|   852k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   852k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   852k|              else {
  749|   852k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   852k|              }
  751|   852k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   852k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   852k|        else if constexpr (std::is_object_v<T>) {
  688|   852k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   852k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2209|   852k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|   442k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   442k|        {
  662|   442k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|   442k|    {
 1676|   442k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1057|   442k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   442k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1719|   442k|    {
 1720|   442k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|   442k|                                          std::basic_string<CharT>>) {
 1730|   442k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  | 1057|   442k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|   442k|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   442k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIfEET_S5_:
 4132|   260k|    {
 4133|   260k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 1.05k, False: 259k]
  ------------------
 4134|  1.05k|            return std::copysign(value, T{-1.0});
 4135|  1.05k|        }
 4136|   259k|        return std::copysign(value, T{1.0});
 4137|   260k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIdEET_S5_:
 4132|   620k|    {
 4133|   620k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 70.2k, False: 549k]
  ------------------
 4134|  70.2k|            return std::copysign(value, T{-1.0});
 4135|  70.2k|        }
 4136|   549k|        return std::copysign(value, T{1.0});
 4137|   620k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIdEET_S5_:
 4132|   309k|    {
 4133|   309k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 1.10k, False: 308k]
  ------------------
 4134|  1.10k|            return std::copysign(value, T{-1.0});
 4135|  1.10k|        }
 4136|   308k|        return std::copysign(value, T{1.0});
 4137|   309k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIeEET_S5_:
 4132|   629k|    {
 4133|   629k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 73.0k, False: 556k]
  ------------------
 4134|  73.0k|            return std::copysign(value, T{-1.0});
 4135|  73.0k|        }
 4136|   556k|        return std::copysign(value, T{1.0});
 4137|   629k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIeEET_S5_:
 4132|   318k|    {
 4133|   318k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4133:13): [True: 1.20k, False: 317k]
  ------------------
 4134|  1.20k|            return std::copysign(value, T{-1.0});
 4135|  1.20k|        }
 4136|   317k|        return std::copysign(value, T{1.0});
 4137|   318k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|   276k|{
 5835|   276k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 3.97k, False: 272k]
  |  |  ------------------
  ------------------
 5836|  3.97k|        return unexpected(e);
 5837|  3.97k|    }
 5838|       |
 5839|   272k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 272k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   272k|    return skip_classic_whitespace(range);
 5844|   272k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5910|  88.7k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  88.7k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  88.7k|            auto rd = make_reader<T, char_type>();
 5916|  88.7k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  88.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  88.7k|    {
 5903|  88.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  88.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  88.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  88.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  88.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.32k, False: 87.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.32k|    }                                                  \
  |  |  |  | 3938|  88.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  87.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  87.4k|                        .transform_error(make_eof_scan_error));
 5905|  87.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  88.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  87.4k|    {
 4185|  87.4k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  87.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  87.4k|        float_reader<CharT> rd{};
 4188|  87.4k|        return read_impl<Range>(
 4189|  87.4k|            range, rd,
 4190|  87.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  87.4k|                return r.read_source(SCN_FWD(args)...);
 4192|  87.4k|            },
 4193|  87.4k|            value);
 4194|  87.4k|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3699|   570k|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3685|   906k|    constexpr float_reader_base() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  87.4k|        : m_fptr([](storage fn,
  743|  87.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  87.4k|              cvref<T> obj = *get<T>(fn);
  745|  87.4k|              if constexpr (std::is_void_v<R>) {
  746|  87.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  87.4k|              }
  748|  87.4k|              else {
  749|  87.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  87.4k|              }
  751|  87.4k|          }),
  752|  87.4k|          m_storage(std::addressof(f))
  753|  87.4k|    {
  754|  87.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  87.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  87.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  87.4k|              else {
  749|  87.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  87.4k|              }
  751|  87.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  87.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  87.4k|        else if constexpr (std::is_object_v<T>) {
  688|  87.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  87.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  87.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  87.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|  87.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  87.4k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  87.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  87.4k|        {
  662|  87.4k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5910|  92.9k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  92.9k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  92.9k|            auto rd = make_reader<T, char_type>();
 5916|  92.9k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  92.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  92.9k|    {
 5903|  92.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  92.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  92.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  92.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  92.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.50k, False: 91.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.50k|    }                                                  \
  |  |  |  | 3938|  92.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  91.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  91.4k|                        .transform_error(make_eof_scan_error));
 5905|  91.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  92.9k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  91.4k|    {
 4185|  91.4k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  91.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  91.4k|        float_reader<CharT> rd{};
 4188|  91.4k|        return read_impl<Range>(
 4189|  91.4k|            range, rd,
 4190|  91.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  91.4k|                return r.read_source(SCN_FWD(args)...);
 4192|  91.4k|            },
 4193|  91.4k|            value);
 4194|  91.4k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  91.4k|        : m_fptr([](storage fn,
  743|  91.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  91.4k|              cvref<T> obj = *get<T>(fn);
  745|  91.4k|              if constexpr (std::is_void_v<R>) {
  746|  91.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  91.4k|              }
  748|  91.4k|              else {
  749|  91.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  91.4k|              }
  751|  91.4k|          }),
  752|  91.4k|          m_storage(std::addressof(f))
  753|  91.4k|    {
  754|  91.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  91.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  91.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  91.4k|              else {
  749|  91.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  91.4k|              }
  751|  91.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  91.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  91.4k|        else if constexpr (std::is_object_v<T>) {
  688|  91.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  91.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  91.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  91.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|  91.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  91.4k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  91.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  91.4k|        {
  662|  91.4k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5910|  94.9k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  94.9k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  94.9k|            auto rd = make_reader<T, char_type>();
 5916|  94.9k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  94.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  94.9k|    {
 5903|  94.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  94.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  94.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  94.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  94.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.63k, False: 93.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.63k|    }                                                  \
  |  |  |  | 3938|  94.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  93.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  93.3k|                        .transform_error(make_eof_scan_error));
 5905|  93.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  94.9k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  93.3k|    {
 4185|  93.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  93.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  93.3k|        float_reader<CharT> rd{};
 4188|  93.3k|        return read_impl<Range>(
 4189|  93.3k|            range, rd,
 4190|  93.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  93.3k|                return r.read_source(SCN_FWD(args)...);
 4192|  93.3k|            },
 4193|  93.3k|            value);
 4194|  93.3k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  93.3k|        : m_fptr([](storage fn,
  743|  93.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.3k|              cvref<T> obj = *get<T>(fn);
  745|  93.3k|              if constexpr (std::is_void_v<R>) {
  746|  93.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  93.3k|              }
  748|  93.3k|              else {
  749|  93.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.3k|              }
  751|  93.3k|          }),
  752|  93.3k|          m_storage(std::addressof(f))
  753|  93.3k|    {
  754|  93.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  93.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  93.3k|              else {
  749|  93.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.3k|              }
  751|  93.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  93.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  93.3k|        else if constexpr (std::is_object_v<T>) {
  688|  93.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  93.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  93.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  93.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|  93.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  93.3k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  93.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  93.3k|        {
  662|  93.3k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|   303k|{
 5835|   303k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 4.22k, False: 298k]
  |  |  ------------------
  ------------------
 5836|  4.22k|        return unexpected(e);
 5837|  4.22k|    }
 5838|       |
 5839|   298k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 298k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   298k|    return skip_classic_whitespace(range);
 5844|   298k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  96.5k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  96.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  96.5k|            auto rd = make_reader<T, char_type>();
 5920|  96.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 96.5k, False: 0]
  ------------------
 5921|  96.5k|                return impl(rd, range, value);
 5922|  96.5k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  96.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  96.5k|    {
 5903|  96.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  96.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  96.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  96.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  96.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.42k, False: 95.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.42k|    }                                                  \
  |  |  |  | 3938|  96.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  95.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  95.1k|                        .transform_error(make_eof_scan_error));
 5905|  95.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  96.5k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|  95.1k|    {
 4185|  95.1k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  95.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  95.1k|        float_reader<CharT> rd{};
 4188|  95.1k|        return read_impl<Range>(
 4189|  95.1k|            range, rd,
 4190|  95.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  95.1k|                return r.read_source(SCN_FWD(args)...);
 4192|  95.1k|            },
 4193|  95.1k|            value);
 4194|  95.1k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  95.1k|        : m_fptr([](storage fn,
  743|  95.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  95.1k|              cvref<T> obj = *get<T>(fn);
  745|  95.1k|              if constexpr (std::is_void_v<R>) {
  746|  95.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  95.1k|              }
  748|  95.1k|              else {
  749|  95.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  95.1k|              }
  751|  95.1k|          }),
  752|  95.1k|          m_storage(std::addressof(f))
  753|  95.1k|    {
  754|  95.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  95.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  95.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  95.1k|              else {
  749|  95.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  95.1k|              }
  751|  95.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  95.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  95.1k|        else if constexpr (std::is_object_v<T>) {
  688|  95.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  95.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|  95.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  95.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|  95.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  95.1k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  95.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  95.1k|        {
  662|  95.1k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|   102k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|   102k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|   102k|            auto rd = make_reader<T, char_type>();
 5920|   102k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 102k, False: 0]
  ------------------
 5921|   102k|                return impl(rd, range, value);
 5922|   102k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   102k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|   102k|    {
 5903|   102k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.62k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.62k|    }                                                  \
  |  |  |  | 3938|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   100k|                        .transform_error(make_eof_scan_error));
 5905|   100k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   102k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|   100k|    {
 4185|   100k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|   100k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|   100k|        float_reader<CharT> rd{};
 4188|   100k|        return read_impl<Range>(
 4189|   100k|            range, rd,
 4190|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|   100k|                return r.read_source(SCN_FWD(args)...);
 4192|   100k|            },
 4193|   100k|            value);
 4194|   100k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   100k|        : m_fptr([](storage fn,
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|   100k|              if constexpr (std::is_void_v<R>) {
  746|   100k|                  obj(static_cast<decltype(args)>(args)...);
  747|   100k|              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
  752|   100k|          m_storage(std::addressof(f))
  753|   100k|    {
  754|   100k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   100k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   100k|        else if constexpr (std::is_object_v<T>) {
  688|   100k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   100k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|   100k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|   100k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   100k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   100k|        {
  662|   100k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|   103k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|   103k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|   103k|            auto rd = make_reader<T, char_type>();
 5920|   103k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 103k, False: 0]
  ------------------
 5921|   103k|                return impl(rd, range, value);
 5922|   103k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   103k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|   103k|    {
 5903|   103k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|   103k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   103k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   103k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.74k, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.74k|    }                                                  \
  |  |  |  | 3938|   103k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   102k|                        .transform_error(make_eof_scan_error));
 5905|   102k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   103k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|   102k|    {
 4185|   102k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|   102k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|   102k|        float_reader<CharT> rd{};
 4188|   102k|        return read_impl<Range>(
 4189|   102k|            range, rd,
 4190|   102k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|   102k|                return r.read_source(SCN_FWD(args)...);
 4192|   102k|            },
 4193|   102k|            value);
 4194|   102k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   102k|        : m_fptr([](storage fn,
  743|   102k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   102k|              cvref<T> obj = *get<T>(fn);
  745|   102k|              if constexpr (std::is_void_v<R>) {
  746|   102k|                  obj(static_cast<decltype(args)>(args)...);
  747|   102k|              }
  748|   102k|              else {
  749|   102k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   102k|              }
  751|   102k|          }),
  752|   102k|          m_storage(std::addressof(f))
  753|   102k|    {
  754|   102k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   102k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   102k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   102k|              else {
  749|   102k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   102k|              }
  751|   102k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   102k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   102k|        else if constexpr (std::is_object_v<T>) {
  688|   102k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   102k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|   102k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|   102k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|   102k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   102k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   102k|        {
  662|   102k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|   662k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1055|   662k|    static_cast<    \
  |  | 1056|   662k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   662k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   662k|          m_current(m_range.begin())
 2988|   662k|    {
 2989|   662k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|  1.25M|    {
 2998|  1.25M|        return m_range.end();
 2999|  1.25M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|   591k|    {
 3013|   591k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1051|   591k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   591k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|   591k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|   591k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 591k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|   591k|        }
 3019|   591k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|   591k|    static_cast<    \
  |  | 1056|   591k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|   591k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|   662k|    {
 3003|   662k|        return ranges::subrange{begin(), end()};
 3004|   662k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|   662k|    {
 6075|   662k|        const bool need_skipped_width =
 6076|   662k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 662k]
  |  Branch (6076:33): [True: 0, False: 662k]
  ------------------
 6077|   662k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   662k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 662k]
  ------------------
 6081|   662k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 662k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   662k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 662k, False: 0]
  |  Branch (6085:56): [True: 662k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   662k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 662k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|  1.31M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3939|   662k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   662k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   662k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 11.4k, False: 651k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.4k|    }                                                  \
  |  |  |  | 3938|   662k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   651k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  1.31M|                            make_eof_scan_error));
 6096|       |
 6097|  1.31M|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 651k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   651k|            return result_type{it, 0};
 6105|  1.31M|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   662k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|   581k|    {
 6117|   581k|        const bool need_skipped_width =
 6118|   581k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 581k]
  |  Branch (6118:33): [True: 0, False: 581k]
  ------------------
 6119|   581k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   581k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 581k]
  ------------------
 6122|   581k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 581k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   581k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 581k, False: 0]
  ------------------
 6131|   581k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 581k]
  ------------------
 6132|   581k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   581k|        return result_type{rng.begin(), 0};
 6156|   581k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6226|   214k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   214k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   214k|            auto rd = make_reader<T, char_type>();
 6232|   214k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|   214k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 214k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6233|   214k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   214k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   214k|    {
 6162|   214k|        const bool need_skipped_width =
 6163|   214k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 214k]
  |  Branch (6163:33): [True: 0, False: 214k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   214k|        auto it = rng.begin();
 6167|   214k|        std::ptrdiff_t prefix_width = 0;
 6168|   214k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 214k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   214k|        else {
 6176|   214k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|   214k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   214k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   214k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 3.51k, False: 211k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  3.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  3.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.51k|    }                                                  \
  |  |  |  | 3938|   214k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   211k|            std::tie(it, prefix_width) = prefix_result;
 6178|   211k|        }
 6179|   211k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   211k|        std::ptrdiff_t value_width = 0;
 6183|   211k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 211k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   211k|        else {
 6199|   211k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|   211k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|   211k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 20.1k, False: 191k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  20.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  20.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  20.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  20.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  20.1k|    }                                                  \
  |  | 3938|   211k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   191k|                                             specs, value, loc));
 6201|       |
 6202|   191k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 191k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   191k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   191k|        std::ptrdiff_t postfix_width = 0;
 6211|   191k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 188k, False: 3.09k]
  ------------------
 6212|   188k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|   188k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   188k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   188k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 188k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|   188k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   188k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   188k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   188k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   188k|                                 value_width));
 6216|   188k|            std::tie(it, postfix_width) = postfix_result;
 6217|   188k|        }
 6218|       |
 6219|   191k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|   191k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 191k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|   191k|            specs, prefix_width, value_width, postfix_width));
 6221|   191k|        return it;
 6222|   191k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6226|   222k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   222k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   222k|            auto rd = make_reader<T, char_type>();
 6232|   222k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|   222k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 222k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6233|   222k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   222k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   222k|    {
 6162|   222k|        const bool need_skipped_width =
 6163|   222k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 222k]
  |  Branch (6163:33): [True: 0, False: 222k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   222k|        auto it = rng.begin();
 6167|   222k|        std::ptrdiff_t prefix_width = 0;
 6168|   222k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 222k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   222k|        else {
 6176|   222k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|   222k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   222k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   222k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 3.86k, False: 218k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  3.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  3.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.86k|    }                                                  \
  |  |  |  | 3938|   222k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   218k|            std::tie(it, prefix_width) = prefix_result;
 6178|   218k|        }
 6179|   218k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   218k|        std::ptrdiff_t value_width = 0;
 6183|   218k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 218k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   218k|        else {
 6199|   218k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|   218k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|   218k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 19.8k, False: 198k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  19.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  19.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  19.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  19.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  19.8k|    }                                                  \
  |  | 3938|   218k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   198k|                                             specs, value, loc));
 6201|       |
 6202|   198k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 198k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   198k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   198k|        std::ptrdiff_t postfix_width = 0;
 6211|   198k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 195k, False: 3.40k]
  ------------------
 6212|   195k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|   195k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   195k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   195k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 195k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|   195k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   195k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   195k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   195k|                                 value_width));
 6216|   195k|            std::tie(it, postfix_width) = postfix_result;
 6217|   195k|        }
 6218|       |
 6219|   198k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|   198k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 198k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|   198k|            specs, prefix_width, value_width, postfix_width));
 6221|   198k|        return it;
 6222|   198k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6226|   225k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   225k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   225k|            auto rd = make_reader<T, char_type>();
 6232|   225k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|   225k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 225k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6233|   225k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   225k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   225k|    {
 6162|   225k|        const bool need_skipped_width =
 6163|   225k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 225k]
  |  Branch (6163:33): [True: 0, False: 225k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   225k|        auto it = rng.begin();
 6167|   225k|        std::ptrdiff_t prefix_width = 0;
 6168|   225k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 225k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   225k|        else {
 6176|   225k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|   225k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   225k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   225k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 4.11k, False: 221k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  4.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  4.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  4.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  4.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.11k|    }                                                  \
  |  |  |  | 3938|   225k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   221k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   221k|            std::tie(it, prefix_width) = prefix_result;
 6178|   221k|        }
 6179|   221k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   221k|        std::ptrdiff_t value_width = 0;
 6183|   221k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 221k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   221k|        else {
 6199|   221k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|   221k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|   221k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 19.5k, False: 201k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  19.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  19.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  19.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  19.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  19.5k|    }                                                  \
  |  | 3938|   221k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|   221k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   201k|                                             specs, value, loc));
 6201|       |
 6202|   201k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 201k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   201k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   201k|        std::ptrdiff_t postfix_width = 0;
 6211|   201k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 198k, False: 3.62k]
  ------------------
 6212|   198k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|   198k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   198k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   198k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 198k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|   198k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   198k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   198k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   198k|                                 value_width));
 6216|   198k|            std::tie(it, postfix_width) = postfix_result;
 6217|   198k|        }
 6218|       |
 6219|   201k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|   201k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 201k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|   201k|            specs, prefix_width, value_width, postfix_width));
 6221|   201k|        return it;
 6222|   201k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|   169k|{
 5835|   169k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 654, False: 168k]
  |  |  ------------------
  ------------------
 5836|    654|        return unexpected(e);
 5837|    654|    }
 5838|       |
 5839|   168k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 168k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   168k|    return skip_classic_whitespace(range);
 5844|   168k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5910|  48.9k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  48.9k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  48.9k|            auto rd = make_reader<T, char_type>();
 5916|  48.9k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  48.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  48.9k|    {
 5903|  48.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  48.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  48.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  48.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  48.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 351, False: 48.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    351|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    351|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    351|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    351|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    351|    }                                                  \
  |  |  |  | 3938|  48.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  48.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  48.6k|                        .transform_error(make_eof_scan_error));
 5905|  48.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  48.9k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  48.6k|    {
 4185|  48.6k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  48.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  48.6k|        float_reader<CharT> rd{};
 4188|  48.6k|        return read_impl<Range>(
 4189|  48.6k|            range, rd,
 4190|  48.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  48.6k|                return r.read_source(SCN_FWD(args)...);
 4192|  48.6k|            },
 4193|  48.6k|            value);
 4194|  48.6k|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3699|   336k|    constexpr float_reader() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  48.6k|        : m_fptr([](storage fn,
  743|  48.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  48.6k|              cvref<T> obj = *get<T>(fn);
  745|  48.6k|              if constexpr (std::is_void_v<R>) {
  746|  48.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  48.6k|              }
  748|  48.6k|              else {
  749|  48.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  48.6k|              }
  751|  48.6k|          }),
  752|  48.6k|          m_storage(std::addressof(f))
  753|  48.6k|    {
  754|  48.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  48.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  48.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  48.6k|              else {
  749|  48.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  48.6k|              }
  751|  48.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  48.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  48.6k|        else if constexpr (std::is_object_v<T>) {
  688|  48.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  48.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  48.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  48.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|  48.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  48.6k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  48.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  48.6k|        {
  662|  48.6k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5910|  59.3k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  59.3k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  59.3k|            auto rd = make_reader<T, char_type>();
 5916|  59.3k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  59.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  59.3k|    {
 5903|  59.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  59.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  59.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  59.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  59.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 408, False: 58.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    408|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    408|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    408|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    408|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    408|    }                                                  \
  |  |  |  | 3938|  59.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  58.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  58.9k|                        .transform_error(make_eof_scan_error));
 5905|  58.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  59.3k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  58.9k|    {
 4185|  58.9k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  58.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  58.9k|        float_reader<CharT> rd{};
 4188|  58.9k|        return read_impl<Range>(
 4189|  58.9k|            range, rd,
 4190|  58.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  58.9k|                return r.read_source(SCN_FWD(args)...);
 4192|  58.9k|            },
 4193|  58.9k|            value);
 4194|  58.9k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  58.9k|        : m_fptr([](storage fn,
  743|  58.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.9k|              cvref<T> obj = *get<T>(fn);
  745|  58.9k|              if constexpr (std::is_void_v<R>) {
  746|  58.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  58.9k|              }
  748|  58.9k|              else {
  749|  58.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.9k|              }
  751|  58.9k|          }),
  752|  58.9k|          m_storage(std::addressof(f))
  753|  58.9k|    {
  754|  58.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  58.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  58.9k|              else {
  749|  58.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.9k|              }
  751|  58.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  58.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  58.9k|        else if constexpr (std::is_object_v<T>) {
  688|  58.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  58.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  58.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  58.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|  58.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  58.9k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  58.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  58.9k|        {
  662|  58.9k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5910|  61.2k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  61.2k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  61.2k|            auto rd = make_reader<T, char_type>();
 5916|  61.2k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  61.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5902|  61.2k|    {
 5903|  61.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  61.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  61.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  61.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  61.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 453, False: 60.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    453|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    453|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    453|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    453|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    453|    }                                                  \
  |  |  |  | 3938|  61.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  60.7k|                        .transform_error(make_eof_scan_error));
 5905|  60.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  61.2k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4184|  60.7k|    {
 4185|  60.7k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  60.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  60.7k|        float_reader<CharT> rd{};
 4188|  60.7k|        return read_impl<Range>(
 4189|  60.7k|            range, rd,
 4190|  60.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  60.7k|                return r.read_source(SCN_FWD(args)...);
 4192|  60.7k|            },
 4193|  60.7k|            value);
 4194|  60.7k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  60.7k|        : m_fptr([](storage fn,
  743|  60.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.7k|              cvref<T> obj = *get<T>(fn);
  745|  60.7k|              if constexpr (std::is_void_v<R>) {
  746|  60.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  60.7k|              }
  748|  60.7k|              else {
  749|  60.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.7k|              }
  751|  60.7k|          }),
  752|  60.7k|          m_storage(std::addressof(f))
  753|  60.7k|    {
  754|  60.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  60.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  60.7k|              else {
  749|  60.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.7k|              }
  751|  60.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  60.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  60.7k|        else if constexpr (std::is_object_v<T>) {
  688|  60.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  60.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4190|  60.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  60.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  60.7k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  60.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  60.7k|        {
  662|  60.7k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|   460k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1055|   460k|    static_cast<    \
  |  | 1056|   460k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   460k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   460k|          m_current(m_range.begin())
 2988|   460k|    {
 2989|   460k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|   777k|    {
 2998|   777k|        return m_range.end();
 2999|   777k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|   317k|    {
 3013|   317k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1051|   317k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   317k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|   317k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|   317k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 317k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|   317k|        }
 3019|   317k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1055|   317k|    static_cast<    \
  |  | 1056|   317k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|   317k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   460k|    {
 3003|   460k|        return ranges::subrange{begin(), end()};
 3004|   460k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|   460k|    {
 6075|   460k|        const bool need_skipped_width =
 6076|   460k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 460k]
  |  Branch (6076:33): [True: 0, False: 460k]
  ------------------
 6077|   460k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   460k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 460k]
  ------------------
 6081|   460k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 460k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   460k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 460k, False: 0]
  |  Branch (6085:56): [True: 460k, False: 0]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   460k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 460k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   916k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3939|   460k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   460k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   460k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   460k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 3.47k, False: 456k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  3.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  3.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.47k|    }                                                  \
  |  |  |  | 3938|   460k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   456k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   916k|                            make_eof_scan_error));
 6096|       |
 6097|   916k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 456k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   456k|            return result_type{it, 0};
 6105|   916k|        }
 6106|       |
 6107|      0|        return result_type{rng.begin(), 0};
 6108|   460k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|   316k|    {
 6117|   316k|        const bool need_skipped_width =
 6118|   316k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 316k]
  |  Branch (6118:33): [True: 0, False: 316k]
  ------------------
 6119|   316k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   316k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 316k]
  ------------------
 6122|   316k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 316k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   316k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 316k, False: 0]
  ------------------
 6131|   316k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 0, False: 316k]
  ------------------
 6132|   316k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 0]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 0]
  ------------------
 6134|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   316k|        return result_type{rng.begin(), 0};
 6156|   316k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6226|   143k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   143k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   143k|            auto rd = make_reader<T, char_type>();
 6232|   143k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|   143k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 143k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6233|   143k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   143k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   143k|    {
 6162|   143k|        const bool need_skipped_width =
 6163|   143k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 143k]
  |  Branch (6163:33): [True: 0, False: 143k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   143k|        auto it = rng.begin();
 6167|   143k|        std::ptrdiff_t prefix_width = 0;
 6168|   143k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 143k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   143k|        else {
 6176|   143k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|   143k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   143k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   143k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.07k, False: 142k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.07k|    }                                                  \
  |  |  |  | 3938|   143k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   142k|            std::tie(it, prefix_width) = prefix_result;
 6178|   142k|        }
 6179|   142k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   142k|        std::ptrdiff_t value_width = 0;
 6183|   142k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 142k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   142k|        else {
 6199|   142k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 46.3k, False: 95.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  46.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  46.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  46.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  46.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  46.3k|    }                                                  \
  |  | 3938|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  95.8k|                                             specs, value, loc));
 6201|       |
 6202|  95.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 95.8k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  95.8k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  95.8k|        std::ptrdiff_t postfix_width = 0;
 6211|  95.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 95.2k, False: 532]
  ------------------
 6212|  95.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|  95.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  95.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  95.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  95.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 95.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|  95.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  95.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  95.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  95.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  95.2k|                                 value_width));
 6216|  95.2k|            std::tie(it, postfix_width) = postfix_result;
 6217|  95.2k|        }
 6218|       |
 6219|  95.8k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|  95.8k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|  95.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 95.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|  95.8k|            specs, prefix_width, value_width, postfix_width));
 6221|  95.8k|        return it;
 6222|  95.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6226|   157k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   157k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   157k|            auto rd = make_reader<T, char_type>();
 6232|   157k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|   157k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 157k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6233|   157k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   157k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   157k|    {
 6162|   157k|        const bool need_skipped_width =
 6163|   157k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 157k]
  |  Branch (6163:33): [True: 0, False: 157k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   157k|        auto it = rng.begin();
 6167|   157k|        std::ptrdiff_t prefix_width = 0;
 6168|   157k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 157k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   157k|        else {
 6176|   157k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.16k, False: 155k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.16k|    }                                                  \
  |  |  |  | 3938|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   155k|            std::tie(it, prefix_width) = prefix_result;
 6178|   155k|        }
 6179|   155k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   155k|        std::ptrdiff_t value_width = 0;
 6183|   155k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 155k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   155k|        else {
 6199|   155k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 46.2k, False: 109k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  46.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  46.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  46.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  46.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  46.2k|    }                                                  \
  |  | 3938|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   109k|                                             specs, value, loc));
 6201|       |
 6202|   109k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 109k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   109k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   109k|        std::ptrdiff_t postfix_width = 0;
 6211|   109k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 109k, False: 588]
  ------------------
 6212|   109k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   109k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   109k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   109k|                                 value_width));
 6216|   109k|            std::tie(it, postfix_width) = postfix_result;
 6217|   109k|        }
 6218|       |
 6219|   109k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|   109k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 109k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|   109k|            specs, prefix_width, value_width, postfix_width));
 6221|   109k|        return it;
 6222|   109k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6226|   159k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   159k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   159k|            auto rd = make_reader<T, char_type>();
 6232|   159k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3929|   159k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 159k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6233|   159k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   159k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6161|   159k|    {
 6162|   159k|        const bool need_skipped_width =
 6163|   159k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 159k]
  |  Branch (6163:33): [True: 0, False: 159k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   159k|        auto it = rng.begin();
 6167|   159k|        std::ptrdiff_t prefix_width = 0;
 6168|   159k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 159k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   159k|        else {
 6176|   159k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3939|   159k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   159k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   159k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 1.23k, False: 158k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|  1.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|  1.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.23k|    }                                                  \
  |  |  |  | 3938|   159k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   158k|            std::tie(it, prefix_width) = prefix_result;
 6178|   158k|        }
 6179|   158k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   158k|        std::ptrdiff_t value_width = 0;
 6183|   158k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 158k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   158k|        else {
 6199|   158k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3934|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3935|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  986|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 46.1k, False: 112k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3936|  46.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3926|  46.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|  46.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|  46.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  46.1k|    }                                                  \
  |  | 3938|   158k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1057|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   112k|                                             specs, value, loc));
 6201|       |
 6202|   112k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 112k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   112k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   112k|        std::ptrdiff_t postfix_width = 0;
 6211|   112k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 111k, False: 636]
  ------------------
 6212|   111k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3939|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 111k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   111k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   111k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   111k|                                 value_width));
 6216|   111k|            std::tie(it, postfix_width) = postfix_result;
 6217|   111k|        }
 6218|       |
 6219|   112k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3929|   112k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  986|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (986:25): [True: 0, False: 112k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3930|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|    }
  ------------------
 6220|   112k|            specs, prefix_width, value_width, postfix_width));
 6221|   112k|        return it;
 6222|   112k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|   169k|{
 5835|   169k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  986|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (986:25): [True: 654, False: 168k]
  |  |  ------------------
  ------------------
 5836|    654|        return unexpected(e);
 5837|    654|    }
 5838|       |
 5839|   168k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 168k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   168k|    return skip_classic_whitespace(range);
 5844|   168k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  48.8k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  48.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  48.8k|            auto rd = make_reader<T, char_type>();
 5920|  48.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 48.8k, False: 0]
  ------------------
 5921|  48.8k|                return impl(rd, range, value);
 5922|  48.8k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  48.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  48.8k|    {
 5903|  48.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  48.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  48.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  48.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  48.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 351, False: 48.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    351|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    351|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    351|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    351|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    351|    }                                                  \
  |  |  |  | 3938|  48.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  48.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  48.5k|                        .transform_error(make_eof_scan_error));
 5905|  48.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  48.8k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|  48.5k|    {
 4185|  48.5k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  48.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  48.5k|        float_reader<CharT> rd{};
 4188|  48.5k|        return read_impl<Range>(
 4189|  48.5k|            range, rd,
 4190|  48.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  48.5k|                return r.read_source(SCN_FWD(args)...);
 4192|  48.5k|            },
 4193|  48.5k|            value);
 4194|  48.5k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  48.5k|        : m_fptr([](storage fn,
  743|  48.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  48.5k|              cvref<T> obj = *get<T>(fn);
  745|  48.5k|              if constexpr (std::is_void_v<R>) {
  746|  48.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  48.5k|              }
  748|  48.5k|              else {
  749|  48.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  48.5k|              }
  751|  48.5k|          }),
  752|  48.5k|          m_storage(std::addressof(f))
  753|  48.5k|    {
  754|  48.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  48.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  48.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  48.5k|              else {
  749|  48.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  48.5k|              }
  751|  48.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  48.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  48.5k|        else if constexpr (std::is_object_v<T>) {
  688|  48.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  48.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|  48.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  48.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|  48.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  48.5k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  48.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  48.5k|        {
  662|  48.5k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  59.2k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  59.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  59.2k|            auto rd = make_reader<T, char_type>();
 5920|  59.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 59.2k, False: 0]
  ------------------
 5921|  59.2k|                return impl(rd, range, value);
 5922|  59.2k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  59.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  59.2k|    {
 5903|  59.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  59.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  59.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  59.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 408, False: 58.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    408|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    408|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    408|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    408|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    408|    }                                                  \
  |  |  |  | 3938|  59.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  58.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  58.8k|                        .transform_error(make_eof_scan_error));
 5905|  58.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  59.2k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|  58.8k|    {
 4185|  58.8k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  58.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  58.8k|        float_reader<CharT> rd{};
 4188|  58.8k|        return read_impl<Range>(
 4189|  58.8k|            range, rd,
 4190|  58.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  58.8k|                return r.read_source(SCN_FWD(args)...);
 4192|  58.8k|            },
 4193|  58.8k|            value);
 4194|  58.8k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  58.8k|        : m_fptr([](storage fn,
  743|  58.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.8k|              cvref<T> obj = *get<T>(fn);
  745|  58.8k|              if constexpr (std::is_void_v<R>) {
  746|  58.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  58.8k|              }
  748|  58.8k|              else {
  749|  58.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.8k|              }
  751|  58.8k|          }),
  752|  58.8k|          m_storage(std::addressof(f))
  753|  58.8k|    {
  754|  58.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  58.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  58.8k|              else {
  749|  58.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.8k|              }
  751|  58.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  58.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  58.8k|        else if constexpr (std::is_object_v<T>) {
  688|  58.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  58.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|  58.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  58.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|  58.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  58.8k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  58.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  58.8k|        {
  662|  58.8k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|  61.1k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  61.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  61.1k|            auto rd = make_reader<T, char_type>();
 5920|  61.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 61.1k, False: 0]
  ------------------
 5921|  61.1k|                return impl(rd, range, value);
 5922|  61.1k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3939|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|    }                                                  \
  |  |  |  | 3938|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  61.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5902|  61.1k|    {
 5903|  61.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3939|  61.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3934|  61.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3935|  61.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  986|  61.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (986:25): [True: 453, False: 60.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3936|    453|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    453|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    453|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3924|    453|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    453|    }                                                  \
  |  |  |  | 3938|  61.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1057|  60.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  60.6k|                        .transform_error(make_eof_scan_error));
 5905|  60.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  61.1k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4184|  60.6k|    {
 4185|  60.6k|        SCN_UNUSED(loc);
  ------------------
  |  | 1036|  60.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4186|       |
 4187|  60.6k|        float_reader<CharT> rd{};
 4188|  60.6k|        return read_impl<Range>(
 4189|  60.6k|            range, rd,
 4190|  60.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  60.6k|                return r.read_source(SCN_FWD(args)...);
 4192|  60.6k|            },
 4193|  60.6k|            value);
 4194|  60.6k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  60.6k|        : m_fptr([](storage fn,
  743|  60.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.6k|              cvref<T> obj = *get<T>(fn);
  745|  60.6k|              if constexpr (std::is_void_v<R>) {
  746|  60.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  60.6k|              }
  748|  60.6k|              else {
  749|  60.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.6k|              }
  751|  60.6k|          }),
  752|  60.6k|          m_storage(std::addressof(f))
  753|  60.6k|    {
  754|  60.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  60.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  60.6k|              else {
  749|  60.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.6k|              }
  751|  60.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  60.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  60.6k|        else if constexpr (std::is_object_v<T>) {
  688|  60.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  60.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4190|  60.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4191|  60.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1057|  60.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4192|  60.6k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  60.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  60.6k|        {
  662|  60.6k|        }

LLVMFuzzerTestOneInput:
   54|  2.37k|{
   55|  2.37k|    scn::fuzz::run(data, size);
   56|  2.37k|    return 0;
   57|  2.37k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  2.37k|{
   33|  2.37k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.37k]
  |  Branch (33:35): [True: 0, False: 2.37k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.37k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  2.37k|    const auto& f =
   40|  2.37k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.37k|    do_basic_run(sv, f);
   42|       |
   43|  2.37k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  2.37k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  2.37k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.37k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.37k, False: 0]
  ------------------
   47|  2.37k|        do_basic_run(wsv_transcode, wf);
   48|  2.37k|    }
   49|  2.37k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.37k|{
   25|  2.37k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.37k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.37k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.37k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.37k|{
   25|  2.37k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.37k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.37k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.37k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.74k|{
   25|  4.74k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.74k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.74k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.74k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.74k|{
   25|  4.74k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.74k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.74k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.74k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|  2.37k|{
   53|  2.37k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1051|  2.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  2.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|  2.37k|    string_buffer.resize(size);
   57|  2.37k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  2.37k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  2.37k|    const auto wsv_reinterpret_size =
   62|  2.37k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 67, False: 2.30k]
  ------------------
   63|  2.37k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  2.37k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|  2.37k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  2.37k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|  2.37k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|  2.37k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|  2.37k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  2.37k|{
  123|  2.37k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  2.37k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  2.37k|    buf.resize(sizeof...(Args));
  126|  2.37k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  2.37k|    return buf;
  128|  2.37k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|  2.37k|{
  109|  2.37k|    if constexpr (std::is_same_v<CharT, char>) {
  110|  2.37k|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|  2.37k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  2.37k|{
  186|  2.37k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  2.37k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  2.37k|                                   format_strings);
  189|  2.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  2.37k|{
  134|       |    // Regular scan
  135|  14.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.2k, False: 2.37k]
  ------------------
  136|  14.2k|        auto it = scn::ranges::begin(source);
  137|   137k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   137k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   137k|            auto result = scn::scan<T>(
  140|   137k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   137k|                scn::runtime_format(f));
  142|   137k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.2k, False: 122k]
  ------------------
  143|  14.2k|                break;
  144|  14.2k|            }
  145|   122k|            it = result->begin();
  146|   122k|        }
  147|  14.2k|    }
  148|       |
  149|       |    // scan localized
  150|  14.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.2k, False: 2.37k]
  ------------------
  151|  14.2k|        auto it = scn::ranges::begin(source);
  152|   137k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   137k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   137k|            auto result = scn::scan<T>(
  155|   137k|                global_locale,
  156|   137k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   137k|                scn::runtime_format(f));
  158|   137k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.2k, False: 122k]
  ------------------
  159|  14.2k|                break;
  160|  14.2k|            }
  161|   122k|            it = result->begin();
  162|   122k|        }
  163|  14.2k|    }
  164|       |
  165|       |    // scan_value
  166|  2.37k|    {
  167|  2.37k|        auto it = scn::ranges::begin(source);
  168|  29.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  29.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  29.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  29.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  29.5k|            auto result = scn::scan_value<T>(
  171|  29.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  29.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.37k, False: 27.2k]
  ------------------
  173|  2.37k|                break;
  174|  2.37k|            }
  175|  27.2k|            it = result->begin();
  176|  27.2k|        }
  177|  2.37k|    }
  178|  2.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  2.37k|{
  134|       |    // Regular scan
  135|  14.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.2k, False: 2.37k]
  ------------------
  136|  14.2k|        auto it = scn::ranges::begin(source);
  137|   142k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   142k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   142k|            auto result = scn::scan<T>(
  140|   142k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   142k|                scn::runtime_format(f));
  142|   142k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.2k, False: 127k]
  ------------------
  143|  14.2k|                break;
  144|  14.2k|            }
  145|   127k|            it = result->begin();
  146|   127k|        }
  147|  14.2k|    }
  148|       |
  149|       |    // scan localized
  150|  14.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.2k, False: 2.37k]
  ------------------
  151|  14.2k|        auto it = scn::ranges::begin(source);
  152|   142k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   142k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   142k|            auto result = scn::scan<T>(
  155|   142k|                global_locale,
  156|   142k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   142k|                scn::runtime_format(f));
  158|   142k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.2k, False: 127k]
  ------------------
  159|  14.2k|                break;
  160|  14.2k|            }
  161|   127k|            it = result->begin();
  162|   127k|        }
  163|  14.2k|    }
  164|       |
  165|       |    // scan_value
  166|  2.37k|    {
  167|  2.37k|        auto it = scn::ranges::begin(source);
  168|  30.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  30.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  30.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  30.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  30.9k|            auto result = scn::scan_value<T>(
  171|  30.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  30.9k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.37k, False: 28.6k]
  ------------------
  173|  2.37k|                break;
  174|  2.37k|            }
  175|  28.6k|            it = result->begin();
  176|  28.6k|        }
  177|  2.37k|    }
  178|  2.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  2.37k|{
  134|       |    // Regular scan
  135|  14.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.2k, False: 2.37k]
  ------------------
  136|  14.2k|        auto it = scn::ranges::begin(source);
  137|   144k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   144k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   144k|            auto result = scn::scan<T>(
  140|   144k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   144k|                scn::runtime_format(f));
  142|   144k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.2k, False: 130k]
  ------------------
  143|  14.2k|                break;
  144|  14.2k|            }
  145|   130k|            it = result->begin();
  146|   130k|        }
  147|  14.2k|    }
  148|       |
  149|       |    // scan localized
  150|  14.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.2k, False: 2.37k]
  ------------------
  151|  14.2k|        auto it = scn::ranges::begin(source);
  152|   144k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   144k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   144k|            auto result = scn::scan<T>(
  155|   144k|                global_locale,
  156|   144k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   144k|                scn::runtime_format(f));
  158|   144k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.2k, False: 130k]
  ------------------
  159|  14.2k|                break;
  160|  14.2k|            }
  161|   130k|            it = result->begin();
  162|   130k|        }
  163|  14.2k|    }
  164|       |
  165|       |    // scan_value
  166|  2.37k|    {
  167|  2.37k|        auto it = scn::ranges::begin(source);
  168|  31.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  31.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  31.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  31.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  31.6k|            auto result = scn::scan_value<T>(
  171|  31.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  31.6k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.37k, False: 29.2k]
  ------------------
  173|  2.37k|                break;
  174|  2.37k|            }
  175|  29.2k|            it = result->begin();
  176|  29.2k|        }
  177|  2.37k|    }
  178|  2.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  2.37k|{
  134|       |    // Regular scan
  135|  14.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.2k, False: 2.37k]
  ------------------
  136|  14.2k|        auto it = scn::ranges::begin(source);
  137|   157k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   157k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   157k|            auto result = scn::scan<T>(
  140|   157k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   157k|                scn::runtime_format(f));
  142|   157k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.2k, False: 143k]
  ------------------
  143|  14.2k|                break;
  144|  14.2k|            }
  145|   143k|            it = result->begin();
  146|   143k|        }
  147|  14.2k|    }
  148|       |
  149|       |    // scan localized
  150|  14.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.2k, False: 2.37k]
  ------------------
  151|  14.2k|        auto it = scn::ranges::begin(source);
  152|   157k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   157k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   157k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   157k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   157k|            auto result = scn::scan<T>(
  155|   157k|                global_locale,
  156|   157k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   157k|                scn::runtime_format(f));
  158|   157k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.2k, False: 143k]
  ------------------
  159|  14.2k|                break;
  160|  14.2k|            }
  161|   143k|            it = result->begin();
  162|   143k|        }
  163|  14.2k|    }
  164|       |
  165|       |    // scan_value
  166|  2.37k|    {
  167|  2.37k|        auto it = scn::ranges::begin(source);
  168|  32.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  32.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  32.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  32.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  32.1k|            auto result = scn::scan_value<T>(
  171|  32.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  32.1k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.37k, False: 29.8k]
  ------------------
  173|  2.37k|                break;
  174|  2.37k|            }
  175|  29.8k|            it = result->begin();
  176|  29.8k|        }
  177|  2.37k|    }
  178|  2.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  2.37k|{
  134|       |    // Regular scan
  135|  14.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.2k, False: 2.37k]
  ------------------
  136|  14.2k|        auto it = scn::ranges::begin(source);
  137|   166k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   166k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   166k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   166k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   166k|            auto result = scn::scan<T>(
  140|   166k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   166k|                scn::runtime_format(f));
  142|   166k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.2k, False: 151k]
  ------------------
  143|  14.2k|                break;
  144|  14.2k|            }
  145|   151k|            it = result->begin();
  146|   151k|        }
  147|  14.2k|    }
  148|       |
  149|       |    // scan localized
  150|  14.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.2k, False: 2.37k]
  ------------------
  151|  14.2k|        auto it = scn::ranges::begin(source);
  152|   166k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   166k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   166k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   166k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   166k|            auto result = scn::scan<T>(
  155|   166k|                global_locale,
  156|   166k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   166k|                scn::runtime_format(f));
  158|   166k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.2k, False: 151k]
  ------------------
  159|  14.2k|                break;
  160|  14.2k|            }
  161|   151k|            it = result->begin();
  162|   151k|        }
  163|  14.2k|    }
  164|       |
  165|       |    // scan_value
  166|  2.37k|    {
  167|  2.37k|        auto it = scn::ranges::begin(source);
  168|  34.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  34.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  34.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  34.1k|            auto result = scn::scan_value<T>(
  171|  34.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  34.1k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.37k, False: 31.8k]
  ------------------
  173|  2.37k|                break;
  174|  2.37k|            }
  175|  31.8k|            it = result->begin();
  176|  31.8k|        }
  177|  2.37k|    }
  178|  2.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  2.37k|{
  134|       |    // Regular scan
  135|  14.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 14.2k, False: 2.37k]
  ------------------
  136|  14.2k|        auto it = scn::ranges::begin(source);
  137|   168k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   168k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   168k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   168k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   168k|            auto result = scn::scan<T>(
  140|   168k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   168k|                scn::runtime_format(f));
  142|   168k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 14.2k, False: 153k]
  ------------------
  143|  14.2k|                break;
  144|  14.2k|            }
  145|   153k|            it = result->begin();
  146|   153k|        }
  147|  14.2k|    }
  148|       |
  149|       |    // scan localized
  150|  14.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 14.2k, False: 2.37k]
  ------------------
  151|  14.2k|        auto it = scn::ranges::begin(source);
  152|   168k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   168k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   168k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   168k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   168k|            auto result = scn::scan<T>(
  155|   168k|                global_locale,
  156|   168k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   168k|                scn::runtime_format(f));
  158|   168k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 14.2k, False: 153k]
  ------------------
  159|  14.2k|                break;
  160|  14.2k|            }
  161|   153k|            it = result->begin();
  162|   153k|        }
  163|  14.2k|    }
  164|       |
  165|       |    // scan_value
  166|  2.37k|    {
  167|  2.37k|        auto it = scn::ranges::begin(source);
  168|  34.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  34.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  34.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  34.6k|            auto result = scn::scan_value<T>(
  171|  34.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  34.6k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 2.37k, False: 32.2k]
  ------------------
  173|  2.37k|                break;
  174|  2.37k|            }
  175|  32.2k|            it = result->begin();
  176|  32.2k|        }
  177|  2.37k|    }
  178|  2.37k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|  2.37k|{
   91|  2.37k|    using char_type = ranges::range_value_t<Source>;
   92|  2.37k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  2.37k|    deque.clear();
   94|  2.37k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  2.37k|              std::back_inserter(deque));
   96|  2.37k|    return deque;
   97|  2.37k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|  2.37k|{
   80|  2.37k|    if constexpr (std::is_same_v<CharT, char>) {
   81|  2.37k|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|  2.37k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  2.37k|{
  123|  2.37k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  2.37k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  2.37k|    buf.resize(sizeof...(Args));
  126|  2.37k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  2.37k|    return buf;
  128|  2.37k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|  2.37k|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|  2.37k|    else {
  113|  2.37k|        return wformat_string_view_buffer;
  114|  2.37k|    }
  115|  2.37k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  4.74k|{
  186|  4.74k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  4.74k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  4.74k|                                   format_strings);
  189|  4.74k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  4.74k|{
  134|       |    // Regular scan
  135|  28.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.4k, False: 4.74k]
  ------------------
  136|  28.4k|        auto it = scn::ranges::begin(source);
  137|  87.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  87.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  87.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  87.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  87.9k|            auto result = scn::scan<T>(
  140|  87.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  87.9k|                scn::runtime_format(f));
  142|  87.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.4k, False: 59.4k]
  ------------------
  143|  28.4k|                break;
  144|  28.4k|            }
  145|  59.4k|            it = result->begin();
  146|  59.4k|        }
  147|  28.4k|    }
  148|       |
  149|       |    // scan localized
  150|  28.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.4k, False: 4.74k]
  ------------------
  151|  28.4k|        auto it = scn::ranges::begin(source);
  152|  87.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  87.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  87.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  87.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  87.9k|            auto result = scn::scan<T>(
  155|  87.9k|                global_locale,
  156|  87.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  87.9k|                scn::runtime_format(f));
  158|  87.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.4k, False: 59.4k]
  ------------------
  159|  28.4k|                break;
  160|  28.4k|            }
  161|  59.4k|            it = result->begin();
  162|  59.4k|        }
  163|  28.4k|    }
  164|       |
  165|       |    // scan_value
  166|  4.74k|    {
  167|  4.74k|        auto it = scn::ranges::begin(source);
  168|  16.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  16.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  16.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  16.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  16.3k|            auto result = scn::scan_value<T>(
  171|  16.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  16.3k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.74k, False: 11.5k]
  ------------------
  173|  4.74k|                break;
  174|  4.74k|            }
  175|  11.5k|            it = result->begin();
  176|  11.5k|        }
  177|  4.74k|    }
  178|  4.74k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  4.74k|{
  134|       |    // Regular scan
  135|  28.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.4k, False: 4.74k]
  ------------------
  136|  28.4k|        auto it = scn::ranges::begin(source);
  137|  98.3k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  98.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  98.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  98.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  98.3k|            auto result = scn::scan<T>(
  140|  98.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  98.3k|                scn::runtime_format(f));
  142|  98.3k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.4k, False: 69.8k]
  ------------------
  143|  28.4k|                break;
  144|  28.4k|            }
  145|  69.8k|            it = result->begin();
  146|  69.8k|        }
  147|  28.4k|    }
  148|       |
  149|       |    // scan localized
  150|  28.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.4k, False: 4.74k]
  ------------------
  151|  28.4k|        auto it = scn::ranges::begin(source);
  152|  98.3k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  98.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  98.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  98.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  98.3k|            auto result = scn::scan<T>(
  155|  98.3k|                global_locale,
  156|  98.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  98.3k|                scn::runtime_format(f));
  158|  98.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.4k, False: 69.8k]
  ------------------
  159|  28.4k|                break;
  160|  28.4k|            }
  161|  69.8k|            it = result->begin();
  162|  69.8k|        }
  163|  28.4k|    }
  164|       |
  165|       |    // scan_value
  166|  4.74k|    {
  167|  4.74k|        auto it = scn::ranges::begin(source);
  168|  19.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  19.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  19.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.7k|            auto result = scn::scan_value<T>(
  171|  19.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.7k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.74k, False: 15.0k]
  ------------------
  173|  4.74k|                break;
  174|  4.74k|            }
  175|  15.0k|            it = result->begin();
  176|  15.0k|        }
  177|  4.74k|    }
  178|  4.74k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  4.74k|{
  134|       |    // Regular scan
  135|  28.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.4k, False: 4.74k]
  ------------------
  136|  28.4k|        auto it = scn::ranges::begin(source);
  137|   100k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   100k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   100k|            auto result = scn::scan<T>(
  140|   100k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   100k|                scn::runtime_format(f));
  142|   100k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.4k, False: 71.8k]
  ------------------
  143|  28.4k|                break;
  144|  28.4k|            }
  145|  71.8k|            it = result->begin();
  146|  71.8k|        }
  147|  28.4k|    }
  148|       |
  149|       |    // scan localized
  150|  28.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.4k, False: 4.74k]
  ------------------
  151|  28.4k|        auto it = scn::ranges::begin(source);
  152|   100k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   100k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   100k|            auto result = scn::scan<T>(
  155|   100k|                global_locale,
  156|   100k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   100k|                scn::runtime_format(f));
  158|   100k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.4k, False: 71.8k]
  ------------------
  159|  28.4k|                break;
  160|  28.4k|            }
  161|  71.8k|            it = result->begin();
  162|  71.8k|        }
  163|  28.4k|    }
  164|       |
  165|       |    // scan_value
  166|  4.74k|    {
  167|  4.74k|        auto it = scn::ranges::begin(source);
  168|  20.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  20.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  20.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  20.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  20.4k|            auto result = scn::scan_value<T>(
  171|  20.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  20.4k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.74k, False: 15.6k]
  ------------------
  173|  4.74k|                break;
  174|  4.74k|            }
  175|  15.6k|            it = result->begin();
  176|  15.6k|        }
  177|  4.74k|    }
  178|  4.74k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  4.74k|{
  134|       |    // Regular scan
  135|  28.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.4k, False: 4.74k]
  ------------------
  136|  28.4k|        auto it = scn::ranges::begin(source);
  137|  87.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  87.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  87.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  87.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  87.8k|            auto result = scn::scan<T>(
  140|  87.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  87.8k|                scn::runtime_format(f));
  142|  87.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.4k, False: 59.4k]
  ------------------
  143|  28.4k|                break;
  144|  28.4k|            }
  145|  59.4k|            it = result->begin();
  146|  59.4k|        }
  147|  28.4k|    }
  148|       |
  149|       |    // scan localized
  150|  28.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.4k, False: 4.74k]
  ------------------
  151|  28.4k|        auto it = scn::ranges::begin(source);
  152|  87.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  87.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  87.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  87.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  87.8k|            auto result = scn::scan<T>(
  155|  87.8k|                global_locale,
  156|  87.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  87.8k|                scn::runtime_format(f));
  158|  87.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.4k, False: 59.4k]
  ------------------
  159|  28.4k|                break;
  160|  28.4k|            }
  161|  59.4k|            it = result->begin();
  162|  59.4k|        }
  163|  28.4k|    }
  164|       |
  165|       |    // scan_value
  166|  4.74k|    {
  167|  4.74k|        auto it = scn::ranges::begin(source);
  168|  16.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  16.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  16.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  16.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  16.2k|            auto result = scn::scan_value<T>(
  171|  16.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  16.2k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.74k, False: 11.5k]
  ------------------
  173|  4.74k|                break;
  174|  4.74k|            }
  175|  11.5k|            it = result->begin();
  176|  11.5k|        }
  177|  4.74k|    }
  178|  4.74k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  4.74k|{
  134|       |    // Regular scan
  135|  28.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.4k, False: 4.74k]
  ------------------
  136|  28.4k|        auto it = scn::ranges::begin(source);
  137|  98.2k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  98.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  98.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  98.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  98.2k|            auto result = scn::scan<T>(
  140|  98.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  98.2k|                scn::runtime_format(f));
  142|  98.2k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.4k, False: 69.8k]
  ------------------
  143|  28.4k|                break;
  144|  28.4k|            }
  145|  69.8k|            it = result->begin();
  146|  69.8k|        }
  147|  28.4k|    }
  148|       |
  149|       |    // scan localized
  150|  28.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.4k, False: 4.74k]
  ------------------
  151|  28.4k|        auto it = scn::ranges::begin(source);
  152|  98.2k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  98.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  98.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  98.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  98.2k|            auto result = scn::scan<T>(
  155|  98.2k|                global_locale,
  156|  98.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  98.2k|                scn::runtime_format(f));
  158|  98.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.4k, False: 69.8k]
  ------------------
  159|  28.4k|                break;
  160|  28.4k|            }
  161|  69.8k|            it = result->begin();
  162|  69.8k|        }
  163|  28.4k|    }
  164|       |
  165|       |    // scan_value
  166|  4.74k|    {
  167|  4.74k|        auto it = scn::ranges::begin(source);
  168|  19.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  19.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  19.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.7k|            auto result = scn::scan_value<T>(
  171|  19.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.7k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.74k, False: 15.0k]
  ------------------
  173|  4.74k|                break;
  174|  4.74k|            }
  175|  15.0k|            it = result->begin();
  176|  15.0k|        }
  177|  4.74k|    }
  178|  4.74k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  4.74k|{
  134|       |    // Regular scan
  135|  28.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 28.4k, False: 4.74k]
  ------------------
  136|  28.4k|        auto it = scn::ranges::begin(source);
  137|   100k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   100k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   100k|            auto result = scn::scan<T>(
  140|   100k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   100k|                scn::runtime_format(f));
  142|   100k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 28.4k, False: 71.7k]
  ------------------
  143|  28.4k|                break;
  144|  28.4k|            }
  145|  71.7k|            it = result->begin();
  146|  71.7k|        }
  147|  28.4k|    }
  148|       |
  149|       |    // scan localized
  150|  28.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 28.4k, False: 4.74k]
  ------------------
  151|  28.4k|        auto it = scn::ranges::begin(source);
  152|   100k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   100k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   100k|            auto result = scn::scan<T>(
  155|   100k|                global_locale,
  156|   100k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   100k|                scn::runtime_format(f));
  158|   100k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 28.4k, False: 71.7k]
  ------------------
  159|  28.4k|                break;
  160|  28.4k|            }
  161|  71.7k|            it = result->begin();
  162|  71.7k|        }
  163|  28.4k|    }
  164|       |
  165|       |    // scan_value
  166|  4.74k|    {
  167|  4.74k|        auto it = scn::ranges::begin(source);
  168|  20.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  20.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1051|  20.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1048|  20.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  20.3k|            auto result = scn::scan_value<T>(
  171|  20.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  20.3k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 4.74k, False: 15.6k]
  ------------------
  173|  4.74k|                break;
  174|  4.74k|            }
  175|  15.6k|            it = result->begin();
  176|  15.6k|        }
  177|  4.74k|    }
  178|  4.74k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  4.74k|{
   91|  4.74k|    using char_type = ranges::range_value_t<Source>;
   92|  4.74k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  4.74k|    deque.clear();
   94|  4.74k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  4.74k|              std::back_inserter(deque));
   96|  4.74k|    return deque;
   97|  4.74k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  4.74k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  4.74k|    else {
   84|  4.74k|        return wnoncontiguous_buffer;
   85|  4.74k|    }
   86|  4.74k|}

