_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  285|   971k|                    parse_options_t<UC> options) noexcept {
  286|   971k|  chars_format const fmt = options.format;
  287|   971k|  UC const decimal_point = options.decimal_point;
  288|       |
  289|   971k|  parsed_number_string_t<UC> answer;
  290|   971k|  answer.valid = false;
  291|   971k|  answer.too_many_digits = false;
  292|   971k|  answer.negative = (*p == UC('-'));
  293|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  294|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  295|       |#else
  296|   971k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (296:7): [True: 0, False: 971k]
  ------------------
  297|      0|#endif
  298|      0|    ++p;
  299|      0|    if (p == pend) {
  ------------------
  |  Branch (299:9): [True: 0, False: 0]
  ------------------
  300|      0|      return report_parse_error<UC>(
  301|      0|          p, parse_error::missing_integer_or_dot_after_sign);
  302|      0|    }
  303|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (303:9): [True: 0, False: 0]
  ------------------
  304|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (304:11): [True: 0, False: 0]
  ------------------
  305|      0|        return report_parse_error<UC>(p,
  306|      0|                                      parse_error::missing_integer_after_sign);
  307|      0|      }
  308|      0|    } else {
  309|      0|      if (!is_integer(*p) &&
  ------------------
  |  Branch (309:11): [True: 0, False: 0]
  ------------------
  310|      0|          (*p !=
  ------------------
  |  Branch (310:11): [True: 0, False: 0]
  ------------------
  311|      0|           decimal_point)) { // a sign must be followed by an integer or the dot
  312|      0|        return report_parse_error<UC>(
  313|      0|            p, parse_error::missing_integer_or_dot_after_sign);
  314|      0|      }
  315|      0|    }
  316|      0|  }
  317|   971k|  UC const *const start_digits = p;
  318|       |
  319|   971k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  320|       |
  321|  5.01M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (321:10): [True: 4.53M, False: 481k]
  |  Branch (321:25): [True: 4.04M, False: 490k]
  ------------------
  322|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  323|       |    // multiplication
  324|  4.04M|    i = 10 * i +
  325|  4.04M|        uint64_t(*p -
  326|  4.04M|                 UC('0')); // might overflow, we will handle the overflow later
  327|  4.04M|    ++p;
  328|  4.04M|  }
  329|   971k|  UC const *const end_of_integer_part = p;
  330|   971k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  331|   971k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  332|   971k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   971k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (332:7): [True: 0, False: 971k]
  ------------------
  333|       |    // at least 1 digit in integer part, without leading zeros
  334|      0|    if (digit_count == 0) {
  ------------------
  |  Branch (334:9): [True: 0, False: 0]
  ------------------
  335|      0|      return report_parse_error<UC>(p, parse_error::no_digits_in_integer_part);
  336|      0|    }
  337|      0|    if ((start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (337:10): [True: 0, False: 0]
  |  Branch (337:40): [True: 0, False: 0]
  ------------------
  338|      0|      return report_parse_error<UC>(start_digits,
  339|      0|                                    parse_error::leading_zeros_in_integer_part);
  340|      0|    }
  341|      0|  }
  342|       |
  343|   971k|  int64_t exponent = 0;
  344|   971k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (344:34): [True: 490k, False: 481k]
  |  Branch (344:49): [True: 170k, False: 319k]
  ------------------
  345|   971k|  if (has_decimal_point) {
  ------------------
  |  Branch (345:7): [True: 170k, False: 801k]
  ------------------
  346|   170k|    ++p;
  347|   170k|    UC const *before = p;
  348|       |    // can occur at most twice without overflowing, but let it occur more, since
  349|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  350|   170k|    loop_parse_if_eight_digits(p, pend, i);
  351|       |
  352|   710k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (352:12): [True: 605k, False: 105k]
  |  Branch (352:27): [True: 540k, False: 64.8k]
  ------------------
  353|   540k|      uint8_t digit = uint8_t(*p - UC('0'));
  354|   540k|      ++p;
  355|   540k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  356|   540k|    }
  357|   170k|    exponent = before - p;
  358|   170k|    answer.fraction = span<const UC>(before, size_t(p - before));
  359|   170k|    digit_count -= exponent;
  360|   170k|  }
  361|   971k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   971k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (361:7): [True: 0, False: 971k]
  ------------------
  362|       |    // at least 1 digit in fractional part
  363|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (363:9): [True: 0, False: 0]
  |  Branch (363:30): [True: 0, False: 0]
  ------------------
  364|      0|      return report_parse_error<UC>(p,
  365|      0|                                    parse_error::no_digits_in_fractional_part);
  366|      0|    }
  367|   971k|  } else if (digit_count ==
  ------------------
  |  Branch (367:14): [True: 0, False: 971k]
  ------------------
  368|   971k|             0) { // we must have encountered at least one integer!
  369|      0|    return report_parse_error<UC>(p, parse_error::no_digits_in_mantissa);
  370|      0|  }
  371|   971k|  int64_t exp_number = 0; // explicit exponential part
  372|   971k|  if (((fmt & chars_format::scientific) && (p != pend) &&
  ------------------
  |  Branch (372:8): [True: 844k, False: 127k]
  |  Branch (372:44): [True: 384k, False: 459k]
  ------------------
  373|   971k|       ((UC('e') == *p) || (UC('E') == *p))) ||
  ------------------
  |  Branch (373:9): [True: 84.0k, False: 300k]
  |  Branch (373:28): [True: 59.5k, False: 241k]
  ------------------
  374|   971k|      ((fmt & FASTFLOAT_FORTRANFMT) && (p != pend) &&
  ------------------
  |  |   20|   828k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (374:8): [True: 0, False: 828k]
  |  Branch (374:40): [True: 0, False: 0]
  ------------------
  375|   828k|       ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (375:9): [True: 0, False: 0]
  |  Branch (375:28): [True: 0, False: 0]
  |  Branch (375:47): [True: 0, False: 0]
  ------------------
  376|   143k|        (UC('D') == *p)))) {
  ------------------
  |  Branch (376:9): [True: 0, False: 0]
  ------------------
  377|   143k|    UC const *location_of_e = p;
  378|   143k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (378:9): [True: 84.0k, False: 59.5k]
  |  Branch (378:28): [True: 59.5k, False: 0]
  |  Branch (378:47): [True: 0, False: 0]
  ------------------
  379|   143k|        (UC('D') == *p)) {
  ------------------
  |  Branch (379:9): [True: 0, False: 0]
  ------------------
  380|   143k|      ++p;
  381|   143k|    }
  382|   143k|    bool neg_exp = false;
  383|   143k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (383:9): [True: 143k, False: 115]
  |  Branch (383:24): [True: 6.81k, False: 136k]
  ------------------
  384|  6.81k|      neg_exp = true;
  385|  6.81k|      ++p;
  386|   136k|    } else if ((p != pend) &&
  ------------------
  |  Branch (386:16): [True: 136k, False: 115]
  ------------------
  387|   136k|               (UC('+') ==
  ------------------
  |  Branch (387:16): [True: 44.9k, False: 91.6k]
  ------------------
  388|   136k|                *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  389|  44.9k|      ++p;
  390|  44.9k|    }
  391|   143k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (391:9): [True: 165, False: 143k]
  |  Branch (391:24): [True: 530, False: 142k]
  ------------------
  392|    695|      if (!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (392:11): [True: 0, False: 695]
  ------------------
  393|       |        // The exponential part is invalid for scientific notation, so it must
  394|       |        // be a trailing token for fixed notation. However, fixed notation is
  395|       |        // disabled, so report a scientific notation error.
  396|      0|        return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  397|      0|      }
  398|       |      // Otherwise, we will be ignoring the 'e'.
  399|    695|      p = location_of_e;
  400|   142k|    } else {
  401|   436k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (401:14): [True: 332k, False: 104k]
  |  Branch (401:29): [True: 294k, False: 38.4k]
  ------------------
  402|   294k|        uint8_t digit = uint8_t(*p - UC('0'));
  403|   294k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (403:13): [True: 269k, False: 24.1k]
  ------------------
  404|   269k|          exp_number = 10 * exp_number + digit;
  405|   269k|        }
  406|   294k|        ++p;
  407|   294k|      }
  408|   142k|      if (neg_exp) {
  ------------------
  |  Branch (408:11): [True: 6.76k, False: 136k]
  ------------------
  409|  6.76k|        exp_number = -exp_number;
  410|  6.76k|      }
  411|   142k|      exponent += exp_number;
  412|   142k|    }
  413|   828k|  } else {
  414|       |    // If it scientific and not fixed, we have to bail out.
  415|   828k|    if ((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (415:9): [True: 701k, False: 127k]
  |  Branch (415:45): [True: 0, False: 701k]
  ------------------
  416|      0|      return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  417|      0|    }
  418|   828k|  }
  419|   971k|  answer.lastmatch = p;
  420|   971k|  answer.valid = true;
  421|       |
  422|       |  // If we frequently had to deal with long strings of digits,
  423|       |  // we could extend our code by using a 128-bit integer instead
  424|       |  // of a 64-bit integer. However, this is uncommon.
  425|       |  //
  426|       |  // We can deal with up to 19 digits.
  427|   971k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (427:7): [True: 155k, False: 816k]
  ------------------
  428|       |    // It is possible that the integer had an overflow.
  429|       |    // We have to handle the case where we have 0.0000somenumber.
  430|       |    // We need to be mindful of the case where we only have zeroes...
  431|       |    // E.g., 0.000000000...000.
  432|   155k|    UC const *start = start_digits;
  433|   672k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (433:12): [True: 670k, False: 1.78k]
  |  Branch (433:32): [True: 509k, False: 161k]
  |  Branch (433:53): [True: 7.57k, False: 153k]
  ------------------
  434|   517k|      if (*start == UC('0')) {
  ------------------
  |  Branch (434:11): [True: 509k, False: 7.57k]
  ------------------
  435|   509k|        digit_count--;
  436|   509k|      }
  437|   517k|      start++;
  438|   517k|    }
  439|       |
  440|   155k|    if (digit_count > 19) {
  ------------------
  |  Branch (440:9): [True: 149k, False: 5.83k]
  ------------------
  441|   149k|      answer.too_many_digits = true;
  442|       |      // Let us start again, this time, avoiding overflows.
  443|       |      // We don't need to check if is_integer, since we use the
  444|       |      // pre-tokenized spans from above.
  445|   149k|      i = 0;
  446|   149k|      p = answer.integer.ptr;
  447|   149k|      UC const *int_end = p + answer.integer.len();
  448|   149k|      const uint64_t minimal_nineteen_digit_integer{1000000000000000000};
  449|  1.52M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (449:14): [True: 1.48M, False: 39.2k]
  |  Branch (449:54): [True: 1.37M, False: 110k]
  ------------------
  450|  1.37M|        i = i * 10 + uint64_t(*p - UC('0'));
  451|  1.37M|        ++p;
  452|  1.37M|      }
  453|   149k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (453:11): [True: 39.2k, False: 110k]
  ------------------
  454|  39.2k|        exponent = end_of_integer_part - p + exp_number;
  455|   110k|      } else { // We have a value with a fractional component.
  456|   110k|        p = answer.fraction.ptr;
  457|   110k|        UC const *frac_end = p + answer.fraction.len();
  458|  1.94M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (458:16): [True: 1.83M, False: 110k]
  |  Branch (458:56): [True: 1.83M, False: 0]
  ------------------
  459|  1.83M|          i = i * 10 + uint64_t(*p - UC('0'));
  460|  1.83M|          ++p;
  461|  1.83M|        }
  462|   110k|        exponent = answer.fraction.ptr - p + exp_number;
  463|   110k|      }
  464|       |      // We have now corrected both exponent and i, to a truncated value
  465|   149k|    }
  466|   155k|  }
  467|   971k|  answer.exponent = exponent;
  468|   971k|  answer.mantissa = i;
  469|   971k|  return answer;
  470|   971k|}
_ZN10fast_float10is_integerIcEEbT_:
   34|  5.61M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   35|  5.61M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (35:12): [True: 166k, False: 5.44M]
  |  Branch (35:27): [True: 427k, False: 5.01M]
  ------------------
   36|  5.61M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  224|   170k|                           uint64_t &i) {
  225|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  226|   637k|  while ((std::distance(p, pend) >= 8) &&
  ------------------
  |  Branch (226:10): [True: 518k, False: 119k]
  ------------------
  227|   637k|         is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (227:10): [True: 466k, False: 51.7k]
  ------------------
  228|   466k|    i = i * 100000000 +
  229|   466k|        parse_eight_digits_unrolled(read8_to_u64(
  230|   466k|            p)); // in rare cases, this will overflow, but that's ok
  231|   466k|    p += 8;
  232|   466k|  }
  233|   170k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  142|   518k|is_made_of_eight_digits_fast(uint64_t val) noexcept {
  143|   518k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  144|   518k|            0x8080808080808080));
  145|   518k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   48|  1.18M|read8_to_u64(const UC *chars) {
   49|  1.18M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (49:7): [Folded - Ignored]
  |  Branch (49:35): [Folded - Ignored]
  ------------------
   50|      0|    uint64_t val = 0;
   51|      0|    for (int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (51:21): [True: 0, False: 0]
  ------------------
   52|      0|      val |= uint64_t(uint8_t(*chars)) << (i * 8);
   53|      0|      ++chars;
   54|      0|    }
   55|      0|    return val;
   56|      0|  }
   57|  1.18M|  uint64_t val;
   58|  1.18M|  ::memcpy(&val, chars, sizeof(uint64_t));
   59|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   60|       |  // Need to read as-if the number was in little-endian order.
   61|       |  val = byteswap(val);
   62|       |#endif
   63|  1.18M|  return val;
   64|  1.18M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  120|   669k|parse_eight_digits_unrolled(uint64_t val) {
  121|   669k|  const uint64_t mask = 0x000000FF000000FF;
  122|   669k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  123|   669k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  124|   669k|  val -= 0x3030303030303030;
  125|   669k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  126|   669k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  127|   669k|  return uint32_t(val);
  128|   669k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  133|   202k|parse_eight_digits_unrolled(UC const *chars) noexcept {
  134|   202k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (134:7): [Folded - Ignored]
  |  Branch (134:35): [Folded - Ignored]
  ------------------
  135|   202k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  136|   202k|  }
  137|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  138|   202k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  285|   414k|                    parse_options_t<UC> options) noexcept {
  286|   414k|  chars_format const fmt = options.format;
  287|   414k|  UC const decimal_point = options.decimal_point;
  288|       |
  289|   414k|  parsed_number_string_t<UC> answer;
  290|   414k|  answer.valid = false;
  291|   414k|  answer.too_many_digits = false;
  292|   414k|  answer.negative = (*p == UC('-'));
  293|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  294|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  295|       |#else
  296|   414k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (296:7): [True: 0, False: 414k]
  ------------------
  297|      0|#endif
  298|      0|    ++p;
  299|      0|    if (p == pend) {
  ------------------
  |  Branch (299:9): [True: 0, False: 0]
  ------------------
  300|      0|      return report_parse_error<UC>(
  301|      0|          p, parse_error::missing_integer_or_dot_after_sign);
  302|      0|    }
  303|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (303:9): [True: 0, False: 0]
  ------------------
  304|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (304:11): [True: 0, False: 0]
  ------------------
  305|      0|        return report_parse_error<UC>(p,
  306|      0|                                      parse_error::missing_integer_after_sign);
  307|      0|      }
  308|      0|    } else {
  309|      0|      if (!is_integer(*p) &&
  ------------------
  |  Branch (309:11): [True: 0, False: 0]
  ------------------
  310|      0|          (*p !=
  ------------------
  |  Branch (310:11): [True: 0, False: 0]
  ------------------
  311|      0|           decimal_point)) { // a sign must be followed by an integer or the dot
  312|      0|        return report_parse_error<UC>(
  313|      0|            p, parse_error::missing_integer_or_dot_after_sign);
  314|      0|      }
  315|      0|    }
  316|      0|  }
  317|   414k|  UC const *const start_digits = p;
  318|       |
  319|   414k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  320|       |
  321|   891k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (321:10): [True: 610k, False: 281k]
  |  Branch (321:25): [True: 477k, False: 132k]
  ------------------
  322|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  323|       |    // multiplication
  324|   477k|    i = 10 * i +
  325|   477k|        uint64_t(*p -
  326|   477k|                 UC('0')); // might overflow, we will handle the overflow later
  327|   477k|    ++p;
  328|   477k|  }
  329|   414k|  UC const *const end_of_integer_part = p;
  330|   414k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  331|   414k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  332|   414k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   414k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (332:7): [True: 0, False: 414k]
  ------------------
  333|       |    // at least 1 digit in integer part, without leading zeros
  334|      0|    if (digit_count == 0) {
  ------------------
  |  Branch (334:9): [True: 0, False: 0]
  ------------------
  335|      0|      return report_parse_error<UC>(p, parse_error::no_digits_in_integer_part);
  336|      0|    }
  337|      0|    if ((start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (337:10): [True: 0, False: 0]
  |  Branch (337:40): [True: 0, False: 0]
  ------------------
  338|      0|      return report_parse_error<UC>(start_digits,
  339|      0|                                    parse_error::leading_zeros_in_integer_part);
  340|      0|    }
  341|      0|  }
  342|       |
  343|   414k|  int64_t exponent = 0;
  344|   414k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (344:34): [True: 132k, False: 281k]
  |  Branch (344:49): [True: 2.44k, False: 130k]
  ------------------
  345|   414k|  if (has_decimal_point) {
  ------------------
  |  Branch (345:7): [True: 2.44k, False: 411k]
  ------------------
  346|  2.44k|    ++p;
  347|  2.44k|    UC const *before = p;
  348|       |    // can occur at most twice without overflowing, but let it occur more, since
  349|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  350|  2.44k|    loop_parse_if_eight_digits(p, pend, i);
  351|       |
  352|  18.4k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (352:12): [True: 16.8k, False: 1.54k]
  |  Branch (352:27): [True: 15.9k, False: 908]
  ------------------
  353|  15.9k|      uint8_t digit = uint8_t(*p - UC('0'));
  354|  15.9k|      ++p;
  355|  15.9k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  356|  15.9k|    }
  357|  2.44k|    exponent = before - p;
  358|  2.44k|    answer.fraction = span<const UC>(before, size_t(p - before));
  359|  2.44k|    digit_count -= exponent;
  360|  2.44k|  }
  361|   414k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   414k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (361:7): [True: 0, False: 414k]
  ------------------
  362|       |    // at least 1 digit in fractional part
  363|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (363:9): [True: 0, False: 0]
  |  Branch (363:30): [True: 0, False: 0]
  ------------------
  364|      0|      return report_parse_error<UC>(p,
  365|      0|                                    parse_error::no_digits_in_fractional_part);
  366|      0|    }
  367|   414k|  } else if (digit_count ==
  ------------------
  |  Branch (367:14): [True: 0, False: 414k]
  ------------------
  368|   414k|             0) { // we must have encountered at least one integer!
  369|      0|    return report_parse_error<UC>(p, parse_error::no_digits_in_mantissa);
  370|      0|  }
  371|   414k|  int64_t exp_number = 0; // explicit exponential part
  372|   414k|  if (((fmt & chars_format::scientific) && (p != pend) &&
  ------------------
  |  Branch (372:8): [True: 337k, False: 76.2k]
  |  Branch (372:44): [True: 131k, False: 206k]
  ------------------
  373|   414k|       ((UC('e') == *p) || (UC('E') == *p))) ||
  ------------------
  |  Branch (373:9): [True: 215, False: 131k]
  |  Branch (373:28): [True: 14.2k, False: 116k]
  ------------------
  374|   414k|      ((fmt & FASTFLOAT_FORTRANFMT) && (p != pend) &&
  ------------------
  |  |   20|   399k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (374:8): [True: 0, False: 399k]
  |  Branch (374:40): [True: 0, False: 0]
  ------------------
  375|   399k|       ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (375:9): [True: 0, False: 0]
  |  Branch (375:28): [True: 0, False: 0]
  |  Branch (375:47): [True: 0, False: 0]
  ------------------
  376|  14.4k|        (UC('D') == *p)))) {
  ------------------
  |  Branch (376:9): [True: 0, False: 0]
  ------------------
  377|  14.4k|    UC const *location_of_e = p;
  378|  14.4k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) ||
  ------------------
  |  Branch (378:9): [True: 215, False: 14.2k]
  |  Branch (378:28): [True: 14.2k, False: 0]
  |  Branch (378:47): [True: 0, False: 0]
  ------------------
  379|  14.4k|        (UC('D') == *p)) {
  ------------------
  |  Branch (379:9): [True: 0, False: 0]
  ------------------
  380|  14.4k|      ++p;
  381|  14.4k|    }
  382|  14.4k|    bool neg_exp = false;
  383|  14.4k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (383:9): [True: 14.4k, False: 20]
  |  Branch (383:24): [True: 3.59k, False: 10.8k]
  ------------------
  384|  3.59k|      neg_exp = true;
  385|  3.59k|      ++p;
  386|  10.8k|    } else if ((p != pend) &&
  ------------------
  |  Branch (386:16): [True: 10.8k, False: 20]
  ------------------
  387|  10.8k|               (UC('+') ==
  ------------------
  |  Branch (387:16): [True: 265, False: 10.5k]
  ------------------
  388|  10.8k|                *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  389|    265|      ++p;
  390|    265|    }
  391|  14.4k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (391:9): [True: 40, False: 14.3k]
  |  Branch (391:24): [True: 380, False: 14.0k]
  ------------------
  392|    420|      if (!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (392:11): [True: 0, False: 420]
  ------------------
  393|       |        // The exponential part is invalid for scientific notation, so it must
  394|       |        // be a trailing token for fixed notation. However, fixed notation is
  395|       |        // disabled, so report a scientific notation error.
  396|      0|        return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  397|      0|      }
  398|       |      // Otherwise, we will be ignoring the 'e'.
  399|    420|      p = location_of_e;
  400|  14.0k|    } else {
  401|  51.3k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (401:14): [True: 41.6k, False: 9.68k]
  |  Branch (401:29): [True: 37.3k, False: 4.33k]
  ------------------
  402|  37.3k|        uint8_t digit = uint8_t(*p - UC('0'));
  403|  37.3k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (403:13): [True: 35.1k, False: 2.18k]
  ------------------
  404|  35.1k|          exp_number = 10 * exp_number + digit;
  405|  35.1k|        }
  406|  37.3k|        ++p;
  407|  37.3k|      }
  408|  14.0k|      if (neg_exp) {
  ------------------
  |  Branch (408:11): [True: 3.56k, False: 10.4k]
  ------------------
  409|  3.56k|        exp_number = -exp_number;
  410|  3.56k|      }
  411|  14.0k|      exponent += exp_number;
  412|  14.0k|    }
  413|   399k|  } else {
  414|       |    // If it scientific and not fixed, we have to bail out.
  415|   399k|    if ((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (415:9): [True: 323k, False: 76.2k]
  |  Branch (415:45): [True: 0, False: 323k]
  ------------------
  416|      0|      return report_parse_error<UC>(p, parse_error::missing_exponential_part);
  417|      0|    }
  418|   399k|  }
  419|   414k|  answer.lastmatch = p;
  420|   414k|  answer.valid = true;
  421|       |
  422|       |  // If we frequently had to deal with long strings of digits,
  423|       |  // we could extend our code by using a 128-bit integer instead
  424|       |  // of a 64-bit integer. However, this is uncommon.
  425|       |  //
  426|       |  // We can deal with up to 19 digits.
  427|   414k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (427:7): [True: 1.30k, False: 412k]
  ------------------
  428|       |    // It is possible that the integer had an overflow.
  429|       |    // We have to handle the case where we have 0.0000somenumber.
  430|       |    // We need to be mindful of the case where we only have zeroes...
  431|       |    // E.g., 0.000000000...000.
  432|  1.30k|    UC const *start = start_digits;
  433|  1.60k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (433:12): [True: 1.60k, False: 0]
  |  Branch (433:32): [True: 296, False: 1.30k]
  |  Branch (433:53): [True: 0, False: 1.30k]
  ------------------
  434|    296|      if (*start == UC('0')) {
  ------------------
  |  Branch (434:11): [True: 296, False: 0]
  ------------------
  435|    296|        digit_count--;
  436|    296|      }
  437|    296|      start++;
  438|    296|    }
  439|       |
  440|  1.30k|    if (digit_count > 19) {
  ------------------
  |  Branch (440:9): [True: 1.20k, False: 100]
  ------------------
  441|  1.20k|      answer.too_many_digits = true;
  442|       |      // Let us start again, this time, avoiding overflows.
  443|       |      // We don't need to check if is_integer, since we use the
  444|       |      // pre-tokenized spans from above.
  445|  1.20k|      i = 0;
  446|  1.20k|      p = answer.integer.ptr;
  447|  1.20k|      UC const *int_end = p + answer.integer.len();
  448|  1.20k|      const uint64_t minimal_nineteen_digit_integer{1000000000000000000};
  449|  17.8k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (449:14): [True: 17.3k, False: 518]
  |  Branch (449:54): [True: 16.6k, False: 688]
  ------------------
  450|  16.6k|        i = i * 10 + uint64_t(*p - UC('0'));
  451|  16.6k|        ++p;
  452|  16.6k|      }
  453|  1.20k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (453:11): [True: 518, False: 688]
  ------------------
  454|    518|        exponent = end_of_integer_part - p + exp_number;
  455|    688|      } else { // We have a value with a fractional component.
  456|    688|        p = answer.fraction.ptr;
  457|    688|        UC const *frac_end = p + answer.fraction.len();
  458|  7.09k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (458:16): [True: 6.40k, False: 688]
  |  Branch (458:56): [True: 6.40k, False: 0]
  ------------------
  459|  6.40k|          i = i * 10 + uint64_t(*p - UC('0'));
  460|  6.40k|          ++p;
  461|  6.40k|        }
  462|    688|        exponent = answer.fraction.ptr - p + exp_number;
  463|    688|      }
  464|       |      // We have now corrected both exponent and i, to a truncated value
  465|  1.20k|    }
  466|  1.30k|  }
  467|   414k|  answer.exponent = exponent;
  468|   414k|  answer.mantissa = i;
  469|   414k|  return answer;
  470|   414k|}
_ZN10fast_float10is_integerIDiEEbT_:
   34|   683k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   35|   683k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (35:12): [True: 135k, False: 547k]
  |  Branch (35:27): [True: 3.36k, False: 544k]
  ------------------
   36|   683k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiTnNSt3__19enable_ifIXntsr3std7is_sameIT_cEE5valueEiE4typeELi0EEEvRPKS3_S7_Rm:
  211|  2.44k|loop_parse_if_eight_digits(const UC *&p, const UC *const pend, uint64_t &i) {
  212|  2.44k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (212:7): [Folded - Ignored]
  ------------------
  213|  2.44k|    return;
  214|  2.44k|  }
  215|      0|  while ((std::distance(p, pend) >= 8) &&
  ------------------
  |  Branch (215:10): [True: 0, False: 0]
  ------------------
  216|      0|         simd_parse_if_eight_digits_unrolled(
  ------------------
  |  Branch (216:10): [True: 0, False: 0]
  ------------------
  217|      0|             p, i)) { // in rare cases, this will overflow, but that's ok
  218|      0|    p += 8;
  219|      0|  }
  220|      0|}
_ZN10fast_float27parse_eight_digits_unrolledIDiEEjPKT_:
  133|    126|parse_eight_digits_unrolled(UC const *chars) noexcept {
  134|    126|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (134:7): [Folded - Ignored]
  |  Branch (134:35): [Folded - Ignored]
  ------------------
  135|    126|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  136|    126|  }
  137|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  138|    126|}
_ZN10fast_float12read8_to_u64IDiEEmPKT_:
   48|    126|read8_to_u64(const UC *chars) {
   49|    126|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (49:7): [Folded - Ignored]
  |  Branch (49:35): [Folded - Ignored]
  ------------------
   50|    126|    uint64_t val = 0;
   51|  1.13k|    for (int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (51:21): [True: 1.00k, False: 126]
  ------------------
   52|  1.00k|      val |= uint64_t(uint8_t(*chars)) << (i * 8);
   53|  1.00k|      ++chars;
   54|  1.00k|    }
   55|    126|    return val;
   56|    126|  }
   57|      0|  uint64_t val;
   58|      0|  ::memcpy(&val, chars, sizeof(uint64_t));
   59|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   60|       |  // Need to read as-if the number was in little-endian order.
   61|       |  val = byteswap(val);
   62|       |#endif
   63|      0|  return val;
   64|    126|}

_ZN10fast_float6bigintC2Ev:
  425|  51.9k|  FASTFLOAT_CONSTEXPR20 bigint() : vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   45|   114k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  577|   179k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept { return small_mul(vec, y); }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   265k|                                            limb y) noexcept {
  276|   265k|  limb carry = 0;
  277|  1.09M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (277:26): [True: 832k, False: 265k]
  ------------------
  278|   832k|    vec[index] = scalar_mul(vec[index], y, carry);
  279|   832k|  }
  280|   265k|  if (carry != 0) {
  ------------------
  |  Branch (280:7): [True: 156k, False: 109k]
  ------------------
  281|   156k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   156k|  {                                                                            \
  |  |  179|   156k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 156k]
  |  |  ------------------
  |  |  180|   156k|      return false;                                                            \
  |  |  181|   156k|  }
  ------------------
  282|   156k|  }
  283|   265k|  return true;
  284|   265k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   75|  2.08M|  constexpr size_t len() const noexcept { return length; }
_ZN10fast_float10scalar_mulEmmRm:
  222|   832k|scalar_mul(limb x, limb y, limb &carry) noexcept {
  223|   832k|#ifdef FASTFLOAT_64BIT_LIMB
  224|   832k|#if defined(__SIZEOF_INT128__)
  225|       |  // GCC and clang both define it as an extension.
  226|   832k|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  227|   832k|  carry = limb(z >> limb_bits);
  228|   832k|  return limb(z);
  229|       |#else
  230|       |  // fallback, no native 128-bit integer multiplication with carry.
  231|       |  // on msvc, this optimizes identically, somehow.
  232|       |  value128 z = full_multiplication(x, y);
  233|       |  bool overflow;
  234|       |  z.low = scalar_add(z.low, carry, overflow);
  235|       |  z.high += uint64_t(overflow); // cannot overflow
  236|       |  carry = z.high;
  237|       |  return z.low;
  238|       |#endif
  239|       |#else
  240|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  241|       |  carry = limb(z >> limb_bits);
  242|       |  return limb(z);
  243|       |#endif
  244|   832k|}
_ZN10fast_float8stackvecILt62EEixEm:
   56|  2.28M|  FASTFLOAT_CONSTEXPR14 limb &operator[](size_t index) noexcept {
   57|  2.28M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  173|  2.28M|  { ((void)(x)); }
  ------------------
   58|  2.28M|    return data[index];
   59|  2.28M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   84|   218k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   85|   218k|    if (len() < capacity()) {
  ------------------
  |  Branch (85:9): [True: 218k, False: 0]
  ------------------
   86|   218k|      push_unchecked(value);
   87|   218k|      return true;
   88|   218k|    } else {
   89|      0|      return false;
   90|      0|    }
   91|   218k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   77|   255k|  constexpr size_t capacity() const noexcept { return size; }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   79|   266k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   80|   266k|    data[length] = value;
   81|   266k|    length++;
   82|   266k|  }
_ZN10fast_float6bigint3addEm:
  579|   179k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept { return small_add(vec, y); }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  268|   179k|small_add(stackvec<size> &vec, limb y) noexcept {
  269|   179k|  return small_add_from(vec, y, 0);
  270|   179k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  250|   179k|                                                 size_t start) noexcept {
  251|   179k|  size_t index = start;
  252|   179k|  limb carry = y;
  253|   179k|  bool overflow;
  254|   272k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (254:10): [True: 144k, False: 127k]
  |  Branch (254:24): [True: 92.6k, False: 51.9k]
  ------------------
  255|  92.6k|    vec[index] = scalar_add(vec[index], carry, overflow);
  256|  92.6k|    carry = limb(overflow);
  257|  92.6k|    index += 1;
  258|  92.6k|  }
  259|   179k|  if (carry != 0) {
  ------------------
  |  Branch (259:7): [True: 51.9k, False: 127k]
  ------------------
  260|  51.9k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  51.9k|  {                                                                            \
  |  |  179|  51.9k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 51.9k]
  |  |  ------------------
  |  |  180|  51.9k|      return false;                                                            \
  |  |  181|  51.9k|  }
  ------------------
  261|  51.9k|  }
  262|   179k|  return true;
  263|   179k|}
_ZN10fast_float10scalar_addEmmRb:
  202|   233k|scalar_add(limb x, limb y, bool &overflow) noexcept {
  203|   233k|  limb z;
  204|       |// gcc and clang
  205|   233k|#if defined(__has_builtin)
  206|   233k|#if __has_builtin(__builtin_add_overflow)
  207|   233k|  if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (207:7): [Folded - Ignored]
  ------------------
  208|   233k|    overflow = __builtin_add_overflow(x, y, &z);
  209|   233k|    return z;
  210|   233k|  }
  211|      0|#endif
  212|      0|#endif
  213|       |
  214|       |  // generic, this still optimizes correctly on MSVC.
  215|      0|  z = x + y;
  216|      0|  overflow = z < x;
  217|      0|  return z;
  218|   233k|}
_ZN10fast_float6bigint5pow10Ej:
  616|  3.68k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  617|  3.68k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  3.68k|  {                                                                            \
  |  |  179|  3.68k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 3.68k]
  |  |  ------------------
  |  |  180|  3.68k|      return false;                                                            \
  |  |  181|  3.68k|  }
  ------------------
  618|  3.68k|    return pow2(exp);
  619|  3.68k|  }
_ZN10fast_float6bigint4pow5Ej:
  585|  51.9k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  586|       |    // multiply by a power of 5
  587|  51.9k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  588|  51.9k|    limb_span large = limb_span(large_power_of_5, large_length);
  589|  55.4k|    while (exp >= large_step) {
  ------------------
  |  Branch (589:12): [True: 3.45k, False: 51.9k]
  ------------------
  590|  3.45k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  3.45k|  {                                                                            \
  |  |  179|  3.45k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 3.45k]
  |  |  ------------------
  |  |  180|  3.45k|      return false;                                                            \
  |  |  181|  3.45k|  }
  ------------------
  591|  3.45k|      exp -= large_step;
  592|  3.45k|    }
  593|  51.9k|#ifdef FASTFLOAT_64BIT_LIMB
  594|  51.9k|    uint32_t small_step = 27;
  595|  51.9k|    limb max_native = 7450580596923828125UL;
  596|       |#else
  597|       |    uint32_t small_step = 13;
  598|       |    limb max_native = 1220703125U;
  599|       |#endif
  600|  75.5k|    while (exp >= small_step) {
  ------------------
  |  Branch (600:12): [True: 23.5k, False: 51.9k]
  ------------------
  601|  23.5k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  23.5k|  {                                                                            \
  |  |  179|  23.5k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 23.5k]
  |  |  ------------------
  |  |  180|  23.5k|      return false;                                                            \
  |  |  181|  23.5k|  }
  ------------------
  602|  23.5k|      exp -= small_step;
  603|  23.5k|    }
  604|  51.9k|    if (exp != 0) {
  ------------------
  |  Branch (604:9): [True: 45.4k, False: 6.52k]
  ------------------
  605|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  606|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  607|       |      // except the workaround described there don't work here
  608|  45.4k|      FASTFLOAT_TRY(small_mul(
  ------------------
  |  |  178|  45.4k|  {                                                                            \
  |  |  179|  45.4k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 45.4k]
  |  |  ------------------
  |  |  180|  45.4k|      return false;                                                            \
  |  |  181|  45.4k|  }
  ------------------
  609|  45.4k|          vec, limb(((void)small_power_of_5[0], small_power_of_5[exp]))));
  610|  45.4k|    }
  611|       |
  612|  51.9k|    return true;
  613|  51.9k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  355|  3.45k|FASTFLOAT_CONSTEXPR20 bool large_mul(stackvec<size> &x, limb_span y) noexcept {
  356|  3.45k|  if (y.len() == 1) {
  ------------------
  |  Branch (356:7): [True: 0, False: 3.45k]
  ------------------
  357|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|  {                                                                            \
  |  |  179|      0|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  180|      0|      return false;                                                            \
  |  |  181|      0|  }
  ------------------
  358|  3.45k|  } else {
  359|  3.45k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  3.45k|  {                                                                            \
  |  |  179|  3.45k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 3.45k]
  |  |  ------------------
  |  |  180|  3.45k|      return false;                                                            \
  |  |  181|  3.45k|  }
  ------------------
  360|  3.45k|  }
  361|  3.45k|  return true;
  362|  3.45k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  327|  3.45k|FASTFLOAT_CONSTEXPR20 bool long_mul(stackvec<size> &x, limb_span y) noexcept {
  328|  3.45k|  limb_span xs = limb_span(x.data, x.len());
  329|  3.45k|  stackvec<size> z(xs);
  330|  3.45k|  limb_span zs = limb_span(z.data, z.len());
  331|       |
  332|  3.45k|  if (y.len() != 0) {
  ------------------
  |  Branch (332:7): [True: 3.45k, False: 0]
  ------------------
  333|  3.45k|    limb y0 = y[0];
  334|  3.45k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  3.45k|  {                                                                            \
  |  |  179|  3.45k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 3.45k]
  |  |  ------------------
  |  |  180|  3.45k|      return false;                                                            \
  |  |  181|  3.45k|  }
  ------------------
  335|  17.2k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (335:28): [True: 13.8k, False: 3.45k]
  ------------------
  336|  13.8k|      limb yi = y[index];
  337|  13.8k|      stackvec<size> zi;
  338|  13.8k|      if (yi != 0) {
  ------------------
  |  Branch (338:11): [True: 13.8k, False: 0]
  ------------------
  339|       |        // re-use the same buffer throughout
  340|  13.8k|        zi.set_len(0);
  341|  13.8k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  13.8k|  {                                                                            \
  |  |  179|  13.8k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 13.8k]
  |  |  ------------------
  |  |  180|  13.8k|      return false;                                                            \
  |  |  181|  13.8k|  }
  ------------------
  342|  13.8k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  13.8k|  {                                                                            \
  |  |  179|  13.8k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 13.8k]
  |  |  ------------------
  |  |  180|  13.8k|      return false;                                                            \
  |  |  181|  13.8k|  }
  ------------------
  343|  13.8k|        limb_span zis = limb_span(zi.data, zi.len());
  344|  13.8k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  13.8k|  {                                                                            \
  |  |  179|  13.8k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 13.8k]
  |  |  ------------------
  |  |  180|  13.8k|      return false;                                                            \
  |  |  181|  13.8k|  }
  ------------------
  345|  13.8k|      }
  346|  13.8k|    }
  347|  3.45k|  }
  348|       |
  349|  3.45k|  x.normalize();
  350|  3.45k|  return true;
  351|  3.45k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   52|  3.45k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   53|  3.45k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  168|  3.45k|  { ((void)(x)); }
  ------------------
   54|  3.45k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   72|  51.1k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   73|  51.1k|    length = uint16_t(len);
   74|  51.1k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
   99|  17.2k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  100|  17.2k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (100:9): [True: 17.2k, False: 0]
  ------------------
  101|  17.2k|      extend_unchecked(s);
  102|  17.2k|      return true;
  103|  17.2k|    } else {
  104|      0|      return false;
  105|      0|    }
  106|  17.2k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
   93|  17.2k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
   94|  17.2k|    limb *ptr = data + length;
   95|  17.2k|    std::copy_n(s.ptr, s.len(), ptr);
   96|  17.2k|    set_len(len() + s.len());
   97|  17.2k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  290|  13.8k|                                          size_t start) noexcept {
  291|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  292|       |  // if we can't get that current range.
  293|  13.8k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (293:7): [True: 0, False: 13.8k]
  |  Branch (293:26): [True: 13.5k, False: 278]
  ------------------
  294|  13.5k|    FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  13.5k|  {                                                                            \
  |  |  179|  13.5k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 13.5k]
  |  |  ------------------
  |  |  180|  13.5k|      return false;                                                            \
  |  |  181|  13.5k|  }
  ------------------
  295|  13.5k|  }
  296|       |
  297|  13.8k|  bool carry = false;
  298|   116k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (298:26): [True: 102k, False: 13.8k]
  ------------------
  299|   102k|    limb xi = x[index + start];
  300|   102k|    limb yi = y[index];
  301|   102k|    bool c1 = false;
  302|   102k|    bool c2 = false;
  303|   102k|    xi = scalar_add(xi, yi, c1);
  304|   102k|    if (carry) {
  ------------------
  |  Branch (304:9): [True: 38.6k, False: 63.9k]
  ------------------
  305|  38.6k|      xi = scalar_add(xi, 1, c2);
  306|  38.6k|    }
  307|   102k|    x[index + start] = xi;
  308|   102k|    carry = c1 | c2;
  309|   102k|  }
  310|       |
  311|       |  // handle overflow
  312|  13.8k|  if (carry) {
  ------------------
  |  Branch (312:7): [True: 0, False: 13.8k]
  ------------------
  313|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|  {                                                                            \
  |  |  179|      0|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  180|      0|      return false;                                                            \
  |  |  181|      0|  }
  ------------------
  314|      0|  }
  315|  13.8k|  return true;
  316|  13.8k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  123|  13.5k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  124|  13.5k|    if (new_len > capacity()) {
  ------------------
  |  Branch (124:9): [True: 0, False: 13.5k]
  ------------------
  125|      0|      return false;
  126|  13.5k|    } else {
  127|  13.5k|      resize_unchecked(new_len, value);
  128|  13.5k|      return true;
  129|  13.5k|    }
  130|  13.5k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  111|  13.5k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  112|  13.5k|    if (new_len > len()) {
  ------------------
  |  Branch (112:9): [True: 13.5k, False: 0]
  ------------------
  113|  13.5k|      size_t count = new_len - len();
  114|  13.5k|      limb *first = data + len();
  115|  13.5k|      limb *last = first + count;
  116|  13.5k|      ::std::fill(first, last, value);
  117|  13.5k|      set_len(new_len);
  118|  13.5k|    } else {
  119|      0|      set_len(new_len);
  120|      0|    }
  121|  13.5k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  144|  51.7k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  145|  51.7k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (145:12): [True: 51.7k, False: 0]
  |  Branch (145:25): [True: 0, False: 51.7k]
  ------------------
  146|      0|      length--;
  147|      0|    }
  148|  51.7k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   65|  62.3k|  FASTFLOAT_CONSTEXPR14 const limb &rindex(size_t index) const noexcept {
   66|  62.3k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  173|  62.3k|  { ((void)(x)); }
  ------------------
   67|  62.3k|    size_t rindex = length - index - 1;
   68|  62.3k|    return data[rindex];
   69|  62.3k|  }
_ZN10fast_float6bigint4pow2Ej:
  582|  51.8k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept { return shl(exp); }
_ZN10fast_float6bigint3shlEm:
  544|  51.8k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  545|  51.8k|    size_t rem = n % limb_bits;
  546|  51.8k|    size_t div = n / limb_bits;
  547|  51.8k|    if (rem != 0) {
  ------------------
  |  Branch (547:9): [True: 48.4k, False: 3.47k]
  ------------------
  548|  48.4k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  48.4k|  {                                                                            \
  |  |  179|  48.4k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 48.4k]
  |  |  ------------------
  |  |  180|  48.4k|      return false;                                                            \
  |  |  181|  48.4k|  }
  ------------------
  549|  48.4k|    }
  550|  51.8k|    if (div != 0) {
  ------------------
  |  Branch (550:9): [True: 6.48k, False: 45.3k]
  ------------------
  551|  6.48k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  6.48k|  {                                                                            \
  |  |  179|  6.48k|    if (!(x))                                                                  \
  |  |  ------------------
  |  |  |  Branch (179:9): [True: 0, False: 6.48k]
  |  |  ------------------
  |  |  180|  6.48k|      return false;                                                            \
  |  |  181|  6.48k|  }
  ------------------
  552|  6.48k|    }
  553|  51.8k|    return true;
  554|  51.8k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  497|  48.4k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  498|       |    // Internally, for each item, we shift left by n, and add the previous
  499|       |    // right shifted limb-bits.
  500|       |    // For example, we transform (for u8) shifted left 2, to:
  501|       |    //      b10100100 b01000010
  502|       |    //      b10 b10010001 b00001000
  503|  48.4k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  173|  48.4k|  { ((void)(x)); }
  ------------------
  504|  48.4k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  173|  48.4k|  { ((void)(x)); }
  ------------------
  505|       |
  506|  48.4k|    size_t shl = n;
  507|  48.4k|    size_t shr = limb_bits - shl;
  508|  48.4k|    limb prev = 0;
  509|   162k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (509:28): [True: 113k, False: 48.4k]
  ------------------
  510|   113k|      limb xi = vec[index];
  511|   113k|      vec[index] = (xi << shl) | (prev >> shr);
  512|   113k|      prev = xi;
  513|   113k|    }
  514|       |
  515|  48.4k|    limb carry = prev >> shr;
  516|  48.4k|    if (carry != 0) {
  ------------------
  |  Branch (516:9): [True: 10.5k, False: 37.8k]
  ------------------
  517|  10.5k|      return vec.try_push(carry);
  518|  10.5k|    }
  519|  37.8k|    return true;
  520|  48.4k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  523|  6.48k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  524|  6.48k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  173|  6.48k|  { ((void)(x)); }
  ------------------
  525|  6.48k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (525:9): [True: 0, False: 6.48k]
  ------------------
  526|      0|      return false;
  527|  6.48k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (527:16): [True: 6.48k, False: 0]
  ------------------
  528|       |      // move limbs
  529|  6.48k|      limb *dst = vec.data + n;
  530|  6.48k|      const limb *src = vec.data;
  531|  6.48k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  532|       |      // fill in empty limbs
  533|  6.48k|      limb *first = vec.data;
  534|  6.48k|      limb *last = first + n;
  535|  6.48k|      ::std::fill(first, last, 0);
  536|  6.48k|      vec.set_len(n + vec.len());
  537|  6.48k|      return true;
  538|  6.48k|    } else {
  539|      0|      return true;
  540|      0|    }
  541|  6.48k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   76|  10.1k|  constexpr bool is_empty() const noexcept { return length == 0; }
_ZNK10fast_float6bigint4hi64ERb:
  443|  3.68k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool &truncated) const noexcept {
  444|  3.68k|#ifdef FASTFLOAT_64BIT_LIMB
  445|  3.68k|    if (vec.len() == 0) {
  ------------------
  |  Branch (445:9): [True: 0, False: 3.68k]
  ------------------
  446|      0|      return empty_hi64(truncated);
  447|  3.68k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (447:16): [True: 952, False: 2.72k]
  ------------------
  448|    952|      return uint64_hi64(vec.rindex(0), truncated);
  449|  2.72k|    } else {
  450|  2.72k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  451|  2.72k|      truncated |= vec.nonzero(2);
  452|  2.72k|      return result;
  453|  2.72k|    }
  454|       |#else
  455|       |    if (vec.len() == 0) {
  456|       |      return empty_hi64(truncated);
  457|       |    } else if (vec.len() == 1) {
  458|       |      return uint32_hi64(vec.rindex(0), truncated);
  459|       |    } else if (vec.len() == 2) {
  460|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  461|       |    } else {
  462|       |      uint64_t result =
  463|       |          uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  464|       |      truncated |= vec.nonzero(3);
  465|       |      return result;
  466|       |    }
  467|       |#endif
  468|  3.68k|  }
_ZN10fast_float11uint64_hi64EmRb:
  158|    952|uint64_hi64(uint64_t r0, bool &truncated) noexcept {
  159|    952|  truncated = false;
  160|    952|  int shl = leading_zeroes(r0);
  161|    952|  return r0 << shl;
  162|    952|}
_ZN10fast_float11uint64_hi64EmmRb:
  165|  2.72k|uint64_hi64(uint64_t r0, uint64_t r1, bool &truncated) noexcept {
  166|  2.72k|  int shl = leading_zeroes(r0);
  167|  2.72k|  if (shl == 0) {
  ------------------
  |  Branch (167:7): [True: 36, False: 2.69k]
  ------------------
  168|     36|    truncated = r1 != 0;
  169|     36|    return r0;
  170|  2.69k|  } else {
  171|  2.69k|    int shr = 64 - shl;
  172|  2.69k|    truncated = (r1 << shl) != 0;
  173|  2.69k|    return (r0 << shl) | (r1 >> shr);
  174|  2.69k|  }
  175|  2.72k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  134|  2.72k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  135|  2.76k|    while (index < len()) {
  ------------------
  |  Branch (135:12): [True: 561, False: 2.20k]
  ------------------
  136|    561|      if (rindex(index) != 0) {
  ------------------
  |  Branch (136:11): [True: 523, False: 38]
  ------------------
  137|    523|        return true;
  138|    523|      }
  139|     38|      index++;
  140|     38|    }
  141|  2.20k|    return false;
  142|  2.72k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  572|  3.68k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  573|  3.68k|    int lz = ctlz();
  574|  3.68k|    return int(limb_bits * vec.len()) - lz;
  575|  3.68k|  }
_ZNK10fast_float6bigint4ctlzEv:
  557|  3.68k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  558|  3.68k|    if (vec.is_empty()) {
  ------------------
  |  Branch (558:9): [True: 0, False: 3.68k]
  ------------------
  559|      0|      return 0;
  560|  3.68k|    } else {
  561|  3.68k|#ifdef FASTFLOAT_64BIT_LIMB
  562|  3.68k|      return leading_zeroes(vec.rindex(0));
  563|       |#else
  564|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  565|       |      uint64_t r0 = vec.rindex(0);
  566|       |      return leading_zeroes(r0 << 32);
  567|       |#endif
  568|  3.68k|    }
  569|  3.68k|  }
_ZN10fast_float6bigintC2Em:
  431|  48.2k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value) : vec() {
  432|  48.2k|#ifdef FASTFLOAT_64BIT_LIMB
  433|  48.2k|    vec.push_unchecked(value);
  434|       |#else
  435|       |    vec.push_unchecked(uint32_t(value));
  436|       |    vec.push_unchecked(uint32_t(value >> 32));
  437|       |#endif
  438|  48.2k|    vec.normalize();
  439|  48.2k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  476|  48.2k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint &other) const noexcept {
  477|  48.2k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (477:9): [True: 0, False: 48.2k]
  ------------------
  478|      0|      return 1;
  479|  48.2k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (479:16): [True: 0, False: 48.2k]
  ------------------
  480|      0|      return -1;
  481|  48.2k|    } else {
  482|  94.7k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (482:38): [True: 90.9k, False: 3.80k]
  ------------------
  483|  90.9k|        limb xi = vec[index - 1];
  484|  90.9k|        limb yi = other.vec[index - 1];
  485|  90.9k|        if (xi > yi) {
  ------------------
  |  Branch (485:13): [True: 11.5k, False: 79.4k]
  ------------------
  486|  11.5k|          return 1;
  487|  79.4k|        } else if (xi < yi) {
  ------------------
  |  Branch (487:20): [True: 32.9k, False: 46.4k]
  ------------------
  488|  32.9k|          return -1;
  489|  32.9k|        }
  490|  90.9k|      }
  491|  3.80k|      return 0;
  492|  48.2k|    }
  493|  48.2k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   60|   181k|  FASTFLOAT_CONSTEXPR14 const limb &operator[](size_t index) const noexcept {
   61|   181k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  173|   181k|  { ((void)(x)); }
  ------------------
   62|   181k|    return data[index];
   63|   181k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
  103|   206k|compute_float(int64_t q, uint64_t w) noexcept {
  104|   206k|  adjusted_mantissa answer;
  105|   206k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (105:7): [True: 4.05k, False: 202k]
  |  Branch (105:19): [True: 1.22k, False: 200k]
  ------------------
  106|  5.27k|    answer.power2 = 0;
  107|  5.27k|    answer.mantissa = 0;
  108|       |    // result should be zero
  109|  5.27k|    return answer;
  110|  5.27k|  }
  111|   200k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (111:7): [True: 7.21k, False: 193k]
  ------------------
  112|       |    // we want to get infinity:
  113|  7.21k|    answer.power2 = binary::infinite_power();
  114|  7.21k|    answer.mantissa = 0;
  115|  7.21k|    return answer;
  116|  7.21k|  }
  117|       |  // At this point in time q is in [powers::smallest_power_of_five,
  118|       |  // powers::largest_power_of_five].
  119|       |
  120|       |  // We want the most significant bit of i to be 1. Shift if needed.
  121|   193k|  int lz = leading_zeroes(w);
  122|   193k|  w <<= lz;
  123|       |
  124|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  125|       |  // 1. We need the implicit bit
  126|       |  // 2. We need an extra bit for rounding purposes
  127|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small,
  128|       |  // requiring a shift)
  129|       |
  130|   193k|  value128 product =
  131|   193k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  132|       |  // The computed 'product' is always sufficient.
  133|       |  // Mathematical proof:
  134|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to
  135|       |  // appear) See script/mushtak_lemire.py
  136|       |
  137|       |  // The "compute_product_approximation" function can be slightly slower than a
  138|       |  // branchless approach: value128 product = compute_product(q, w); but in
  139|       |  // practice, we can win big with the compute_product_approximation if its
  140|       |  // additional branch is easily predicted. Which is best is data specific.
  141|   193k|  int upperbit = int(product.high >> 63);
  142|   193k|  int shift = upperbit + 64 - binary::mantissa_explicit_bits() - 3;
  143|       |
  144|   193k|  answer.mantissa = product.high >> shift;
  145|       |
  146|   193k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz -
  147|   193k|                          binary::minimum_exponent());
  148|   193k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (148:7): [True: 1.06k, False: 192k]
  ------------------
  149|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  150|  1.06k|    if (-answer.power2 + 1 >=
  ------------------
  |  Branch (150:9): [True: 88, False: 974]
  ------------------
  151|  1.06k|        64) { // if we have more than 64 bits below the minimum exponent, you
  152|       |              // have a zero for sure.
  153|     88|      answer.power2 = 0;
  154|     88|      answer.mantissa = 0;
  155|       |      // result should be zero
  156|     88|      return answer;
  157|     88|    }
  158|       |    // next line is safe because -answer.power2 + 1 < 64
  159|    974|    answer.mantissa >>= -answer.power2 + 1;
  160|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  161|       |    // "round-to-even" only occurs for powers close to 0.
  162|    974|    answer.mantissa += (answer.mantissa & 1); // round up
  163|    974|    answer.mantissa >>= 1;
  164|       |    // There is a weird scenario where we don't have a subnormal but just.
  165|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  166|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  167|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  168|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  169|       |    // subnormal, but we can only know this after rounding.
  170|       |    // So we only declare a subnormal if we are smaller than the threshold.
  171|    974|    answer.power2 =
  172|    974|        (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits()))
  ------------------
  |  Branch (172:9): [True: 974, False: 0]
  ------------------
  173|    974|            ? 0
  174|    974|            : 1;
  175|    974|    return answer;
  176|  1.06k|  }
  177|       |
  178|       |  // usually, we round *up*, but if we fall right in between and and we have an
  179|       |  // even basis, we need to round down
  180|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  181|   192k|  if ((product.low <= 1) && (q >= binary::min_exponent_round_to_even()) &&
  ------------------
  |  Branch (181:7): [True: 66.4k, False: 126k]
  |  Branch (181:29): [True: 64.7k, False: 1.74k]
  ------------------
  182|   192k|      (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (182:7): [True: 58.8k, False: 5.92k]
  ------------------
  183|   192k|      ((answer.mantissa & 3) == 1)) { // we may fall between two floats!
  ------------------
  |  Branch (183:7): [True: 8.08k, False: 50.7k]
  ------------------
  184|       |    // To be in-between two floats we need that in doing
  185|       |    //   answer.mantissa = product.high >> (upperbit + 64 -
  186|       |    //   binary::mantissa_explicit_bits() - 3);
  187|       |    // ... we dropped out only zeroes. But if this happened, then we can go
  188|       |    // back!!!
  189|  8.08k|    if ((answer.mantissa << shift) == product.high) {
  ------------------
  |  Branch (189:9): [True: 4.01k, False: 4.06k]
  ------------------
  190|  4.01k|      answer.mantissa &= ~uint64_t(1); // flip it so that we do not round up
  191|  4.01k|    }
  192|  8.08k|  }
  193|       |
  194|   192k|  answer.mantissa += (answer.mantissa & 1); // round up
  195|   192k|  answer.mantissa >>= 1;
  196|   192k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (196:7): [True: 12.2k, False: 180k]
  ------------------
  197|  12.2k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  198|  12.2k|    answer.power2++; // undo previous addition
  199|  12.2k|  }
  200|       |
  201|   192k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  202|   192k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (202:7): [True: 1.10k, False: 191k]
  ------------------
  203|  1.10k|    answer.power2 = binary::infinite_power();
  204|  1.10k|    answer.mantissa = 0;
  205|  1.10k|  }
  206|   192k|  return answer;
  207|   193k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   22|   215k|compute_product_approximation(int64_t q, uint64_t w) {
   23|   215k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   24|       |  // For small values of q, e.g., q in [0,27], the answer is always exact
   25|       |  // because The line value128 firstproduct = full_multiplication(w,
   26|       |  // power_of_five_128[index]); gives the exact answer.
   27|   215k|  value128 firstproduct =
   28|   215k|      full_multiplication(w, powers::power_of_five_128[index]);
   29|   215k|  static_assert((bit_precision >= 0) && (bit_precision <= 64),
   30|   215k|                " precision should  be in (0,64]");
   31|   215k|  constexpr uint64_t precision_mask =
   32|   215k|      (bit_precision < 64) ? (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
  ------------------
  |  Branch (32:7): [Folded - Ignored]
  ------------------
   33|   215k|                           : uint64_t(0xFFFFFFFFFFFFFFFF);
   34|   215k|  if ((firstproduct.high & precision_mask) ==
  ------------------
  |  Branch (34:7): [True: 42.3k, False: 173k]
  ------------------
   35|   215k|      precision_mask) { // could further guard with  (lower + w < lower)
   36|       |    // regarding the second product, we only need secondproduct.high, but our
   37|       |    // expectation is that the compiler will optimize this extra work away if
   38|       |    // needed.
   39|  42.3k|    value128 secondproduct =
   40|  42.3k|        full_multiplication(w, powers::power_of_five_128[index + 1]);
   41|  42.3k|    firstproduct.low += secondproduct.high;
   42|  42.3k|    if (secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (42:9): [True: 30.0k, False: 12.2k]
  ------------------
   43|  30.0k|      firstproduct.high++;
   44|  30.0k|    }
   45|  42.3k|  }
   46|   215k|  return firstproduct;
   47|   215k|}
_ZN10fast_float6detail5powerEi:
   65|   426k|constexpr fastfloat_really_inline int32_t power(int32_t q) noexcept {
   66|   426k|  return (((152170 + 65536) * q) >> 16) + 63;
   67|   426k|}
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   88|  21.8k|compute_error(int64_t q, uint64_t w) noexcept {
   89|  21.8k|  int lz = leading_zeroes(w);
   90|  21.8k|  w <<= lz;
   91|  21.8k|  value128 product =
   92|  21.8k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   93|  21.8k|  return compute_error_scaled<binary>(q, product.high, lz);
   94|  21.8k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   74|  21.8k|compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept {
   75|  21.8k|  int hilz = int(w >> 63) ^ 1;
   76|  21.8k|  adjusted_mantissa answer;
   77|  21.8k|  answer.mantissa = w << hilz;
   78|  21.8k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   79|  21.8k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 +
   80|  21.8k|                          invalid_am_bias);
   81|  21.8k|  return answer;
   82|  21.8k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
  103|   188k|compute_float(int64_t q, uint64_t w) noexcept {
  104|   188k|  adjusted_mantissa answer;
  105|   188k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (105:7): [True: 3.72k, False: 185k]
  |  Branch (105:19): [True: 337, False: 184k]
  ------------------
  106|  4.05k|    answer.power2 = 0;
  107|  4.05k|    answer.mantissa = 0;
  108|       |    // result should be zero
  109|  4.05k|    return answer;
  110|  4.05k|  }
  111|   184k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (111:7): [True: 3.68k, False: 181k]
  ------------------
  112|       |    // we want to get infinity:
  113|  3.68k|    answer.power2 = binary::infinite_power();
  114|  3.68k|    answer.mantissa = 0;
  115|  3.68k|    return answer;
  116|  3.68k|  }
  117|       |  // At this point in time q is in [powers::smallest_power_of_five,
  118|       |  // powers::largest_power_of_five].
  119|       |
  120|       |  // We want the most significant bit of i to be 1. Shift if needed.
  121|   181k|  int lz = leading_zeroes(w);
  122|   181k|  w <<= lz;
  123|       |
  124|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  125|       |  // 1. We need the implicit bit
  126|       |  // 2. We need an extra bit for rounding purposes
  127|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small,
  128|       |  // requiring a shift)
  129|       |
  130|   181k|  value128 product =
  131|   181k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  132|       |  // The computed 'product' is always sufficient.
  133|       |  // Mathematical proof:
  134|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to
  135|       |  // appear) See script/mushtak_lemire.py
  136|       |
  137|       |  // The "compute_product_approximation" function can be slightly slower than a
  138|       |  // branchless approach: value128 product = compute_product(q, w); but in
  139|       |  // practice, we can win big with the compute_product_approximation if its
  140|       |  // additional branch is easily predicted. Which is best is data specific.
  141|   181k|  int upperbit = int(product.high >> 63);
  142|   181k|  int shift = upperbit + 64 - binary::mantissa_explicit_bits() - 3;
  143|       |
  144|   181k|  answer.mantissa = product.high >> shift;
  145|       |
  146|   181k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz -
  147|   181k|                          binary::minimum_exponent());
  148|   181k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (148:7): [True: 2.94k, False: 178k]
  ------------------
  149|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  150|  2.94k|    if (-answer.power2 + 1 >=
  ------------------
  |  Branch (150:9): [True: 106, False: 2.83k]
  ------------------
  151|  2.94k|        64) { // if we have more than 64 bits below the minimum exponent, you
  152|       |              // have a zero for sure.
  153|    106|      answer.power2 = 0;
  154|    106|      answer.mantissa = 0;
  155|       |      // result should be zero
  156|    106|      return answer;
  157|    106|    }
  158|       |    // next line is safe because -answer.power2 + 1 < 64
  159|  2.83k|    answer.mantissa >>= -answer.power2 + 1;
  160|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  161|       |    // "round-to-even" only occurs for powers close to 0.
  162|  2.83k|    answer.mantissa += (answer.mantissa & 1); // round up
  163|  2.83k|    answer.mantissa >>= 1;
  164|       |    // There is a weird scenario where we don't have a subnormal but just.
  165|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  166|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  167|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  168|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  169|       |    // subnormal, but we can only know this after rounding.
  170|       |    // So we only declare a subnormal if we are smaller than the threshold.
  171|  2.83k|    answer.power2 =
  172|  2.83k|        (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits()))
  ------------------
  |  Branch (172:9): [True: 2.83k, False: 0]
  ------------------
  173|  2.83k|            ? 0
  174|  2.83k|            : 1;
  175|  2.83k|    return answer;
  176|  2.94k|  }
  177|       |
  178|       |  // usually, we round *up*, but if we fall right in between and and we have an
  179|       |  // even basis, we need to round down
  180|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  181|   178k|  if ((product.low <= 1) && (q >= binary::min_exponent_round_to_even()) &&
  ------------------
  |  Branch (181:7): [True: 54.0k, False: 124k]
  |  Branch (181:29): [True: 29.9k, False: 24.1k]
  ------------------
  182|   178k|      (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (182:7): [True: 24.9k, False: 4.99k]
  ------------------
  183|   178k|      ((answer.mantissa & 3) == 1)) { // we may fall between two floats!
  ------------------
  |  Branch (183:7): [True: 5.12k, False: 19.7k]
  ------------------
  184|       |    // To be in-between two floats we need that in doing
  185|       |    //   answer.mantissa = product.high >> (upperbit + 64 -
  186|       |    //   binary::mantissa_explicit_bits() - 3);
  187|       |    // ... we dropped out only zeroes. But if this happened, then we can go
  188|       |    // back!!!
  189|  5.12k|    if ((answer.mantissa << shift) == product.high) {
  ------------------
  |  Branch (189:9): [True: 3.99k, False: 1.13k]
  ------------------
  190|  3.99k|      answer.mantissa &= ~uint64_t(1); // flip it so that we do not round up
  191|  3.99k|    }
  192|  5.12k|  }
  193|       |
  194|   178k|  answer.mantissa += (answer.mantissa & 1); // round up
  195|   178k|  answer.mantissa >>= 1;
  196|   178k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (196:7): [True: 11.6k, False: 166k]
  ------------------
  197|  11.6k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  198|  11.6k|    answer.power2++; // undo previous addition
  199|  11.6k|  }
  200|       |
  201|   178k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  202|   178k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (202:7): [True: 244, False: 178k]
  ------------------
  203|    244|    answer.power2 = binary::infinite_power();
  204|    244|    answer.mantissa = 0;
  205|    244|  }
  206|   178k|  return answer;
  207|   181k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   22|   211k|compute_product_approximation(int64_t q, uint64_t w) {
   23|   211k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   24|       |  // For small values of q, e.g., q in [0,27], the answer is always exact
   25|       |  // because The line value128 firstproduct = full_multiplication(w,
   26|       |  // power_of_five_128[index]); gives the exact answer.
   27|   211k|  value128 firstproduct =
   28|   211k|      full_multiplication(w, powers::power_of_five_128[index]);
   29|   211k|  static_assert((bit_precision >= 0) && (bit_precision <= 64),
   30|   211k|                " precision should  be in (0,64]");
   31|   211k|  constexpr uint64_t precision_mask =
   32|   211k|      (bit_precision < 64) ? (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
  ------------------
  |  Branch (32:7): [Folded - Ignored]
  ------------------
   33|   211k|                           : uint64_t(0xFFFFFFFFFFFFFFFF);
   34|   211k|  if ((firstproduct.high & precision_mask) ==
  ------------------
  |  Branch (34:7): [True: 82.5k, False: 128k]
  ------------------
   35|   211k|      precision_mask) { // could further guard with  (lower + w < lower)
   36|       |    // regarding the second product, we only need secondproduct.high, but our
   37|       |    // expectation is that the compiler will optimize this extra work away if
   38|       |    // needed.
   39|  82.5k|    value128 secondproduct =
   40|  82.5k|        full_multiplication(w, powers::power_of_five_128[index + 1]);
   41|  82.5k|    firstproduct.low += secondproduct.high;
   42|  82.5k|    if (secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (42:9): [True: 27.2k, False: 55.2k]
  ------------------
   43|  27.2k|      firstproduct.high++;
   44|  27.2k|    }
   45|  82.5k|  }
   46|   211k|  return firstproduct;
   47|   211k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   88|  30.1k|compute_error(int64_t q, uint64_t w) noexcept {
   89|  30.1k|  int lz = leading_zeroes(w);
   90|  30.1k|  w <<= lz;
   91|  30.1k|  value128 product =
   92|  30.1k|      compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   93|  30.1k|  return compute_error_scaled<binary>(q, product.high, lz);
   94|  30.1k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   74|  30.1k|compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept {
   75|  30.1k|  int hilz = int(w >> 63) ^ 1;
   76|  30.1k|  adjusted_mantissa answer;
   77|  30.1k|  answer.mantissa = w << hilz;
   78|  30.1k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   79|  30.1k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 +
   80|  30.1k|                          invalid_am_bias);
   81|  30.1k|  return answer;
   82|  30.1k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  435|  21.8k|digit_comp(parsed_number_string_t<UC> &num, adjusted_mantissa am) noexcept {
  436|       |  // remove the invalid exponent bias
  437|  21.8k|  am.power2 -= invalid_am_bias;
  438|       |
  439|  21.8k|  int32_t sci_exp = scientific_exponent(num);
  440|  21.8k|  size_t max_digits = binary_format<T>::max_digits();
  441|  21.8k|  size_t digits = 0;
  442|  21.8k|  bigint bigmant;
  443|  21.8k|  parse_mantissa(bigmant, num, max_digits, digits);
  444|       |  // can't underflow, since digits is at most max_digits.
  445|  21.8k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  446|  21.8k|  if (exponent >= 0) {
  ------------------
  |  Branch (446:7): [True: 514, False: 21.3k]
  ------------------
  447|    514|    return positive_digit_comp<T>(bigmant, exponent);
  448|  21.3k|  } else {
  449|  21.3k|    return negative_digit_comp<T>(bigmant, am, exponent);
  450|  21.3k|  }
  451|  21.8k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   43|  51.8k|scientific_exponent(parsed_number_string_t<UC> &num) noexcept {
   44|  51.8k|  uint64_t mantissa = num.mantissa;
   45|  51.8k|  int32_t exponent = int32_t(num.exponent);
   46|   259k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (46:10): [True: 207k, False: 51.8k]
  ------------------
   47|   207k|    mantissa /= 10000;
   48|   207k|    exponent += 4;
   49|   207k|  }
   50|   103k|  while (mantissa >= 100) {
  ------------------
  |  Branch (50:10): [True: 51.8k, False: 51.8k]
  ------------------
   51|  51.8k|    mantissa /= 100;
   52|  51.8k|    exponent += 2;
   53|  51.8k|  }
   54|  51.8k|  while (mantissa >= 10) {
  ------------------
  |  Branch (54:10): [True: 0, False: 51.8k]
  ------------------
   55|      0|    mantissa /= 10;
   56|      0|    exponent += 1;
   57|      0|  }
   58|  51.8k|  return exponent;
   59|  51.8k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  260|  51.8k|               size_t max_digits, size_t &digits) noexcept {
  261|       |  // try to minimize the number of big integer and scalar multiplication.
  262|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  263|       |  // scalar value (9 or 19 digits) for each step.
  264|  51.8k|  size_t counter = 0;
  265|  51.8k|  digits = 0;
  266|  51.8k|  limb value = 0;
  267|  51.8k|#ifdef FASTFLOAT_64BIT_LIMB
  268|  51.8k|  size_t step = 19;
  269|       |#else
  270|       |  size_t step = 9;
  271|       |#endif
  272|       |
  273|       |  // process all integer digits.
  274|  51.8k|  UC const *p = num.integer.ptr;
  275|  51.8k|  UC const *pend = p + num.integer.len();
  276|  51.8k|  skip_zeros(p, pend);
  277|       |  // process all digits, in increments of step per loop
  278|   116k|  while (p != pend) {
  ------------------
  |  Branch (278:10): [True: 64.6k, False: 51.5k]
  ------------------
  279|   109k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (279:12): [True: 58.3k, False: 51.6k]
  |  Branch (279:45): [True: 45.5k, False: 12.8k]
  ------------------
  280|   109k|           (max_digits - digits >= 8)) {
  ------------------
  |  Branch (280:12): [True: 45.2k, False: 267]
  ------------------
  281|  45.2k|      parse_eight_digits(p, value, counter, digits);
  282|  45.2k|    }
  283|   203k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (283:12): [True: 188k, False: 15.1k]
  |  Branch (283:30): [True: 139k, False: 49.2k]
  |  Branch (283:43): [True: 139k, False: 267]
  ------------------
  284|   139k|      parse_one_digit(p, value, counter, digits);
  285|   139k|    }
  286|  64.6k|    if (digits == max_digits) {
  ------------------
  |  Branch (286:9): [True: 267, False: 64.4k]
  ------------------
  287|       |      // add the temporary value, then check if we've truncated any digits
  288|    267|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  289|    267|      bool truncated = is_truncated(p, pend);
  290|    267|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (290:11): [True: 231, False: 36]
  ------------------
  291|    231|        truncated |= is_truncated(num.fraction);
  292|    231|      }
  293|    267|      if (truncated) {
  ------------------
  |  Branch (293:11): [True: 161, False: 106]
  ------------------
  294|    161|        round_up_bigint(result, digits);
  295|    161|      }
  296|    267|      return;
  297|  64.4k|    } else {
  298|  64.4k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  299|  64.4k|      counter = 0;
  300|  64.4k|      value = 0;
  301|  64.4k|    }
  302|  64.6k|  }
  303|       |
  304|       |  // add our fraction digits, if they're available.
  305|  51.5k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (305:7): [True: 48.3k, False: 3.27k]
  ------------------
  306|  48.3k|    p = num.fraction.ptr;
  307|  48.3k|    pend = p + num.fraction.len();
  308|  48.3k|    if (digits == 0) {
  ------------------
  |  Branch (308:9): [True: 2.30k, False: 46.0k]
  ------------------
  309|  2.30k|      skip_zeros(p, pend);
  310|  2.30k|    }
  311|       |    // process all digits, in increments of step per loop
  312|   157k|    while (p != pend) {
  ------------------
  |  Branch (312:12): [True: 112k, False: 45.3k]
  ------------------
  313|   270k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (313:14): [True: 212k, False: 57.9k]
  |  Branch (313:47): [True: 159k, False: 52.9k]
  ------------------
  314|   270k|             (max_digits - digits >= 8)) {
  ------------------
  |  Branch (314:14): [True: 157k, False: 1.44k]
  ------------------
  315|   157k|        parse_eight_digits(p, value, counter, digits);
  316|   157k|      }
  317|   467k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (317:14): [True: 402k, False: 65.7k]
  |  Branch (317:32): [True: 357k, False: 44.2k]
  |  Branch (317:45): [True: 355k, False: 2.34k]
  ------------------
  318|   355k|        parse_one_digit(p, value, counter, digits);
  319|   355k|      }
  320|   112k|      if (digits == max_digits) {
  ------------------
  |  Branch (320:11): [True: 2.98k, False: 109k]
  ------------------
  321|       |        // add the temporary value, then check if we've truncated any digits
  322|  2.98k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  323|  2.98k|        bool truncated = is_truncated(p, pend);
  324|  2.98k|        if (truncated) {
  ------------------
  |  Branch (324:13): [True: 2.10k, False: 881]
  ------------------
  325|  2.10k|          round_up_bigint(result, digits);
  326|  2.10k|        }
  327|  2.98k|        return;
  328|   109k|      } else {
  329|   109k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  330|   109k|        counter = 0;
  331|   109k|        value = 0;
  332|   109k|      }
  333|   112k|    }
  334|  48.3k|  }
  335|       |
  336|  48.6k|  if (counter != 0) {
  ------------------
  |  Branch (336:7): [True: 0, False: 48.6k]
  ------------------
  337|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  338|      0|  }
  339|  48.6k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  175|  54.1k|skip_zeros(UC const *&first, UC const *last) noexcept {
  176|  54.1k|  uint64_t val;
  177|  65.8k|  while (!cpp20_and_in_constexpr() &&
  ------------------
  |  Branch (177:10): [Folded - Ignored]
  ------------------
  178|  65.8k|         std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (178:10): [True: 31.3k, False: 34.5k]
  ------------------
  179|  31.3k|    ::memcpy(&val, first, sizeof(uint64_t));
  180|  31.3k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (180:9): [True: 19.6k, False: 11.6k]
  ------------------
  181|  19.6k|      break;
  182|  19.6k|    }
  183|  11.6k|    first += int_cmp_len<UC>();
  184|  11.6k|  }
  185|   103k|  while (first != last) {
  ------------------
  |  Branch (185:10): [True: 100k, False: 2.30k]
  ------------------
  186|   100k|    if (*first != UC('0')) {
  ------------------
  |  Branch (186:9): [True: 51.8k, False: 49.1k]
  ------------------
  187|  51.8k|      break;
  188|  51.8k|    }
  189|  49.1k|    first++;
  190|  49.1k|  }
  191|  54.1k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  225|   202k|                   size_t &count) noexcept {
  226|   202k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  227|   202k|  p += 8;
  228|   202k|  counter += 8;
  229|   202k|  count += 8;
  230|   202k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  235|   494k|                size_t &count) noexcept {
  236|   494k|  value = value * 10 + limb(*p - UC('0'));
  237|   494k|  p++;
  238|   494k|  counter++;
  239|   494k|  count++;
  240|   494k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  243|   179k|add_native(bigint &big, limb power, limb value) noexcept {
  244|   179k|  big.mul(power);
  245|   179k|  big.add(value);
  246|   179k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  197|  3.48k|is_truncated(UC const *first, UC const *last) noexcept {
  198|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  199|  3.48k|  uint64_t val;
  200|  6.53k|  while (!cpp20_and_in_constexpr() &&
  ------------------
  |  Branch (200:10): [Folded - Ignored]
  ------------------
  201|  6.53k|         std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (201:10): [True: 4.17k, False: 2.35k]
  ------------------
  202|  4.17k|    ::memcpy(&val, first, sizeof(uint64_t));
  203|  4.17k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (203:9): [True: 1.12k, False: 3.04k]
  ------------------
  204|  1.12k|      return true;
  205|  1.12k|    }
  206|  3.04k|    first += int_cmp_len<UC>();
  207|  3.04k|  }
  208|  3.91k|  while (first != last) {
  ------------------
  |  Branch (208:10): [True: 2.77k, False: 1.13k]
  ------------------
  209|  2.77k|    if (*first != UC('0')) {
  ------------------
  |  Branch (209:9): [True: 1.22k, False: 1.55k]
  ------------------
  210|  1.22k|      return true;
  211|  1.22k|    }
  212|  1.55k|    ++first;
  213|  1.55k|  }
  214|  1.13k|  return false;
  215|  2.35k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  218|    231|is_truncated(span<const UC> s) noexcept {
  219|    231|  return is_truncated(s.ptr, s.ptr + s.len());
  220|    231|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  249|  2.26k|round_up_bigint(bigint &big, size_t &count) noexcept {
  250|       |  // need to round-up the digits, but need to avoid rounding
  251|       |  // ....9999 to ...10000, which could cause a false halfway point.
  252|  2.26k|  add_native(big, 10, 1);
  253|  2.26k|  count++;
  254|  2.26k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  343|    514|positive_digit_comp(bigint &bigmant, int32_t exponent) noexcept {
  344|    514|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  168|    514|  { ((void)(x)); }
  ------------------
  345|    514|  adjusted_mantissa answer;
  346|    514|  bool truncated;
  347|    514|  answer.mantissa = bigmant.hi64(truncated);
  348|    514|  int bias = binary_format<T>::mantissa_explicit_bits() -
  349|    514|             binary_format<T>::minimum_exponent();
  350|    514|  answer.power2 = bigmant.bit_length() - 64 + bias;
  351|       |
  352|    514|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  353|    514|    round_nearest_tie_even(
  354|    514|        a, shift,
  355|    514|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|    514|          return is_above || (is_halfway && truncated) ||
  357|    514|                 (is_odd && is_halfway);
  358|    514|        });
  359|    514|  });
  360|       |
  361|    514|  return answer;
  362|    514|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
  110|    514|                                                         callback cb) noexcept {
  111|    514|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|    514|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 514]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|    514|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|    514|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 514]
  ------------------
  129|    514|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|    514|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|    514|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 514]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|    514|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  352|    514|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  353|    514|    round_nearest_tie_even(
  354|    514|        a, shift,
  355|    514|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|    514|          return is_above || (is_halfway && truncated) ||
  357|    514|                 (is_odd && is_halfway);
  358|    514|        });
  359|    514|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  145|    514|                       callback cb) noexcept {
  146|    514|  const uint64_t mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 514]
  ------------------
  147|    514|  const uint64_t halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 514]
  ------------------
  148|    514|  uint64_t truncated_bits = am.mantissa & mask;
  149|    514|  bool is_above = truncated_bits > halfway;
  150|    514|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|    514|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 514]
  ------------------
  154|      0|    am.mantissa = 0;
  155|    514|  } else {
  156|    514|    am.mantissa >>= shift;
  157|    514|  }
  158|    514|  am.power2 += shift;
  159|       |
  160|    514|  bool is_odd = (am.mantissa & 1) == 1;
  161|    514|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|    514|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  355|    514|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|    514|          return is_above || (is_halfway && truncated) ||
  ------------------
  |  Branch (356:18): [True: 74, False: 440]
  |  Branch (356:31): [True: 348, False: 92]
  |  Branch (356:45): [True: 58, False: 290]
  ------------------
  357|    514|                 (is_odd && is_halfway);
  ------------------
  |  Branch (357:19): [True: 56, False: 326]
  |  Branch (357:29): [True: 32, False: 24]
  ------------------
  358|    514|        });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  371|  21.3k|    bigint &bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  372|  21.3k|  bigint &real_digits = bigmant;
  373|  21.3k|  int32_t real_exp = exponent;
  374|       |
  375|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  376|  21.3k|  adjusted_mantissa am_b = am;
  377|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with
  378|       |  // -Wnoexcept-type.
  379|  21.3k|  round<T>(am_b,
  380|  21.3k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
  381|  21.3k|  T b;
  382|  21.3k|  to_float(false, am_b, b);
  383|  21.3k|  adjusted_mantissa theor = to_extended_halfway(b);
  384|  21.3k|  bigint theor_digits(theor.mantissa);
  385|  21.3k|  int32_t theor_exp = theor.power2;
  386|       |
  387|       |  // scale real digits and theor digits to be same power.
  388|  21.3k|  int32_t pow2_exp = theor_exp - real_exp;
  389|  21.3k|  uint32_t pow5_exp = uint32_t(-real_exp);
  390|  21.3k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (390:7): [True: 21.3k, False: 0]
  ------------------
  391|  21.3k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  168|  21.3k|  { ((void)(x)); }
  ------------------
  392|  21.3k|  }
  393|  21.3k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (393:7): [True: 21.3k, False: 0]
  ------------------
  394|  21.3k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  168|  21.3k|  { ((void)(x)); }
  ------------------
  395|  21.3k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (395:14): [True: 0, False: 0]
  ------------------
  396|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  168|      0|  { ((void)(x)); }
  ------------------
  397|      0|  }
  398|       |
  399|       |  // compare digits, and use it to director rounding
  400|  21.3k|  int ord = real_digits.compare(theor_digits);
  401|  21.3k|  adjusted_mantissa answer = am;
  402|  21.3k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  403|  21.3k|    round_nearest_tie_even(
  404|  21.3k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  21.3k|          (void)_;  // not needed, since we've done our comparison
  406|  21.3k|          (void)__; // not needed, since we've done our comparison
  407|  21.3k|          if (ord > 0) {
  408|  21.3k|            return true;
  409|  21.3k|          } else if (ord < 0) {
  410|  21.3k|            return false;
  411|  21.3k|          } else {
  412|  21.3k|            return is_odd;
  413|  21.3k|          }
  414|  21.3k|        });
  415|  21.3k|  });
  416|       |
  417|  21.3k|  return answer;
  418|  21.3k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
  110|  21.3k|                                                         callback cb) noexcept {
  111|  21.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  21.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 21.3k]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  21.3k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  21.3k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 21.3k]
  ------------------
  129|  21.3k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  21.3k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  21.3k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 21.3k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  21.3k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  380|  21.3k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  165|  48.2k|round_down(adjusted_mantissa &am, int32_t shift) noexcept {
  166|  48.2k|  if (shift == 64) {
  ------------------
  |  Branch (166:7): [True: 0, False: 48.2k]
  ------------------
  167|      0|    am.mantissa = 0;
  168|  48.2k|  } else {
  169|  48.2k|    am.mantissa >>= shift;
  170|  48.2k|  }
  171|  48.2k|  am.power2 += shift;
  172|  48.2k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   99|  21.3k|to_extended_halfway(T value) noexcept {
  100|  21.3k|  adjusted_mantissa am = to_extended(value);
  101|  21.3k|  am.mantissa <<= 1;
  102|  21.3k|  am.mantissa += 1;
  103|  21.3k|  am.power2 -= 1;
  104|  21.3k|  return am;
  105|  21.3k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   64|  21.3k|to_extended(T value) noexcept {
   65|  21.3k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   66|  21.3k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   67|  21.3k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   68|  21.3k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   69|       |
   70|  21.3k|  adjusted_mantissa am;
   71|  21.3k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() -
   72|  21.3k|                 binary_format<T>::minimum_exponent();
   73|  21.3k|  equiv_uint bits;
   74|       |#if FASTFLOAT_HAS_BIT_CAST
   75|       |  bits = std::bit_cast<equiv_uint>(value);
   76|       |#else
   77|  21.3k|  ::memcpy(&bits, &value, sizeof(T));
   78|  21.3k|#endif
   79|  21.3k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (79:7): [True: 0, False: 21.3k]
  ------------------
   80|       |    // denormal
   81|      0|    am.power2 = 1 - bias;
   82|      0|    am.mantissa = bits & mantissa_mask;
   83|  21.3k|  } else {
   84|       |    // normal
   85|  21.3k|    am.power2 = int32_t((bits & exponent_mask) >>
   86|  21.3k|                        binary_format<T>::mantissa_explicit_bits());
   87|  21.3k|    am.power2 -= bias;
   88|  21.3k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   89|  21.3k|  }
   90|       |
   91|  21.3k|  return am;
   92|  21.3k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
  110|  21.3k|                                                         callback cb) noexcept {
  111|  21.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  21.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 21.3k]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  21.3k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  21.3k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 21.3k]
  ------------------
  129|  21.3k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  21.3k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  21.3k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 21.3k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  21.3k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  402|  21.3k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  403|  21.3k|    round_nearest_tie_even(
  404|  21.3k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  21.3k|          (void)_;  // not needed, since we've done our comparison
  406|  21.3k|          (void)__; // not needed, since we've done our comparison
  407|  21.3k|          if (ord > 0) {
  408|  21.3k|            return true;
  409|  21.3k|          } else if (ord < 0) {
  410|  21.3k|            return false;
  411|  21.3k|          } else {
  412|  21.3k|            return is_odd;
  413|  21.3k|          }
  414|  21.3k|        });
  415|  21.3k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  145|  21.3k|                       callback cb) noexcept {
  146|  21.3k|  const uint64_t mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 21.3k]
  ------------------
  147|  21.3k|  const uint64_t halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 21.3k]
  ------------------
  148|  21.3k|  uint64_t truncated_bits = am.mantissa & mask;
  149|  21.3k|  bool is_above = truncated_bits > halfway;
  150|  21.3k|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|  21.3k|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 21.3k]
  ------------------
  154|      0|    am.mantissa = 0;
  155|  21.3k|  } else {
  156|  21.3k|    am.mantissa >>= shift;
  157|  21.3k|  }
  158|  21.3k|  am.power2 += shift;
  159|       |
  160|  21.3k|  bool is_odd = (am.mantissa & 1) == 1;
  161|  21.3k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|  21.3k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  404|  21.3k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  21.3k|          (void)_;  // not needed, since we've done our comparison
  406|  21.3k|          (void)__; // not needed, since we've done our comparison
  407|  21.3k|          if (ord > 0) {
  ------------------
  |  Branch (407:15): [True: 210, False: 21.1k]
  ------------------
  408|    210|            return true;
  409|  21.1k|          } else if (ord < 0) {
  ------------------
  |  Branch (409:22): [True: 17.8k, False: 3.31k]
  ------------------
  410|  17.8k|            return false;
  411|  17.8k|          } else {
  412|  3.31k|            return is_odd;
  413|  3.31k|          }
  414|  21.3k|        });
_ZN10fast_float19scientific_exponentIDiEEiRNS_22parsed_number_string_tIT_EE:
   43|     90|scientific_exponent(parsed_number_string_t<UC> &num) noexcept {
   44|     90|  uint64_t mantissa = num.mantissa;
   45|     90|  int32_t exponent = int32_t(num.exponent);
   46|    450|  while (mantissa >= 10000) {
  ------------------
  |  Branch (46:10): [True: 360, False: 90]
  ------------------
   47|    360|    mantissa /= 10000;
   48|    360|    exponent += 4;
   49|    360|  }
   50|    180|  while (mantissa >= 100) {
  ------------------
  |  Branch (50:10): [True: 90, False: 90]
  ------------------
   51|     90|    mantissa /= 100;
   52|     90|    exponent += 2;
   53|     90|  }
   54|     90|  while (mantissa >= 10) {
  ------------------
  |  Branch (54:10): [True: 0, False: 90]
  ------------------
   55|      0|    mantissa /= 10;
   56|      0|    exponent += 1;
   57|      0|  }
   58|     90|  return exponent;
   59|     90|}
_ZN10fast_float14parse_mantissaIDiEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  260|     90|               size_t max_digits, size_t &digits) noexcept {
  261|       |  // try to minimize the number of big integer and scalar multiplication.
  262|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  263|       |  // scalar value (9 or 19 digits) for each step.
  264|     90|  size_t counter = 0;
  265|     90|  digits = 0;
  266|     90|  limb value = 0;
  267|     90|#ifdef FASTFLOAT_64BIT_LIMB
  268|     90|  size_t step = 19;
  269|       |#else
  270|       |  size_t step = 9;
  271|       |#endif
  272|       |
  273|       |  // process all integer digits.
  274|     90|  UC const *p = num.integer.ptr;
  275|     90|  UC const *pend = p + num.integer.len();
  276|     90|  skip_zeros(p, pend);
  277|       |  // process all digits, in increments of step per loop
  278|    180|  while (p != pend) {
  ------------------
  |  Branch (278:10): [True: 90, False: 90]
  ------------------
  279|     90|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (279:12): [True: 0, False: 90]
  |  Branch (279:45): [True: 0, False: 0]
  ------------------
  280|     90|           (max_digits - digits >= 8)) {
  ------------------
  |  Branch (280:12): [True: 0, False: 0]
  ------------------
  281|      0|      parse_eight_digits(p, value, counter, digits);
  282|      0|    }
  283|    720|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (283:12): [True: 720, False: 0]
  |  Branch (283:30): [True: 630, False: 90]
  |  Branch (283:43): [True: 630, False: 0]
  ------------------
  284|    630|      parse_one_digit(p, value, counter, digits);
  285|    630|    }
  286|     90|    if (digits == max_digits) {
  ------------------
  |  Branch (286:9): [True: 0, False: 90]
  ------------------
  287|       |      // add the temporary value, then check if we've truncated any digits
  288|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  289|      0|      bool truncated = is_truncated(p, pend);
  290|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (290:11): [True: 0, False: 0]
  ------------------
  291|      0|        truncated |= is_truncated(num.fraction);
  292|      0|      }
  293|      0|      if (truncated) {
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        round_up_bigint(result, digits);
  295|      0|      }
  296|      0|      return;
  297|     90|    } else {
  298|     90|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  299|     90|      counter = 0;
  300|     90|      value = 0;
  301|     90|    }
  302|     90|  }
  303|       |
  304|       |  // add our fraction digits, if they're available.
  305|     90|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (305:7): [True: 90, False: 0]
  ------------------
  306|     90|    p = num.fraction.ptr;
  307|     90|    pend = p + num.fraction.len();
  308|     90|    if (digits == 0) {
  ------------------
  |  Branch (308:9): [True: 0, False: 90]
  ------------------
  309|      0|      skip_zeros(p, pend);
  310|      0|    }
  311|       |    // process all digits, in increments of step per loop
  312|    198|    while (p != pend) {
  ------------------
  |  Branch (312:12): [True: 108, False: 90]
  ------------------
  313|    234|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) &&
  ------------------
  |  Branch (313:14): [True: 126, False: 108]
  |  Branch (313:47): [True: 126, False: 0]
  ------------------
  314|    234|             (max_digits - digits >= 8)) {
  ------------------
  |  Branch (314:14): [True: 126, False: 0]
  ------------------
  315|    126|        parse_eight_digits(p, value, counter, digits);
  316|    126|      }
  317|    576|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (317:14): [True: 558, False: 18]
  |  Branch (317:32): [True: 468, False: 90]
  |  Branch (317:45): [True: 468, False: 0]
  ------------------
  318|    468|        parse_one_digit(p, value, counter, digits);
  319|    468|      }
  320|    108|      if (digits == max_digits) {
  ------------------
  |  Branch (320:11): [True: 0, False: 108]
  ------------------
  321|       |        // add the temporary value, then check if we've truncated any digits
  322|      0|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  323|      0|        bool truncated = is_truncated(p, pend);
  324|      0|        if (truncated) {
  ------------------
  |  Branch (324:13): [True: 0, False: 0]
  ------------------
  325|      0|          round_up_bigint(result, digits);
  326|      0|        }
  327|      0|        return;
  328|    108|      } else {
  329|    108|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  330|    108|        counter = 0;
  331|    108|        value = 0;
  332|    108|      }
  333|    108|    }
  334|     90|  }
  335|       |
  336|     90|  if (counter != 0) {
  ------------------
  |  Branch (336:7): [True: 0, False: 90]
  ------------------
  337|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  338|      0|  }
  339|     90|}
_ZN10fast_float10skip_zerosIDiEEvRPKT_S3_:
  175|     90|skip_zeros(UC const *&first, UC const *last) noexcept {
  176|     90|  uint64_t val;
  177|     90|  while (!cpp20_and_in_constexpr() &&
  ------------------
  |  Branch (177:10): [Folded - Ignored]
  ------------------
  178|     90|         std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (178:10): [True: 90, False: 0]
  ------------------
  179|     90|    ::memcpy(&val, first, sizeof(uint64_t));
  180|     90|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (180:9): [True: 90, False: 0]
  ------------------
  181|     90|      break;
  182|     90|    }
  183|      0|    first += int_cmp_len<UC>();
  184|      0|  }
  185|     90|  while (first != last) {
  ------------------
  |  Branch (185:10): [True: 90, False: 0]
  ------------------
  186|     90|    if (*first != UC('0')) {
  ------------------
  |  Branch (186:9): [True: 90, False: 0]
  ------------------
  187|     90|      break;
  188|     90|    }
  189|      0|    first++;
  190|      0|  }
  191|     90|}
_ZN10fast_float18parse_eight_digitsIDiEEvRPKT_RmS5_S5_:
  225|    126|                   size_t &count) noexcept {
  226|    126|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  227|    126|  p += 8;
  228|    126|  counter += 8;
  229|    126|  count += 8;
  230|    126|}
_ZN10fast_float15parse_one_digitIDiEEvRPKT_RmS5_S5_:
  235|  1.09k|                size_t &count) noexcept {
  236|  1.09k|  value = value * 10 + limb(*p - UC('0'));
  237|  1.09k|  p++;
  238|  1.09k|  counter++;
  239|  1.09k|  count++;
  240|  1.09k|}
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  435|  30.0k|digit_comp(parsed_number_string_t<UC> &num, adjusted_mantissa am) noexcept {
  436|       |  // remove the invalid exponent bias
  437|  30.0k|  am.power2 -= invalid_am_bias;
  438|       |
  439|  30.0k|  int32_t sci_exp = scientific_exponent(num);
  440|  30.0k|  size_t max_digits = binary_format<T>::max_digits();
  441|  30.0k|  size_t digits = 0;
  442|  30.0k|  bigint bigmant;
  443|  30.0k|  parse_mantissa(bigmant, num, max_digits, digits);
  444|       |  // can't underflow, since digits is at most max_digits.
  445|  30.0k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  446|  30.0k|  if (exponent >= 0) {
  ------------------
  |  Branch (446:7): [True: 3.16k, False: 26.8k]
  ------------------
  447|  3.16k|    return positive_digit_comp<T>(bigmant, exponent);
  448|  26.8k|  } else {
  449|  26.8k|    return negative_digit_comp<T>(bigmant, am, exponent);
  450|  26.8k|  }
  451|  30.0k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  343|  3.16k|positive_digit_comp(bigint &bigmant, int32_t exponent) noexcept {
  344|  3.16k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  168|  3.16k|  { ((void)(x)); }
  ------------------
  345|  3.16k|  adjusted_mantissa answer;
  346|  3.16k|  bool truncated;
  347|  3.16k|  answer.mantissa = bigmant.hi64(truncated);
  348|  3.16k|  int bias = binary_format<T>::mantissa_explicit_bits() -
  349|  3.16k|             binary_format<T>::minimum_exponent();
  350|  3.16k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  351|       |
  352|  3.16k|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  353|  3.16k|    round_nearest_tie_even(
  354|  3.16k|        a, shift,
  355|  3.16k|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|  3.16k|          return is_above || (is_halfway && truncated) ||
  357|  3.16k|                 (is_odd && is_halfway);
  358|  3.16k|        });
  359|  3.16k|  });
  360|       |
  361|  3.16k|  return answer;
  362|  3.16k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
  110|  3.16k|                                                         callback cb) noexcept {
  111|  3.16k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  3.16k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 0, False: 3.16k]
  ------------------
  113|       |    // have a denormal float
  114|      0|    int32_t shift = -am.power2 + 1;
  115|      0|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|      0|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|      0|                    ? 0
  120|      0|                    : 1;
  121|      0|    return;
  122|      0|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  3.16k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  3.16k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 432, False: 2.73k]
  ------------------
  129|  3.16k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|    432|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|    432|    am.power2++;
  132|    432|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  3.16k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  3.16k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 3.16k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  3.16k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  352|  3.16k|  round<T>(answer, [truncated](adjusted_mantissa &a, int32_t shift) {
  353|  3.16k|    round_nearest_tie_even(
  354|  3.16k|        a, shift,
  355|  3.16k|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|  3.16k|          return is_above || (is_halfway && truncated) ||
  357|  3.16k|                 (is_odd && is_halfway);
  358|  3.16k|        });
  359|  3.16k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  145|  3.16k|                       callback cb) noexcept {
  146|  3.16k|  const uint64_t mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 3.16k]
  ------------------
  147|  3.16k|  const uint64_t halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 3.16k]
  ------------------
  148|  3.16k|  uint64_t truncated_bits = am.mantissa & mask;
  149|  3.16k|  bool is_above = truncated_bits > halfway;
  150|  3.16k|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|  3.16k|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 3.16k]
  ------------------
  154|      0|    am.mantissa = 0;
  155|  3.16k|  } else {
  156|  3.16k|    am.mantissa >>= shift;
  157|  3.16k|  }
  158|  3.16k|  am.power2 += shift;
  159|       |
  160|  3.16k|  bool is_odd = (am.mantissa & 1) == 1;
  161|  3.16k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|  3.16k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  355|  3.16k|        [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  356|  3.16k|          return is_above || (is_halfway && truncated) ||
  ------------------
  |  Branch (356:18): [True: 506, False: 2.66k]
  |  Branch (356:31): [True: 2.01k, False: 644]
  |  Branch (356:45): [True: 641, False: 1.37k]
  ------------------
  357|  3.16k|                 (is_odd && is_halfway);
  ------------------
  |  Branch (357:19): [True: 258, False: 1.76k]
  |  Branch (357:29): [True: 60, False: 198]
  ------------------
  358|  3.16k|        });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  371|  26.9k|    bigint &bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  372|  26.9k|  bigint &real_digits = bigmant;
  373|  26.9k|  int32_t real_exp = exponent;
  374|       |
  375|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  376|  26.9k|  adjusted_mantissa am_b = am;
  377|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with
  378|       |  // -Wnoexcept-type.
  379|  26.9k|  round<T>(am_b,
  380|  26.9k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
  381|  26.9k|  T b;
  382|  26.9k|  to_float(false, am_b, b);
  383|  26.9k|  adjusted_mantissa theor = to_extended_halfway(b);
  384|  26.9k|  bigint theor_digits(theor.mantissa);
  385|  26.9k|  int32_t theor_exp = theor.power2;
  386|       |
  387|       |  // scale real digits and theor digits to be same power.
  388|  26.9k|  int32_t pow2_exp = theor_exp - real_exp;
  389|  26.9k|  uint32_t pow5_exp = uint32_t(-real_exp);
  390|  26.9k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (390:7): [True: 26.9k, False: 0]
  ------------------
  391|  26.9k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  168|  26.9k|  { ((void)(x)); }
  ------------------
  392|  26.9k|  }
  393|  26.9k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (393:7): [True: 2.53k, False: 24.4k]
  ------------------
  394|  2.53k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  168|  2.53k|  { ((void)(x)); }
  ------------------
  395|  24.4k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (395:14): [True: 24.3k, False: 74]
  ------------------
  396|  24.3k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  168|  24.3k|  { ((void)(x)); }
  ------------------
  397|  24.3k|  }
  398|       |
  399|       |  // compare digits, and use it to director rounding
  400|  26.9k|  int ord = real_digits.compare(theor_digits);
  401|  26.9k|  adjusted_mantissa answer = am;
  402|  26.9k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  403|  26.9k|    round_nearest_tie_even(
  404|  26.9k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  26.9k|          (void)_;  // not needed, since we've done our comparison
  406|  26.9k|          (void)__; // not needed, since we've done our comparison
  407|  26.9k|          if (ord > 0) {
  408|  26.9k|            return true;
  409|  26.9k|          } else if (ord < 0) {
  410|  26.9k|            return false;
  411|  26.9k|          } else {
  412|  26.9k|            return is_odd;
  413|  26.9k|          }
  414|  26.9k|        });
  415|  26.9k|  });
  416|       |
  417|  26.9k|  return answer;
  418|  26.9k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
  110|  26.9k|                                                         callback cb) noexcept {
  111|  26.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  26.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 104, False: 26.8k]
  ------------------
  113|       |    // have a denormal float
  114|    104|    int32_t shift = -am.power2 + 1;
  115|    104|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|    104|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 104, False: 0]
  ------------------
  118|    104|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|    104|                    ? 0
  120|    104|                    : 1;
  121|    104|    return;
  122|    104|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  26.8k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  26.8k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 0, False: 26.8k]
  ------------------
  129|  26.8k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|      0|    am.power2++;
  132|      0|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  26.8k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  26.8k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 26.8k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  26.8k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  380|  26.9k|           [](adjusted_mantissa &a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   99|  26.9k|to_extended_halfway(T value) noexcept {
  100|  26.9k|  adjusted_mantissa am = to_extended(value);
  101|  26.9k|  am.mantissa <<= 1;
  102|  26.9k|  am.mantissa += 1;
  103|  26.9k|  am.power2 -= 1;
  104|  26.9k|  return am;
  105|  26.9k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   64|  26.9k|to_extended(T value) noexcept {
   65|  26.9k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   66|  26.9k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   67|  26.9k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   68|  26.9k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   69|       |
   70|  26.9k|  adjusted_mantissa am;
   71|  26.9k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() -
   72|  26.9k|                 binary_format<T>::minimum_exponent();
   73|  26.9k|  equiv_uint bits;
   74|       |#if FASTFLOAT_HAS_BIT_CAST
   75|       |  bits = std::bit_cast<equiv_uint>(value);
   76|       |#else
   77|  26.9k|  ::memcpy(&bits, &value, sizeof(T));
   78|  26.9k|#endif
   79|  26.9k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (79:7): [True: 104, False: 26.8k]
  ------------------
   80|       |    // denormal
   81|    104|    am.power2 = 1 - bias;
   82|    104|    am.mantissa = bits & mantissa_mask;
   83|  26.8k|  } else {
   84|       |    // normal
   85|  26.8k|    am.power2 = int32_t((bits & exponent_mask) >>
   86|  26.8k|                        binary_format<T>::mantissa_explicit_bits());
   87|  26.8k|    am.power2 -= bias;
   88|  26.8k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   89|  26.8k|  }
   90|       |
   91|  26.9k|  return am;
   92|  26.9k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
  110|  26.9k|                                                         callback cb) noexcept {
  111|  26.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
  112|  26.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (112:7): [True: 104, False: 26.8k]
  ------------------
  113|       |    // have a denormal float
  114|    104|    int32_t shift = -am.power2 + 1;
  115|    104|    cb(am, std::min<int32_t>(shift, 64));
  116|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  117|    104|    am.power2 = (am.mantissa <
  ------------------
  |  Branch (117:17): [True: 104, False: 0]
  ------------------
  118|    104|                 (uint64_t(1) << binary_format<T>::mantissa_explicit_bits()))
  119|    104|                    ? 0
  120|    104|                    : 1;
  121|    104|    return;
  122|    104|  }
  123|       |
  124|       |  // have a normal float, use the default shift.
  125|  26.8k|  cb(am, mantissa_shift);
  126|       |
  127|       |  // check for carry
  128|  26.8k|  if (am.mantissa >=
  ------------------
  |  Branch (128:7): [True: 74, False: 26.7k]
  ------------------
  129|  26.8k|      (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  130|     74|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  131|     74|    am.power2++;
  132|     74|  }
  133|       |
  134|       |  // check for infinite: we could have carried to an infinite power
  135|  26.8k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  136|  26.8k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (136:7): [True: 0, False: 26.8k]
  ------------------
  137|      0|    am.power2 = binary_format<T>::infinite_power();
  138|      0|    am.mantissa = 0;
  139|      0|  }
  140|  26.8k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  402|  26.9k|  round<T>(answer, [ord](adjusted_mantissa &a, int32_t shift) {
  403|  26.9k|    round_nearest_tie_even(
  404|  26.9k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  26.9k|          (void)_;  // not needed, since we've done our comparison
  406|  26.9k|          (void)__; // not needed, since we've done our comparison
  407|  26.9k|          if (ord > 0) {
  408|  26.9k|            return true;
  409|  26.9k|          } else if (ord < 0) {
  410|  26.9k|            return false;
  411|  26.9k|          } else {
  412|  26.9k|            return is_odd;
  413|  26.9k|          }
  414|  26.9k|        });
  415|  26.9k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  145|  26.9k|                       callback cb) noexcept {
  146|  26.9k|  const uint64_t mask = (shift == 64) ? UINT64_MAX : (uint64_t(1) << shift) - 1;
  ------------------
  |  Branch (146:25): [True: 0, False: 26.9k]
  ------------------
  147|  26.9k|  const uint64_t halfway = (shift == 0) ? 0 : uint64_t(1) << (shift - 1);
  ------------------
  |  Branch (147:28): [True: 0, False: 26.9k]
  ------------------
  148|  26.9k|  uint64_t truncated_bits = am.mantissa & mask;
  149|  26.9k|  bool is_above = truncated_bits > halfway;
  150|  26.9k|  bool is_halfway = truncated_bits == halfway;
  151|       |
  152|       |  // shift digits into position
  153|  26.9k|  if (shift == 64) {
  ------------------
  |  Branch (153:7): [True: 0, False: 26.9k]
  ------------------
  154|      0|    am.mantissa = 0;
  155|  26.9k|  } else {
  156|  26.9k|    am.mantissa >>= shift;
  157|  26.9k|  }
  158|  26.9k|  am.power2 += shift;
  159|       |
  160|  26.9k|  bool is_odd = (am.mantissa & 1) == 1;
  161|  26.9k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  162|  26.9k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  404|  26.9k|        a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  405|  26.9k|          (void)_;  // not needed, since we've done our comparison
  406|  26.9k|          (void)__; // not needed, since we've done our comparison
  407|  26.9k|          if (ord > 0) {
  ------------------
  |  Branch (407:15): [True: 11.3k, False: 15.6k]
  ------------------
  408|  11.3k|            return true;
  409|  15.6k|          } else if (ord < 0) {
  ------------------
  |  Branch (409:22): [True: 15.1k, False: 488]
  ------------------
  410|  15.1k|            return false;
  411|  15.1k|          } else {
  412|    488|            return is_odd;
  413|    488|          }
  414|  26.9k|        });
_ZN10fast_float10digit_compIdDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  435|     90|digit_comp(parsed_number_string_t<UC> &num, adjusted_mantissa am) noexcept {
  436|       |  // remove the invalid exponent bias
  437|     90|  am.power2 -= invalid_am_bias;
  438|       |
  439|     90|  int32_t sci_exp = scientific_exponent(num);
  440|     90|  size_t max_digits = binary_format<T>::max_digits();
  441|     90|  size_t digits = 0;
  442|     90|  bigint bigmant;
  443|     90|  parse_mantissa(bigmant, num, max_digits, digits);
  444|       |  // can't underflow, since digits is at most max_digits.
  445|     90|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  446|     90|  if (exponent >= 0) {
  ------------------
  |  Branch (446:7): [True: 0, False: 90]
  ------------------
  447|      0|    return positive_digit_comp<T>(bigmant, exponent);
  448|     90|  } else {
  449|     90|    return negative_digit_comp<T>(bigmant, am, exponent);
  450|     90|  }
  451|     90|}

_ZN10fast_float4spanIKcEC2Ev:
  234|  1.94M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  233|  1.14M|  constexpr span(const T *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  236|   360k|  constexpr size_t len() const noexcept { return length; }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  497|   662k|inline constexpr int binary_format<float>::min_exponent_fast_path() {
  498|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  499|       |  return 0;
  500|       |#else
  501|   662k|  return -10;
  502|   662k|#endif
  503|   662k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  560|   624k|inline constexpr int binary_format<float>::max_exponent_fast_path() {
  561|   624k|  return 10;
  562|   624k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  578|   554k|inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  579|   554k|  return uint64_t(2) << mantissa_explicit_bits();
  580|   554k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  510|  1.49M|inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  511|  1.49M|  return 23;
  512|  1.49M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  598|   531k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  599|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  600|   531k|  return (void)powers_of_ten[0], powers_of_ten[power];
  601|   531k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  362|   498k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  614|   202k|template <> inline constexpr int binary_format<float>::smallest_power_of_ten() {
  615|   202k|  return -64;
  616|   202k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  606|   200k|template <> inline constexpr int binary_format<float>::largest_power_of_ten() {
  607|   200k|  return 38;
  608|   200k|}
_ZN10fast_float14leading_zeroesEm:
  282|   434k|leading_zeroes(uint64_t input_num) {
  283|   434k|  assert(input_num > 0);
  284|   434k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (284:7): [Folded - Ignored]
  ------------------
  285|      0|    return leading_zeroes_generic(input_num);
  286|      0|  }
  287|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  288|       |#if defined(_M_X64) || defined(_M_ARM64)
  289|       |  unsigned long leading_zero = 0;
  290|       |  // Search the mask data from most significant bit (MSB)
  291|       |  // to least significant bit (LSB) for a set bit (1).
  292|       |  _BitScanReverse64(&leading_zero, input_num);
  293|       |  return (int)(63 - leading_zero);
  294|       |#else
  295|       |  return leading_zeroes_generic(input_num);
  296|       |#endif
  297|       |#else
  298|   434k|  return __builtin_clzll(input_num);
  299|   434k|#endif
  300|   434k|}
_ZN10fast_float19full_multiplicationEmm:
  334|   551k|full_multiplication(uint64_t a, uint64_t b) {
  335|   551k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (335:7): [Folded - Ignored]
  ------------------
  336|      0|    value128 answer;
  337|      0|    answer.low = umul128_generic(a, b, &answer.high);
  338|      0|    return answer;
  339|      0|  }
  340|   551k|  value128 answer;
  341|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  342|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  343|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  344|       |  answer.high = __umulh(a, b);
  345|       |  answer.low = a * b;
  346|       |#elif defined(FASTFLOAT_32BIT) ||                                              \
  347|       |    (defined(_WIN64) && !defined(__clang__) && !defined(_M_ARM64))
  348|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  349|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  350|       |  __uint128_t r = ((__uint128_t)a) * b;
  351|   551k|  answer.low = uint64_t(r);
  352|   551k|  answer.high = uint64_t(r >> 64);
  353|       |#else
  354|       |  answer.low = umul128_generic(a, b, &answer.high);
  355|       |#endif
  356|   551k|  return answer;
  357|   551k|}
_ZN10fast_float8value128C2Ev:
  248|   551k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  537|   237k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  538|   237k|  return -127;
  539|   237k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  530|  66.4k|inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  531|  66.4k|  return -17;
  532|  66.4k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  520|  64.7k|inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  521|  64.7k|  return 10;
  522|  64.7k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  366|   151k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  367|   151k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (367:12): [True: 51.9k, False: 99.0k]
  |  Branch (367:38): [True: 0, False: 99.0k]
  ------------------
  368|   151k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  621|  21.8k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  622|  21.8k|  return 114;
  623|  21.8k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  707|  87.0k|template <typename UC> static constexpr int int_cmp_len() {
  708|  87.0k|  return sizeof(uint64_t) / sizeof(UC);
  709|  87.0k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  698|  35.5k|template <typename UC> static constexpr uint64_t int_cmp_zeros() {
  699|  35.5k|  static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4),
  700|  35.5k|                "Unsupported character size");
  701|  35.5k|  return (sizeof(UC) == 1) ? 0x3030303030303030
  ------------------
  |  Branch (701:10): [Folded - Ignored]
  ------------------
  702|  35.5k|         : (sizeof(UC) == 2)
  ------------------
  |  Branch (702:12): [Folded - Ignored]
  ------------------
  703|      0|             ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 |
  704|      0|                uint64_t(UC('0')) << 16 | UC('0'))
  705|      0|             : (uint64_t(UC('0')) << 32 | UC('0'));
  706|  35.5k|}
_ZN10fast_float4spanImEC2EPKmm:
  233|  72.6k|  constexpr span(const T *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  236|   219k|  constexpr size_t len() const noexcept { return length; }
_ZNK10fast_float4spanImEixEm:
  238|   119k|  FASTFLOAT_CONSTEXPR14 const T &operator[](size_t index) const noexcept {
  239|   119k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  173|   119k|  { ((void)(x)); }
  ------------------
  240|   119k|    return ptr[index];
  241|   119k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  660|   153k|to_float(bool negative, adjusted_mantissa am, T &value) {
  661|   153k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  662|   153k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  663|   153k|  word |= fastfloat_uint(am.power2)
  664|   153k|          << binary_format<T>::mantissa_explicit_bits();
  665|   153k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  666|       |#if FASTFLOAT_HAS_BIT_CAST
  667|       |  value = std::bit_cast<T>(word);
  668|       |#else
  669|   153k|  ::memcpy(&value, &word, sizeof(T));
  670|   153k|#endif
  671|   153k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  551|   153k|template <> inline constexpr int binary_format<float>::sign_index() {
  552|   153k|  return 31;
  553|   153k|}
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  544|   374k|template <> inline constexpr int binary_format<float>::infinite_power() {
  545|   374k|  return 0xFF;
  546|   374k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   44|   971k|      : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  234|   828k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  233|   416k|  constexpr span(const T *_ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  236|  2.07k|  constexpr size_t len() const noexcept { return length; }
impl.cpp:_ZN10fast_floatL11int_cmp_lenIDiEEiv:
  707|     90|template <typename UC> static constexpr int int_cmp_len() {
  708|     90|  return sizeof(uint64_t) / sizeof(UC);
  709|     90|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIDiEEmv:
  698|     90|template <typename UC> static constexpr uint64_t int_cmp_zeros() {
  699|     90|  static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4),
  700|     90|                "Unsupported character size");
  701|     90|  return (sizeof(UC) == 1) ? 0x3030303030303030
  ------------------
  |  Branch (701:10): [Folded - Ignored]
  ------------------
  702|     90|         : (sizeof(UC) == 2)
  ------------------
  |  Branch (702:12): [Folded - Ignored]
  ------------------
  703|     90|             ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 |
  704|      0|                uint64_t(UC('0')) << 16 | UC('0'))
  705|     90|             : (uint64_t(UC('0')) << 32 | UC('0'));
  706|     90|}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   44|   414k|      : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  488|   723k|inline constexpr int binary_format<double>::min_exponent_fast_path() {
  489|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  490|       |  return 0;
  491|       |#else
  492|   723k|  return -22;
  493|   723k|#endif
  494|   723k|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  556|   715k|inline constexpr int binary_format<double>::max_exponent_fast_path() {
  557|   715k|  return 22;
  558|   715k|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  565|   615k|inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  566|   615k|  return uint64_t(2) << mantissa_explicit_bits();
  567|   615k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  506|  1.56M|inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  507|  1.56M|  return 52;
  508|  1.56M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  593|   610k|binary_format<double>::exact_power_of_ten(int64_t power) {
  594|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  595|   610k|  return (void)powers_of_ten[0], powers_of_ten[power];
  596|   610k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  611|   185k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  612|   185k|  return -342;
  613|   185k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  603|   184k|template <> inline constexpr int binary_format<double>::largest_power_of_ten() {
  604|   184k|  return 308;
  605|   184k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  534|   241k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  535|   241k|  return -1023;
  536|   241k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  525|  54.0k|inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  526|  54.0k|  return -4;
  527|  54.0k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  515|  29.9k|inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  516|  29.9k|  return 23;
  517|  29.9k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  618|  30.1k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  619|  30.1k|  return 769;
  620|  30.1k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  660|   139k|to_float(bool negative, adjusted_mantissa am, T &value) {
  661|   139k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  662|   139k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  663|   139k|  word |= fastfloat_uint(am.power2)
  664|   139k|          << binary_format<T>::mantissa_explicit_bits();
  665|   139k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  666|       |#if FASTFLOAT_HAS_BIT_CAST
  667|       |  value = std::bit_cast<T>(word);
  668|       |#else
  669|   139k|  ::memcpy(&value, &word, sizeof(T));
  670|   139k|#endif
  671|   139k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  548|   139k|template <> inline constexpr int binary_format<double>::sign_index() {
  549|   139k|  return 63;
  550|   139k|}
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  541|   350k|template <> inline constexpr int binary_format<double>::infinite_power() {
  542|   350k|  return 0x7FF;
  543|   350k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  189|   477k|           chars_format fmt /*= chars_format::general*/) noexcept {
  190|   477k|  return from_chars_caller<T>::call(first, last, value,
  191|   477k|                                    parse_options_t<UC>(fmt));
  192|   477k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  147|   477k|       parse_options_t<UC> options) noexcept {
  148|   477k|    return from_chars_advanced(first, last, value, options);
  149|   477k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  290|   477k|                    parse_options_t<UC> options) noexcept {
  291|       |
  292|   477k|  static_assert(is_supported_float_type<T>(),
  293|   477k|                "only some floating-point types are supported");
  294|   477k|  static_assert(is_supported_char_type<UC>(),
  295|   477k|                "only char, wchar_t, char16_t and char32_t are supported");
  296|       |
  297|   477k|  from_chars_result_t<UC> answer;
  298|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE // disabled by default
  299|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  300|       |    first++;
  301|       |  }
  302|       |#endif
  303|   477k|  if (first == last) {
  ------------------
  |  Branch (303:7): [True: 0, False: 477k]
  ------------------
  304|      0|    answer.ec = std::errc::invalid_argument;
  305|      0|    answer.ptr = first;
  306|      0|    return answer;
  307|      0|  }
  308|   477k|  parsed_number_string_t<UC> pns =
  309|   477k|      parse_number_string<UC>(first, last, options);
  310|   477k|  if (!pns.valid) {
  ------------------
  |  Branch (310:7): [True: 0, False: 477k]
  ------------------
  311|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (311:9): [True: 0, False: 0]
  ------------------
  312|      0|      answer.ec = std::errc::invalid_argument;
  313|      0|      answer.ptr = first;
  314|      0|      return answer;
  315|      0|    } else {
  316|      0|      return detail::parse_infnan(first, last, value);
  317|      0|    }
  318|      0|  }
  319|       |
  320|       |  // call overload that takes parsed_number_string_t directly.
  321|   477k|  return from_chars_advanced(pns, value);
  322|   477k|}
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  201|   477k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  202|       |
  203|   477k|  static_assert(is_supported_float_type<T>(),
  204|   477k|                "only some floating-point types are supported");
  205|   477k|  static_assert(is_supported_char_type<UC>(),
  206|   477k|                "only char, wchar_t, char16_t and char32_t are supported");
  207|       |
  208|   477k|  from_chars_result_t<UC> answer;
  209|       |
  210|   477k|  answer.ec = std::errc(); // be optimistic
  211|   477k|  answer.ptr = pns.lastmatch;
  212|       |  // The implementation of the Clinger's fast path is convoluted because
  213|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  214|       |  // selected on the thread.
  215|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  216|       |  // returns true.
  217|   477k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (217:7): [True: 439k, False: 37.1k]
  ------------------
  218|   477k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (218:7): [True: 414k, False: 25.1k]
  ------------------
  219|   477k|      !pns.too_many_digits) {
  ------------------
  |  Branch (219:7): [True: 373k, False: 41.3k]
  ------------------
  220|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  221|       |    // when the system rounds to the nearest float.
  222|       |    //
  223|       |    // We expect the next branch to almost always be selected.
  224|       |    // We could check it first (before the previous branch), but
  225|       |    // there might be performance advantages at having the check
  226|       |    // be last.
  227|   373k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (227:9): [Folded - Ignored]
  |  Branch (227:38): [True: 373k, False: 0]
  ------------------
  228|       |      // We have that fegetround() == FE_TONEAREST.
  229|       |      // Next is Clinger's fast path.
  230|   373k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (230:11): [True: 350k, False: 22.7k]
  ------------------
  231|   350k|        value = T(pns.mantissa);
  232|   350k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (232:13): [True: 7.43k, False: 343k]
  ------------------
  233|  7.43k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  234|   343k|        } else {
  235|   343k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  236|   343k|        }
  237|   350k|        if (pns.negative) {
  ------------------
  |  Branch (237:13): [True: 0, False: 350k]
  ------------------
  238|      0|          value = -value;
  239|      0|        }
  240|   350k|        return answer;
  241|   350k|      }
  242|   373k|    } else {
  243|       |      // We do not have that fegetround() == FE_TONEAREST.
  244|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  245|       |      // proposal
  246|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (246:11): [True: 0, False: 0]
  ------------------
  247|      0|          pns.mantissa <=
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (251:13): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) *
  257|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  258|      0|        if (pns.negative) {
  ------------------
  |  Branch (258:13): [True: 0, False: 0]
  ------------------
  259|      0|          value = -value;
  260|      0|        }
  261|      0|        return answer;
  262|      0|      }
  263|      0|    }
  264|   373k|  }
  265|   126k|  adjusted_mantissa am =
  266|   126k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  267|   126k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (267:7): [True: 73.7k, False: 52.6k]
  |  Branch (267:30): [True: 73.7k, False: 0]
  ------------------
  268|  73.7k|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (268:9): [True: 21.8k, False: 51.9k]
  ------------------
  269|  21.8k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  270|  21.8k|    }
  271|  73.7k|  }
  272|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  273|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  274|       |  // way around again. This is very uncommon.
  275|   126k|  if (am.power2 < 0) {
  ------------------
  |  Branch (275:7): [True: 21.8k, False: 104k]
  ------------------
  276|  21.8k|    am = digit_comp<T>(pns, am);
  277|  21.8k|  }
  278|   126k|  to_float(pns.negative, am, value);
  279|       |  // Test for over/underflow.
  280|   126k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (280:8): [True: 122k, False: 3.54k]
  |  Branch (280:29): [True: 13.3k, False: 109k]
  |  Branch (280:49): [True: 812, False: 12.5k]
  ------------------
  281|   126k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (281:7): [True: 4.03k, False: 121k]
  ------------------
  282|  4.84k|    answer.ec = std::errc::result_out_of_range;
  283|  4.84k|  }
  284|   126k|  return answer;
  285|   477k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   81|  1.16M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   82|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   83|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   84|       |  return false;
   85|       |#endif
   86|       |  // See
   87|       |  // A fast function to check your floating-point rounding mode
   88|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   89|       |  //
   90|       |  // This function is meant to be equivalent to :
   91|       |  // prior: #include <cfenv>
   92|       |  //  return fegetround() == FE_TONEAREST;
   93|       |  // However, it is expected to be much faster than the fegetround()
   94|       |  // function call.
   95|       |  //
   96|       |  // The volatile keywoard prevents the compiler from computing the function
   97|       |  // at compile-time.
   98|       |  // There might be other ways to prevent compile-time optimizations (e.g.,
   99|       |  // asm). The value does not need to be std::numeric_limits<float>::min(), any
  100|       |  // small value so that 1 + x should round to 1 would do (after accounting for
  101|       |  // excess precision, as in 387 instructions).
  102|  1.16M|  static volatile float fmin = std::numeric_limits<float>::min();
  103|  1.16M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
  104|       |//
  105|       |// Explanation:
  106|       |// Only when fegetround() == FE_TONEAREST do we have that
  107|       |// fmin + 1.0f == 1.0f - fmin.
  108|       |//
  109|       |// FE_UPWARD:
  110|       |//  fmin + 1.0f > 1
  111|       |//  1.0f - fmin == 1
  112|       |//
  113|       |// FE_DOWNWARD or  FE_TOWARDZERO:
  114|       |//  fmin + 1.0f == 1
  115|       |//  1.0f - fmin < 1
  116|       |//
  117|       |// Note: This may fail to be accurate if fast-math has been
  118|       |// enabled, as rounding conventions may not apply.
  119|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  120|       |#pragma warning(push)
  121|       |//  todo: is there a VS warning?
  122|       |//  see
  123|       |//  https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  124|       |#elif defined(__clang__)
  125|       |#pragma clang diagnostic push
  126|  1.16M|#pragma clang diagnostic ignored "-Wfloat-equal"
  127|       |#elif defined(__GNUC__)
  128|       |#pragma GCC diagnostic push
  129|       |#pragma GCC diagnostic ignored "-Wfloat-equal"
  130|       |#endif
  131|  1.16M|  return (fmini + 1.0f == 1.0f - fmini);
  132|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  133|       |#pragma warning(pop)
  134|       |#elif defined(__clang__)
  135|       |#pragma clang diagnostic pop
  136|       |#elif defined(__GNUC__)
  137|       |#pragma GCC diagnostic pop
  138|       |#endif
  139|  1.16M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  189|   185k|           chars_format fmt /*= chars_format::general*/) noexcept {
  190|   185k|  return from_chars_caller<T>::call(first, last, value,
  191|   185k|                                    parse_options_t<UC>(fmt));
  192|   185k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  147|   185k|       parse_options_t<UC> options) noexcept {
  148|   185k|    return from_chars_advanced(first, last, value, options);
  149|   185k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  290|   185k|                    parse_options_t<UC> options) noexcept {
  291|       |
  292|   185k|  static_assert(is_supported_float_type<T>(),
  293|   185k|                "only some floating-point types are supported");
  294|   185k|  static_assert(is_supported_char_type<UC>(),
  295|   185k|                "only char, wchar_t, char16_t and char32_t are supported");
  296|       |
  297|   185k|  from_chars_result_t<UC> answer;
  298|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE // disabled by default
  299|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  300|       |    first++;
  301|       |  }
  302|       |#endif
  303|   185k|  if (first == last) {
  ------------------
  |  Branch (303:7): [True: 0, False: 185k]
  ------------------
  304|      0|    answer.ec = std::errc::invalid_argument;
  305|      0|    answer.ptr = first;
  306|      0|    return answer;
  307|      0|  }
  308|   185k|  parsed_number_string_t<UC> pns =
  309|   185k|      parse_number_string<UC>(first, last, options);
  310|   185k|  if (!pns.valid) {
  ------------------
  |  Branch (310:7): [True: 0, False: 185k]
  ------------------
  311|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (311:9): [True: 0, False: 0]
  ------------------
  312|      0|      answer.ec = std::errc::invalid_argument;
  313|      0|      answer.ptr = first;
  314|      0|      return answer;
  315|      0|    } else {
  316|      0|      return detail::parse_infnan(first, last, value);
  317|      0|    }
  318|      0|  }
  319|       |
  320|       |  // call overload that takes parsed_number_string_t directly.
  321|   185k|  return from_chars_advanced(pns, value);
  322|   185k|}
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  201|   185k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  202|       |
  203|   185k|  static_assert(is_supported_float_type<T>(),
  204|   185k|                "only some floating-point types are supported");
  205|   185k|  static_assert(is_supported_char_type<UC>(),
  206|   185k|                "only char, wchar_t, char16_t and char32_t are supported");
  207|       |
  208|   185k|  from_chars_result_t<UC> answer;
  209|       |
  210|   185k|  answer.ec = std::errc(); // be optimistic
  211|   185k|  answer.ptr = pns.lastmatch;
  212|       |  // The implementation of the Clinger's fast path is convoluted because
  213|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  214|       |  // selected on the thread.
  215|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  216|       |  // returns true.
  217|   185k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (217:7): [True: 184k, False: 1.43k]
  ------------------
  218|   185k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (218:7): [True: 181k, False: 3.26k]
  ------------------
  219|   185k|      !pns.too_many_digits) {
  ------------------
  |  Branch (219:7): [True: 180k, False: 232]
  ------------------
  220|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  221|       |    // when the system rounds to the nearest float.
  222|       |    //
  223|       |    // We expect the next branch to almost always be selected.
  224|       |    // We could check it first (before the previous branch), but
  225|       |    // there might be performance advantages at having the check
  226|       |    // be last.
  227|   180k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (227:9): [Folded - Ignored]
  |  Branch (227:38): [True: 180k, False: 0]
  ------------------
  228|       |      // We have that fegetround() == FE_TONEAREST.
  229|       |      // Next is Clinger's fast path.
  230|   180k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (230:11): [True: 180k, False: 484]
  ------------------
  231|   180k|        value = T(pns.mantissa);
  232|   180k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (232:13): [True: 438, False: 180k]
  ------------------
  233|    438|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  234|   180k|        } else {
  235|   180k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  236|   180k|        }
  237|   180k|        if (pns.negative) {
  ------------------
  |  Branch (237:13): [True: 0, False: 180k]
  ------------------
  238|      0|          value = -value;
  239|      0|        }
  240|   180k|        return answer;
  241|   180k|      }
  242|   180k|    } else {
  243|       |      // We do not have that fegetround() == FE_TONEAREST.
  244|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  245|       |      // proposal
  246|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (246:11): [True: 0, False: 0]
  ------------------
  247|      0|          pns.mantissa <=
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (251:13): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) *
  257|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  258|      0|        if (pns.negative) {
  ------------------
  |  Branch (258:13): [True: 0, False: 0]
  ------------------
  259|      0|          value = -value;
  260|      0|        }
  261|      0|        return answer;
  262|      0|      }
  263|      0|    }
  264|   180k|  }
  265|  5.42k|  adjusted_mantissa am =
  266|  5.42k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  267|  5.42k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (267:7): [True: 596, False: 4.82k]
  |  Branch (267:30): [True: 596, False: 0]
  ------------------
  268|    596|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (268:9): [True: 0, False: 596]
  ------------------
  269|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  270|      0|    }
  271|    596|  }
  272|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  273|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  274|       |  // way around again. This is very uncommon.
  275|  5.42k|  if (am.power2 < 0) {
  ------------------
  |  Branch (275:7): [True: 0, False: 5.42k]
  ------------------
  276|      0|    am = digit_comp<T>(pns, am);
  277|      0|  }
  278|  5.42k|  to_float(pns.negative, am, value);
  279|       |  // Test for over/underflow.
  280|  5.42k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (280:8): [True: 4.91k, False: 508]
  |  Branch (280:29): [True: 3.49k, False: 1.42k]
  |  Branch (280:49): [True: 874, False: 2.61k]
  ------------------
  281|  5.42k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (281:7): [True: 2.61k, False: 1.92k]
  ------------------
  282|  3.49k|    answer.ec = std::errc::result_out_of_range;
  283|  3.49k|  }
  284|  5.42k|  return answer;
  285|   185k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  189|   494k|           chars_format fmt /*= chars_format::general*/) noexcept {
  190|   494k|  return from_chars_caller<T>::call(first, last, value,
  191|   494k|                                    parse_options_t<UC>(fmt));
  192|   494k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  147|   494k|       parse_options_t<UC> options) noexcept {
  148|   494k|    return from_chars_advanced(first, last, value, options);
  149|   494k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  290|   494k|                    parse_options_t<UC> options) noexcept {
  291|       |
  292|   494k|  static_assert(is_supported_float_type<T>(),
  293|   494k|                "only some floating-point types are supported");
  294|   494k|  static_assert(is_supported_char_type<UC>(),
  295|   494k|                "only char, wchar_t, char16_t and char32_t are supported");
  296|       |
  297|   494k|  from_chars_result_t<UC> answer;
  298|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE // disabled by default
  299|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  300|       |    first++;
  301|       |  }
  302|       |#endif
  303|   494k|  if (first == last) {
  ------------------
  |  Branch (303:7): [True: 0, False: 494k]
  ------------------
  304|      0|    answer.ec = std::errc::invalid_argument;
  305|      0|    answer.ptr = first;
  306|      0|    return answer;
  307|      0|  }
  308|   494k|  parsed_number_string_t<UC> pns =
  309|   494k|      parse_number_string<UC>(first, last, options);
  310|   494k|  if (!pns.valid) {
  ------------------
  |  Branch (310:7): [True: 0, False: 494k]
  ------------------
  311|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (311:9): [True: 0, False: 0]
  ------------------
  312|      0|      answer.ec = std::errc::invalid_argument;
  313|      0|      answer.ptr = first;
  314|      0|      return answer;
  315|      0|    } else {
  316|      0|      return detail::parse_infnan(first, last, value);
  317|      0|    }
  318|      0|  }
  319|       |
  320|       |  // call overload that takes parsed_number_string_t directly.
  321|   494k|  return from_chars_advanced(pns, value);
  322|   494k|}
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  201|   494k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  202|       |
  203|   494k|  static_assert(is_supported_float_type<T>(),
  204|   494k|                "only some floating-point types are supported");
  205|   494k|  static_assert(is_supported_char_type<UC>(),
  206|   494k|                "only char, wchar_t, char16_t and char32_t are supported");
  207|       |
  208|   494k|  from_chars_result_t<UC> answer;
  209|       |
  210|   494k|  answer.ec = std::errc(); // be optimistic
  211|   494k|  answer.ptr = pns.lastmatch;
  212|       |  // The implementation of the Clinger's fast path is convoluted because
  213|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  214|       |  // selected on the thread.
  215|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  216|       |  // returns true.
  217|   494k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (217:7): [True: 489k, False: 5.89k]
  ------------------
  218|   494k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (218:7): [True: 464k, False: 24.3k]
  ------------------
  219|   494k|      !pns.too_many_digits) {
  ------------------
  |  Branch (219:7): [True: 393k, False: 70.9k]
  ------------------
  220|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  221|       |    // when the system rounds to the nearest float.
  222|       |    //
  223|       |    // We expect the next branch to almost always be selected.
  224|       |    // We could check it first (before the previous branch), but
  225|       |    // there might be performance advantages at having the check
  226|       |    // be last.
  227|   393k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (227:9): [Folded - Ignored]
  |  Branch (227:38): [True: 393k, False: 0]
  ------------------
  228|       |      // We have that fegetround() == FE_TONEAREST.
  229|       |      // Next is Clinger's fast path.
  230|   393k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (230:11): [True: 389k, False: 4.30k]
  ------------------
  231|   389k|        value = T(pns.mantissa);
  232|   389k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (232:13): [True: 19.5k, False: 369k]
  ------------------
  233|  19.5k|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  234|   369k|        } else {
  235|   369k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  236|   369k|        }
  237|   389k|        if (pns.negative) {
  ------------------
  |  Branch (237:13): [True: 0, False: 389k]
  ------------------
  238|      0|          value = -value;
  239|      0|        }
  240|   389k|        return answer;
  241|   389k|      }
  242|   393k|    } else {
  243|       |      // We do not have that fegetround() == FE_TONEAREST.
  244|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  245|       |      // proposal
  246|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (246:11): [True: 0, False: 0]
  ------------------
  247|      0|          pns.mantissa <=
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (251:13): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) *
  257|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  258|      0|        if (pns.negative) {
  ------------------
  |  Branch (258:13): [True: 0, False: 0]
  ------------------
  259|      0|          value = -value;
  260|      0|        }
  261|      0|        return answer;
  262|      0|      }
  263|      0|    }
  264|   393k|  }
  265|   105k|  adjusted_mantissa am =
  266|   105k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  267|   105k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (267:7): [True: 76.0k, False: 29.4k]
  |  Branch (267:30): [True: 76.0k, False: 0]
  ------------------
  268|  76.0k|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (268:9): [True: 30.0k, False: 46.0k]
  ------------------
  269|  30.0k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  270|  30.0k|    }
  271|  76.0k|  }
  272|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  273|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  274|       |  // way around again. This is very uncommon.
  275|   105k|  if (am.power2 < 0) {
  ------------------
  |  Branch (275:7): [True: 30.0k, False: 75.4k]
  ------------------
  276|  30.0k|    am = digit_comp<T>(pns, am);
  277|  30.0k|  }
  278|   105k|  to_float(pns.negative, am, value);
  279|       |  // Test for over/underflow.
  280|   105k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (280:8): [True: 102k, False: 3.18k]
  |  Branch (280:29): [True: 8.40k, False: 93.9k]
  |  Branch (280:49): [True: 217, False: 8.19k]
  ------------------
  281|   105k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (281:7): [True: 2.05k, False: 103k]
  ------------------
  282|  2.27k|    answer.ec = std::errc::result_out_of_range;
  283|  2.27k|  }
  284|   105k|  return answer;
  285|   494k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  189|   228k|           chars_format fmt /*= chars_format::general*/) noexcept {
  190|   228k|  return from_chars_caller<T>::call(first, last, value,
  191|   228k|                                    parse_options_t<UC>(fmt));
  192|   228k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  147|   228k|       parse_options_t<UC> options) noexcept {
  148|   228k|    return from_chars_advanced(first, last, value, options);
  149|   228k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  290|   228k|                    parse_options_t<UC> options) noexcept {
  291|       |
  292|   228k|  static_assert(is_supported_float_type<T>(),
  293|   228k|                "only some floating-point types are supported");
  294|   228k|  static_assert(is_supported_char_type<UC>(),
  295|   228k|                "only char, wchar_t, char16_t and char32_t are supported");
  296|       |
  297|   228k|  from_chars_result_t<UC> answer;
  298|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE // disabled by default
  299|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  300|       |    first++;
  301|       |  }
  302|       |#endif
  303|   228k|  if (first == last) {
  ------------------
  |  Branch (303:7): [True: 0, False: 228k]
  ------------------
  304|      0|    answer.ec = std::errc::invalid_argument;
  305|      0|    answer.ptr = first;
  306|      0|    return answer;
  307|      0|  }
  308|   228k|  parsed_number_string_t<UC> pns =
  309|   228k|      parse_number_string<UC>(first, last, options);
  310|   228k|  if (!pns.valid) {
  ------------------
  |  Branch (310:7): [True: 0, False: 228k]
  ------------------
  311|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (311:9): [True: 0, False: 0]
  ------------------
  312|      0|      answer.ec = std::errc::invalid_argument;
  313|      0|      answer.ptr = first;
  314|      0|      return answer;
  315|      0|    } else {
  316|      0|      return detail::parse_infnan(first, last, value);
  317|      0|    }
  318|      0|  }
  319|       |
  320|       |  // call overload that takes parsed_number_string_t directly.
  321|   228k|  return from_chars_advanced(pns, value);
  322|   228k|}
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EERNS_22parsed_number_string_tIS2_EERT_:
  201|   228k|from_chars_advanced(parsed_number_string_t<UC> &pns, T &value) noexcept {
  202|       |
  203|   228k|  static_assert(is_supported_float_type<T>(),
  204|   228k|                "only some floating-point types are supported");
  205|   228k|  static_assert(is_supported_char_type<UC>(),
  206|   228k|                "only char, wchar_t, char16_t and char32_t are supported");
  207|       |
  208|   228k|  from_chars_result_t<UC> answer;
  209|       |
  210|   228k|  answer.ec = std::errc(); // be optimistic
  211|   228k|  answer.ptr = pns.lastmatch;
  212|       |  // The implementation of the Clinger's fast path is convoluted because
  213|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  214|       |  // selected on the thread.
  215|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest()
  216|       |  // returns true.
  217|   228k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent &&
  ------------------
  |  Branch (217:7): [True: 226k, False: 2.05k]
  ------------------
  218|   228k|      pns.exponent <= binary_format<T>::max_exponent_fast_path() &&
  ------------------
  |  Branch (218:7): [True: 222k, False: 4.04k]
  ------------------
  219|   228k|      !pns.too_many_digits) {
  ------------------
  |  Branch (219:7): [True: 221k, False: 478]
  ------------------
  220|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  221|       |    // when the system rounds to the nearest float.
  222|       |    //
  223|       |    // We expect the next branch to almost always be selected.
  224|       |    // We could check it first (before the previous branch), but
  225|       |    // there might be performance advantages at having the check
  226|       |    // be last.
  227|   221k|    if (!cpp20_and_in_constexpr() && detail::rounds_to_nearest()) {
  ------------------
  |  Branch (227:9): [Folded - Ignored]
  |  Branch (227:38): [True: 221k, False: 0]
  ------------------
  228|       |      // We have that fegetround() == FE_TONEAREST.
  229|       |      // Next is Clinger's fast path.
  230|   221k|      if (pns.mantissa <= binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (230:11): [True: 221k, False: 148]
  ------------------
  231|   221k|        value = T(pns.mantissa);
  232|   221k|        if (pns.exponent < 0) {
  ------------------
  |  Branch (232:13): [True: 662, False: 220k]
  ------------------
  233|    662|          value = value / binary_format<T>::exact_power_of_ten(-pns.exponent);
  234|   220k|        } else {
  235|   220k|          value = value * binary_format<T>::exact_power_of_ten(pns.exponent);
  236|   220k|        }
  237|   221k|        if (pns.negative) {
  ------------------
  |  Branch (237:13): [True: 0, False: 221k]
  ------------------
  238|      0|          value = -value;
  239|      0|        }
  240|   221k|        return answer;
  241|   221k|      }
  242|   221k|    } else {
  243|       |      // We do not have that fegetround() == FE_TONEAREST.
  244|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's
  245|       |      // proposal
  246|      0|      if (pns.exponent >= 0 &&
  ------------------
  |  Branch (246:11): [True: 0, False: 0]
  ------------------
  247|      0|          pns.mantissa <=
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|              binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if (pns.mantissa == 0) {
  ------------------
  |  Branch (251:13): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) *
  257|      0|                binary_format<T>::exact_power_of_ten(pns.exponent);
  258|      0|        if (pns.negative) {
  ------------------
  |  Branch (258:13): [True: 0, False: 0]
  ------------------
  259|      0|          value = -value;
  260|      0|        }
  261|      0|        return answer;
  262|      0|      }
  263|      0|    }
  264|   221k|  }
  265|  6.73k|  adjusted_mantissa am =
  266|  6.73k|      compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  267|  6.73k|  if (pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (267:7): [True: 610, False: 6.12k]
  |  Branch (267:30): [True: 610, False: 0]
  ------------------
  268|    610|    if (am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (268:9): [True: 90, False: 520]
  ------------------
  269|     90|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  270|     90|    }
  271|    610|  }
  272|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa)
  273|       |  // and we have an invalid power (am.power2 < 0), then we need to go the long
  274|       |  // way around again. This is very uncommon.
  275|  6.73k|  if (am.power2 < 0) {
  ------------------
  |  Branch (275:7): [True: 90, False: 6.64k]
  ------------------
  276|     90|    am = digit_comp<T>(pns, am);
  277|     90|  }
  278|  6.73k|  to_float(pns.negative, am, value);
  279|       |  // Test for over/underflow.
  280|  6.73k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) ||
  ------------------
  |  Branch (280:8): [True: 6.19k, False: 536]
  |  Branch (280:29): [True: 1.61k, False: 4.58k]
  |  Branch (280:49): [True: 170, False: 1.44k]
  ------------------
  281|  6.73k|      am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (281:7): [True: 1.44k, False: 5.11k]
  ------------------
  282|  1.61k|    answer.ec = std::errc::result_out_of_range;
  283|  1.61k|  }
  284|  6.73k|  return answer;
  285|   228k|}

_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  865|  3.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  865|  1.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  865|  1.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|  3.21M|{
 4068|  3.21M|    if constexpr (sizeof(U) == 1) {
 4069|  3.21M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|  3.21M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|  3.21M|{
 4032|  3.21M|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|  3.21M|    SCN_GCC_COMPAT_PUSH
 4035|  3.21M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|  3.21M|    constexpr char lengths[] =
 4037|  3.21M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|  3.21M|        "\1\1\1\1\1\1\1\1"
 4039|  3.21M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|  3.21M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|  3.21M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|  3.21M|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|  3.21M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|  3.21M|    SCN_GCC_COMPAT_POP
 4046|  3.21M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  2.88M|{
 4274|  2.88M|    if constexpr (sizeof(CharT) == 1) {
 4275|  2.88M|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  2.88M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  2.88M|{
 4087|  2.88M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  2.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  2.88M|    const auto is_trailing_code_unit = [](char ch) {
 4090|  2.88M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  2.88M|    };
 4092|       |
 4093|  2.88M|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 2.82M, False: 60.4k]
  ------------------
 4094|  2.82M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 700, False: 2.82M]
  ------------------
 4095|    700|            SCN_UNLIKELY_ATTR
 4096|    700|            return invalid_code_point;
 4097|    700|        }
 4098|  2.82M|        return static_cast<char32_t>(input[0]);
 4099|  2.82M|    }
 4100|       |
 4101|  60.4k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 55.0k, False: 5.43k]
  ------------------
 4102|  55.0k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 162, False: 54.8k]
  ------------------
 4103|    162|            SCN_UNLIKELY_ATTR
 4104|    162|            return invalid_code_point;
 4105|    162|        }
 4106|  54.8k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 5.16k, False: 49.7k]
  ------------------
 4107|  5.16k|            SCN_UNLIKELY_ATTR
 4108|  5.16k|            return invalid_code_point;
 4109|  5.16k|        }
 4110|       |
 4111|  49.7k|        char32_t cp{};
 4112|  49.7k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|  49.7k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|  49.7k|        return cp;
 4115|  54.8k|    }
 4116|       |
 4117|  5.43k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 3.07k, False: 2.35k]
  ------------------
 4118|  3.07k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 113, False: 2.96k]
  ------------------
 4119|    113|            SCN_UNLIKELY_ATTR
 4120|    113|            return invalid_code_point;
 4121|    113|        }
 4122|  2.96k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 1.10k, False: 1.85k]
  ------------------
 4123|  2.96k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 971, False: 888]
  ------------------
 4124|  2.07k|            SCN_UNLIKELY_ATTR
 4125|  2.07k|            return invalid_code_point;
 4126|  2.07k|        }
 4127|       |
 4128|    888|        char32_t cp{};
 4129|    888|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|    888|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|    888|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|    888|        return cp;
 4133|  2.96k|    }
 4134|       |
 4135|  2.35k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 2.35k, False: 0]
  ------------------
 4136|  2.35k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 2.35k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  2.35k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 498, False: 1.85k]
  ------------------
 4141|    498|            SCN_UNLIKELY_ATTR
 4142|    498|            return invalid_code_point;
 4143|    498|        }
 4144|  1.85k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 470, False: 1.38k]
  ------------------
 4145|  1.85k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 554, False: 833]
  ------------------
 4146|  1.85k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 542, False: 291]
  ------------------
 4147|  1.56k|            SCN_UNLIKELY_ATTR
 4148|  1.56k|            return invalid_code_point;
 4149|  1.56k|        }
 4150|       |
 4151|    291|        char32_t cp{};
 4152|    291|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|    291|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|    291|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|    291|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|    291|        return cp;
 4157|  1.85k|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|  63.7k|    const auto is_trailing_code_unit = [](char ch) {
 4090|  63.7k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  63.7k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  4.87M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  4.87M|    else {
 3966|  4.87M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  4.87M|                                       to_address(first), to_address(last)))};
 3968|  4.87M|    }
 3969|  4.87M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  14.8M|{
  316|  14.8M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  14.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  14.8M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  24.3M|{
  294|  24.3M|    return p;
  295|  24.3M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  7.78M|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  7.78M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  7.78M|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  7.78M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  7.78M|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  7.78M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  91.4k|    {
 2869|  91.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  91.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  91.4k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  91.4k|    {
 2850|  91.4k|        return decay_copy(t.begin());
 2851|  91.4k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|  12.7M|{
 2094|  12.7M|    return SCN_FWD(t);
  ------------------
  |  |  936|  12.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  12.7M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  2.13M|    {
 2926|  2.13M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  2.13M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  2.13M|    {
 2908|  2.13M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  2.13M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|   156k|{
 9681|   156k|    auto result = make_scan_result<Source, Args...>();
 9682|   156k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|   156k|                                   make_scan_args(result->values())));
 9684|   156k|    return result;
 9685|   156k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEEDav:
 9636|   346k|{
 9637|   346k|    return scan_result_type<Source, Args...>();
 9638|   346k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   346k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   346k|        : m_value(T{}), m_has_value(true)
  427|   346k|    {
  428|   346k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2Ev:
 6570|   346k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6413|  1.06M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|  1.06M|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJfEEC2Ev:
 6344|  1.10M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|   346k|{
 9622|   346k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.7k, False: 316k]
  |  |  ------------------
  ------------------
 9623|  29.7k|        out = unexpected(in.error());
 9624|  29.7k|    }
 9625|   316k|    else {
 9626|   316k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   316k|    static_cast<    \
  |  |  935|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   316k|    }
 9628|   346k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|  1.06M|    {
 1740|  1.06M|        return has_value();
 1741|  1.06M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.13M|    {
  490|  2.13M|        return m_has_value;
  491|  2.13M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  89.1k|    {
 1746|  89.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  89.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  89.1k|        return this->get_unexpected().error();
 1748|  89.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  89.1k|    {
  473|  89.1k|        return m_unexpected;
  474|  89.1k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|  14.5M|    {
  365|  14.5M|        return m_unexpected;
  366|  14.5M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|  3.47M|        : m_unexpected(std::forward<Err>(e))
  350|  3.47M|    {
  351|  3.47M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.47M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.47M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  29.7k|        : base(unexpect, std::move(e.error())),
 1616|  29.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.7k|    {
 1618|  29.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  29.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.7k|          m_has_value(false)
  451|  29.7k|    {
  452|  29.7k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|  10.8M|        : m_unexpected(std::forward<Args>(args)...)
  359|  10.8M|    {
  360|  10.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  10.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  10.8M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.7k|    {
 1316|  29.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1556|  29.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  902|  29.7k|    {
  903|  29.7k|        assign_common(std::move(other));
  904|  29.7k|        return *this;
  905|  29.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  29.7k|    {
  950|  29.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.7k, False: 0]
  ------------------
  951|  29.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.38M|    {
  490|  1.38M|        return m_has_value;
  491|  1.38M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   980k|    {
  456|   980k|        return m_value;
  457|   980k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  29.7k|    {
 1046|  29.7k|        this->destroy_value();
 1047|  29.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  29.7k|    {
  504|  29.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.7k|                                  std::forward<Args>(args)...);
  506|  29.7k|        m_has_value = false;
  507|  29.7k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|   534k|{
  396|   534k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   534k|        T(std::forward<Args>(args)...);
  398|   534k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.7k|    {
  473|  29.7k|        return m_unexpected;
  474|  29.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.7k|    {
  481|  29.7k|        return std::move(m_unexpected);
  482|  29.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6444|   978k|    {
 6445|   978k|        m_range = std::forward<Other>(r);
 6446|   978k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   978k|    {
 1795|   978k|        return value();
 1796|   978k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   978k|    {
 1769|   978k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   978k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   978k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   978k|        return this->get_value();
 1771|   978k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   978k|    {
  456|   978k|        return m_value;
  457|   978k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9460|   480k|{
 9461|   480k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|   480k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|   480k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9397|   480k|{
 9398|   480k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|   480k|    auto result = vscan_impl(buffer, format, args);
 9401|   480k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   480k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.1k, False: 439k]
  |  |  ------------------
  ------------------
 9402|  41.1k|        return unexpected(result.error());
 9403|  41.1k|    }
 9404|   439k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   439k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|   480k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5380|  1.06M|{
 5381|  1.06M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  1.06M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  1.06M|                  "\n"
 5385|  1.06M|                  "Unsupported range type given as input to a scanning "
 5386|  1.06M|                  "function.\n"
 5387|  1.06M|                  "A range needs to have a character type (value type) "
 5388|  1.06M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  1.06M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  1.06M|                  "to be included.\n"
 5391|  1.06M|                  "See the scnlib documentation for more details.");
 5392|  1.06M|    static_assert(
 5393|  1.06M|        !std::is_same_v<T, custom_char_traits>,
 5394|  1.06M|        "\n"
 5395|  1.06M|        "Unsupported range type given as input to a scanning "
 5396|  1.06M|        "function.\n"
 5397|  1.06M|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  1.06M|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  1.06M|        "not supported.");
 5400|  1.06M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  1.06M|                  "\n"
 5402|  1.06M|                  "Unsupported range type given as input to a scanning "
 5403|  1.06M|                  "function.\n"
 5404|  1.06M|                  "file_marker_found cannot be used as an "
 5405|  1.06M|                  "source range type to scn::scan.\n"
 5406|  1.06M|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  1.06M|                  "and do not provide an explicit source range, "
 5408|  1.06M|                  "or use scn::scan with a FILE* directly.");
 5409|  1.06M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  1.06M|                  "\n"
 5411|  1.06M|                  "Unsupported range type given as input to a scanning "
 5412|  1.06M|                  "function.\n"
 5413|  1.06M|                  "In order to be scannable, a range needs to satisfy "
 5414|  1.06M|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  1.06M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  1.06M|                  "\n"
 5417|  1.06M|                  "Unsupported range type given as input to a scanning "
 5418|  1.06M|                  "function.\n"
 5419|  1.06M|                  "A range needs to model forward_range and have a valid "
 5420|  1.06M|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  1.06M|                  "Examples of scannable ranges are std::string, "
 5422|  1.06M|                  "std::string_view, "
 5423|  1.06M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  1.06M|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  1.06M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  1.06M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|  1.06M|{
 5320|  1.06M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|  1.06M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|  1.06M|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  1.06M|    {
 3000|  1.06M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  1.06M|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  1.06M|    {
 2981|  1.06M|        return t.data();
 2982|  1.06M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|  1.06M|    {
 3383|  1.06M|        return detail::to_address(ranges::begin(derived()));
 3384|  1.06M|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  9.49M|{
  316|  9.49M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  9.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  9.49M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.04M|    {
 2869|  2.04M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.04M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.04M|    {
 2850|  2.04M|        return decay_copy(t.begin());
 2851|  2.04M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  27.2M|    {
 3480|  27.2M|        return m_iterator;
 3481|  27.2M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|  1.06M|    {
 3339|  1.06M|        return static_cast<const D&>(*this);
 3340|  1.06M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  1.06M|    {
 3075|  1.06M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  1.06M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  1.06M|    {
 3041|  1.06M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  1.06M|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|  5.76M|{
 2094|  5.76M|    return SCN_FWD(t);
  ------------------
  |  |  936|  5.76M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  5.76M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  6.63M|    {
 3496|  6.63M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  6.63M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|  14.4M|    {
 1740|  14.4M|        return has_value();
 1741|  14.4M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  25.9M|    {
  490|  25.9M|        return m_has_value;
  491|  25.9M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|  1.08M|    {
 1746|  1.08M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.08M|        return this->get_unexpected().error();
 1748|  1.08M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.08M|    {
  473|  1.08M|        return m_unexpected;
  474|  1.08M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  89.1k|        : base(unexpect, std::move(e.error())),
 1616|  89.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  89.1k|    {
 1618|  89.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  89.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  89.1k|          m_has_value(false)
  451|  89.1k|    {
  452|  89.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.06M|    {
 1316|  1.06M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6674|   978k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|   978k|                      ranges::iterator_t<SourceRange>>) {
 6677|   978k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|   978k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  7.54M|    {
 2869|  7.54M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  7.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  7.54M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  7.54M|    {
 2850|  7.54M|        return decay_copy(t.begin());
 2851|  7.54M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6661|   978k|{
 6662|   978k|    return ranges::end(source);
 6663|   978k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   978k|    {
 2926|   978k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   978k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   978k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   978k|    {
 2908|   978k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   978k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   978k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|  12.5M|    {
 3484|  12.5M|        return m_sentinel;
 3485|  12.5M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  4.47M|    {
 1795|  4.47M|        return value();
 1796|  4.47M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  10.3M|    {
 1769|  10.3M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  10.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  10.3M|        return this->get_value();
 1771|  10.3M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  10.3M|    {
  456|  10.3M|        return m_value;
  457|  10.3M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   978k|        : base(std::in_place, std::forward<U>(val)),
 1570|   978k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   978k|    {
 1572|   978k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   978k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   978k|    {
  442|   978k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|   312k|    {
 8768|   312k|        return m_str;
 8769|   312k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   670k|{
 6110|   670k|    detail::check_scan_arg_types<Args...>();
 6111|   670k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   670k|}
_ZN3scn2v46detail20check_scan_arg_typesIJfEEEbv:
 5824|  1.10M|{
 5825|  1.10M|    constexpr bool default_constructible_constraint =
 5826|  1.10M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  1.10M|    static_assert(default_constructible_constraint,
 5828|  1.10M|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  1.10M|    constexpr bool destructible_constraint =
 5831|  1.10M|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  1.10M|    static_assert(destructible_constraint,
 5833|  1.10M|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  1.10M|    constexpr bool non_reference_constraint =
 5836|  1.10M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  1.10M|    static_assert(non_reference_constraint,
 5838|  1.10M|                  "Scan argument types must not be references");
 5839|       |
 5840|  1.10M|    constexpr bool movable_constraint =
 5841|  1.10M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  1.10M|    static_assert(movable_constraint,
 5843|  1.10M|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  1.10M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  1.10M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  1.10M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEEC2ERNSt3__15tupleIJfEEE:
 6085|   670k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   670k|    {
 6087|   670k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   670k|    {
 6095|   670k|        return {detail::make_arg<
 6096|   670k|            kind, Context,
 6097|   670k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   670k|                                 typename Context::char_type>::value>(args)...};
 6099|   670k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5874|   670k|{
 5875|   670k|    return make_value<Context>(value).ref_value;
 5876|   670k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEEDaRT0_:
 5809|   741k|{
 5810|   741k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   741k|                                  needs_context_tag>) {
 5814|   741k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   741k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   741k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERf:
 5648|   741k|    {                                                                        \
 5649|   741k|        return val;                                                          \
 5650|   741k|    }
_ZN3scn2v46detail15make_value_implIfRfEEDaOT0_:
 5778|  1.10M|{
 5779|  1.10M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  1.10M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  1.10M|    constexpr bool scannable_char =
 5783|  1.10M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  1.10M|    static_assert(scannable_char,
 5785|  1.10M|                  "Cannot scan an argument of an unsupported character "
 5786|  1.10M|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  1.10M|    constexpr bool scannable_const =
 5789|  1.10M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  1.10M|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  1.10M|    constexpr bool scannable_disabled =
 5793|  1.10M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  1.10M|    static_assert(scannable_disabled,
 5795|  1.10M|                  "Cannot scan an argument that has been disabled by "
 5796|  1.10M|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  1.10M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  1.10M|    static_assert(
 5800|  1.10M|        scannable,
 5801|  1.10M|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  1.10M|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  1.10M|    return arg_value{arg};
 5805|  1.10M|}
_ZN3scn2v46detail9arg_valueC2IfEERT_:
 5562|  1.10M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  1.10M|    {
 5564|  1.10M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJfEE6valuesEv:
 6353|   999k|    {
 6354|   999k|        return m_values;
 6355|   999k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   670k|        : basic_scan_args(store.desc, store.args.data())
 6136|   670k|    {
 6137|   670k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6187|  2.07M|        : m_desc(desc), m_builtin_values(data)
 6188|  2.07M|    {
 6189|  2.07M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  10.7M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  10.7M|    static_cast<    \
  |  |  935|  10.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  10.7M|    static_cast<    \
  |  |  935|  10.7M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  10.7M|    {
 3466|  10.7M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8440|  2.07M|{
 8441|  2.07M|    return s;
 8442|  2.07M|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8417|  2.07M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|   312k|        : m_str(r.str)
 8763|   312k|    {
 8764|   312k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   346k|    {
 1740|   346k|        return has_value();
 1741|   346k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1814|   980k|    {
 1815|   980k|        return &value();
 1816|   980k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   980k|    {
 1769|   980k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   980k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   980k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   980k|        return this->get_value();
 1771|   980k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6433|   978k|    {
 6434|   978k|        return ranges::begin(m_range);
 6435|   978k|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|   156k|{
 9750|   156k|    auto result = make_scan_result<Source, Args...>();
 9751|   156k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|   156k|                                   make_scan_args(result->values())));
 9753|   156k|    return result;
 9754|   156k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9478|   480k|{
 9479|   480k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|   480k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|   480k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9413|   480k|{
 9414|   480k|#if !SCN_DISABLE_LOCALE
 9415|   480k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|   480k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|   480k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|   480k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|   480k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   480k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.1k, False: 439k]
  |  |  ------------------
  ------------------
 9422|  41.1k|        return unexpected(result.error());
 9423|  41.1k|    }
 9424|   439k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   439k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|   480k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  34.0k|{
 9791|  34.0k|    auto result = make_scan_result<Source, T>();
 9792|  34.0k|    fill_scan_result(
 9793|  34.0k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  34.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  34.0k|                            detail::make_arg<scan_context>(result->value())));
 9795|  34.0k|    return result;
 9796|  34.0k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9491|   105k|{
 9492|   105k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9493|   105k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|   105k|{
 9438|   105k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|   105k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|   105k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.85k, False: 98.7k]
  |  |  ------------------
  ------------------
 9442|  6.85k|        return unexpected(result.error());
 9443|  6.85k|    }
 9444|  98.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  98.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|   105k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEENS0_14basic_scan_argIT_EERT0_:
 5859|  71.1k|{
 5860|  71.1k|    check_scan_arg_types<T>();
 5861|       |
 5862|  71.1k|    basic_scan_arg<Context> arg;
 5863|  71.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  71.1k|    arg.m_value = make_value<Context>(value);
 5865|  71.1k|    return arg;
 5866|  71.1k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5954|  2.29M|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5559|  3.46M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJfEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|   101k|    {
 6376|   101k|        return std::get<0>(m_values);
 6377|   101k|    }
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|   160k|{
 9681|   160k|    auto result = make_scan_result<Source, Args...>();
 9682|   160k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|   160k|                                   make_scan_args(result->values())));
 9684|   160k|    return result;
 9685|   160k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEEDav:
 9636|   356k|{
 9637|   356k|    return scan_result_type<Source, Args...>();
 9638|   356k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   356k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   356k|        : m_value(T{}), m_has_value(true)
  427|   356k|    {
  428|   356k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6570|   356k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6344|  1.17M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|   356k|{
 9622|   356k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.7k, False: 327k]
  |  |  ------------------
  ------------------
 9623|  29.7k|        out = unexpected(in.error());
 9624|  29.7k|    }
 9625|   327k|    else {
 9626|   327k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   327k|    static_cast<    \
  |  |  935|   327k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   327k|    }
 9628|   356k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  29.7k|        : base(unexpect, std::move(e.error())),
 1616|  29.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.7k|    {
 1618|  29.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  29.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.7k|          m_has_value(false)
  451|  29.7k|    {
  452|  29.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.7k|    {
 1316|  29.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  29.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  29.7k|    {
  903|  29.7k|        assign_common(std::move(other));
  904|  29.7k|        return *this;
  905|  29.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  29.7k|    {
  950|  29.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.7k, False: 0]
  ------------------
  951|  29.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.42M|    {
  490|  1.42M|        return m_has_value;
  491|  1.42M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.01M|    {
  456|  1.01M|        return m_value;
  457|  1.01M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  29.7k|    {
 1046|  29.7k|        this->destroy_value();
 1047|  29.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  29.7k|    {
  504|  29.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.7k|                                  std::forward<Args>(args)...);
  506|  29.7k|        m_has_value = false;
  507|  29.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.7k|    {
  473|  29.7k|        return m_unexpected;
  474|  29.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.7k|    {
  481|  29.7k|        return std::move(m_unexpected);
  482|  29.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|   321k|    {
 8768|   321k|        return m_str;
 8769|   321k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   694k|{
 6110|   694k|    detail::check_scan_arg_types<Args...>();
 6111|   694k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   694k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5824|  1.17M|{
 5825|  1.17M|    constexpr bool default_constructible_constraint =
 5826|  1.17M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  1.17M|    static_assert(default_constructible_constraint,
 5828|  1.17M|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  1.17M|    constexpr bool destructible_constraint =
 5831|  1.17M|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  1.17M|    static_assert(destructible_constraint,
 5833|  1.17M|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  1.17M|    constexpr bool non_reference_constraint =
 5836|  1.17M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  1.17M|    static_assert(non_reference_constraint,
 5838|  1.17M|                  "Scan argument types must not be references");
 5839|       |
 5840|  1.17M|    constexpr bool movable_constraint =
 5841|  1.17M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  1.17M|    static_assert(movable_constraint,
 5843|  1.17M|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  1.17M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  1.17M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  1.17M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 6085|   694k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   694k|    {
 6087|   694k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   694k|    {
 6095|   694k|        return {detail::make_arg<
 6096|   694k|            kind, Context,
 6097|   694k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   694k|                                 typename Context::char_type>::value>(args)...};
 6099|   694k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5874|   694k|{
 5875|   694k|    return make_value<Context>(value).ref_value;
 5876|   694k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5809|   768k|{
 5810|   768k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   768k|                                  needs_context_tag>) {
 5814|   768k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   768k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   768k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5648|   768k|    {                                                                        \
 5649|   768k|        return val;                                                          \
 5650|   768k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5778|  1.17M|{
 5779|  1.17M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  1.17M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  1.17M|    constexpr bool scannable_char =
 5783|  1.17M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  1.17M|    static_assert(scannable_char,
 5785|  1.17M|                  "Cannot scan an argument of an unsupported character "
 5786|  1.17M|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  1.17M|    constexpr bool scannable_const =
 5789|  1.17M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  1.17M|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  1.17M|    constexpr bool scannable_disabled =
 5793|  1.17M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  1.17M|    static_assert(scannable_disabled,
 5795|  1.17M|                  "Cannot scan an argument that has been disabled by "
 5796|  1.17M|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  1.17M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  1.17M|    static_assert(
 5800|  1.17M|        scannable,
 5801|  1.17M|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  1.17M|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  1.17M|    return arg_value{arg};
 5805|  1.17M|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5562|  1.17M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  1.17M|    {
 5564|  1.17M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6353|  1.06M|    {
 6354|  1.06M|        return m_values;
 6355|  1.06M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   694k|        : basic_scan_args(store.desc, store.args.data())
 6136|   694k|    {
 6137|   694k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|   321k|        : m_str(r.str)
 8763|   321k|    {
 8764|   321k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   356k|    {
 1740|   356k|        return has_value();
 1741|   356k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|  1.01M|    {
 1815|  1.01M|        return &value();
 1816|  1.01M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  1.01M|    {
 1769|  1.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.01M|        return this->get_value();
 1771|  1.01M|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|   160k|{
 9750|   160k|    auto result = make_scan_result<Source, Args...>();
 9751|   160k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|   160k|                                   make_scan_args(result->values())));
 9753|   160k|    return result;
 9754|   160k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  35.3k|{
 9791|  35.3k|    auto result = make_scan_result<Source, T>();
 9792|  35.3k|    fill_scan_result(
 9793|  35.3k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  35.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  35.3k|                            detail::make_arg<scan_context>(result->value())));
 9795|  35.3k|    return result;
 9796|  35.3k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEENS0_14basic_scan_argIT_EERT0_:
 5859|  74.2k|{
 5860|  74.2k|    check_scan_arg_types<T>();
 5861|       |
 5862|  74.2k|    basic_scan_arg<Context> arg;
 5863|  74.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  74.2k|    arg.m_value = make_value<Context>(value);
 5865|  74.2k|    return arg;
 5866|  74.2k|}
_ZNR3scn2v46detail25scan_result_value_storageIJdEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|   110k|    {
 6376|   110k|        return std::get<0>(m_values);
 6377|   110k|    }
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9680|   163k|{
 9681|   163k|    auto result = make_scan_result<Source, Args...>();
 9682|   163k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|   163k|                                   make_scan_args(result->values())));
 9684|   163k|    return result;
 9685|   163k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEEDav:
 9636|   363k|{
 9637|   363k|    return scan_result_type<Source, Args...>();
 9638|   363k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   363k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   363k|        : m_value(T{}), m_has_value(true)
  427|   363k|    {
  428|   363k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2Ev:
 6570|   363k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJeEEC2Ev:
 6344|  1.19M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|   363k|{
 9622|   363k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   363k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.7k, False: 334k]
  |  |  ------------------
  ------------------
 9623|  29.7k|        out = unexpected(in.error());
 9624|  29.7k|    }
 9625|   334k|    else {
 9626|   334k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   334k|    static_cast<    \
  |  |  935|   334k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   334k|    }
 9628|   363k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  29.7k|        : base(unexpect, std::move(e.error())),
 1616|  29.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.7k|    {
 1618|  29.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  29.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.7k|          m_has_value(false)
  451|  29.7k|    {
  452|  29.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.7k|    {
 1316|  29.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1556|  29.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  902|  29.7k|    {
  903|  29.7k|        assign_common(std::move(other));
  904|  29.7k|        return *this;
  905|  29.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  29.7k|    {
  950|  29.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.7k, False: 0]
  ------------------
  951|  29.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.45M|    {
  490|  1.45M|        return m_has_value;
  491|  1.45M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.03M|    {
  456|  1.03M|        return m_value;
  457|  1.03M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  29.7k|    {
 1046|  29.7k|        this->destroy_value();
 1047|  29.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  29.7k|    {
  504|  29.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.7k|                                  std::forward<Args>(args)...);
  506|  29.7k|        m_has_value = false;
  507|  29.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.7k|    {
  473|  29.7k|        return m_unexpected;
  474|  29.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.7k|    {
  481|  29.7k|        return std::move(m_unexpected);
  482|  29.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8767|   327k|    {
 8768|   327k|        return m_str;
 8769|   327k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   706k|{
 6110|   706k|    detail::check_scan_arg_types<Args...>();
 6111|   706k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   706k|}
_ZN3scn2v46detail20check_scan_arg_typesIJeEEEbv:
 5824|  1.19M|{
 5825|  1.19M|    constexpr bool default_constructible_constraint =
 5826|  1.19M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5827|  1.19M|    static_assert(default_constructible_constraint,
 5828|  1.19M|                  "Scan argument types must be default constructible");
 5829|       |
 5830|  1.19M|    constexpr bool destructible_constraint =
 5831|  1.19M|        std::conjunction_v<std::is_destructible<Args>...>;
 5832|  1.19M|    static_assert(destructible_constraint,
 5833|  1.19M|                  "Scan argument types must be Destructible");
 5834|       |
 5835|  1.19M|    constexpr bool non_reference_constraint =
 5836|  1.19M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5837|  1.19M|    static_assert(non_reference_constraint,
 5838|  1.19M|                  "Scan argument types must not be references");
 5839|       |
 5840|  1.19M|    constexpr bool movable_constraint =
 5841|  1.19M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5842|  1.19M|    static_assert(movable_constraint,
 5843|  1.19M|                  "Scan argument types must be move constructible");
 5844|       |
 5845|  1.19M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5845:12): [Folded - Ignored]
  |  Branch (5845:48): [Folded - Ignored]
  ------------------
 5846|  1.19M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5846:12): [Folded - Ignored]
  |  Branch (5846:40): [Folded - Ignored]
  ------------------
 5847|  1.19M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEEC2ERNSt3__15tupleIJeEEE:
 6085|   706k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   706k|    {
 6087|   706k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   706k|    {
 6095|   706k|        return {detail::make_arg<
 6096|   706k|            kind, Context,
 6097|   706k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   706k|                                 typename Context::char_type>::value>(args)...};
 6099|   706k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE18EevEEPvRT2_:
 5874|   706k|{
 5875|   706k|    return make_value<Context>(value).ref_value;
 5876|   706k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEEDaRT0_:
 5809|   782k|{
 5810|   782k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   782k|                                  needs_context_tag>) {
 5814|   782k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   782k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   782k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERe:
 5648|   782k|    {                                                                        \
 5649|   782k|        return val;                                                          \
 5650|   782k|    }
_ZN3scn2v46detail15make_value_implIeReEEDaOT0_:
 5778|  1.19M|{
 5779|  1.19M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5780|  1.19M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5781|       |
 5782|  1.19M|    constexpr bool scannable_char =
 5783|  1.19M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5784|  1.19M|    static_assert(scannable_char,
 5785|  1.19M|                  "Cannot scan an argument of an unsupported character "
 5786|  1.19M|                  "type (i.e. char from a wchar_t source)");
 5787|       |
 5788|  1.19M|    constexpr bool scannable_const =
 5789|  1.19M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5790|  1.19M|    static_assert(scannable_const, "Cannot scan a const argument");
 5791|       |
 5792|  1.19M|    constexpr bool scannable_disabled =
 5793|  1.19M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5794|  1.19M|    static_assert(scannable_disabled,
 5795|  1.19M|                  "Cannot scan an argument that has been disabled by "
 5796|  1.19M|                  "flag (SCN_DISABLE_TYPE_*)");
 5797|       |
 5798|  1.19M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5799|  1.19M|    static_assert(
 5800|  1.19M|        scannable,
 5801|  1.19M|        "Cannot scan an argument. To make a type T scannable, provide "
 5802|  1.19M|        "a scn::scanner<T, CharT> specialization.");
 5803|       |
 5804|  1.19M|    return arg_value{arg};
 5805|  1.19M|}
_ZN3scn2v46detail9arg_valueC2IeEERT_:
 5562|  1.19M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5563|  1.19M|    {
 5564|  1.19M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJeEE6valuesEv:
 6353|  1.07M|    {
 6354|  1.07M|        return m_values;
 6355|  1.07M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   706k|        : basic_scan_args(store.desc, store.args.data())
 6136|   706k|    {
 6137|   706k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|   327k|        : m_str(r.str)
 8763|   327k|    {
 8764|   327k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   363k|    {
 1740|   363k|        return has_value();
 1741|   363k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1814|  1.03M|    {
 1815|  1.03M|        return &value();
 1816|  1.03M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|  1.03M|    {
 1769|  1.03M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.03M|        return this->get_value();
 1771|  1.03M|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9749|   163k|{
 9750|   163k|    auto result = make_scan_result<Source, Args...>();
 9751|   163k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|   163k|                                   make_scan_args(result->values())));
 9753|   163k|    return result;
 9754|   163k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 9790|  36.2k|{
 9791|  36.2k|    auto result = make_scan_result<Source, T>();
 9792|  36.2k|    fill_scan_result(
 9793|  36.2k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  36.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  36.2k|                            detail::make_arg<scan_context>(result->value())));
 9795|  36.2k|    return result;
 9796|  36.2k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEENS0_14basic_scan_argIT_EERT0_:
 5859|  75.9k|{
 5860|  75.9k|    check_scan_arg_types<T>();
 5861|       |
 5862|  75.9k|    basic_scan_arg<Context> arg;
 5863|  75.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  75.9k|    arg.m_value = make_value<Context>(value);
 5865|  75.9k|    return arg;
 5866|  75.9k|}
_ZNR3scn2v46detail25scan_result_value_storageIJeEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6375|   113k|    {
 6376|   113k|        return std::get<0>(m_values);
 6377|   113k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  89.1k|    {
 2869|  89.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  89.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  89.1k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  89.1k|    {
 2850|  89.1k|        return decay_copy(t.begin());
 2851|  89.1k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  51.7M|{
 2094|  51.7M|    return SCN_FWD(t);
  ------------------
  |  |  936|  51.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  51.7M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  2.45M|    {
 2926|  2.45M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  2.45M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  2.45M|    {
 2908|  2.45M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  2.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  2.45M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|   179k|{
 9681|   179k|    auto result = make_scan_result<Source, Args...>();
 9682|   179k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|   179k|                                   make_scan_args(result->values())));
 9684|   179k|    return result;
 9685|   179k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEEDav:
 9636|   395k|{
 9637|   395k|    return scan_result_type<Source, Args...>();
 9638|   395k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   395k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   395k|        : m_value(T{}), m_has_value(true)
  427|   395k|    {
  428|   395k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2Ev:
 6570|   395k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6413|  1.22M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|  1.22M|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|   395k|{
 9622|   395k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.7k, False: 365k]
  |  |  ------------------
  ------------------
 9623|  29.7k|        out = unexpected(in.error());
 9624|  29.7k|    }
 9625|   365k|    else {
 9626|   365k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   365k|    static_cast<    \
  |  |  935|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   365k|    }
 9628|   395k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|  1.22M|    {
 1740|  1.22M|        return has_value();
 1741|  1.22M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.45M|    {
  490|  2.45M|        return m_has_value;
  491|  2.45M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  89.1k|    {
 1746|  89.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  89.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  89.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  89.1k|        return this->get_unexpected().error();
 1748|  89.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  89.1k|    {
  473|  89.1k|        return m_unexpected;
  474|  89.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  29.7k|        : base(unexpect, std::move(e.error())),
 1616|  29.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.7k|    {
 1618|  29.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  29.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.7k|          m_has_value(false)
  451|  29.7k|    {
  452|  29.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.7k|    {
 1316|  29.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1556|  29.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  902|  29.7k|    {
  903|  29.7k|        assign_common(std::move(other));
  904|  29.7k|        return *this;
  905|  29.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  29.7k|    {
  950|  29.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.7k, False: 0]
  ------------------
  951|  29.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.58M|    {
  490|  1.58M|        return m_has_value;
  491|  1.58M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.12M|    {
  456|  1.12M|        return m_value;
  457|  1.12M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  29.7k|    {
 1046|  29.7k|        this->destroy_value();
 1047|  29.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  29.7k|    {
  504|  29.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.7k|                                  std::forward<Args>(args)...);
  506|  29.7k|        m_has_value = false;
  507|  29.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.7k|    {
  473|  29.7k|        return m_unexpected;
  474|  29.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.7k|    {
  481|  29.7k|        return std::move(m_unexpected);
  482|  29.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6444|  1.13M|    {
 6445|  1.13M|        m_range = std::forward<Other>(r);
 6446|  1.13M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  1.13M|    {
 1795|  1.13M|        return value();
 1796|  1.13M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  1.13M|    {
 1769|  1.13M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.13M|        return this->get_value();
 1771|  1.13M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.13M|    {
  456|  1.13M|        return m_value;
  457|  1.13M|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9460|   554k|{
 9461|   554k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|   554k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9462|   554k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9397|   554k|{
 9398|   554k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|   554k|    auto result = vscan_impl(buffer, format, args);
 9401|   554k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   554k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.1k, False: 513k]
  |  |  ------------------
  ------------------
 9402|  41.1k|        return unexpected(result.error());
 9403|  41.1k|    }
 9404|   513k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   513k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|   554k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5380|  1.22M|{
 5381|  1.22M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  1.22M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  1.22M|                  "\n"
 5385|  1.22M|                  "Unsupported range type given as input to a scanning "
 5386|  1.22M|                  "function.\n"
 5387|  1.22M|                  "A range needs to have a character type (value type) "
 5388|  1.22M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  1.22M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  1.22M|                  "to be included.\n"
 5391|  1.22M|                  "See the scnlib documentation for more details.");
 5392|  1.22M|    static_assert(
 5393|  1.22M|        !std::is_same_v<T, custom_char_traits>,
 5394|  1.22M|        "\n"
 5395|  1.22M|        "Unsupported range type given as input to a scanning "
 5396|  1.22M|        "function.\n"
 5397|  1.22M|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  1.22M|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  1.22M|        "not supported.");
 5400|  1.22M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  1.22M|                  "\n"
 5402|  1.22M|                  "Unsupported range type given as input to a scanning "
 5403|  1.22M|                  "function.\n"
 5404|  1.22M|                  "file_marker_found cannot be used as an "
 5405|  1.22M|                  "source range type to scn::scan.\n"
 5406|  1.22M|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  1.22M|                  "and do not provide an explicit source range, "
 5408|  1.22M|                  "or use scn::scan with a FILE* directly.");
 5409|  1.22M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  1.22M|                  "\n"
 5411|  1.22M|                  "Unsupported range type given as input to a scanning "
 5412|  1.22M|                  "function.\n"
 5413|  1.22M|                  "In order to be scannable, a range needs to satisfy "
 5414|  1.22M|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  1.22M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  1.22M|                  "\n"
 5417|  1.22M|                  "Unsupported range type given as input to a scanning "
 5418|  1.22M|                  "function.\n"
 5419|  1.22M|                  "A range needs to model forward_range and have a valid "
 5420|  1.22M|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  1.22M|                  "Examples of scannable ranges are std::string, "
 5422|  1.22M|                  "std::string_view, "
 5423|  1.22M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  1.22M|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  1.22M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  1.22M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|  1.22M|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|  1.22M|    else {
 5366|  1.22M|        return make_forward_scan_buffer(r);
 5367|  1.22M|    }
 5368|  1.22M|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5184|  1.22M|{
 5185|  1.22M|    return basic_scan_forward_buffer_impl(range);
 5186|  1.22M|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|  1.22M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|  1.22M|          m_cursor(ranges::begin(*m_range))
 4766|  1.22M|    {
 4767|  1.22M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4736|  1.22M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|  1.22M|    {
 4738|  1.22M|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4427|  1.22M|        : m_current_view(sv), m_is_contiguous(false)
 4428|  1.22M|    {
 4429|  1.22M|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|  1.22M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.36M|    {
 2869|  2.36M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.36M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.36M|    {
 2850|  2.36M|        return decay_copy(t.begin());
 2851|  2.36M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|  3.49M|    {
 3480|  3.49M|        return m_iterator;
 3481|  3.49M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4770|  15.0M|    {
 4771|  15.0M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 286k, False: 14.7M]
  ------------------
 4772|   286k|            return false;
 4773|   286k|        }
 4774|  14.7M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  14.7M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  14.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  14.7M|        }
 4777|  14.7M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 13.5M, False: 1.20M]
  ------------------
 4778|  13.5M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  13.5M|                                          this->m_current_view.begin(),
 4780|  13.5M|                                          this->m_current_view.end());
 4781|  13.5M|        }
 4782|  14.7M|        m_latest = *m_cursor;
 4783|  14.7M|        ++m_cursor;
 4784|  14.7M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  14.7M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  14.7M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  14.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  14.7M|        }
 4788|  14.7M|        return true;
 4789|  15.0M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  44.5M|    {
 2926|  44.5M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  44.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  44.5M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  44.5M|    {
 2908|  44.5M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  44.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  44.5M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  45.6M|    {
 3484|  45.6M|        return m_sentinel;
 3485|  45.6M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|  1.22M|    {
 4346|  1.22M|        SCN_UNUSED(position);
  ------------------
  |  |  915|  1.22M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|  1.22M|        return true;
 4348|  1.22M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  89.1k|        : base(unexpect, std::move(e.error())),
 1616|  89.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  89.1k|    {
 1618|  89.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  89.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  89.1k|          m_has_value(false)
  451|  89.1k|    {
  452|  89.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.22M|    {
 1316|  1.22M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6674|  1.13M|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|  1.13M|                      ranges::iterator_t<SourceRange>>) {
 6677|  1.13M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|  1.13M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.13M|    {
 2869|  1.13M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.13M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.13M|    {
 2850|  1.13M|        return decay_copy(t.begin());
 2851|  1.13M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6661|  1.13M|{
 6662|  1.13M|    return ranges::end(source);
 6663|  1.13M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.13M|    {
 2926|  1.13M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.13M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.13M|    {
 2908|  1.13M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.13M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  1.13M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.13M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.13M|    {
 1572|  1.13M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  1.13M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.13M|    {
  442|  1.13M|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|   358k|    {
 8768|   358k|        return m_str;
 8769|   358k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|  2.36M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.36M|    static_cast<    \
  |  |  935|  2.36M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  2.36M|    static_cast<    \
  |  |  935|  2.36M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  2.36M|    {
 3466|  2.36M|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|   358k|        : m_str(r.str)
 8763|   358k|    {
 8764|   358k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   395k|    {
 1740|   395k|        return has_value();
 1741|   395k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1814|  1.12M|    {
 1815|  1.12M|        return &value();
 1816|  1.12M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  1.12M|    {
 1769|  1.12M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.12M|        return this->get_value();
 1771|  1.12M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6433|  1.13M|    {
 6434|  1.13M|        return ranges::begin(m_range);
 6435|  1.13M|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|   179k|{
 9750|   179k|    auto result = make_scan_result<Source, Args...>();
 9751|   179k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|   179k|                                   make_scan_args(result->values())));
 9753|   179k|    return result;
 9754|   179k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9478|   554k|{
 9479|   554k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|   554k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9480|   554k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9413|   554k|{
 9414|   554k|#if !SCN_DISABLE_LOCALE
 9415|   554k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|   554k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|   554k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|   554k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|   554k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   554k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 41.1k, False: 513k]
  |  |  ------------------
  ------------------
 9422|  41.1k|        return unexpected(result.error());
 9423|  41.1k|    }
 9424|   513k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   513k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|   554k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  37.0k|{
 9791|  37.0k|    auto result = make_scan_result<Source, T>();
 9792|  37.0k|    fill_scan_result(
 9793|  37.0k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  37.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  37.0k|                            detail::make_arg<scan_context>(result->value())));
 9795|  37.0k|    return result;
 9796|  37.0k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9491|   115k|{
 9492|   115k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9493|   115k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|   115k|{
 9438|   115k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|   115k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|   115k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.85k, False: 108k]
  |  |  ------------------
  ------------------
 9442|  6.85k|        return unexpected(result.error());
 9443|  6.85k|    }
 9444|   108k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|   115k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|   186k|{
 9681|   186k|    auto result = make_scan_result<Source, Args...>();
 9682|   186k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|   186k|                                   make_scan_args(result->values())));
 9684|   186k|    return result;
 9685|   186k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEEDav:
 9636|   411k|{
 9637|   411k|    return scan_result_type<Source, Args...>();
 9638|   411k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   411k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   411k|        : m_value(T{}), m_has_value(true)
  427|   411k|    {
  428|   411k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2Ev:
 6570|   411k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|   411k|{
 9622|   411k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   411k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.7k, False: 382k]
  |  |  ------------------
  ------------------
 9623|  29.7k|        out = unexpected(in.error());
 9624|  29.7k|    }
 9625|   382k|    else {
 9626|   382k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   382k|    static_cast<    \
  |  |  935|   382k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   382k|    }
 9628|   411k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  29.7k|        : base(unexpect, std::move(e.error())),
 1616|  29.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.7k|    {
 1618|  29.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  29.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.7k|          m_has_value(false)
  451|  29.7k|    {
  452|  29.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.7k|    {
 1316|  29.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1556|  29.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  902|  29.7k|    {
  903|  29.7k|        assign_common(std::move(other));
  904|  29.7k|        return *this;
  905|  29.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  29.7k|    {
  950|  29.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.7k, False: 0]
  ------------------
  951|  29.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.64M|    {
  490|  1.64M|        return m_has_value;
  491|  1.64M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.17M|    {
  456|  1.17M|        return m_value;
  457|  1.17M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  29.7k|    {
 1046|  29.7k|        this->destroy_value();
 1047|  29.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  29.7k|    {
  504|  29.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.7k|                                  std::forward<Args>(args)...);
  506|  29.7k|        m_has_value = false;
  507|  29.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.7k|    {
  473|  29.7k|        return m_unexpected;
  474|  29.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.7k|    {
  481|  29.7k|        return std::move(m_unexpected);
  482|  29.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|   372k|    {
 8768|   372k|        return m_str;
 8769|   372k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|   372k|        : m_str(r.str)
 8763|   372k|    {
 8764|   372k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   411k|    {
 1740|   411k|        return has_value();
 1741|   411k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1814|  1.17M|    {
 1815|  1.17M|        return &value();
 1816|  1.17M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  1.17M|    {
 1769|  1.17M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.17M|        return this->get_value();
 1771|  1.17M|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|   186k|{
 9750|   186k|    auto result = make_scan_result<Source, Args...>();
 9751|   186k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|   186k|                                   make_scan_args(result->values())));
 9753|   186k|    return result;
 9754|   186k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  38.9k|{
 9791|  38.9k|    auto result = make_scan_result<Source, T>();
 9792|  38.9k|    fill_scan_result(
 9793|  38.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  38.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  38.9k|                            detail::make_arg<scan_context>(result->value())));
 9795|  38.9k|    return result;
 9796|  38.9k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9680|   189k|{
 9681|   189k|    auto result = make_scan_result<Source, Args...>();
 9682|   189k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9683|   189k|                                   make_scan_args(result->values())));
 9684|   189k|    return result;
 9685|   189k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEEDav:
 9636|   418k|{
 9637|   418k|    return scan_result_type<Source, Args...>();
 9638|   418k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   418k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   418k|        : m_value(T{}), m_has_value(true)
  427|   418k|    {
  428|   418k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2Ev:
 6570|   418k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|   418k|{
 9622|   418k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   418k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.7k, False: 388k]
  |  |  ------------------
  ------------------
 9623|  29.7k|        out = unexpected(in.error());
 9624|  29.7k|    }
 9625|   388k|    else {
 9626|   388k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   388k|    static_cast<    \
  |  |  935|   388k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   388k|    }
 9628|   418k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  29.7k|        : base(unexpect, std::move(e.error())),
 1616|  29.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  29.7k|    {
 1618|  29.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  29.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  29.7k|          m_has_value(false)
  451|  29.7k|    {
  452|  29.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  29.7k|    {
 1316|  29.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1556|  29.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  902|  29.7k|    {
  903|  29.7k|        assign_common(std::move(other));
  904|  29.7k|        return *this;
  905|  29.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  29.7k|    {
  950|  29.7k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 29.7k, False: 0]
  ------------------
  951|  29.7k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 29.7k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  29.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  29.7k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.67M|    {
  490|  1.67M|        return m_has_value;
  491|  1.67M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.19M|    {
  456|  1.19M|        return m_value;
  457|  1.19M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  29.7k|    {
 1046|  29.7k|        this->destroy_value();
 1047|  29.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  29.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  29.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  29.7k|    {
  504|  29.7k|        scn::detail::construct_at(&get_unexpected(),
  505|  29.7k|                                  std::forward<Args>(args)...);
  506|  29.7k|        m_has_value = false;
  507|  29.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  29.7k|    {
  473|  29.7k|        return m_unexpected;
  474|  29.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  29.7k|    {
  481|  29.7k|        return std::move(m_unexpected);
  482|  29.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8767|   378k|    {
 8768|   378k|        return m_str;
 8769|   378k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8762|   378k|        : m_str(r.str)
 8763|   378k|    {
 8764|   378k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   418k|    {
 1740|   418k|        return has_value();
 1741|   418k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1814|  1.19M|    {
 1815|  1.19M|        return &value();
 1816|  1.19M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|  1.19M|    {
 1769|  1.19M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.19M|        return this->get_value();
 1771|  1.19M|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9749|   189k|{
 9750|   189k|    auto result = make_scan_result<Source, Args...>();
 9751|   189k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9752|   189k|                                   make_scan_args(result->values())));
 9753|   189k|    return result;
 9754|   189k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 9790|  39.6k|{
 9791|  39.6k|    auto result = make_scan_result<Source, T>();
 9792|  39.6k|    fill_scan_result(
 9793|  39.6k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  39.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9794|  39.6k|                            detail::make_arg<scan_context>(result->value())));
 9795|  39.6k|    return result;
 9796|  39.6k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   182k|    {
 2869|   182k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   182k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   182k|    {
 2850|   182k|        return decay_copy(t.begin());
 2851|   182k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|  4.74M|{
 2094|  4.74M|    return SCN_FWD(t);
  ------------------
  |  |  936|  4.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  4.74M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.17M|    {
 2926|  1.17M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.17M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.17M|    {
 2908|  1.17M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.17M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEEDav:
 9636|   179k|{
 9637|   179k|    return scan_result_type<Source, Args...>();
 9638|   179k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   179k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   179k|        : m_value(T{}), m_has_value(true)
  427|   179k|    {
  428|   179k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2Ev:
 6570|   179k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6413|   586k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|   586k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|   179k|{
 9622|   179k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 59.4k, False: 120k]
  |  |  ------------------
  ------------------
 9623|  59.4k|        out = unexpected(in.error());
 9624|  59.4k|    }
 9625|   120k|    else {
 9626|   120k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   120k|    static_cast<    \
  |  |  935|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   120k|    }
 9628|   179k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|   586k|    {
 1740|   586k|        return has_value();
 1741|   586k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.17M|    {
  490|  1.17M|        return m_has_value;
  491|  1.17M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|   178k|    {
 1746|   178k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   178k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   178k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   178k|        return this->get_unexpected().error();
 1748|   178k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   178k|    {
  473|   178k|        return m_unexpected;
  474|   178k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  59.4k|        : base(unexpect, std::move(e.error())),
 1616|  59.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  59.4k|    {
 1618|  59.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  59.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  59.4k|          m_has_value(false)
  451|  59.4k|    {
  452|  59.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  59.4k|    {
 1316|  59.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1556|  59.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  902|  59.4k|    {
  903|  59.4k|        assign_common(std::move(other));
  904|  59.4k|        return *this;
  905|  59.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  59.4k|    {
  950|  59.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 59.4k, False: 0]
  ------------------
  951|  59.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 59.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  59.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  59.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   718k|    {
  490|   718k|        return m_has_value;
  491|   718k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   420k|    {
  456|   420k|        return m_value;
  457|   420k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  59.4k|    {
 1046|  59.4k|        this->destroy_value();
 1047|  59.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  59.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  59.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  59.4k|    {
  504|  59.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  59.4k|                                  std::forward<Args>(args)...);
  506|  59.4k|        m_has_value = false;
  507|  59.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  59.4k|    {
  473|  59.4k|        return m_unexpected;
  474|  59.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  59.4k|    {
  481|  59.4k|        return std::move(m_unexpected);
  482|  59.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6444|   407k|    {
 6445|   407k|        m_range = std::forward<Other>(r);
 6446|   407k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   407k|    {
 1795|   407k|        return value();
 1796|   407k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   407k|    {
 1769|   407k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   407k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   407k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   407k|        return this->get_value();
 1771|   407k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   407k|    {
  456|   407k|        return m_value;
  457|   407k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9397|   267k|{
 9398|   267k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|   267k|    auto result = vscan_impl(buffer, format, args);
 9401|   267k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 82.2k, False: 184k]
  |  |  ------------------
  ------------------
 9402|  82.2k|        return unexpected(result.error());
 9403|  82.2k|    }
 9404|   184k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|   267k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5380|   586k|{
 5381|   586k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   586k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   586k|                  "\n"
 5385|   586k|                  "Unsupported range type given as input to a scanning "
 5386|   586k|                  "function.\n"
 5387|   586k|                  "A range needs to have a character type (value type) "
 5388|   586k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   586k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   586k|                  "to be included.\n"
 5391|   586k|                  "See the scnlib documentation for more details.");
 5392|   586k|    static_assert(
 5393|   586k|        !std::is_same_v<T, custom_char_traits>,
 5394|   586k|        "\n"
 5395|   586k|        "Unsupported range type given as input to a scanning "
 5396|   586k|        "function.\n"
 5397|   586k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   586k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   586k|        "not supported.");
 5400|   586k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   586k|                  "\n"
 5402|   586k|                  "Unsupported range type given as input to a scanning "
 5403|   586k|                  "function.\n"
 5404|   586k|                  "file_marker_found cannot be used as an "
 5405|   586k|                  "source range type to scn::scan.\n"
 5406|   586k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   586k|                  "and do not provide an explicit source range, "
 5408|   586k|                  "or use scn::scan with a FILE* directly.");
 5409|   586k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   586k|                  "\n"
 5411|   586k|                  "Unsupported range type given as input to a scanning "
 5412|   586k|                  "function.\n"
 5413|   586k|                  "In order to be scannable, a range needs to satisfy "
 5414|   586k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   586k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   586k|                  "\n"
 5417|   586k|                  "Unsupported range type given as input to a scanning "
 5418|   586k|                  "function.\n"
 5419|   586k|                  "A range needs to model forward_range and have a valid "
 5420|   586k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   586k|                  "Examples of scannable ranges are std::string, "
 5422|   586k|                  "std::string_view, "
 5423|   586k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   586k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   586k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   586k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   586k|{
 5320|   586k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   586k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   586k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   586k|    {
 3000|   586k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   586k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   586k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   586k|    {
 2981|   586k|        return t.data();
 2982|   586k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|   586k|    {
 3383|   586k|        return detail::to_address(ranges::begin(derived()));
 3384|   586k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  2.76M|{
  316|  2.76M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  2.76M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  2.76M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  2.76M|{
  294|  2.76M|    return p;
  295|  2.76M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   994k|    {
 2869|   994k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   994k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   994k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   994k|    {
 2850|   994k|        return decay_copy(t.begin());
 2851|   994k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|  21.5M|    {
 3480|  21.5M|        return m_iterator;
 3481|  21.5M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|   586k|    {
 3339|   586k|        return static_cast<const D&>(*this);
 3340|   586k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   586k|    {
 3075|   586k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   586k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   586k|    {
 3041|   586k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   586k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   586k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  3.05M|    {
 3496|  3.05M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  3.05M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|   178k|        : base(unexpect, std::move(e.error())),
 1616|   178k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   178k|    {
 1618|   178k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|   178k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   178k|          m_has_value(false)
  451|   178k|    {
  452|   178k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   586k|    {
 1316|   586k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6674|   407k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|   407k|                      ranges::iterator_t<SourceRange>>) {
 6677|   407k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|   407k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.98M|    {
 2869|  1.98M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.98M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.98M|    {
 2850|  1.98M|        return decay_copy(t.begin());
 2851|  1.98M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6661|   407k|{
 6662|   407k|    return ranges::end(source);
 6663|   407k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   407k|    {
 2926|   407k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   407k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   407k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   407k|    {
 2908|   407k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   407k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   407k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|  11.9M|    {
 3484|  11.9M|        return m_sentinel;
 3485|  11.9M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   407k|        : base(std::in_place, std::forward<U>(val)),
 1570|   407k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   407k|    {
 1572|   407k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   407k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   407k|    {
  442|   407k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|   164k|    {
 8768|   164k|        return m_str;
 8769|   164k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   329k|{
 6110|   329k|    detail::check_scan_arg_types<Args...>();
 6111|   329k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   329k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEEC2ERNSt3__15tupleIJfEEE:
 6085|   329k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   329k|    {
 6087|   329k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   329k|    {
 6095|   329k|        return {detail::make_arg<
 6096|   329k|            kind, Context,
 6097|   329k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   329k|                                 typename Context::char_type>::value>(args)...};
 6099|   329k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5874|   329k|{
 5875|   329k|    return make_value<Context>(value).ref_value;
 5876|   329k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEEDaRT0_:
 5809|   359k|{
 5810|   359k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   359k|                                  needs_context_tag>) {
 5814|   359k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   359k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   359k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERf:
 5648|   359k|    {                                                                        \
 5649|   359k|        return val;                                                          \
 5650|   359k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   329k|        : basic_scan_args(store.desc, store.args.data())
 6136|   329k|    {
 6137|   329k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6187|  1.06M|        : m_desc(desc), m_builtin_values(data)
 6188|  1.06M|    {
 6189|  1.06M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  7.82M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  7.82M|    static_cast<    \
  |  |  935|  7.82M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  7.82M|    static_cast<    \
  |  |  935|  7.82M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  7.82M|    {
 3466|  7.82M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8445|  1.06M|{
 8446|  1.06M|    return s;
 8447|  1.06M|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8417|  1.06M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|   164k|        : m_str(r.str)
 8763|   164k|    {
 8764|   164k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   179k|    {
 1740|   179k|        return has_value();
 1741|   179k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1814|   420k|    {
 1815|   420k|        return &value();
 1816|   420k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   420k|    {
 1769|   420k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   420k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   420k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   420k|        return this->get_value();
 1771|   420k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6433|   407k|    {
 6434|   407k|        return ranges::begin(m_range);
 6435|   407k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9413|   267k|{
 9414|   267k|#if !SCN_DISABLE_LOCALE
 9415|   267k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|   267k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|   267k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|   267k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|   267k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 82.2k, False: 184k]
  |  |  ------------------
  ------------------
 9422|  82.2k|        return unexpected(result.error());
 9423|  82.2k|    }
 9424|   184k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|   267k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  51.9k|{
 9438|  51.9k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  51.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  51.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  51.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 13.7k, False: 38.2k]
  |  |  ------------------
  ------------------
 9442|  13.7k|        return unexpected(result.error());
 9443|  13.7k|    }
 9444|  38.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  38.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  51.9k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEENS0_14basic_scan_argIT_EERT0_:
 5859|  30.1k|{
 5860|  30.1k|    check_scan_arg_types<T>();
 5861|       |
 5862|  30.1k|    basic_scan_arg<Context> arg;
 5863|  30.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  30.1k|    arg.m_value = make_value<Context>(value);
 5865|  30.1k|    return arg;
 5866|  30.1k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5954|  1.17M|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEEDav:
 9636|   201k|{
 9637|   201k|    return scan_result_type<Source, Args...>();
 9638|   201k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   201k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   201k|        : m_value(T{}), m_has_value(true)
  427|   201k|    {
  428|   201k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6570|   201k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|   201k|{
 9622|   201k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 59.4k, False: 142k]
  |  |  ------------------
  ------------------
 9623|  59.4k|        out = unexpected(in.error());
 9624|  59.4k|    }
 9625|   142k|    else {
 9626|   142k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   142k|    static_cast<    \
  |  |  935|   142k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   142k|    }
 9628|   201k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  59.4k|        : base(unexpect, std::move(e.error())),
 1616|  59.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  59.4k|    {
 1618|  59.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  59.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  59.4k|          m_has_value(false)
  451|  59.4k|    {
  452|  59.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  59.4k|    {
 1316|  59.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1556|  59.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  902|  59.4k|    {
  903|  59.4k|        assign_common(std::move(other));
  904|  59.4k|        return *this;
  905|  59.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  59.4k|    {
  950|  59.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 59.4k, False: 0]
  ------------------
  951|  59.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 59.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  59.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  59.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   806k|    {
  490|   806k|        return m_has_value;
  491|   806k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   486k|    {
  456|   486k|        return m_value;
  457|   486k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  59.4k|    {
 1046|  59.4k|        this->destroy_value();
 1047|  59.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  59.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  59.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  59.4k|    {
  504|  59.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  59.4k|                                  std::forward<Args>(args)...);
  506|  59.4k|        m_has_value = false;
  507|  59.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  59.4k|    {
  473|  59.4k|        return m_unexpected;
  474|  59.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  59.4k|    {
  481|  59.4k|        return std::move(m_unexpected);
  482|  59.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|   183k|    {
 8768|   183k|        return m_str;
 8769|   183k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   366k|{
 6110|   366k|    detail::check_scan_arg_types<Args...>();
 6111|   366k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   366k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 6085|   366k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   366k|    {
 6087|   366k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   366k|    {
 6095|   366k|        return {detail::make_arg<
 6096|   366k|            kind, Context,
 6097|   366k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   366k|                                 typename Context::char_type>::value>(args)...};
 6099|   366k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5874|   366k|{
 5875|   366k|    return make_value<Context>(value).ref_value;
 5876|   366k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5809|   403k|{
 5810|   403k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   403k|                                  needs_context_tag>) {
 5814|   403k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   403k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   403k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5648|   403k|    {                                                                        \
 5649|   403k|        return val;                                                          \
 5650|   403k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   366k|        : basic_scan_args(store.desc, store.args.data())
 6136|   366k|    {
 6137|   366k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|   183k|        : m_str(r.str)
 8763|   183k|    {
 8764|   183k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   201k|    {
 1740|   201k|        return has_value();
 1741|   201k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1814|   486k|    {
 1815|   486k|        return &value();
 1816|   486k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   486k|    {
 1769|   486k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   486k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   486k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   486k|        return this->get_value();
 1771|   486k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEENS0_14basic_scan_argIT_EERT0_:
 5859|  36.4k|{
 5860|  36.4k|    check_scan_arg_types<T>();
 5861|       |
 5862|  36.4k|    basic_scan_arg<Context> arg;
 5863|  36.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  36.4k|    arg.m_value = make_value<Context>(value);
 5865|  36.4k|    return arg;
 5866|  36.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEEDav:
 9636|   204k|{
 9637|   204k|    return scan_result_type<Source, Args...>();
 9638|   204k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   204k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   204k|        : m_value(T{}), m_has_value(true)
  427|   204k|    {
  428|   204k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2Ev:
 6570|   204k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9621|   204k|{
 9622|   204k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 59.4k, False: 145k]
  |  |  ------------------
  ------------------
 9623|  59.4k|        out = unexpected(in.error());
 9624|  59.4k|    }
 9625|   145k|    else {
 9626|   145k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   145k|    static_cast<    \
  |  |  935|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   145k|    }
 9628|   204k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1615|  59.4k|        : base(unexpect, std::move(e.error())),
 1616|  59.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  59.4k|    {
 1618|  59.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  449|  59.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  59.4k|          m_has_value(false)
  451|  59.4k|    {
  452|  59.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  59.4k|    {
 1316|  59.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1556|  59.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  902|  59.4k|    {
  903|  59.4k|        assign_common(std::move(other));
  904|  59.4k|        return *this;
  905|  59.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  949|  59.4k|    {
  950|  59.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 59.4k, False: 0]
  ------------------
  951|  59.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 59.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  59.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  59.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   819k|    {
  490|   819k|        return m_has_value;
  491|   819k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   495k|    {
  456|   495k|        return m_value;
  457|   495k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1045|  59.4k|    {
 1046|  59.4k|        this->destroy_value();
 1047|  59.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  59.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  59.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  503|  59.4k|    {
  504|  59.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  59.4k|                                  std::forward<Args>(args)...);
  506|  59.4k|        m_has_value = false;
  507|  59.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  59.4k|    {
  473|  59.4k|        return m_unexpected;
  474|  59.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  59.4k|    {
  481|  59.4k|        return std::move(m_unexpected);
  482|  59.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8767|   186k|    {
 8768|   186k|        return m_str;
 8769|   186k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6109|   372k|{
 6110|   372k|    detail::check_scan_arg_types<Args...>();
 6111|   372k|    return detail::scan_arg_store<Context, Args...>(values);
 6112|   372k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEEC2ERNSt3__15tupleIJeEEE:
 6085|   372k|        : args(std::apply(make_argptrs<Args...>, args))
 6086|   372k|    {
 6087|   372k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6094|   372k|    {
 6095|   372k|        return {detail::make_arg<
 6096|   372k|            kind, Context,
 6097|   372k|            mapped_type_constant<remove_cvref_t<A>,
 6098|   372k|                                 typename Context::char_type>::value>(args)...};
 6099|   372k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE18EevEEPvRT2_:
 5874|   372k|{
 5875|   372k|    return make_value<Context>(value).ref_value;
 5876|   372k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEEDaRT0_:
 5809|   409k|{
 5810|   409k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5811|       |
 5812|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5813|   409k|                                  needs_context_tag>) {
 5814|   409k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5815|       |    }
 5816|       |    else {
 5817|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5818|       |            value, context_tag<Context>{}));
 5819|       |    }
 5820|   409k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERe:
 5648|   409k|    {                                                                        \
 5649|   409k|        return val;                                                          \
 5650|   409k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6135|   372k|        : basic_scan_args(store.desc, store.args.data())
 6136|   372k|    {
 6137|   372k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|   186k|        : m_str(r.str)
 8763|   186k|    {
 8764|   186k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   204k|    {
 1740|   204k|        return has_value();
 1741|   204k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1814|   495k|    {
 1815|   495k|        return &value();
 1816|   495k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1768|   495k|    {
 1769|   495k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   495k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   495k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   495k|        return this->get_value();
 1771|   495k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEENS0_14basic_scan_argIT_EERT0_:
 5859|  37.2k|{
 5860|  37.2k|    check_scan_arg_types<T>();
 5861|       |
 5862|  37.2k|    basic_scan_arg<Context> arg;
 5863|  37.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5864|  37.2k|    arg.m_value = make_value<Context>(value);
 5865|  37.2k|    return arg;
 5866|  37.2k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   178k|    {
 2869|   178k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   178k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   178k|    {
 2850|   178k|        return decay_copy(t.begin());
 2851|   178k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|  11.6M|{
 2094|  11.6M|    return SCN_FWD(t);
  ------------------
  |  |  936|  11.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  11.6M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.17M|    {
 2926|  1.17M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.17M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.17M|    {
 2908|  1.17M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.17M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEEDav:
 9636|   179k|{
 9637|   179k|    return scan_result_type<Source, Args...>();
 9638|   179k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1551|   179k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  426|   179k|        : m_value(T{}), m_has_value(true)
  427|   179k|    {
  428|   179k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2Ev:
 6570|   179k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6413|   585k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|   585k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|   179k|{
 9622|   179k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 59.4k, False: 120k]
  |  |  ------------------
  ------------------
 9623|  59.4k|        out = unexpected(in.error());
 9624|  59.4k|    }
 9625|   120k|    else {
 9626|   120k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   120k|    static_cast<    \
  |  |  935|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   120k|    }
 9628|   179k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   585k|    {
 1740|   585k|        return has_value();
 1741|   585k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.17M|    {
  490|  1.17M|        return m_has_value;
  491|  1.17M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|   178k|    {
 1746|   178k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   178k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   178k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   178k|        return this->get_unexpected().error();
 1748|   178k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   178k|    {
  473|   178k|        return m_unexpected;
  474|   178k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  59.4k|        : base(unexpect, std::move(e.error())),
 1616|  59.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  59.4k|    {
 1618|  59.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  59.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  59.4k|          m_has_value(false)
  451|  59.4k|    {
  452|  59.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  59.4k|    {
 1316|  59.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1556|  59.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  902|  59.4k|    {
  903|  59.4k|        assign_common(std::move(other));
  904|  59.4k|        return *this;
  905|  59.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  59.4k|    {
  950|  59.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 59.4k, False: 0]
  ------------------
  951|  59.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 59.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  59.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  59.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   718k|    {
  490|   718k|        return m_has_value;
  491|   718k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   419k|    {
  456|   419k|        return m_value;
  457|   419k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  59.4k|    {
 1046|  59.4k|        this->destroy_value();
 1047|  59.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  59.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  59.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  59.4k|    {
  504|  59.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  59.4k|                                  std::forward<Args>(args)...);
  506|  59.4k|        m_has_value = false;
  507|  59.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  59.4k|    {
  473|  59.4k|        return m_unexpected;
  474|  59.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  59.4k|    {
  481|  59.4k|        return std::move(m_unexpected);
  482|  59.4k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6444|   407k|    {
 6445|   407k|        m_range = std::forward<Other>(r);
 6446|   407k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   407k|    {
 1795|   407k|        return value();
 1796|   407k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   407k|    {
 1769|   407k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   407k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   407k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   407k|        return this->get_value();
 1771|   407k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   407k|    {
  456|   407k|        return m_value;
  457|   407k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9397|   266k|{
 9398|   266k|    auto buffer = make_scan_buffer(range);
 9399|       |
 9400|   266k|    auto result = vscan_impl(buffer, format, args);
 9401|   266k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 82.2k, False: 184k]
  |  |  ------------------
  ------------------
 9402|  82.2k|        return unexpected(result.error());
 9403|  82.2k|    }
 9404|   184k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9405|   266k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5380|   585k|{
 5381|   585k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   585k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   585k|                  "\n"
 5385|   585k|                  "Unsupported range type given as input to a scanning "
 5386|   585k|                  "function.\n"
 5387|   585k|                  "A range needs to have a character type (value type) "
 5388|   585k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   585k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   585k|                  "to be included.\n"
 5391|   585k|                  "See the scnlib documentation for more details.");
 5392|   585k|    static_assert(
 5393|   585k|        !std::is_same_v<T, custom_char_traits>,
 5394|   585k|        "\n"
 5395|   585k|        "Unsupported range type given as input to a scanning "
 5396|   585k|        "function.\n"
 5397|   585k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   585k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   585k|        "not supported.");
 5400|   585k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   585k|                  "\n"
 5402|   585k|                  "Unsupported range type given as input to a scanning "
 5403|   585k|                  "function.\n"
 5404|   585k|                  "file_marker_found cannot be used as an "
 5405|   585k|                  "source range type to scn::scan.\n"
 5406|   585k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   585k|                  "and do not provide an explicit source range, "
 5408|   585k|                  "or use scn::scan with a FILE* directly.");
 5409|   585k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   585k|                  "\n"
 5411|   585k|                  "Unsupported range type given as input to a scanning "
 5412|   585k|                  "function.\n"
 5413|   585k|                  "In order to be scannable, a range needs to satisfy "
 5414|   585k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   585k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   585k|                  "\n"
 5417|   585k|                  "Unsupported range type given as input to a scanning "
 5418|   585k|                  "function.\n"
 5419|   585k|                  "A range needs to model forward_range and have a valid "
 5420|   585k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   585k|                  "Examples of scannable ranges are std::string, "
 5422|   585k|                  "std::string_view, "
 5423|   585k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   585k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   585k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   585k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   585k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   585k|    else {
 5366|   585k|        return make_forward_scan_buffer(r);
 5367|   585k|    }
 5368|   585k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5184|   585k|{
 5185|   585k|    return basic_scan_forward_buffer_impl(range);
 5186|   585k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   585k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   585k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   585k|          m_cursor(ranges::begin(*m_range))
 4766|   585k|    {
 4767|   585k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4736|   585k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   585k|    {
 4738|   585k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4427|   585k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   585k|    {
 4429|   585k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   585k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   993k|    {
 2869|   993k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   993k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   993k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   993k|    {
 2850|   993k|        return decay_copy(t.begin());
 2851|   993k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|  1.40M|    {
 3480|  1.40M|        return m_iterator;
 3481|  1.40M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4770|  2.94M|    {
 4771|  2.94M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 180k, False: 2.76M]
  ------------------
 4772|   180k|            return false;
 4773|   180k|        }
 4774|  2.76M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  2.76M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  2.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  2.76M|        }
 4777|  2.76M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 2.18M, False: 584k]
  ------------------
 4778|  2.18M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  2.18M|                                          this->m_current_view.begin(),
 4780|  2.18M|                                          this->m_current_view.end());
 4781|  2.18M|        }
 4782|  2.76M|        m_latest = *m_cursor;
 4783|  2.76M|        ++m_cursor;
 4784|  2.76M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  2.76M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  2.76M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  2.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  2.76M|        }
 4788|  2.76M|        return true;
 4789|  2.94M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  8.47M|    {
 2926|  8.47M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  8.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  8.47M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  8.47M|    {
 2908|  8.47M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  8.47M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  8.47M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|  8.88M|    {
 3484|  8.88M|        return m_sentinel;
 3485|  8.88M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|   585k|    {
 4346|   585k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   585k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   585k|        return true;
 4348|   585k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|   178k|        : base(unexpect, std::move(e.error())),
 1616|   178k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   178k|    {
 1618|   178k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|   178k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   178k|          m_has_value(false)
  451|   178k|    {
  452|   178k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   585k|    {
 1316|   585k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6674|   407k|{
 6675|       |    if constexpr (ranges::random_access_iterator<
 6676|   407k|                      ranges::iterator_t<SourceRange>>) {
 6677|   407k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6678|       |    }
 6679|       |    else {
 6680|       |        auto it = ranges::begin(source);
 6681|       |        while (n > 0) {
 6682|       |            --n;
 6683|       |            ++it;
 6684|       |        }
 6685|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6686|       |    }
 6687|   407k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   407k|    {
 2869|   407k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   407k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   407k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   407k|    {
 2850|   407k|        return decay_copy(t.begin());
 2851|   407k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6661|   407k|{
 6662|   407k|    return ranges::end(source);
 6663|   407k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   407k|    {
 2926|   407k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   407k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   407k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   407k|    {
 2908|   407k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   407k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   407k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   407k|        : base(std::in_place, std::forward<U>(val)),
 1570|   407k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   407k|    {
 1572|   407k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   407k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   407k|    {
  442|   407k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|   164k|    {
 8768|   164k|        return m_str;
 8769|   164k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   993k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   993k|    static_cast<    \
  |  |  935|   993k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   993k|    static_cast<    \
  |  |  935|   993k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   993k|    {
 3466|   993k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|   164k|        : m_str(r.str)
 8763|   164k|    {
 8764|   164k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1739|   179k|    {
 1740|   179k|        return has_value();
 1741|   179k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1814|   419k|    {
 1815|   419k|        return &value();
 1816|   419k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   419k|    {
 1769|   419k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   419k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   419k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   419k|        return this->get_value();
 1771|   419k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6433|   407k|    {
 6434|   407k|        return ranges::begin(m_range);
 6435|   407k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9413|   266k|{
 9414|   266k|#if !SCN_DISABLE_LOCALE
 9415|   266k|    auto buffer = detail::make_scan_buffer(range);
 9416|       |
 9417|   266k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9418|   266k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9419|   266k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9420|       |
 9421|   266k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 82.2k, False: 184k]
  |  |  ------------------
  ------------------
 9422|  82.2k|        return unexpected(result.error());
 9423|  82.2k|    }
 9424|   184k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9425|       |#else
 9426|       |    static_assert(dependent_false<Locale>::value,
 9427|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9428|       |
 9429|       |    return {};
 9430|       |#endif
 9431|   266k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9437|  51.9k|{
 9438|  51.9k|    auto buffer = detail::make_scan_buffer(range);
 9439|       |
 9440|  51.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 9441|  51.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  51.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 13.7k, False: 38.1k]
  |  |  ------------------
  ------------------
 9442|  13.7k|        return unexpected(result.error());
 9443|  13.7k|    }
 9444|  38.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  38.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9445|  51.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEEDav:
 9636|   201k|{
 9637|   201k|    return scan_result_type<Source, Args...>();
 9638|   201k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1551|   201k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  426|   201k|        : m_value(T{}), m_has_value(true)
  427|   201k|    {
  428|   201k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2Ev:
 6570|   201k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|   201k|{
 9622|   201k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 59.4k, False: 142k]
  |  |  ------------------
  ------------------
 9623|  59.4k|        out = unexpected(in.error());
 9624|  59.4k|    }
 9625|   142k|    else {
 9626|   142k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   142k|    static_cast<    \
  |  |  935|   142k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   142k|    }
 9628|   201k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  59.4k|        : base(unexpect, std::move(e.error())),
 1616|  59.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  59.4k|    {
 1618|  59.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  59.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  59.4k|          m_has_value(false)
  451|  59.4k|    {
  452|  59.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  59.4k|    {
 1316|  59.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1556|  59.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  902|  59.4k|    {
  903|  59.4k|        assign_common(std::move(other));
  904|  59.4k|        return *this;
  905|  59.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  59.4k|    {
  950|  59.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 59.4k, False: 0]
  ------------------
  951|  59.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 59.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  59.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  59.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   806k|    {
  490|   806k|        return m_has_value;
  491|   806k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   485k|    {
  456|   485k|        return m_value;
  457|   485k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  59.4k|    {
 1046|  59.4k|        this->destroy_value();
 1047|  59.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  59.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  59.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  59.4k|    {
  504|  59.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  59.4k|                                  std::forward<Args>(args)...);
  506|  59.4k|        m_has_value = false;
  507|  59.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  59.4k|    {
  473|  59.4k|        return m_unexpected;
  474|  59.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  59.4k|    {
  481|  59.4k|        return std::move(m_unexpected);
  482|  59.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|   183k|    {
 8768|   183k|        return m_str;
 8769|   183k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|   183k|        : m_str(r.str)
 8763|   183k|    {
 8764|   183k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1739|   201k|    {
 1740|   201k|        return has_value();
 1741|   201k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1814|   485k|    {
 1815|   485k|        return &value();
 1816|   485k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   485k|    {
 1769|   485k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   485k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   485k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   485k|        return this->get_value();
 1771|   485k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEEDav:
 9636|   204k|{
 9637|   204k|    return scan_result_type<Source, Args...>();
 9638|   204k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1551|   204k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  426|   204k|        : m_value(T{}), m_has_value(true)
  427|   204k|    {
  428|   204k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2Ev:
 6570|   204k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9621|   204k|{
 9622|   204k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 59.4k, False: 145k]
  |  |  ------------------
  ------------------
 9623|  59.4k|        out = unexpected(in.error());
 9624|  59.4k|    }
 9625|   145k|    else {
 9626|   145k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   145k|    static_cast<    \
  |  |  935|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9627|   145k|    }
 9628|   204k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1615|  59.4k|        : base(unexpect, std::move(e.error())),
 1616|  59.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  59.4k|    {
 1618|  59.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  449|  59.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  59.4k|          m_has_value(false)
  451|  59.4k|    {
  452|  59.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  59.4k|    {
 1316|  59.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1556|  59.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  902|  59.4k|    {
  903|  59.4k|        assign_common(std::move(other));
  904|  59.4k|        return *this;
  905|  59.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  949|  59.4k|    {
  950|  59.4k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 59.4k, False: 0]
  ------------------
  951|  59.4k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 59.4k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  59.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  59.4k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   818k|    {
  490|   818k|        return m_has_value;
  491|   818k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   495k|    {
  456|   495k|        return m_value;
  457|   495k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1045|  59.4k|    {
 1046|  59.4k|        this->destroy_value();
 1047|  59.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  59.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  59.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  503|  59.4k|    {
  504|  59.4k|        scn::detail::construct_at(&get_unexpected(),
  505|  59.4k|                                  std::forward<Args>(args)...);
  506|  59.4k|        m_has_value = false;
  507|  59.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  59.4k|    {
  473|  59.4k|        return m_unexpected;
  474|  59.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  59.4k|    {
  481|  59.4k|        return std::move(m_unexpected);
  482|  59.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8767|   186k|    {
 8768|   186k|        return m_str;
 8769|   186k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8762|   186k|        : m_str(r.str)
 8763|   186k|    {
 8764|   186k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1739|   204k|    {
 1740|   204k|        return has_value();
 1741|   204k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1814|   495k|    {
 1815|   495k|        return &value();
 1816|   495k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1768|   495k|    {
 1769|   495k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   495k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   495k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   495k|        return this->get_value();
 1771|   495k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|  3.81M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|  3.81M|    {
 3742|  3.81M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  3.81M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|  3.81M|    }
_ZNK3scn2v410scan_error4codeEv:
 3752|   275k|    {
 3753|   275k|        return m_code;
 3754|   275k|    }
_ZNK3scn2v410scan_error3msgEv:
 3757|  1.99k|    {
 3758|  1.99k|        return m_msg;
 3759|  1.99k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   912k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   912k|    else {
 3981|   912k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   912k|    }
 3983|   912k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  55.1M|    {
 3480|  55.1M|        return m_iterator;
 3481|  55.1M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  24.5M|    {
 3480|  24.5M|        return m_iterator;
 3481|  24.5M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  19.9M|    {
  572|  19.9M|        return m_has_value;
  573|  19.9M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|  4.02M|    {
  555|  4.02M|        return m_unexpected;
  556|  4.02M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|   425k|    {
 1746|   425k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   425k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   425k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   425k|        return this->get_unexpected().error();
 1748|   425k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7011|  2.48M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7055|  1.81M|    {
 7056|  1.81M|        m_specs.type = type;
 7057|  1.81M|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7128|  2.48M|    {
 7129|  2.48M|        return m_error;
 7130|  2.48M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|  3.77M|{
 3918|  3.77M|    return unexpected(scan_error{c, m});
 3919|  3.77M|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|  5.01M|{
 4308|       |    // Pattern_White_Space property
 4309|  5.01M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 4.80M, False: 208k]
  |  Branch (4309:27): [True: 903k, False: 3.90M]
  ------------------
 4310|  5.01M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 53.8k, False: 4.05M]
  ------------------
 4311|  5.01M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 48.5k, False: 4.00M]
  ------------------
 4312|  5.01M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 4.28k, False: 4.00M]
  ------------------
 4313|  5.01M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 20.1k, False: 3.98M]
  ------------------
 4314|  5.01M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 970k, False: 3.01M]
  ------------------
 4315|  5.01M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 154, False: 3.01M]
  ------------------
 4316|  5.01M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7811|   671k|{
 7812|   671k|    switch (type) {
 7813|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7813:9): [True: 0, False: 671k]
  ------------------
 7814|      0|            return arg_type_category::none;
 7815|       |
 7816|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7816:9): [True: 0, False: 671k]
  ------------------
 7817|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7817:9): [True: 0, False: 671k]
  ------------------
 7818|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7818:9): [True: 0, False: 671k]
  ------------------
 7819|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7819:9): [True: 0, False: 671k]
  ------------------
 7820|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7820:9): [True: 0, False: 671k]
  ------------------
 7821|      0|            return arg_type_category::integer;
 7822|       |
 7823|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7823:9): [True: 0, False: 671k]
  ------------------
 7824|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7824:9): [True: 0, False: 671k]
  ------------------
 7825|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7825:9): [True: 0, False: 671k]
  ------------------
 7826|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7826:9): [True: 0, False: 671k]
  ------------------
 7827|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7827:9): [True: 0, False: 671k]
  ------------------
 7828|      0|            return arg_type_category::unsigned_integer;
 7829|       |
 7830|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7830:9): [True: 0, False: 671k]
  ------------------
 7831|      0|            return arg_type_category::pointer;
 7832|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7832:9): [True: 0, False: 671k]
  ------------------
 7833|      0|            return arg_type_category::boolean;
 7834|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7834:9): [True: 0, False: 671k]
  ------------------
 7835|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7835:9): [True: 0, False: 671k]
  ------------------
 7836|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7836:9): [True: 0, False: 671k]
  ------------------
 7837|      0|            return arg_type_category::character;
 7838|       |
 7839|   208k|        case arg_type::float_type:
  ------------------
  |  Branch (7839:9): [True: 208k, False: 462k]
  ------------------
 7840|   437k|        case arg_type::double_type:
  ------------------
  |  Branch (7840:9): [True: 228k, False: 442k]
  ------------------
 7841|   671k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7841:9): [True: 234k, False: 437k]
  ------------------
 7842|   671k|            return arg_type_category::floating;
 7843|       |
 7844|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7844:9): [True: 0, False: 671k]
  ------------------
 7845|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7845:9): [True: 0, False: 671k]
  ------------------
 7846|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7846:9): [True: 0, False: 671k]
  ------------------
 7847|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7847:9): [True: 0, False: 671k]
  ------------------
 7848|      0|            return arg_type_category::string;
 7849|       |
 7850|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7850:9): [True: 0, False: 671k]
  ------------------
 7851|      0|            return arg_type_category::custom;
 7852|       |
 7853|      0|            SCN_CLANG_PUSH
 7854|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7855|      0|        default:
  ------------------
  |  Branch (7855:9): [True: 0, False: 671k]
  ------------------
 7856|      0|            SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7857|   671k|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7858|   671k|            SCN_CLANG_POP
 7859|   671k|    }
 7860|       |
 7861|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7862|   671k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1755|  3.60M|    {
 1756|  3.60M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  3.60M|        return std::move(this->get_unexpected().error());
 1758|  3.60M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  2.93M|    {
 3041|  2.93M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  2.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  2.93M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 3074|  2.93M|    {
 3075|  2.93M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  2.93M|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3097|  2.93M|    {
 3098|  2.93M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3099|  2.93M|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3106|  2.93M|    {
 3107|  2.93M|        return fn::impl(std::forward<T>(t));
 3108|  2.93M|    }
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7941|  2.48M|{
 7942|  2.48M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7942:9): [True: 1.81M, False: 671k]
  ------------------
 7943|  2.48M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7943:10): [True: 0, False: 1.81M]
  ------------------
 7944|  1.81M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7944:10): [True: 0, False: 1.81M]
  ------------------
 7945|      0|        SCN_UNLIKELY_ATTR
 7946|      0|        return handler.on_error("Invalid type specifier for float type");
 7947|      0|    }
 7948|  2.48M|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  15.9M|    {
 1740|  15.9M|        return has_value();
 1741|  15.9M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4472|   342M|    {
 4473|   342M|        assert(m_begin);
 4474|   342M|        return m_end == nullptr;
 4475|   342M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4489|  4.59M|    {
 4490|  4.59M|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 4.59M]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|  4.59M|        return parent()->get_segment_starting_at(position());
 4496|  4.59M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4483|   190M|    {
 4484|   190M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   190M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   190M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|   190M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|   190M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4376|  4.59M|    {
 4377|  4.59M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  4.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.98M, False: 2.61M]
  |  |  ------------------
  ------------------
 4378|  4.59M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|  1.98M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|  1.98M|        }
 4381|  2.61M|        const auto start = pos - m_putback_buffer.size();
 4382|  2.61M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|  2.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|  2.61M|        return m_current_view.substr(start);
 4384|  2.61M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4478|  3.22M|    {
 4479|  3.22M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  3.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4480|  3.22M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4481|  3.22M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4467|  8.47M|    {
 4468|  8.47M|        return m_position;
 4469|  8.47M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4398|  3.67M|    {
 4399|  3.67M|        return m_is_contiguous;
 4400|  3.67M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4472|  78.9M|    {
 4473|  78.9M|        assert(m_begin);
 4474|  78.9M|        return m_end == nullptr;
 4475|  78.9M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   395k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   395k|    else {
 3981|   395k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   395k|    }
 3983|   395k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4489|  1.40M|    {
 4490|  1.40M|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 1.40M]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|  1.40M|        return parent()->get_segment_starting_at(position());
 4496|  1.40M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4483|  42.2M|    {
 4484|  42.2M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  42.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  42.2M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  42.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4376|  1.40M|    {
 4377|  1.40M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  1.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 805k, False: 601k]
  |  |  ------------------
  ------------------
 4378|  1.40M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|   805k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|   805k|        }
 4381|   601k|        const auto start = pos - m_putback_buffer.size();
 4382|   601k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|   601k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   601k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|   601k|        return m_current_view.substr(start);
 4384|   601k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4478|  1.53M|    {
 4479|  1.53M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  1.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4480|  1.53M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4481|  1.53M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4467|  3.08M|    {
 4468|  3.08M|        return m_position;
 4469|  3.08M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4398|  1.75M|    {
 4399|  1.75M|        return m_is_contiguous;
 4400|  1.75M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|  6.27M|    {
 3334|  6.27M|        return static_cast<D&>(*this);
 3335|  6.27M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|  6.27M|    {
 3375|  6.27M|        return detail::to_address(ranges::begin(derived()));
 3376|  6.27M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|  1.36M|    {
 3334|  1.36M|        return static_cast<D&>(*this);
 3335|  1.36M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|  1.36M|    {
 3375|  1.36M|        return detail::to_address(ranges::begin(derived()));
 3376|  1.36M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8964|   878k|    {
 8965|   878k|        return ranges::subrange{begin(), end()};
 8966|   878k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8956|   878k|    {
 8957|   878k|        return ranges::default_sentinel;
 8958|   878k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  13.4M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  13.4M|    static_cast<    \
  |  |  935|  13.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  13.4M|    static_cast<    \
  |  |  935|  13.4M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  13.4M|    {
 3466|  13.4M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8783|  5.30M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  1.22M|    {
 1979|  1.22M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.22M|                                            std::forward<F>(f));
 1981|  1.22M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  1.22M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.22M|    else {
 1472|  1.22M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.22M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.22M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.20M, False: 19.2k]
  |  |  ------------------
  ------------------
 1474|  1.22M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.22M|                   : result(unexpect,
 1476|  19.2k|                            trivial_invoke(std::forward<F>(f),
 1477|  19.2k|                                           std::forward<Exp>(exp).error()));
 1478|  1.22M|    }
 1479|  1.22M|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  13.0M|    {
  490|  13.0M|        return m_has_value;
  491|  13.0M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  4.39M|    {
 1805|  4.39M|        return std::move(value());
 1806|  4.39M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  5.06M|    {
 1769|  5.06M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  5.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  5.06M|        return this->get_value();
 1771|  5.06M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  5.06M|    {
  456|  5.06M|        return m_value;
  457|  5.06M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  5.42M|        : base(std::in_place, std::forward<U>(val)),
 1570|  5.42M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  5.42M|    {
 1572|  5.42M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  5.42M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  5.42M|    {
  442|  5.42M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.92M|    {
 1316|  6.92M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  42.7k|{
 1350|  42.7k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  42.7k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  54.8k|    {
 1756|  54.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  54.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  54.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  54.8k|        return std::move(this->get_unexpected().error());
 1758|  54.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  74.0k|    {
  473|  74.0k|        return m_unexpected;
  474|  74.0k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|   427k|    {
  365|   427k|        return m_unexpected;
  366|   427k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.20M|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.20M|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.20M|    {
 1628|  1.20M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.42M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.42M|          m_has_value(false)
  451|  1.42M|    {
  452|  1.42M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8964|   430k|    {
 8965|   430k|        return ranges::subrange{begin(), end()};
 8966|   430k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8956|   430k|    {
 8957|   430k|        return ranges::default_sentinel;
 8958|   430k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  5.96M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  5.96M|    static_cast<    \
  |  |  935|  5.96M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  5.96M|    static_cast<    \
  |  |  935|  5.96M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  5.96M|    {
 3466|  5.96M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   585k|    {
 1979|   585k|        return detail::transform_error_impl(std::move(*this),
 1980|   585k|                                            std::forward<F>(f));
 1981|   585k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   585k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   585k|    else {
 1472|   585k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   585k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   585k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 582k, False: 3.80k]
  |  |  ------------------
  ------------------
 1474|   585k|                   ? result(*std::forward<Exp>(exp))
 1475|   585k|                   : result(unexpect,
 1476|  3.80k|                            trivial_invoke(std::forward<F>(f),
 1477|  3.80k|                                           std::forward<Exp>(exp).error()));
 1478|   585k|    }
 1479|   585k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  5.62M|    {
  490|  5.62M|        return m_has_value;
  491|  5.62M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  2.06M|    {
 1805|  2.06M|        return std::move(value());
 1806|  2.06M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.08M|    {
 1769|  2.08M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.08M|        return this->get_value();
 1771|  2.08M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  2.08M|    {
  456|  2.08M|        return m_value;
  457|  2.08M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  2.10M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.10M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.10M|    {
 1572|  2.10M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  2.10M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.10M|    {
  442|  2.10M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.34M|    {
 1316|  3.34M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  58.0k|    {
 1756|  58.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  58.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  58.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  58.0k|        return std::move(this->get_unexpected().error());
 1758|  58.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  60.0k|    {
  473|  60.0k|        return m_unexpected;
  474|  60.0k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|   754k|        : base(unexpect, std::forward<Args>(args)...),
 1626|   754k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|   754k|    {
 1628|   754k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.24M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.24M|          m_has_value(false)
  451|  1.24M|    {
  452|  1.24M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|  3.77M|        : m_unexpected(std::forward<Err>(e))
  350|  3.77M|    {
  351|  3.77M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.77M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.77M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   813k|        : base(unexpect, std::move(e.error())),
 1616|   813k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   813k|    {
 1618|   813k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|   813k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   813k|          m_has_value(false)
  451|   813k|    {
  452|   813k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  9.60M|    {
 1316|  9.60M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   197k|        : base(unexpect, std::move(e.error())),
 1616|   197k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   197k|    {
 1618|   197k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  1.21M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.21M|          m_has_value(false)
  451|  1.21M|    {
  452|  1.21M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.01M|    {
 1316|  6.01M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  4.72M|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.72M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.72M|    {
 1572|  4.72M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  4.72M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.72M|    {
  442|  4.72M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|  7.05M|    {
 1740|  7.05M|        return has_value();
 1741|  7.05M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|  11.0M|    {
  490|  11.0M|        return m_has_value;
  491|  11.0M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|   236k|    {
 1746|   236k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   236k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   236k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   236k|        return this->get_unexpected().error();
 1748|   236k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   236k|    {
  473|   236k|        return m_unexpected;
  474|   236k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  3.04M|    {
 1805|  3.04M|        return std::move(value());
 1806|  3.04M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  3.78M|    {
 1769|  3.78M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  3.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  3.78M|        return this->get_value();
 1771|  3.78M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|  3.78M|    {
  456|  3.78M|        return m_value;
  457|  3.78M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|   396k|        : base(unexpect, std::move(e.error())),
 1616|   396k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   396k|    {
 1618|   396k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  1.05M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.05M|          m_has_value(false)
  451|  1.05M|    {
  452|  1.05M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.34M|    {
 1316|  3.34M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  2.28M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.28M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.28M|    {
 1572|  2.28M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.28M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.28M|    {
  442|  2.28M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|  3.92M|    {
 1740|  3.92M|        return has_value();
 1741|  3.92M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  6.19M|    {
  490|  6.19M|        return m_has_value;
  491|  6.19M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|   476k|    {
 1746|   476k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   476k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   476k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   476k|        return this->get_unexpected().error();
 1748|   476k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   476k|    {
  473|   476k|        return m_unexpected;
  474|   476k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  1.49M|    {
 1805|  1.49M|        return std::move(value());
 1806|  1.49M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  1.78M|    {
 1769|  1.78M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.78M|        return this->get_value();
 1771|  1.78M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  1.78M|    {
  456|  1.78M|        return m_value;
  457|  1.78M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  1.06M|    {
 1979|  1.06M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.06M|                                            std::forward<F>(f));
 1981|  1.06M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  1.06M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.06M|    else {
 1472|  1.06M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.06M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.06M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.05M, False: 15.8k]
  |  |  ------------------
  ------------------
 1474|  1.06M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.06M|                   : result(unexpect,
 1476|  15.8k|                            trivial_invoke(std::forward<F>(f),
 1477|  15.8k|                                           std::forward<Exp>(exp).error()));
 1478|  1.06M|    }
 1479|  1.06M|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  4.07M|    {
  490|  4.07M|        return m_has_value;
  491|  4.07M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  1.05M|    {
 1805|  1.05M|        return std::move(value());
 1806|  1.05M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.41M|    {
 1769|  1.41M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.41M|        return this->get_value();
 1771|  1.41M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  1.41M|    {
  456|  1.41M|        return m_value;
  457|  1.41M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|  15.8k|    {
 1756|  15.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  15.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  15.8k|        return std::move(this->get_unexpected().error());
 1758|  15.8k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  20.6k|    {
  473|  20.6k|        return m_unexpected;
  474|  20.6k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  1.02M|        : base(unexpect, std::forward<Args>(args)...),
 1626|  1.02M|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  1.02M|    {
 1628|  1.02M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8948|  2.56M|    {
 8949|  2.56M|        return m_current;
 8950|  2.56M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8841|  1.62M|    {
 8842|  1.62M|        return m_locale;
 8843|  1.62M|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8847|  1.62M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  1.62M|    static_cast<    \
  |  |  935|  1.62M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|  1.62M|    static_cast<    \
  |  |  935|  1.62M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|  1.62M|    {
 8849|  1.62M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   958k|    {
 3000|   958k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   958k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   958k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   958k|    {
 2981|   958k|        return t.data();
 2982|   958k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   222k|        : base(unexpect, std::move(e.error())),
 1616|   222k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   222k|    {
 1618|   222k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1569|  71.7k|        : base(std::in_place, std::forward<U>(val)),
 1570|  71.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  71.7k|    {
 1572|  71.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  71.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  71.7k|    {
  442|  71.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8948|  1.15M|    {
 8949|  1.15M|        return m_current;
 8950|  1.15M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8841|   860k|    {
 8842|   860k|        return m_locale;
 8843|   860k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8847|   860k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   860k|    static_cast<    \
  |  |  935|   860k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   860k|    static_cast<    \
  |  |  935|   860k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8848|   860k|    {
 8849|   860k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|   487k|        : base(unexpect, std::move(e.error())),
 1616|   487k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   487k|    {
 1618|   487k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|  4.02M|        : base(unexpect, std::move(e.error())),
 1616|  4.02M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  4.02M|    {
 1618|  4.02M|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|  4.02M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|  4.02M|          m_has_value(false)
  550|  4.02M|    {
  551|  4.02M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  4.02M|    {
 1316|  4.02M|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  13.4M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  13.4M|        : m_deferred_init(), m_has_value(true)
  529|  13.4M|    {
  530|  13.4M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  10.7M|    {
 4559|  10.7M|        return x.is_at_end();
 4560|  10.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4602|  25.9M|    {
 4603|  25.9M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 25.9M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  25.9M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 25.9M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  25.9M|        return !read_at_position();
 4610|  25.9M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4582|   111M|    {
 4583|   111M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|   111M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   111M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|   111M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 111M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|   111M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|   111M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 96.8M, False: 15.0M]
  |  |  ------------------
  ------------------
 4590|  96.8M|            return true;
 4591|  96.8M|        }
 4592|       |
 4593|  29.7M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 15.0M, False: 14.7M]
  ------------------
 4594|  15.0M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 286k, False: 14.7M]
  ------------------
 4595|   286k|                return false;
 4596|   286k|            }
 4597|  15.0M|        }
 4598|  14.7M|        return true;
 4599|  15.0M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4517|  29.1M|    {
 4518|  29.1M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  29.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  29.1M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 29.1M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  29.1M|        auto res = read_at_position();
 4527|  29.1M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  29.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  29.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  29.1M|        return parent()->get_character_at(m_position);
 4529|  29.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4387|  29.1M|    {
 4388|  29.1M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  29.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18.6M, False: 10.5M]
  |  |  ------------------
  ------------------
 4389|  29.1M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  18.6M|            return m_putback_buffer[pos];
 4391|  18.6M|        }
 4392|  10.5M|        const auto start = pos - m_putback_buffer.size();
 4393|  10.5M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  10.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  10.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  10.5M|        return m_current_view[start];
 4395|  10.5M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  7.83M|        : base(std::in_place, std::forward<U>(val)),
 1570|  7.83M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  7.83M|    {
 1572|  7.83M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  7.83M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  7.83M|    {
  442|  7.83M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  7.91M|    {
 1316|  7.91M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  349|   144k|        : m_unexpected(std::forward<Err>(e))
  350|   144k|    {
  351|   144k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   144k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   144k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  74.0k|        : base(unexpect, std::move(e.error())),
 1616|  74.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  74.0k|    {
 1618|  74.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  74.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  74.0k|          m_has_value(false)
  451|  74.0k|    {
  452|  74.0k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|   213k|        : m_unexpected(std::forward<Args>(args)...)
  359|   213k|    {
  360|   213k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   213k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   213k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|  3.46M|    {
 1740|  3.46M|        return has_value();
 1741|  3.46M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|   667k|    {
 1795|   667k|        return value();
 1796|   667k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4552|  27.2M|    {
 4553|  27.2M|        return !(lhs == rhs);
 4554|  27.2M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4547|  30.3M|    {
 4548|  30.3M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 30.3M, False: 0]
  |  Branch (4548:46): [True: 4.02M, False: 26.3M]
  ------------------
 4549|  30.3M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4503|  56.7M|    {
 4504|  56.7M|        ++m_position;
 4505|  56.7M|        (void)read_at_position();
 4506|  56.7M|        return *this;
 4507|  56.7M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  69.2k|        : m_unexpected(std::forward<Err>(e))
  350|  69.2k|    {
  351|  69.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  69.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  69.2k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  14.5k|        : base(unexpect, std::move(e.error())),
 1616|  14.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  14.5k|    {
 1618|  14.5k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  14.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  14.5k|          m_has_value(false)
  451|  14.5k|    {
  452|  14.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.67M|    {
 1316|  1.67M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  1.66M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.66M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.66M|    {
 1572|  1.66M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|  1.66M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.66M|    {
  442|  1.66M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|  1.67M|    {
 1740|  1.67M|        return has_value();
 1741|  1.67M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  3.35M|    {
  490|  3.35M|        return m_has_value;
  491|  3.35M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  14.5k|    {
 1746|  14.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  14.5k|        return this->get_unexpected().error();
 1748|  14.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  14.5k|    {
  473|  14.5k|        return m_unexpected;
  474|  14.5k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  1.66M|    {
 1805|  1.66M|        return std::move(value());
 1806|  1.66M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  1.66M|    {
 1769|  1.66M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.66M|        return this->get_value();
 1771|  1.66M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.66M|    {
  456|  1.66M|        return m_value;
  457|  1.66M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  37.2M|    {
 3484|  37.2M|        return m_sentinel;
 3485|  37.2M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  349|  62.0k|        : m_unexpected(std::forward<Err>(e))
  350|  62.0k|    {
  351|  62.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  62.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  62.0k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  364|  13.7M|    {
  365|  13.7M|        return m_unexpected;
  366|  13.7M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  3.74M|        : m_unexpected(std::forward<Args>(args)...)
  359|  3.74M|    {
  360|  3.74M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.74M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  3.74M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  349|  16.7M|        : m_unexpected(std::forward<Err>(e))
  350|  16.7M|    {
  351|  16.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  16.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  16.7M|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  364|  16.7M|    {
  365|  16.7M|        return m_unexpected;
  366|  16.7M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  358|  16.7M|        : m_unexpected(std::forward<Args>(args)...)
  359|  16.7M|    {
  360|  16.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  16.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  16.7M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|   144k|{
 1350|   144k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|   144k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  349|  3.54M|        : m_unexpected(std::forward<Err>(e))
  350|  3.54M|    {
  351|  3.54M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  3.54M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  3.54M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|  19.1k|    {
 1746|  19.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  19.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  19.1k|        return this->get_unexpected().error();
 1748|  19.1k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  1.24M|        : base(unexpect, std::move(e.error())),
 1616|  1.24M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.24M|    {
 1618|  1.24M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  1.28M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.28M|          m_has_value(false)
  451|  1.28M|    {
  452|  1.28M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  13.4M|    {
 1316|  13.4M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|   673k|        : base(std::in_place, std::forward<U>(val)),
 1570|   673k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   673k|    {
 1572|   673k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|   673k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   673k|    {
  442|   673k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  6.80M|        : base(unexpect, std::move(e.error())),
 1616|  6.80M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  6.80M|    {
 1618|  6.80M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  6.80M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  6.80M|          m_has_value(false)
  451|  6.80M|    {
  452|  6.80M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|  14.6M|    {
 1740|  14.6M|        return has_value();
 1741|  14.6M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  25.8M|    {
  490|  25.8M|        return m_has_value;
  491|  25.8M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|  3.40M|    {
 1746|  3.40M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  3.40M|        return this->get_unexpected().error();
 1748|  3.40M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  3.40M|    {
  473|  3.40M|        return m_unexpected;
  474|  3.40M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|  1.33M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.33M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.33M|    {
 1572|  1.33M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|  1.33M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.33M|    {
  442|  1.33M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.33M|    {
 1316|  1.33M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1615|    288|        : base(unexpect, std::move(e.error())),
 1616|    288|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    288|    {
 1618|    288|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  449|    288|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    288|          m_has_value(false)
  451|    288|    {
  452|    288|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  3.44M|    {
 1795|  3.44M|        return value();
 1796|  3.44M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  6.62M|    {
 1769|  6.62M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  6.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  6.62M|        return this->get_value();
 1771|  6.62M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  6.62M|    {
  456|  6.62M|        return m_value;
  457|  6.62M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|   128k|    {
 1740|   128k|        return has_value();
 1741|   128k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|  2.66M|    {
  490|  2.66M|        return m_has_value;
  491|  2.66M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  1.20M|    {
 1805|  1.20M|        return std::move(value());
 1806|  1.20M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  1.33M|    {
 1769|  1.33M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.33M|        return this->get_value();
 1771|  1.33M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|  1.33M|    {
  456|  1.33M|        return m_value;
  457|  1.33M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  3.22M|    {
 1979|  3.22M|        return detail::transform_error_impl(std::move(*this),
 1980|  3.22M|                                            std::forward<F>(f));
 1981|  3.22M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  3.22M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  3.22M|    else {
 1472|  3.22M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  3.22M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  3.22M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.18M, False: 35.5k]
  |  |  ------------------
  ------------------
 1474|  3.22M|                   ? result(*std::forward<Exp>(exp))
 1475|  3.22M|                   : result(unexpect,
 1476|  35.5k|                            trivial_invoke(std::forward<F>(f),
 1477|  35.5k|                                           std::forward<Exp>(exp).error()));
 1478|  3.22M|    }
 1479|  3.22M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|  4.69M|        : base(std::in_place, std::forward<U>(val)),
 1570|  4.69M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  4.69M|    {
 1572|  4.69M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  4.69M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  4.69M|    {
  442|  4.69M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  35.5k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  35.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  35.5k|    {
 1628|  35.5k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  3.18M|    {
 1805|  3.18M|        return std::move(value());
 1806|  3.18M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  8.11M|    {
 1740|  8.11M|        return has_value();
 1741|  8.11M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  12.7M|    {
  490|  12.7M|        return m_has_value;
  491|  12.7M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   293k|    {
 1746|   293k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   293k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   293k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   293k|        return this->get_unexpected().error();
 1748|   293k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   293k|    {
  473|   293k|        return m_unexpected;
  474|   293k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  3.48M|    {
 1805|  3.48M|        return std::move(value());
 1806|  3.48M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  4.35M|    {
 1769|  4.35M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  4.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  4.35M|        return this->get_value();
 1771|  4.35M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  4.35M|    {
  456|  4.35M|        return m_value;
  457|  4.35M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3479|  1.39M|    {
 3480|  1.39M|        return m_iterator;
 3481|  1.39M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3483|  1.39M|    {
 3484|  1.39M|        return m_sentinel;
 3485|  1.39M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|  1.07M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.07M|    static_cast<    \
  |  |  935|  1.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.07M|    static_cast<    \
  |  |  935|  1.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.07M|    {
 3466|  1.07M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  15.2M|    {
 4570|  15.2M|        return !x.is_at_end();
 4571|  15.2M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  20.6k|        : base(unexpect, std::move(e.error())),
 1616|  20.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  20.6k|    {
 1618|  20.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  20.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  20.6k|          m_has_value(false)
  451|  20.6k|    {
  452|  20.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.64M|    {
 1316|  2.64M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  2.62M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.62M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.62M|    {
 1572|  2.62M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.62M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.62M|    {
  442|  2.62M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1739|  1.57M|    {
 1740|  1.57M|        return has_value();
 1741|  1.57M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   359k|    {
 1795|   359k|        return value();
 1796|   359k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  11.4k|        : base(unexpect, std::move(e.error())),
 1616|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  11.4k|    {
 1618|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  11.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  11.4k|          m_has_value(false)
  451|  11.4k|    {
  452|  11.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.42M|    {
 1316|  1.42M|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|  1.41M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.41M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.41M|    {
 1572|  1.41M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|  1.41M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.41M|    {
  442|  1.41M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|  1.42M|    {
 1740|  1.42M|        return has_value();
 1741|  1.42M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.84M|    {
  490|  2.84M|        return m_has_value;
  491|  2.84M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1745|  11.4k|    {
 1746|  11.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  11.4k|        return this->get_unexpected().error();
 1748|  11.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  11.4k|    {
  473|  11.4k|        return m_unexpected;
  474|  11.4k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.41M|    {
 1805|  1.41M|        return std::move(value());
 1806|  1.41M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.41M|    {
 1769|  1.41M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.41M|        return this->get_value();
 1771|  1.41M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.41M|    {
  456|  1.41M|        return m_value;
  457|  1.41M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1745|  4.75k|    {
 1746|  4.75k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  4.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  4.75k|        return this->get_unexpected().error();
 1748|  4.75k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  1.08M|        : base(unexpect, std::move(e.error())),
 1616|  1.08M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.08M|    {
 1618|  1.08M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  1.08M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.08M|          m_has_value(false)
  451|  1.08M|    {
  452|  1.08M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.00M|    {
 1316|  6.00M|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|   364k|        : base(std::in_place, std::forward<U>(val)),
 1570|   364k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   364k|    {
 1572|   364k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|   364k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   364k|    {
  442|   364k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  4.10M|        : base(unexpect, std::move(e.error())),
 1616|  4.10M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  4.10M|    {
 1618|  4.10M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  4.10M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  4.10M|          m_has_value(false)
  451|  4.10M|    {
  452|  4.10M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1739|  7.05M|    {
 1740|  7.05M|        return has_value();
 1741|  7.05M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  12.0M|    {
  490|  12.0M|        return m_has_value;
  491|  12.0M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1745|  2.84M|    {
 1746|  2.84M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.84M|        return this->get_unexpected().error();
 1748|  2.84M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  2.84M|    {
  473|  2.84M|        return m_unexpected;
  474|  2.84M|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|  1.08M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.08M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.08M|    {
 1572|  1.08M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|  1.08M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.08M|    {
  442|  1.08M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.08M|    {
 1316|  1.08M|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|     96|        : base(unexpect, std::move(e.error())),
 1616|     96|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     96|    {
 1618|     96|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|     96|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     96|          m_has_value(false)
  451|     96|    {
  452|     96|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  1.11M|    {
 1795|  1.11M|        return value();
 1796|  1.11M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.11M|    {
 1769|  1.11M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.11M|        return this->get_value();
 1771|  1.11M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  1.11M|    {
  456|  1.11M|        return m_value;
  457|  1.11M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|  30.5k|    {
 1740|  30.5k|        return has_value();
 1741|  30.5k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  2.16M|    {
  490|  2.16M|        return m_has_value;
  491|  2.16M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  1.05M|    {
 1805|  1.05M|        return std::move(value());
 1806|  1.05M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  1.08M|    {
 1769|  1.08M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.08M|        return this->get_value();
 1771|  1.08M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|  1.08M|    {
  456|  1.08M|        return m_value;
  457|  1.08M|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|   451k|        : base(std::in_place, std::forward<U>(val)),
 1570|   451k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   451k|    {
 1572|   451k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   451k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   451k|    {
  442|   451k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  3.51M|    {
 3000|  3.51M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  3.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  3.51M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  3.51M|    {
 2981|  3.51M|        return t.data();
 2982|  3.51M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|  8.65M|        : base(std::in_place, std::forward<U>(val)),
 1570|  8.65M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  8.65M|    {
 1572|  8.65M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|  8.65M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  8.65M|    {
  442|  8.65M|    }
_ZNO3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1804|  5.86M|    {
 1805|  5.86M|        return std::move(value());
 1806|  5.86M|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1349|  3.60M|{
 1350|  3.60M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  3.60M|}
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1978|  1.20M|    {
 1979|  1.20M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.20M|                                            std::forward<F>(f));
 1981|  1.20M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1461|  1.20M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.20M|    else {
 1472|  1.20M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.20M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.20M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.20M, False: 0]
  |  |  ------------------
  ------------------
 1474|  1.20M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.20M|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  1.20M|    }
 1479|  1.20M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|  1.20M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.20M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.20M|    {
 1572|  1.20M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|  1.20M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.20M|    {
  442|  1.20M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.20M|    {
 1316|  1.20M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|  1.20M|    {
 1740|  1.20M|        return has_value();
 1741|  1.20M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.41M|    {
  490|  2.41M|        return m_has_value;
  491|  2.41M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|  1.20M|    {
 1805|  1.20M|        return std::move(value());
 1806|  1.20M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|  1.20M|    {
 1769|  1.20M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.20M|        return this->get_value();
 1771|  1.20M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.20M|    {
  456|  1.20M|        return m_value;
  457|  1.20M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1964|  1.18M|    {
 1965|  1.18M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|  1.18M|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1461|  1.18M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.18M|    else {
 1472|  1.18M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.18M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.18M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 1.18M]
  |  |  ------------------
  ------------------
 1474|  1.18M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.18M|                   : result(unexpect,
 1476|  1.18M|                            trivial_invoke(std::forward<F>(f),
 1477|  1.18M|                                           std::forward<Exp>(exp).error()));
 1478|  1.18M|    }
 1479|  1.18M|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   867k|    {
 1795|   867k|        return value();
 1796|   867k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3935|   285k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1814|   128k|    {
 1815|   128k|        return &value();
 1816|   128k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|   849k|    {
 2869|   849k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   849k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   849k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|   849k|    {
 2850|   849k|        return decay_copy(t.begin());
 2851|   849k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|   849k|{
 2094|   849k|    return SCN_FWD(t);
  ------------------
  |  |  936|   849k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   849k|}
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3935|   524k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|  1.05M|    {
 1979|  1.05M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.05M|                                            std::forward<F>(f));
 1981|  1.05M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|  1.05M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.05M|    else {
 1472|  1.05M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.05M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.05M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.05M, False: 0]
  |  |  ------------------
  ------------------
 1474|  1.05M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.05M|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|  1.05M|    }
 1479|  1.05M|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  1.05M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.05M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.05M|    {
 1572|  1.05M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|  1.05M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.05M|    {
  442|  1.05M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.05M|    {
 1316|  1.05M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|  1.05M|    {
 1740|  1.05M|        return has_value();
 1741|  1.05M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.10M|    {
  490|  2.10M|        return m_has_value;
  491|  2.10M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  1.05M|    {
 1805|  1.05M|        return std::move(value());
 1806|  1.05M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  1.05M|    {
 1769|  1.05M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.05M|        return this->get_value();
 1771|  1.05M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.05M|    {
  456|  1.05M|        return m_value;
  457|  1.05M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1964|  1.00M|    {
 1965|  1.00M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|  1.00M|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  1.00M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.00M|    else {
 1472|  1.00M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.00M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.00M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 1474|  1.00M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.00M|                   : result(unexpect,
 1476|  1.00M|                            trivial_invoke(std::forward<F>(f),
 1477|  1.00M|                                           std::forward<Exp>(exp).error()));
 1478|  1.00M|    }
 1479|  1.00M|}
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1569|  70.0k|        : base(std::in_place, std::forward<U>(val)),
 1570|  70.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  70.0k|    {
 1572|  70.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|  70.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  70.0k|    {
  442|  70.0k|    }
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|  1.00M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  1.00M|    static_cast<    \
  |  |  935|  1.00M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  1.00M|    {
 3912|  1.00M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   738k|    {
 1795|   738k|        return value();
 1796|   738k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1814|  30.4k|    {
 1815|  30.4k|        return &value();
 1816|  30.4k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|  1.18M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|  1.18M|    static_cast<    \
  |  |  935|  1.18M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|  1.18M|    {
 3912|  1.18M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  4.91M|    {
 4559|  4.91M|        return x.is_at_end();
 4560|  4.91M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4602|  7.76M|    {
 4603|  7.76M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 7.76M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  7.76M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 7.76M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  7.76M|        return !read_at_position();
 4610|  7.76M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4582|  24.5M|    {
 4583|  24.5M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  24.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  24.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  24.5M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 24.5M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  24.5M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  24.5M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 21.5M, False: 2.94M]
  |  |  ------------------
  ------------------
 4590|  21.5M|            return true;
 4591|  21.5M|        }
 4592|       |
 4593|  5.71M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 2.94M, False: 2.76M]
  ------------------
 4594|  2.94M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 180k, False: 2.76M]
  ------------------
 4595|   180k|                return false;
 4596|   180k|            }
 4597|  2.94M|        }
 4598|  2.76M|        return true;
 4599|  2.94M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4356|  31.7M|    {
 4357|  31.7M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  31.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4517|  7.68M|    {
 4518|  7.68M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  7.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  7.68M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 7.68M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  7.68M|        auto res = read_at_position();
 4527|  7.68M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  7.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  7.68M|        return parent()->get_character_at(m_position);
 4529|  7.68M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4387|  7.68M|    {
 4388|  7.68M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  7.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.51M, False: 1.16M]
  |  |  ------------------
  ------------------
 4389|  7.68M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  6.51M|            return m_putback_buffer[pos];
 4391|  6.51M|        }
 4392|  1.16M|        const auto start = pos - m_putback_buffer.size();
 4393|  1.16M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  1.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  1.16M|        return m_current_view[start];
 4395|  1.16M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|  2.76M|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|  2.76M|    else {
 4075|       |        // utf-32
 4076|  2.76M|        static_assert(sizeof(U) == 4);
 4077|  2.76M|        SCN_UNUSED(ch);
  ------------------
  |  |  915|  2.76M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|  2.76M|        return 1;
 4079|  2.76M|    }
 4080|  2.76M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  3.42M|        : base(std::in_place, std::forward<U>(val)),
 1570|  3.42M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  3.42M|    {
 1572|  3.42M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  3.42M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  3.42M|    {
  442|  3.42M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  3.48M|    {
 1316|  3.48M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  60.0k|        : base(unexpect, std::move(e.error())),
 1616|  60.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  60.0k|    {
 1618|  60.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  60.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  60.0k|          m_has_value(false)
  451|  60.0k|    {
  452|  60.0k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1739|  1.36M|    {
 1740|  1.36M|        return has_value();
 1741|  1.36M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|  20.9k|    {
 1795|  20.9k|        return value();
 1796|  20.9k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4552|  3.71M|    {
 4553|  3.71M|        return !(lhs == rhs);
 4554|  3.71M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4547|  5.05M|    {
 4548|  5.05M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 5.05M, False: 0]
  |  Branch (4548:46): [True: 1.62M, False: 3.43M]
  ------------------
 4549|  5.05M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4503|  9.09M|    {
 4504|  9.09M|        ++m_position;
 4505|  9.09M|        (void)read_at_position();
 4506|  9.09M|        return *this;
 4507|  9.09M|    }
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  2.76M|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|  2.76M|    else {
 4281|  2.76M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|  2.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|  2.76M|        auto cp = static_cast<char32_t>(input.front());
 4283|  2.76M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  2.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 184k, False: 2.57M]
  |  |  ------------------
  ------------------
 4284|   184k|            return invalid_code_point;
 4285|   184k|        }
 4286|  2.57M|        return cp;
 4287|  2.76M|    }
 4288|  2.76M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  2.84k|        : base(unexpect, std::move(e.error())),
 1616|  2.84k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.84k|    {
 1618|  2.84k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|  2.84k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.84k|          m_has_value(false)
  451|  2.84k|    {
  452|  2.84k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   721k|    {
 1316|   721k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   719k|        : base(std::in_place, std::forward<U>(val)),
 1570|   719k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   719k|    {
 1572|   719k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   719k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   719k|    {
  442|   719k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   721k|    {
 1740|   721k|        return has_value();
 1741|   721k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.44M|    {
  490|  1.44M|        return m_has_value;
  491|  1.44M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|  2.84k|    {
 1746|  2.84k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.84k|        return this->get_unexpected().error();
 1748|  2.84k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  2.84k|    {
  473|  2.84k|        return m_unexpected;
  474|  2.84k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   719k|    {
 1805|   719k|        return std::move(value());
 1806|   719k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   719k|    {
 1769|   719k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   719k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   719k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   719k|        return this->get_value();
 1771|   719k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   719k|    {
  456|   719k|        return m_value;
  457|   719k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  12.7M|    {
 3484|  12.7M|        return m_sentinel;
 3485|  12.7M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1745|  2.04k|    {
 1746|  2.04k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.04k|        return this->get_unexpected().error();
 1748|  2.04k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|   638k|        : base(unexpect, std::move(e.error())),
 1616|   638k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   638k|    {
 1618|   638k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|   692k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   692k|          m_has_value(false)
  451|   692k|    {
  452|   692k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  6.02M|    {
 1316|  6.02M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1569|  20.9k|        : base(std::in_place, std::forward<U>(val)),
 1570|  20.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  20.9k|    {
 1572|  20.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  440|  20.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  20.9k|    {
  442|  20.9k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|  3.40M|        : base(unexpect, std::move(e.error())),
 1616|  3.40M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.40M|    {
 1618|  3.40M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  3.40M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.40M|          m_has_value(false)
  451|  3.40M|    {
  452|  3.40M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1739|  6.60M|    {
 1740|  6.60M|        return has_value();
 1741|  6.60M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  11.6M|    {
  490|  11.6M|        return m_has_value;
  491|  11.6M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1745|  1.97M|    {
 1746|  1.97M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.97M|        return this->get_unexpected().error();
 1748|  1.97M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  1.97M|    {
  473|  1.97M|        return m_unexpected;
  474|  1.97M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1569|   594k|        : base(std::in_place, std::forward<U>(val)),
 1570|   594k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   594k|    {
 1572|   594k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   594k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   594k|    {
  442|   594k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   594k|    {
 1316|   594k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1615|     79|        : base(unexpect, std::move(e.error())),
 1616|     79|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     79|    {
 1618|     79|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  449|     79|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     79|          m_has_value(false)
  451|     79|    {
  452|     79|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1794|   864k|    {
 1795|   864k|        return value();
 1796|   864k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  2.34M|    {
 1769|  2.34M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.34M|        return this->get_value();
 1771|  2.34M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  2.34M|    {
  456|  2.34M|        return m_value;
  457|  2.34M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1739|  12.3k|    {
 1740|  12.3k|        return has_value();
 1741|  12.3k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  489|  1.18M|    {
  490|  1.18M|        return m_has_value;
  491|  1.18M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|   582k|    {
 1805|   582k|        return std::move(value());
 1806|   582k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|   594k|    {
 1769|   594k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   594k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   594k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   594k|        return this->get_value();
 1771|   594k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  455|   594k|    {
  456|   594k|        return m_value;
  457|   594k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  1.53M|    {
 1979|  1.53M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.53M|                                            std::forward<F>(f));
 1981|  1.53M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  1.53M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.53M|    else {
 1472|  1.53M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.53M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.53M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.48M, False: 54.2k]
  |  |  ------------------
  ------------------
 1474|  1.53M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.53M|                   : result(unexpect,
 1476|  54.2k|                            trivial_invoke(std::forward<F>(f),
 1477|  54.2k|                                           std::forward<Exp>(exp).error()));
 1478|  1.53M|    }
 1479|  1.53M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1569|  1.90M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.90M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.90M|    {
 1572|  1.90M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  1.90M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.90M|    {
  442|  1.90M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1625|  54.2k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  54.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  54.2k|    {
 1628|  54.2k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  1.48M|    {
 1805|  1.48M|        return std::move(value());
 1806|  1.48M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  3.92M|    {
 1740|  3.92M|        return has_value();
 1741|  3.92M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  6.27M|    {
  490|  6.27M|        return m_has_value;
  491|  6.27M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|   659k|    {
 1746|   659k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|   659k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   659k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|   659k|        return this->get_unexpected().error();
 1748|   659k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|   659k|    {
  473|   659k|        return m_unexpected;
  474|   659k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.40M|    {
 1805|  1.40M|        return std::move(value());
 1806|  1.40M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.69M|    {
 1769|  1.69M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.69M|        return this->get_value();
 1771|  1.69M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.69M|    {
  456|  1.69M|        return m_value;
  457|  1.69M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3479|   440k|    {
 3480|   440k|        return m_iterator;
 3481|   440k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3483|   440k|    {
 3484|   440k|        return m_sentinel;
 3485|   440k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   410k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   410k|    static_cast<    \
  |  |  935|   410k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   410k|    static_cast<    \
  |  |  935|   410k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   410k|    {
 3466|   410k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  2.84M|    {
 4570|  2.84M|        return !x.is_at_end();
 4571|  2.84M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  58.6k|        : base(unexpect, std::move(e.error())),
 1616|  58.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  58.6k|    {
 1618|  58.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  58.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  58.6k|          m_has_value(false)
  451|  58.6k|    {
  452|  58.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.92M|    {
 1316|  2.92M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  2.86M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.86M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.86M|    {
 1572|  2.86M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.86M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.86M|    {
  442|  2.86M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1739|   798k|    {
 1740|   798k|        return has_value();
 1741|   798k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  5.05M|    {
  490|  5.05M|        return m_has_value;
  491|  5.05M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|  9.05k|    {
 1795|  9.05k|        return value();
 1796|  9.05k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  2.07M|    {
 1769|  2.07M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.07M|        return this->get_value();
 1771|  2.07M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  2.07M|    {
  456|  2.07M|        return m_value;
  457|  2.07M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  2.84k|        : base(unexpect, std::move(e.error())),
 1616|  2.84k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.84k|    {
 1618|  2.84k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  2.84k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.84k|          m_has_value(false)
  451|  2.84k|    {
  452|  2.84k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   722k|    {
 1316|   722k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   719k|        : base(std::in_place, std::forward<U>(val)),
 1570|   719k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   719k|    {
 1572|   719k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   719k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   719k|    {
  442|   719k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   586k|    {
 1979|   586k|        return detail::transform_error_impl(std::move(*this),
 1980|   586k|                                            std::forward<F>(f));
 1981|   586k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   586k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   586k|    else {
 1472|   586k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   586k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   586k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 582k, False: 3.80k]
  |  |  ------------------
  ------------------
 1474|   586k|                   ? result(*std::forward<Exp>(exp))
 1475|   586k|                   : result(unexpect,
 1476|  3.80k|                            trivial_invoke(std::forward<F>(f),
 1477|  3.80k|                                           std::forward<Exp>(exp).error()));
 1478|   586k|    }
 1479|   586k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  2.06M|    {
 1805|  2.06M|        return std::move(value());
 1806|  2.06M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|  58.1k|    {
 1756|  58.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  58.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  58.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  58.1k|        return std::move(this->get_unexpected().error());
 1758|  58.1k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  58.6k|    {
  473|  58.6k|        return m_unexpected;
  474|  58.6k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|   662k|        : base(unexpect, std::forward<Args>(args)...),
 1626|   662k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|   662k|    {
 1628|   662k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|   722k|    {
 1740|   722k|        return has_value();
 1741|   722k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.44M|    {
  490|  1.44M|        return m_has_value;
  491|  1.44M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1745|  2.84k|    {
 1746|  2.84k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  2.84k|        return this->get_unexpected().error();
 1748|  2.84k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  2.84k|    {
  473|  2.84k|        return m_unexpected;
  474|  2.84k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   719k|    {
 1805|   719k|        return std::move(value());
 1806|   719k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   719k|    {
 1769|   719k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   719k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   719k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   719k|        return this->get_value();
 1771|   719k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|   719k|    {
  456|   719k|        return m_value;
  457|   719k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1745|    520|    {
 1746|    520|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    520|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    520|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    520|        return this->get_unexpected().error();
 1748|    520|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|   637k|        : base(unexpect, std::move(e.error())),
 1616|   637k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   637k|    {
 1618|   637k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|   691k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|   691k|          m_has_value(false)
  451|   691k|    {
  452|   691k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  4.80M|    {
 1316|  4.80M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1569|  9.05k|        : base(std::in_place, std::forward<U>(val)),
 1570|  9.05k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  9.05k|    {
 1572|  9.05k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  440|  9.05k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  9.05k|    {
  442|  9.05k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  2.48M|        : base(unexpect, std::move(e.error())),
 1616|  2.48M|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.48M|    {
 1618|  2.48M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  449|  2.48M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.48M|          m_has_value(false)
  451|  2.48M|    {
  452|  2.48M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1739|  5.38M|    {
 1740|  5.38M|        return has_value();
 1741|  5.38M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  489|  9.68M|    {
  490|  9.68M|        return m_has_value;
  491|  9.68M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1745|  1.87M|    {
 1746|  1.87M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.87M|        return this->get_unexpected().error();
 1748|  1.87M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  472|  1.87M|    {
  473|  1.87M|        return m_unexpected;
  474|  1.87M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1569|   586k|        : base(std::in_place, std::forward<U>(val)),
 1570|   586k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   586k|    {
 1572|   586k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   586k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   586k|    {
  442|   586k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   586k|    {
 1316|   586k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|     28|        : base(unexpect, std::move(e.error())),
 1616|     28|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|     28|    {
 1618|     28|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|     28|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|     28|          m_has_value(false)
  451|     28|    {
  452|     28|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1794|   284k|    {
 1795|   284k|        return value();
 1796|   284k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.76M|    {
 1769|  1.76M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.76M|        return this->get_value();
 1771|  1.76M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  455|  1.76M|    {
  456|  1.76M|        return m_value;
  457|  1.76M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1739|  4.25k|    {
 1740|  4.25k|        return has_value();
 1741|  4.25k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  489|  1.17M|    {
  490|  1.17M|        return m_has_value;
  491|  1.17M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   582k|    {
 1805|   582k|        return std::move(value());
 1806|   582k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   586k|    {
 1769|   586k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   586k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   586k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   586k|        return this->get_value();
 1771|   586k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  455|   586k|    {
  456|   586k|        return m_value;
  457|   586k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  1.53M|    {
 1979|  1.53M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.53M|                                            std::forward<F>(f));
 1981|  1.53M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  1.53M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.53M|    else {
 1472|  1.53M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.53M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.53M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.48M, False: 54.3k]
  |  |  ------------------
  ------------------
 1474|  1.53M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.53M|                   : result(unexpect,
 1476|  54.3k|                            trivial_invoke(std::forward<F>(f),
 1477|  54.3k|                                           std::forward<Exp>(exp).error()));
 1478|  1.53M|    }
 1479|  1.53M|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1569|  1.62M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.62M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.62M|    {
 1572|  1.62M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.62M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.62M|    {
  442|  1.62M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1625|  54.3k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  54.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  54.3k|    {
 1628|  54.3k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  1.48M|    {
 1805|  1.48M|        return std::move(value());
 1806|  1.48M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  1.36M|    {
 3000|  1.36M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  1.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  1.36M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  1.36M|    {
 2981|  1.36M|        return t.data();
 2982|  1.36M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1978|   582k|    {
 1979|   582k|        return detail::transform_error_impl(std::move(*this),
 1980|   582k|                                            std::forward<F>(f));
 1981|   582k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1461|   582k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   582k|    else {
 1472|   582k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   582k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   582k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 582k, False: 0]
  |  |  ------------------
  ------------------
 1474|   582k|                   ? result(*std::forward<Exp>(exp))
 1475|   582k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   582k|    }
 1479|   582k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1569|   582k|        : base(std::in_place, std::forward<U>(val)),
 1570|   582k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   582k|    {
 1572|   582k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  440|   582k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   582k|    {
  442|   582k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   582k|    {
 1316|   582k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|   582k|    {
 1740|   582k|        return has_value();
 1741|   582k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.16M|    {
  490|  1.16M|        return m_has_value;
  491|  1.16M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1804|   582k|    {
 1805|   582k|        return std::move(value());
 1806|   582k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1768|   582k|    {
 1769|   582k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   582k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   582k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   582k|        return this->get_value();
 1771|   582k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   582k|    {
  456|   582k|        return m_value;
  457|   582k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1964|   750k|    {
 1965|   750k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|   750k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1461|   750k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   750k|    else {
 1472|   750k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   750k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   750k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 750k]
  |  |  ------------------
  ------------------
 1474|   750k|                   ? result(*std::forward<Exp>(exp))
 1475|   750k|                   : result(unexpect,
 1476|   750k|                            trivial_invoke(std::forward<F>(f),
 1477|   750k|                                           std::forward<Exp>(exp).error()));
 1478|   750k|    }
 1479|   750k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   293k|    {
 1795|   293k|        return value();
 1796|   293k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3935|   113k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1814|  12.3k|    {
 1815|  12.3k|        return &value();
 1816|  12.3k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2868|   468k|    {
 2869|   468k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   468k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   468k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2849|   468k|    {
 2850|   468k|        return decay_copy(t.begin());
 2851|   468k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2093|   468k|{
 2094|   468k|    return SCN_FWD(t);
  ------------------
  |  |  936|   468k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|   468k|}
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3935|   257k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   582k|    {
 1979|   582k|        return detail::transform_error_impl(std::move(*this),
 1980|   582k|                                            std::forward<F>(f));
 1981|   582k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1461|   582k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   582k|    else {
 1472|   582k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   582k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   582k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 582k, False: 0]
  |  |  ------------------
  ------------------
 1474|   582k|                   ? result(*std::forward<Exp>(exp))
 1475|   582k|                   : result(unexpect,
 1476|      0|                            trivial_invoke(std::forward<F>(f),
 1477|      0|                                           std::forward<Exp>(exp).error()));
 1478|   582k|    }
 1479|   582k|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   582k|        : base(std::in_place, std::forward<U>(val)),
 1570|   582k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   582k|    {
 1572|   582k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  440|   582k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   582k|    {
  442|   582k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   582k|    {
 1316|   582k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1739|   582k|    {
 1740|   582k|        return has_value();
 1741|   582k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.16M|    {
  490|  1.16M|        return m_has_value;
  491|  1.16M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   582k|    {
 1805|   582k|        return std::move(value());
 1806|   582k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   582k|    {
 1769|   582k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   582k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   582k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   582k|        return this->get_value();
 1771|   582k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   582k|    {
  456|   582k|        return m_value;
  457|   582k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1964|   659k|    {
 1965|   659k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1966|   659k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1461|   659k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   659k|    else {
 1472|   659k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   659k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   659k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 659k]
  |  |  ------------------
  ------------------
 1474|   659k|                   ? result(*std::forward<Exp>(exp))
 1475|   659k|                   : result(unexpect,
 1476|   659k|                            trivial_invoke(std::forward<F>(f),
 1477|   659k|                                           std::forward<Exp>(exp).error()));
 1478|   659k|    }
 1479|   659k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3910|   659k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|   659k|    static_cast<    \
  |  |  935|   659k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   659k|    {
 3912|   659k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   293k|    {
 1795|   293k|        return value();
 1796|   293k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1814|  4.22k|    {
 1815|  4.22k|        return &value();
 1816|  4.22k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3910|   750k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  934|   750k|    static_cast<    \
  |  |  935|   750k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3911|   750k|    {
 3912|   750k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4356|   144M|    {
 4357|   144M|        return m_putback_buffer.size() + m_current_view.size();
 4358|   144M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1569|   134k|        : base(std::in_place, std::forward<U>(val)),
 1570|   134k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   134k|    {
 1572|   134k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  440|   134k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   134k|    {
  442|   134k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6176|  2.07M|    {
 6177|  2.07M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  2.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.07M]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|  2.07M|        return static_cast<std::size_t>(m_desc &
 6182|  2.07M|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|  2.07M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6202|  4.14M|    {
 6203|  4.14M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|  4.14M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6144|  2.07M|    {
 6145|  2.07M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  2.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.07M]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|  2.07M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  2.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.07M]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|  2.07M|        const auto t = type(id);
 6157|  2.07M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  2.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.07M]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|  2.07M|        basic_scan_arg<Context> arg;
 6162|  2.07M|        arg.m_type = t;
 6163|  2.07M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 2.07M, False: 0]
  ------------------
 6164|  2.07M|            arg.m_value.ref_value = m_builtin_values[id];
 6165|  2.07M|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|  2.07M|        return arg;
 6170|  2.07M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6211|  2.07M|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|  2.07M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|  2.07M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|  2.07M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|  2.07M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6206|  2.07M|    {
 6207|  2.07M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|  2.07M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5960|  3.92M|    {
 5961|  3.92M|        return m_type != detail::arg_type::none_type;
 5962|  3.92M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|   316k|{
 9300|   316k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   316k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   316k|{
 9201|   316k|#define SCN_VISIT(Type)                                                \
 9202|   316k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   316k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   316k|    }                                                                  \
 9205|   316k|    else {                                                             \
 9206|   316k|        return vis(monostate_val);                                     \
 9207|   316k|    }
 9208|       |
 9209|   316k|    monostate monostate_val{};
 9210|       |
 9211|   316k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 316k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 316k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 316k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 316k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 316k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 316k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 316k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 316k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 316k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 316k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 316k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 316k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 316k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 316k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 316k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|   102k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 102k, False: 214k]
  ------------------
 9243|   102k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   102k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   102k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   102k|    }                                                                  \
  |  | 9205|   102k|    else {                                                             \
  |  | 9206|   102k|        return vis(monostate_val);                                     \
  |  | 9207|   102k|    }
  ------------------
 9244|   208k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 105k, False: 210k]
  ------------------
 9245|   208k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   208k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   208k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   208k|    }                                                                  \
  |  | 9205|   208k|    else {                                                             \
  |  | 9206|   208k|        return vis(monostate_val);                                     \
  |  | 9207|   208k|    }
  ------------------
 9246|   316k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 108k, False: 208k]
  ------------------
 9247|   316k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   316k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   316k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   316k|    }                                                                  \
  |  | 9205|   316k|    else {                                                             \
  |  | 9206|   316k|        return vis(monostate_val);                                     \
  |  | 9207|   316k|    }
  ------------------
 9248|   316k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 316k]
  ------------------
 9249|   316k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   316k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   316k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   316k|    }                                                                  \
  |  | 9205|   316k|    else {                                                             \
  |  | 9206|   316k|        return vis(monostate_val);                                     \
  |  | 9207|   316k|    }
  ------------------
 9250|   316k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 316k]
  ------------------
 9251|   316k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   316k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   316k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   316k|    }                                                                  \
  |  | 9205|   316k|    else {                                                             \
  |  | 9206|   316k|        return vis(monostate_val);                                     \
  |  | 9207|   316k|    }
  ------------------
 9252|   316k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 316k]
  ------------------
 9253|   316k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   316k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   316k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   316k|    }                                                                  \
  |  | 9205|   316k|    else {                                                             \
  |  | 9206|   316k|        return vis(monostate_val);                                     \
  |  | 9207|   316k|    }
  ------------------
 9254|   316k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 316k]
  ------------------
 9255|   316k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   316k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   316k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   316k|    }                                                                  \
  |  | 9205|   316k|    else {                                                             \
  |  | 9206|   316k|        return vis(monostate_val);                                     \
  |  | 9207|   316k|    }
  ------------------
 9256|   316k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 316k]
  ------------------
 9257|   316k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   316k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   316k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   316k|    }                                                                  \
  |  | 9205|   316k|    else {                                                             \
  |  | 9206|   316k|        return vis(monostate_val);                                     \
  |  | 9207|   316k|    }
  ------------------
 9258|   316k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 316k]
  ------------------
 9259|   316k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   316k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   316k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   316k|    }                                                                  \
  |  | 9205|   316k|    else {                                                             \
  |  | 9206|   316k|        return vis(monostate_val);                                     \
  |  | 9207|   316k|    }
  ------------------
 9260|       |
 9261|   316k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 316k]
  ------------------
 9262|   316k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   316k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   316k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 316k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 316k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   316k|            SCN_CLANG_POP
 9279|   316k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|  5.55M|{
 6006|  5.55M|    return arg.m_type;
 6007|  5.55M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|  2.29M|{
 6018|  2.29M|    return arg.m_value;
 6019|  2.29M|}
_ZN3scn2v424basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 6256|  1.62M|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|  1.62M|    {
 6258|  1.62M|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8932|   878k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   878k|    static_cast<    \
  |  |  935|   878k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   878k|    {
 8934|   878k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4690|  1.22M|{
 4691|  1.22M|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 1.22M]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|  1.22M|    return ranges::subrange{forward_iterator{this, 0},
 4696|  1.22M|                            ranges::default_sentinel};
 4697|  1.22M|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4453|  1.22M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|  1.22M|    {
 4455|  1.22M|        SCN_EXPECT(parent);
  ------------------
  |  |  930|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  1.22M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|  1.22M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9299|   346k|{
 9300|   346k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   346k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   346k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   346k|{
 9201|   346k|#define SCN_VISIT(Type)                                                \
 9202|   346k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   346k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   346k|    }                                                                  \
 9205|   346k|    else {                                                             \
 9206|   346k|        return vis(monostate_val);                                     \
 9207|   346k|    }
 9208|       |
 9209|   346k|    monostate monostate_val{};
 9210|       |
 9211|   346k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 346k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 346k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 346k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 346k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 346k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 346k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 346k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 346k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 346k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 346k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 346k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 346k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 346k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 346k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 346k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|   111k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 111k, False: 235k]
  ------------------
 9243|   111k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   111k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   111k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   111k|    }                                                                  \
  |  | 9205|   111k|    else {                                                             \
  |  | 9206|   111k|        return vis(monostate_val);                                     \
  |  | 9207|   111k|    }
  ------------------
 9244|   227k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 116k, False: 230k]
  ------------------
 9245|   227k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   227k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   227k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   227k|    }                                                                  \
  |  | 9205|   227k|    else {                                                             \
  |  | 9206|   227k|        return vis(monostate_val);                                     \
  |  | 9207|   227k|    }
  ------------------
 9246|   346k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 119k, False: 227k]
  ------------------
 9247|   346k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   346k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   346k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   346k|    }                                                                  \
  |  | 9205|   346k|    else {                                                             \
  |  | 9206|   346k|        return vis(monostate_val);                                     \
  |  | 9207|   346k|    }
  ------------------
 9248|   346k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 346k]
  ------------------
 9249|   346k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   346k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   346k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   346k|    }                                                                  \
  |  | 9205|   346k|    else {                                                             \
  |  | 9206|   346k|        return vis(monostate_val);                                     \
  |  | 9207|   346k|    }
  ------------------
 9250|   346k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 346k]
  ------------------
 9251|   346k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   346k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   346k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   346k|    }                                                                  \
  |  | 9205|   346k|    else {                                                             \
  |  | 9206|   346k|        return vis(monostate_val);                                     \
  |  | 9207|   346k|    }
  ------------------
 9252|   346k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 346k]
  ------------------
 9253|   346k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   346k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   346k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   346k|    }                                                                  \
  |  | 9205|   346k|    else {                                                             \
  |  | 9206|   346k|        return vis(monostate_val);                                     \
  |  | 9207|   346k|    }
  ------------------
 9254|   346k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 346k]
  ------------------
 9255|   346k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   346k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   346k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   346k|    }                                                                  \
  |  | 9205|   346k|    else {                                                             \
  |  | 9206|   346k|        return vis(monostate_val);                                     \
  |  | 9207|   346k|    }
  ------------------
 9256|   346k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 346k]
  ------------------
 9257|   346k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   346k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   346k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   346k|    }                                                                  \
  |  | 9205|   346k|    else {                                                             \
  |  | 9206|   346k|        return vis(monostate_val);                                     \
  |  | 9207|   346k|    }
  ------------------
 9258|   346k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 346k]
  ------------------
 9259|   346k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   346k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   346k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   346k|    }                                                                  \
  |  | 9205|   346k|    else {                                                             \
  |  | 9206|   346k|        return vis(monostate_val);                                     \
  |  | 9207|   346k|    }
  ------------------
 9260|       |
 9261|   346k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 346k]
  ------------------
 9262|   346k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   346k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   346k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 346k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 346k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   346k|            SCN_CLANG_POP
 9279|   346k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   750k|    {
 3075|   750k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   750k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   750k|    {
 3041|   750k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   750k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   750k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   750k|{
 7793|   750k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   750k|    handler.check_args_exhausted();
 7795|   750k|    return handler.get_error();
 7796|   750k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   750k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   750k|    auto begin = format.data();
 7761|   750k|    auto it = begin;
 7762|   750k|    const auto end = format.data() + format.size();
 7763|       |
 7764|  1.43M|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 750k, False: 681k]
  ------------------
 7765|   750k|        const auto ch = *it++;
 7766|   750k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 750k, False: 0]
  ------------------
 7767|   750k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   750k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   750k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 68.5k, False: 681k]
  ------------------
 7771|  68.5k|                return;
 7772|  68.5k|            }
 7773|   750k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   750k|    }
 7784|       |
 7785|   681k|    handler.on_literal_text(begin, end);
 7786|   681k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7689|   750k|{
 7690|   750k|    struct id_adapter {
 7691|   750k|        constexpr void operator()()
 7692|   750k|        {
 7693|   750k|            arg_id = handler.on_arg_id();
 7694|   750k|        }
 7695|   750k|        constexpr void operator()(std::size_t id)
 7696|   750k|        {
 7697|   750k|            arg_id = handler.on_arg_id(id);
 7698|   750k|        }
 7699|       |
 7700|   750k|        constexpr void on_error(const char* msg)
 7701|   750k|        {
 7702|   750k|            SCN_UNLIKELY_ATTR
 7703|   750k|            handler.on_error(msg);
 7704|   750k|        }
 7705|       |
 7706|   750k|        Handler& handler;
 7707|   750k|        std::size_t arg_id;
 7708|   750k|    };
 7709|       |
 7710|   750k|    ++begin;
 7711|   750k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   750k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 750k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   750k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 750k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   750k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 750k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   750k|    else {
 7723|   750k|        auto adapter = id_adapter{handler, 0};
 7724|   750k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   750k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   750k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 750k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   750k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 750k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   750k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 750k, False: 0]
  ------------------
 7735|   750k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   750k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 750k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   750k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   750k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 750k]
  |  |  |  Branch (865:45): [True: 0, False: 750k]
  |  |  |  Branch (865:45): [True: 0, False: 750k]
  |  |  ------------------
  ------------------
 7741|      0|                handler.on_error("Unknown format specifier");
 7742|      0|                return begin;
 7743|      0|            }
 7744|   750k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   750k|    }
 7751|   750k|    return begin + 1;
 7752|   750k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8831|  1.62M|    {
 8832|  1.62M|        return m_args.get(id);
 8833|  1.62M|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6285|  1.62M|    {
 6286|  1.62M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.62M]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|  1.62M|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|  1.62M|        do_check_arg_id(id);
 6294|  1.62M|        return id;
 6295|  1.62M|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6805|  1.62M|{
 6806|  1.62M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|  1.62M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|  1.62M|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   750k|{
 7191|   750k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   750k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   750k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   750k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 750k, False: 0]
  |  Branch (7192:26): [True: 0, False: 750k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   750k|    handler();
 7197|   750k|    return begin;
 7198|   750k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   750k|        {
 7693|   750k|            arg_id = handler.on_arg_id();
 7694|   750k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6280|  1.62M|    {
 6281|  1.62M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|  1.62M|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6269|  3.25M|    {
 6270|  3.25M|        return m_format.data();
 6271|  3.25M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|   750k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   750k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   750k|    {
 7871|   750k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   750k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   750k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   750k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7605|   750k|{
 7606|   750k|    auto do_presentation = [&]() -> const CharT* {
 7607|   750k|        if (*begin == CharT{'['}) {
 7608|   750k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   750k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   750k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   750k|                return begin;
 7614|   750k|            }
 7615|   750k|            handler.on_character_set_string(set);
 7616|   750k|            return begin;
 7617|   750k|        }
 7618|   750k|        if (*begin == CharT{'/'}) {
 7619|   750k|            return parse_presentation_regex(begin, end, handler);
 7620|   750k|        }
 7621|   750k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   750k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   750k|            handler.on_error("Invalid type specifier in format string");
 7624|   750k|            return begin;
 7625|   750k|        }
 7626|   750k|        handler.on_type(type);
 7627|   750k|        return begin;
 7628|   750k|    };
 7629|       |
 7630|   750k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 750k, False: 0]
  |  Branch (7630:28): [True: 750k, False: 0]
  ------------------
 7631|   750k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 750k, False: 0]
  |  Branch (7631:36): [True: 539k, False: 211k]
  ------------------
 7632|   539k|        return do_presentation();
 7633|   539k|    }
 7634|       |
 7635|   211k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 211k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|   211k|    begin = parse_align(begin, end, handler);
 7641|   211k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 211k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|   211k|    begin = parse_width(begin, end, handler);
 7647|   211k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 211k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|   211k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 211k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|   211k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 211k, False: 0]
  ------------------
 7666|   211k|        handler.on_localized();
 7667|   211k|        ++begin;
 7668|   211k|    }
 7669|   211k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 211k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|   211k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 211k, False: 0]
  |  Branch (7674:25): [True: 0, False: 211k]
  ------------------
 7675|      0|        do_presentation();
 7676|      0|    }
 7677|   211k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 211k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|   211k|    return begin;
 7683|   211k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7254|  1.62M|{
 7255|  1.62M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 1.16M, False: 463k]
  |  Branch (7255:33): [True: 1.16M, False: 0]
  ------------------
 7256|  1.62M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 463k, False: 0]
  |  Branch (7256:33): [True: 463k, False: 0]
  ------------------
 7257|  1.62M|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|   539k|    auto do_presentation = [&]() -> const CharT* {
 7607|   539k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 0, False: 539k]
  ------------------
 7608|      0|            auto set = parse_presentation_set(begin, end, handler);
 7609|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|      0|            handler.on_character_set_string(set);
 7616|      0|            return begin;
 7617|      0|        }
 7618|   539k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 539k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   539k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   539k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   539k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 539k]
  |  |  ------------------
  ------------------
 7623|      0|            handler.on_error("Invalid type specifier in format string");
 7624|      0|            return begin;
 7625|      0|        }
 7626|   539k|        handler.on_type(type);
 7627|   539k|        return begin;
 7628|   539k|    };
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7202|  1.16M|{
 7203|  1.16M|    switch (type) {
 7204|      0|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 0, False: 1.16M]
  ------------------
 7205|      0|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 0, False: 1.16M]
  ------------------
 7206|      0|            return presentation_type::int_binary;
 7207|      0|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 0, False: 1.16M]
  ------------------
 7208|      0|            return presentation_type::int_decimal;
 7209|      0|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 0, False: 1.16M]
  ------------------
 7210|      0|            return presentation_type::int_generic;
 7211|      0|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 0, False: 1.16M]
  ------------------
 7212|      0|            return presentation_type::int_unsigned_decimal;
 7213|      0|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 0, False: 1.16M]
  ------------------
 7214|      0|            return presentation_type::int_octal;
 7215|      0|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 0, False: 1.16M]
  ------------------
 7216|      0|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 0, False: 1.16M]
  ------------------
 7217|      0|            return presentation_type::int_hex;
 7218|      0|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 0, False: 1.16M]
  ------------------
 7219|      0|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 0, False: 1.16M]
  ------------------
 7220|      0|            return presentation_type::int_arbitrary_base;
 7221|   508k|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 508k, False: 656k]
  ------------------
 7222|   508k|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 0, False: 1.16M]
  ------------------
 7223|   508k|            return presentation_type::float_hex;
 7224|  42.6k|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 42.6k, False: 1.12M]
  ------------------
 7225|  42.6k|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 0, False: 1.16M]
  ------------------
 7226|  42.6k|            return presentation_type::float_scientific;
 7227|   224k|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 224k, False: 940k]
  ------------------
 7228|   224k|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 0, False: 1.16M]
  ------------------
 7229|   224k|            return presentation_type::float_fixed;
 7230|   389k|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 389k, False: 775k]
  ------------------
 7231|   389k|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 0, False: 1.16M]
  ------------------
 7232|   389k|            return presentation_type::float_general;
 7233|      0|        case 's':
  ------------------
  |  Branch (7233:9): [True: 0, False: 1.16M]
  ------------------
 7234|      0|            return presentation_type::string;
 7235|      0|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 0, False: 1.16M]
  ------------------
 7236|      0|            return presentation_type::character;
 7237|      0|        case '?':
  ------------------
  |  Branch (7237:9): [True: 0, False: 1.16M]
  ------------------
 7238|      0|            return presentation_type::escaped_character;
 7239|      0|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 0, False: 1.16M]
  ------------------
 7240|      0|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 1.16M]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 1.16M]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|      0|        default:
  ------------------
  |  Branch (7247:9): [True: 0, False: 1.16M]
  ------------------
 7248|      0|            return presentation_type::none;
 7249|  1.16M|    }
 7250|  1.16M|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7279|   211k|{
 7280|   211k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   211k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   211k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|   211k|    auto check_align = [](wchar_t ch) {
 7283|   211k|        switch (ch) {
 7284|   211k|            case L'<':
 7285|   211k|                return align_type::left;
 7286|   211k|            case L'>':
 7287|   211k|                return align_type::right;
 7288|   211k|            case L'^':
 7289|   211k|                return align_type::center;
 7290|   211k|            default:
 7291|   211k|                return align_type::none;
 7292|   211k|        }
 7293|   211k|    };
 7294|       |
 7295|   211k|    auto potential_fill_len = code_point_length(begin, end);
 7296|   211k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   422k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 211k]
  |  |  |  Branch (865:45): [True: 0, False: 211k]
  |  |  |  Branch (865:45): [True: 0, False: 211k]
  |  |  ------------------
  ------------------
 7297|   211k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|   211k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|   211k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|   211k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|   211k|    const auto begin_before_fill = begin;
 7307|   211k|    begin += potential_fill_len;
 7308|       |
 7309|   211k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 211k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|   211k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|   211k|    const auto begin_after_fill = begin;
 7315|   211k|    ++begin;
 7316|       |
 7317|   211k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 211k, False: 0]
  ------------------
 7318|   211k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 211k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|   211k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 0, False: 211k]
  ------------------
 7323|      0|            return begin_before_fill;
 7324|      0|        }
 7325|   211k|    }
 7326|       |
 7327|   211k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 211k, False: 0]
  ------------------
 7328|   211k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 211k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|   211k|        return begin_before_fill;
 7333|   211k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|   211k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7261|   463k|{
 7262|   463k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   463k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   463k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|       |    if constexpr (sizeof(CharT) != 1) {
 7264|       |        return 1;
 7265|       |    }
 7266|   463k|    else {
 7267|   463k|        const auto lengths =
 7268|   463k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|   463k|            "\3\4";
 7270|   463k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|   463k|        return len;
 7272|   463k|    }
 7273|   463k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|   422k|    auto check_align = [](wchar_t ch) {
 7283|   422k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 422k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 422k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 422k]
  ------------------
 7289|      0|                return align_type::center;
 7290|   422k|            default:
  ------------------
  |  Branch (7290:13): [True: 422k, False: 0]
  ------------------
 7291|   422k|                return align_type::none;
 7292|   422k|        }
 7293|   422k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7344|   211k|{
 7345|   211k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   211k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   211k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|   211k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 211k, False: 0]
  |  Branch (7347:33): [True: 0, False: 211k]
  ------------------
 7348|      0|        int width = parse_simple_int(begin, end);
 7349|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7350|      0|            handler.on_width(width);
 7351|      0|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|      0|    }
 7357|   211k|    return begin;
 7358|   211k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7875|   211k|    {
 7876|   211k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|   211k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 211k, False: 0]
  ------------------
 7878|   211k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 211k, False: 0]
  ------------------
 7879|   211k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 0, False: 211k]
  ------------------
 7880|   211k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 0, False: 0]
  ------------------
 7881|      0|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|      0|        }
 7886|       |
 7887|   211k|        Handler::on_localized();
 7888|   211k|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7024|   671k|    {
 7025|   671k|        if constexpr (!SCN_DISABLE_LOCALE) {
 7026|   671k|            m_specs.localized = true;
 7027|       |        }
 7028|       |        else {
 7029|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7030|       |        }
 7031|   671k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9299|   750k|{
 9300|   750k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   750k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   750k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   750k|{
 9201|   750k|#define SCN_VISIT(Type)                                                \
 9202|   750k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   750k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   750k|    }                                                                  \
 9205|   750k|    else {                                                             \
 9206|   750k|        return vis(monostate_val);                                     \
 9207|   750k|    }
 9208|       |
 9209|   750k|    monostate monostate_val{};
 9210|       |
 9211|   750k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 750k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 750k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 750k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 750k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 750k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 750k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 750k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 750k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 750k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 750k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 750k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 750k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 750k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 750k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 750k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|   244k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 244k, False: 505k]
  ------------------
 9243|   244k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   244k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   244k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   244k|    }                                                                  \
  |  | 9205|   244k|    else {                                                             \
  |  | 9206|   244k|        return vis(monostate_val);                                     \
  |  | 9207|   244k|    }
  ------------------
 9244|   495k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 250k, False: 499k]
  ------------------
 9245|   495k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   495k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   495k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   495k|    }                                                                  \
  |  | 9205|   495k|    else {                                                             \
  |  | 9206|   495k|        return vis(monostate_val);                                     \
  |  | 9207|   495k|    }
  ------------------
 9246|   750k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 255k, False: 495k]
  ------------------
 9247|   750k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   750k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   750k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   750k|    }                                                                  \
  |  | 9205|   750k|    else {                                                             \
  |  | 9206|   750k|        return vis(monostate_val);                                     \
  |  | 9207|   750k|    }
  ------------------
 9248|   750k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 750k]
  ------------------
 9249|   750k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   750k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   750k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   750k|    }                                                                  \
  |  | 9205|   750k|    else {                                                             \
  |  | 9206|   750k|        return vis(monostate_val);                                     \
  |  | 9207|   750k|    }
  ------------------
 9250|   750k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 750k]
  ------------------
 9251|   750k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   750k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   750k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   750k|    }                                                                  \
  |  | 9205|   750k|    else {                                                             \
  |  | 9206|   750k|        return vis(monostate_val);                                     \
  |  | 9207|   750k|    }
  ------------------
 9252|   750k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 750k]
  ------------------
 9253|   750k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   750k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   750k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   750k|    }                                                                  \
  |  | 9205|   750k|    else {                                                             \
  |  | 9206|   750k|        return vis(monostate_val);                                     \
  |  | 9207|   750k|    }
  ------------------
 9254|   750k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 750k]
  ------------------
 9255|   750k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   750k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   750k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   750k|    }                                                                  \
  |  | 9205|   750k|    else {                                                             \
  |  | 9206|   750k|        return vis(monostate_val);                                     \
  |  | 9207|   750k|    }
  ------------------
 9256|   750k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 750k]
  ------------------
 9257|   750k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   750k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   750k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   750k|    }                                                                  \
  |  | 9205|   750k|    else {                                                             \
  |  | 9206|   750k|        return vis(monostate_val);                                     \
  |  | 9207|   750k|    }
  ------------------
 9258|   750k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 750k]
  ------------------
 9259|   750k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   750k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   750k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   750k|    }                                                                  \
  |  | 9205|   750k|    else {                                                             \
  |  | 9206|   750k|        return vis(monostate_val);                                     \
  |  | 9207|   750k|    }
  ------------------
 9260|       |
 9261|   750k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 750k]
  ------------------
 9262|   750k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   750k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   750k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 750k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 750k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   750k|            SCN_CLANG_POP
 9279|   750k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   878k|{
 7793|   878k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   878k|    handler.check_args_exhausted();
 7795|   878k|    return handler.get_error();
 7796|   878k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   878k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   878k|    auto begin = format.data();
 7761|   878k|    auto it = begin;
 7762|   878k|    const auto end = format.data() + format.size();
 7763|       |
 7764|  1.68M|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 878k, False: 809k]
  ------------------
 7765|   878k|        const auto ch = *it++;
 7766|   878k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 878k, False: 0]
  ------------------
 7767|   878k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   878k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   878k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 68.5k, False: 809k]
  ------------------
 7771|  68.5k|                return;
 7772|  68.5k|            }
 7773|   878k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   878k|    }
 7784|       |
 7785|   809k|    handler.on_literal_text(begin, end);
 7786|   809k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8970|   809k|    {
 8971|   809k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   809k|    static_cast<    \
  |  |  935|   809k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8972|   809k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7689|   878k|{
 7690|   878k|    struct id_adapter {
 7691|   878k|        constexpr void operator()()
 7692|   878k|        {
 7693|   878k|            arg_id = handler.on_arg_id();
 7694|   878k|        }
 7695|   878k|        constexpr void operator()(std::size_t id)
 7696|   878k|        {
 7697|   878k|            arg_id = handler.on_arg_id(id);
 7698|   878k|        }
 7699|       |
 7700|   878k|        constexpr void on_error(const char* msg)
 7701|   878k|        {
 7702|   878k|            SCN_UNLIKELY_ATTR
 7703|   878k|            handler.on_error(msg);
 7704|   878k|        }
 7705|       |
 7706|   878k|        Handler& handler;
 7707|   878k|        std::size_t arg_id;
 7708|   878k|    };
 7709|       |
 7710|   878k|    ++begin;
 7711|   878k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   878k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 878k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   878k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 878k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   878k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 878k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   878k|    else {
 7723|   878k|        auto adapter = id_adapter{handler, 0};
 7724|   878k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   878k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   878k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 878k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   878k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 878k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   878k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 878k, False: 0]
  ------------------
 7735|   878k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   878k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 878k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   878k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   878k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 878k]
  |  |  |  Branch (865:45): [True: 0, False: 878k]
  |  |  |  Branch (865:45): [True: 0, False: 878k]
  |  |  ------------------
  ------------------
 7741|      0|                handler.on_error("Unknown format specifier");
 7742|      0|                return begin;
 7743|      0|            }
 7744|   878k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   878k|    }
 7751|   878k|    return begin + 1;
 7752|   878k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   878k|{
 7191|   878k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   878k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   878k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   878k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 878k, False: 0]
  |  Branch (7192:26): [True: 0, False: 878k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   878k|    handler();
 7197|   878k|    return begin;
 7198|   878k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   878k|        {
 7693|   878k|            arg_id = handler.on_arg_id();
 7694|   878k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7869|   878k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   878k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   878k|    {
 7871|   878k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   878k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   878k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   878k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7605|   878k|{
 7606|   878k|    auto do_presentation = [&]() -> const CharT* {
 7607|   878k|        if (*begin == CharT{'['}) {
 7608|   878k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   878k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   878k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   878k|                return begin;
 7614|   878k|            }
 7615|   878k|            handler.on_character_set_string(set);
 7616|   878k|            return begin;
 7617|   878k|        }
 7618|   878k|        if (*begin == CharT{'/'}) {
 7619|   878k|            return parse_presentation_regex(begin, end, handler);
 7620|   878k|        }
 7621|   878k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   878k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   878k|            handler.on_error("Invalid type specifier in format string");
 7624|   878k|            return begin;
 7625|   878k|        }
 7626|   878k|        handler.on_type(type);
 7627|   878k|        return begin;
 7628|   878k|    };
 7629|       |
 7630|   878k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 878k, False: 0]
  |  Branch (7630:28): [True: 878k, False: 0]
  ------------------
 7631|   878k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 878k, False: 0]
  |  Branch (7631:36): [True: 626k, False: 252k]
  ------------------
 7632|   626k|        return do_presentation();
 7633|   626k|    }
 7634|       |
 7635|   252k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 252k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|   252k|    begin = parse_align(begin, end, handler);
 7641|   252k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 252k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|   252k|    begin = parse_width(begin, end, handler);
 7647|   252k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 252k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|   252k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 252k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|   252k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 252k, False: 0]
  ------------------
 7666|   252k|        handler.on_localized();
 7667|   252k|        ++begin;
 7668|   252k|    }
 7669|   252k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 252k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|   252k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 252k, False: 0]
  |  Branch (7674:25): [True: 0, False: 252k]
  ------------------
 7675|      0|        do_presentation();
 7676|      0|    }
 7677|   252k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 252k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|   252k|    return begin;
 7683|   252k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7606|   626k|    auto do_presentation = [&]() -> const CharT* {
 7607|   626k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 0, False: 626k]
  ------------------
 7608|      0|            auto set = parse_presentation_set(begin, end, handler);
 7609|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|      0|            handler.on_character_set_string(set);
 7616|      0|            return begin;
 7617|      0|        }
 7618|   626k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 626k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   626k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   626k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   626k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 626k]
  |  |  ------------------
  ------------------
 7623|      0|            handler.on_error("Invalid type specifier in format string");
 7624|      0|            return begin;
 7625|      0|        }
 7626|   626k|        handler.on_type(type);
 7627|   626k|        return begin;
 7628|   626k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7279|   252k|{
 7280|   252k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   252k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   252k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|   252k|    auto check_align = [](wchar_t ch) {
 7283|   252k|        switch (ch) {
 7284|   252k|            case L'<':
 7285|   252k|                return align_type::left;
 7286|   252k|            case L'>':
 7287|   252k|                return align_type::right;
 7288|   252k|            case L'^':
 7289|   252k|                return align_type::center;
 7290|   252k|            default:
 7291|   252k|                return align_type::none;
 7292|   252k|        }
 7293|   252k|    };
 7294|       |
 7295|   252k|    auto potential_fill_len = code_point_length(begin, end);
 7296|   252k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   504k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 252k]
  |  |  |  Branch (865:45): [True: 0, False: 252k]
  |  |  |  Branch (865:45): [True: 0, False: 252k]
  |  |  ------------------
  ------------------
 7297|   252k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|   252k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|   252k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|   252k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|   252k|    const auto begin_before_fill = begin;
 7307|   252k|    begin += potential_fill_len;
 7308|       |
 7309|   252k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 252k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|   252k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|   252k|    const auto begin_after_fill = begin;
 7315|   252k|    ++begin;
 7316|       |
 7317|   252k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 252k, False: 0]
  ------------------
 7318|   252k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 252k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|   252k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 0, False: 252k]
  ------------------
 7323|      0|            return begin_before_fill;
 7324|      0|        }
 7325|   252k|    }
 7326|       |
 7327|   252k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 252k, False: 0]
  ------------------
 7328|   252k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 252k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|   252k|        return begin_before_fill;
 7333|   252k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|   252k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7282|   504k|    auto check_align = [](wchar_t ch) {
 7283|   504k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 504k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 504k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 504k]
  ------------------
 7289|      0|                return align_type::center;
 7290|   504k|            default:
  ------------------
  |  Branch (7290:13): [True: 504k, False: 0]
  ------------------
 7291|   504k|                return align_type::none;
 7292|   504k|        }
 7293|   504k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7344|   252k|{
 7345|   252k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   252k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   252k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|   252k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 252k, False: 0]
  |  Branch (7347:33): [True: 0, False: 252k]
  ------------------
 7348|      0|        int width = parse_simple_int(begin, end);
 7349|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7350|      0|            handler.on_width(width);
 7351|      0|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|      0|    }
 7357|   252k|    return begin;
 7358|   252k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7875|   252k|    {
 7876|   252k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|   252k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 252k, False: 0]
  ------------------
 7878|   252k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 252k, False: 0]
  ------------------
 7879|   252k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 0, False: 252k]
  ------------------
 7880|   252k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 0, False: 0]
  ------------------
 7881|      0|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|      0|        }
 7886|       |
 7887|   252k|        Handler::on_localized();
 7888|   252k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9299|   878k|{
 9300|   878k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   878k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   878k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   878k|{
 9201|   878k|#define SCN_VISIT(Type)                                                \
 9202|   878k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   878k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   878k|    }                                                                  \
 9205|   878k|    else {                                                             \
 9206|   878k|        return vis(monostate_val);                                     \
 9207|   878k|    }
 9208|       |
 9209|   878k|    monostate monostate_val{};
 9210|       |
 9211|   878k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 878k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 878k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 878k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 878k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 878k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 878k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 878k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 878k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 878k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 878k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 878k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 878k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 878k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 878k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 878k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|   283k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 283k, False: 594k]
  ------------------
 9243|   283k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   283k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   283k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   283k|    }                                                                  \
  |  | 9205|   283k|    else {                                                             \
  |  | 9206|   283k|        return vis(monostate_val);                                     \
  |  | 9207|   283k|    }
  ------------------
 9244|   579k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 295k, False: 583k]
  ------------------
 9245|   579k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   579k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   579k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   579k|    }                                                                  \
  |  | 9205|   579k|    else {                                                             \
  |  | 9206|   579k|        return vis(monostate_val);                                     \
  |  | 9207|   579k|    }
  ------------------
 9246|   878k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 299k, False: 579k]
  ------------------
 9247|   878k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   878k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   878k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   878k|    }                                                                  \
  |  | 9205|   878k|    else {                                                             \
  |  | 9206|   878k|        return vis(monostate_val);                                     \
  |  | 9207|   878k|    }
  ------------------
 9248|   878k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 878k]
  ------------------
 9249|   878k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   878k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   878k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   878k|    }                                                                  \
  |  | 9205|   878k|    else {                                                             \
  |  | 9206|   878k|        return vis(monostate_val);                                     \
  |  | 9207|   878k|    }
  ------------------
 9250|   878k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 878k]
  ------------------
 9251|   878k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   878k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   878k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   878k|    }                                                                  \
  |  | 9205|   878k|    else {                                                             \
  |  | 9206|   878k|        return vis(monostate_val);                                     \
  |  | 9207|   878k|    }
  ------------------
 9252|   878k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 878k]
  ------------------
 9253|   878k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   878k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   878k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   878k|    }                                                                  \
  |  | 9205|   878k|    else {                                                             \
  |  | 9206|   878k|        return vis(monostate_val);                                     \
  |  | 9207|   878k|    }
  ------------------
 9254|   878k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 878k]
  ------------------
 9255|   878k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   878k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   878k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   878k|    }                                                                  \
  |  | 9205|   878k|    else {                                                             \
  |  | 9206|   878k|        return vis(monostate_val);                                     \
  |  | 9207|   878k|    }
  ------------------
 9256|   878k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 878k]
  ------------------
 9257|   878k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   878k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   878k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   878k|    }                                                                  \
  |  | 9205|   878k|    else {                                                             \
  |  | 9206|   878k|        return vis(monostate_val);                                     \
  |  | 9207|   878k|    }
  ------------------
 9258|   878k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 878k]
  ------------------
 9259|   878k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   878k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   878k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   878k|    }                                                                  \
  |  | 9205|   878k|    else {                                                             \
  |  | 9206|   878k|        return vis(monostate_val);                                     \
  |  | 9207|   878k|    }
  ------------------
 9260|       |
 9261|   878k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 878k]
  ------------------
 9262|   878k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   878k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   878k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 878k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 878k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   878k|            SCN_CLANG_POP
 9279|   878k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4351|  89.1k|    {
 4352|  89.1k|        return sync(0);
 4353|  89.1k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6176|  1.06M|    {
 6177|  1.06M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 6178|      0|            return max_size();
 6179|      0|        }
 6180|       |
 6181|  1.06M|        return static_cast<std::size_t>(m_desc &
 6182|  1.06M|                                        ((1 << detail::packed_arg_bits) - 1));
 6183|  1.06M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6202|  2.13M|    {
 6203|  2.13M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6204|  2.13M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6144|  1.06M|    {
 6145|  1.06M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 6146|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6147|      0|                return m_args[id];
 6148|      0|            }
 6149|      0|            return {};
 6150|      0|        }
 6151|       |
 6152|  1.06M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 6153|      0|            return {};
 6154|      0|        }
 6155|       |
 6156|  1.06M|        const auto t = type(id);
 6157|  1.06M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|  1.06M|        basic_scan_arg<Context> arg;
 6162|  1.06M|        arg.m_type = t;
 6163|  1.06M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6163:13): [True: 1.06M, False: 0]
  ------------------
 6164|  1.06M|            arg.m_value.ref_value = m_builtin_values[id];
 6165|  1.06M|        }
 6166|      0|        else {
 6167|      0|            arg.m_value = m_values[id];
 6168|      0|        }
 6169|  1.06M|        return arg;
 6170|  1.06M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6211|  1.06M|    {
 6212|       |        // First (0th) index is size, types start after that
 6213|  1.06M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6214|  1.06M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6215|  1.06M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6216|  1.06M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6206|  1.06M|    {
 6207|  1.06M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6208|  1.06M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5960|  2.03M|    {
 5961|  2.03M|        return m_type != detail::arg_type::none_type;
 5962|  2.03M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|   155k|{
 9300|   155k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   155k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   155k|{
 9201|   155k|#define SCN_VISIT(Type)                                                \
 9202|   155k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   155k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   155k|    }                                                                  \
 9205|   155k|    else {                                                             \
 9206|   155k|        return vis(monostate_val);                                     \
 9207|   155k|    }
 9208|       |
 9209|   155k|    monostate monostate_val{};
 9210|       |
 9211|   155k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 155k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 155k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 155k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 155k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 155k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 155k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 155k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 155k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 155k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 155k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 155k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 155k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 155k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 155k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 155k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|  45.2k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 45.2k, False: 110k]
  ------------------
 9243|  45.2k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  45.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  45.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  45.2k|    }                                                                  \
  |  | 9205|  45.2k|    else {                                                             \
  |  | 9206|  45.2k|        return vis(monostate_val);                                     \
  |  | 9207|  45.2k|    }
  ------------------
 9244|  99.8k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 54.6k, False: 101k]
  ------------------
 9245|  99.8k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  99.8k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  99.8k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  99.8k|    }                                                                  \
  |  | 9205|  99.8k|    else {                                                             \
  |  | 9206|  99.8k|        return vis(monostate_val);                                     \
  |  | 9207|  99.8k|    }
  ------------------
 9246|   155k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 55.9k, False: 99.8k]
  ------------------
 9247|   155k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   155k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   155k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   155k|    }                                                                  \
  |  | 9205|   155k|    else {                                                             \
  |  | 9206|   155k|        return vis(monostate_val);                                     \
  |  | 9207|   155k|    }
  ------------------
 9248|   155k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 155k]
  ------------------
 9249|   155k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   155k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   155k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   155k|    }                                                                  \
  |  | 9205|   155k|    else {                                                             \
  |  | 9206|   155k|        return vis(monostate_val);                                     \
  |  | 9207|   155k|    }
  ------------------
 9250|   155k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 155k]
  ------------------
 9251|   155k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   155k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   155k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   155k|    }                                                                  \
  |  | 9205|   155k|    else {                                                             \
  |  | 9206|   155k|        return vis(monostate_val);                                     \
  |  | 9207|   155k|    }
  ------------------
 9252|   155k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 155k]
  ------------------
 9253|   155k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   155k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   155k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   155k|    }                                                                  \
  |  | 9205|   155k|    else {                                                             \
  |  | 9206|   155k|        return vis(monostate_val);                                     \
  |  | 9207|   155k|    }
  ------------------
 9254|   155k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 155k]
  ------------------
 9255|   155k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   155k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   155k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   155k|    }                                                                  \
  |  | 9205|   155k|    else {                                                             \
  |  | 9206|   155k|        return vis(monostate_val);                                     \
  |  | 9207|   155k|    }
  ------------------
 9256|   155k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 155k]
  ------------------
 9257|   155k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   155k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   155k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   155k|    }                                                                  \
  |  | 9205|   155k|    else {                                                             \
  |  | 9206|   155k|        return vis(monostate_val);                                     \
  |  | 9207|   155k|    }
  ------------------
 9258|   155k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 155k]
  ------------------
 9259|   155k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   155k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   155k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   155k|    }                                                                  \
  |  | 9205|   155k|    else {                                                             \
  |  | 9206|   155k|        return vis(monostate_val);                                     \
  |  | 9207|   155k|    }
  ------------------
 9260|       |
 9261|   155k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 155k]
  ------------------
 9262|   155k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   155k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   155k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 155k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 155k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   155k|            SCN_CLANG_POP
 9279|   155k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6005|  2.89M|{
 6006|  2.89M|    return arg.m_type;
 6007|  2.89M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6017|  1.17M|{
 6018|  1.17M|    return arg.m_value;
 6019|  1.17M|}
_ZN3scn2v424basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 6256|   860k|        : m_format{format}, m_next_arg_id{next_arg_id}
 6257|   860k|    {
 6258|   860k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8932|   430k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   430k|    static_cast<    \
  |  |  935|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   430k|    {
 8934|   430k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   430k|    {
 3075|   430k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   430k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   430k|    {
 3041|   430k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   430k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   430k|{
 7793|   430k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   430k|    handler.check_args_exhausted();
 7795|   430k|    return handler.get_error();
 7796|   430k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   430k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   430k|    auto begin = format.data();
 7761|   430k|    auto it = begin;
 7762|   430k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   723k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 430k, False: 293k]
  ------------------
 7765|   430k|        const auto ch = *it++;
 7766|   430k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 430k, False: 0]
  ------------------
 7767|   430k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   430k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   430k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 137k, False: 293k]
  ------------------
 7771|   137k|                return;
 7772|   137k|            }
 7773|   430k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   430k|    }
 7784|       |
 7785|   293k|    handler.on_literal_text(begin, end);
 7786|   293k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7689|   430k|{
 7690|   430k|    struct id_adapter {
 7691|   430k|        constexpr void operator()()
 7692|   430k|        {
 7693|   430k|            arg_id = handler.on_arg_id();
 7694|   430k|        }
 7695|   430k|        constexpr void operator()(std::size_t id)
 7696|   430k|        {
 7697|   430k|            arg_id = handler.on_arg_id(id);
 7698|   430k|        }
 7699|       |
 7700|   430k|        constexpr void on_error(const char* msg)
 7701|   430k|        {
 7702|   430k|            SCN_UNLIKELY_ATTR
 7703|   430k|            handler.on_error(msg);
 7704|   430k|        }
 7705|       |
 7706|   430k|        Handler& handler;
 7707|   430k|        std::size_t arg_id;
 7708|   430k|    };
 7709|       |
 7710|   430k|    ++begin;
 7711|   430k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 430k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   430k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 430k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   430k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 430k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   430k|    else {
 7723|   430k|        auto adapter = id_adapter{handler, 0};
 7724|   430k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   430k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 430k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   430k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 430k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   430k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 430k, False: 0]
  ------------------
 7735|   430k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 430k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   430k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   430k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   860k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 430k]
  |  |  |  Branch (865:45): [True: 0, False: 430k]
  |  |  |  Branch (865:45): [True: 0, False: 430k]
  |  |  ------------------
  ------------------
 7741|      0|                handler.on_error("Unknown format specifier");
 7742|      0|                return begin;
 7743|      0|            }
 7744|   430k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   430k|    }
 7751|   430k|    return begin + 1;
 7752|   430k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8831|   860k|    {
 8832|   860k|        return m_args.get(id);
 8833|   860k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6285|   860k|    {
 6286|   860k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   860k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 860k]
  |  |  ------------------
  ------------------
 6287|      0|            on_error(
 6288|      0|                "Cannot switch from manual to automatic argument indexing");
 6289|      0|            return 0;
 6290|      0|        }
 6291|       |
 6292|   860k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6293|   860k|        do_check_arg_id(id);
 6294|   860k|        return id;
 6295|   860k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6805|   860k|{
 6806|   860k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6806:9): [Folded - Ignored]
  ------------------
 6807|   860k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6807:10): [Folded - Ignored]
  |  Branch (6807:22): [Folded - Ignored]
  ------------------
 6808|       |        // The cast below will cause an error on gcc pre-12
 6809|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6810|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6810:13): [True: 0, False: 0]
  ------------------
 6811|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6812|      0|            SCN_UNLIKELY_ATTR
 6813|      0|            on_error("Argument not found");
 6814|      0|        }
 6815|      0|    }
 6816|   860k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   430k|{
 7191|   430k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   430k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   430k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   430k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 430k, False: 0]
  |  Branch (7192:26): [True: 0, False: 430k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   430k|    handler();
 7197|   430k|    return begin;
 7198|   430k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   430k|        {
 7693|   430k|            arg_id = handler.on_arg_id();
 7694|   430k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6280|   860k|    {
 6281|   860k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6282|   860k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4690|   585k|{
 4691|   585k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 585k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   585k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   585k|                            ranges::default_sentinel};
 4697|   585k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4453|   585k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   585k|    {
 4455|   585k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   585k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   585k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   585k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   585k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   585k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   585k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6269|  1.72M|    {
 6270|  1.72M|        return m_format.data();
 6271|  1.72M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7869|   430k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   430k|    {
 7871|   430k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   430k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   430k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   430k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7605|   430k|{
 7606|   430k|    auto do_presentation = [&]() -> const CharT* {
 7607|   430k|        if (*begin == CharT{'['}) {
 7608|   430k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   430k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   430k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   430k|                return begin;
 7614|   430k|            }
 7615|   430k|            handler.on_character_set_string(set);
 7616|   430k|            return begin;
 7617|   430k|        }
 7618|   430k|        if (*begin == CharT{'/'}) {
 7619|   430k|            return parse_presentation_regex(begin, end, handler);
 7620|   430k|        }
 7621|   430k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   430k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   430k|            handler.on_error("Invalid type specifier in format string");
 7624|   430k|            return begin;
 7625|   430k|        }
 7626|   430k|        handler.on_type(type);
 7627|   430k|        return begin;
 7628|   430k|    };
 7629|       |
 7630|   430k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 430k, False: 0]
  |  Branch (7630:28): [True: 430k, False: 0]
  ------------------
 7631|   430k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 430k, False: 0]
  |  Branch (7631:36): [True: 326k, False: 103k]
  ------------------
 7632|   326k|        return do_presentation();
 7633|   326k|    }
 7634|       |
 7635|   103k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|   103k|    begin = parse_align(begin, end, handler);
 7641|   103k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|   103k|    begin = parse_width(begin, end, handler);
 7647|   103k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|   103k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 103k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|   103k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 103k, False: 0]
  ------------------
 7666|   103k|        handler.on_localized();
 7667|   103k|        ++begin;
 7668|   103k|    }
 7669|   103k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|   103k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 103k, False: 0]
  |  Branch (7674:25): [True: 0, False: 103k]
  ------------------
 7675|      0|        do_presentation();
 7676|      0|    }
 7677|   103k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|   103k|    return begin;
 7683|   103k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7254|   860k|{
 7255|   860k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7255:13): [True: 652k, False: 207k]
  |  Branch (7255:33): [True: 652k, False: 0]
  ------------------
 7256|   860k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7256:13): [True: 207k, False: 0]
  |  Branch (7256:33): [True: 207k, False: 0]
  ------------------
 7257|   860k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7606|   326k|    auto do_presentation = [&]() -> const CharT* {
 7607|   326k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 0, False: 326k]
  ------------------
 7608|      0|            auto set = parse_presentation_set(begin, end, handler);
 7609|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|      0|            handler.on_character_set_string(set);
 7616|      0|            return begin;
 7617|      0|        }
 7618|   326k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 326k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   326k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   326k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 326k]
  |  |  ------------------
  ------------------
 7623|      0|            handler.on_error("Invalid type specifier in format string");
 7624|      0|            return begin;
 7625|      0|        }
 7626|   326k|        handler.on_type(type);
 7627|   326k|        return begin;
 7628|   326k|    };
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7202|   652k|{
 7203|   652k|    switch (type) {
 7204|      0|        case 'b':
  ------------------
  |  Branch (7204:9): [True: 0, False: 652k]
  ------------------
 7205|      0|        case 'B':
  ------------------
  |  Branch (7205:9): [True: 0, False: 652k]
  ------------------
 7206|      0|            return presentation_type::int_binary;
 7207|      0|        case 'd':
  ------------------
  |  Branch (7207:9): [True: 0, False: 652k]
  ------------------
 7208|      0|            return presentation_type::int_decimal;
 7209|      0|        case 'i':
  ------------------
  |  Branch (7209:9): [True: 0, False: 652k]
  ------------------
 7210|      0|            return presentation_type::int_generic;
 7211|      0|        case 'u':
  ------------------
  |  Branch (7211:9): [True: 0, False: 652k]
  ------------------
 7212|      0|            return presentation_type::int_unsigned_decimal;
 7213|      0|        case 'o':
  ------------------
  |  Branch (7213:9): [True: 0, False: 652k]
  ------------------
 7214|      0|            return presentation_type::int_octal;
 7215|      0|        case 'x':
  ------------------
  |  Branch (7215:9): [True: 0, False: 652k]
  ------------------
 7216|      0|        case 'X':
  ------------------
  |  Branch (7216:9): [True: 0, False: 652k]
  ------------------
 7217|      0|            return presentation_type::int_hex;
 7218|      0|        case 'r':
  ------------------
  |  Branch (7218:9): [True: 0, False: 652k]
  ------------------
 7219|      0|        case 'R':
  ------------------
  |  Branch (7219:9): [True: 0, False: 652k]
  ------------------
 7220|      0|            return presentation_type::int_arbitrary_base;
 7221|   227k|        case 'a':
  ------------------
  |  Branch (7221:9): [True: 227k, False: 424k]
  ------------------
 7222|   227k|        case 'A':
  ------------------
  |  Branch (7222:9): [True: 0, False: 652k]
  ------------------
 7223|   227k|            return presentation_type::float_hex;
 7224|  56.2k|        case 'e':
  ------------------
  |  Branch (7224:9): [True: 56.2k, False: 596k]
  ------------------
 7225|  56.2k|        case 'E':
  ------------------
  |  Branch (7225:9): [True: 0, False: 652k]
  ------------------
 7226|  56.2k|            return presentation_type::float_scientific;
 7227|   169k|        case 'f':
  ------------------
  |  Branch (7227:9): [True: 169k, False: 483k]
  ------------------
 7228|   169k|        case 'F':
  ------------------
  |  Branch (7228:9): [True: 0, False: 652k]
  ------------------
 7229|   169k|            return presentation_type::float_fixed;
 7230|   199k|        case 'g':
  ------------------
  |  Branch (7230:9): [True: 199k, False: 453k]
  ------------------
 7231|   199k|        case 'G':
  ------------------
  |  Branch (7231:9): [True: 0, False: 652k]
  ------------------
 7232|   199k|            return presentation_type::float_general;
 7233|      0|        case 's':
  ------------------
  |  Branch (7233:9): [True: 0, False: 652k]
  ------------------
 7234|      0|            return presentation_type::string;
 7235|      0|        case 'c':
  ------------------
  |  Branch (7235:9): [True: 0, False: 652k]
  ------------------
 7236|      0|            return presentation_type::character;
 7237|      0|        case '?':
  ------------------
  |  Branch (7237:9): [True: 0, False: 652k]
  ------------------
 7238|      0|            return presentation_type::escaped_character;
 7239|      0|        case 'p':
  ------------------
  |  Branch (7239:9): [True: 0, False: 652k]
  ------------------
 7240|      0|            return presentation_type::pointer;
 7241|      0|        case '[':
  ------------------
  |  Branch (7241:9): [True: 0, False: 652k]
  ------------------
 7242|      0|        case '/':
  ------------------
  |  Branch (7242:9): [True: 0, False: 652k]
  ------------------
 7243|       |            // Should be handled by parse_presentation_set and
 7244|       |            // parse_presentation_regex
 7245|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7246|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7247|      0|        default:
  ------------------
  |  Branch (7247:9): [True: 0, False: 652k]
  ------------------
 7248|      0|            return presentation_type::none;
 7249|   652k|    }
 7250|   652k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7279|   103k|{
 7280|   103k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   103k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   103k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|   103k|    auto check_align = [](wchar_t ch) {
 7283|   103k|        switch (ch) {
 7284|   103k|            case L'<':
 7285|   103k|                return align_type::left;
 7286|   103k|            case L'>':
 7287|   103k|                return align_type::right;
 7288|   103k|            case L'^':
 7289|   103k|                return align_type::center;
 7290|   103k|            default:
 7291|   103k|                return align_type::none;
 7292|   103k|        }
 7293|   103k|    };
 7294|       |
 7295|   103k|    auto potential_fill_len = code_point_length(begin, end);
 7296|   103k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 103k]
  |  |  |  Branch (865:45): [True: 0, False: 103k]
  |  |  |  Branch (865:45): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 7297|   103k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|   103k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|   103k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|   103k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|   103k|    const auto begin_before_fill = begin;
 7307|   103k|    begin += potential_fill_len;
 7308|       |
 7309|   103k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 103k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|   103k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|   103k|    const auto begin_after_fill = begin;
 7315|   103k|    ++begin;
 7316|       |
 7317|   103k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 103k, False: 0]
  ------------------
 7318|   103k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|   103k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 0, False: 103k]
  ------------------
 7323|      0|            return begin_before_fill;
 7324|      0|        }
 7325|   103k|    }
 7326|       |
 7327|   103k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 103k, False: 0]
  ------------------
 7328|   103k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 103k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|   103k|        return begin_before_fill;
 7333|   103k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|   103k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7261|   207k|{
 7262|   207k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   207k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   207k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7263|   207k|    if constexpr (sizeof(CharT) != 1) {
 7264|   207k|        return 1;
 7265|       |    }
 7266|       |    else {
 7267|       |        const auto lengths =
 7268|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7269|       |            "\3\4";
 7270|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7271|       |        return len;
 7272|       |    }
 7273|   207k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7282|   207k|    auto check_align = [](wchar_t ch) {
 7283|   207k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 207k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 207k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 207k]
  ------------------
 7289|      0|                return align_type::center;
 7290|   207k|            default:
  ------------------
  |  Branch (7290:13): [True: 207k, False: 0]
  ------------------
 7291|   207k|                return align_type::none;
 7292|   207k|        }
 7293|   207k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7344|   103k|{
 7345|   103k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   103k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   103k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|   103k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 103k, False: 0]
  |  Branch (7347:33): [True: 0, False: 103k]
  ------------------
 7348|      0|        int width = parse_simple_int(begin, end);
 7349|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7350|      0|            handler.on_width(width);
 7351|      0|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|      0|    }
 7357|   103k|    return begin;
 7358|   103k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7875|   103k|    {
 7876|   103k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|   103k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 103k, False: 0]
  ------------------
 7878|   103k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 103k, False: 0]
  ------------------
 7879|   103k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 0, False: 103k]
  ------------------
 7880|   103k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 0, False: 0]
  ------------------
 7881|      0|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|      0|        }
 7886|       |
 7887|   103k|        Handler::on_localized();
 7888|   103k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9299|   430k|{
 9300|   430k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   430k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   430k|{
 9201|   430k|#define SCN_VISIT(Type)                                                \
 9202|   430k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   430k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   430k|    }                                                                  \
 9205|   430k|    else {                                                             \
 9206|   430k|        return vis(monostate_val);                                     \
 9207|   430k|    }
 9208|       |
 9209|   430k|    monostate monostate_val{};
 9210|       |
 9211|   430k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 430k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 430k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 430k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 430k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 430k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 430k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 430k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 430k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 430k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 430k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 430k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 430k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 430k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 430k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 430k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|   134k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 134k, False: 295k]
  ------------------
 9243|   134k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   134k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   134k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   134k|    }                                                                  \
  |  | 9205|   134k|    else {                                                             \
  |  | 9206|   134k|        return vis(monostate_val);                                     \
  |  | 9207|   134k|    }
  ------------------
 9244|   281k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 147k, False: 283k]
  ------------------
 9245|   281k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   281k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   281k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   281k|    }                                                                  \
  |  | 9205|   281k|    else {                                                             \
  |  | 9206|   281k|        return vis(monostate_val);                                     \
  |  | 9207|   281k|    }
  ------------------
 9246|   430k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 148k, False: 281k]
  ------------------
 9247|   430k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   430k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   430k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   430k|    }                                                                  \
  |  | 9205|   430k|    else {                                                             \
  |  | 9206|   430k|        return vis(monostate_val);                                     \
  |  | 9207|   430k|    }
  ------------------
 9248|   430k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 430k]
  ------------------
 9249|   430k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   430k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   430k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   430k|    }                                                                  \
  |  | 9205|   430k|    else {                                                             \
  |  | 9206|   430k|        return vis(monostate_val);                                     \
  |  | 9207|   430k|    }
  ------------------
 9250|   430k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 430k]
  ------------------
 9251|   430k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   430k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   430k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   430k|    }                                                                  \
  |  | 9205|   430k|    else {                                                             \
  |  | 9206|   430k|        return vis(monostate_val);                                     \
  |  | 9207|   430k|    }
  ------------------
 9252|   430k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 430k]
  ------------------
 9253|   430k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   430k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   430k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   430k|    }                                                                  \
  |  | 9205|   430k|    else {                                                             \
  |  | 9206|   430k|        return vis(monostate_val);                                     \
  |  | 9207|   430k|    }
  ------------------
 9254|   430k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 430k]
  ------------------
 9255|   430k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   430k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   430k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   430k|    }                                                                  \
  |  | 9205|   430k|    else {                                                             \
  |  | 9206|   430k|        return vis(monostate_val);                                     \
  |  | 9207|   430k|    }
  ------------------
 9256|   430k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 430k]
  ------------------
 9257|   430k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   430k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   430k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   430k|    }                                                                  \
  |  | 9205|   430k|    else {                                                             \
  |  | 9206|   430k|        return vis(monostate_val);                                     \
  |  | 9207|   430k|    }
  ------------------
 9258|   430k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 430k]
  ------------------
 9259|   430k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   430k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   430k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   430k|    }                                                                  \
  |  | 9205|   430k|    else {                                                             \
  |  | 9206|   430k|        return vis(monostate_val);                                     \
  |  | 9207|   430k|    }
  ------------------
 9260|       |
 9261|   430k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 430k]
  ------------------
 9262|   430k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   430k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   430k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 430k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 430k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   430k|            SCN_CLANG_POP
 9279|   430k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9299|   155k|{
 9300|   155k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   155k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   155k|{
 9201|   155k|#define SCN_VISIT(Type)                                                \
 9202|   155k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   155k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   155k|    }                                                                  \
 9205|   155k|    else {                                                             \
 9206|   155k|        return vis(monostate_val);                                     \
 9207|   155k|    }
 9208|       |
 9209|   155k|    monostate monostate_val{};
 9210|       |
 9211|   155k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 155k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 155k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 155k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 155k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 155k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 155k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 155k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 155k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 155k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 155k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 155k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 155k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 155k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 155k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 155k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|  45.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 45.1k, False: 110k]
  ------------------
 9243|  45.1k|            SCN_VISIT(float);
  ------------------
  |  | 9202|  45.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  45.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  45.1k|    }                                                                  \
  |  | 9205|  45.1k|    else {                                                             \
  |  | 9206|  45.1k|        return vis(monostate_val);                                     \
  |  | 9207|  45.1k|    }
  ------------------
 9244|  99.7k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 54.6k, False: 101k]
  ------------------
 9245|  99.7k|            SCN_VISIT(double);
  ------------------
  |  | 9202|  99.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|  99.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|  99.7k|    }                                                                  \
  |  | 9205|  99.7k|    else {                                                             \
  |  | 9206|  99.7k|        return vis(monostate_val);                                     \
  |  | 9207|  99.7k|    }
  ------------------
 9246|   155k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 55.9k, False: 99.7k]
  ------------------
 9247|   155k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   155k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   155k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   155k|    }                                                                  \
  |  | 9205|   155k|    else {                                                             \
  |  | 9206|   155k|        return vis(monostate_val);                                     \
  |  | 9207|   155k|    }
  ------------------
 9248|   155k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 155k]
  ------------------
 9249|   155k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   155k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   155k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   155k|    }                                                                  \
  |  | 9205|   155k|    else {                                                             \
  |  | 9206|   155k|        return vis(monostate_val);                                     \
  |  | 9207|   155k|    }
  ------------------
 9250|   155k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 155k]
  ------------------
 9251|   155k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   155k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   155k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   155k|    }                                                                  \
  |  | 9205|   155k|    else {                                                             \
  |  | 9206|   155k|        return vis(monostate_val);                                     \
  |  | 9207|   155k|    }
  ------------------
 9252|   155k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 155k]
  ------------------
 9253|   155k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   155k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   155k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   155k|    }                                                                  \
  |  | 9205|   155k|    else {                                                             \
  |  | 9206|   155k|        return vis(monostate_val);                                     \
  |  | 9207|   155k|    }
  ------------------
 9254|   155k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 155k]
  ------------------
 9255|   155k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   155k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   155k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   155k|    }                                                                  \
  |  | 9205|   155k|    else {                                                             \
  |  | 9206|   155k|        return vis(monostate_val);                                     \
  |  | 9207|   155k|    }
  ------------------
 9256|   155k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 155k]
  ------------------
 9257|   155k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   155k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   155k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   155k|    }                                                                  \
  |  | 9205|   155k|    else {                                                             \
  |  | 9206|   155k|        return vis(monostate_val);                                     \
  |  | 9207|   155k|    }
  ------------------
 9258|   155k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 155k]
  ------------------
 9259|   155k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   155k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   155k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   155k|    }                                                                  \
  |  | 9205|   155k|    else {                                                             \
  |  | 9206|   155k|        return vis(monostate_val);                                     \
  |  | 9207|   155k|    }
  ------------------
 9260|       |
 9261|   155k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 155k]
  ------------------
 9262|   155k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   155k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   155k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 155k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 155k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   155k|            SCN_CLANG_POP
 9279|   155k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7792|   430k|{
 7793|   430k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7794|   430k|    handler.check_args_exhausted();
 7795|   430k|    return handler.get_error();
 7796|   430k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7757|   430k|{
 7758|       |    // TODO: memchr fast path with a larger (> 32) format string
 7759|       |
 7760|   430k|    auto begin = format.data();
 7761|   430k|    auto it = begin;
 7762|   430k|    const auto end = format.data() + format.size();
 7763|       |
 7764|   723k|    while (it != end) {
  ------------------
  |  Branch (7764:12): [True: 430k, False: 293k]
  ------------------
 7765|   430k|        const auto ch = *it++;
 7766|   430k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7766:13): [True: 430k, False: 0]
  ------------------
 7767|   430k|            handler.on_literal_text(begin, it - 1);
 7768|       |
 7769|   430k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7770|   430k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7770:17): [True: 137k, False: 293k]
  ------------------
 7771|   137k|                return;
 7772|   137k|            }
 7773|   430k|        }
 7774|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7774:18): [True: 0, False: 0]
  ------------------
 7775|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7776|      0|                handler.on_error("Unmatched '}' in format string");
 7777|      0|                return;
 7778|      0|            }
 7779|       |
 7780|      0|            handler.on_literal_text(begin, it);
 7781|      0|            begin = ++it;
 7782|      0|        }
 7783|   430k|    }
 7784|       |
 7785|   293k|    handler.on_literal_text(begin, end);
 7786|   293k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8970|   293k|    {
 8971|   293k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   293k|    static_cast<    \
  |  |  935|   293k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8972|   293k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7689|   430k|{
 7690|   430k|    struct id_adapter {
 7691|   430k|        constexpr void operator()()
 7692|   430k|        {
 7693|   430k|            arg_id = handler.on_arg_id();
 7694|   430k|        }
 7695|   430k|        constexpr void operator()(std::size_t id)
 7696|   430k|        {
 7697|   430k|            arg_id = handler.on_arg_id(id);
 7698|   430k|        }
 7699|       |
 7700|   430k|        constexpr void on_error(const char* msg)
 7701|   430k|        {
 7702|   430k|            SCN_UNLIKELY_ATTR
 7703|   430k|            handler.on_error(msg);
 7704|   430k|        }
 7705|       |
 7706|   430k|        Handler& handler;
 7707|   430k|        std::size_t arg_id;
 7708|   430k|    };
 7709|       |
 7710|   430k|    ++begin;
 7711|   430k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 430k]
  |  |  ------------------
  ------------------
 7712|      0|        handler.on_error("Unexpected end of replacement field");
 7713|      0|        return begin;
 7714|      0|    }
 7715|       |
 7716|   430k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7716:9): [True: 0, False: 430k]
  ------------------
 7717|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7718|      0|    }
 7719|   430k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7719:14): [True: 0, False: 430k]
  ------------------
 7720|      0|        handler.on_literal_text(begin, begin + 1);
 7721|      0|    }
 7722|   430k|    else {
 7723|   430k|        auto adapter = id_adapter{handler, 0};
 7724|   430k|        begin = parse_arg_id(begin, end, adapter);
 7725|       |
 7726|   430k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 430k]
  |  |  ------------------
  ------------------
 7727|      0|            handler.on_error("Missing '}' in format string");
 7728|      0|            return begin;
 7729|      0|        }
 7730|       |
 7731|   430k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7731:13): [True: 0, False: 430k]
  ------------------
 7732|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7733|      0|        }
 7734|   430k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7734:18): [True: 430k, False: 0]
  ------------------
 7735|   430k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 430k]
  |  |  ------------------
  ------------------
 7736|      0|                handler.on_error("Unexpected end of replacement field");
 7737|      0|                return begin;
 7738|      0|            }
 7739|   430k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7740|   430k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   860k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 430k]
  |  |  |  Branch (865:45): [True: 0, False: 430k]
  |  |  |  Branch (865:45): [True: 0, False: 430k]
  |  |  ------------------
  ------------------
 7741|      0|                handler.on_error("Unknown format specifier");
 7742|      0|                return begin;
 7743|      0|            }
 7744|   430k|        }
 7745|      0|        else {
 7746|      0|            SCN_UNLIKELY_ATTR
 7747|      0|            handler.on_error("Missing '}' in format string");
 7748|      0|            return begin;
 7749|      0|        }
 7750|   430k|    }
 7751|   430k|    return begin + 1;
 7752|   430k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7190|   430k|{
 7191|   430k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   430k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   430k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7192|   430k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7192:9): [True: 430k, False: 0]
  |  Branch (7192:26): [True: 0, False: 430k]
  ------------------
 7193|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7194|      0|    }
 7195|       |
 7196|   430k|    handler();
 7197|   430k|    return begin;
 7198|   430k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7692|   430k|        {
 7693|   430k|            arg_id = handler.on_arg_id();
 7694|   430k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7869|   430k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7870|   430k|    {
 7871|   430k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   430k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   430k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7872|   430k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7605|   430k|{
 7606|   430k|    auto do_presentation = [&]() -> const CharT* {
 7607|   430k|        if (*begin == CharT{'['}) {
 7608|   430k|            auto set = parse_presentation_set(begin, end, handler);
 7609|   430k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7610|       |                // clang-format off
 7611|   430k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|   430k|                return begin;
 7614|   430k|            }
 7615|   430k|            handler.on_character_set_string(set);
 7616|   430k|            return begin;
 7617|   430k|        }
 7618|   430k|        if (*begin == CharT{'/'}) {
 7619|   430k|            return parse_presentation_regex(begin, end, handler);
 7620|   430k|        }
 7621|   430k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   430k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7623|   430k|            handler.on_error("Invalid type specifier in format string");
 7624|   430k|            return begin;
 7625|   430k|        }
 7626|   430k|        handler.on_type(type);
 7627|   430k|        return begin;
 7628|   430k|    };
 7629|       |
 7630|   430k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7630:9): [True: 430k, False: 0]
  |  Branch (7630:28): [True: 430k, False: 0]
  ------------------
 7631|   430k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7631:9): [True: 430k, False: 0]
  |  Branch (7631:36): [True: 326k, False: 103k]
  ------------------
 7632|   326k|        return do_presentation();
 7633|   326k|    }
 7634|       |
 7635|   103k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 7636|      0|        handler.on_error("Unexpected end of format string");
 7637|      0|        return begin;
 7638|      0|    }
 7639|       |
 7640|   103k|    begin = parse_align(begin, end, handler);
 7641|   103k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 7642|      0|        handler.on_error("Unexpected end of format string");
 7643|      0|        return begin;
 7644|      0|    }
 7645|       |
 7646|   103k|    begin = parse_width(begin, end, handler);
 7647|   103k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 7648|      0|        handler.on_error("Unexpected end of format string");
 7649|      0|        return begin;
 7650|      0|    }
 7651|       |
 7652|   103k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7652:9): [True: 0, False: 103k]
  ------------------
 7653|      0|        ++begin;
 7654|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7655|      0|            handler.on_error("Unexpected end of format string");
 7656|      0|            return begin;
 7657|      0|        }
 7658|      0|        begin = parse_precision(begin, end, handler);
 7659|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7660|      0|            handler.on_error("Unexpected end of format string");
 7661|      0|            return begin;
 7662|      0|        }
 7663|      0|    }
 7664|       |
 7665|   103k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7665:9): [True: 103k, False: 0]
  ------------------
 7666|   103k|        handler.on_localized();
 7667|   103k|        ++begin;
 7668|   103k|    }
 7669|   103k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 7670|      0|        handler.on_error("Unexpected end of format string");
 7671|      0|        return begin;
 7672|      0|    }
 7673|       |
 7674|   103k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7674:9): [True: 103k, False: 0]
  |  Branch (7674:25): [True: 0, False: 103k]
  ------------------
 7675|      0|        do_presentation();
 7676|      0|    }
 7677|   103k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 7678|      0|        handler.on_error("Unexpected end of format string");
 7679|      0|        return begin;
 7680|      0|    }
 7681|       |
 7682|   103k|    return begin;
 7683|   103k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7606|   326k|    auto do_presentation = [&]() -> const CharT* {
 7607|   326k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7607:13): [True: 0, False: 326k]
  ------------------
 7608|      0|            auto set = parse_presentation_set(begin, end, handler);
 7609|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7610|       |                // clang-format off
 7611|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7612|       |                // clang-format on
 7613|      0|                return begin;
 7614|      0|            }
 7615|      0|            handler.on_character_set_string(set);
 7616|      0|            return begin;
 7617|      0|        }
 7618|   326k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7618:13): [True: 0, False: 326k]
  ------------------
 7619|      0|            return parse_presentation_regex(begin, end, handler);
 7620|      0|        }
 7621|   326k|        presentation_type type = parse_presentation_type(*begin++);
 7622|   326k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 326k]
  |  |  ------------------
  ------------------
 7623|      0|            handler.on_error("Invalid type specifier in format string");
 7624|      0|            return begin;
 7625|      0|        }
 7626|   326k|        handler.on_type(type);
 7627|   326k|        return begin;
 7628|   326k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7279|   103k|{
 7280|   103k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   103k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   103k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7281|       |
 7282|   103k|    auto check_align = [](wchar_t ch) {
 7283|   103k|        switch (ch) {
 7284|   103k|            case L'<':
 7285|   103k|                return align_type::left;
 7286|   103k|            case L'>':
 7287|   103k|                return align_type::right;
 7288|   103k|            case L'^':
 7289|   103k|                return align_type::center;
 7290|   103k|            default:
 7291|   103k|                return align_type::none;
 7292|   103k|        }
 7293|   103k|    };
 7294|       |
 7295|   103k|    auto potential_fill_len = code_point_length(begin, end);
 7296|   103k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 103k]
  |  |  |  Branch (865:45): [True: 0, False: 103k]
  |  |  |  Branch (865:45): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 7297|   103k|                     std::distance(begin, end) < potential_fill_len)) {
 7298|      0|        handler.on_error("Invalid encoding in fill character");
 7299|      0|        return begin;
 7300|      0|    }
 7301|       |
 7302|   103k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7303|       |
 7304|   103k|    auto potential_fill = std::basic_string_view<CharT>{
 7305|   103k|        begin, static_cast<size_t>(potential_fill_len)};
 7306|   103k|    const auto begin_before_fill = begin;
 7307|   103k|    begin += potential_fill_len;
 7308|       |
 7309|   103k|    if (begin == end) {
  ------------------
  |  Branch (7309:9): [True: 0, False: 103k]
  ------------------
 7310|      0|        return begin_before_fill;
 7311|      0|    }
 7312|       |
 7313|   103k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7314|   103k|    const auto begin_after_fill = begin;
 7315|   103k|    ++begin;
 7316|       |
 7317|   103k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7317:9): [True: 103k, False: 0]
  ------------------
 7318|   103k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 7319|      0|            handler.on_error("Invalid fill character '{' in format string");
 7320|      0|            return begin;
 7321|      0|        }
 7322|   103k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7322:13): [True: 0, False: 103k]
  ------------------
 7323|      0|            return begin_before_fill;
 7324|      0|        }
 7325|   103k|    }
 7326|       |
 7327|   103k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7327:9): [True: 103k, False: 0]
  ------------------
 7328|   103k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7328:13): [True: 0, False: 103k]
  ------------------
 7329|      0|            handler.on_align(potential_align_on_fill);
 7330|      0|            return begin_after_fill;
 7331|      0|        }
 7332|   103k|        return begin_before_fill;
 7333|   103k|    }
 7334|       |
 7335|      0|    handler.on_fill(potential_fill);
 7336|      0|    handler.on_align(potential_align_after_fill);
 7337|      0|    return begin;
 7338|   103k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7282|   207k|    auto check_align = [](wchar_t ch) {
 7283|   207k|        switch (ch) {
 7284|      0|            case L'<':
  ------------------
  |  Branch (7284:13): [True: 0, False: 207k]
  ------------------
 7285|      0|                return align_type::left;
 7286|      0|            case L'>':
  ------------------
  |  Branch (7286:13): [True: 0, False: 207k]
  ------------------
 7287|      0|                return align_type::right;
 7288|      0|            case L'^':
  ------------------
  |  Branch (7288:13): [True: 0, False: 207k]
  ------------------
 7289|      0|                return align_type::center;
 7290|   207k|            default:
  ------------------
  |  Branch (7290:13): [True: 207k, False: 0]
  ------------------
 7291|   207k|                return align_type::none;
 7292|   207k|        }
 7293|   207k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7344|   103k|{
 7345|   103k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   103k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   103k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7346|       |
 7347|   103k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7347:9): [True: 103k, False: 0]
  |  Branch (7347:33): [True: 0, False: 103k]
  ------------------
 7348|      0|        int width = parse_simple_int(begin, end);
 7349|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7350|      0|            handler.on_width(width);
 7351|      0|        }
 7352|      0|        else {
 7353|      0|            handler.on_error("Invalid field width");
 7354|      0|            return begin;
 7355|      0|        }
 7356|      0|    }
 7357|   103k|    return begin;
 7358|   103k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7875|   103k|    {
 7876|   103k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7877|   103k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7877:13): [True: 103k, False: 0]
  ------------------
 7878|   103k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7878:13): [True: 103k, False: 0]
  ------------------
 7879|   103k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7879:13): [True: 0, False: 103k]
  ------------------
 7880|   103k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7880:13): [True: 0, False: 0]
  ------------------
 7881|      0|            SCN_UNLIKELY_ATTR
 7882|       |            // clang-format off
 7883|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7884|       |            // clang-format on
 7885|      0|        }
 7886|       |
 7887|   103k|        Handler::on_localized();
 7888|   103k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9299|   430k|{
 9300|   430k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9301|   430k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9200|   430k|{
 9201|   430k|#define SCN_VISIT(Type)                                                \
 9202|   430k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9203|   430k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9204|   430k|    }                                                                  \
 9205|   430k|    else {                                                             \
 9206|   430k|        return vis(monostate_val);                                     \
 9207|   430k|    }
 9208|       |
 9209|   430k|    monostate monostate_val{};
 9210|       |
 9211|   430k|    switch (get_arg_type(arg)) {
 9212|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9212:9): [True: 0, False: 430k]
  ------------------
 9213|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9214|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9214:9): [True: 0, False: 430k]
  ------------------
 9215|      0|            SCN_VISIT(short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9216|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9216:9): [True: 0, False: 430k]
  ------------------
 9217|      0|            SCN_VISIT(int);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9218|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9218:9): [True: 0, False: 430k]
  ------------------
 9219|      0|            SCN_VISIT(long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9220|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9220:9): [True: 0, False: 430k]
  ------------------
 9221|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9222|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9222:9): [True: 0, False: 430k]
  ------------------
 9223|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9224|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9224:9): [True: 0, False: 430k]
  ------------------
 9225|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9226|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9226:9): [True: 0, False: 430k]
  ------------------
 9227|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9228|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9228:9): [True: 0, False: 430k]
  ------------------
 9229|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9230|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9230:9): [True: 0, False: 430k]
  ------------------
 9231|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9232|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9232:9): [True: 0, False: 430k]
  ------------------
 9233|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9234|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9234:9): [True: 0, False: 430k]
  ------------------
 9235|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9236|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 430k]
  ------------------
 9237|      0|            SCN_VISIT(char);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 430k]
  ------------------
 9239|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 430k]
  ------------------
 9241|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9202|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|      0|    }                                                                  \
  |  | 9205|      0|    else {                                                             \
  |  | 9206|      0|        return vis(monostate_val);                                     \
  |  | 9207|      0|    }
  ------------------
 9242|   134k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9242:9): [True: 134k, False: 295k]
  ------------------
 9243|   134k|            SCN_VISIT(float);
  ------------------
  |  | 9202|   134k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   134k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   134k|    }                                                                  \
  |  | 9205|   134k|    else {                                                             \
  |  | 9206|   134k|        return vis(monostate_val);                                     \
  |  | 9207|   134k|    }
  ------------------
 9244|   281k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9244:9): [True: 146k, False: 283k]
  ------------------
 9245|   281k|            SCN_VISIT(double);
  ------------------
  |  | 9202|   281k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   281k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   281k|    }                                                                  \
  |  | 9205|   281k|    else {                                                             \
  |  | 9206|   281k|        return vis(monostate_val);                                     \
  |  | 9207|   281k|    }
  ------------------
 9246|   430k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9246:9): [True: 148k, False: 281k]
  ------------------
 9247|   430k|            SCN_VISIT(long double);
  ------------------
  |  | 9202|   430k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   430k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   430k|    }                                                                  \
  |  | 9205|   430k|    else {                                                             \
  |  | 9206|   430k|        return vis(monostate_val);                                     \
  |  | 9207|   430k|    }
  ------------------
 9248|   430k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 430k]
  ------------------
 9249|   430k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9202|   430k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   430k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   430k|    }                                                                  \
  |  | 9205|   430k|    else {                                                             \
  |  | 9206|   430k|        return vis(monostate_val);                                     \
  |  | 9207|   430k|    }
  ------------------
 9250|   430k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 430k]
  ------------------
 9251|   430k|            SCN_VISIT(std::string);
  ------------------
  |  | 9202|   430k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   430k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   430k|    }                                                                  \
  |  | 9205|   430k|    else {                                                             \
  |  | 9206|   430k|        return vis(monostate_val);                                     \
  |  | 9207|   430k|    }
  ------------------
 9252|   430k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 430k]
  ------------------
 9253|   430k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9202|   430k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   430k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   430k|    }                                                                  \
  |  | 9205|   430k|    else {                                                             \
  |  | 9206|   430k|        return vis(monostate_val);                                     \
  |  | 9207|   430k|    }
  ------------------
 9254|   430k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 430k]
  ------------------
 9255|   430k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9202|   430k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   430k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   430k|    }                                                                  \
  |  | 9205|   430k|    else {                                                             \
  |  | 9206|   430k|        return vis(monostate_val);                                     \
  |  | 9207|   430k|    }
  ------------------
 9256|   430k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 430k]
  ------------------
 9257|   430k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9202|   430k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   430k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   430k|    }                                                                  \
  |  | 9205|   430k|    else {                                                             \
  |  | 9206|   430k|        return vis(monostate_val);                                     \
  |  | 9207|   430k|    }
  ------------------
 9258|   430k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 430k]
  ------------------
 9259|   430k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9202|   430k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9203|   430k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9204|   430k|    }                                                                  \
  |  | 9205|   430k|    else {                                                             \
  |  | 9206|   430k|        return vis(monostate_val);                                     \
  |  | 9207|   430k|    }
  ------------------
 9260|       |
 9261|   430k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9261:9): [True: 0, False: 430k]
  ------------------
 9262|   430k|#if !SCN_DISABLE_TYPE_CUSTOM
 9263|   430k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9264|   430k|                get_arg_value(arg).custom_value));
 9265|       |#else
 9266|       |            return vis(monostate_val);
 9267|       |#endif
 9268|       |
 9269|      0|            SCN_CLANG_PUSH
 9270|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9271|       |
 9272|      0|            SCN_UNLIKELY_ATTR
 9273|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9273:9): [True: 0, False: 430k]
  ------------------
 9274|      0|        default: {
  ------------------
  |  Branch (9274:9): [True: 0, False: 430k]
  ------------------
 9275|      0|            return vis(monostate_val);
 9276|      0|        }
 9277|       |
 9278|   430k|            SCN_CLANG_POP
 9279|   430k|    }
 9280|       |
 9281|      0|#undef SCN_VISIT
 9282|       |
 9283|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9284|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9285|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4351|   178k|    {
 4352|   178k|        return sync(0);
 4353|   178k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6130|   221k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6130|   103k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  82.2k|{
   89|  82.2k|    auto result = make_scan_result<Source, Args...>();
   90|  82.2k|    fill_scan_result(result,
   91|  82.2k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  82.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  82.2k|                           make_scan_args<wscan_context>(result->values())));
   93|  82.2k|    return result;
   94|  82.2k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   267k|{
   44|   267k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   267k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  82.2k|{
  131|  82.2k|    auto result = make_scan_result<Source, Args...>();
  132|  82.2k|    fill_scan_result(result,
  133|  82.2k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  82.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  82.2k|                           make_scan_args<wscan_context>(result->values())));
  135|  82.2k|    return result;
  136|  82.2k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   267k|{
   60|   267k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   267k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  15.0k|{
  171|  15.0k|    auto result = make_scan_result<Source, T>();
  172|  15.0k|    fill_scan_result(
  173|  15.0k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  15.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  15.0k|                            detail::make_arg<wscan_context>(result->value())));
  175|  15.0k|    return result;
  176|  15.0k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  51.9k|{
   72|  51.9k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  51.9k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  91.7k|{
   89|  91.7k|    auto result = make_scan_result<Source, Args...>();
   90|  91.7k|    fill_scan_result(result,
   91|  91.7k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  91.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  91.7k|                           make_scan_args<wscan_context>(result->values())));
   93|  91.7k|    return result;
   94|  91.7k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  91.7k|{
  131|  91.7k|    auto result = make_scan_result<Source, Args...>();
  132|  91.7k|    fill_scan_result(result,
  133|  91.7k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  91.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  91.7k|                           make_scan_args<wscan_context>(result->values())));
  135|  91.7k|    return result;
  136|  91.7k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  18.2k|{
  171|  18.2k|    auto result = make_scan_result<Source, T>();
  172|  18.2k|    fill_scan_result(
  173|  18.2k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  18.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  18.2k|                            detail::make_arg<wscan_context>(result->value())));
  175|  18.2k|    return result;
  176|  18.2k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  93.0k|{
   89|  93.0k|    auto result = make_scan_result<Source, Args...>();
   90|  93.0k|    fill_scan_result(result,
   91|  93.0k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  93.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  93.0k|                           make_scan_args<wscan_context>(result->values())));
   93|  93.0k|    return result;
   94|  93.0k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  93.0k|{
  131|  93.0k|    auto result = make_scan_result<Source, Args...>();
  132|  93.0k|    fill_scan_result(result,
  133|  93.0k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  93.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  93.0k|                           make_scan_args<wscan_context>(result->values())));
  135|  93.0k|    return result;
  136|  93.0k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  18.6k|{
  171|  18.6k|    auto result = make_scan_result<Source, T>();
  172|  18.6k|    fill_scan_result(
  173|  18.6k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  18.6k|                            detail::make_arg<wscan_context>(result->value())));
  175|  18.6k|    return result;
  176|  18.6k|}
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  82.2k|{
   89|  82.2k|    auto result = make_scan_result<Source, Args...>();
   90|  82.2k|    fill_scan_result(result,
   91|  82.2k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  82.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  82.2k|                           make_scan_args<wscan_context>(result->values())));
   93|  82.2k|    return result;
   94|  82.2k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   266k|{
   44|   266k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   266k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  82.2k|{
  131|  82.2k|    auto result = make_scan_result<Source, Args...>();
  132|  82.2k|    fill_scan_result(result,
  133|  82.2k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  82.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  82.2k|                           make_scan_args<wscan_context>(result->values())));
  135|  82.2k|    return result;
  136|  82.2k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   266k|{
   60|   266k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   266k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  15.0k|{
  171|  15.0k|    auto result = make_scan_result<Source, T>();
  172|  15.0k|    fill_scan_result(
  173|  15.0k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  15.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  15.0k|                            detail::make_arg<wscan_context>(result->value())));
  175|  15.0k|    return result;
  176|  15.0k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  51.9k|{
   72|  51.9k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  51.9k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  91.6k|{
   89|  91.6k|    auto result = make_scan_result<Source, Args...>();
   90|  91.6k|    fill_scan_result(result,
   91|  91.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  91.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  91.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  91.6k|    return result;
   94|  91.6k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  91.6k|{
  131|  91.6k|    auto result = make_scan_result<Source, Args...>();
  132|  91.6k|    fill_scan_result(result,
  133|  91.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  91.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  91.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  91.6k|    return result;
  136|  91.6k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  18.2k|{
  171|  18.2k|    auto result = make_scan_result<Source, T>();
  172|  18.2k|    fill_scan_result(
  173|  18.2k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  18.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  18.2k|                            detail::make_arg<wscan_context>(result->value())));
  175|  18.2k|    return result;
  176|  18.2k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  93.0k|{
   89|  93.0k|    auto result = make_scan_result<Source, Args...>();
   90|  93.0k|    fill_scan_result(result,
   91|  93.0k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  93.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  93.0k|                           make_scan_args<wscan_context>(result->values())));
   93|  93.0k|    return result;
   94|  93.0k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  93.0k|{
  131|  93.0k|    auto result = make_scan_result<Source, Args...>();
  132|  93.0k|    fill_scan_result(result,
  133|  93.0k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  93.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  93.0k|                           make_scan_args<wscan_context>(result->values())));
  135|  93.0k|    return result;
  136|  93.0k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  18.6k|{
  171|  18.6k|    auto result = make_scan_result<Source, T>();
  172|  18.6k|    fill_scan_result(
  173|  18.6k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  18.6k|                            detail::make_arg<wscan_context>(result->value())));
  175|  18.6k|    return result;
  176|  18.6k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  1.56M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  1.56M|{
  309|  1.56M|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  1.56M|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|   663k|{
  315|   663k|    static_assert(std::is_same_v<Locale, std::locale>);
  316|   663k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 331k, False: 331k]
  ------------------
  317|   663k|                    : std::locale{};
  318|   663k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
  894|   698k|{
  895|   698k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   698k|                                  m_nan_payload_buffer, value);
  897|   698k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   698k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 682k, False: 16.0k]
  |  |  ------------------
  ------------------
  898|   682k|        value = this->setsign(value);
  899|   682k|        return n;
  900|   682k|    }
  901|       |
  902|  16.0k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 4.74k, False: 11.3k]
  ------------------
  903|  16.0k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 1.02k, False: 3.71k]
  ------------------
  904|  1.02k|        return detail::unexpected_scan_error(
  905|  1.02k|            scan_error::value_negative_overflow, n.error().msg());
  906|  1.02k|    }
  907|  15.0k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 944, False: 14.0k]
  ------------------
  908|  15.0k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 94, False: 850]
  ------------------
  909|     94|        return detail::unexpected_scan_error(
  910|     94|            scan_error::value_negative_underflow, n.error().msg());
  911|     94|    }
  912|  14.9k|    return n;
  913|  15.0k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
  894|   273k|{
  895|   273k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   273k|                                  m_nan_payload_buffer, value);
  897|   273k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   273k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 240k, False: 33.5k]
  |  |  ------------------
  ------------------
  898|   240k|        value = this->setsign(value);
  899|   240k|        return n;
  900|   240k|    }
  901|       |
  902|  33.5k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 2.67k, False: 30.8k]
  ------------------
  903|  33.5k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 14, False: 2.66k]
  ------------------
  904|     14|        return detail::unexpected_scan_error(
  905|     14|            scan_error::value_negative_overflow, n.error().msg());
  906|     14|    }
  907|  33.5k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 882, False: 32.6k]
  ------------------
  908|  33.5k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 14, False: 868]
  ------------------
  909|     14|        return detail::unexpected_scan_error(
  910|     14|            scan_error::value_negative_underflow, n.error().msg());
  911|     14|    }
  912|  33.4k|    return n;
  913|  33.5k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  894|   722k|{
  895|   722k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   722k|                                  m_nan_payload_buffer, value);
  897|   722k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   722k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 709k, False: 13.5k]
  |  |  ------------------
  ------------------
  898|   709k|        value = this->setsign(value);
  899|   709k|        return n;
  900|   709k|    }
  901|       |
  902|  13.5k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 2.40k, False: 11.1k]
  ------------------
  903|  13.5k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 553, False: 1.84k]
  ------------------
  904|    553|        return detail::unexpected_scan_error(
  905|    553|            scan_error::value_negative_overflow, n.error().msg());
  906|    553|    }
  907|  13.0k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 293, False: 12.7k]
  ------------------
  908|  13.0k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 62, False: 231]
  ------------------
  909|     62|        return detail::unexpected_scan_error(
  910|     62|            scan_error::value_negative_underflow, n.error().msg());
  911|     62|    }
  912|  12.9k|    return n;
  913|  13.0k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
  894|   316k|{
  895|   316k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   316k|                                  m_nan_payload_buffer, value);
  897|   316k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   316k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 284k, False: 32.2k]
  |  |  ------------------
  ------------------
  898|   284k|        value = this->setsign(value);
  899|   284k|        return n;
  900|   284k|    }
  901|       |
  902|  32.2k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 1.49k, False: 30.7k]
  ------------------
  903|  32.2k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 14, False: 1.48k]
  ------------------
  904|     14|        return detail::unexpected_scan_error(
  905|     14|            scan_error::value_negative_overflow, n.error().msg());
  906|     14|    }
  907|  32.2k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 174, False: 32.0k]
  ------------------
  908|  32.2k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 0, False: 174]
  ------------------
  909|      0|        return detail::unexpected_scan_error(
  910|      0|            scan_error::value_negative_underflow, n.error().msg());
  911|      0|    }
  912|  32.2k|    return n;
  913|  32.2k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
  894|   734k|{
  895|   734k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   734k|                                  m_nan_payload_buffer, value);
  897|   734k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   734k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 722k, False: 11.8k]
  |  |  ------------------
  ------------------
  898|   722k|        value = this->setsign(value);
  899|   722k|        return n;
  900|   722k|    }
  901|       |
  902|  11.8k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 518, False: 11.3k]
  ------------------
  903|  11.8k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 202, False: 316]
  ------------------
  904|    202|        return detail::unexpected_scan_error(
  905|    202|            scan_error::value_negative_overflow, n.error().msg());
  906|    202|    }
  907|  11.6k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 91, False: 11.5k]
  ------------------
  908|  11.6k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 16, False: 75]
  ------------------
  909|     16|        return detail::unexpected_scan_error(
  910|     16|            scan_error::value_negative_underflow, n.error().msg());
  911|     16|    }
  912|  11.6k|    return n;
  913|  11.6k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
  894|   321k|{
  895|   321k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
  896|   321k|                                  m_nan_payload_buffer, value);
  897|   321k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  864|   321k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 290k, False: 31.2k]
  |  |  ------------------
  ------------------
  898|   290k|        value = this->setsign(value);
  899|   290k|        return n;
  900|   290k|    }
  901|       |
  902|  31.2k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (902:9): [True: 222, False: 31.0k]
  ------------------
  903|  31.2k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (903:9): [True: 0, False: 222]
  ------------------
  904|      0|        return detail::unexpected_scan_error(
  905|      0|            scan_error::value_negative_overflow, n.error().msg());
  906|      0|    }
  907|  31.2k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (907:9): [True: 50, False: 31.1k]
  ------------------
  908|  31.2k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (908:9): [True: 0, False: 50]
  ------------------
  909|      0|        return detail::unexpected_scan_error(
  910|      0|            scan_error::value_negative_underflow, n.error().msg());
  911|      0|    }
  912|  31.2k|    return n;
  913|  31.2k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|   480k|{
 1903|   480k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|   480k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1910|   554k|{
 1911|   554k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1912|   554k|    return sync_after_vscan(source, n);
 1913|   554k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|   267k|{
 1921|   267k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|   267k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1928|   266k|{
 1929|   266k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1930|   266k|    return sync_after_vscan(source, n);
 1931|   266k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   958k|{
  207|   958k|    return find_classic_impl(
  208|   958k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   958k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   958k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  2.28M|{
  215|  2.28M|    return find_classic_impl(
  216|  2.28M|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  2.28M|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  2.28M|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|   480k|{
 1872|   480k|    return vscan_internal(source, format, args);
 1873|   480k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1877|   554k|{
 1878|   554k|    auto n = vscan_internal(source, format, args);
 1879|   554k|    return sync_after_vscan(source, n);
 1880|   554k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|   267k|{
 1886|   267k|    return vscan_internal(source, format, args);
 1887|   267k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1891|   266k|{
 1892|   266k|    auto n = vscan_internal(source, format, args);
 1893|   266k|    return sync_after_vscan(source, n);
 1894|   266k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1957|   105k|{
 1958|   105k|    return vscan_value_internal(source, arg);
 1959|   105k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1962|   115k|{
 1963|   115k|    auto n = vscan_value_internal(source, arg);
 1964|   115k|    return sync_after_vscan(source, n);
 1965|   115k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1970|  51.9k|{
 1971|  51.9k|    return vscan_value_internal(source, arg);
 1972|  51.9k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1976|  51.9k|{
 1977|  51.9k|    auto n = vscan_value_internal(source, arg);
 1978|  51.9k|    return sync_after_vscan(source, n);
 1979|  51.9k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   958k|{
  131|   958k|    auto it = source.begin();
  132|       |
  133|  3.12M|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 2.50M, False: 613k]
  ------------------
  134|  2.50M|        auto sv =
  135|  2.50M|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  2.50M|                .substr(0, 8);
  137|       |
  138|  2.50M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 2.45M, False: 57.0k]
  ------------------
  139|  2.45M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  2.45M|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  2.45M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 322k, False: 2.12M]
  ------------------
  142|   322k|                break;
  143|   322k|            }
  144|  2.12M|            continue;
  145|  2.45M|        }
  146|       |
  147|   187k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 153k, False: 33.8k]
  ------------------
  148|   153k|            auto tmp =
  149|   153k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   153k|            auto res = get_next_code_point(tmp);
  151|   153k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 23.2k, False: 130k]
  ------------------
  152|  23.2k|                return it;
  153|  23.2k|            }
  154|   130k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|   130k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   130k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|   130k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   130k|        }
  158|  57.0k|    }
  159|       |
  160|   935k|    return detail::make_string_view_iterator(source, it);
  161|   958k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  3.91M|{
  118|  3.91M|    static_assert(sizeof(*source.data()) == 1);
  119|  3.91M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|  3.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  3.91M|    uint64_t word{};
  121|  3.91M|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  3.91M|    return has_byte_greater(word, 127) != 0;
  124|  3.91M|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  14.9M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   153k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  2.28M|{
  131|  2.28M|    auto it = source.begin();
  132|       |
  133|  2.48M|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 1.40M, False: 1.08M]
  ------------------
  134|  1.40M|        auto sv =
  135|  1.40M|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  1.40M|                .substr(0, 8);
  137|       |
  138|  1.40M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 1.32M, False: 79.5k]
  ------------------
  139|  1.32M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  1.32M|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  1.32M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 1.13M, False: 195k]
  ------------------
  142|  1.13M|                break;
  143|  1.13M|            }
  144|   195k|            continue;
  145|  1.32M|        }
  146|       |
  147|   150k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 143k, False: 7.52k]
  ------------------
  148|   143k|            auto tmp =
  149|   143k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   143k|            auto res = get_next_code_point(tmp);
  151|   143k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 71.9k, False: 71.0k]
  ------------------
  152|  71.9k|                return it;
  153|  71.9k|            }
  154|  71.0k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  71.0k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  71.0k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  71.0k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  71.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  71.0k|        }
  158|  79.5k|    }
  159|       |
  160|  2.21M|    return detail::make_string_view_iterator(source, it);
  161|  2.28M|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|  1.99M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|   143k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   698k|{
  804|   698k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 3.60k, False: 694k]
  ------------------
  805|  3.60k|        value = std::numeric_limits<T>::infinity();
  806|  3.60k|        return 3;
  807|  3.60k|    }
  808|   694k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 3.61k, False: 691k]
  ------------------
  809|  3.61k|        value = std::numeric_limits<T>::infinity();
  810|  3.61k|        return 8;
  811|  3.61k|    }
  812|   691k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 36.5k, False: 654k]
  ------------------
  813|  36.5k|        value = std::numeric_limits<T>::quiet_NaN();
  814|  36.5k|        return 3;
  815|  36.5k|    }
  816|   654k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 1.14k, False: 653k]
  ------------------
  817|  1.14k|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|  1.14k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|  1.14k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|  1.14k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|  1.14k|    }
  848|       |
  849|   653k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   653k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   653k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   653k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 143k, False: 509k]
  ------------------
  851|   143k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.82k, False: 140k]
  |  |  ------------------
  ------------------
  852|  2.82k|            return detail::unexpected_scan_error(
  853|  2.82k|                scan_error::invalid_scanned_value,
  854|  2.82k|                "Invalid floating-point digit");
  855|  2.82k|        }
  856|   143k|    }
  857|   650k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   650k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.53k, False: 643k]
  |  |  ------------------
  ------------------
  858|  7.53k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  7.53k|                                             "Invalid floating-point digit");
  860|  7.53k|    }
  861|       |
  862|   643k|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|   643k|    else {
  879|       |        // Default to fast_float
  880|   643k|        return fast_float_impl<CharT, T>{data}(value);
  881|   643k|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   643k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
  739|   643k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  740|   643k|    {
  741|   643k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  368|  2.32M|    {
  369|  2.32M|        return {kind, options};
  370|  2.32M|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcfEclERf:
  744|   643k|    {
  745|   643k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (745:13): [True: 140k, False: 502k]
  ------------------
  746|   643k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (746:13): [True: 25.4k, False: 477k]
  ------------------
  747|       |            // fast_float doesn't support hexfloats
  748|   166k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  749|   166k|                                              value);
  750|   166k|        }
  751|       |
  752|   477k|        const auto flags = get_flags();
  753|   477k|        const auto view = get_view();
  754|   477k|        const auto result = fast_float::from_chars(
  755|   477k|            view.data(), view.data() + view.size(), value, flags);
  756|       |
  757|   477k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  865|   477k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 477k]
  |  |  ------------------
  ------------------
  758|      0|            return detail::unexpected_scan_error(
  759|      0|                scan_error::invalid_scanned_value,
  760|      0|                "fast_float: invalid_argument");
  761|      0|        }
  762|   477k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  865|   477k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.84k, False: 472k]
  |  |  ------------------
  ------------------
  763|       |            // may just be very large: fall back
  764|  4.84k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  765|  4.84k|                                              value);
  766|  4.84k|        }
  767|       |
  768|   472k|        return result.ptr - view.data();
  769|   477k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   170k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   170k|    {
  709|   170k|#if !SCN_DISABLE_STRTOD
  710|   170k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   170k|    }
  717|   170k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  551|   170k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   170k|    {
  553|   170k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  382|   232k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEclERf:
  556|   170k|    {
  557|   170k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   170k|                           generic_strtod);
  559|   170k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  388|   170k|    {
  389|   170k|        CharT* end{};
  390|   170k|        errno = 0;
  391|   170k|        value = strtod_cb(src, &end);
  392|   170k|        const auto saved_errno = errno;
  393|   170k|        auto chars_read = end - src;
  394|       |
  395|   170k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   170k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 5.68k, False: 165k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  5.68k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  5.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  5.68k|    }
  ------------------
  396|       |
  397|   165k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 139k, False: 25.3k]
  ------------------
  398|   165k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 139k, False: 0]
  ------------------
  399|   139k|            chars_read -= 2;
  400|   139k|        }
  401|       |
  402|   165k|        return chars_read;
  403|   170k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  431|   232k|    {
  432|   232k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (432:13): [True: 90.2k, False: 142k]
  |  Branch (432:37): [True: 0, False: 90.2k]
  ------------------
  433|      0|            SCN_UNLIKELY_ATTR
  434|      0|            return detail::unexpected_scan_error(
  435|      0|                scan_error::invalid_scanned_value,
  436|      0|                "strtod failed: No conversion");
  437|      0|        }
  438|       |
  439|   232k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (439:13): [True: 25.8k, False: 206k]
  ------------------
  440|   232k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (440:13): [True: 0, False: 25.8k]
  ------------------
  441|      0|            SCN_UNLIKELY_ATTR
  442|      0|            return detail::unexpected_scan_error(
  443|      0|                scan_error::invalid_scanned_value,
  444|      0|                "Hexfloats disallowed by format string");
  445|      0|        }
  446|       |
  447|   232k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (447:13): [True: 9.26k, False: 223k]
  |  Branch (447:34): [True: 1.82k, False: 7.43k]
  ------------------
  448|  1.82k|            SCN_UNLIKELY_ATTR
  449|  1.82k|            return detail::unexpected_scan_error(
  450|  1.82k|                scan_error::value_positive_underflow,
  451|  1.82k|                "strtod failed: underflow");
  452|  1.82k|        }
  453|       |
  454|   230k|        SCN_GCC_COMPAT_PUSH
  455|   230k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  456|       |
  457|   230k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (457:13): [True: 230k, False: 0]
  ------------------
  458|   230k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (458:13): [True: 230k, False: 0]
  ------------------
  459|   230k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (459:13): [True: 7.41k, False: 223k]
  ------------------
  460|  7.41k|            SCN_UNLIKELY_ATTR
  461|  7.41k|            return detail::unexpected_scan_error(
  462|  7.41k|                scan_error::value_positive_overflow, "strtod failed: overflow");
  463|  7.41k|        }
  464|       |
  465|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  466|       |
  467|   223k|            return {};
  468|   230k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEf:
  343|   241k|{
  344|   241k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (344:12): [True: 92.1k, False: 149k]
  |  Branch (344:25): [True: 0, False: 149k]
  ------------------
  345|   241k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   170k|    {
  409|   170k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 166k, False: 4.09k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   166k|            auto first_space = read_until_classic_space(input.view());
  412|   166k|            input.assign(
  413|   166k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   166k|        }
  415|       |
  416|   170k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 140k, False: 30.2k]
  ------------------
  417|   140k|            if constexpr (std::is_same_v<CharT, char>) {
  418|   140k|                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|       |            else {
  421|       |                input.get_allocated_string().insert(0, L"0x");
  422|       |            }
  423|   140k|        }
  424|       |
  425|   170k|        return input.get_allocated_string().c_str();
  426|   170k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  563|   170k|    {
  564|   170k|        if constexpr (std::is_same_v<CharT, char>) {
  565|   170k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|       |        else {
  568|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|       |        }
  570|   170k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  471|   170k|    {
  472|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  473|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  474|       |        if constexpr (std::is_same_v<T, float>) {
  475|       |            return ::strtof_l(str, str_end, cloc);
  476|       |        }
  477|       |        else if constexpr (std::is_same_v<T, double>) {
  478|       |            return ::strtod_l(str, str_end, cloc);
  479|       |        }
  480|       |        else if constexpr (std::is_same_v<T, long double>) {
  481|       |            return ::strtold_l(str, str_end, cloc);
  482|       |        }
  483|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  484|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  485|       |        if constexpr (std::is_same_v<T, float>) {
  486|       |            return ::_strtof_l(str, str_end, cloc);
  487|       |        }
  488|       |        else if constexpr (std::is_same_v<T, double>) {
  489|       |            return ::_strtod_l(str, str_end, cloc);
  490|       |        }
  491|       |        else if constexpr (std::is_same_v<T, long double>) {
  492|       |            return ::_strtold_l(str, str_end, cloc);
  493|       |        }
  494|       |#else
  495|   170k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  496|   170k|        if constexpr (std::is_same_v<T, float>) {
  497|   170k|            return std::strtof(str, str_end);
  498|       |        }
  499|       |        else if constexpr (std::is_same_v<T, double>) {
  500|       |            return std::strtod(str, str_end);
  501|       |        }
  502|       |        else if constexpr (std::is_same_v<T, long double>) {
  503|       |            return std::strtold(str, str_end);
  504|       |        }
  505|   170k|#endif
  506|   170k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
  723|  1.38M|    {
  724|  1.38M|        unsigned format_flags{};
  725|  1.38M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (725:13): [True: 1.37M, False: 10.6k]
  ------------------
  726|  1.37M|            format_flags |= fast_float::fixed;
  727|  1.37M|        }
  728|  1.38M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (728:13): [True: 1.18M, False: 203k]
  ------------------
  729|  1.18M|            format_flags |= fast_float::scientific;
  730|  1.18M|        }
  731|       |
  732|  1.38M|        return static_cast<fast_float::chars_format>(format_flags);
  733|  1.38M|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
  773|   477k|    {
  774|   477k|        if constexpr (sizeof(CharT) == 1) {
  775|   477k|            return m_input.view();
  776|       |        }
  777|       |        else if constexpr (sizeof(CharT) == 2) {
  778|       |            return std::u16string_view{
  779|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  780|       |                m_input.view().size()};
  781|       |        }
  782|       |        else {
  783|       |            return std::u32string_view{
  784|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
  785|       |                m_input.view().size()};
  786|       |        }
  787|   477k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   273k|{
  804|   273k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 273k]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|   273k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 273k]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|   273k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 273k]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|   273k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 273k]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|   273k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   273k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   273k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   273k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 66.4k, False: 207k]
  ------------------
  851|  66.4k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|  66.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.76k, False: 57.6k]
  |  |  ------------------
  ------------------
  852|  8.76k|            return detail::unexpected_scan_error(
  853|  8.76k|                scan_error::invalid_scanned_value,
  854|  8.76k|                "Invalid floating-point digit");
  855|  8.76k|        }
  856|  66.4k|    }
  857|   265k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   265k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.2k, False: 243k]
  |  |  ------------------
  ------------------
  858|  21.2k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  21.2k|                                             "Invalid floating-point digit");
  860|  21.2k|    }
  861|       |
  862|   243k|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|   243k|    else {
  879|       |        // Default to fast_float
  880|   243k|        return fast_float_impl<CharT, T>{data}(value);
  881|   243k|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   243k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
  739|   243k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  740|   243k|    {
  741|   243k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  368|   942k|    {
  369|   942k|        return {kind, options};
  370|   942k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwfEclERf:
  744|   243k|    {
  745|   243k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (745:13): [True: 57.6k, False: 186k]
  ------------------
  746|   243k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (746:13): [True: 368, False: 185k]
  ------------------
  747|       |            // fast_float doesn't support hexfloats
  748|  57.9k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  749|  57.9k|                                              value);
  750|  57.9k|        }
  751|       |
  752|   185k|        const auto flags = get_flags();
  753|   185k|        const auto view = get_view();
  754|   185k|        const auto result = fast_float::from_chars(
  755|   185k|            view.data(), view.data() + view.size(), value, flags);
  756|       |
  757|   185k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  865|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 185k]
  |  |  ------------------
  ------------------
  758|      0|            return detail::unexpected_scan_error(
  759|      0|                scan_error::invalid_scanned_value,
  760|      0|                "fast_float: invalid_argument");
  761|      0|        }
  762|   185k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  865|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.49k, False: 182k]
  |  |  ------------------
  ------------------
  763|       |            // may just be very large: fall back
  764|  3.49k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  765|  3.49k|                                              value);
  766|  3.49k|        }
  767|       |
  768|   182k|        return result.ptr - view.data();
  769|   185k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|  61.4k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|  61.4k|    {
  709|  61.4k|#if !SCN_DISABLE_STRTOD
  710|  61.4k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|  61.4k|    }
  717|  61.4k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  551|  61.4k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|  61.4k|    {
  553|  61.4k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEclERf:
  556|  61.4k|    {
  557|  61.4k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|  61.4k|                           generic_strtod);
  559|  61.4k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  388|  61.4k|    {
  389|  61.4k|        CharT* end{};
  390|  61.4k|        errno = 0;
  391|  61.4k|        value = strtod_cb(src, &end);
  392|  61.4k|        const auto saved_errno = errno;
  393|  61.4k|        auto chars_read = end - src;
  394|       |
  395|  61.4k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|  61.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  61.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.55k, False: 57.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.55k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.55k|    }
  ------------------
  396|       |
  397|  57.9k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 57.5k, False: 368]
  ------------------
  398|  57.9k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 57.5k, False: 0]
  ------------------
  399|  57.5k|            chars_read -= 2;
  400|  57.5k|        }
  401|       |
  402|  57.9k|        return chars_read;
  403|  61.4k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|  61.4k|    {
  409|  61.4k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 59.3k, False: 2.15k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|  59.3k|            auto first_space = read_until_classic_space(input.view());
  412|  59.3k|            input.assign(
  413|  59.3k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|  59.3k|        }
  415|       |
  416|  61.4k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 57.6k, False: 3.86k]
  ------------------
  417|       |            if constexpr (std::is_same_v<CharT, char>) {
  418|       |                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|  57.6k|            else {
  421|  57.6k|                input.get_allocated_string().insert(0, L"0x");
  422|  57.6k|            }
  423|  57.6k|        }
  424|       |
  425|  61.4k|        return input.get_allocated_string().c_str();
  426|  61.4k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  563|  61.4k|    {
  564|       |        if constexpr (std::is_same_v<CharT, char>) {
  565|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|  61.4k|        else {
  568|  61.4k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|  61.4k|        }
  570|  61.4k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  509|  61.4k|    {
  510|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  511|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  512|       |        if constexpr (std::is_same_v<T, float>) {
  513|       |            return ::wcstof_l(str, str_end, cloc);
  514|       |        }
  515|       |        else if constexpr (std::is_same_v<T, double>) {
  516|       |            return ::wcstod_l(str, str_end, cloc);
  517|       |        }
  518|       |        else if constexpr (std::is_same_v<T, long double>) {
  519|       |            return ::wcstold_l(str, str_end, cloc);
  520|       |        }
  521|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  522|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  523|       |        if constexpr (std::is_same_v<T, float>) {
  524|       |            return ::_wcstof_l(str, str_end, cloc);
  525|       |        }
  526|       |        else if constexpr (std::is_same_v<T, double>) {
  527|       |            return ::_wcstod_l(str, str_end, cloc);
  528|       |        }
  529|       |        else if constexpr (std::is_same_v<T, long double>) {
  530|       |            return ::_wcstold_l(str, str_end, cloc);
  531|       |        }
  532|       |#else
  533|  61.4k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  534|  61.4k|        if constexpr (std::is_same_v<T, float>) {
  535|  61.4k|            return std::wcstof(str, str_end);
  536|       |        }
  537|       |        else if constexpr (std::is_same_v<T, double>) {
  538|       |            return std::wcstod(str, str_end);
  539|       |        }
  540|       |        else if constexpr (std::is_same_v<T, long double>) {
  541|       |            return std::wcstold(str, str_end);
  542|       |        }
  543|  61.4k|#endif
  544|  61.4k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
  773|   185k|    {
  774|       |        if constexpr (sizeof(CharT) == 1) {
  775|       |            return m_input.view();
  776|       |        }
  777|       |        else if constexpr (sizeof(CharT) == 2) {
  778|       |            return std::u16string_view{
  779|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  780|       |                m_input.view().size()};
  781|       |        }
  782|   185k|        else {
  783|   185k|            return std::u32string_view{
  784|   185k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  785|   185k|                m_input.view().size()};
  786|   185k|        }
  787|   185k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   722k|{
  804|   722k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 3.96k, False: 718k]
  ------------------
  805|  3.96k|        value = std::numeric_limits<T>::infinity();
  806|  3.96k|        return 3;
  807|  3.96k|    }
  808|   718k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 3.83k, False: 715k]
  ------------------
  809|  3.83k|        value = std::numeric_limits<T>::infinity();
  810|  3.83k|        return 8;
  811|  3.83k|    }
  812|   715k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 37.0k, False: 678k]
  ------------------
  813|  37.0k|        value = std::numeric_limits<T>::quiet_NaN();
  814|  37.0k|        return 3;
  815|  37.0k|    }
  816|   678k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 1.28k, False: 676k]
  ------------------
  817|  1.28k|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|  1.28k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|  1.28k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|  1.28k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|  1.28k|    }
  848|       |
  849|   676k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   676k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   676k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   676k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 146k, False: 530k]
  ------------------
  851|   146k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.89k, False: 143k]
  |  |  ------------------
  ------------------
  852|  2.89k|            return detail::unexpected_scan_error(
  853|  2.89k|                scan_error::invalid_scanned_value,
  854|  2.89k|                "Invalid floating-point digit");
  855|  2.89k|        }
  856|   146k|    }
  857|   673k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   673k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.99k, False: 665k]
  |  |  ------------------
  ------------------
  858|  7.99k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  7.99k|                                             "Invalid floating-point digit");
  860|  7.99k|    }
  861|       |
  862|   665k|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|   665k|    else {
  879|       |        // Default to fast_float
  880|   665k|        return fast_float_impl<CharT, T>{data}(value);
  881|   665k|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   665k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
  739|   665k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  740|   665k|    {
  741|   665k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcdEclERd:
  744|   665k|    {
  745|   665k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (745:13): [True: 143k, False: 522k]
  ------------------
  746|   665k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (746:13): [True: 27.4k, False: 494k]
  ------------------
  747|       |            // fast_float doesn't support hexfloats
  748|   170k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  749|   170k|                                              value);
  750|   170k|        }
  751|       |
  752|   494k|        const auto flags = get_flags();
  753|   494k|        const auto view = get_view();
  754|   494k|        const auto result = fast_float::from_chars(
  755|   494k|            view.data(), view.data() + view.size(), value, flags);
  756|       |
  757|   494k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  865|   494k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 494k]
  |  |  ------------------
  ------------------
  758|      0|            return detail::unexpected_scan_error(
  759|      0|                scan_error::invalid_scanned_value,
  760|      0|                "fast_float: invalid_argument");
  761|      0|        }
  762|   494k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  865|   494k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.27k, False: 492k]
  |  |  ------------------
  ------------------
  763|       |            // may just be very large: fall back
  764|  2.27k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  765|  2.27k|                                              value);
  766|  2.27k|        }
  767|       |
  768|   492k|        return result.ptr - view.data();
  769|   494k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   173k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   173k|    {
  709|   173k|#if !SCN_DISABLE_STRTOD
  710|   173k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   173k|    }
  717|   173k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  551|   173k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   173k|    {
  553|   173k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  382|   232k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEclERd:
  556|   173k|    {
  557|   173k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   173k|                           generic_strtod);
  559|   173k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  388|   173k|    {
  389|   173k|        CharT* end{};
  390|   173k|        errno = 0;
  391|   173k|        value = strtod_cb(src, &end);
  392|   173k|        const auto saved_errno = errno;
  393|   173k|        auto chars_read = end - src;
  394|       |
  395|   173k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   173k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.69k, False: 170k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  2.69k|    }
  ------------------
  396|       |
  397|   170k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 143k, False: 27.3k]
  ------------------
  398|   170k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 143k, False: 0]
  ------------------
  399|   143k|            chars_read -= 2;
  400|   143k|        }
  401|       |
  402|   170k|        return chars_read;
  403|   173k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  431|   232k|    {
  432|   232k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (432:13): [True: 89.4k, False: 143k]
  |  Branch (432:37): [True: 0, False: 89.4k]
  ------------------
  433|      0|            SCN_UNLIKELY_ATTR
  434|      0|            return detail::unexpected_scan_error(
  435|      0|                scan_error::invalid_scanned_value,
  436|      0|                "strtod failed: No conversion");
  437|      0|        }
  438|       |
  439|   232k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (439:13): [True: 27.7k, False: 204k]
  ------------------
  440|   232k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (440:13): [True: 0, False: 27.7k]
  ------------------
  441|      0|            SCN_UNLIKELY_ATTR
  442|      0|            return detail::unexpected_scan_error(
  443|      0|                scan_error::invalid_scanned_value,
  444|      0|                "Hexfloats disallowed by format string");
  445|      0|        }
  446|       |
  447|   232k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (447:13): [True: 4.36k, False: 228k]
  |  Branch (447:34): [True: 467, False: 3.89k]
  ------------------
  448|    467|            SCN_UNLIKELY_ATTR
  449|    467|            return detail::unexpected_scan_error(
  450|    467|                scan_error::value_positive_underflow,
  451|    467|                "strtod failed: underflow");
  452|    467|        }
  453|       |
  454|   232k|        SCN_GCC_COMPAT_PUSH
  455|   232k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  456|       |
  457|   232k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (457:13): [True: 232k, False: 0]
  ------------------
  458|   232k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (458:13): [True: 232k, False: 0]
  ------------------
  459|   232k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (459:13): [True: 3.89k, False: 228k]
  ------------------
  460|  3.89k|            SCN_UNLIKELY_ATTR
  461|  3.89k|            return detail::unexpected_scan_error(
  462|  3.89k|                scan_error::value_positive_overflow, "strtod failed: overflow");
  463|  3.89k|        }
  464|       |
  465|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  466|       |
  467|   228k|            return {};
  468|   232k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEd:
  347|   237k|{
  348|   237k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (348:12): [True: 89.9k, False: 147k]
  |  Branch (348:24): [True: 0, False: 147k]
  ------------------
  349|   237k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   173k|    {
  409|   173k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 170k, False: 2.98k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   170k|            auto first_space = read_until_classic_space(input.view());
  412|   170k|            input.assign(
  413|   170k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   170k|        }
  415|       |
  416|   173k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 143k, False: 29.6k]
  ------------------
  417|   143k|            if constexpr (std::is_same_v<CharT, char>) {
  418|   143k|                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|       |            else {
  421|       |                input.get_allocated_string().insert(0, L"0x");
  422|       |            }
  423|   143k|        }
  424|       |
  425|   173k|        return input.get_allocated_string().c_str();
  426|   173k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  563|   173k|    {
  564|   173k|        if constexpr (std::is_same_v<CharT, char>) {
  565|   173k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|       |        else {
  568|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|       |        }
  570|   173k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  471|   173k|    {
  472|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  473|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  474|       |        if constexpr (std::is_same_v<T, float>) {
  475|       |            return ::strtof_l(str, str_end, cloc);
  476|       |        }
  477|       |        else if constexpr (std::is_same_v<T, double>) {
  478|       |            return ::strtod_l(str, str_end, cloc);
  479|       |        }
  480|       |        else if constexpr (std::is_same_v<T, long double>) {
  481|       |            return ::strtold_l(str, str_end, cloc);
  482|       |        }
  483|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  484|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  485|       |        if constexpr (std::is_same_v<T, float>) {
  486|       |            return ::_strtof_l(str, str_end, cloc);
  487|       |        }
  488|       |        else if constexpr (std::is_same_v<T, double>) {
  489|       |            return ::_strtod_l(str, str_end, cloc);
  490|       |        }
  491|       |        else if constexpr (std::is_same_v<T, long double>) {
  492|       |            return ::_strtold_l(str, str_end, cloc);
  493|       |        }
  494|       |#else
  495|   173k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  496|       |        if constexpr (std::is_same_v<T, float>) {
  497|       |            return std::strtof(str, str_end);
  498|       |        }
  499|   173k|        else if constexpr (std::is_same_v<T, double>) {
  500|   173k|            return std::strtod(str, str_end);
  501|       |        }
  502|       |        else if constexpr (std::is_same_v<T, long double>) {
  503|       |            return std::strtold(str, str_end);
  504|       |        }
  505|   173k|#endif
  506|   173k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
  773|   494k|    {
  774|   494k|        if constexpr (sizeof(CharT) == 1) {
  775|   494k|            return m_input.view();
  776|       |        }
  777|       |        else if constexpr (sizeof(CharT) == 2) {
  778|       |            return std::u16string_view{
  779|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  780|       |                m_input.view().size()};
  781|       |        }
  782|       |        else {
  783|       |            return std::u32string_view{
  784|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
  785|       |                m_input.view().size()};
  786|       |        }
  787|   494k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   316k|{
  804|   316k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 316k]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|   316k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 316k]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|   316k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 316k]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|   316k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 316k]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|   316k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   316k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 66.4k, False: 250k]
  ------------------
  851|  66.4k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|  66.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.76k, False: 57.6k]
  |  |  ------------------
  ------------------
  852|  8.76k|            return detail::unexpected_scan_error(
  853|  8.76k|                scan_error::invalid_scanned_value,
  854|  8.76k|                "Invalid floating-point digit");
  855|  8.76k|        }
  856|  66.4k|    }
  857|   307k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.7k, False: 286k]
  |  |  ------------------
  ------------------
  858|  21.7k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  21.7k|                                             "Invalid floating-point digit");
  860|  21.7k|    }
  861|       |
  862|   286k|#if !SCN_DISABLE_FAST_FLOAT
  863|       |    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|       |        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|       |            return fast_float_fallback(data, value);
  876|       |        }
  877|       |    }
  878|   286k|    else {
  879|       |        // Default to fast_float
  880|   286k|        return fast_float_impl<CharT, T>{data}(value);
  881|   286k|    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   286k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
  739|   286k|        : fast_float_impl_base{data.base()}, m_input(data.input)
  740|   286k|    {
  741|   286k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwdEclERd:
  744|   286k|    {
  745|   286k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (745:13): [True: 57.6k, False: 228k]
  ------------------
  746|   286k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (746:13): [True: 368, False: 228k]
  ------------------
  747|       |            // fast_float doesn't support hexfloats
  748|  57.9k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  749|  57.9k|                                              value);
  750|  57.9k|        }
  751|       |
  752|   228k|        const auto flags = get_flags();
  753|   228k|        const auto view = get_view();
  754|   228k|        const auto result = fast_float::from_chars(
  755|   228k|            view.data(), view.data() + view.size(), value, flags);
  756|       |
  757|   228k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  865|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 228k]
  |  |  ------------------
  ------------------
  758|      0|            return detail::unexpected_scan_error(
  759|      0|                scan_error::invalid_scanned_value,
  760|      0|                "fast_float: invalid_argument");
  761|      0|        }
  762|   228k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  865|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.61k, False: 226k]
  |  |  ------------------
  ------------------
  763|       |            // may just be very large: fall back
  764|  1.61k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
  765|  1.61k|                                              value);
  766|  1.61k|        }
  767|       |
  768|   226k|        return result.ptr - view.data();
  769|   228k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|  59.6k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|  59.6k|    {
  709|  59.6k|#if !SCN_DISABLE_STRTOD
  710|  59.6k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|  59.6k|    }
  717|  59.6k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  551|  59.6k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|  59.6k|    {
  553|  59.6k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEclERd:
  556|  59.6k|    {
  557|  59.6k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|  59.6k|                           generic_strtod);
  559|  59.6k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  388|  59.6k|    {
  389|  59.6k|        CharT* end{};
  390|  59.6k|        errno = 0;
  391|  59.6k|        value = strtod_cb(src, &end);
  392|  59.6k|        const auto saved_errno = errno;
  393|  59.6k|        auto chars_read = end - src;
  394|       |
  395|  59.6k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|  59.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  59.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.67k, False: 57.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.67k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.67k|    }
  ------------------
  396|       |
  397|  57.9k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 57.5k, False: 368]
  ------------------
  398|  57.9k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 57.5k, False: 0]
  ------------------
  399|  57.5k|            chars_read -= 2;
  400|  57.5k|        }
  401|       |
  402|  57.9k|        return chars_read;
  403|  59.6k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|  59.6k|    {
  409|  59.6k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 58.3k, False: 1.22k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|  58.3k|            auto first_space = read_until_classic_space(input.view());
  412|  58.3k|            input.assign(
  413|  58.3k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|  58.3k|        }
  415|       |
  416|  59.6k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 57.6k, False: 1.98k]
  ------------------
  417|       |            if constexpr (std::is_same_v<CharT, char>) {
  418|       |                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|  57.6k|            else {
  421|  57.6k|                input.get_allocated_string().insert(0, L"0x");
  422|  57.6k|            }
  423|  57.6k|        }
  424|       |
  425|  59.6k|        return input.get_allocated_string().c_str();
  426|  59.6k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  563|  59.6k|    {
  564|       |        if constexpr (std::is_same_v<CharT, char>) {
  565|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|  59.6k|        else {
  568|  59.6k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|  59.6k|        }
  570|  59.6k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  509|  59.6k|    {
  510|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  511|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  512|       |        if constexpr (std::is_same_v<T, float>) {
  513|       |            return ::wcstof_l(str, str_end, cloc);
  514|       |        }
  515|       |        else if constexpr (std::is_same_v<T, double>) {
  516|       |            return ::wcstod_l(str, str_end, cloc);
  517|       |        }
  518|       |        else if constexpr (std::is_same_v<T, long double>) {
  519|       |            return ::wcstold_l(str, str_end, cloc);
  520|       |        }
  521|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  522|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  523|       |        if constexpr (std::is_same_v<T, float>) {
  524|       |            return ::_wcstof_l(str, str_end, cloc);
  525|       |        }
  526|       |        else if constexpr (std::is_same_v<T, double>) {
  527|       |            return ::_wcstod_l(str, str_end, cloc);
  528|       |        }
  529|       |        else if constexpr (std::is_same_v<T, long double>) {
  530|       |            return ::_wcstold_l(str, str_end, cloc);
  531|       |        }
  532|       |#else
  533|  59.6k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  534|       |        if constexpr (std::is_same_v<T, float>) {
  535|       |            return std::wcstof(str, str_end);
  536|       |        }
  537|  59.6k|        else if constexpr (std::is_same_v<T, double>) {
  538|  59.6k|            return std::wcstod(str, str_end);
  539|       |        }
  540|       |        else if constexpr (std::is_same_v<T, long double>) {
  541|       |            return std::wcstold(str, str_end);
  542|       |        }
  543|  59.6k|#endif
  544|  59.6k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
  773|   228k|    {
  774|       |        if constexpr (sizeof(CharT) == 1) {
  775|       |            return m_input.view();
  776|       |        }
  777|       |        else if constexpr (sizeof(CharT) == 2) {
  778|       |            return std::u16string_view{
  779|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
  780|       |                m_input.view().size()};
  781|       |        }
  782|   228k|        else {
  783|   228k|            return std::u32string_view{
  784|   228k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
  785|   228k|                m_input.view().size()};
  786|   228k|        }
  787|   228k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   734k|{
  804|   734k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 4.09k, False: 730k]
  ------------------
  805|  4.09k|        value = std::numeric_limits<T>::infinity();
  806|  4.09k|        return 3;
  807|  4.09k|    }
  808|   730k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 4.07k, False: 726k]
  ------------------
  809|  4.07k|        value = std::numeric_limits<T>::infinity();
  810|  4.07k|        return 8;
  811|  4.07k|    }
  812|   726k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 37.4k, False: 689k]
  ------------------
  813|  37.4k|        value = std::numeric_limits<T>::quiet_NaN();
  814|  37.4k|        return 3;
  815|  37.4k|    }
  816|   689k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 1.32k, False: 687k]
  ------------------
  817|  1.32k|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|  1.32k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|  1.32k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|  1.32k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|  1.32k|    }
  848|       |
  849|   687k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   687k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   687k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   687k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 147k, False: 540k]
  ------------------
  851|   147k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.97k, False: 144k]
  |  |  ------------------
  ------------------
  852|  2.97k|            return detail::unexpected_scan_error(
  853|  2.97k|                scan_error::invalid_scanned_value,
  854|  2.97k|                "Invalid floating-point digit");
  855|  2.97k|        }
  856|   147k|    }
  857|   684k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   684k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.26k, False: 676k]
  |  |  ------------------
  ------------------
  858|  8.26k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  8.26k|                                             "Invalid floating-point digit");
  860|  8.26k|    }
  861|       |
  862|   676k|#if !SCN_DISABLE_FAST_FLOAT
  863|   676k|    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|   676k|        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|   676k|            return fast_float_fallback(data, value);
  876|   676k|        }
  877|       |    }
  878|       |    else {
  879|       |        // Default to fast_float
  880|       |        return fast_float_impl<CharT, T>{data}(value);
  881|       |    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   676k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   676k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   676k|    {
  709|   676k|#if !SCN_DISABLE_STRTOD
  710|   676k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   676k|    }
  717|   676k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  551|   676k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   676k|    {
  553|   676k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  382|   967k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEclERe:
  556|   676k|    {
  557|   676k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   676k|                           generic_strtod);
  559|   676k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  388|   676k|    {
  389|   676k|        CharT* end{};
  390|   676k|        errno = 0;
  391|   676k|        value = strtod_cb(src, &end);
  392|   676k|        const auto saved_errno = errno;
  393|   676k|        auto chars_read = end - src;
  394|       |
  395|   676k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   676k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   676k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 609, False: 675k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    609|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    609|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    609|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    609|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    609|    }
  ------------------
  396|       |
  397|   675k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 143k, False: 531k]
  ------------------
  398|   675k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 143k, False: 0]
  ------------------
  399|   143k|            chars_read -= 2;
  400|   143k|        }
  401|       |
  402|   675k|        return chars_read;
  403|   676k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  431|   967k|    {
  432|   967k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (432:13): [True: 416k, False: 550k]
  |  Branch (432:37): [True: 0, False: 416k]
  ------------------
  433|      0|            SCN_UNLIKELY_ATTR
  434|      0|            return detail::unexpected_scan_error(
  435|      0|                scan_error::invalid_scanned_value,
  436|      0|                "strtod failed: No conversion");
  437|      0|        }
  438|       |
  439|   967k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (439:13): [True: 27.8k, False: 939k]
  ------------------
  440|   967k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (440:13): [True: 0, False: 27.8k]
  ------------------
  441|      0|            SCN_UNLIKELY_ATTR
  442|      0|            return detail::unexpected_scan_error(
  443|      0|                scan_error::invalid_scanned_value,
  444|      0|                "Hexfloats disallowed by format string");
  445|      0|        }
  446|       |
  447|   967k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (447:13): [True: 881, False: 966k]
  |  Branch (447:34): [True: 141, False: 740]
  ------------------
  448|    141|            SCN_UNLIKELY_ATTR
  449|    141|            return detail::unexpected_scan_error(
  450|    141|                scan_error::value_positive_underflow,
  451|    141|                "strtod failed: underflow");
  452|    141|        }
  453|       |
  454|   967k|        SCN_GCC_COMPAT_PUSH
  455|   967k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  456|       |
  457|   967k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (457:13): [True: 967k, False: 0]
  ------------------
  458|   967k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (458:13): [True: 967k, False: 0]
  ------------------
  459|   967k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (459:13): [True: 740, False: 966k]
  ------------------
  460|    740|            SCN_UNLIKELY_ATTR
  461|    740|            return detail::unexpected_scan_error(
  462|    740|                scan_error::value_positive_overflow, "strtod failed: overflow");
  463|    740|        }
  464|       |
  465|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  466|       |
  467|   966k|            return {};
  468|   967k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113is_float_zeroEe:
  351|   968k|{
  352|   968k|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (352:12): [True: 416k, False: 551k]
  |  Branch (352:26): [True: 0, False: 551k]
  ------------------
  353|   968k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   676k|    {
  409|   676k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 621k, False: 54.7k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   621k|            auto first_space = read_until_classic_space(input.view());
  412|   621k|            input.assign(
  413|   621k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   621k|        }
  415|       |
  416|   676k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 143k, False: 532k]
  ------------------
  417|   143k|            if constexpr (std::is_same_v<CharT, char>) {
  418|   143k|                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|       |            else {
  421|       |                input.get_allocated_string().insert(0, L"0x");
  422|       |            }
  423|   143k|        }
  424|       |
  425|   676k|        return input.get_allocated_string().c_str();
  426|   676k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  563|   676k|    {
  564|   676k|        if constexpr (std::is_same_v<CharT, char>) {
  565|   676k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|       |        else {
  568|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|       |        }
  570|   676k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  471|   676k|    {
  472|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  473|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  474|       |        if constexpr (std::is_same_v<T, float>) {
  475|       |            return ::strtof_l(str, str_end, cloc);
  476|       |        }
  477|       |        else if constexpr (std::is_same_v<T, double>) {
  478|       |            return ::strtod_l(str, str_end, cloc);
  479|       |        }
  480|       |        else if constexpr (std::is_same_v<T, long double>) {
  481|       |            return ::strtold_l(str, str_end, cloc);
  482|       |        }
  483|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  484|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  485|       |        if constexpr (std::is_same_v<T, float>) {
  486|       |            return ::_strtof_l(str, str_end, cloc);
  487|       |        }
  488|       |        else if constexpr (std::is_same_v<T, double>) {
  489|       |            return ::_strtod_l(str, str_end, cloc);
  490|       |        }
  491|       |        else if constexpr (std::is_same_v<T, long double>) {
  492|       |            return ::_strtold_l(str, str_end, cloc);
  493|       |        }
  494|       |#else
  495|   676k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  496|       |        if constexpr (std::is_same_v<T, float>) {
  497|       |            return std::strtof(str, str_end);
  498|       |        }
  499|       |        else if constexpr (std::is_same_v<T, double>) {
  500|       |            return std::strtod(str, str_end);
  501|       |        }
  502|   676k|        else if constexpr (std::is_same_v<T, long double>) {
  503|   676k|            return std::strtold(str, str_end);
  504|   676k|        }
  505|   676k|#endif
  506|   676k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
  803|   321k|{
  804|   321k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (804:9): [True: 0, False: 321k]
  ------------------
  805|      0|        value = std::numeric_limits<T>::infinity();
  806|      0|        return 3;
  807|      0|    }
  808|   321k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (808:9): [True: 0, False: 321k]
  ------------------
  809|      0|        value = std::numeric_limits<T>::infinity();
  810|      0|        return 8;
  811|      0|    }
  812|   321k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (812:9): [True: 0, False: 321k]
  ------------------
  813|      0|        value = std::numeric_limits<T>::quiet_NaN();
  814|      0|        return 3;
  815|      0|    }
  816|   321k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (816:9): [True: 0, False: 321k]
  ------------------
  817|      0|        value = std::numeric_limits<T>::quiet_NaN();
  818|       |
  819|       |        // TODO: use payload
  820|       |#if 0
  821|       |                    {
  822|       |                        auto reader = integer_reader<CharT>{
  823|       |                            integer_reader_base::only_unsigned, 0};
  824|       |                        if (auto r = reader.read_source(
  825|       |                                detail::tag_type<unsigned long long>{},
  826|       |                                nan_payload.view());
  827|       |                            SCN_UNLIKELY(!r)) {
  828|       |                            return unexpected(r.error());
  829|       |                        }
  830|       |
  831|       |                        unsigned long long payload;
  832|       |                        if (auto r = reader.parse_value(payload);
  833|       |                            SCN_UNLIKELY(!r)) {
  834|       |                            return unexpected(r.error());
  835|       |                        }
  836|       |
  837|       |                        constexpr auto mantissa_payload_len =
  838|       |                            std::numeric_limits<T>::digits - 2;
  839|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
  840|       |
  841|       |
  842|       |                    }
  843|       |#endif
  844|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  915|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  845|       |
  846|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
  847|      0|    }
  848|       |
  849|   321k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  930|   321k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   321k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  850|   321k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (850:9): [True: 66.4k, False: 255k]
  ------------------
  851|  66.4k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  865|  66.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.77k, False: 57.6k]
  |  |  ------------------
  ------------------
  852|  8.77k|            return detail::unexpected_scan_error(
  853|  8.77k|                scan_error::invalid_scanned_value,
  854|  8.77k|                "Invalid floating-point digit");
  855|  8.77k|        }
  856|  66.4k|    }
  857|   313k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  865|   313k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.1k, False: 291k]
  |  |  ------------------
  ------------------
  858|  22.1k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
  859|  22.1k|                                             "Invalid floating-point digit");
  860|  22.1k|    }
  861|       |
  862|   291k|#if !SCN_DISABLE_FAST_FLOAT
  863|   291k|    if constexpr (std::is_same_v<T, long double>) {
  864|       |        if constexpr (sizeof(double) == sizeof(long double)) {
  865|       |            // If double == long double (true on Windows),
  866|       |            // use fast_float with double
  867|       |            double tmp{};
  868|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
  869|       |            value = tmp;
  870|       |            return ret;
  871|       |        }
  872|   291k|        else {
  873|       |            // long doubles aren't supported by fast_float ->
  874|       |            // fall back to from_chars or strtod
  875|   291k|            return fast_float_fallback(data, value);
  876|   291k|        }
  877|       |    }
  878|       |    else {
  879|       |        // Default to fast_float
  880|       |        return fast_float_impl<CharT, T>{data}(value);
  881|       |    }
  882|       |#else
  883|       |    static_assert(SCN_HAS_FLOAT_CHARCONV,
  884|       |                  "SCN_DISABLE_FAST_FLOAT needs std::from_chars for floats");
  885|       |
  886|       |    return fast_float_fallback(data, value);
  887|       |#endif
  888|   291k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
  701|   291k|{
  702|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
  703|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
  704|       |        return from_chars_impl<T>{data}(value);
  705|       |    }
  706|       |    else
  707|       |#endif
  708|   291k|    {
  709|   291k|#if !SCN_DISABLE_STRTOD
  710|   291k|        return strtod_impl<CharT, T>{data}(value);
  711|       |#else
  712|       |        return detail::unexpected_scan_error(
  713|       |            scan_error::invalid_scanned_value,
  714|       |            "fast_float failed, and fallbacks are disabled");
  715|       |#endif
  716|   291k|    }
  717|   291k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  551|   291k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  552|   291k|    {
  553|   291k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEclERe:
  556|   291k|    {
  557|   291k|        return this->parse(value, this->get_null_terminated_source(m_input),
  558|   291k|                           generic_strtod);
  559|   291k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  388|   291k|    {
  389|   291k|        CharT* end{};
  390|   291k|        errno = 0;
  391|   291k|        value = strtod_cb(src, &end);
  392|   291k|        const auto saved_errno = errno;
  393|   291k|        auto chars_read = end - src;
  394|       |
  395|   291k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3930|   291k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 272, False: 290k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|    272|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|    272|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|    272|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|    272|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|    272|    }
  ------------------
  396|       |
  397|   290k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (397:13): [True: 57.6k, False: 233k]
  ------------------
  398|   290k|            chars_read >= 2) {
  ------------------
  |  Branch (398:13): [True: 57.6k, False: 0]
  ------------------
  399|  57.6k|            chars_read -= 2;
  400|  57.6k|        }
  401|       |
  402|   290k|        return chars_read;
  403|   291k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  408|   291k|    {
  409|   291k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (409:13): [True: 285k, False: 5.37k]
  ------------------
  410|       |            // TODO: call float_reader::read_source?
  411|   285k|            auto first_space = read_until_classic_space(input.view());
  412|   285k|            input.assign(
  413|   285k|                std::basic_string<CharT>{input.view().begin(), first_space});
  414|   285k|        }
  415|       |
  416|   291k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (416:13): [True: 57.6k, False: 233k]
  ------------------
  417|       |            if constexpr (std::is_same_v<CharT, char>) {
  418|       |                input.get_allocated_string().insert(0, "0x");
  419|       |            }
  420|  57.6k|            else {
  421|  57.6k|                input.get_allocated_string().insert(0, L"0x");
  422|  57.6k|            }
  423|  57.6k|        }
  424|       |
  425|   291k|        return input.get_allocated_string().c_str();
  426|   291k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  563|   291k|    {
  564|       |        if constexpr (std::is_same_v<CharT, char>) {
  565|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  566|       |        }
  567|   291k|        else {
  568|   291k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  569|   291k|        }
  570|   291k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  509|   291k|    {
  510|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  511|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  512|       |        if constexpr (std::is_same_v<T, float>) {
  513|       |            return ::wcstof_l(str, str_end, cloc);
  514|       |        }
  515|       |        else if constexpr (std::is_same_v<T, double>) {
  516|       |            return ::wcstod_l(str, str_end, cloc);
  517|       |        }
  518|       |        else if constexpr (std::is_same_v<T, long double>) {
  519|       |            return ::wcstold_l(str, str_end, cloc);
  520|       |        }
  521|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  522|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  523|       |        if constexpr (std::is_same_v<T, float>) {
  524|       |            return ::_wcstof_l(str, str_end, cloc);
  525|       |        }
  526|       |        else if constexpr (std::is_same_v<T, double>) {
  527|       |            return ::_wcstod_l(str, str_end, cloc);
  528|       |        }
  529|       |        else if constexpr (std::is_same_v<T, long double>) {
  530|       |            return ::_wcstold_l(str, str_end, cloc);
  531|       |        }
  532|       |#else
  533|   291k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  534|       |        if constexpr (std::is_same_v<T, float>) {
  535|       |            return std::wcstof(str, str_end);
  536|       |        }
  537|       |        else if constexpr (std::is_same_v<T, double>) {
  538|       |            return std::wcstod(str, str_end);
  539|       |        }
  540|   291k|        else if constexpr (std::is_same_v<T, long double>) {
  541|   291k|            return std::wcstold(str, str_end);
  542|   291k|        }
  543|   291k|#endif
  544|   291k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|  1.10M|{
 1769|  1.10M|    const auto argcount = args.size();
 1770|  1.10M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 231k, False: 878k]
  |  Branch (1770:60): [True: 231k, False: 0]
  ------------------
 1771|   231k|        auto arg = args.get(0);
 1772|   231k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   231k|    static_cast<    \
  |  |  935|   231k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|   231k|    }
 1774|       |
 1775|   878k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 878k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|   878k|    SCN_UNLIKELY_ATTR
 1783|   878k|    {
 1784|   878k|        auto handler = format_handler<false, CharT>{
 1785|   878k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   878k|    static_cast<    \
  |  |  935|   878k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   878k|    static_cast<    \
  |  |  935|   878k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|   878k|        return vscan_parse_format_string(format, handler);
 1787|   878k|    }
 1788|   878k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|  2.07M|{
 1317|  2.07M|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 1.62M, False: 442k]
  ------------------
 1318|  1.62M|        return false;
 1319|  1.62M|    }
 1320|   442k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 442k, False: 0]
  |  Branch (1320:39): [True: 442k, False: 0]
  ------------------
 1321|  2.07M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|   346k|{
 1350|   346k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 346k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|   346k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|   346k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 346k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|   346k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|   346k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|   346k|    static_cast<    \
  |  |  935|   346k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|   346k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   346k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   346k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   346k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20.5k, False: 326k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  20.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  20.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  20.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  20.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  20.5k|    }                                                  \
  |  |  |  | 3939|   346k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|   326k|    return it.position();
 1367|   346k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|   750k|        : format_handler_base{argcount},
 1593|   750k|          parse_ctx{format},
 1594|   750k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   750k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   750k|    static_cast<    \
  |  |  935|   750k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   750k|    static_cast<    \
  |  |  935|   750k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   750k|    {
 1596|   750k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|  2.48M|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|  2.48M|    {
 1412|  2.48M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|  2.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.48M]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|  2.48M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|   750k|        : contiguous_ctx(source, args, loc)
 1544|   750k|    {
 1545|   750k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   750k|{
 1734|   750k|    const auto beg = handler.get_ctx().begin();
 1735|   750k|    detail::parse_format_string<false>(format, handler);
 1736|   750k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   750k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 68.5k, False: 681k]
  |  |  ------------------
  ------------------
 1737|  68.5k|        return unexpected(err.error());
 1738|  68.5k|    }
 1739|   681k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   750k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|  5.11M|    {
 1718|  5.11M|        return ctx.get();
 1719|  5.11M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|  5.11M|    {
 1549|  5.11M|        return contiguous_ctx;
 1550|  5.11M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|  1.43M|    {
 1600|  1.43M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 1.43M]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|  1.43M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|   411k|    {
 1460|   411k|        error = unexpected(err);
 1461|   411k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|   750k|{
 1372|   750k|    auto arg = ctx.arg(id);
 1373|   750k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   750k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 750k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   750k|    return arg;
 1377|   750k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|  2.48M|    {
 1486|  2.48M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  2.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.48M]
  |  |  ------------------
  ------------------
 1487|      0|            on_error({scan_error::invalid_format_string,
 1488|      0|                      "Argument ID out-of-range"});
 1489|      0|            return;
 1490|      0|        }
 1491|       |
 1492|  2.48M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|  2.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.48M]
  |  |  ------------------
  ------------------
 1493|      0|            on_error({scan_error::invalid_format_string,
 1494|      0|                      "Argument with this ID has already been scanned"});
 1495|      0|        }
 1496|       |
 1497|  2.48M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  2.48M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.48M, False: 0]
  |  |  ------------------
  ------------------
 1498|  2.48M|            visited_args_lower64 |= (1ull << id);
 1499|  2.48M|            return;
 1500|  2.48M|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|  2.48M|    {
 1470|  2.48M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|  2.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.48M]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|  2.48M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|  2.48M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 2.48M, False: 0]
  |  |  ------------------
  ------------------
 1477|  2.48M|            return (visited_args_lower64 >> id) & 1ull;
 1478|  2.48M|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|  2.48M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|   750k|    {
 1640|   750k|        return parse_ctx.next_arg_id();
 1641|   750k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|   750k|    {
 1680|   750k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   750k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   750k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 750k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   750k|        auto specs = detail::format_specs{};
 1693|   750k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   750k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   750k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   750k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   750k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 750k]
  |  Branch (1698:29): [True: 0, False: 750k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   750k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   750k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 750k]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|   750k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   750k|        on_visit_scan_arg(
 1710|   750k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   750k|                                           get_ctx().locale()},
 1712|   750k|            arg);
 1713|   750k|        return parse_ctx.begin();
 1714|   750k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1389|   750k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   750k|    {
 1391|   750k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|   750k|    {
 1651|   750k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 750k]
  |  Branch (1651:13): [True: 0, False: 750k]
  |  Branch (1651:29): [True: 0, False: 750k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   750k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   750k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   750k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   750k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 68.5k, False: 681k]
  |  |  ------------------
  ------------------
 1658|  68.5k|            on_error(r.error());
 1659|  68.5k|        }
 1660|   681k|        else {
 1661|   681k|            get_ctx().advance_to(*r);
 1662|   681k|        }
 1663|   750k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|  2.48M|    {
 1419|  2.48M|        {
 1420|  2.48M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 2.48M]
  ------------------
 1421|  2.48M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 2.48M]
  ------------------
 1422|  2.48M|                                      ? std::numeric_limits<uint64_t>::max()
 1423|  2.48M|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|  2.48M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 0, False: 2.48M]
  ------------------
 1426|      0|                return on_error({scan_error::invalid_format_string,
 1427|      0|                                 "Argument list not exhausted"});
 1428|      0|            }
 1429|  2.48M|        }
 1430|       |
 1431|  2.48M|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 2.48M, False: 0]
  ------------------
 1432|  2.48M|            return;
 1433|  2.48M|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|  9.95M|    {
 1465|  9.95M|        return error;
 1466|  9.95M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1592|   878k|        : format_handler_base{argcount},
 1593|   878k|          parse_ctx{format},
 1594|   878k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   878k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   878k|    static_cast<    \
  |  |  935|   878k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   878k|    static_cast<    \
  |  |  935|   878k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   878k|    {
 1596|   878k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1519|   878k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   878k|    static_cast<    \
  |  |  935|   878k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|   878k|    {
 1521|   878k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   878k|{
 1734|   878k|    const auto beg = handler.get_ctx().begin();
 1735|   878k|    detail::parse_format_string<false>(format, handler);
 1736|   878k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   878k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 68.5k, False: 809k]
  |  |  ------------------
  ------------------
 1737|  68.5k|        return unexpected(err.error());
 1738|  68.5k|    }
 1739|   809k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   878k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1717|  6.01M|    {
 1718|  6.01M|        return ctx.get();
 1719|  6.01M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1524|  6.01M|    {
 1525|  6.01M|        return ctx;
 1526|  6.01M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1599|  1.68M|    {
 1600|  1.68M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 1.68M]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|  1.68M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1371|   878k|{
 1372|   878k|    auto arg = ctx.arg(id);
 1373|   878k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   878k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 878k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   878k|    return arg;
 1377|   878k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1639|   878k|    {
 1640|   878k|        return parse_ctx.next_arg_id();
 1641|   878k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1679|   878k|    {
 1680|   878k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   878k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   878k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 878k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   878k|        auto specs = detail::format_specs{};
 1693|   878k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   878k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   878k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   878k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   878k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 878k]
  |  Branch (1698:29): [True: 0, False: 878k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   878k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   878k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 878k]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|   878k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   878k|        on_visit_scan_arg(
 1710|   878k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   878k|                                           get_ctx().locale()},
 1712|   878k|            arg);
 1713|   878k|        return parse_ctx.begin();
 1714|   878k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 1389|   878k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   878k|    {
 1391|   878k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|   878k|    {
 1651|   878k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 878k]
  |  Branch (1651:13): [True: 0, False: 878k]
  |  Branch (1651:29): [True: 0, False: 878k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   878k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   878k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   878k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   878k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 68.5k, False: 809k]
  |  |  ------------------
  ------------------
 1658|  68.5k|            on_error(r.error());
 1659|  68.5k|        }
 1660|   809k|        else {
 1661|   809k|            get_ctx().advance_to(*r);
 1662|   809k|        }
 1663|   878k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   961k|{
 1749|   961k|    const auto argcount = args.size();
 1750|   961k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 211k, False: 750k]
  |  Branch (1750:60): [True: 211k, False: 0]
  ------------------
 1751|   211k|        auto arg = args.get(0);
 1752|   211k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   211k|    static_cast<    \
  |  |  935|   211k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|   211k|    }
 1754|       |
 1755|   750k|    auto handler = format_handler<true, CharT>{
 1756|   750k|        ranges::subrange<const CharT*>{source.data(),
 1757|   750k|                                       source.data() + source.size()},
 1758|   750k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   750k|    static_cast<    \
  |  |  935|   750k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   750k|    static_cast<    \
  |  |  935|   750k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   750k|    return vscan_parse_format_string(format, handler);
 1760|   961k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|   316k|{
 1330|   316k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 316k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|   316k|    auto reader =
 1336|   316k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|   316k|            ranges::subrange<const CharT*>{source.data(),
 1338|   316k|                                           source.data() + source.size()},
 1339|   316k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|   316k|    static_cast<    \
  |  |  935|   316k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|   316k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   316k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   316k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   316k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 20.5k, False: 296k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  20.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  20.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  20.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  20.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  20.5k|    }                                                  \
  |  |  |  | 3939|   316k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|   296k|    return ranges::distance(source.data(), it);
 1342|   316k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 1848|  1.22M|{
 1849|  1.22M|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|  1.22M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.13M, False: 89.1k]
  |  |  ------------------
  ------------------
 1850|  1.13M|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.13M]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|  1.13M|    }
 1856|  89.1k|    else {
 1857|  89.1k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 89.1k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  89.1k|    }
 1863|  1.22M|    return result;
 1864|  1.22M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   534k|{
 1749|   534k|    const auto argcount = args.size();
 1750|   534k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 103k, False: 430k]
  |  Branch (1750:60): [True: 103k, False: 0]
  ------------------
 1751|   103k|        auto arg = args.get(0);
 1752|   103k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   103k|    static_cast<    \
  |  |  935|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|   103k|    }
 1754|       |
 1755|   430k|    auto handler = format_handler<true, CharT>{
 1756|   430k|        ranges::subrange<const CharT*>{source.data(),
 1757|   430k|                                       source.data() + source.size()},
 1758|   430k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   430k|    static_cast<    \
  |  |  935|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   430k|    static_cast<    \
  |  |  935|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   430k|    return vscan_parse_format_string(format, handler);
 1760|   534k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|  1.06M|{
 1317|  1.06M|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 860k, False: 207k]
  ------------------
 1318|   860k|        return false;
 1319|   860k|    }
 1320|   207k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 207k, False: 0]
  |  Branch (1320:39): [True: 207k, False: 0]
  ------------------
 1321|  1.06M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|   155k|{
 1330|   155k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|   155k|    auto reader =
 1336|   155k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|   155k|            ranges::subrange<const CharT*>{source.data(),
 1338|   155k|                                           source.data() + source.size()},
 1339|   155k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|   155k|    static_cast<    \
  |  |  935|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|   155k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   155k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 41.1k, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  41.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  41.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  41.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  41.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  41.1k|    }                                                  \
  |  |  |  | 3939|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|   114k|    return ranges::distance(source.data(), it);
 1342|   155k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|   430k|        : format_handler_base{argcount},
 1593|   430k|          parse_ctx{format},
 1594|   430k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   430k|    static_cast<    \
  |  |  935|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   430k|    static_cast<    \
  |  |  935|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   430k|    {
 1596|   430k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|   430k|        : contiguous_ctx(source, args, loc)
 1544|   430k|    {
 1545|   430k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   430k|{
 1734|   430k|    const auto beg = handler.get_ctx().begin();
 1735|   430k|    detail::parse_format_string<false>(format, handler);
 1736|   430k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 137k, False: 293k]
  |  |  ------------------
  ------------------
 1737|   137k|        return unexpected(err.error());
 1738|   137k|    }
 1739|   293k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   430k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|  2.73M|    {
 1718|  2.73M|        return ctx.get();
 1719|  2.73M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|  2.73M|    {
 1549|  2.73M|        return contiguous_ctx;
 1550|  2.73M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|   723k|    {
 1600|   723k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 723k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   723k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|   430k|{
 1372|   430k|    auto arg = ctx.arg(id);
 1373|   430k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 430k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   430k|    return arg;
 1377|   430k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|   430k|    {
 1640|   430k|        return parse_ctx.next_arg_id();
 1641|   430k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|   430k|    {
 1680|   430k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   430k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   430k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 430k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   430k|        auto specs = detail::format_specs{};
 1693|   430k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   430k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   430k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   430k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   430k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 430k]
  |  Branch (1698:29): [True: 0, False: 430k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   430k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 430k]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|   430k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   430k|        on_visit_scan_arg(
 1710|   430k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   430k|                                           get_ctx().locale()},
 1712|   430k|            arg);
 1713|   430k|        return parse_ctx.begin();
 1714|   430k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1389|   430k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   430k|    {
 1391|   430k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|   430k|    {
 1651|   430k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 430k]
  |  Branch (1651:13): [True: 0, False: 430k]
  |  Branch (1651:29): [True: 0, False: 430k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   430k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   430k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 137k, False: 293k]
  |  |  ------------------
  ------------------
 1658|   137k|            on_error(r.error());
 1659|   137k|        }
 1660|   293k|        else {
 1661|   293k|            get_ctx().advance_to(*r);
 1662|   293k|        }
 1663|   430k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   533k|{
 1769|   533k|    const auto argcount = args.size();
 1770|   533k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 103k, False: 430k]
  |  Branch (1770:60): [True: 103k, False: 0]
  ------------------
 1771|   103k|        auto arg = args.get(0);
 1772|   103k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   103k|    static_cast<    \
  |  |  935|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|   103k|    }
 1774|       |
 1775|   430k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 430k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|   430k|    SCN_UNLIKELY_ATTR
 1783|   430k|    {
 1784|   430k|        auto handler = format_handler<false, CharT>{
 1785|   430k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   430k|    static_cast<    \
  |  |  935|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   430k|    static_cast<    \
  |  |  935|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|   430k|        return vscan_parse_format_string(format, handler);
 1787|   430k|    }
 1788|   430k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|   155k|{
 1350|   155k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|   155k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|   155k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 155k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|   155k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|   155k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|   155k|    static_cast<    \
  |  |  935|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|   155k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   155k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 41.1k, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  41.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  41.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  41.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  41.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  41.1k|    }                                                  \
  |  |  |  | 3939|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|   114k|    return it.position();
 1367|   155k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1592|   430k|        : format_handler_base{argcount},
 1593|   430k|          parse_ctx{format},
 1594|   430k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   430k|    static_cast<    \
  |  |  935|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   430k|    static_cast<    \
  |  |  935|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   430k|    {
 1596|   430k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1519|   430k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   430k|    static_cast<    \
  |  |  935|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|   430k|    {
 1521|   430k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   430k|{
 1734|   430k|    const auto beg = handler.get_ctx().begin();
 1735|   430k|    detail::parse_format_string<false>(format, handler);
 1736|   430k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 137k, False: 293k]
  |  |  ------------------
  ------------------
 1737|   137k|        return unexpected(err.error());
 1738|   137k|    }
 1739|   293k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   430k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1717|  2.73M|    {
 1718|  2.73M|        return ctx.get();
 1719|  2.73M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1524|  2.73M|    {
 1525|  2.73M|        return ctx;
 1526|  2.73M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1599|   723k|    {
 1600|   723k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 723k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   723k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1371|   430k|{
 1372|   430k|    auto arg = ctx.arg(id);
 1373|   430k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 430k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   430k|    return arg;
 1377|   430k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1639|   430k|    {
 1640|   430k|        return parse_ctx.next_arg_id();
 1641|   430k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1679|   430k|    {
 1680|   430k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   430k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   430k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 430k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   430k|        auto specs = detail::format_specs{};
 1693|   430k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   430k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   430k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   430k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   430k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 430k]
  |  Branch (1698:29): [True: 0, False: 430k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   430k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 430k]
  |  |  ------------------
  ------------------
 1705|      0|            return parse_ctx.begin();
 1706|      0|        }
 1707|   430k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   430k|        on_visit_scan_arg(
 1710|   430k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   430k|                                           get_ctx().locale()},
 1712|   430k|            arg);
 1713|   430k|        return parse_ctx.begin();
 1714|   430k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 1389|   430k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   430k|    {
 1391|   430k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|   430k|    {
 1651|   430k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 430k]
  |  Branch (1651:13): [True: 0, False: 430k]
  |  Branch (1651:29): [True: 0, False: 430k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   430k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   430k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 137k, False: 293k]
  |  |  ------------------
  ------------------
 1658|   137k|            on_error(r.error());
 1659|   137k|        }
 1660|   293k|        else {
 1661|   293k|            get_ctx().advance_to(*r);
 1662|   293k|        }
 1663|   430k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   585k|{
 1849|   585k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   585k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 407k, False: 178k]
  |  |  ------------------
  ------------------
 1850|   407k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|   407k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 407k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|   407k|    }
 1856|   178k|    else {
 1857|   178k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 178k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|   178k|    }
 1863|   585k|    return result;
 1864|   585k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|   105k|{
 1795|   105k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|   105k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|   115k|{
 1795|   115k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|   115k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  51.9k|{
 1795|  51.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  51.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  51.9k|{
 1795|  51.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  51.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  51.9k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|  2.28k|{
 1462|  2.28k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|  2.28k|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|  2.28k|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|  2.28k|            return transcode_to_string_impl_to32(src, dest);
 1473|  2.28k|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|  2.28k|    SCN_EXPECT(false);
  ------------------
  |  |  930|  2.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|  2.28k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|  2.28k|{
 1355|  2.28k|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|  2.28k|    auto it = src.begin();
 1358|   662k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 660k, False: 2.28k]
  ------------------
 1359|   660k|        auto res = get_next_code_point(
 1360|   660k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   660k|                                                                 src.end()));
 1362|   660k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   660k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.08k, False: 658k]
  |  |  ------------------
  ------------------
 1363|  2.08k|            dest.push_back(DestCharT{0xfffd});
 1364|  2.08k|        }
 1365|   658k|        else {
 1366|   658k|            dest.push_back(res.value);
 1367|   658k|        }
 1368|   660k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   660k|    }
 1370|  2.28k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   956k|{
 1279|   956k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   956k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   956k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   956k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   956k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   956k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 25.7k, False: 931k]
  |  |  ------------------
  ------------------
 1283|  25.7k|        return {get_start_for_next_code_point(input),
 1284|  25.7k|                detail::invalid_code_point};
 1285|  25.7k|    }
 1286|   931k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   931k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.75k, False: 927k]
  |  |  ------------------
  ------------------
 1287|  3.75k|        return {input.end(), detail::invalid_code_point};
 1288|  3.75k|    }
 1289|       |
 1290|   927k|    return {input.begin() + len,
 1291|   927k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   931k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  25.7k|{
 1265|  25.7k|    auto it = input.begin();
 1266|   189k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 182k, False: 6.99k]
  ------------------
 1267|   182k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 18.7k, False: 163k]
  ------------------
 1268|  18.7k|            break;
 1269|  18.7k|        }
 1270|   182k|    }
 1271|  25.7k|    return it;
 1272|  25.7k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  30.7M|    constexpr parse_error(code c) : m_code(c)
  808|  30.7M|    {
  809|  30.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|  30.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  30.7M|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  13.7M|    {
  823|  13.7M|        return a.m_code == b.m_code;
  824|  13.7M|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|  3.60M|    {
  827|  3.60M|        return !(a == b);
  828|  3.60M|    }
_ZN3scn2v44impl16clocale_restorerC2Ei:
 1825|  1.43M|    clocale_restorer(int cat) : m_category(cat)
 1826|  1.43M|    {
 1827|  1.43M|        const auto loc = std::setlocale(cat, nullptr);
 1828|  1.43M|        std::strcpy(m_locbuf, loc);
 1829|  1.43M|    }
_ZN3scn2v44impl16clocale_restorerD2Ev:
 1831|  1.43M|    {
 1832|       |        // Restore locale to what it was before
 1833|  1.43M|        std::setlocale(m_category, m_locbuf);
 1834|  1.43M|    }
_ZN3scn2v44impl25set_clocale_classic_guardC2Ei:
 1854|  1.43M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1855|  1.43M|    {
 1856|  1.43M|        std::setlocale(cat, "C");
 1857|  1.43M|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3039|  2.48M|    {
 3040|  2.48M|        return m_msg == nullptr;
 3041|  2.48M|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3675|  2.45M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  16.9M|{
  458|  16.9M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  16.9M|        static_cast<unsigned char>(ch))];
  460|  16.9M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   106k|{
  469|   106k|    return static_cast<unsigned char>(ch) <= 127;
  470|   106k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  3.91M|{
  539|  3.91M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  3.91M|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  11.6M|{
  784|  11.6M|    return e != eof_error::good;
  785|  11.6M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  42.7k|{
  798|  42.7k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  42.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  42.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  42.7k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  42.7k|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   206k|{
  845|   206k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   206k|    return parse_error::eof;
  847|   206k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.60M|{
  854|  3.60M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.60M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.60M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 76.2k, False: 3.52M]
  ------------------
  859|  76.2k|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|  76.2k|    }
  861|       |
  862|  3.52M|    return detail::unexpected_scan_error(code, msg);
  863|  3.60M|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.60M|{
  868|  3.60M|    return [code, msg](parse_error err) {
  869|  3.60M|        assert(err != parse_error::good);
  870|  3.60M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  3.60M|    };
  872|  3.60M|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2319|  2.76M|{
 2320|  2.76M|    unsigned char running_diff{0};
 2321|  10.3M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2321:24): [True: 7.62M, False: 2.76M]
  ------------------
 2322|  7.62M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2323|  7.62M|    }
 2324|  2.76M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2324:12): [True: 95.9k, False: 2.66M]
  |  Branch (2324:33): [True: 17.9k, False: 2.65M]
  ------------------
 2325|  2.76M|}
_ZN3scn2v44impl11char_to_intEc:
 3228|  19.4M|{
 3229|  19.4M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3230|  19.4M|}
_ZN3scn2v44impl11char_to_intEw:
 3232|  3.14M|{
 3233|  3.14M|#if WCHAR_MIN < 0
 3234|  3.14M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3234:9): [True: 3.13M, False: 14.2k]
  |  Branch (3234:20): [True: 1.95M, False: 1.17M]
  ------------------
 3235|       |#else
 3236|       |    if (ch <= 255) {
 3237|       |#endif
 3238|  1.95M|        return char_to_int(static_cast<char>(ch));
 3239|  1.95M|    }
 3240|  1.19M|    return 255;
 3241|  3.14M|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6034|  2.07M|{
 6035|  2.07M|    if (specs.width != 0) {
  ------------------
  |  Branch (6035:9): [True: 0, False: 2.07M]
  ------------------
 6036|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6036:13): [True: 0, False: 0]
  ------------------
 6037|      0|            return detail::unexpected_scan_error(
 6038|      0|                scan_error::length_too_short,
 6039|      0|                "Scanned value too narrow, width did not exceed what "
 6040|      0|                "was specified in the format string");
 6041|      0|        }
 6042|      0|    }
 6043|  2.07M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6043:9): [True: 0, False: 2.07M]
  ------------------
 6044|       |        // Ensured by take_width_view
 6045|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6046|      0|                   specs.precision);
 6047|      0|    }
 6048|  2.07M|    return {};
 6049|  2.07M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  3.11M|    {
  304|  3.11M|        ranges::advance(x, n);
  305|  3.11M|        return x;
  306|  3.11M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  3.11M|    {
  268|  3.11M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.11M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  3.11M|    {
  151|  3.11M|        i += n;
  152|  3.11M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  3.65M|    {
  108|  3.65M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.65M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  3.65M|    {
   87|  3.65M|        return s - i;
   88|  3.65M|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.88M|    {
  304|  1.88M|        ranges::advance(x, n);
  305|  1.88M|        return x;
  306|  1.88M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.88M|    {
  268|  1.88M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.88M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.88M|    {
  151|  1.88M|        i += n;
  152|  1.88M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   543k|    {
  108|   543k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   543k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   543k|    {
   87|   543k|        return s - i;
   88|   543k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2981|  2.18M|    {
 2982|  2.18M|        return m_current;
 2983|  2.18M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2981|  1.15M|    {
 2982|  1.15M|        return m_current;
 2983|  1.15M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|  1.22M|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|  1.22M|                               detail::char_t<Range>>::forward_iterator>) {
  990|  1.22M|        auto beg = r.begin();
  991|  1.22M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 1.22M, False: 0]
  ------------------
  992|  1.22M|            return false;
  993|  1.22M|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|  1.22M|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  30.4M|    {
  763|  30.4M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  30.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  30.4M|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|  3.22M|{
 1956|  3.22M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  3.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  3.22M|    else {
 1967|  3.22M|        auto it = range.begin();
 1968|  3.22M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 1.98M, False: 1.23M]
  ------------------
 1969|  1.98M|            return ranges::next(it, count);
 1970|  1.98M|        }
 1971|       |
 1972|  4.90M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 3.70M, False: 1.20M]
  ------------------
 1973|  3.70M|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 35.5k, False: 3.67M]
  ------------------
 1974|  35.5k|                return unexpected(eof_error::eof);
 1975|  35.5k|            }
 1976|  3.70M|        }
 1977|       |
 1978|  1.20M|        return it;
 1979|  1.23M|    }
 1980|  3.22M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  3.22M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  3.22M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  3.22M|        else {
 1107|  3.22M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 3.22M, False: 0]
  ------------------
 1108|  3.22M|                return static_cast<size_t>(
 1109|  3.22M|                    r.begin().parent()->chars_available() -
 1110|  3.22M|                    r.begin().position());
 1111|  3.22M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  3.22M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  3.22M|}
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.92M|        : m_fptr([](storage fn,
  743|  2.92M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.92M|              cvref<T> obj = *get<T>(fn);
  745|  2.92M|              if constexpr (std::is_void_v<R>) {
  746|  2.92M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.92M|              }
  748|  2.92M|              else {
  749|  2.92M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.92M|              }
  751|  2.92M|          }),
  752|  2.92M|          m_storage(std::addressof(f))
  753|  2.92M|    {
  754|  2.92M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  15.2M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.2M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  15.2M|              else {
  749|  15.2M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.2M|              }
  751|  15.2M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  15.2M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  15.2M|        else if constexpr (std::is_object_v<T>) {
  688|  15.2M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  15.2M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.92M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.92M|        {
  662|  2.92M|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  8.68M|    {
  763|  8.68M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  8.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  8.68M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.24M|        : m_fptr([](storage fn,
  743|  2.24M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.24M|              cvref<T> obj = *get<T>(fn);
  745|  2.24M|              if constexpr (std::is_void_v<R>) {
  746|  2.24M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.24M|              }
  748|  2.24M|              else {
  749|  2.24M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.24M|              }
  751|  2.24M|          }),
  752|  2.24M|          m_storage(std::addressof(f))
  753|  2.24M|    {
  754|  2.24M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  3.97M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.97M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.97M|              else {
  749|  3.97M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.97M|              }
  751|  3.97M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  3.97M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.97M|        else if constexpr (std::is_object_v<T>) {
  688|  3.97M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.97M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.24M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.24M|        {
  662|  2.24M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6062|   878k|    {
 6063|   878k|        const bool need_skipped_width =
 6064|   878k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 0, False: 878k]
  |  Branch (6064:33): [True: 0, False: 878k]
  ------------------
 6065|   878k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|   878k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 0, False: 878k]
  ------------------
 6069|   878k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 0, False: 878k]
  ------------------
 6070|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6071|      0|                             need_skipped_width);
 6072|      0|        }
 6073|   878k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 878k, False: 0]
  |  Branch (6073:56): [True: 878k, False: 0]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|   878k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 0, False: 878k]
  ------------------
 6077|      0|                auto max_width_view = take_width(rng, specs.precision);
 6078|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|      0|                                  .transform_error(make_eof_scan_error));
 6080|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|      0|            }
 6082|  1.74M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   878k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   878k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   878k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   878k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 14.5k, False: 863k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  14.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  14.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  14.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  14.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  14.5k|    }                                                  \
  |  |  |  | 3939|   878k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   863k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|  1.74M|                            make_eof_scan_error));
 6084|       |
 6085|  1.74M|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 0, False: 863k]
  ------------------
 6086|      0|                return result_type{
 6087|      0|                    it,
 6088|      0|                    calculate_text_width(make_contiguous_buffer(
 6089|      0|                                             ranges::subrange{rng.begin(), it})
 6090|      0|                                             .view())};
 6091|      0|            }
 6092|   863k|            return result_type{it, 0};
 6093|  1.74M|        }
 6094|       |
 6095|      0|        return result_type{rng.begin(), 0};
 6096|   878k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  2.35M|{
 2075|  2.35M|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  2.35M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  2.35M|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  2.35M|    else {
 2060|  2.35M|        auto first = range.begin();
 2061|  12.3M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 12.3M, False: 26.4k]
  ------------------
 2062|  12.3M|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 2.32M, False: 9.98M]
  ------------------
 2063|  2.32M|                return first;
 2064|  2.32M|            }
 2065|  12.3M|        }
 2066|  26.4k|        return first;
 2067|  2.35M|    }
 2068|  2.35M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  2.06M|    {
  108|  2.06M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.06M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  2.06M|    {
   94|  2.06M|        iter_difference_t<I> counter{0};
   95|  19.8M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 17.7M, False: 2.06M]
  ------------------
   96|  17.7M|            ++i;
   97|  17.7M|            ++counter;
   98|  17.7M|        }
   99|  2.06M|        return counter;
  100|  2.06M|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.60M|    return [code, msg](parse_error err) {
  869|  3.60M|        assert(err != parse_error::good);
  870|  3.60M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  3.60M|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|   456k|    {
 1879|   456k|        auto stdloc = loc.get<std::locale>();
 1880|   456k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   456k|        grouping = numpunct.grouping();
 1882|   456k|        thousands_sep =
 1883|   456k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 456k]
  ------------------
 1884|   456k|        decimal_point = numpunct.decimal_point();
 1885|   456k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|   456k|{
 1816|   456k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 456k, False: 0]
  ------------------
 1817|   456k|        return std::use_facet<Facet>(stdloc);
 1818|   456k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   456k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|  3.46M|{
 1945|  3.46M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  3.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 19.1k, False: 3.44M]
  |  |  ------------------
  ------------------
 1946|  19.1k|        return unexpected(e);
 1947|  19.1k|    }
 1948|       |
 1949|  3.44M|    return ranges::next(range.begin());
 1950|  3.46M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  5.03M|{
  951|  5.03M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  5.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 38.4k, False: 4.99M]
  |  |  ------------------
  ------------------
  952|  38.4k|        return eof_error::eof;
  953|  38.4k|    }
  954|  4.99M|    return eof_error::good;
  955|  5.03M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  7.00M|{
  945|  7.00M|    return is_range_eof(r.begin(), r.end());
  946|  7.00M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  7.00M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  7.00M|    {
  938|  7.00M|        return begin == end;
  939|  7.00M|    }
  940|  7.00M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  3.44M|    {
  296|  3.44M|        ++x;
  297|  3.44M|        return x;
  298|  3.44M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3246|  1.33M|{
 3247|  1.33M|    auto r = read_one_of_code_unit(range, "+-");
 3248|  1.33M|    if (!r) {
  ------------------
  |  Branch (3248:9): [True: 991k, False: 343k]
  ------------------
 3249|   991k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3249:13): [True: 991k, False: 288]
  ------------------
 3250|   991k|            return std::pair{range.begin(), sign_type::default_sign};
 3251|   991k|        }
 3252|    288|        return unexpected(eof_error::eof);
 3253|   991k|    }
 3254|       |
 3255|   343k|    auto& it = *r;
 3256|   343k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3256:9): [True: 151k, False: 191k]
  ------------------
 3257|   151k|        return std::pair{it, sign_type::minus_sign};
 3258|   151k|    }
 3259|   191k|    return std::pair{it, sign_type::plus_sign};
 3260|   343k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|  2.31M|{
 2372|  2.31M|    auto it = read_code_unit(range);
 2373|  2.31M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  2.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.1k, False: 2.30M]
  |  |  ------------------
  ------------------
 2374|  11.1k|        return unexpected(make_eof_parse_error(it.error()));
 2375|  11.1k|    }
 2376|       |
 2377|  4.34M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 4.34M, False: 1.83M]
  ------------------
 2378|  4.34M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 472k, False: 3.87M]
  ------------------
 2379|   472k|            return *it;
 2380|   472k|        }
 2381|  4.34M|    }
 2382|       |
 2383|  1.83M|    return unexpected(parse_error::error);
 2384|  2.30M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|  3.22M|{
 2331|  3.22M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  3.22M|    else {
 2344|  3.22M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  3.22M|            if (ch < 'A' || ch > 'Z') {
 2346|  3.22M|                return ch;
 2347|  3.22M|            }
 2348|  3.22M|            return static_cast<char_type>(ch +
 2349|  3.22M|                                          static_cast<char_type>('a' - 'A'));
 2350|  3.22M|        };
 2351|       |
 2352|  3.22M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  3.22M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  3.22M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  3.22M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  3.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 35.5k, False: 3.18M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  35.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  35.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  35.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  35.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  35.5k|    }                                                  \
  |  |  |  | 3939|  3.22M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  3.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  3.18M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  3.18M|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  3.18M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  3.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.06M, False: 119k]
  |  |  ------------------
  ------------------
 2357|  3.18M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  3.18M|                    return ascii_tolower(a) ==
 2359|  3.18M|                           static_cast<detail::char_t<Range>>(b);
 2360|  3.18M|                }))) {
 2361|  3.06M|            return unexpected(parse_error::error);
 2362|  3.06M|        }
 2363|       |
 2364|   119k|        return it;
 2365|  3.18M|    }
 2366|  3.22M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2344|  3.68M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  3.68M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 3.29M, False: 394k]
  |  Branch (2345:29): [True: 333k, False: 60.4k]
  ------------------
 2346|  3.62M|                return ch;
 2347|  3.62M|            }
 2348|  60.4k|            return static_cast<char_type>(ch +
 2349|  60.4k|                                          static_cast<char_type>('a' - 'A'));
 2350|  3.68M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|  1.14M|{
 2246|  1.14M|    auto it = read_code_unit(range);
 2247|  1.14M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.07k, False: 1.13M]
  |  |  ------------------
  ------------------
 2248|  8.07k|        return unexpected(make_eof_parse_error(it.error()));
 2249|  8.07k|    }
 2250|       |
 2251|  1.13M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 942k, False: 195k]
  |  |  ------------------
  ------------------
 2252|  1.13M|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   942k|        return unexpected(parse_error::error);
 2254|   942k|    }
 2255|       |
 2256|   195k|    return *it;
 2257|  1.13M|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|  2.34M|{
 2095|  2.34M|    auto it = read_while_code_unit(range, pred);
 2096|  2.34M|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 961k, False: 1.38M]
  ------------------
 2097|   961k|        return unexpected(parse_error::error);
 2098|   961k|    }
 2099|  1.38M|    return it;
 2100|  2.34M|}
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|  1.07M|    {
 1720|  1.07M|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|  1.07M|                           ranges::common_range<Range>) {
 1737|  1.07M|            auto beg_seg = range.begin().contiguous_segment();
 1738|  1.07M|            auto end_seg = range.end().contiguous_segment();
 1739|  1.07M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 162k, False: 912k]
  |  |  ------------------
  ------------------
 1740|  1.07M|                             detail::to_address(end_seg.end()))) {
 1741|   162k|                auto& str = m_storage.emplace();
 1742|   162k|                str.reserve(range.end().position() - range.begin().position());
 1743|   162k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|   162k|                m_view = string_view_type{str};
 1745|   162k|                return;
 1746|   162k|            }
 1747|       |
 1748|   912k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   912k|                                                            end_seg.data());
 1750|   912k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|  1.07M|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|  7.35M|    {
 1681|  7.35M|        return m_view;
 1682|  7.35M|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|  4.51M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6104|   798k|    {
 6105|   798k|        const bool need_skipped_width =
 6106|   798k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6106:13): [True: 0, False: 798k]
  |  Branch (6106:33): [True: 0, False: 798k]
  ------------------
 6107|   798k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6108|       |
 6109|   798k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6109:13): [True: 0, False: 798k]
  ------------------
 6110|   798k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6110:13): [True: 0, False: 798k]
  ------------------
 6111|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6111:17): [True: 0, False: 0]
  ------------------
 6112|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6112:17): [True: 0, False: 0]
  ------------------
 6113|      0|                return result_type{rng.begin(), 0};
 6114|      0|            }
 6115|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6116|      0|                             specs.fill, need_skipped_width);
 6117|      0|        }
 6118|   798k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6118:13): [True: 798k, False: 0]
  ------------------
 6119|   798k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6119:13): [True: 0, False: 798k]
  ------------------
 6120|   798k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6120:15): [True: 0, False: 0]
  |  Branch (6120:35): [True: 0, False: 0]
  ------------------
 6121|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6121:15): [True: 0, False: 0]
  ------------------
 6122|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6122:15): [True: 0, False: 0]
  ------------------
 6123|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                const auto initial_width =
 6125|      0|                    specs.precision - prefix_width - value_width;
 6126|      0|                auto max_width_view = take_width(rng, initial_width);
 6127|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|      0|                                  .transform_error(make_eof_scan_error));
 6129|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6130|      0|            }
 6131|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6132|      0|                            make_eof_scan_error));
 6133|       |
 6134|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                return result_type{
 6136|      0|                    it,
 6137|      0|                    calculate_text_width(make_contiguous_buffer(
 6138|      0|                                             ranges::subrange{rng.begin(), it})
 6139|      0|                                             .view())};
 6140|      0|            }
 6141|      0|            return result_type{it, 0};
 6142|      0|        }
 6143|   798k|        return result_type{rng.begin(), 0};
 6144|   798k|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|  1.57M|{
 1945|  1.57M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.75k, False: 1.56M]
  |  |  ------------------
  ------------------
 1946|  4.75k|        return unexpected(e);
 1947|  4.75k|    }
 1948|       |
 1949|  1.56M|    return ranges::next(range.begin());
 1950|  1.57M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  2.95M|{
  951|  2.95M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  2.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20.6k, False: 2.93M]
  |  |  ------------------
  ------------------
  952|  20.6k|        return eof_error::eof;
  953|  20.6k|    }
  954|  2.93M|    return eof_error::good;
  955|  2.95M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  2.95M|{
  945|  2.95M|    return is_range_eof(r.begin(), r.end());
  946|  2.95M|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  2.95M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  2.95M|    {
  938|  2.95M|        return begin == end;
  939|  2.95M|    }
  940|  2.95M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.56M|    {
  296|  1.56M|        ++x;
  297|  1.56M|        return x;
  298|  1.56M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3246|  1.08M|{
 3247|  1.08M|    auto r = read_one_of_code_unit(range, "+-");
 3248|  1.08M|    if (!r) {
  ------------------
  |  Branch (3248:9): [True: 803k, False: 278k]
  ------------------
 3249|   803k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3249:13): [True: 803k, False: 96]
  ------------------
 3250|   803k|            return std::pair{range.begin(), sign_type::default_sign};
 3251|   803k|        }
 3252|     96|        return unexpected(eof_error::eof);
 3253|   803k|    }
 3254|       |
 3255|   278k|    auto& it = *r;
 3256|   278k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3256:9): [True: 139k, False: 139k]
  ------------------
 3257|   139k|        return std::pair{it, sign_type::minus_sign};
 3258|   139k|    }
 3259|   139k|    return std::pair{it, sign_type::plus_sign};
 3260|   278k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|  1.25M|{
 2372|  1.25M|    auto it = read_code_unit(range);
 2373|  1.25M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.01k, False: 1.25M]
  |  |  ------------------
  ------------------
 2374|  2.01k|        return unexpected(make_eof_parse_error(it.error()));
 2375|  2.01k|    }
 2376|       |
 2377|  2.34M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 2.34M, False: 941k]
  ------------------
 2378|  2.34M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 309k, False: 2.03M]
  ------------------
 2379|   309k|            return *it;
 2380|   309k|        }
 2381|  2.34M|    }
 2382|       |
 2383|   941k|    return unexpected(parse_error::error);
 2384|  1.25M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  2.79M|{
 2331|  2.79M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|  2.79M|                  std::is_same_v<char_type, char>) {
 2335|  2.79M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2335:13): [True: 35.5k, False: 2.76M]
  ------------------
 2336|  35.5k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|  35.5k|        }
 2338|  2.76M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2338:13): [True: 2.65M, False: 113k]
  ------------------
 2339|  2.65M|            return unexpected(parse_error::error);
 2340|  2.65M|        }
 2341|   113k|        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|       |    else {
 2344|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|       |            if (ch < 'A' || ch > 'Z') {
 2346|       |                return ch;
 2347|       |            }
 2348|       |            return static_cast<char_type>(ch +
 2349|       |                                          static_cast<char_type>('a' - 'A'));
 2350|       |        };
 2351|       |
 2352|       |        SCN_TRY(it, read_exactly_n_code_units(
 2353|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|       |                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|       |        if (SCN_UNLIKELY(!std::equal(
 2357|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|       |                    return ascii_tolower(a) ==
 2359|       |                           static_cast<detail::char_t<Range>>(b);
 2360|       |                }))) {
 2361|       |            return unexpected(parse_error::error);
 2362|       |        }
 2363|       |
 2364|       |        return it;
 2365|       |    }
 2366|  2.79M|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|   322k|{
 2246|   322k|    auto it = read_code_unit(range);
 2247|   322k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.74k, False: 319k]
  |  |  ------------------
  ------------------
 2248|  2.74k|        return unexpected(make_eof_parse_error(it.error()));
 2249|  2.74k|    }
 2250|       |
 2251|   319k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 269k, False: 50.1k]
  |  |  ------------------
  ------------------
 2252|   319k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   269k|        return unexpected(parse_error::error);
 2254|   269k|    }
 2255|       |
 2256|  50.1k|    return *it;
 2257|   319k|}
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  4.04M|    {
 1602|  4.04M|        return sv;
 1603|  4.04M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|   579k|{
 2075|   579k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   579k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|   579k|{
 2056|   579k|    if constexpr (ranges::common_range<Range>) {
 2057|   579k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|   579k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3054|  1.06M|{
 3055|  1.06M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 1.06M, False: 0]
  ------------------
 3056|  1.06M|        auto it = read_while_classic_space(range);
 3057|  1.06M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|  1.06M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.8k, False: 1.05M]
  |  |  ------------------
  ------------------
 3059|  11.8k|            return unexpected(e);
 3060|  11.8k|        }
 3061|       |
 3062|  1.05M|        return it;
 3063|  1.06M|    }
 3064|       |
 3065|      0|    return read_while_classic_space(range);
 3066|  1.06M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  1.06M|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|  1.06M|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|  1.06M|        auto buf = make_contiguous_buffer(range);
 2220|  1.06M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|  1.06M|        return ranges::next(range.begin(),
 2222|  1.06M|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|  1.06M|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  1.06M|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  1.06M|                  ranges::sized_range<Range>) {
 1785|  1.06M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  1.06M|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|  1.06M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  1.06M|    {
 1589|  1.06M|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  3.27M|    {
  304|  3.27M|        ranges::advance(x, n);
  305|  3.27M|        return x;
  306|  3.27M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  4.34M|    {
  268|  4.34M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  4.34M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  4.34M|    {
  181|  20.0M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 15.7M, False: 4.34M]
  ------------------
  182|  15.7M|            ++i;
  183|  15.7M|        }
  184|  4.34M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6214|   283k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|   283k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|   283k|            auto rd = make_reader<T, char_type>();
 6225|   283k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   283k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 283k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|   283k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 283k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|   283k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|   283k|                return impl(rd, range, value);
 6230|   283k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|   283k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3144|  1.62M|    {
 3145|  1.62M|        reader_error_handler eh{};
 3146|  1.62M|        get_derived().check_specs_impl(specs, eh);
 3147|  1.62M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|  1.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.62M]
  |  |  ------------------
  ------------------
 3148|      0|            return detail::unexpected_scan_error(
 3149|      0|                scan_error::invalid_format_string, eh.m_msg);
 3150|      0|        }
 3151|  1.62M|        return {};
 3152|  1.62M|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3156|  1.62M|    {
 3157|  1.62M|        return static_cast<Derived&>(*this);
 3158|  1.62M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4166|  1.62M|    {
 4167|  1.62M|        detail::check_float_type_specs(specs, eh);
 4168|  1.62M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|   283k|    {
 6150|   283k|        const bool need_skipped_width =
 6151|   283k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 283k]
  |  Branch (6151:33): [True: 0, False: 283k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|   283k|        auto it = rng.begin();
 6155|   283k|        std::ptrdiff_t prefix_width = 0;
 6156|   283k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 283k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|   283k|        else {
 6164|   283k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   283k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   283k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   283k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.40k, False: 279k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.40k|    }                                                  \
  |  |  |  | 3939|   283k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|   279k|            std::tie(it, prefix_width) = prefix_result;
 6166|   279k|        }
 6167|   279k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|   279k|        std::ptrdiff_t value_width = 0;
 6171|   279k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 279k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|   279k|        else {
 6187|   279k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   279k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   279k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 18.4k, False: 261k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  18.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  18.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  18.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  18.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  18.4k|    }                                                  \
  |  | 3939|   279k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   279k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|   261k|                                             specs, value, loc));
 6189|       |
 6190|   261k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 261k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|   261k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|   261k|        std::ptrdiff_t postfix_width = 0;
 6199|   261k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 257k, False: 3.51k]
  ------------------
 6200|   257k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   257k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   257k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   257k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   257k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 257k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   257k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   257k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|   257k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|   257k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|   257k|                                 value_width));
 6204|   257k|            std::tie(it, postfix_width) = postfix_result;
 6205|   257k|        }
 6206|       |
 6207|   261k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   261k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 261k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|   261k|            specs, prefix_width, value_width, postfix_width));
 6209|   261k|        return it;
 6210|   261k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3139|  3.76M|    {
 3140|  3.76M|        return true;
 3141|  3.76M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4238|  1.60M|    {
 4239|  1.60M|        unsigned options{};
 4240|  1.60M|        if (specs.localized) {
  ------------------
  |  Branch (4240:13): [True: 456k, False: 1.14M]
  ------------------
 4241|   456k|            options |= float_reader_base::allow_thsep;
 4242|   456k|        }
 4243|       |
 4244|  1.60M|        SCN_GCC_COMPAT_PUSH
 4245|  1.60M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4246|       |
 4247|  1.60M|        switch (specs.type) {
 4248|   221k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4248:13): [True: 221k, False: 1.38M]
  ------------------
 4249|   221k|                return options | float_reader_base::allow_fixed;
 4250|       |
 4251|  40.9k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4251:13): [True: 40.9k, False: 1.56M]
  ------------------
 4252|  40.9k|                return options | float_reader_base::allow_scientific;
 4253|       |
 4254|   499k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4254:13): [True: 499k, False: 1.10M]
  ------------------
 4255|   499k|                return options | float_reader_base::allow_hex;
 4256|       |
 4257|   383k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4257:13): [True: 383k, False: 1.21M]
  ------------------
 4258|   383k|                return options | float_reader_base::allow_scientific |
 4259|   383k|                       float_reader_base::allow_fixed;
 4260|       |
 4261|   456k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4261:13): [True: 456k, False: 1.14M]
  ------------------
 4262|   456k|                return options | float_reader_base::allow_scientific |
 4263|   456k|                       float_reader_base::allow_fixed |
 4264|   456k|                       float_reader_base::allow_hex;
 4265|       |
 4266|      0|            default:
  ------------------
  |  Branch (4266:13): [True: 0, False: 1.60M]
  ------------------
 4267|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4268|  1.60M|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4269|  1.60M|        }
 4270|       |
 4271|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4272|  1.60M|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3690|  1.60M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1869|  2.25M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1630|  4.51M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3721|   698k|    {
 3722|   698k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   698k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   698k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3723|       |
 3724|   698k|        const std::ptrdiff_t sign_len =
 3725|   698k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3725:13): [True: 182k, False: 516k]
  ------------------
 3726|       |
 3727|   698k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   698k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   698k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   698k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   698k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 16.0k, False: 682k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  16.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  16.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  16.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  16.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  16.0k|    }                                                  \
  |  |  |  | 3939|   698k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   682k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3728|   682k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3729|   698k|    }
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 4078|  2.15M|    {
 4079|  2.15M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4079:13): [True: 2.15M, False: 0]
  ------------------
 4080|  2.15M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4080:13): [True: 2.15M, False: 0]
  ------------------
 4081|  2.15M|            return;
 4082|  2.15M|        }
 4083|       |
 4084|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4085|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4085:13): [True: 0, False: 0]
  ------------------
 4086|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4086:27): [True: 0, False: 0]
  ------------------
 4087|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4087:21): [True: 0, False: 0]
  ------------------
 4088|      0|                    ch = CharT{'.'};
 4089|      0|                }
 4090|      0|            }
 4091|      0|        }
 4092|       |
 4093|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4093:13): [True: 0, False: 0]
  ------------------
 4094|      0|            return;
 4095|      0|        }
 4096|       |
 4097|      0|        auto first =
 4098|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4099|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4099:13): [True: 0, False: 0]
  ------------------
 4100|      0|            return;
 4101|      0|        }
 4102|       |
 4103|      0|        m_thsep_indices.push_back(
 4104|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4105|       |
 4106|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4106:31): [True: 0, False: 0]
  ------------------
 4107|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4107:17): [True: 0, False: 0]
  ------------------
 4108|      0|                *first++ = std::move(*it);
 4109|      0|            }
 4110|      0|            else {
 4111|      0|                m_thsep_indices.push_back(
 4112|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4113|      0|            }
 4114|      0|        }
 4115|       |
 4116|      0|        str.erase(first, str.end());
 4117|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|  2.46M|    {
 1686|  2.46M|        return m_storage.has_value();
 1687|  2.46M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|  1.44M|    {
 1691|  1.44M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|  1.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.44M|        return *m_storage;
 1693|  1.44M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4191|   279k|    {
 4192|   279k|        float_reader<CharT> rd{get_options(specs)};
 4193|       |
 4194|   279k|#if !SCN_DISABLE_LOCALE
 4195|   279k|        if (specs.localized) {
  ------------------
  |  Branch (4195:13): [True: 79.0k, False: 200k]
  ------------------
 4196|  79.0k|            return read_impl<Range>(
 4197|  79.0k|                range, rd,
 4198|  79.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  79.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4200|  79.0k|                },
 4201|  79.0k|                value, loc);
 4202|  79.0k|        }
 4203|   200k|#endif
 4204|       |
 4205|   200k|        return read_impl<Range>(
 4206|   200k|            range, rd,
 4207|   200k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   200k|                return r.read_source(SCN_FWD(args)...);
 4209|   200k|            },
 4210|   200k|            value);
 4211|   279k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4227|   389k|    {
 4228|   389k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4229|   389k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   389k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20.8k, False: 368k]
  |  |  ------------------
  ------------------
 4230|  20.8k|            return unexpected(r.error());
 4231|  20.8k|        }
 4232|       |
 4233|   368k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   368k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   368k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   368k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.11k, False: 365k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.11k|    }                                                  \
  |  |  |  | 3939|   368k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4234|   365k|        return ranges::next(range.begin(), n);
 4235|   368k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.20M|    {
  763|  1.20M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  1.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.20M|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  79.0k|        : m_fptr([](storage fn,
  743|  79.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  79.0k|              cvref<T> obj = *get<T>(fn);
  745|  79.0k|              if constexpr (std::is_void_v<R>) {
  746|  79.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  79.0k|              }
  748|  79.0k|              else {
  749|  79.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  79.0k|              }
  751|  79.0k|          }),
  752|  79.0k|          m_storage(std::addressof(f))
  753|  79.0k|    {
  754|  79.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  79.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  79.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  79.0k|              else {
  749|  79.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  79.0k|              }
  751|  79.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  79.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  79.0k|        else if constexpr (std::is_object_v<T>) {
  688|  79.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  79.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4198|  79.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  79.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  79.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4200|  79.0k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3709|   248k|    {
 3710|   248k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3711|   248k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|   248k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 248k]
  |  |  ------------------
  ------------------
 3712|      0|            m_locale_options.thousands_sep = CharT{0};
 3713|      0|        }
 3714|       |
 3715|   248k|        return read_source_impl(range);
 3716|   248k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3735|  1.20M|    {
 3736|  1.20M|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|  1.20M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.20M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.20M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.20M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.20M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3737|  1.20M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3738|  1.20M|        auto it = sign_result.first;
 3739|  1.20M|        m_sign = sign_result.second;
 3740|       |
 3741|  1.20M|        auto digits_begin = it;
 3742|  1.20M|        auto r = ranges::subrange{it, range.end()};
 3743|       |        if constexpr (ranges::contiguous_range<Range> &&
 3744|       |                      ranges::sized_range<Range>) {
 3745|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3746|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3747|       |                SCN_TRY_ASSIGN(
 3748|       |                    it,
 3749|       |                    do_read_source_impl(
 3750|       |                        r,
 3751|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3752|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3753|       |            }
 3754|       |            else {
 3755|       |                auto cb = [&](const auto& rr)
 3756|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3757|       |                    auto res = read_all(rr);
 3758|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3759|       |                        return detail::unexpected_scan_error(
 3760|       |                            scan_error::invalid_scanned_value,
 3761|       |                            "Invalid float value");
 3762|       |                    }
 3763|       |                    return res;
 3764|       |                };
 3765|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3766|       |            }
 3767|       |        }
 3768|  1.20M|        else {
 3769|  1.20M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|  1.20M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  1.20M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 64.8k, False: 1.14M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  64.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  64.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  64.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  64.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  64.8k|    }                                                  \
  |  | 3939|  1.20M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  1.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3770|  1.14M|                it,
 3771|  1.14M|                do_read_source_impl(
 3772|  1.14M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3773|  1.14M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3774|  1.14M|        }
 3775|       |
 3776|  1.20M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|  1.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3777|       |
 3778|  1.14M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3778:13): [True: 1.13M, False: 5.91k]
  |  Branch (3778:48): [True: 1.12M, False: 5.92k]
  ------------------
 3779|  1.14M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3779:13): [True: 1.07M, False: 55.9k]
  ------------------
 3780|  1.14M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3780:13): [True: 1.07M, False: 1.98k]
  ------------------
 3781|  1.07M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3782|  1.07M|        }
 3783|       |
 3784|  1.14M|        handle_separators();
 3785|       |
 3786|  1.14M|        return it;
 3787|  1.20M|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4021|  1.20M|    {
 4022|  1.20M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4023|  1.20M|        const bool allowed_nonhex =
 4024|  1.20M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4025|  1.20M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4026|       |
 4027|  1.20M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4027:39): [True: 1.19M, False: 11.8k]
  |  Branch (4027:45): [True: 0, False: 1.19M]
  ------------------
 4028|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4029|      0|                scan_error::invalid_scanned_value,
 4030|      0|                "Invalid infinite floating-point value"));
 4031|      0|        }
 4032|  1.20M|        else if (r) {
  ------------------
  |  Branch (4032:18): [True: 11.8k, False: 1.19M]
  ------------------
 4033|  11.8k|            return *r;
 4034|  11.8k|        }
 4035|       |
 4036|  1.19M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4036:39): [True: 1.13M, False: 57.9k]
  |  Branch (4036:45): [True: 1.34k, False: 1.13M]
  ------------------
 4037|  1.34k|            return unexpected(r.error());
 4038|  1.34k|        }
 4039|  1.19M|        else if (r) {
  ------------------
  |  Branch (4039:18): [True: 57.9k, False: 1.13M]
  ------------------
 4040|  57.9k|            return *r;
 4041|  57.9k|        }
 4042|       |
 4043|  1.13M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4043:13): [True: 810k, False: 325k]
  |  Branch (4043:28): [True: 256k, False: 553k]
  ------------------
 4044|       |            // only hex allowed:
 4045|       |            // prefix "0x" allowed, not required
 4046|   256k|            auto it = range.begin();
 4047|       |
 4048|   256k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4048:22): [True: 12.8k, False: 243k]
  ------------------
 4049|  12.8k|                m_kind = float_kind::hex_with_prefix;
 4050|  12.8k|                it = *r;
 4051|  12.8k|            }
 4052|   243k|            else {
 4053|   243k|                m_kind = float_kind::hex_without_prefix;
 4054|   243k|            }
 4055|       |
 4056|   256k|            return read_hex(ranges::subrange{it, range.end()});
 4057|   256k|        }
 4058|   878k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4058:13): [True: 325k, False: 553k]
  |  Branch (4058:29): [True: 325k, False: 0]
  ------------------
 4059|       |            // only nonhex allowed:
 4060|       |            // no prefix allowed
 4061|   325k|            m_kind = float_kind::generic;
 4062|   325k|            return read_regular_float(range);
 4063|   325k|        }
 4064|       |        // both hex and nonhex allowed:
 4065|       |        // check for "0x" prefix -> hex,
 4066|       |        // regular otherwise
 4067|       |
 4068|   553k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|   553k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 29.4k, False: 524k]
  |  |  ------------------
  ------------------
 4069|  29.4k|            m_kind = float_kind::hex_with_prefix;
 4070|  29.4k|            return read_hex(ranges::subrange{*r, range.end()});
 4071|  29.4k|        }
 4072|       |
 4073|   524k|        m_kind = float_kind::generic;
 4074|   524k|        return read_regular(range);
 4075|   553k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3829|  1.20M|    {
 3830|  1.20M|        auto it = range.begin();
 3831|  1.20M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3831:73): [True: 1.19M, False: 11.8k]
  ------------------
 3832|  1.19M|            return unexpected(r.error());
 3833|  1.19M|        }
 3834|  11.8k|        else {
 3835|  11.8k|            it = *r;
 3836|  11.8k|        }
 3837|       |
 3838|  11.8k|        if (auto r = read_matching_string_classic_nocase(
 3839|  11.8k|                ranges::subrange{it, range.end()}, "inity");
 3840|  11.8k|            !r) {
  ------------------
  |  Branch (3840:13): [True: 5.91k, False: 5.92k]
  ------------------
 3841|  5.91k|            m_kind = float_kind::inf_short;
 3842|  5.91k|            return it;
 3843|  5.91k|        }
 3844|  5.92k|        else {
 3845|  5.92k|            m_kind = float_kind::inf_long;
 3846|  5.92k|            return *r;
 3847|  5.92k|        }
 3848|  11.8k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3852|  1.19M|    {
 3853|  1.19M|        auto it = range.begin();
 3854|  1.19M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3854:73): [True: 1.13M, False: 59.2k]
  ------------------
 3855|  1.13M|            return r.transform_error(map_parse_error_to_scan_error(
 3856|  1.13M|                scan_error::invalid_scanned_value,
 3857|  1.13M|                "Invalid floating-point NaN value"));
 3858|  1.13M|        }
 3859|  59.2k|        else {
 3860|  59.2k|            it = *r;
 3861|  59.2k|        }
 3862|       |
 3863|  59.2k|        if (auto r =
 3864|  59.2k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3865|  59.2k|            !r) {
  ------------------
  |  Branch (3865:13): [True: 55.9k, False: 3.32k]
  ------------------
 3866|  55.9k|            m_kind = float_kind::nan_simple;
 3867|  55.9k|            return it;
 3868|  55.9k|        }
 3869|  3.32k|        else {
 3870|  3.32k|            it = *r;
 3871|  3.32k|        }
 3872|       |
 3873|  3.32k|        auto payload_beg_it = it;
 3874|  3.32k|        it = read_while_code_unit(
 3875|  3.32k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3876|  3.32k|                return is_ascii_char(ch) &&
 3877|  3.32k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3878|  3.32k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3879|  3.32k|            });
 3880|  3.32k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3881|       |
 3882|  3.32k|        m_kind = float_kind::nan_with_payload;
 3883|  3.32k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3883:18): [True: 1.98k, False: 1.34k]
  ------------------
 3884|  3.32k|                                             ')')) {
 3885|  1.98k|            return *r;
 3886|  1.98k|        }
 3887|  1.34k|        return detail::unexpected_scan_error(
 3888|  1.34k|            scan_error::invalid_scanned_value,
 3889|  1.34k|            "Invalid floating-point NaN payload");
 3890|  3.32k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  3.32k|        : m_fptr([](storage fn,
  743|  3.32k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.32k|              cvref<T> obj = *get<T>(fn);
  745|  3.32k|              if constexpr (std::is_void_v<R>) {
  746|  3.32k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.32k|              }
  748|  3.32k|              else {
  749|  3.32k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.32k|              }
  751|  3.32k|          }),
  752|  3.32k|          m_storage(std::addressof(f))
  753|  3.32k|    {
  754|  3.32k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  61.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  61.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  61.7k|              else {
  749|  61.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  61.7k|              }
  751|  61.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  61.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  61.7k|        else if constexpr (std::is_object_v<T>) {
  688|  61.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  61.7k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3875|  61.7k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3876|  61.7k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3876:24): [True: 61.6k, False: 89]
  ------------------
 3877|  61.7k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3877:26): [True: 59.3k, False: 2.25k]
  |  Branch (3877:39): [True: 51.5k, False: 7.87k]
  |  Branch (3877:54): [True: 2.63k, False: 7.50k]
  |  Branch (3877:67): [True: 2.54k, False: 83]
  ------------------
 3878|  61.6k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3878:26): [True: 5.32k, False: 2.25k]
  |  Branch (3878:39): [True: 2.52k, False: 2.80k]
  |  Branch (3878:53): [True: 2.72k, False: 2.34k]
  ------------------
 3879|  61.7k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  3.32k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.32k|        {
  662|  3.32k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3822|   810k|    {
 3823|   810k|        return read_matching_string_classic_nocase(range, "0x");
 3824|   810k|    }
_ZN3scn2v44impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3923|   285k|    {
 3924|   285k|        auto it = range.begin();
 3925|       |
 3926|   285k|        std::ptrdiff_t digits_count = 0;
 3927|   285k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3928|   285k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 8.00k, False: 277k]
  |  |  ------------------
  ------------------
 3929|  8.00k|            return r.transform_error(map_parse_error_to_scan_error(
 3930|  8.00k|                scan_error::invalid_scanned_value,
 3931|  8.00k|                "Invalid hexadecimal floating-point value"));
 3932|  8.00k|        }
 3933|   277k|        else {
 3934|   277k|            digits_count += ranges::distance(it, *r);
 3935|   277k|            it = *r;
 3936|   277k|        }
 3937|       |
 3938|   277k|        m_integral_part_length = digits_count;
 3939|   277k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3939:18): [True: 40.5k, False: 237k]
  ------------------
 3940|   277k|                                             m_locale_options.decimal_point)) {
 3941|  40.5k|            it = *r;
 3942|  40.5k|        }
 3943|       |
 3944|   277k|        if (auto r =
  ------------------
  |  Branch (3944:18): [True: 36.8k, False: 240k]
  ------------------
 3945|   277k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3946|  36.8k|            digits_count += ranges::distance(it, *r);
 3947|  36.8k|            it = *r;
 3948|  36.8k|        }
 3949|       |
 3950|   277k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 277k]
  |  |  ------------------
  ------------------
 3951|      0|            return detail::unexpected_scan_error(
 3952|      0|                scan_error::invalid_scanned_value,
 3953|      0|                "No significand digits in hexfloat");
 3954|      0|        }
 3955|       |
 3956|   277k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3957|       |
 3958|   277k|        return it;
 3959|   277k|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3807|   563k|    {
 3808|   563k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   563k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 563k]
  |  |  |  Branch (865:45): [True: 0, False: 563k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3809|   563k|                         thsep_allowed)) {
 3810|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3811|      0|                return char_to_int(ch) < 16 ||
 3812|      0|                       ch == m_locale_options.thousands_sep;
 3813|      0|            });
 3814|      0|        }
 3815|       |
 3816|   563k|        return read_while1_code_unit(
 3817|   563k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3818|   563k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   563k|        : m_fptr([](storage fn,
  743|   563k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   563k|              cvref<T> obj = *get<T>(fn);
  745|   563k|              if constexpr (std::is_void_v<R>) {
  746|   563k|                  obj(static_cast<decltype(args)>(args)...);
  747|   563k|              }
  748|   563k|              else {
  749|   563k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   563k|              }
  751|   563k|          }),
  752|   563k|          m_storage(std::addressof(f))
  753|   563k|    {
  754|   563k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  2.88M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.88M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.88M|              else {
  749|  2.88M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.88M|              }
  751|  2.88M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  2.88M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.88M|        else if constexpr (std::is_object_v<T>) {
  688|  2.88M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.88M|    }
_ZZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3817|  2.88M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   563k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   563k|        {
  662|   563k|        }
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3895|   982k|    {
 3896|   982k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3896:18): [True: 128k, False: 854k]
  ------------------
 3897|   128k|            auto beg_exp_it = range.begin();
 3898|   128k|            auto it = *r;
 3899|       |
 3900|   128k|            if (auto r_sign =
  ------------------
  |  Branch (3900:22): [True: 128k, False: 288]
  ------------------
 3901|   128k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3902|   128k|                it = r_sign->first;
 3903|   128k|            }
 3904|       |
 3905|   128k|            if (auto r_exp = read_while1_code_unit(
 3906|   128k|                    ranges::subrange{it, range.end()},
 3907|   128k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3908|   128k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.83k, False: 126k]
  |  |  ------------------
  ------------------
 3909|  1.83k|                it = beg_exp_it;
 3910|  1.83k|            }
 3911|   126k|            else {
 3912|   126k|                it = *r_exp;
 3913|   126k|            }
 3914|       |
 3915|   128k|            return it;
 3916|   128k|        }
 3917|   854k|        return range.begin();
 3918|   982k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|   128k|        : m_fptr([](storage fn,
  743|   128k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   128k|              cvref<T> obj = *get<T>(fn);
  745|   128k|              if constexpr (std::is_void_v<R>) {
  746|   128k|                  obj(static_cast<decltype(args)>(args)...);
  747|   128k|              }
  748|   128k|              else {
  749|   128k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   128k|              }
  751|   128k|          }),
  752|   128k|          m_storage(std::addressof(f))
  753|   128k|    {
  754|   128k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|   402k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   402k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   402k|              else {
  749|   402k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   402k|              }
  751|   402k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   402k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   402k|        else if constexpr (std::is_object_v<T>) {
  688|   402k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   402k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3907|   402k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|   128k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   128k|        {
  662|   128k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3964|   849k|    {
 3965|   849k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3966|   849k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3966:35): [True: 737k, False: 112k]
  |  Branch (3966:50): [True: 20.3k, False: 716k]
  ------------------
 3967|       |
 3968|   849k|        auto it = ranges::begin(range);
 3969|   849k|        std::ptrdiff_t digits_count = 0;
 3970|       |
 3971|   849k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3972|   849k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   849k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 43.9k, False: 805k]
  |  |  ------------------
  ------------------
 3973|  43.9k|            return r.transform_error(
 3974|  43.9k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3975|  43.9k|                                              "Invalid floating-point value"));
 3976|  43.9k|        }
 3977|   805k|        else {
 3978|   805k|            digits_count += ranges::distance(it, *r);
 3979|   805k|            it = *r;
 3980|   805k|        }
 3981|       |
 3982|   805k|        m_integral_part_length = digits_count;
 3983|   805k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3983:18): [True: 149k, False: 655k]
  ------------------
 3984|   805k|                                             m_locale_options.decimal_point)) {
 3985|   149k|            it = *r;
 3986|   149k|        }
 3987|       |
 3988|   805k|        if (auto r =
  ------------------
  |  Branch (3988:18): [True: 138k, False: 667k]
  ------------------
 3989|   805k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3990|   138k|            digits_count += ranges::distance(it, *r);
 3991|   138k|            it = *r;
 3992|   138k|        }
 3993|       |
 3994|   805k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   805k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 805k]
  |  |  ------------------
  ------------------
 3995|      0|            return detail::unexpected_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "No significand digits in float");
 3998|      0|        }
 3999|       |
 4000|   805k|        auto beg_exp_it = it;
 4001|   805k|        if (allowed_exp) {
  ------------------
  |  Branch (4001:13): [True: 705k, False: 100k]
  ------------------
 4002|   705k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4003|   705k|        }
 4004|   805k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4004:13): [True: 19.6k, False: 786k]
  |  Branch (4004:29): [True: 11.5k, False: 8.03k]
  ------------------
 4005|  11.5k|            return detail::unexpected_scan_error(
 4006|  11.5k|                scan_error::invalid_scanned_value,
 4007|  11.5k|                "No exponent given to scientific float");
 4008|  11.5k|        }
 4009|       |
 4010|   794k|        m_kind =
 4011|   794k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4011:13): [True: 667k, False: 126k]
  ------------------
 4012|       |
 4013|   794k|        return it;
 4014|   805k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3792|  1.65M|    {
 3793|  1.65M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|  1.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.65M]
  |  |  |  Branch (865:45): [True: 0, False: 1.65M]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3794|  1.65M|                         thsep_allowed)) {
 3795|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3796|      0|                return char_to_int(ch) < 10 ||
 3797|      0|                       ch == m_locale_options.thousands_sep;
 3798|      0|            });
 3799|      0|        }
 3800|       |
 3801|  1.65M|        return read_while1_code_unit(
 3802|  1.65M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3803|  1.65M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  1.65M|        : m_fptr([](storage fn,
  743|  1.65M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.65M|              cvref<T> obj = *get<T>(fn);
  745|  1.65M|              if constexpr (std::is_void_v<R>) {
  746|  1.65M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.65M|              }
  748|  1.65M|              else {
  749|  1.65M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.65M|              }
  751|  1.65M|          }),
  752|  1.65M|          m_storage(std::addressof(f))
  753|  1.65M|    {
  754|  1.65M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  8.95M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.95M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  8.95M|              else {
  749|  8.95M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.95M|              }
  751|  8.95M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  8.95M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  8.95M|        else if constexpr (std::is_object_v<T>) {
  688|  8.95M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  8.95M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3802|  8.95M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  1.65M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.65M|        {
  662|  1.65M|        }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1675|  1.07M|    {
 1676|  1.07M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|  1.07M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|  1.07M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  79.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  79.0k|        {
  662|  79.0k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   200k|        : m_fptr([](storage fn,
  743|   200k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   200k|              cvref<T> obj = *get<T>(fn);
  745|   200k|              if constexpr (std::is_void_v<R>) {
  746|   200k|                  obj(static_cast<decltype(args)>(args)...);
  747|   200k|              }
  748|   200k|              else {
  749|   200k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   200k|              }
  751|   200k|          }),
  752|   200k|          m_storage(std::addressof(f))
  753|   200k|    {
  754|   200k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   200k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   200k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   200k|              else {
  749|   200k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   200k|              }
  751|   200k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   200k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   200k|        else if constexpr (std::is_object_v<T>) {
  688|   200k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   200k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4207|   200k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   200k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4209|   200k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3695|   957k|    {
 3696|   957k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|   957k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 957k]
  |  |  ------------------
  ------------------
 3697|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3698|      0|                classic_with_thsep_tag{}};
 3699|      0|        }
 3700|       |
 3701|   957k|        return read_source_impl(range);
 3702|   957k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   200k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   200k|        {
  662|   200k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4191|   240k|    {
 4192|   240k|        float_reader<CharT> rd{get_options(specs)};
 4193|       |
 4194|   240k|#if !SCN_DISABLE_LOCALE
 4195|   240k|        if (specs.localized) {
  ------------------
  |  Branch (4195:13): [True: 67.2k, False: 173k]
  ------------------
 4196|  67.2k|            return read_impl<Range>(
 4197|  67.2k|                range, rd,
 4198|  67.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  67.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4200|  67.2k|                },
 4201|  67.2k|                value, loc);
 4202|  67.2k|        }
 4203|   173k|#endif
 4204|       |
 4205|   173k|        return read_impl<Range>(
 4206|   173k|            range, rd,
 4207|   173k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   173k|                return r.read_source(SCN_FWD(args)...);
 4209|   173k|            },
 4210|   173k|            value);
 4211|   240k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4227|   341k|    {
 4228|   341k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4229|   341k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   341k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 11.9k, False: 329k]
  |  |  ------------------
  ------------------
 4230|  11.9k|            return unexpected(r.error());
 4231|  11.9k|        }
 4232|       |
 4233|   329k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   329k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   329k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   329k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.9k, False: 316k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.9k|    }                                                  \
  |  |  |  | 3939|   329k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4234|   316k|        return ranges::next(range.begin(), n);
 4235|   329k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.05M|    {
  763|  1.05M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.05M|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  67.2k|        : m_fptr([](storage fn,
  743|  67.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  67.2k|              cvref<T> obj = *get<T>(fn);
  745|  67.2k|              if constexpr (std::is_void_v<R>) {
  746|  67.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  67.2k|              }
  748|  67.2k|              else {
  749|  67.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  67.2k|              }
  751|  67.2k|          }),
  752|  67.2k|          m_storage(std::addressof(f))
  753|  67.2k|    {
  754|  67.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  67.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  67.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  67.2k|              else {
  749|  67.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  67.2k|              }
  751|  67.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  67.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  67.2k|        else if constexpr (std::is_object_v<T>) {
  688|  67.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  67.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4198|  67.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  67.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  67.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4200|  67.2k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3709|   208k|    {
 3710|   208k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3711|   208k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|   208k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 208k]
  |  |  ------------------
  ------------------
 3712|      0|            m_locale_options.thousands_sep = CharT{0};
 3713|      0|        }
 3714|       |
 3715|   208k|        return read_source_impl(range);
 3716|   208k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3735|  1.05M|    {
 3736|  1.05M|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|  1.05M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.05M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.05M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 1.05M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  1.05M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3737|  1.05M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3738|  1.05M|        auto it = sign_result.first;
 3739|  1.05M|        m_sign = sign_result.second;
 3740|       |
 3741|  1.05M|        auto digits_begin = it;
 3742|  1.05M|        auto r = ranges::subrange{it, range.end()};
 3743|       |        if constexpr (ranges::contiguous_range<Range> &&
 3744|  1.05M|                      ranges::sized_range<Range>) {
 3745|  1.05M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|  2.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.05M]
  |  |  |  Branch (865:45): [True: 0, False: 1.05M]
  |  |  |  Branch (865:45): [True: 0, False: 1.05M]
  |  |  ------------------
  ------------------
 3746|  1.05M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3747|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3748|      0|                    it,
 3749|      0|                    do_read_source_impl(
 3750|      0|                        r,
 3751|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3752|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3753|      0|            }
 3754|  1.05M|            else {
 3755|  1.05M|                auto cb = [&](const auto& rr)
 3756|  1.05M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3757|  1.05M|                    auto res = read_all(rr);
 3758|  1.05M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3759|  1.05M|                        return detail::unexpected_scan_error(
 3760|  1.05M|                            scan_error::invalid_scanned_value,
 3761|  1.05M|                            "Invalid float value");
 3762|  1.05M|                    }
 3763|  1.05M|                    return res;
 3764|  1.05M|                };
 3765|  1.05M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|  1.05M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  1.05M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 36.7k, False: 1.01M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  36.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  36.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  36.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  36.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  36.7k|    }                                                  \
  |  | 3939|  1.05M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3766|  1.01M|            }
 3767|       |        }
 3768|       |        else {
 3769|       |            SCN_TRY_ASSIGN(
 3770|       |                it,
 3771|       |                do_read_source_impl(
 3772|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3773|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3774|       |        }
 3775|       |
 3776|  1.05M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3777|       |
 3778|  1.01M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3778:13): [True: 1.00M, False: 5.74k]
  |  Branch (3778:48): [True: 1.00M, False: 5.59k]
  ------------------
 3779|  1.01M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3779:13): [True: 948k, False: 55.1k]
  ------------------
 3780|  1.01M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3780:13): [True: 946k, False: 1.77k]
  ------------------
 3781|   946k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3782|   946k|        }
 3783|       |
 3784|  1.01M|        handle_separators();
 3785|       |
 3786|  1.01M|        return it;
 3787|  1.05M|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3829|  1.05M|    {
 3830|  1.05M|        auto it = range.begin();
 3831|  1.05M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3831:73): [True: 1.04M, False: 11.3k]
  ------------------
 3832|  1.04M|            return unexpected(r.error());
 3833|  1.04M|        }
 3834|  11.3k|        else {
 3835|  11.3k|            it = *r;
 3836|  11.3k|        }
 3837|       |
 3838|  11.3k|        if (auto r = read_matching_string_classic_nocase(
 3839|  11.3k|                ranges::subrange{it, range.end()}, "inity");
 3840|  11.3k|            !r) {
  ------------------
  |  Branch (3840:13): [True: 5.74k, False: 5.59k]
  ------------------
 3841|  5.74k|            m_kind = float_kind::inf_short;
 3842|  5.74k|            return it;
 3843|  5.74k|        }
 3844|  5.59k|        else {
 3845|  5.59k|            m_kind = float_kind::inf_long;
 3846|  5.59k|            return *r;
 3847|  5.59k|        }
 3848|  11.3k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3852|  1.04M|    {
 3853|  1.04M|        auto it = range.begin();
 3854|  1.04M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3854:73): [True: 981k, False: 58.1k]
  ------------------
 3855|   981k|            return r.transform_error(map_parse_error_to_scan_error(
 3856|   981k|                scan_error::invalid_scanned_value,
 3857|   981k|                "Invalid floating-point NaN value"));
 3858|   981k|        }
 3859|  58.1k|        else {
 3860|  58.1k|            it = *r;
 3861|  58.1k|        }
 3862|       |
 3863|  58.1k|        if (auto r =
 3864|  58.1k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3865|  58.1k|            !r) {
  ------------------
  |  Branch (3865:13): [True: 55.1k, False: 3.01k]
  ------------------
 3866|  55.1k|            m_kind = float_kind::nan_simple;
 3867|  55.1k|            return it;
 3868|  55.1k|        }
 3869|  3.01k|        else {
 3870|  3.01k|            it = *r;
 3871|  3.01k|        }
 3872|       |
 3873|  3.01k|        auto payload_beg_it = it;
 3874|  3.01k|        it = read_while_code_unit(
 3875|  3.01k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3876|  3.01k|                return is_ascii_char(ch) &&
 3877|  3.01k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3878|  3.01k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3879|  3.01k|            });
 3880|  3.01k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3881|       |
 3882|  3.01k|        m_kind = float_kind::nan_with_payload;
 3883|  3.01k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3883:18): [True: 1.77k, False: 1.23k]
  ------------------
 3884|  3.01k|                                             ')')) {
 3885|  1.77k|            return *r;
 3886|  1.77k|        }
 3887|  1.23k|        return detail::unexpected_scan_error(
 3888|  1.23k|            scan_error::invalid_scanned_value,
 3889|  1.23k|            "Invalid floating-point NaN payload");
 3890|  3.01k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|  3.01k|        : m_fptr([](storage fn,
  743|  3.01k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.01k|              cvref<T> obj = *get<T>(fn);
  745|  3.01k|              if constexpr (std::is_void_v<R>) {
  746|  3.01k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.01k|              }
  748|  3.01k|              else {
  749|  3.01k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.01k|              }
  751|  3.01k|          }),
  752|  3.01k|          m_storage(std::addressof(f))
  753|  3.01k|    {
  754|  3.01k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  44.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  44.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  44.7k|              else {
  749|  44.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  44.7k|              }
  751|  44.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  44.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  44.7k|        else if constexpr (std::is_object_v<T>) {
  688|  44.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  44.7k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3875|  44.7k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3876|  44.7k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3876:24): [True: 44.7k, False: 83]
  ------------------
 3877|  44.7k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3877:26): [True: 42.7k, False: 1.96k]
  |  Branch (3877:39): [True: 34.9k, False: 7.80k]
  |  Branch (3877:54): [True: 2.55k, False: 7.20k]
  |  Branch (3877:67): [True: 2.47k, False: 83]
  ------------------
 3878|  44.7k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3878:26): [True: 5.32k, False: 1.96k]
  |  Branch (3878:39): [True: 2.52k, False: 2.80k]
  |  Branch (3878:53): [True: 2.72k, False: 2.04k]
  ------------------
 3879|  44.7k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  3.01k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.01k|        {
  662|  3.01k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|   697k|    {
 3823|   697k|        return read_matching_string_classic_nocase(range, "0x");
 3824|   697k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|   576k|{
 2095|   576k|    auto it = read_while_code_unit(range, pred);
 2096|   576k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 244k, False: 332k]
  ------------------
 2097|   244k|        return unexpected(parse_error::error);
 2098|   244k|    }
 2099|   332k|    return it;
 2100|   576k|}
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3895|   170k|    {
 3896|   170k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3896:18): [True: 30.5k, False: 139k]
  ------------------
 3897|  30.5k|            auto beg_exp_it = range.begin();
 3898|  30.5k|            auto it = *r;
 3899|       |
 3900|  30.5k|            if (auto r_sign =
  ------------------
  |  Branch (3900:22): [True: 30.4k, False: 96]
  ------------------
 3901|  30.5k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3902|  30.4k|                it = r_sign->first;
 3903|  30.4k|            }
 3904|       |
 3905|  30.5k|            if (auto r_exp = read_while1_code_unit(
 3906|  30.5k|                    ranges::subrange{it, range.end()},
 3907|  30.5k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3908|  30.5k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|  30.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 662, False: 29.8k]
  |  |  ------------------
  ------------------
 3909|    662|                it = beg_exp_it;
 3910|    662|            }
 3911|  29.8k|            else {
 3912|  29.8k|                it = *r_exp;
 3913|  29.8k|            }
 3914|       |
 3915|  30.5k|            return it;
 3916|  30.5k|        }
 3917|   139k|        return range.begin();
 3918|   170k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  30.5k|        : m_fptr([](storage fn,
  743|  30.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  30.5k|              cvref<T> obj = *get<T>(fn);
  745|  30.5k|              if constexpr (std::is_void_v<R>) {
  746|  30.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  30.5k|              }
  748|  30.5k|              else {
  749|  30.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  30.5k|              }
  751|  30.5k|          }),
  752|  30.5k|          m_storage(std::addressof(f))
  753|  30.5k|    {
  754|  30.5k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|  85.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  85.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  85.2k|              else {
  749|  85.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  85.2k|              }
  751|  85.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  85.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  85.2k|        else if constexpr (std::is_object_v<T>) {
  688|  85.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  85.2k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3907|  85.2k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  30.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  30.5k|        {
  662|  30.5k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3964|   284k|    {
 3965|   284k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3966|   284k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3966:35): [True: 181k, False: 103k]
  |  Branch (3966:50): [True: 18.5k, False: 162k]
  ------------------
 3967|       |
 3968|   284k|        auto it = ranges::begin(range);
 3969|   284k|        std::ptrdiff_t digits_count = 0;
 3970|       |
 3971|   284k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3972|   284k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 23.3k, False: 261k]
  |  |  ------------------
  ------------------
 3973|  23.3k|            return r.transform_error(
 3974|  23.3k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3975|  23.3k|                                              "Invalid floating-point value"));
 3976|  23.3k|        }
 3977|   261k|        else {
 3978|   261k|            digits_count += ranges::distance(it, *r);
 3979|   261k|            it = *r;
 3980|   261k|        }
 3981|       |
 3982|   261k|        m_integral_part_length = digits_count;
 3983|   261k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3983:18): [True: 45.3k, False: 215k]
  ------------------
 3984|   261k|                                             m_locale_options.decimal_point)) {
 3985|  45.3k|            it = *r;
 3986|  45.3k|        }
 3987|       |
 3988|   261k|        if (auto r =
  ------------------
  |  Branch (3988:18): [True: 41.2k, False: 220k]
  ------------------
 3989|   261k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3990|  41.2k|            digits_count += ranges::distance(it, *r);
 3991|  41.2k|            it = *r;
 3992|  41.2k|        }
 3993|       |
 3994|   261k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 261k]
  |  |  ------------------
  ------------------
 3995|      0|            return detail::unexpected_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "No significand digits in float");
 3998|      0|        }
 3999|       |
 4000|   261k|        auto beg_exp_it = it;
 4001|   261k|        if (allowed_exp) {
  ------------------
  |  Branch (4001:13): [True: 170k, False: 90.9k]
  ------------------
 4002|   170k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4003|   170k|        }
 4004|   261k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4004:13): [True: 17.4k, False: 243k]
  |  Branch (4004:29): [True: 11.3k, False: 6.10k]
  ------------------
 4005|  11.3k|            return detail::unexpected_scan_error(
 4006|  11.3k|                scan_error::invalid_scanned_value,
 4007|  11.3k|                "No exponent given to scientific float");
 4008|  11.3k|        }
 4009|       |
 4010|   249k|        m_kind =
 4011|   249k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4011:13): [True: 220k, False: 29.8k]
  ------------------
 4012|       |
 4013|   249k|        return it;
 4014|   261k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3792|   545k|    {
 3793|   545k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   545k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 545k]
  |  |  |  Branch (865:45): [True: 0, False: 545k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3794|   545k|                         thsep_allowed)) {
 3795|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3796|      0|                return char_to_int(ch) < 10 ||
 3797|      0|                       ch == m_locale_options.thousands_sep;
 3798|      0|            });
 3799|      0|        }
 3800|       |
 3801|   545k|        return read_while1_code_unit(
 3802|   545k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3803|   545k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   545k|        : m_fptr([](storage fn,
  743|   545k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   545k|              cvref<T> obj = *get<T>(fn);
  745|   545k|              if constexpr (std::is_void_v<R>) {
  746|   545k|                  obj(static_cast<decltype(args)>(args)...);
  747|   545k|              }
  748|   545k|              else {
  749|   545k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   545k|              }
  751|   545k|          }),
  752|   545k|          m_storage(std::addressof(f))
  753|   545k|    {
  754|   545k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  2.76M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.76M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.76M|              else {
  749|  2.76M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.76M|              }
  751|  2.76M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  2.76M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.76M|        else if constexpr (std::is_object_v<T>) {
  688|  2.76M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.76M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3802|  2.76M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   545k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   545k|        {
  662|   545k|        }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4021|  1.05M|    {
 4022|  1.05M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4023|  1.05M|        const bool allowed_nonhex =
 4024|  1.05M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4025|  1.05M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4026|       |
 4027|  1.05M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4027:39): [True: 1.04M, False: 11.3k]
  |  Branch (4027:45): [True: 0, False: 1.04M]
  ------------------
 4028|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4029|      0|                scan_error::invalid_scanned_value,
 4030|      0|                "Invalid infinite floating-point value"));
 4031|      0|        }
 4032|  1.05M|        else if (r) {
  ------------------
  |  Branch (4032:18): [True: 11.3k, False: 1.04M]
  ------------------
 4033|  11.3k|            return *r;
 4034|  11.3k|        }
 4035|       |
 4036|  1.04M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4036:39): [True: 983k, False: 56.9k]
  |  Branch (4036:45): [True: 1.23k, False: 981k]
  ------------------
 4037|  1.23k|            return unexpected(r.error());
 4038|  1.23k|        }
 4039|  1.03M|        else if (r) {
  ------------------
  |  Branch (4039:18): [True: 56.9k, False: 981k]
  ------------------
 4040|  56.9k|            return *r;
 4041|  56.9k|        }
 4042|       |
 4043|   981k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4043:13): [True: 697k, False: 284k]
  |  Branch (4043:28): [True: 212k, False: 484k]
  ------------------
 4044|       |            // only hex allowed:
 4045|       |            // prefix "0x" allowed, not required
 4046|   212k|            auto it = range.begin();
 4047|       |
 4048|   212k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4048:22): [True: 11.2k, False: 201k]
  ------------------
 4049|  11.2k|                m_kind = float_kind::hex_with_prefix;
 4050|  11.2k|                it = *r;
 4051|  11.2k|            }
 4052|   201k|            else {
 4053|   201k|                m_kind = float_kind::hex_without_prefix;
 4054|   201k|            }
 4055|       |
 4056|   212k|            return read_hex(ranges::subrange{it, range.end()});
 4057|   212k|        }
 4058|   769k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4058:13): [True: 284k, False: 484k]
  |  Branch (4058:29): [True: 284k, False: 0]
  ------------------
 4059|       |            // only nonhex allowed:
 4060|       |            // no prefix allowed
 4061|   284k|            m_kind = float_kind::generic;
 4062|   284k|            return read_regular_float(range);
 4063|   284k|        }
 4064|       |        // both hex and nonhex allowed:
 4065|       |        // check for "0x" prefix -> hex,
 4066|       |        // regular otherwise
 4067|       |
 4068|   484k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|   484k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 27.5k, False: 456k]
  |  |  ------------------
  ------------------
 4069|  27.5k|            m_kind = float_kind::hex_with_prefix;
 4070|  27.5k|            return read_hex(ranges::subrange{*r, range.end()});
 4071|  27.5k|        }
 4072|       |
 4073|   456k|        m_kind = float_kind::generic;
 4074|   456k|        return read_regular(range);
 4075|   484k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3756|   697k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3757|   697k|                    auto res = read_all(rr);
 3758|   697k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|   697k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 837, False: 696k]
  |  |  ------------------
  ------------------
 3759|    837|                        return detail::unexpected_scan_error(
 3760|    837|                            scan_error::invalid_scanned_value,
 3761|    837|                            "Invalid float value");
 3762|    837|                    }
 3763|   696k|                    return res;
 3764|   697k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|   697k|{
 1938|   697k|    return ranges::next(range.begin(), range.end());
 1939|   697k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   697k|    {
  313|   697k|        ranges::advance(x, bound);
  314|   697k|        return x;
  315|   697k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   697k|    {
  275|   697k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   697k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   697k|    {
  190|   697k|        i = std::move(bound);
  191|   697k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|   949k|    {
 1676|   949k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   949k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   949k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1719|   949k|    {
 1720|   949k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|   949k|                      ranges::sized_range<Range>) {
 1725|   949k|            m_storage.reset();
 1726|   949k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   949k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  67.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  67.2k|        {
  662|  67.2k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   173k|        : m_fptr([](storage fn,
  743|   173k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   173k|              cvref<T> obj = *get<T>(fn);
  745|   173k|              if constexpr (std::is_void_v<R>) {
  746|   173k|                  obj(static_cast<decltype(args)>(args)...);
  747|   173k|              }
  748|   173k|              else {
  749|   173k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   173k|              }
  751|   173k|          }),
  752|   173k|          m_storage(std::addressof(f))
  753|   173k|    {
  754|   173k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   173k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   173k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   173k|              else {
  749|   173k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   173k|              }
  751|   173k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   173k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   173k|        else if constexpr (std::is_object_v<T>) {
  688|   173k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   173k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4207|   173k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   173k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4209|   173k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3695|   843k|    {
 3696|   843k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|   843k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 843k]
  |  |  ------------------
  ------------------
 3697|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3698|      0|                classic_with_thsep_tag{}};
 3699|      0|        }
 3700|       |
 3701|   843k|        return read_source_impl(range);
 3702|   843k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   173k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   173k|        {
  662|   173k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6214|   295k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|   295k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|   295k|            auto rd = make_reader<T, char_type>();
 6225|   295k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   295k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 295k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|   295k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 295k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|   295k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|   295k|                return impl(rd, range, value);
 6230|   295k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|   295k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|   295k|    {
 6150|   295k|        const bool need_skipped_width =
 6151|   295k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 295k]
  |  Branch (6151:33): [True: 0, False: 295k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|   295k|        auto it = rng.begin();
 6155|   295k|        std::ptrdiff_t prefix_width = 0;
 6156|   295k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 295k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|   295k|        else {
 6164|   295k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   295k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   295k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   295k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.94k, False: 290k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.94k|    }                                                  \
  |  |  |  | 3939|   295k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|   290k|            std::tie(it, prefix_width) = prefix_result;
 6166|   290k|        }
 6167|   290k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|   290k|        std::ptrdiff_t value_width = 0;
 6171|   290k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 290k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|   290k|        else {
 6187|   290k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   290k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   290k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 17.9k, False: 272k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  17.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  17.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  17.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  17.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  17.9k|    }                                                  \
  |  | 3939|   290k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|   272k|                                             specs, value, loc));
 6189|       |
 6190|   272k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 272k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|   272k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|   272k|        std::ptrdiff_t postfix_width = 0;
 6199|   272k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 268k, False: 3.93k]
  ------------------
 6200|   268k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   268k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   268k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   268k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   268k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 268k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   268k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|   268k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|   268k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|   268k|                                 value_width));
 6204|   268k|            std::tie(it, postfix_width) = postfix_result;
 6205|   268k|        }
 6206|       |
 6207|   272k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   272k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   272k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 272k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|   272k|            specs, prefix_width, value_width, postfix_width));
 6209|   272k|        return it;
 6210|   272k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3721|   722k|    {
 3722|   722k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   722k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   722k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3723|       |
 3724|   722k|        const std::ptrdiff_t sign_len =
 3725|   722k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3725:13): [True: 188k, False: 534k]
  ------------------
 3726|       |
 3727|   722k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   722k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   722k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   722k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   722k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 13.5k, False: 709k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  13.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  13.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  13.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  13.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  13.5k|    }                                                  \
  |  |  |  | 3939|   722k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   709k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3728|   709k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3729|   722k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4191|   290k|    {
 4192|   290k|        float_reader<CharT> rd{get_options(specs)};
 4193|       |
 4194|   290k|#if !SCN_DISABLE_LOCALE
 4195|   290k|        if (specs.localized) {
  ------------------
  |  Branch (4195:13): [True: 83.7k, False: 206k]
  ------------------
 4196|  83.7k|            return read_impl<Range>(
 4197|  83.7k|                range, rd,
 4198|  83.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  83.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4200|  83.7k|                },
 4201|  83.7k|                value, loc);
 4202|  83.7k|        }
 4203|   206k|#endif
 4204|       |
 4205|   206k|        return read_impl<Range>(
 4206|   206k|            range, rd,
 4207|   206k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   206k|                return r.read_source(SCN_FWD(args)...);
 4209|   206k|            },
 4210|   206k|            value);
 4211|   290k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4227|   405k|    {
 4228|   405k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4229|   405k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   405k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 21.6k, False: 383k]
  |  |  ------------------
  ------------------
 4230|  21.6k|            return unexpected(r.error());
 4231|  21.6k|        }
 4232|       |
 4233|   383k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   383k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   383k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   383k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.47k, False: 382k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.47k|    }                                                  \
  |  |  |  | 3939|   383k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   382k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4234|   382k|        return ranges::next(range.begin(), n);
 4235|   383k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  83.7k|        : m_fptr([](storage fn,
  743|  83.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  83.7k|              cvref<T> obj = *get<T>(fn);
  745|  83.7k|              if constexpr (std::is_void_v<R>) {
  746|  83.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  83.7k|              }
  748|  83.7k|              else {
  749|  83.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  83.7k|              }
  751|  83.7k|          }),
  752|  83.7k|          m_storage(std::addressof(f))
  753|  83.7k|    {
  754|  83.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  83.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  83.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  83.7k|              else {
  749|  83.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  83.7k|              }
  751|  83.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  83.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  83.7k|        else if constexpr (std::is_object_v<T>) {
  688|  83.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  83.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4198|  83.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  83.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  83.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4200|  83.7k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  83.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  83.7k|        {
  662|  83.7k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   206k|        : m_fptr([](storage fn,
  743|   206k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   206k|              cvref<T> obj = *get<T>(fn);
  745|   206k|              if constexpr (std::is_void_v<R>) {
  746|   206k|                  obj(static_cast<decltype(args)>(args)...);
  747|   206k|              }
  748|   206k|              else {
  749|   206k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   206k|              }
  751|   206k|          }),
  752|   206k|          m_storage(std::addressof(f))
  753|   206k|    {
  754|   206k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   206k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   206k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   206k|              else {
  749|   206k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   206k|              }
  751|   206k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   206k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   206k|        else if constexpr (std::is_object_v<T>) {
  688|   206k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   206k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4207|   206k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   206k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4209|   206k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   206k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   206k|        {
  662|   206k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4191|   247k|    {
 4192|   247k|        float_reader<CharT> rd{get_options(specs)};
 4193|       |
 4194|   247k|#if !SCN_DISABLE_LOCALE
 4195|   247k|        if (specs.localized) {
  ------------------
  |  Branch (4195:13): [True: 69.6k, False: 177k]
  ------------------
 4196|  69.6k|            return read_impl<Range>(
 4197|  69.6k|                range, rd,
 4198|  69.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  69.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4200|  69.6k|                },
 4201|  69.6k|                value, loc);
 4202|  69.6k|        }
 4203|   177k|#endif
 4204|       |
 4205|   177k|        return read_impl<Range>(
 4206|   177k|            range, rd,
 4207|   177k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   177k|                return r.read_source(SCN_FWD(args)...);
 4209|   177k|            },
 4210|   177k|            value);
 4211|   247k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4227|   351k|    {
 4228|   351k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4229|   351k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.2k, False: 339k]
  |  |  ------------------
  ------------------
 4230|  12.2k|            return unexpected(r.error());
 4231|  12.2k|        }
 4232|       |
 4233|   339k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   339k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   339k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   339k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 12.1k, False: 327k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  12.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  12.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  12.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  12.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  12.1k|    }                                                  \
  |  |  |  | 3939|   339k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4234|   327k|        return ranges::next(range.begin(), n);
 4235|   339k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  69.6k|        : m_fptr([](storage fn,
  743|  69.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  69.6k|              cvref<T> obj = *get<T>(fn);
  745|  69.6k|              if constexpr (std::is_void_v<R>) {
  746|  69.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  69.6k|              }
  748|  69.6k|              else {
  749|  69.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  69.6k|              }
  751|  69.6k|          }),
  752|  69.6k|          m_storage(std::addressof(f))
  753|  69.6k|    {
  754|  69.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  69.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  69.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  69.6k|              else {
  749|  69.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  69.6k|              }
  751|  69.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  69.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  69.6k|        else if constexpr (std::is_object_v<T>) {
  688|  69.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  69.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4198|  69.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  69.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  69.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4200|  69.6k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  69.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  69.6k|        {
  662|  69.6k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   177k|        : m_fptr([](storage fn,
  743|   177k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   177k|              cvref<T> obj = *get<T>(fn);
  745|   177k|              if constexpr (std::is_void_v<R>) {
  746|   177k|                  obj(static_cast<decltype(args)>(args)...);
  747|   177k|              }
  748|   177k|              else {
  749|   177k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   177k|              }
  751|   177k|          }),
  752|   177k|          m_storage(std::addressof(f))
  753|   177k|    {
  754|   177k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   177k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   177k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   177k|              else {
  749|   177k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   177k|              }
  751|   177k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   177k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   177k|        else if constexpr (std::is_object_v<T>) {
  688|   177k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   177k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4207|   177k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   177k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4209|   177k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   177k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   177k|        {
  662|   177k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6214|   299k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|   299k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|   299k|            auto rd = make_reader<T, char_type>();
 6225|   299k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   299k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   299k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 299k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|   299k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 299k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|   299k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|   299k|                return impl(rd, range, value);
 6230|   299k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|   299k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|   299k|    {
 6150|   299k|        const bool need_skipped_width =
 6151|   299k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 299k]
  |  Branch (6151:33): [True: 0, False: 299k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|   299k|        auto it = rng.begin();
 6155|   299k|        std::ptrdiff_t prefix_width = 0;
 6156|   299k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 299k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|   299k|        else {
 6164|   299k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   299k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   299k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   299k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   299k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 5.24k, False: 294k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  5.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  5.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  5.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  5.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  5.24k|    }                                                  \
  |  |  |  | 3939|   299k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|   294k|            std::tie(it, prefix_width) = prefix_result;
 6166|   294k|        }
 6167|   294k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|   294k|        std::ptrdiff_t value_width = 0;
 6171|   294k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 294k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|   294k|        else {
 6187|   294k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   294k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   294k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 17.6k, False: 276k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  17.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  17.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  17.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  17.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  17.6k|    }                                                  \
  |  | 3939|   294k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|   276k|                                             specs, value, loc));
 6189|       |
 6190|   276k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 276k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|   276k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|   276k|        std::ptrdiff_t postfix_width = 0;
 6199|   276k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 272k, False: 4.19k]
  ------------------
 6200|   272k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   272k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   272k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   272k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   272k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 272k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   272k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   272k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|   272k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|   272k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|   272k|                                 value_width));
 6204|   272k|            std::tie(it, postfix_width) = postfix_result;
 6205|   272k|        }
 6206|       |
 6207|   276k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   276k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   276k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 276k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|   276k|            specs, prefix_width, value_width, postfix_width));
 6209|   276k|        return it;
 6210|   276k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3721|   734k|    {
 3722|   734k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   734k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   734k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3723|       |
 3724|   734k|        const std::ptrdiff_t sign_len =
 3725|   734k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3725:13): [True: 194k, False: 540k]
  ------------------
 3726|       |
 3727|   734k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   734k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   734k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   734k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   734k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.8k, False: 722k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.8k|    }                                                  \
  |  |  |  | 3939|   734k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   722k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3728|   722k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3729|   734k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4191|   294k|    {
 4192|   294k|        float_reader<CharT> rd{get_options(specs)};
 4193|       |
 4194|   294k|#if !SCN_DISABLE_LOCALE
 4195|   294k|        if (specs.localized) {
  ------------------
  |  Branch (4195:13): [True: 85.5k, False: 208k]
  ------------------
 4196|  85.5k|            return read_impl<Range>(
 4197|  85.5k|                range, rd,
 4198|  85.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  85.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4200|  85.5k|                },
 4201|  85.5k|                value, loc);
 4202|  85.5k|        }
 4203|   208k|#endif
 4204|       |
 4205|   208k|        return read_impl<Range>(
 4206|   208k|            range, rd,
 4207|   208k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   208k|                return r.read_source(SCN_FWD(args)...);
 4209|   208k|            },
 4210|   208k|            value);
 4211|   294k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4227|   411k|    {
 4228|   411k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4229|   411k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   411k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 22.3k, False: 389k]
  |  |  ------------------
  ------------------
 4230|  22.3k|            return unexpected(r.error());
 4231|  22.3k|        }
 4232|       |
 4233|   389k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   389k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   389k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   389k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   389k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 408, False: 388k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    408|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    408|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    408|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    408|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    408|    }                                                  \
  |  |  |  | 3939|   389k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4234|   388k|        return ranges::next(range.begin(), n);
 4235|   389k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  85.5k|        : m_fptr([](storage fn,
  743|  85.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  85.5k|              cvref<T> obj = *get<T>(fn);
  745|  85.5k|              if constexpr (std::is_void_v<R>) {
  746|  85.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  85.5k|              }
  748|  85.5k|              else {
  749|  85.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  85.5k|              }
  751|  85.5k|          }),
  752|  85.5k|          m_storage(std::addressof(f))
  753|  85.5k|    {
  754|  85.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  85.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  85.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  85.5k|              else {
  749|  85.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  85.5k|              }
  751|  85.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  85.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  85.5k|        else if constexpr (std::is_object_v<T>) {
  688|  85.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  85.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4198|  85.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  85.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  85.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4200|  85.5k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  85.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  85.5k|        {
  662|  85.5k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   208k|        : m_fptr([](storage fn,
  743|   208k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   208k|              cvref<T> obj = *get<T>(fn);
  745|   208k|              if constexpr (std::is_void_v<R>) {
  746|   208k|                  obj(static_cast<decltype(args)>(args)...);
  747|   208k|              }
  748|   208k|              else {
  749|   208k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   208k|              }
  751|   208k|          }),
  752|   208k|          m_storage(std::addressof(f))
  753|   208k|    {
  754|   208k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   208k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   208k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   208k|              else {
  749|   208k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   208k|              }
  751|   208k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   208k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   208k|        else if constexpr (std::is_object_v<T>) {
  688|   208k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   208k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4207|   208k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   208k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   208k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4209|   208k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   208k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   208k|        {
  662|   208k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4191|   250k|    {
 4192|   250k|        float_reader<CharT> rd{get_options(specs)};
 4193|       |
 4194|   250k|#if !SCN_DISABLE_LOCALE
 4195|   250k|        if (specs.localized) {
  ------------------
  |  Branch (4195:13): [True: 71.4k, False: 179k]
  ------------------
 4196|  71.4k|            return read_impl<Range>(
 4197|  71.4k|                range, rd,
 4198|  71.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  71.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4200|  71.4k|                },
 4201|  71.4k|                value, loc);
 4202|  71.4k|        }
 4203|   179k|#endif
 4204|       |
 4205|   179k|        return read_impl<Range>(
 4206|   179k|            range, rd,
 4207|   179k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   179k|                return r.read_source(SCN_FWD(args)...);
 4209|   179k|            },
 4210|   179k|            value);
 4211|   250k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4227|   358k|    {
 4228|   358k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4229|   358k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.5k, False: 345k]
  |  |  ------------------
  ------------------
 4230|  12.5k|            return unexpected(r.error());
 4231|  12.5k|        }
 4232|       |
 4233|   345k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   345k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   345k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   345k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.4k, False: 334k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.4k|    }                                                  \
  |  |  |  | 3939|   345k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4234|   334k|        return ranges::next(range.begin(), n);
 4235|   345k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  71.4k|        : m_fptr([](storage fn,
  743|  71.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  71.4k|              cvref<T> obj = *get<T>(fn);
  745|  71.4k|              if constexpr (std::is_void_v<R>) {
  746|  71.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  71.4k|              }
  748|  71.4k|              else {
  749|  71.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  71.4k|              }
  751|  71.4k|          }),
  752|  71.4k|          m_storage(std::addressof(f))
  753|  71.4k|    {
  754|  71.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  71.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  71.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  71.4k|              else {
  749|  71.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  71.4k|              }
  751|  71.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  71.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  71.4k|        else if constexpr (std::is_object_v<T>) {
  688|  71.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  71.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4198|  71.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  71.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  71.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4200|  71.4k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  71.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  71.4k|        {
  662|  71.4k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   179k|        : m_fptr([](storage fn,
  743|   179k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   179k|              cvref<T> obj = *get<T>(fn);
  745|   179k|              if constexpr (std::is_void_v<R>) {
  746|   179k|                  obj(static_cast<decltype(args)>(args)...);
  747|   179k|              }
  748|   179k|              else {
  749|   179k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   179k|              }
  751|   179k|          }),
  752|   179k|          m_storage(std::addressof(f))
  753|   179k|    {
  754|   179k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   179k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   179k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   179k|              else {
  749|   179k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   179k|              }
  751|   179k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   179k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   179k|        else if constexpr (std::is_object_v<T>) {
  688|   179k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   179k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4207|   179k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   179k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4209|   179k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   179k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   179k|        {
  662|   179k|        }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|  1.22M|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|  1.22M|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|  1.22M|        else {
 1055|  1.22M|            return r.begin().contiguous_segment();
 1056|  1.22M|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|  1.22M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  1.06M|{
 2160|  1.06M|    auto it = range.begin();
 2161|  1.98M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.97M, False: 15.1k]
  ------------------
 2162|  1.97M|        const auto val =
 2163|  1.97M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.97M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  1.97M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.95M, False: 12.3k]
  |  |  ------------------
  ------------------
 2165|  1.95M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.95M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.95M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 1.05M, False: 904k]
  ------------------
 2168|  1.05M|                return it;
 2169|  1.05M|            }
 2170|  1.95M|        }
 2171|   916k|        it = val.iterator;
 2172|   916k|    }
 2173|       |
 2174|  15.1k|    return it;
 2175|  1.06M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.97M|{
 1998|  1.97M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  1.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.97M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.97M|    auto it = range.begin();
 2002|  1.97M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.97M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  1.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.3k, False: 1.95M]
  |  |  ------------------
  ------------------
 2005|  12.3k|        ++it;
 2006|  12.3k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  12.3k|        return {it, {}};
 2008|  12.3k|    }
 2009|       |
 2010|  1.95M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.93M, False: 18.7k]
  ------------------
 2011|  1.93M|        ++it;
 2012|  1.93M|        return {it, string_type(1, *range.begin())};
 2013|  1.93M|    }
 2014|       |
 2015|  18.7k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  18.7k|    return {it, string_type{range.begin(), it}};
 2017|  1.95M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  12.3k|{
 1265|  12.3k|    auto it = input.begin();
 1266|   104k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 102k, False: 1.40k]
  ------------------
 1267|   102k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 10.9k, False: 91.7k]
  ------------------
 1268|  10.9k|            break;
 1269|  10.9k|        }
 1270|   102k|    }
 1271|  12.3k|    return it;
 1272|  12.3k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  18.7k|    {
  283|  18.7k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  18.7k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  18.7k|    {
  252|  18.7k|        constexpr iter_difference_t<I> zero{0};
  253|  18.7k|        iter_difference_t<I> counter{0};
  254|       |
  255|  56.7k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 38.9k, False: 17.7k]
  |  Branch (255:30): [True: 37.9k, False: 975]
  ------------------
  256|  37.9k|            ++i;
  257|  37.9k|            ++counter;
  258|  37.9k|        }
  259|       |
  260|  18.7k|        return counter;
  261|  18.7k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|  1.97M|    {
 1989|  1.97M|        return !codepoint.empty();
 1990|  1.97M|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  1.06M|{
 2181|  1.06M|    return read_until_code_point(range, std::not_fn(pred));
 2182|  1.06M|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3054|  1.22M|{
 3055|  1.22M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 1.22M, False: 0]
  ------------------
 3056|  1.22M|        auto it = read_while_classic_space(range);
 3057|  1.22M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|  1.22M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 15.1k, False: 1.20M]
  |  |  ------------------
  ------------------
 3059|  15.1k|            return unexpected(e);
 3060|  15.1k|        }
 3061|       |
 3062|  1.20M|        return it;
 3063|  1.22M|    }
 3064|       |
 3065|      0|    return read_while_classic_space(range);
 3066|  1.22M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  1.22M|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  1.22M|    else {
 2225|  1.22M|        auto it = range.begin();
 2226|       |
 2227|  1.22M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|  1.22M|            auto seg = get_contiguous_beginning(range);
 2229|  1.22M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|  1.22M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 151k, False: 1.06M]
  ------------------
 2231|   151k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|   151k|            }
 2233|  1.06M|            ranges::advance(it, seg.size());
 2234|  1.06M|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.22M|            return detail::is_cp_space(cp);
 2238|  1.22M|        });
 2239|  1.22M|    }
 2240|  1.22M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.06M|        : m_fptr([](storage fn,
  743|  1.06M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.06M|              cvref<T> obj = *get<T>(fn);
  745|  1.06M|              if constexpr (std::is_void_v<R>) {
  746|  1.06M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.06M|              }
  748|  1.06M|              else {
  749|  1.06M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.06M|              }
  751|  1.06M|          }),
  752|  1.06M|          m_storage(std::addressof(f))
  753|  1.06M|    {
  754|  1.06M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.95M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.95M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.95M|              else {
  749|  1.95M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.95M|              }
  751|  1.95M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.95M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.95M|        else if constexpr (std::is_object_v<T>) {
  688|  1.95M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.95M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  1.95M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.95M|            return detail::is_cp_space(cp);
 2238|  1.95M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.06M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.06M|        {
  662|  1.06M|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   585k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   585k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   585k|        auto beg = r.begin();
  991|   585k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 585k, False: 0]
  ------------------
  992|   585k|            return false;
  993|   585k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   585k|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  4.12M|    {
  763|  4.12M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  4.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  4.12M|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|  1.53M|{
 1956|  1.53M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  1.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  1.53M|    else {
 1967|  1.53M|        auto it = range.begin();
 1968|  1.53M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 922k, False: 612k]
  ------------------
 1969|   922k|            return ranges::next(it, count);
 1970|   922k|        }
 1971|       |
 1972|  2.36M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 1.80M, False: 558k]
  ------------------
 1973|  1.80M|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 54.2k, False: 1.75M]
  ------------------
 1974|  54.2k|                return unexpected(eof_error::eof);
 1975|  54.2k|            }
 1976|  1.80M|        }
 1977|       |
 1978|   558k|        return it;
 1979|   612k|    }
 1980|  1.53M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  1.53M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  1.53M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  1.53M|        else {
 1107|  1.53M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 1.53M, False: 0]
  ------------------
 1108|  1.53M|                return static_cast<size_t>(
 1109|  1.53M|                    r.begin().parent()->chars_available() -
 1110|  1.53M|                    r.begin().position());
 1111|  1.53M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  1.53M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  1.53M|}
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.35M|        : m_fptr([](storage fn,
  743|  1.35M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.35M|              cvref<T> obj = *get<T>(fn);
  745|  1.35M|              if constexpr (std::is_void_v<R>) {
  746|  1.35M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.35M|              }
  748|  1.35M|              else {
  749|  1.35M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.35M|              }
  751|  1.35M|          }),
  752|  1.35M|          m_storage(std::addressof(f))
  753|  1.35M|    {
  754|  1.35M|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  2.06M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.06M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.06M|              else {
  749|  2.06M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.06M|              }
  751|  2.06M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  2.06M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.06M|        else if constexpr (std::is_object_v<T>) {
  688|  2.06M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.06M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.35M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.35M|        {
  662|  1.35M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6062|   430k|    {
 6063|   430k|        const bool need_skipped_width =
 6064|   430k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 0, False: 430k]
  |  Branch (6064:33): [True: 0, False: 430k]
  ------------------
 6065|   430k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|   430k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 0, False: 430k]
  ------------------
 6069|   430k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 0, False: 430k]
  ------------------
 6070|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6071|      0|                             need_skipped_width);
 6072|      0|        }
 6073|   430k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 430k, False: 0]
  |  Branch (6073:56): [True: 430k, False: 0]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|   430k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 0, False: 430k]
  ------------------
 6077|      0|                auto max_width_view = take_width(rng, specs.precision);
 6078|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|      0|                                  .transform_error(make_eof_scan_error));
 6080|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|      0|            }
 6082|   857k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   430k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   430k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   430k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.84k, False: 427k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.84k|    }                                                  \
  |  |  |  | 3939|   430k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|   857k|                            make_eof_scan_error));
 6084|       |
 6085|   857k|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 0, False: 427k]
  ------------------
 6086|      0|                return result_type{
 6087|      0|                    it,
 6088|      0|                    calculate_text_width(make_contiguous_buffer(
 6089|      0|                                             ranges::subrange{rng.begin(), it})
 6090|      0|                                             .view())};
 6091|      0|            }
 6092|   427k|            return result_type{it, 0};
 6093|   857k|        }
 6094|       |
 6095|      0|        return result_type{rng.begin(), 0};
 6096|   430k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  1.00M|{
 2075|  1.00M|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  1.00M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  1.00M|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  1.00M|    else {
 2060|  1.00M|        auto first = range.begin();
 2061|  1.54M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 1.54M, False: 3.14k]
  ------------------
 2062|  1.54M|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 1.00M, False: 535k]
  ------------------
 2063|  1.00M|                return first;
 2064|  1.00M|            }
 2065|  1.54M|        }
 2066|  3.14k|        return first;
 2067|  1.00M|    }
 2068|  1.00M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   708k|    {
  108|   708k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   708k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   708k|    {
   94|   708k|        iter_difference_t<I> counter{0};
   95|  1.89M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.18M, False: 708k]
  ------------------
   96|  1.18M|            ++i;
   97|  1.18M|            ++counter;
   98|  1.18M|        }
   99|   708k|        return counter;
  100|   708k|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|   206k|    {
 1879|   206k|        auto stdloc = loc.get<std::locale>();
 1880|   206k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   206k|        grouping = numpunct.grouping();
 1882|   206k|        thousands_sep =
 1883|   206k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 206k]
  ------------------
 1884|   206k|        decimal_point = numpunct.decimal_point();
 1885|   206k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|   206k|{
 1816|   206k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 206k, False: 0]
  ------------------
 1817|   206k|        return std::use_facet<Facet>(stdloc);
 1818|   206k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   206k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|  1.36M|{
 1945|  1.36M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.04k, False: 1.36M]
  |  |  ------------------
  ------------------
 1946|  2.04k|        return unexpected(e);
 1947|  2.04k|    }
 1948|       |
 1949|  1.36M|    return ranges::next(range.begin());
 1950|  1.36M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  2.10M|{
  951|  2.10M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  2.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 5.84k, False: 2.10M]
  |  |  ------------------
  ------------------
  952|  5.84k|        return eof_error::eof;
  953|  5.84k|    }
  954|  2.10M|    return eof_error::good;
  955|  2.10M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  3.11M|{
  945|  3.11M|    return is_range_eof(r.begin(), r.end());
  946|  3.11M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  3.11M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.11M|    {
  938|  3.11M|        return begin == end;
  939|  3.11M|    }
  940|  3.11M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.36M|    {
  296|  1.36M|        ++x;
  297|  1.36M|        return x;
  298|  1.36M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3246|   594k|{
 3247|   594k|    auto r = read_one_of_code_unit(range, "+-");
 3248|   594k|    if (!r) {
  ------------------
  |  Branch (3248:9): [True: 588k, False: 6.10k]
  ------------------
 3249|   588k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3249:13): [True: 588k, False: 79]
  ------------------
 3250|   588k|            return std::pair{range.begin(), sign_type::default_sign};
 3251|   588k|        }
 3252|     79|        return unexpected(eof_error::eof);
 3253|   588k|    }
 3254|       |
 3255|  6.10k|    auto& it = *r;
 3256|  6.10k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3256:9): [True: 5.02k, False: 1.08k]
  ------------------
 3257|  5.02k|        return std::pair{it, sign_type::minus_sign};
 3258|  5.02k|    }
 3259|  1.08k|    return std::pair{it, sign_type::plus_sign};
 3260|  6.10k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2371|   951k|{
 2372|   951k|    auto it = read_code_unit(range);
 2373|   951k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   951k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.11k, False: 949k]
  |  |  ------------------
  ------------------
 2374|  1.11k|        return unexpected(make_eof_parse_error(it.error()));
 2375|  1.11k|    }
 2376|       |
 2377|  1.89M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 1.89M, False: 931k]
  ------------------
 2378|  1.89M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 18.4k, False: 1.88M]
  ------------------
 2379|  18.4k|            return *it;
 2380|  18.4k|        }
 2381|  1.89M|    }
 2382|       |
 2383|   931k|    return unexpected(parse_error::error);
 2384|   949k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2330|  1.53M|{
 2331|  1.53M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  1.53M|    else {
 2344|  1.53M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.53M|            if (ch < 'A' || ch > 'Z') {
 2346|  1.53M|                return ch;
 2347|  1.53M|            }
 2348|  1.53M|            return static_cast<char_type>(ch +
 2349|  1.53M|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.53M|        };
 2351|       |
 2352|  1.53M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  1.53M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.53M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.53M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 54.2k, False: 1.48M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  54.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  54.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  54.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  54.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  54.2k|    }                                                  \
  |  |  |  | 3939|  1.53M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  1.48M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  1.48M|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  1.48M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.47M, False: 731]
  |  |  ------------------
  ------------------
 2357|  1.48M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  1.48M|                    return ascii_tolower(a) ==
 2359|  1.48M|                           static_cast<detail::char_t<Range>>(b);
 2360|  1.48M|                }))) {
 2361|  1.47M|            return unexpected(parse_error::error);
 2362|  1.47M|        }
 2363|       |
 2364|    731|        return it;
 2365|  1.48M|    }
 2366|  1.53M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  1.72M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.72M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 1.35M, False: 369k]
  |  Branch (2345:29): [True: 357k, False: 11.6k]
  ------------------
 2346|  1.71M|                return ch;
 2347|  1.71M|            }
 2348|  11.6k|            return static_cast<char_type>(ch +
 2349|  11.6k|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.72M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2245|   413k|{
 2246|   413k|    auto it = read_code_unit(range);
 2247|   413k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   413k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 925, False: 412k]
  |  |  ------------------
  ------------------
 2248|    925|        return unexpected(make_eof_parse_error(it.error()));
 2249|    925|    }
 2250|       |
 2251|   412k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 410k, False: 2.46k]
  |  |  ------------------
  ------------------
 2252|   412k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   410k|        return unexpected(parse_error::error);
 2254|   410k|    }
 2255|       |
 2256|  2.46k|    return *it;
 2257|   412k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2094|  1.00M|{
 2095|  1.00M|    auto it = read_while_code_unit(range, pred);
 2096|  1.00M|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 581k, False: 427k]
  ------------------
 2097|   581k|        return unexpected(parse_error::error);
 2098|   581k|    }
 2099|   427k|    return it;
 2100|  1.00M|}
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|   410k|    {
 1720|   410k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   410k|                           ranges::common_range<Range>) {
 1737|   410k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   410k|            auto end_seg = range.end().contiguous_segment();
 1739|   410k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   410k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 14.7k, False: 395k]
  |  |  ------------------
  ------------------
 1740|   410k|                             detail::to_address(end_seg.end()))) {
 1741|  14.7k|                auto& str = m_storage.emplace();
 1742|  14.7k|                str.reserve(range.end().position() - range.begin().position());
 1743|  14.7k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  14.7k|                m_view = string_view_type{str};
 1745|  14.7k|                return;
 1746|  14.7k|            }
 1747|       |
 1748|   395k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   395k|                                                            end_seg.data());
 1750|   395k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   410k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  3.63M|    {
 1681|  3.63M|        return m_view;
 1682|  3.63M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  2.32M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6104|   291k|    {
 6105|   291k|        const bool need_skipped_width =
 6106|   291k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6106:13): [True: 0, False: 291k]
  |  Branch (6106:33): [True: 0, False: 291k]
  ------------------
 6107|   291k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6108|       |
 6109|   291k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6109:13): [True: 0, False: 291k]
  ------------------
 6110|   291k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6110:13): [True: 0, False: 291k]
  ------------------
 6111|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6111:17): [True: 0, False: 0]
  ------------------
 6112|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6112:17): [True: 0, False: 0]
  ------------------
 6113|      0|                return result_type{rng.begin(), 0};
 6114|      0|            }
 6115|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6116|      0|                             specs.fill, need_skipped_width);
 6117|      0|        }
 6118|   291k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6118:13): [True: 291k, False: 0]
  ------------------
 6119|   291k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6119:13): [True: 0, False: 291k]
  ------------------
 6120|   291k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6120:15): [True: 0, False: 0]
  |  Branch (6120:35): [True: 0, False: 0]
  ------------------
 6121|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6121:15): [True: 0, False: 0]
  ------------------
 6122|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6122:15): [True: 0, False: 0]
  ------------------
 6123|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                const auto initial_width =
 6125|      0|                    specs.precision - prefix_width - value_width;
 6126|      0|                auto max_width_view = take_width(rng, initial_width);
 6127|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|      0|                                  .transform_error(make_eof_scan_error));
 6129|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6130|      0|            }
 6131|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6132|      0|                            make_eof_scan_error));
 6133|       |
 6134|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                return result_type{
 6136|      0|                    it,
 6137|      0|                    calculate_text_width(make_contiguous_buffer(
 6138|      0|                                             ranges::subrange{rng.begin(), it})
 6139|      0|                                             .view())};
 6140|      0|            }
 6141|      0|            return result_type{it, 0};
 6142|      0|        }
 6143|   291k|        return result_type{rng.begin(), 0};
 6144|   291k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  1.53M|{
 1956|  1.53M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  930|  1.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  1.53M|    if constexpr (ranges::sized_range<Range>) {
 1959|  1.53M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  1.53M|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 54.3k, False: 1.48M]
  ------------------
 1961|  54.3k|            return unexpected(eof_error::eof);
 1962|  54.3k|        }
 1963|       |
 1964|  1.48M|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  1.53M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  1.75M|{
 1998|  1.75M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.75M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.75M|    auto it = range.begin();
 2002|  1.75M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.75M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.75M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  1.75M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.75M, False: 0]
  ------------------
 2011|  1.75M|        ++it;
 2012|  1.75M|        return {it, string_type(1, *range.begin())};
 2013|  1.75M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  1.75M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  3.29M|{
  945|  3.29M|    return is_range_eof(r.begin(), r.end());
  946|  3.29M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  3.29M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.29M|    {
  938|  3.29M|        return begin == end;
  939|  3.29M|    }
  940|  3.29M|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   371k|    {
  190|   371k|        i = std::move(bound);
  191|   371k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  1.75M|    {
 1989|  1.75M|        return !codepoint.empty();
 1990|  1.75M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  1.54M|{
  951|  1.54M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.32k, False: 1.53M]
  |  |  ------------------
  ------------------
  952|  4.32k|        return eof_error::eof;
  953|  4.32k|    }
  954|  1.53M|    return eof_error::good;
  955|  1.54M|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   798k|{
 1945|   798k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   798k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 520, False: 797k]
  |  |  ------------------
  ------------------
 1946|    520|        return unexpected(e);
 1947|    520|    }
 1948|       |
 1949|   797k|    return ranges::next(range.begin());
 1950|   798k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   797k|    {
  296|   797k|        ++x;
  297|   797k|        return x;
  298|   797k|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3246|   586k|{
 3247|   586k|    auto r = read_one_of_code_unit(range, "+-");
 3248|   586k|    if (!r) {
  ------------------
  |  Branch (3248:9): [True: 582k, False: 3.81k]
  ------------------
 3249|   582k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3249:13): [True: 582k, False: 28]
  ------------------
 3250|   582k|            return std::pair{range.begin(), sign_type::default_sign};
 3251|   582k|        }
 3252|     28|        return unexpected(eof_error::eof);
 3253|   582k|    }
 3254|       |
 3255|  3.81k|    auto& it = *r;
 3256|  3.81k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3256:9): [True: 2.88k, False: 922]
  ------------------
 3257|  2.88k|        return std::pair{it, sign_type::minus_sign};
 3258|  2.88k|    }
 3259|    922|    return std::pair{it, sign_type::plus_sign};
 3260|  3.81k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2371|   663k|{
 2372|   663k|    auto it = read_code_unit(range);
 2373|   663k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   663k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 254, False: 663k]
  |  |  ------------------
  ------------------
 2374|    254|        return unexpected(make_eof_parse_error(it.error()));
 2375|    254|    }
 2376|       |
 2377|  1.32M|    for (auto ch : str) {
  ------------------
  |  Branch (2377:18): [True: 1.32M, False: 655k]
  ------------------
 2378|  1.32M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2378:13): [True: 8.06k, False: 1.31M]
  ------------------
 2379|  8.06k|            return *it;
 2380|  8.06k|        }
 2381|  1.32M|    }
 2382|       |
 2383|   655k|    return unexpected(parse_error::error);
 2384|   663k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2330|  1.53M|{
 2331|  1.53M|    using char_type = detail::char_t<Range>;
 2332|       |
 2333|       |    if constexpr (ranges::contiguous_range<Range> &&
 2334|       |                  std::is_same_v<char_type, char>) {
 2335|       |        if (range.size() < str.size()) {
 2336|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2337|       |        }
 2338|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2339|       |            return unexpected(parse_error::error);
 2340|       |        }
 2341|       |        return ranges::next(range.begin(), str.size());
 2342|       |    }
 2343|  1.53M|    else {
 2344|  1.53M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.53M|            if (ch < 'A' || ch > 'Z') {
 2346|  1.53M|                return ch;
 2347|  1.53M|            }
 2348|  1.53M|            return static_cast<char_type>(ch +
 2349|  1.53M|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.53M|        };
 2351|       |
 2352|  1.53M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3940|  1.53M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  1.53M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  1.53M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 54.3k, False: 1.48M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  54.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  54.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  54.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  54.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  54.3k|    }                                                  \
  |  |  |  | 3939|  1.53M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  1.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2353|  1.48M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2354|  1.48M|                        .transform_error(make_eof_parse_error));
 2355|       |
 2356|  1.48M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  865|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.48M, False: 731]
  |  |  ------------------
  ------------------
 2357|  1.48M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2358|  1.48M|                    return ascii_tolower(a) ==
 2359|  1.48M|                           static_cast<detail::char_t<Range>>(b);
 2360|  1.48M|                }))) {
 2361|  1.48M|            return unexpected(parse_error::error);
 2362|  1.48M|        }
 2363|       |
 2364|    731|        return it;
 2365|  1.48M|    }
 2366|  1.53M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2344|  1.72M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2345|  1.72M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2345:17): [True: 1.35M, False: 370k]
  |  Branch (2345:29): [True: 358k, False: 11.7k]
  ------------------
 2346|  1.71M|                return ch;
 2347|  1.71M|            }
 2348|  11.7k|            return static_cast<char_type>(ch +
 2349|  11.7k|                                          static_cast<char_type>('a' - 'A'));
 2350|  1.72M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2245|   134k|{
 2246|   134k|    auto it = read_code_unit(range);
 2247|   134k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 266, False: 134k]
  |  |  ------------------
  ------------------
 2248|    266|        return unexpected(make_eof_parse_error(it.error()));
 2249|    266|    }
 2250|       |
 2251|   134k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  865|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 133k, False: 984]
  |  |  ------------------
  ------------------
 2252|   134k|                     static_cast<detail::char_t<Range>>(ch))) {
 2253|   133k|        return unexpected(parse_error::error);
 2254|   133k|    }
 2255|       |
 2256|    984|    return *it;
 2257|   134k|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|   349k|{
 2075|   349k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|   349k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|   349k|{
 2056|   349k|    if constexpr (ranges::common_range<Range>) {
 2057|   349k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|   349k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3054|   585k|{
 3055|   585k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 585k, False: 0]
  ------------------
 3056|   585k|        auto it = read_while_classic_space(range);
 3057|   585k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|   585k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   585k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.37k, False: 582k]
  |  |  ------------------
  ------------------
 3059|  3.37k|            return unexpected(e);
 3060|  3.37k|        }
 3061|       |
 3062|   582k|        return it;
 3063|   585k|    }
 3064|       |
 3065|      0|    return read_while_classic_space(range);
 3066|   585k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   585k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   585k|    else {
 2225|   585k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   585k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   585k|            return detail::is_cp_space(cp);
 2238|   585k|        });
 2239|   585k|    }
 2240|   585k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|   585k|{
 2181|   585k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   585k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|   989k|{
 2160|   989k|    auto it = range.begin();
 2161|  2.00M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.75M, False: 252k]
  ------------------
 2162|  1.75M|        const auto val =
 2163|  1.75M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.75M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  1.75M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.75M, False: 0]
  |  |  ------------------
  ------------------
 2165|  1.75M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.75M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.75M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 736k, False: 1.01M]
  ------------------
 2168|   736k|                return it;
 2169|   736k|            }
 2170|  1.75M|        }
 2171|  1.01M|        it = val.iterator;
 2172|  1.01M|    }
 2173|       |
 2174|   252k|    return it;
 2175|   989k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   585k|        : m_fptr([](storage fn,
  743|   585k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   585k|              cvref<T> obj = *get<T>(fn);
  745|   585k|              if constexpr (std::is_void_v<R>) {
  746|   585k|                  obj(static_cast<decltype(args)>(args)...);
  747|   585k|              }
  748|   585k|              else {
  749|   585k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   585k|              }
  751|   585k|          }),
  752|   585k|          m_storage(std::addressof(f))
  753|   585k|    {
  754|   585k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  1.00M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.00M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.00M|              else {
  749|  1.00M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.00M|              }
  751|  1.00M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  1.00M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.00M|        else if constexpr (std::is_object_v<T>) {
  688|  1.00M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.00M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|  1.00M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.00M|            return detail::is_cp_space(cp);
 2238|  1.00M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   585k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   585k|        {
  662|   585k|        }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.32M|    {
  304|  1.32M|        ranges::advance(x, n);
  305|  1.32M|        return x;
  306|  1.32M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.32M|    {
  268|  1.32M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.32M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.32M|    {
  181|  4.25M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 2.92M, False: 1.32M]
  ------------------
  182|  2.92M|            ++i;
  183|  2.92M|        }
  184|  1.32M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6214|   134k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|   134k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|   134k|            auto rd = make_reader<T, char_type>();
 6225|   134k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   134k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 134k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|   134k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 134k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|   134k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|   134k|                return impl(rd, range, value);
 6230|   134k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|   134k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3144|   860k|    {
 3145|   860k|        reader_error_handler eh{};
 3146|   860k|        get_derived().check_specs_impl(specs, eh);
 3147|   860k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   860k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 860k]
  |  |  ------------------
  ------------------
 3148|      0|            return detail::unexpected_scan_error(
 3149|      0|                scan_error::invalid_format_string, eh.m_msg);
 3150|      0|        }
 3151|   860k|        return {};
 3152|   860k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3156|   860k|    {
 3157|   860k|        return static_cast<Derived&>(*this);
 3158|   860k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4166|   860k|    {
 4167|   860k|        detail::check_float_type_specs(specs, eh);
 4168|   860k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|   134k|    {
 6150|   134k|        const bool need_skipped_width =
 6151|   134k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 134k]
  |  Branch (6151:33): [True: 0, False: 134k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|   134k|        auto it = rng.begin();
 6155|   134k|        std::ptrdiff_t prefix_width = 0;
 6156|   134k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 134k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|   134k|        else {
 6164|   134k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 892, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    892|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    892|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    892|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    892|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    892|    }                                                  \
  |  |  |  | 3939|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|   133k|            std::tie(it, prefix_width) = prefix_result;
 6166|   133k|        }
 6167|   133k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|   133k|        std::ptrdiff_t value_width = 0;
 6171|   133k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 133k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|   133k|        else {
 6187|   133k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 44.8k, False: 88.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  44.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  44.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  44.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  44.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  44.8k|    }                                                  \
  |  | 3939|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  88.6k|                                             specs, value, loc));
 6189|       |
 6190|  88.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 88.6k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  88.6k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  88.6k|        std::ptrdiff_t postfix_width = 0;
 6199|  88.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 88.2k, False: 370]
  ------------------
 6200|  88.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  88.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  88.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  88.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  88.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 88.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  88.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  88.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  88.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  88.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  88.2k|                                 value_width));
 6204|  88.2k|            std::tie(it, postfix_width) = postfix_result;
 6205|  88.2k|        }
 6206|       |
 6207|  88.6k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  88.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  88.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 88.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  88.6k|            specs, prefix_width, value_width, postfix_width));
 6209|  88.6k|        return it;
 6210|  88.6k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3139|  1.75M|    {
 3140|  1.75M|        return true;
 3141|  1.75M|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4238|   854k|    {
 4239|   854k|        unsigned options{};
 4240|   854k|        if (specs.localized) {
  ------------------
  |  Branch (4240:13): [True: 206k, False: 648k]
  ------------------
 4241|   206k|            options |= float_reader_base::allow_thsep;
 4242|   206k|        }
 4243|       |
 4244|   854k|        SCN_GCC_COMPAT_PUSH
 4245|   854k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4246|       |
 4247|   854k|        switch (specs.type) {
 4248|   168k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4248:13): [True: 168k, False: 686k]
  ------------------
 4249|   168k|                return options | float_reader_base::allow_fixed;
 4250|       |
 4251|  55.8k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4251:13): [True: 55.8k, False: 798k]
  ------------------
 4252|  55.8k|                return options | float_reader_base::allow_scientific;
 4253|       |
 4254|   226k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4254:13): [True: 226k, False: 628k]
  ------------------
 4255|   226k|                return options | float_reader_base::allow_hex;
 4256|       |
 4257|   198k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4257:13): [True: 198k, False: 656k]
  ------------------
 4258|   198k|                return options | float_reader_base::allow_scientific |
 4259|   198k|                       float_reader_base::allow_fixed;
 4260|       |
 4261|   206k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4261:13): [True: 206k, False: 648k]
  ------------------
 4262|   206k|                return options | float_reader_base::allow_scientific |
 4263|   206k|                       float_reader_base::allow_fixed |
 4264|   206k|                       float_reader_base::allow_hex;
 4265|       |
 4266|      0|            default:
  ------------------
  |  Branch (4266:13): [True: 0, False: 854k]
  ------------------
 4267|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4268|   854k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4269|   854k|        }
 4270|       |
 4271|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4272|   854k|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3690|   854k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1869|  1.16M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1630|  2.32M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3721|   273k|    {
 3722|   273k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   273k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   273k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3723|       |
 3724|   273k|        const std::ptrdiff_t sign_len =
 3725|   273k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3725:13): [True: 1.56k, False: 272k]
  ------------------
 3726|       |
 3727|   273k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   273k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   273k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   273k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 33.5k, False: 240k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  33.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  33.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  33.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  33.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  33.5k|    }                                                  \
  |  |  |  | 3939|   273k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3728|   240k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3729|   273k|    }
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 4078|   912k|    {
 4079|   912k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4079:13): [True: 912k, False: 0]
  ------------------
 4080|   912k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4080:13): [True: 912k, False: 0]
  ------------------
 4081|   912k|            return;
 4082|   912k|        }
 4083|       |
 4084|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4085|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4085:13): [True: 0, False: 0]
  ------------------
 4086|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4086:27): [True: 0, False: 0]
  ------------------
 4087|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4087:21): [True: 0, False: 0]
  ------------------
 4088|      0|                    ch = CharT{'.'};
 4089|      0|                }
 4090|      0|            }
 4091|      0|        }
 4092|       |
 4093|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4093:13): [True: 0, False: 0]
  ------------------
 4094|      0|            return;
 4095|      0|        }
 4096|       |
 4097|      0|        auto first =
 4098|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4099|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4099:13): [True: 0, False: 0]
  ------------------
 4100|      0|            return;
 4101|      0|        }
 4102|       |
 4103|      0|        m_thsep_indices.push_back(
 4104|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4105|       |
 4106|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4106:31): [True: 0, False: 0]
  ------------------
 4107|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4107:17): [True: 0, False: 0]
  ------------------
 4108|      0|                *first++ = std::move(*it);
 4109|      0|            }
 4110|      0|            else {
 4111|      0|                m_thsep_indices.push_back(
 4112|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4113|      0|            }
 4114|      0|        }
 4115|       |
 4116|      0|        str.erase(first, str.end());
 4117|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|   997k|    {
 1686|   997k|        return m_storage.has_value();
 1687|   997k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|   584k|    {
 1691|   584k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|   584k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   584k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|   584k|        return *m_storage;
 1693|   584k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4191|   133k|    {
 4192|   133k|        float_reader<CharT> rd{get_options(specs)};
 4193|       |
 4194|   133k|#if !SCN_DISABLE_LOCALE
 4195|   133k|        if (specs.localized) {
  ------------------
  |  Branch (4195:13): [True: 29.9k, False: 103k]
  ------------------
 4196|  29.9k|            return read_impl<Range>(
 4197|  29.9k|                range, rd,
 4198|  29.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  29.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4200|  29.9k|                },
 4201|  29.9k|                value, loc);
 4202|  29.9k|        }
 4203|   103k|#endif
 4204|       |
 4205|   103k|        return read_impl<Range>(
 4206|   103k|            range, rd,
 4207|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   103k|                return r.read_source(SCN_FWD(args)...);
 4209|   103k|            },
 4210|   103k|            value);
 4211|   133k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4227|   178k|    {
 4228|   178k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4229|   178k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 56.4k, False: 121k]
  |  |  ------------------
  ------------------
 4230|  56.4k|            return unexpected(r.error());
 4231|  56.4k|        }
 4232|       |
 4233|   121k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   121k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   121k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   121k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.79k, False: 120k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.79k|    }                                                  \
  |  |  |  | 3939|   121k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4234|   120k|        return ranges::next(range.begin(), n);
 4235|   121k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   582k|    {
  763|   582k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   582k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   582k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  29.9k|        : m_fptr([](storage fn,
  743|  29.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.9k|              cvref<T> obj = *get<T>(fn);
  745|  29.9k|              if constexpr (std::is_void_v<R>) {
  746|  29.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  29.9k|              }
  748|  29.9k|              else {
  749|  29.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.9k|              }
  751|  29.9k|          }),
  752|  29.9k|          m_storage(std::addressof(f))
  753|  29.9k|    {
  754|  29.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  29.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  29.9k|              else {
  749|  29.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.9k|              }
  751|  29.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  29.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  29.9k|        else if constexpr (std::is_object_v<T>) {
  688|  29.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  29.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4198|  29.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  29.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4200|  29.9k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3709|   103k|    {
 3710|   103k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3711|   103k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|   103k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 3712|      0|            m_locale_options.thousands_sep = CharT{0};
 3713|      0|        }
 3714|       |
 3715|   103k|        return read_source_impl(range);
 3716|   103k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3735|   582k|    {
 3736|   582k|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|   582k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   582k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   582k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   582k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 582k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   582k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   582k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3737|   582k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3738|   582k|        auto it = sign_result.first;
 3739|   582k|        m_sign = sign_result.second;
 3740|       |
 3741|   582k|        auto digits_begin = it;
 3742|   582k|        auto r = ranges::subrange{it, range.end()};
 3743|       |        if constexpr (ranges::contiguous_range<Range> &&
 3744|       |                      ranges::sized_range<Range>) {
 3745|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3746|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3747|       |                SCN_TRY_ASSIGN(
 3748|       |                    it,
 3749|       |                    do_read_source_impl(
 3750|       |                        r,
 3751|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3752|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3753|       |            }
 3754|       |            else {
 3755|       |                auto cb = [&](const auto& rr)
 3756|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3757|       |                    auto res = read_all(rr);
 3758|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3759|       |                        return detail::unexpected_scan_error(
 3760|       |                            scan_error::invalid_scanned_value,
 3761|       |                            "Invalid float value");
 3762|       |                    }
 3763|       |                    return res;
 3764|       |                };
 3765|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3766|       |            }
 3767|       |        }
 3768|   582k|        else {
 3769|   582k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|   582k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   582k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   582k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 171k, False: 410k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|   171k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|   171k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|   171k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|   171k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|   171k|    }                                                  \
  |  | 3939|   582k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   582k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3770|   410k|                it,
 3771|   410k|                do_read_source_impl(
 3772|   410k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3773|   410k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3774|   410k|        }
 3775|       |
 3776|   582k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   582k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   582k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3777|       |
 3778|   410k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3778:13): [True: 410k, False: 0]
  |  Branch (3778:48): [True: 410k, False: 0]
  ------------------
 3779|   410k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3779:13): [True: 410k, False: 0]
  ------------------
 3780|   410k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3780:13): [True: 410k, False: 0]
  ------------------
 3781|   410k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3782|   410k|        }
 3783|       |
 3784|   410k|        handle_separators();
 3785|       |
 3786|   410k|        return it;
 3787|   582k|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4021|   582k|    {
 4022|   582k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4023|   582k|        const bool allowed_nonhex =
 4024|   582k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4025|   582k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4026|       |
 4027|   582k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4027:39): [True: 582k, False: 0]
  |  Branch (4027:45): [True: 0, False: 582k]
  ------------------
 4028|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4029|      0|                scan_error::invalid_scanned_value,
 4030|      0|                "Invalid infinite floating-point value"));
 4031|      0|        }
 4032|   582k|        else if (r) {
  ------------------
  |  Branch (4032:18): [True: 0, False: 582k]
  ------------------
 4033|      0|            return *r;
 4034|      0|        }
 4035|       |
 4036|   582k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4036:39): [True: 582k, False: 0]
  |  Branch (4036:45): [True: 0, False: 582k]
  ------------------
 4037|      0|            return unexpected(r.error());
 4038|      0|        }
 4039|   582k|        else if (r) {
  ------------------
  |  Branch (4039:18): [True: 0, False: 582k]
  ------------------
 4040|      0|            return *r;
 4041|      0|        }
 4042|       |
 4043|   582k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4043:13): [True: 370k, False: 211k]
  |  Branch (4043:28): [True: 112k, False: 257k]
  ------------------
 4044|       |            // only hex allowed:
 4045|       |            // prefix "0x" allowed, not required
 4046|   112k|            auto it = range.begin();
 4047|       |
 4048|   112k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4048:22): [True: 216, False: 112k]
  ------------------
 4049|    216|                m_kind = float_kind::hex_with_prefix;
 4050|    216|                it = *r;
 4051|    216|            }
 4052|   112k|            else {
 4053|   112k|                m_kind = float_kind::hex_without_prefix;
 4054|   112k|            }
 4055|       |
 4056|   112k|            return read_hex(ranges::subrange{it, range.end()});
 4057|   112k|        }
 4058|   469k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4058:13): [True: 211k, False: 257k]
  |  Branch (4058:29): [True: 211k, False: 0]
  ------------------
 4059|       |            // only nonhex allowed:
 4060|       |            // no prefix allowed
 4061|   211k|            m_kind = float_kind::generic;
 4062|   211k|            return read_regular_float(range);
 4063|   211k|        }
 4064|       |        // both hex and nonhex allowed:
 4065|       |        // check for "0x" prefix -> hex,
 4066|       |        // regular otherwise
 4067|       |
 4068|   257k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|   257k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 515, False: 257k]
  |  |  ------------------
  ------------------
 4069|    515|            m_kind = float_kind::hex_with_prefix;
 4070|    515|            return read_hex(ranges::subrange{*r, range.end()});
 4071|    515|        }
 4072|       |
 4073|   257k|        m_kind = float_kind::generic;
 4074|   257k|        return read_regular(range);
 4075|   257k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3829|   582k|    {
 3830|   582k|        auto it = range.begin();
 3831|   582k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3831:73): [True: 582k, False: 0]
  ------------------
 3832|   582k|            return unexpected(r.error());
 3833|   582k|        }
 3834|      0|        else {
 3835|      0|            it = *r;
 3836|      0|        }
 3837|       |
 3838|      0|        if (auto r = read_matching_string_classic_nocase(
 3839|      0|                ranges::subrange{it, range.end()}, "inity");
 3840|      0|            !r) {
  ------------------
  |  Branch (3840:13): [True: 0, False: 0]
  ------------------
 3841|      0|            m_kind = float_kind::inf_short;
 3842|      0|            return it;
 3843|      0|        }
 3844|      0|        else {
 3845|      0|            m_kind = float_kind::inf_long;
 3846|      0|            return *r;
 3847|      0|        }
 3848|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3852|   582k|    {
 3853|   582k|        auto it = range.begin();
 3854|   582k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3854:73): [True: 582k, False: 0]
  ------------------
 3855|   582k|            return r.transform_error(map_parse_error_to_scan_error(
 3856|   582k|                scan_error::invalid_scanned_value,
 3857|   582k|                "Invalid floating-point NaN value"));
 3858|   582k|        }
 3859|      0|        else {
 3860|      0|            it = *r;
 3861|      0|        }
 3862|       |
 3863|      0|        if (auto r =
 3864|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3865|      0|            !r) {
  ------------------
  |  Branch (3865:13): [True: 0, False: 0]
  ------------------
 3866|      0|            m_kind = float_kind::nan_simple;
 3867|      0|            return it;
 3868|      0|        }
 3869|      0|        else {
 3870|      0|            it = *r;
 3871|      0|        }
 3872|       |
 3873|      0|        auto payload_beg_it = it;
 3874|      0|        it = read_while_code_unit(
 3875|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3876|      0|                return is_ascii_char(ch) &&
 3877|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3878|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3879|      0|            });
 3880|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3881|       |
 3882|      0|        m_kind = float_kind::nan_with_payload;
 3883|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3883:18): [True: 0, False: 0]
  ------------------
 3884|      0|                                             ')')) {
 3885|      0|            return *r;
 3886|      0|        }
 3887|      0|        return detail::unexpected_scan_error(
 3888|      0|            scan_error::invalid_scanned_value,
 3889|      0|            "Invalid floating-point NaN payload");
 3890|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3822|   370k|    {
 3823|   370k|        return read_matching_string_classic_nocase(range, "0x");
 3824|   370k|    }
_ZN3scn2v44impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3923|   113k|    {
 3924|   113k|        auto it = range.begin();
 3925|       |
 3926|   113k|        std::ptrdiff_t digits_count = 0;
 3927|   113k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3928|   113k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 26.6k, False: 86.8k]
  |  |  ------------------
  ------------------
 3929|  26.6k|            return r.transform_error(map_parse_error_to_scan_error(
 3930|  26.6k|                scan_error::invalid_scanned_value,
 3931|  26.6k|                "Invalid hexadecimal floating-point value"));
 3932|  26.6k|        }
 3933|  86.8k|        else {
 3934|  86.8k|            digits_count += ranges::distance(it, *r);
 3935|  86.8k|            it = *r;
 3936|  86.8k|        }
 3937|       |
 3938|  86.8k|        m_integral_part_length = digits_count;
 3939|  86.8k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3939:18): [True: 446, False: 86.4k]
  ------------------
 3940|  86.8k|                                             m_locale_options.decimal_point)) {
 3941|    446|            it = *r;
 3942|    446|        }
 3943|       |
 3944|  86.8k|        if (auto r =
  ------------------
  |  Branch (3944:18): [True: 360, False: 86.5k]
  ------------------
 3945|  86.8k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3946|    360|            digits_count += ranges::distance(it, *r);
 3947|    360|            it = *r;
 3948|    360|        }
 3949|       |
 3950|  86.8k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|  86.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 86.8k]
  |  |  ------------------
  ------------------
 3951|      0|            return detail::unexpected_scan_error(
 3952|      0|                scan_error::invalid_scanned_value,
 3953|      0|                "No significand digits in hexfloat");
 3954|      0|        }
 3955|       |
 3956|  86.8k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3957|       |
 3958|  86.8k|        return it;
 3959|  86.8k|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3807|   200k|    {
 3808|   200k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 200k]
  |  |  |  Branch (865:45): [True: 0, False: 200k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3809|   200k|                         thsep_allowed)) {
 3810|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3811|      0|                return char_to_int(ch) < 16 ||
 3812|      0|                       ch == m_locale_options.thousands_sep;
 3813|      0|            });
 3814|      0|        }
 3815|       |
 3816|   200k|        return read_while1_code_unit(
 3817|   200k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3818|   200k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   200k|        : m_fptr([](storage fn,
  743|   200k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   200k|              cvref<T> obj = *get<T>(fn);
  745|   200k|              if constexpr (std::is_void_v<R>) {
  746|   200k|                  obj(static_cast<decltype(args)>(args)...);
  747|   200k|              }
  748|   200k|              else {
  749|   200k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   200k|              }
  751|   200k|          }),
  752|   200k|          m_storage(std::addressof(f))
  753|   200k|    {
  754|   200k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|   312k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   312k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   312k|              else {
  749|   312k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   312k|              }
  751|   312k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   312k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   312k|        else if constexpr (std::is_object_v<T>) {
  688|   312k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   312k|    }
_ZZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3817|   312k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   200k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   200k|        {
  662|   200k|        }
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3895|   356k|    {
 3896|   356k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3896:18): [True: 12.3k, False: 344k]
  ------------------
 3897|  12.3k|            auto beg_exp_it = range.begin();
 3898|  12.3k|            auto it = *r;
 3899|       |
 3900|  12.3k|            if (auto r_sign =
  ------------------
  |  Branch (3900:22): [True: 12.3k, False: 79]
  ------------------
 3901|  12.3k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3902|  12.3k|                it = r_sign->first;
 3903|  12.3k|            }
 3904|       |
 3905|  12.3k|            if (auto r_exp = read_while1_code_unit(
 3906|  12.3k|                    ranges::subrange{it, range.end()},
 3907|  12.3k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3908|  12.3k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.15k, False: 11.2k]
  |  |  ------------------
  ------------------
 3909|  1.15k|                it = beg_exp_it;
 3910|  1.15k|            }
 3911|  11.2k|            else {
 3912|  11.2k|                it = *r_exp;
 3913|  11.2k|            }
 3914|       |
 3915|  12.3k|            return it;
 3916|  12.3k|        }
 3917|   344k|        return range.begin();
 3918|   356k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  12.3k|        : m_fptr([](storage fn,
  743|  12.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.3k|              cvref<T> obj = *get<T>(fn);
  745|  12.3k|              if constexpr (std::is_void_v<R>) {
  746|  12.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.3k|              }
  748|  12.3k|              else {
  749|  12.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.3k|              }
  751|  12.3k|          }),
  752|  12.3k|          m_storage(std::addressof(f))
  753|  12.3k|    {
  754|  12.3k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  41.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  41.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  41.5k|              else {
  749|  41.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  41.5k|              }
  751|  41.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  41.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  41.5k|        else if constexpr (std::is_object_v<T>) {
  688|  41.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  41.5k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3907|  41.5k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  12.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  12.3k|        {
  662|  12.3k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3964|   468k|    {
 3965|   468k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3966|   468k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3966:35): [True: 384k, False: 84.1k]
  |  Branch (3966:50): [True: 27.9k, False: 356k]
  ------------------
 3967|       |
 3968|   468k|        auto it = ranges::begin(range);
 3969|   468k|        std::ptrdiff_t digits_count = 0;
 3970|       |
 3971|   468k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3972|   468k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   468k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 141k, False: 326k]
  |  |  ------------------
  ------------------
 3973|   141k|            return r.transform_error(
 3974|   141k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3975|   141k|                                              "Invalid floating-point value"));
 3976|   141k|        }
 3977|   326k|        else {
 3978|   326k|            digits_count += ranges::distance(it, *r);
 3979|   326k|            it = *r;
 3980|   326k|        }
 3981|       |
 3982|   326k|        m_integral_part_length = digits_count;
 3983|   326k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3983:18): [True: 2.01k, False: 324k]
  ------------------
 3984|   326k|                                             m_locale_options.decimal_point)) {
 3985|  2.01k|            it = *r;
 3986|  2.01k|        }
 3987|       |
 3988|   326k|        if (auto r =
  ------------------
  |  Branch (3988:18): [True: 1.62k, False: 325k]
  ------------------
 3989|   326k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3990|  1.62k|            digits_count += ranges::distance(it, *r);
 3991|  1.62k|            it = *r;
 3992|  1.62k|        }
 3993|       |
 3994|   326k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 326k]
  |  |  ------------------
  ------------------
 3995|      0|            return detail::unexpected_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "No significand digits in float");
 3998|      0|        }
 3999|       |
 4000|   326k|        auto beg_exp_it = it;
 4001|   326k|        if (allowed_exp) {
  ------------------
  |  Branch (4001:13): [True: 269k, False: 57.1k]
  ------------------
 4002|   269k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4003|   269k|        }
 4004|   326k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4004:13): [True: 4.31k, False: 322k]
  |  Branch (4004:29): [True: 3.41k, False: 900]
  ------------------
 4005|  3.41k|            return detail::unexpected_scan_error(
 4006|  3.41k|                scan_error::invalid_scanned_value,
 4007|  3.41k|                "No exponent given to scientific float");
 4008|  3.41k|        }
 4009|       |
 4010|   323k|        m_kind =
 4011|   323k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4011:13): [True: 312k, False: 11.1k]
  ------------------
 4012|       |
 4013|   323k|        return it;
 4014|   326k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3792|   795k|    {
 3793|   795k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   795k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 795k]
  |  |  |  Branch (865:45): [True: 0, False: 795k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3794|   795k|                         thsep_allowed)) {
 3795|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3796|      0|                return char_to_int(ch) < 10 ||
 3797|      0|                       ch == m_locale_options.thousands_sep;
 3798|      0|            });
 3799|      0|        }
 3800|       |
 3801|   795k|        return read_while1_code_unit(
 3802|   795k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3803|   795k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   795k|        : m_fptr([](storage fn,
  743|   795k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   795k|              cvref<T> obj = *get<T>(fn);
  745|   795k|              if constexpr (std::is_void_v<R>) {
  746|   795k|                  obj(static_cast<decltype(args)>(args)...);
  747|   795k|              }
  748|   795k|              else {
  749|   795k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   795k|              }
  751|   795k|          }),
  752|   795k|          m_storage(std::addressof(f))
  753|   795k|    {
  754|   795k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.18M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.18M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.18M|              else {
  749|  1.18M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.18M|              }
  751|  1.18M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  1.18M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.18M|        else if constexpr (std::is_object_v<T>) {
  688|  1.18M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.18M|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3802|  1.18M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   795k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   795k|        {
  662|   795k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1675|   410k|    {
 1676|   410k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   410k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   410k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  29.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  29.9k|        {
  662|  29.9k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   103k|        : m_fptr([](storage fn,
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
  752|   103k|          m_storage(std::addressof(f))
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   103k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   103k|        else if constexpr (std::is_object_v<T>) {
  688|   103k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   103k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4207|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   103k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4209|   103k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3695|   478k|    {
 3696|   478k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|   478k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 478k]
  |  |  ------------------
  ------------------
 3697|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3698|      0|                classic_with_thsep_tag{}};
 3699|      0|        }
 3700|       |
 3701|   478k|        return read_source_impl(range);
 3702|   478k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   103k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   103k|        {
  662|   103k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4191|   133k|    {
 4192|   133k|        float_reader<CharT> rd{get_options(specs)};
 4193|       |
 4194|   133k|#if !SCN_DISABLE_LOCALE
 4195|   133k|        if (specs.localized) {
  ------------------
  |  Branch (4195:13): [True: 29.9k, False: 103k]
  ------------------
 4196|  29.9k|            return read_impl<Range>(
 4197|  29.9k|                range, rd,
 4198|  29.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  29.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4200|  29.9k|                },
 4201|  29.9k|                value, loc);
 4202|  29.9k|        }
 4203|   103k|#endif
 4204|       |
 4205|   103k|        return read_impl<Range>(
 4206|   103k|            range, rd,
 4207|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   103k|                return r.read_source(SCN_FWD(args)...);
 4209|   103k|            },
 4210|   103k|            value);
 4211|   133k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4227|   178k|    {
 4228|   178k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4229|   178k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 26.5k, False: 151k]
  |  |  ------------------
  ------------------
 4230|  26.5k|            return unexpected(r.error());
 4231|  26.5k|        }
 4232|       |
 4233|   151k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   151k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   151k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   151k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 31.7k, False: 120k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  31.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  31.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  31.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  31.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  31.7k|    }                                                  \
  |  |  |  | 3939|   151k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4234|   120k|        return ranges::next(range.begin(), n);
 4235|   151k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   582k|    {
  763|   582k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|   582k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   582k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  29.9k|        : m_fptr([](storage fn,
  743|  29.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.9k|              cvref<T> obj = *get<T>(fn);
  745|  29.9k|              if constexpr (std::is_void_v<R>) {
  746|  29.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  29.9k|              }
  748|  29.9k|              else {
  749|  29.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.9k|              }
  751|  29.9k|          }),
  752|  29.9k|          m_storage(std::addressof(f))
  753|  29.9k|    {
  754|  29.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  29.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  29.9k|              else {
  749|  29.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.9k|              }
  751|  29.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  29.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  29.9k|        else if constexpr (std::is_object_v<T>) {
  688|  29.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  29.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4198|  29.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  29.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4200|  29.9k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3709|   103k|    {
 3710|   103k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3711|   103k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  864|   103k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 3712|      0|            m_locale_options.thousands_sep = CharT{0};
 3713|      0|        }
 3714|       |
 3715|   103k|        return read_source_impl(range);
 3716|   103k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3735|   582k|    {
 3736|   582k|        SCN_TRY(sign_result,
  ------------------
  |  | 3940|   582k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   582k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   582k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   582k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 582k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   582k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   582k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3737|   582k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3738|   582k|        auto it = sign_result.first;
 3739|   582k|        m_sign = sign_result.second;
 3740|       |
 3741|   582k|        auto digits_begin = it;
 3742|   582k|        auto r = ranges::subrange{it, range.end()};
 3743|       |        if constexpr (ranges::contiguous_range<Range> &&
 3744|   582k|                      ranges::sized_range<Range>) {
 3745|   582k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  865|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 582k]
  |  |  |  Branch (865:45): [True: 0, False: 582k]
  |  |  |  Branch (865:45): [True: 0, False: 582k]
  |  |  ------------------
  ------------------
 3746|   582k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3747|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|      0|    }                                                  \
  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3748|      0|                    it,
 3749|      0|                    do_read_source_impl(
 3750|      0|                        r,
 3751|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3752|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3753|      0|            }
 3754|   582k|            else {
 3755|   582k|                auto cb = [&](const auto& rr)
 3756|   582k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3757|   582k|                    auto res = read_all(rr);
 3758|   582k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3759|   582k|                        return detail::unexpected_scan_error(
 3760|   582k|                            scan_error::invalid_scanned_value,
 3761|   582k|                            "Invalid float value");
 3762|   582k|                    }
 3763|   582k|                    return res;
 3764|   582k|                };
 3765|   582k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3935|   582k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   582k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   582k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 80.2k, False: 502k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  80.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  80.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  80.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  80.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  80.2k|    }                                                  \
  |  | 3939|   582k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   582k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3766|   502k|            }
 3767|       |        }
 3768|       |        else {
 3769|       |            SCN_TRY_ASSIGN(
 3770|       |                it,
 3771|       |                do_read_source_impl(
 3772|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3773|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3774|       |        }
 3775|       |
 3776|   582k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   582k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   582k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3777|       |
 3778|   502k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3778:13): [True: 502k, False: 0]
  |  Branch (3778:48): [True: 502k, False: 0]
  ------------------
 3779|   502k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3779:13): [True: 502k, False: 0]
  ------------------
 3780|   502k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3780:13): [True: 502k, False: 0]
  ------------------
 3781|   502k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3782|   502k|        }
 3783|       |
 3784|   502k|        handle_separators();
 3785|       |
 3786|   502k|        return it;
 3787|   582k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3829|   582k|    {
 3830|   582k|        auto it = range.begin();
 3831|   582k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3831:73): [True: 582k, False: 0]
  ------------------
 3832|   582k|            return unexpected(r.error());
 3833|   582k|        }
 3834|      0|        else {
 3835|      0|            it = *r;
 3836|      0|        }
 3837|       |
 3838|      0|        if (auto r = read_matching_string_classic_nocase(
 3839|      0|                ranges::subrange{it, range.end()}, "inity");
 3840|      0|            !r) {
  ------------------
  |  Branch (3840:13): [True: 0, False: 0]
  ------------------
 3841|      0|            m_kind = float_kind::inf_short;
 3842|      0|            return it;
 3843|      0|        }
 3844|      0|        else {
 3845|      0|            m_kind = float_kind::inf_long;
 3846|      0|            return *r;
 3847|      0|        }
 3848|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3852|   582k|    {
 3853|   582k|        auto it = range.begin();
 3854|   582k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3854:73): [True: 582k, False: 0]
  ------------------
 3855|   582k|            return r.transform_error(map_parse_error_to_scan_error(
 3856|   582k|                scan_error::invalid_scanned_value,
 3857|   582k|                "Invalid floating-point NaN value"));
 3858|   582k|        }
 3859|      0|        else {
 3860|      0|            it = *r;
 3861|      0|        }
 3862|       |
 3863|      0|        if (auto r =
 3864|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3865|      0|            !r) {
  ------------------
  |  Branch (3865:13): [True: 0, False: 0]
  ------------------
 3866|      0|            m_kind = float_kind::nan_simple;
 3867|      0|            return it;
 3868|      0|        }
 3869|      0|        else {
 3870|      0|            it = *r;
 3871|      0|        }
 3872|       |
 3873|      0|        auto payload_beg_it = it;
 3874|      0|        it = read_while_code_unit(
 3875|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3876|      0|                return is_ascii_char(ch) &&
 3877|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3878|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3879|      0|            });
 3880|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3881|       |
 3882|      0|        m_kind = float_kind::nan_with_payload;
 3883|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3883:18): [True: 0, False: 0]
  ------------------
 3884|      0|                                             ')')) {
 3885|      0|            return *r;
 3886|      0|        }
 3887|      0|        return detail::unexpected_scan_error(
 3888|      0|            scan_error::invalid_scanned_value,
 3889|      0|            "Invalid floating-point NaN payload");
 3890|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|   371k|    {
 3823|   371k|        return read_matching_string_classic_nocase(range, "0x");
 3824|   371k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2094|   349k|{
 2095|   349k|    auto it = read_while_code_unit(range, pred);
 2096|   349k|    if (it == range.begin()) {
  ------------------
  |  Branch (2096:9): [True: 210k, False: 139k]
  ------------------
 2097|   210k|        return unexpected(parse_error::error);
 2098|   210k|    }
 2099|   139k|    return it;
 2100|   349k|}
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3895|  77.3k|    {
 3896|  77.3k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3896:18): [True: 4.25k, False: 73.0k]
  ------------------
 3897|  4.25k|            auto beg_exp_it = range.begin();
 3898|  4.25k|            auto it = *r;
 3899|       |
 3900|  4.25k|            if (auto r_sign =
  ------------------
  |  Branch (3900:22): [True: 4.22k, False: 28]
  ------------------
 3901|  4.25k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3902|  4.22k|                it = r_sign->first;
 3903|  4.22k|            }
 3904|       |
 3905|  4.25k|            if (auto r_exp = read_while1_code_unit(
 3906|  4.25k|                    ranges::subrange{it, range.end()},
 3907|  4.25k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3908|  4.25k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  865|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 444, False: 3.81k]
  |  |  ------------------
  ------------------
 3909|    444|                it = beg_exp_it;
 3910|    444|            }
 3911|  3.81k|            else {
 3912|  3.81k|                it = *r_exp;
 3913|  3.81k|            }
 3914|       |
 3915|  4.25k|            return it;
 3916|  4.25k|        }
 3917|  73.0k|        return range.begin();
 3918|  77.3k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  4.25k|        : m_fptr([](storage fn,
  743|  4.25k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.25k|              cvref<T> obj = *get<T>(fn);
  745|  4.25k|              if constexpr (std::is_void_v<R>) {
  746|  4.25k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.25k|              }
  748|  4.25k|              else {
  749|  4.25k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.25k|              }
  751|  4.25k|          }),
  752|  4.25k|          m_storage(std::addressof(f))
  753|  4.25k|    {
  754|  4.25k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|  14.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  14.1k|              else {
  749|  14.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.1k|              }
  751|  14.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  14.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  14.1k|        else if constexpr (std::is_object_v<T>) {
  688|  14.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  14.1k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3907|  14.1k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  4.25k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.25k|        {
  662|  4.25k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3964|   211k|    {
 3965|   211k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3966|   211k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3966:35): [True: 127k, False: 84.1k]
  |  Branch (3966:50): [True: 27.9k, False: 99.0k]
  ------------------
 3967|       |
 3968|   211k|        auto it = ranges::begin(range);
 3969|   211k|        std::ptrdiff_t digits_count = 0;
 3970|       |
 3971|   211k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3972|   211k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 76.6k, False: 134k]
  |  |  ------------------
  ------------------
 3973|  76.6k|            return r.transform_error(
 3974|  76.6k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3975|  76.6k|                                              "Invalid floating-point value"));
 3976|  76.6k|        }
 3977|   134k|        else {
 3978|   134k|            digits_count += ranges::distance(it, *r);
 3979|   134k|            it = *r;
 3980|   134k|        }
 3981|       |
 3982|   134k|        m_integral_part_length = digits_count;
 3983|   134k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3983:18): [True: 984, False: 133k]
  ------------------
 3984|   134k|                                             m_locale_options.decimal_point)) {
 3985|    984|            it = *r;
 3986|    984|        }
 3987|       |
 3988|   134k|        if (auto r =
  ------------------
  |  Branch (3988:18): [True: 786, False: 133k]
  ------------------
 3989|   134k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3990|    786|            digits_count += ranges::distance(it, *r);
 3991|    786|            it = *r;
 3992|    786|        }
 3993|       |
 3994|   134k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  865|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 134k]
  |  |  ------------------
  ------------------
 3995|      0|            return detail::unexpected_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "No significand digits in float");
 3998|      0|        }
 3999|       |
 4000|   134k|        auto beg_exp_it = it;
 4001|   134k|        if (allowed_exp) {
  ------------------
  |  Branch (4001:13): [True: 77.3k, False: 57.1k]
  ------------------
 4002|  77.3k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4003|  77.3k|        }
 4004|   134k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4004:13): [True: 4.31k, False: 130k]
  |  Branch (4004:29): [True: 3.41k, False: 900]
  ------------------
 4005|  3.41k|            return detail::unexpected_scan_error(
 4006|  3.41k|                scan_error::invalid_scanned_value,
 4007|  3.41k|                "No exponent given to scientific float");
 4008|  3.41k|        }
 4009|       |
 4010|   131k|        m_kind =
 4011|   131k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4011:13): [True: 127k, False: 3.81k]
  ------------------
 4012|       |
 4013|   131k|        return it;
 4014|   134k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3792|   345k|    {
 3793|   345k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  865|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 345k]
  |  |  |  Branch (865:45): [True: 0, False: 345k]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3794|   345k|                         thsep_allowed)) {
 3795|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3796|      0|                return char_to_int(ch) < 10 ||
 3797|      0|                       ch == m_locale_options.thousands_sep;
 3798|      0|            });
 3799|      0|        }
 3800|       |
 3801|   345k|        return read_while1_code_unit(
 3802|   345k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3803|   345k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   345k|        : m_fptr([](storage fn,
  743|   345k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   345k|              cvref<T> obj = *get<T>(fn);
  745|   345k|              if constexpr (std::is_void_v<R>) {
  746|   345k|                  obj(static_cast<decltype(args)>(args)...);
  747|   345k|              }
  748|   345k|              else {
  749|   345k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   345k|              }
  751|   345k|          }),
  752|   345k|          m_storage(std::addressof(f))
  753|   345k|    {
  754|   345k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|   509k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   509k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   509k|              else {
  749|   509k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   509k|              }
  751|   509k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   509k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   509k|        else if constexpr (std::is_object_v<T>) {
  688|   509k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   509k|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3802|   509k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   345k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   345k|        {
  662|   345k|        }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4021|   582k|    {
 4022|   582k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4023|   582k|        const bool allowed_nonhex =
 4024|   582k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4025|   582k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4026|       |
 4027|   582k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4027:39): [True: 582k, False: 0]
  |  Branch (4027:45): [True: 0, False: 582k]
  ------------------
 4028|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4029|      0|                scan_error::invalid_scanned_value,
 4030|      0|                "Invalid infinite floating-point value"));
 4031|      0|        }
 4032|   582k|        else if (r) {
  ------------------
  |  Branch (4032:18): [True: 0, False: 582k]
  ------------------
 4033|      0|            return *r;
 4034|      0|        }
 4035|       |
 4036|   582k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4036:39): [True: 582k, False: 0]
  |  Branch (4036:45): [True: 0, False: 582k]
  ------------------
 4037|      0|            return unexpected(r.error());
 4038|      0|        }
 4039|   582k|        else if (r) {
  ------------------
  |  Branch (4039:18): [True: 0, False: 582k]
  ------------------
 4040|      0|            return *r;
 4041|      0|        }
 4042|       |
 4043|   582k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4043:13): [True: 371k, False: 211k]
  |  Branch (4043:28): [True: 113k, False: 258k]
  ------------------
 4044|       |            // only hex allowed:
 4045|       |            // prefix "0x" allowed, not required
 4046|   113k|            auto it = range.begin();
 4047|       |
 4048|   113k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4048:22): [True: 216, False: 112k]
  ------------------
 4049|    216|                m_kind = float_kind::hex_with_prefix;
 4050|    216|                it = *r;
 4051|    216|            }
 4052|   112k|            else {
 4053|   112k|                m_kind = float_kind::hex_without_prefix;
 4054|   112k|            }
 4055|       |
 4056|   113k|            return read_hex(ranges::subrange{it, range.end()});
 4057|   113k|        }
 4058|   469k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4058:13): [True: 211k, False: 258k]
  |  Branch (4058:29): [True: 211k, False: 0]
  ------------------
 4059|       |            // only nonhex allowed:
 4060|       |            // no prefix allowed
 4061|   211k|            m_kind = float_kind::generic;
 4062|   211k|            return read_regular_float(range);
 4063|   211k|        }
 4064|       |        // both hex and nonhex allowed:
 4065|       |        // check for "0x" prefix -> hex,
 4066|       |        // regular otherwise
 4067|       |
 4068|   258k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  865|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 515, False: 257k]
  |  |  ------------------
  ------------------
 4069|    515|            m_kind = float_kind::hex_with_prefix;
 4070|    515|            return read_hex(ranges::subrange{*r, range.end()});
 4071|    515|        }
 4072|       |
 4073|   257k|        m_kind = float_kind::generic;
 4074|   257k|        return read_regular(range);
 4075|   258k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3756|   371k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3757|   371k|                    auto res = read_all(rr);
 3758|   371k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  865|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 157, False: 371k]
  |  |  ------------------
  ------------------
 3759|    157|                        return detail::unexpected_scan_error(
 3760|    157|                            scan_error::invalid_scanned_value,
 3761|    157|                            "Invalid float value");
 3762|    157|                    }
 3763|   371k|                    return res;
 3764|   371k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|   371k|{
 1938|   371k|    return ranges::next(range.begin(), range.end());
 1939|   371k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   371k|    {
  313|   371k|        ranges::advance(x, bound);
  314|   371k|        return x;
  315|   371k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   371k|    {
  275|   371k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   371k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|   502k|    {
 1676|   502k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   502k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   502k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1719|   502k|    {
 1720|   502k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|   502k|                      ranges::sized_range<Range>) {
 1725|   502k|            m_storage.reset();
 1726|   502k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   502k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  29.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  29.9k|        {
  662|  29.9k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   103k|        : m_fptr([](storage fn,
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
  752|   103k|          m_storage(std::addressof(f))
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   103k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   103k|        else if constexpr (std::is_object_v<T>) {
  688|   103k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   103k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4207|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   103k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4209|   103k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3695|   479k|    {
 3696|   479k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  865|   479k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 479k]
  |  |  ------------------
  ------------------
 3697|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3698|      0|                classic_with_thsep_tag{}};
 3699|      0|        }
 3700|       |
 3701|   479k|        return read_source_impl(range);
 3702|   479k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   103k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   103k|        {
  662|   103k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6214|   146k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|   146k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|   146k|            auto rd = make_reader<T, char_type>();
 6225|   146k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   146k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 146k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|   146k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 146k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|   146k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|   146k|                return impl(rd, range, value);
 6230|   146k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|   146k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|   146k|    {
 6150|   146k|        const bool need_skipped_width =
 6151|   146k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 146k]
  |  Branch (6151:33): [True: 0, False: 146k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|   146k|        auto it = rng.begin();
 6155|   146k|        std::ptrdiff_t prefix_width = 0;
 6156|   146k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 146k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|   146k|        else {
 6164|   146k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   146k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   146k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   146k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 956, False: 146k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    956|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    956|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    956|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    956|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    956|    }                                                  \
  |  |  |  | 3939|   146k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|   146k|            std::tie(it, prefix_width) = prefix_result;
 6166|   146k|        }
 6167|   146k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|   146k|        std::ptrdiff_t value_width = 0;
 6171|   146k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 146k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|   146k|        else {
 6187|   146k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   146k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   146k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 44.7k, False: 101k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  44.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  44.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  44.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  44.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  44.7k|    }                                                  \
  |  | 3939|   146k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|   101k|                                             specs, value, loc));
 6189|       |
 6190|   101k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 101k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|   101k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|   101k|        std::ptrdiff_t postfix_width = 0;
 6199|   101k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 100k, False: 402]
  ------------------
 6200|   100k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|   100k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|   100k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|   100k|                                 value_width));
 6204|   100k|            std::tie(it, postfix_width) = postfix_result;
 6205|   100k|        }
 6206|       |
 6207|   101k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   101k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 101k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|   101k|            specs, prefix_width, value_width, postfix_width));
 6209|   101k|        return it;
 6210|   101k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3721|   316k|    {
 3722|   316k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3723|       |
 3724|   316k|        const std::ptrdiff_t sign_len =
 3725|   316k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3725:13): [True: 1.64k, False: 315k]
  ------------------
 3726|       |
 3727|   316k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   316k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   316k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   316k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 32.2k, False: 284k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  32.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  32.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  32.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  32.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  32.2k|    }                                                  \
  |  |  |  | 3939|   316k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3728|   284k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3729|   316k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4191|   146k|    {
 4192|   146k|        float_reader<CharT> rd{get_options(specs)};
 4193|       |
 4194|   146k|#if !SCN_DISABLE_LOCALE
 4195|   146k|        if (specs.localized) {
  ------------------
  |  Branch (4195:13): [True: 36.1k, False: 109k]
  ------------------
 4196|  36.1k|            return read_impl<Range>(
 4197|  36.1k|                range, rd,
 4198|  36.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  36.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4200|  36.1k|                },
 4201|  36.1k|                value, loc);
 4202|  36.1k|        }
 4203|   109k|#endif
 4204|       |
 4205|   109k|        return read_impl<Range>(
 4206|   109k|            range, rd,
 4207|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   109k|                return r.read_source(SCN_FWD(args)...);
 4209|   109k|            },
 4210|   109k|            value);
 4211|   146k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4227|   200k|    {
 4228|   200k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4229|   200k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 57.2k, False: 143k]
  |  |  ------------------
  ------------------
 4230|  57.2k|            return unexpected(r.error());
 4231|  57.2k|        }
 4232|       |
 4233|   143k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   143k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   143k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   143k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 855, False: 142k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    855|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    855|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    855|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    855|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    855|    }                                                  \
  |  |  |  | 3939|   143k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4234|   142k|        return ranges::next(range.begin(), n);
 4235|   143k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  36.1k|        : m_fptr([](storage fn,
  743|  36.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  36.1k|              cvref<T> obj = *get<T>(fn);
  745|  36.1k|              if constexpr (std::is_void_v<R>) {
  746|  36.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  36.1k|              }
  748|  36.1k|              else {
  749|  36.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  36.1k|              }
  751|  36.1k|          }),
  752|  36.1k|          m_storage(std::addressof(f))
  753|  36.1k|    {
  754|  36.1k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  36.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  36.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  36.1k|              else {
  749|  36.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  36.1k|              }
  751|  36.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  36.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  36.1k|        else if constexpr (std::is_object_v<T>) {
  688|  36.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  36.1k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4198|  36.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  36.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  36.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4200|  36.1k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  36.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  36.1k|        {
  662|  36.1k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   109k|        : m_fptr([](storage fn,
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|   109k|              if constexpr (std::is_void_v<R>) {
  746|   109k|                  obj(static_cast<decltype(args)>(args)...);
  747|   109k|              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
  752|   109k|          m_storage(std::addressof(f))
  753|   109k|    {
  754|   109k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   109k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   109k|        else if constexpr (std::is_object_v<T>) {
  688|   109k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   109k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4207|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   109k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4209|   109k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   109k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   109k|        {
  662|   109k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4191|   146k|    {
 4192|   146k|        float_reader<CharT> rd{get_options(specs)};
 4193|       |
 4194|   146k|#if !SCN_DISABLE_LOCALE
 4195|   146k|        if (specs.localized) {
  ------------------
  |  Branch (4195:13): [True: 36.2k, False: 109k]
  ------------------
 4196|  36.2k|            return read_impl<Range>(
 4197|  36.2k|                range, rd,
 4198|  36.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  36.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4200|  36.2k|                },
 4201|  36.2k|                value, loc);
 4202|  36.2k|        }
 4203|   109k|#endif
 4204|       |
 4205|   109k|        return read_impl<Range>(
 4206|   109k|            range, rd,
 4207|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   109k|                return r.read_source(SCN_FWD(args)...);
 4209|   109k|            },
 4210|   109k|            value);
 4211|   146k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4227|   200k|    {
 4228|   200k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4229|   200k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 26.7k, False: 173k]
  |  |  ------------------
  ------------------
 4230|  26.7k|            return unexpected(r.error());
 4231|  26.7k|        }
 4232|       |
 4233|   173k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   173k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   173k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   173k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 31.3k, False: 142k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  31.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  31.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  31.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  31.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  31.3k|    }                                                  \
  |  |  |  | 3939|   173k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4234|   142k|        return ranges::next(range.begin(), n);
 4235|   173k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  36.2k|        : m_fptr([](storage fn,
  743|  36.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  36.2k|              cvref<T> obj = *get<T>(fn);
  745|  36.2k|              if constexpr (std::is_void_v<R>) {
  746|  36.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  36.2k|              }
  748|  36.2k|              else {
  749|  36.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  36.2k|              }
  751|  36.2k|          }),
  752|  36.2k|          m_storage(std::addressof(f))
  753|  36.2k|    {
  754|  36.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  36.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  36.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  36.2k|              else {
  749|  36.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  36.2k|              }
  751|  36.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  36.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  36.2k|        else if constexpr (std::is_object_v<T>) {
  688|  36.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  36.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4198|  36.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  36.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  36.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4200|  36.2k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  36.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  36.2k|        {
  662|  36.2k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   109k|        : m_fptr([](storage fn,
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|   109k|              if constexpr (std::is_void_v<R>) {
  746|   109k|                  obj(static_cast<decltype(args)>(args)...);
  747|   109k|              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
  752|   109k|          m_storage(std::addressof(f))
  753|   109k|    {
  754|   109k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   109k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   109k|        else if constexpr (std::is_object_v<T>) {
  688|   109k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   109k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4207|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   109k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4209|   109k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   109k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   109k|        {
  662|   109k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6214|   148k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|       |                          basic_contiguous_scan_context<char_type>>) {
 6219|       |            auto rd = make_reader<T, char_type>();
 6220|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6221|       |            return impl(rd, range, value);
 6222|       |        }
 6223|   148k|        else if constexpr (!detail::is_type_disabled<T>) {
 6224|   148k|            auto rd = make_reader<T, char_type>();
 6225|   148k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   148k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 148k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6226|       |
 6227|   148k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6227:17): [True: 148k, False: 0]
  |  Branch (6227:50): [True: 0, False: 0]
  ------------------
 6228|   148k|                specs.width != 0) {
  ------------------
  |  Branch (6228:17): [True: 0, False: 0]
  ------------------
 6229|   148k|                return impl(rd, range, value);
 6230|   148k|            }
 6231|       |
 6232|      0|            auto crange = get_as_contiguous(range);
 6233|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6234|      0|            return ranges::next(range.begin(),
 6235|      0|                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|   148k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6149|   148k|    {
 6150|   148k|        const bool need_skipped_width =
 6151|   148k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 148k]
  |  Branch (6151:33): [True: 0, False: 148k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|   148k|        auto it = rng.begin();
 6155|   148k|        std::ptrdiff_t prefix_width = 0;
 6156|   148k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 148k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|   148k|        else {
 6164|   148k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   148k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   148k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   148k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 996, False: 147k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    996|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    996|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    996|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    996|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    996|    }                                                  \
  |  |  |  | 3939|   148k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|   147k|            std::tie(it, prefix_width) = prefix_result;
 6166|   147k|        }
 6167|   147k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|   147k|        std::ptrdiff_t value_width = 0;
 6171|   147k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 147k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|   147k|        else {
 6187|   147k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   147k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   147k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 44.7k, False: 103k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  44.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  44.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  44.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  44.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  44.7k|    }                                                  \
  |  | 3939|   147k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|   103k|                                             specs, value, loc));
 6189|       |
 6190|   103k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 103k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|   103k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|   103k|        std::ptrdiff_t postfix_width = 0;
 6199|   103k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 102k, False: 420]
  ------------------
 6200|   102k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|   102k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|   102k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|   102k|                                 value_width));
 6204|   102k|            std::tie(it, postfix_width) = postfix_result;
 6205|   102k|        }
 6206|       |
 6207|   103k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   103k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 103k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|   103k|            specs, prefix_width, value_width, postfix_width));
 6209|   103k|        return it;
 6210|   103k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3721|   321k|    {
 3722|   321k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  930|   321k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   321k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3723|       |
 3724|   321k|        const std::ptrdiff_t sign_len =
 3725|   321k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3725:13): [True: 1.67k, False: 320k]
  ------------------
 3726|       |
 3727|   321k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3940|   321k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   321k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   321k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 31.2k, False: 290k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  31.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  31.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  31.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  31.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  31.2k|    }                                                  \
  |  |  |  | 3939|   321k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3728|   290k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3729|   321k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4191|   147k|    {
 4192|   147k|        float_reader<CharT> rd{get_options(specs)};
 4193|       |
 4194|   147k|#if !SCN_DISABLE_LOCALE
 4195|   147k|        if (specs.localized) {
  ------------------
  |  Branch (4195:13): [True: 37.0k, False: 110k]
  ------------------
 4196|  37.0k|            return read_impl<Range>(
 4197|  37.0k|                range, rd,
 4198|  37.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  37.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4200|  37.0k|                },
 4201|  37.0k|                value, loc);
 4202|  37.0k|        }
 4203|   110k|#endif
 4204|       |
 4205|   110k|        return read_impl<Range>(
 4206|   110k|            range, rd,
 4207|   110k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   110k|                return r.read_source(SCN_FWD(args)...);
 4209|   110k|            },
 4210|   110k|            value);
 4211|   147k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4227|   203k|    {
 4228|   203k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4229|   203k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 57.9k, False: 145k]
  |  |  ------------------
  ------------------
 4230|  57.9k|            return unexpected(r.error());
 4231|  57.9k|        }
 4232|       |
 4233|   145k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   145k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   145k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   145k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 158, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    158|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    158|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    158|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    158|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    158|    }                                                  \
  |  |  |  | 3939|   145k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4234|   145k|        return ranges::next(range.begin(), n);
 4235|   145k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  37.0k|        : m_fptr([](storage fn,
  743|  37.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  37.0k|              cvref<T> obj = *get<T>(fn);
  745|  37.0k|              if constexpr (std::is_void_v<R>) {
  746|  37.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  37.0k|              }
  748|  37.0k|              else {
  749|  37.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  37.0k|              }
  751|  37.0k|          }),
  752|  37.0k|          m_storage(std::addressof(f))
  753|  37.0k|    {
  754|  37.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  37.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  37.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  37.0k|              else {
  749|  37.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  37.0k|              }
  751|  37.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  37.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  37.0k|        else if constexpr (std::is_object_v<T>) {
  688|  37.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  37.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4198|  37.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  37.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  37.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4200|  37.0k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  37.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  37.0k|        {
  662|  37.0k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   110k|        : m_fptr([](storage fn,
  743|   110k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   110k|              cvref<T> obj = *get<T>(fn);
  745|   110k|              if constexpr (std::is_void_v<R>) {
  746|   110k|                  obj(static_cast<decltype(args)>(args)...);
  747|   110k|              }
  748|   110k|              else {
  749|   110k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   110k|              }
  751|   110k|          }),
  752|   110k|          m_storage(std::addressof(f))
  753|   110k|    {
  754|   110k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   110k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   110k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   110k|              else {
  749|   110k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   110k|              }
  751|   110k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   110k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   110k|        else if constexpr (std::is_object_v<T>) {
  688|   110k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   110k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4207|   110k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   110k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4209|   110k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   110k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   110k|        {
  662|   110k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4191|   147k|    {
 4192|   147k|        float_reader<CharT> rd{get_options(specs)};
 4193|       |
 4194|   147k|#if !SCN_DISABLE_LOCALE
 4195|   147k|        if (specs.localized) {
  ------------------
  |  Branch (4195:13): [True: 37.0k, False: 110k]
  ------------------
 4196|  37.0k|            return read_impl<Range>(
 4197|  37.0k|                range, rd,
 4198|  37.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  37.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4200|  37.0k|                },
 4201|  37.0k|                value, loc);
 4202|  37.0k|        }
 4203|   110k|#endif
 4204|       |
 4205|   110k|        return read_impl<Range>(
 4206|   110k|            range, rd,
 4207|   110k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   110k|                return r.read_source(SCN_FWD(args)...);
 4209|   110k|            },
 4210|   110k|            value);
 4211|   147k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4227|   203k|    {
 4228|   203k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4229|   203k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 26.9k, False: 176k]
  |  |  ------------------
  ------------------
 4230|  26.9k|            return unexpected(r.error());
 4231|  26.9k|        }
 4232|       |
 4233|   176k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3940|   176k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   176k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   176k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 31.0k, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  31.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  31.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  31.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  31.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  31.0k|    }                                                  \
  |  |  |  | 3939|   176k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4234|   145k|        return ranges::next(range.begin(), n);
 4235|   176k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  37.0k|        : m_fptr([](storage fn,
  743|  37.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  37.0k|              cvref<T> obj = *get<T>(fn);
  745|  37.0k|              if constexpr (std::is_void_v<R>) {
  746|  37.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  37.0k|              }
  748|  37.0k|              else {
  749|  37.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  37.0k|              }
  751|  37.0k|          }),
  752|  37.0k|          m_storage(std::addressof(f))
  753|  37.0k|    {
  754|  37.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  37.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  37.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  37.0k|              else {
  749|  37.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  37.0k|              }
  751|  37.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  37.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  37.0k|        else if constexpr (std::is_object_v<T>) {
  688|  37.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  37.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4198|  37.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4199|  37.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  936|  37.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4200|  37.0k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  37.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  37.0k|        {
  662|  37.0k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   110k|        : m_fptr([](storage fn,
  743|   110k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   110k|              cvref<T> obj = *get<T>(fn);
  745|   110k|              if constexpr (std::is_void_v<R>) {
  746|   110k|                  obj(static_cast<decltype(args)>(args)...);
  747|   110k|              }
  748|   110k|              else {
  749|   110k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   110k|              }
  751|   110k|          }),
  752|   110k|          m_storage(std::addressof(f))
  753|   110k|    {
  754|   110k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   110k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   110k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   110k|              else {
  749|   110k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   110k|              }
  751|   110k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   110k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   110k|        else if constexpr (std::is_object_v<T>) {
  688|   110k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   110k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4207|   110k|            [](float_reader<CharT>& r, auto&&... args) {
 4208|   110k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4209|   110k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   110k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   110k|        {
  662|   110k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   585k|{
 2160|   585k|    auto it = range.begin();
 2161|  1.00M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 1.00M, False: 3.37k]
  ------------------
 2162|  1.00M|        const auto val =
 2163|  1.00M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  1.00M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  1.00M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.00M, False: 0]
  |  |  ------------------
  ------------------
 2165|  1.00M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  1.00M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  1.00M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 582k, False: 424k]
  ------------------
 2168|   582k|                return it;
 2169|   582k|            }
 2170|  1.00M|        }
 2171|   424k|        it = val.iterator;
 2172|   424k|    }
 2173|       |
 2174|  3.37k|    return it;
 2175|   585k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.00M|{
 1998|  1.00M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.00M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.00M|    auto it = range.begin();
 2002|  1.00M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.00M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.00M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  1.00M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.00M, False: 0]
  ------------------
 2011|  1.00M|        ++it;
 2012|  1.00M|        return {it, string_type(1, *range.begin())};
 2013|  1.00M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  1.00M|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|  1.00M|    {
 1989|  1.00M|        return !codepoint.empty();
 1990|  1.00M|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   585k|{
 2181|   585k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   585k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3054|   585k|{
 3055|   585k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3055:9): [True: 585k, False: 0]
  ------------------
 3056|   585k|        auto it = read_while_classic_space(range);
 3057|   585k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3058|   585k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   585k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.37k, False: 582k]
  |  |  ------------------
  ------------------
 3059|  3.37k|            return unexpected(e);
 3060|  3.37k|        }
 3061|       |
 3062|   582k|        return it;
 3063|   585k|    }
 3064|       |
 3065|      0|    return read_while_classic_space(range);
 3066|   585k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   585k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   585k|    else {
 2225|   585k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   585k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   585k|            return detail::is_cp_space(cp);
 2238|   585k|        });
 2239|   585k|    }
 2240|   585k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   585k|        : m_fptr([](storage fn,
  743|   585k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   585k|              cvref<T> obj = *get<T>(fn);
  745|   585k|              if constexpr (std::is_void_v<R>) {
  746|   585k|                  obj(static_cast<decltype(args)>(args)...);
  747|   585k|              }
  748|   585k|              else {
  749|   585k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   585k|              }
  751|   585k|          }),
  752|   585k|          m_storage(std::addressof(f))
  753|   585k|    {
  754|   585k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.00M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.00M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.00M|              else {
  749|  1.00M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.00M|              }
  751|  1.00M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.00M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.00M|        else if constexpr (std::is_object_v<T>) {
  688|  1.00M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.00M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  1.00M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.00M|            return detail::is_cp_space(cp);
 2238|  1.00M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   585k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   585k|        {
  662|   585k|        }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2186|   958k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|   958k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|   958k|        auto buf = make_contiguous_buffer(range);
 2191|   958k|        auto it = find_classic_space_narrow_fast(buf.view());
 2192|   958k|        return ranges::next(range.begin(),
 2193|   958k|                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|       |    else {
 2196|       |        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|       |        return read_until_code_point(
 2208|       |            ranges::subrange{it, range.end()},
 2209|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|       |    }
 2211|   958k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1781|   958k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   958k|                  ranges::sized_range<Range>) {
 1785|   958k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   958k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   958k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1587|   958k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   958k|    {
 1589|   958k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|   958k|    {
 1676|   958k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   958k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   958k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1719|   958k|    {
 1720|   958k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|   958k|                                          std::basic_string<CharT>>) {
 1730|   958k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  936|   958k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|   958k|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   958k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIfEET_S5_:
 4121|   682k|    {
 4122|   682k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4122:13): [True: 89.4k, False: 592k]
  ------------------
 4123|  89.4k|            return std::copysign(value, T{-1.0});
 4124|  89.4k|        }
 4125|   592k|        return std::copysign(value, T{1.0});
 4126|   682k|    }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2186|   403k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|   403k|    else {
 2196|   403k|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|   403k|        return read_until_code_point(
 2208|   403k|            ranges::subrange{it, range.end()},
 2209|   403k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|   403k|    }
 2211|   403k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|   403k|        : m_fptr([](storage fn,
  743|   403k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   403k|              cvref<T> obj = *get<T>(fn);
  745|   403k|              if constexpr (std::is_void_v<R>) {
  746|   403k|                  obj(static_cast<decltype(args)>(args)...);
  747|   403k|              }
  748|   403k|              else {
  749|   403k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   403k|              }
  751|   403k|          }),
  752|   403k|          m_storage(std::addressof(f))
  753|   403k|    {
  754|   403k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|   747k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   747k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   747k|              else {
  749|   747k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   747k|              }
  751|   747k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   747k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   747k|        else if constexpr (std::is_object_v<T>) {
  688|   747k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   747k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2209|   747k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|   403k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   403k|        {
  662|   403k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|   403k|    {
 1676|   403k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   403k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   403k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1719|   403k|    {
 1720|   403k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|   403k|                                          std::basic_string<CharT>>) {
 1730|   403k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  936|   403k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|   403k|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   403k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIfEET_S5_:
 4121|   240k|    {
 4122|   240k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4122:13): [True: 1.11k, False: 239k]
  ------------------
 4123|  1.11k|            return std::copysign(value, T{-1.0});
 4124|  1.11k|        }
 4125|   239k|        return std::copysign(value, T{1.0});
 4126|   240k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIdEET_S5_:
 4121|   709k|    {
 4122|   709k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4122:13): [True: 92.4k, False: 616k]
  ------------------
 4123|  92.4k|            return std::copysign(value, T{-1.0});
 4124|  92.4k|        }
 4125|   616k|        return std::copysign(value, T{1.0});
 4126|   709k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIdEET_S5_:
 4121|   284k|    {
 4122|   284k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4122:13): [True: 1.14k, False: 283k]
  ------------------
 4123|  1.14k|            return std::copysign(value, T{-1.0});
 4124|  1.14k|        }
 4125|   283k|        return std::copysign(value, T{1.0});
 4126|   284k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIeEET_S5_:
 4121|   722k|    {
 4122|   722k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4122:13): [True: 95.2k, False: 627k]
  ------------------
 4123|  95.2k|            return std::copysign(value, T{-1.0});
 4124|  95.2k|        }
 4125|   627k|        return std::copysign(value, T{1.0});
 4126|   722k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIeEET_S5_:
 4121|   290k|    {
 4122|   290k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4122:13): [True: 1.18k, False: 289k]
  ------------------
 4123|  1.18k|            return std::copysign(value, T{-1.0});
 4124|  1.18k|        }
 4125|   289k|        return std::copysign(value, T{1.0});
 4126|   290k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5823|   316k|{
 5824|   316k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.97k, False: 312k]
  |  |  ------------------
  ------------------
 5825|  3.97k|        return unexpected(e);
 5826|  3.97k|    }
 5827|       |
 5828|   312k|    if (!is_required) {
  ------------------
  |  Branch (5828:9): [True: 0, False: 312k]
  ------------------
 5829|      0|        return range.begin();
 5830|      0|    }
 5831|       |
 5832|   312k|    return skip_classic_whitespace(range);
 5833|   312k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5899|   102k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|   102k|                          basic_contiguous_scan_context<char_type>>) {
 5904|   102k|            auto rd = make_reader<T, char_type>();
 5905|   102k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|   102k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|   102k|    {
 5892|   102k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.31k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.31k|    }                                                  \
  |  |  |  | 3939|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|   100k|                        .transform_error(make_eof_scan_error));
 5894|   100k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|   102k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4173|   100k|    {
 4174|   100k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   100k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4175|       |
 4176|   100k|        float_reader<CharT> rd{};
 4177|   100k|        return read_impl<Range>(
 4178|   100k|            range, rd,
 4179|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|   100k|                return r.read_source(SCN_FWD(args)...);
 4181|   100k|            },
 4182|   100k|            value);
 4183|   100k|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3688|   654k|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3674|   964k|    constexpr float_reader_base() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   100k|        : m_fptr([](storage fn,
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|   100k|              if constexpr (std::is_void_v<R>) {
  746|   100k|                  obj(static_cast<decltype(args)>(args)...);
  747|   100k|              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
  752|   100k|          m_storage(std::addressof(f))
  753|   100k|    {
  754|   100k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   100k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   100k|        else if constexpr (std::is_object_v<T>) {
  688|   100k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   100k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4179|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|   100k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4181|   100k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   100k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   100k|        {
  662|   100k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5899|   105k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|   105k|                          basic_contiguous_scan_context<char_type>>) {
 5904|   105k|            auto rd = make_reader<T, char_type>();
 5905|   105k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|   105k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|   105k|    {
 5892|   105k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.50k, False: 104k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.50k|    }                                                  \
  |  |  |  | 3939|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|   104k|                        .transform_error(make_eof_scan_error));
 5894|   104k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|   105k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4173|   104k|    {
 4174|   104k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   104k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4175|       |
 4176|   104k|        float_reader<CharT> rd{};
 4177|   104k|        return read_impl<Range>(
 4178|   104k|            range, rd,
 4179|   104k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|   104k|                return r.read_source(SCN_FWD(args)...);
 4181|   104k|            },
 4182|   104k|            value);
 4183|   104k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   104k|        : m_fptr([](storage fn,
  743|   104k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   104k|              cvref<T> obj = *get<T>(fn);
  745|   104k|              if constexpr (std::is_void_v<R>) {
  746|   104k|                  obj(static_cast<decltype(args)>(args)...);
  747|   104k|              }
  748|   104k|              else {
  749|   104k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   104k|              }
  751|   104k|          }),
  752|   104k|          m_storage(std::addressof(f))
  753|   104k|    {
  754|   104k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   104k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   104k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   104k|              else {
  749|   104k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   104k|              }
  751|   104k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   104k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   104k|        else if constexpr (std::is_object_v<T>) {
  688|   104k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   104k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4179|   104k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|   104k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4181|   104k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   104k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   104k|        {
  662|   104k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5899|   108k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|   108k|                          basic_contiguous_scan_context<char_type>>) {
 5904|   108k|            auto rd = make_reader<T, char_type>();
 5905|   108k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|   108k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|   108k|    {
 5892|   108k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.62k, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.62k|    }                                                  \
  |  |  |  | 3939|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|   107k|                        .transform_error(make_eof_scan_error));
 5894|   107k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|   108k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4173|   107k|    {
 4174|   107k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   107k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4175|       |
 4176|   107k|        float_reader<CharT> rd{};
 4177|   107k|        return read_impl<Range>(
 4178|   107k|            range, rd,
 4179|   107k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|   107k|                return r.read_source(SCN_FWD(args)...);
 4181|   107k|            },
 4182|   107k|            value);
 4183|   107k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   107k|        : m_fptr([](storage fn,
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|   107k|              if constexpr (std::is_void_v<R>) {
  746|   107k|                  obj(static_cast<decltype(args)>(args)...);
  747|   107k|              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
  752|   107k|          m_storage(std::addressof(f))
  753|   107k|    {
  754|   107k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   107k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   107k|        else if constexpr (std::is_object_v<T>) {
  688|   107k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   107k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4179|   107k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|   107k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4181|   107k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   107k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   107k|        {
  662|   107k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5823|   346k|{
 5824|   346k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.13k, False: 342k]
  |  |  ------------------
  ------------------
 5825|  4.13k|        return unexpected(e);
 5826|  4.13k|    }
 5827|       |
 5828|   342k|    if (!is_required) {
  ------------------
  |  Branch (5828:9): [True: 0, False: 342k]
  ------------------
 5829|      0|        return range.begin();
 5830|      0|    }
 5831|       |
 5832|   342k|    return skip_classic_whitespace(range);
 5833|   342k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5899|   111k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|   111k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|   111k|            auto rd = make_reader<T, char_type>();
 5909|   111k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 111k, False: 0]
  ------------------
 5910|   111k|                return impl(rd, range, value);
 5911|   111k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|   111k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|   111k|    {
 5892|   111k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.38k, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.38k|    }                                                  \
  |  |  |  | 3939|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|   109k|                        .transform_error(make_eof_scan_error));
 5894|   109k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|   111k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4173|   109k|    {
 4174|   109k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   109k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4175|       |
 4176|   109k|        float_reader<CharT> rd{};
 4177|   109k|        return read_impl<Range>(
 4178|   109k|            range, rd,
 4179|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|   109k|                return r.read_source(SCN_FWD(args)...);
 4181|   109k|            },
 4182|   109k|            value);
 4183|   109k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   109k|        : m_fptr([](storage fn,
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|   109k|              if constexpr (std::is_void_v<R>) {
  746|   109k|                  obj(static_cast<decltype(args)>(args)...);
  747|   109k|              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
  752|   109k|          m_storage(std::addressof(f))
  753|   109k|    {
  754|   109k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   109k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   109k|        else if constexpr (std::is_object_v<T>) {
  688|   109k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   109k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4179|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|   109k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4181|   109k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   109k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   109k|        {
  662|   109k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5899|   116k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|   116k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|   116k|            auto rd = make_reader<T, char_type>();
 5909|   116k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 116k, False: 0]
  ------------------
 5910|   116k|                return impl(rd, range, value);
 5911|   116k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|   116k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|   116k|    {
 5892|   116k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.59k, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.59k|    }                                                  \
  |  |  |  | 3939|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|   115k|                        .transform_error(make_eof_scan_error));
 5894|   115k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|   116k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4173|   115k|    {
 4174|   115k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   115k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4175|       |
 4176|   115k|        float_reader<CharT> rd{};
 4177|   115k|        return read_impl<Range>(
 4178|   115k|            range, rd,
 4179|   115k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|   115k|                return r.read_source(SCN_FWD(args)...);
 4181|   115k|            },
 4182|   115k|            value);
 4183|   115k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   115k|        : m_fptr([](storage fn,
  743|   115k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   115k|              cvref<T> obj = *get<T>(fn);
  745|   115k|              if constexpr (std::is_void_v<R>) {
  746|   115k|                  obj(static_cast<decltype(args)>(args)...);
  747|   115k|              }
  748|   115k|              else {
  749|   115k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   115k|              }
  751|   115k|          }),
  752|   115k|          m_storage(std::addressof(f))
  753|   115k|    {
  754|   115k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   115k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   115k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   115k|              else {
  749|   115k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   115k|              }
  751|   115k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   115k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   115k|        else if constexpr (std::is_object_v<T>) {
  688|   115k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   115k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4179|   115k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|   115k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4181|   115k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   115k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   115k|        {
  662|   115k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5899|   119k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|   119k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|   119k|            auto rd = make_reader<T, char_type>();
 5909|   119k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 119k, False: 0]
  ------------------
 5910|   119k|                return impl(rd, range, value);
 5911|   119k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|   119k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|   119k|    {
 5892|   119k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   119k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   119k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   119k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.70k, False: 117k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.70k|    }                                                  \
  |  |  |  | 3939|   119k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|   117k|                        .transform_error(make_eof_scan_error));
 5894|   117k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|   119k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4173|   117k|    {
 4174|   117k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   117k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4175|       |
 4176|   117k|        float_reader<CharT> rd{};
 4177|   117k|        return read_impl<Range>(
 4178|   117k|            range, rd,
 4179|   117k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|   117k|                return r.read_source(SCN_FWD(args)...);
 4181|   117k|            },
 4182|   117k|            value);
 4183|   117k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   117k|        : m_fptr([](storage fn,
  743|   117k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   117k|              cvref<T> obj = *get<T>(fn);
  745|   117k|              if constexpr (std::is_void_v<R>) {
  746|   117k|                  obj(static_cast<decltype(args)>(args)...);
  747|   117k|              }
  748|   117k|              else {
  749|   117k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   117k|              }
  751|   117k|          }),
  752|   117k|          m_storage(std::addressof(f))
  753|   117k|    {
  754|   117k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   117k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   117k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   117k|              else {
  749|   117k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   117k|              }
  751|   117k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   117k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   117k|        else if constexpr (std::is_object_v<T>) {
  688|   117k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   117k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4179|   117k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|   117k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4181|   117k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   117k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   117k|        {
  662|   117k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2974|   750k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   750k|    static_cast<    \
  |  |  935|   750k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2975|   750k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2976|   750k|          m_current(m_range.begin())
 2977|   750k|    {
 2978|   750k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2986|  1.43M|    {
 2987|  1.43M|        return m_range.end();
 2988|  1.43M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3001|   681k|    {
 3002|   681k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   681k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   681k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3003|   681k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3004|   681k|            if (it == nullptr) {
  ------------------
  |  Branch (3004:17): [True: 0, False: 681k]
  ------------------
 3005|      0|                it = end();
 3006|      0|            }
 3007|   681k|        }
 3008|   681k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   681k|    static_cast<    \
  |  |  935|   681k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3009|   681k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 2991|   750k|    {
 2992|   750k|        return ranges::subrange{begin(), end()};
 2993|   750k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6062|   750k|    {
 6063|   750k|        const bool need_skipped_width =
 6064|   750k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 0, False: 750k]
  |  Branch (6064:33): [True: 0, False: 750k]
  ------------------
 6065|   750k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|   750k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 0, False: 750k]
  ------------------
 6069|   750k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 0, False: 750k]
  ------------------
 6070|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6071|      0|                             need_skipped_width);
 6072|      0|        }
 6073|   750k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 750k, False: 0]
  |  Branch (6073:56): [True: 750k, False: 0]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|   750k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 0, False: 750k]
  ------------------
 6077|      0|                auto max_width_view = take_width(rng, specs.precision);
 6078|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|      0|                                  .transform_error(make_eof_scan_error));
 6080|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|      0|            }
 6082|  1.48M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   750k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   750k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   750k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   750k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 11.4k, False: 739k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  11.4k|    }                                                  \
  |  |  |  | 3939|   750k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   739k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|  1.48M|                            make_eof_scan_error));
 6084|       |
 6085|  1.48M|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 0, False: 739k]
  ------------------
 6086|      0|                return result_type{
 6087|      0|                    it,
 6088|      0|                    calculate_text_width(make_contiguous_buffer(
 6089|      0|                                             ranges::subrange{rng.begin(), it})
 6090|      0|                                             .view())};
 6091|      0|            }
 6092|   739k|            return result_type{it, 0};
 6093|  1.48M|        }
 6094|       |
 6095|      0|        return result_type{rng.begin(), 0};
 6096|   750k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6104|   671k|    {
 6105|   671k|        const bool need_skipped_width =
 6106|   671k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6106:13): [True: 0, False: 671k]
  |  Branch (6106:33): [True: 0, False: 671k]
  ------------------
 6107|   671k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6108|       |
 6109|   671k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6109:13): [True: 0, False: 671k]
  ------------------
 6110|   671k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6110:13): [True: 0, False: 671k]
  ------------------
 6111|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6111:17): [True: 0, False: 0]
  ------------------
 6112|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6112:17): [True: 0, False: 0]
  ------------------
 6113|      0|                return result_type{rng.begin(), 0};
 6114|      0|            }
 6115|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6116|      0|                             specs.fill, need_skipped_width);
 6117|      0|        }
 6118|   671k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6118:13): [True: 671k, False: 0]
  ------------------
 6119|   671k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6119:13): [True: 0, False: 671k]
  ------------------
 6120|   671k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6120:15): [True: 0, False: 0]
  |  Branch (6120:35): [True: 0, False: 0]
  ------------------
 6121|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6121:15): [True: 0, False: 0]
  ------------------
 6122|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6122:15): [True: 0, False: 0]
  ------------------
 6123|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                const auto initial_width =
 6125|      0|                    specs.precision - prefix_width - value_width;
 6126|      0|                auto max_width_view = take_width(rng, initial_width);
 6127|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|      0|                                  .transform_error(make_eof_scan_error));
 6129|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6130|      0|            }
 6131|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6132|      0|                            make_eof_scan_error));
 6133|       |
 6134|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                return result_type{
 6136|      0|                    it,
 6137|      0|                    calculate_text_width(make_contiguous_buffer(
 6138|      0|                                             ranges::subrange{rng.begin(), it})
 6139|      0|                                             .view())};
 6140|      0|            }
 6141|      0|            return result_type{it, 0};
 6142|      0|        }
 6143|   671k|        return result_type{rng.begin(), 0};
 6144|   671k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6214|   244k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|   244k|                          basic_contiguous_scan_context<char_type>>) {
 6219|   244k|            auto rd = make_reader<T, char_type>();
 6220|   244k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   244k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 244k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|   244k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|   244k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|   244k|    {
 6150|   244k|        const bool need_skipped_width =
 6151|   244k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 244k]
  |  Branch (6151:33): [True: 0, False: 244k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|   244k|        auto it = rng.begin();
 6155|   244k|        std::ptrdiff_t prefix_width = 0;
 6156|   244k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 244k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|   244k|        else {
 6164|   244k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   244k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   244k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   244k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.48k, False: 240k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.48k|    }                                                  \
  |  |  |  | 3939|   244k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|   240k|            std::tie(it, prefix_width) = prefix_result;
 6166|   240k|        }
 6167|   240k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|   240k|        std::ptrdiff_t value_width = 0;
 6171|   240k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 240k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|   240k|        else {
 6187|   240k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   240k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   240k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 19.3k, False: 221k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  19.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  19.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  19.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  19.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  19.3k|    }                                                  \
  |  | 3939|   240k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|   221k|                                             specs, value, loc));
 6189|       |
 6190|   221k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 221k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|   221k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|   221k|        std::ptrdiff_t postfix_width = 0;
 6199|   221k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 218k, False: 3.07k]
  ------------------
 6200|   218k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   218k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   218k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   218k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 218k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   218k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|   218k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|   218k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|   218k|                                 value_width));
 6204|   218k|            std::tie(it, postfix_width) = postfix_result;
 6205|   218k|        }
 6206|       |
 6207|   221k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   221k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 221k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|   221k|            specs, prefix_width, value_width, postfix_width));
 6209|   221k|        return it;
 6210|   221k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6214|   250k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|   250k|                          basic_contiguous_scan_context<char_type>>) {
 6219|   250k|            auto rd = make_reader<T, char_type>();
 6220|   250k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   250k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 250k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|   250k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|   250k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|   250k|    {
 6150|   250k|        const bool need_skipped_width =
 6151|   250k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 250k]
  |  Branch (6151:33): [True: 0, False: 250k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|   250k|        auto it = rng.begin();
 6155|   250k|        std::ptrdiff_t prefix_width = 0;
 6156|   250k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 250k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|   250k|        else {
 6164|   250k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   250k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   250k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   250k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 3.84k, False: 247k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  3.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  3.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  3.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  3.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  3.84k|    }                                                  \
  |  |  |  | 3939|   250k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|   247k|            std::tie(it, prefix_width) = prefix_result;
 6166|   247k|        }
 6167|   247k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|   247k|        std::ptrdiff_t value_width = 0;
 6171|   247k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 247k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|   247k|        else {
 6187|   247k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 19.0k, False: 228k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  19.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  19.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  19.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  19.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  19.0k|    }                                                  \
  |  | 3939|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|   228k|                                             specs, value, loc));
 6189|       |
 6190|   228k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 228k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|   228k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|   228k|        std::ptrdiff_t postfix_width = 0;
 6199|   228k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 224k, False: 3.39k]
  ------------------
 6200|   224k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   224k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   224k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   224k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 224k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   224k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|   224k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|   224k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|   224k|                                 value_width));
 6204|   224k|            std::tie(it, postfix_width) = postfix_result;
 6205|   224k|        }
 6206|       |
 6207|   228k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   228k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 228k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|   228k|            specs, prefix_width, value_width, postfix_width));
 6209|   228k|        return it;
 6210|   228k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6214|   255k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|   255k|                          basic_contiguous_scan_context<char_type>>) {
 6219|   255k|            auto rd = make_reader<T, char_type>();
 6220|   255k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   255k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 255k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|   255k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|   255k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|   255k|    {
 6150|   255k|        const bool need_skipped_width =
 6151|   255k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 255k]
  |  Branch (6151:33): [True: 0, False: 255k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|   255k|        auto it = rng.begin();
 6155|   255k|        std::ptrdiff_t prefix_width = 0;
 6156|   255k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 255k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|   255k|        else {
 6164|   255k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   255k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   255k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   255k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.09k, False: 250k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.09k|    }                                                  \
  |  |  |  | 3939|   255k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|   250k|            std::tie(it, prefix_width) = prefix_result;
 6166|   250k|        }
 6167|   250k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|   250k|        std::ptrdiff_t value_width = 0;
 6171|   250k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 250k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|   250k|        else {
 6187|   250k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   250k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   250k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 18.7k, False: 232k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  18.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  18.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  18.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  18.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  18.7k|    }                                                  \
  |  | 3939|   250k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|   232k|                                             specs, value, loc));
 6189|       |
 6190|   232k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 232k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|   232k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|   232k|        std::ptrdiff_t postfix_width = 0;
 6199|   232k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 228k, False: 3.61k]
  ------------------
 6200|   228k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   228k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   228k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   228k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 228k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   228k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|   228k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|   228k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|   228k|                                 value_width));
 6204|   228k|            std::tie(it, postfix_width) = postfix_result;
 6205|   228k|        }
 6206|       |
 6207|   232k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   232k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 232k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|   232k|            specs, prefix_width, value_width, postfix_width));
 6209|   232k|        return it;
 6210|   232k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5823|   155k|{
 5824|   155k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 435, False: 155k]
  |  |  ------------------
  ------------------
 5825|    435|        return unexpected(e);
 5826|    435|    }
 5827|       |
 5828|   155k|    if (!is_required) {
  ------------------
  |  Branch (5828:9): [True: 0, False: 155k]
  ------------------
 5829|      0|        return range.begin();
 5830|      0|    }
 5831|       |
 5832|   155k|    return skip_classic_whitespace(range);
 5833|   155k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5899|  45.2k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  45.2k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  45.2k|            auto rd = make_reader<T, char_type>();
 5905|  45.2k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  45.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  45.2k|    {
 5892|  45.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  45.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  45.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  45.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  45.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 288, False: 44.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    288|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    288|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    288|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    288|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    288|    }                                                  \
  |  |  |  | 3939|  45.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  44.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  44.9k|                        .transform_error(make_eof_scan_error));
 5894|  44.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  45.2k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4173|  44.9k|    {
 4174|  44.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  44.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4175|       |
 4176|  44.9k|        float_reader<CharT> rd{};
 4177|  44.9k|        return read_impl<Range>(
 4178|  44.9k|            range, rd,
 4179|  44.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|  44.9k|                return r.read_source(SCN_FWD(args)...);
 4181|  44.9k|            },
 4182|  44.9k|            value);
 4183|  44.9k|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3688|   309k|    constexpr float_reader() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  44.9k|        : m_fptr([](storage fn,
  743|  44.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  44.9k|              cvref<T> obj = *get<T>(fn);
  745|  44.9k|              if constexpr (std::is_void_v<R>) {
  746|  44.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  44.9k|              }
  748|  44.9k|              else {
  749|  44.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  44.9k|              }
  751|  44.9k|          }),
  752|  44.9k|          m_storage(std::addressof(f))
  753|  44.9k|    {
  754|  44.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  44.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  44.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  44.9k|              else {
  749|  44.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  44.9k|              }
  751|  44.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  44.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  44.9k|        else if constexpr (std::is_object_v<T>) {
  688|  44.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  44.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4179|  44.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|  44.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  44.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4181|  44.9k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  44.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  44.9k|        {
  662|  44.9k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5899|  54.6k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  54.6k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  54.6k|            auto rd = make_reader<T, char_type>();
 5905|  54.6k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  54.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  54.6k|    {
 5892|  54.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  54.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  54.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  54.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 324, False: 54.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    324|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    324|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    324|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    324|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    324|    }                                                  \
  |  |  |  | 3939|  54.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  54.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  54.3k|                        .transform_error(make_eof_scan_error));
 5894|  54.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  54.6k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4173|  54.3k|    {
 4174|  54.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  54.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4175|       |
 4176|  54.3k|        float_reader<CharT> rd{};
 4177|  54.3k|        return read_impl<Range>(
 4178|  54.3k|            range, rd,
 4179|  54.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|  54.3k|                return r.read_source(SCN_FWD(args)...);
 4181|  54.3k|            },
 4182|  54.3k|            value);
 4183|  54.3k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  54.3k|        : m_fptr([](storage fn,
  743|  54.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.3k|              cvref<T> obj = *get<T>(fn);
  745|  54.3k|              if constexpr (std::is_void_v<R>) {
  746|  54.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  54.3k|              }
  748|  54.3k|              else {
  749|  54.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  54.3k|              }
  751|  54.3k|          }),
  752|  54.3k|          m_storage(std::addressof(f))
  753|  54.3k|    {
  754|  54.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  54.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  54.3k|              else {
  749|  54.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  54.3k|              }
  751|  54.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  54.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  54.3k|        else if constexpr (std::is_object_v<T>) {
  688|  54.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  54.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4179|  54.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|  54.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  54.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4181|  54.3k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  54.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  54.3k|        {
  662|  54.3k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5899|  55.9k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|  55.9k|                          basic_contiguous_scan_context<char_type>>) {
 5904|  55.9k|            auto rd = make_reader<T, char_type>();
 5905|  55.9k|            return impl(rd, range, value);
 5906|       |        }
 5907|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5908|       |            auto rd = make_reader<T, char_type>();
 5909|       |            if (!is_segment_contiguous(range)) {
 5910|       |                return impl(rd, range, value);
 5911|       |            }
 5912|       |            auto crange = get_as_contiguous(range);
 5913|       |            SCN_TRY(it, impl(rd, crange, value));
 5914|       |            return ranges::next(range.begin(),
 5915|       |                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  55.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5891|  55.9k|    {
 5892|  55.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  55.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  55.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  55.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  55.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 351, False: 55.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    351|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    351|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    351|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    351|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    351|    }                                                  \
  |  |  |  | 3939|  55.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  55.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  55.6k|                        .transform_error(make_eof_scan_error));
 5894|  55.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  55.9k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4173|  55.6k|    {
 4174|  55.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  55.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4175|       |
 4176|  55.6k|        float_reader<CharT> rd{};
 4177|  55.6k|        return read_impl<Range>(
 4178|  55.6k|            range, rd,
 4179|  55.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|  55.6k|                return r.read_source(SCN_FWD(args)...);
 4181|  55.6k|            },
 4182|  55.6k|            value);
 4183|  55.6k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  55.6k|        : m_fptr([](storage fn,
  743|  55.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  55.6k|              cvref<T> obj = *get<T>(fn);
  745|  55.6k|              if constexpr (std::is_void_v<R>) {
  746|  55.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  55.6k|              }
  748|  55.6k|              else {
  749|  55.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  55.6k|              }
  751|  55.6k|          }),
  752|  55.6k|          m_storage(std::addressof(f))
  753|  55.6k|    {
  754|  55.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  55.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  55.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  55.6k|              else {
  749|  55.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  55.6k|              }
  751|  55.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  55.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  55.6k|        else if constexpr (std::is_object_v<T>) {
  688|  55.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  55.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4179|  55.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|  55.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  55.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4181|  55.6k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  55.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  55.6k|        {
  662|  55.6k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2974|   430k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   430k|    static_cast<    \
  |  |  935|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2975|   430k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2976|   430k|          m_current(m_range.begin())
 2977|   430k|    {
 2978|   430k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2986|   723k|    {
 2987|   723k|        return m_range.end();
 2988|   723k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3001|   293k|    {
 3002|   293k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   293k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   293k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3003|   293k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3004|   293k|            if (it == nullptr) {
  ------------------
  |  Branch (3004:17): [True: 0, False: 293k]
  ------------------
 3005|      0|                it = end();
 3006|      0|            }
 3007|   293k|        }
 3008|   293k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   293k|    static_cast<    \
  |  |  935|   293k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3009|   293k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 2991|   430k|    {
 2992|   430k|        return ranges::subrange{begin(), end()};
 2993|   430k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6062|   430k|    {
 6063|   430k|        const bool need_skipped_width =
 6064|   430k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6064:13): [True: 0, False: 430k]
  |  Branch (6064:33): [True: 0, False: 430k]
  ------------------
 6065|   430k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6066|       |
 6067|       |        // Read prefix
 6068|   430k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6068:13): [True: 0, False: 430k]
  ------------------
 6069|   430k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6069:13): [True: 0, False: 430k]
  ------------------
 6070|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6071|      0|                             need_skipped_width);
 6072|      0|        }
 6073|   430k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6073:13): [True: 430k, False: 0]
  |  Branch (6073:56): [True: 430k, False: 0]
  ------------------
 6074|       |            // Default alignment:
 6075|       |            // Skip preceding whitespace, if required by the reader
 6076|   430k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6076:17): [True: 0, False: 430k]
  ------------------
 6077|      0|                auto max_width_view = take_width(rng, specs.precision);
 6078|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6079|      0|                                  .transform_error(make_eof_scan_error));
 6080|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6081|      0|            }
 6082|   857k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   430k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   430k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   430k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.84k, False: 427k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.84k|    }                                                  \
  |  |  |  | 3939|   430k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6083|   857k|                            make_eof_scan_error));
 6084|       |
 6085|   857k|            if (need_skipped_width) {
  ------------------
  |  Branch (6085:17): [True: 0, False: 427k]
  ------------------
 6086|      0|                return result_type{
 6087|      0|                    it,
 6088|      0|                    calculate_text_width(make_contiguous_buffer(
 6089|      0|                                             ranges::subrange{rng.begin(), it})
 6090|      0|                                             .view())};
 6091|      0|            }
 6092|   427k|            return result_type{it, 0};
 6093|   857k|        }
 6094|       |
 6095|      0|        return result_type{rng.begin(), 0};
 6096|   430k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6104|   292k|    {
 6105|   292k|        const bool need_skipped_width =
 6106|   292k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6106:13): [True: 0, False: 292k]
  |  Branch (6106:33): [True: 0, False: 292k]
  ------------------
 6107|   292k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6108|       |
 6109|   292k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6109:13): [True: 0, False: 292k]
  ------------------
 6110|   292k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6110:13): [True: 0, False: 292k]
  ------------------
 6111|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6111:17): [True: 0, False: 0]
  ------------------
 6112|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6112:17): [True: 0, False: 0]
  ------------------
 6113|      0|                return result_type{rng.begin(), 0};
 6114|      0|            }
 6115|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6116|      0|                             specs.fill, need_skipped_width);
 6117|      0|        }
 6118|   292k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6118:13): [True: 292k, False: 0]
  ------------------
 6119|   292k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6119:13): [True: 0, False: 292k]
  ------------------
 6120|   292k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6120:15): [True: 0, False: 0]
  |  Branch (6120:35): [True: 0, False: 0]
  ------------------
 6121|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6121:15): [True: 0, False: 0]
  ------------------
 6122|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6122:15): [True: 0, False: 0]
  ------------------
 6123|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                const auto initial_width =
 6125|      0|                    specs.precision - prefix_width - value_width;
 6126|      0|                auto max_width_view = take_width(rng, initial_width);
 6127|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|      0|                                  .transform_error(make_eof_scan_error));
 6129|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6130|      0|            }
 6131|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6132|      0|                            make_eof_scan_error));
 6133|       |
 6134|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6134:17): [True: 0, False: 0]
  ------------------
 6135|      0|                return result_type{
 6136|      0|                    it,
 6137|      0|                    calculate_text_width(make_contiguous_buffer(
 6138|      0|                                             ranges::subrange{rng.begin(), it})
 6139|      0|                                             .view())};
 6140|      0|            }
 6141|      0|            return result_type{it, 0};
 6142|      0|        }
 6143|   292k|        return result_type{rng.begin(), 0};
 6144|   292k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6214|   134k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|   134k|                          basic_contiguous_scan_context<char_type>>) {
 6219|   134k|            auto rd = make_reader<T, char_type>();
 6220|   134k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   134k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 134k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|   134k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|   134k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|   134k|    {
 6150|   134k|        const bool need_skipped_width =
 6151|   134k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 134k]
  |  Branch (6151:33): [True: 0, False: 134k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|   134k|        auto it = rng.begin();
 6155|   134k|        std::ptrdiff_t prefix_width = 0;
 6156|   134k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 134k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|   134k|        else {
 6164|   134k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 892, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    892|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    892|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    892|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    892|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    892|    }                                                  \
  |  |  |  | 3939|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|   133k|            std::tie(it, prefix_width) = prefix_result;
 6166|   133k|        }
 6167|   133k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|   133k|        std::ptrdiff_t value_width = 0;
 6171|   133k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 133k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|   133k|        else {
 6187|   133k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 44.8k, False: 88.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  44.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  44.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  44.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  44.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  44.8k|    }                                                  \
  |  | 3939|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|  88.7k|                                             specs, value, loc));
 6189|       |
 6190|  88.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 88.7k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|  88.7k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|  88.7k|        std::ptrdiff_t postfix_width = 0;
 6199|  88.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 88.3k, False: 370]
  ------------------
 6200|  88.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  88.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  88.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  88.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  88.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 88.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  88.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  88.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|  88.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|  88.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|  88.3k|                                 value_width));
 6204|  88.3k|            std::tie(it, postfix_width) = postfix_result;
 6205|  88.3k|        }
 6206|       |
 6207|  88.7k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  88.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  88.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 88.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|  88.7k|            specs, prefix_width, value_width, postfix_width));
 6209|  88.7k|        return it;
 6210|  88.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6214|   147k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|   147k|                          basic_contiguous_scan_context<char_type>>) {
 6219|   147k|            auto rd = make_reader<T, char_type>();
 6220|   147k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   147k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 147k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|   147k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|   147k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|   147k|    {
 6150|   147k|        const bool need_skipped_width =
 6151|   147k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 147k]
  |  Branch (6151:33): [True: 0, False: 147k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|   147k|        auto it = rng.begin();
 6155|   147k|        std::ptrdiff_t prefix_width = 0;
 6156|   147k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 147k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|   147k|        else {
 6164|   147k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   147k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   147k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   147k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 956, False: 146k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    956|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    956|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    956|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    956|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    956|    }                                                  \
  |  |  |  | 3939|   147k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|   146k|            std::tie(it, prefix_width) = prefix_result;
 6166|   146k|        }
 6167|   146k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|   146k|        std::ptrdiff_t value_width = 0;
 6171|   146k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 146k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|   146k|        else {
 6187|   146k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   146k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   146k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 44.7k, False: 101k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  44.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  44.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  44.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  44.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  44.7k|    }                                                  \
  |  | 3939|   146k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|   101k|                                             specs, value, loc));
 6189|       |
 6190|   101k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 101k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|   101k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|   101k|        std::ptrdiff_t postfix_width = 0;
 6199|   101k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 100k, False: 402]
  ------------------
 6200|   100k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|   100k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|   100k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|   100k|                                 value_width));
 6204|   100k|            std::tie(it, postfix_width) = postfix_result;
 6205|   100k|        }
 6206|       |
 6207|   101k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   101k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 101k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|   101k|            specs, prefix_width, value_width, postfix_width));
 6209|   101k|        return it;
 6210|   101k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6214|   148k|    {
 6215|       |        if constexpr (!detail::is_type_disabled<T> &&
 6216|       |                      std::is_same_v<
 6217|       |                          context_type,
 6218|   148k|                          basic_contiguous_scan_context<char_type>>) {
 6219|   148k|            auto rd = make_reader<T, char_type>();
 6220|   148k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   148k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 148k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6221|   148k|            return impl(rd, range, value);
 6222|       |        }
 6223|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6224|       |            auto rd = make_reader<T, char_type>();
 6225|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6226|       |
 6227|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6228|       |                specs.width != 0) {
 6229|       |                return impl(rd, range, value);
 6230|       |            }
 6231|       |
 6232|       |            auto crange = get_as_contiguous(range);
 6233|       |            SCN_TRY(it, impl(rd, crange, value));
 6234|       |            return ranges::next(range.begin(),
 6235|       |                                ranges::distance(crange.begin(), it));
 6236|       |        }
 6237|       |        else {
 6238|       |            SCN_EXPECT(false);
 6239|       |            SCN_UNREACHABLE;
 6240|       |        }
 6241|   148k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6149|   148k|    {
 6150|   148k|        const bool need_skipped_width =
 6151|   148k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6151:13): [True: 0, False: 148k]
  |  Branch (6151:33): [True: 0, False: 148k]
  ------------------
 6152|       |
 6153|       |        // Read prefix
 6154|   148k|        auto it = rng.begin();
 6155|   148k|        std::ptrdiff_t prefix_width = 0;
 6156|   148k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6156:13): [True: 0, False: 148k]
  ------------------
 6157|      0|            auto max_width_view = take_width(rng, specs.precision);
 6158|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6159|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6160|      0|            it = prefix_result.first.base();
 6161|      0|            prefix_width = prefix_result.second;
 6162|      0|        }
 6163|   148k|        else {
 6164|   148k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   148k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   148k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   148k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 996, False: 147k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    996|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    996|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    996|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    996|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    996|    }                                                  \
  |  |  |  | 3939|   148k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6165|   147k|            std::tie(it, prefix_width) = prefix_result;
 6166|   147k|        }
 6167|   147k|        auto prefix_end_it = it;
 6168|       |
 6169|       |        // Read value
 6170|   147k|        std::ptrdiff_t value_width = 0;
 6171|   147k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6171:13): [True: 0, False: 147k]
  ------------------
 6172|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6172:17): [True: 0, False: 0]
  ------------------
 6173|      0|                return detail::unexpected_scan_error(
 6174|      0|                    scan_error::invalid_fill,
 6175|      0|                    "Too many fill characters before value, "
 6176|      0|                    "precision exceeded before reading value");
 6177|      0|            }
 6178|       |
 6179|      0|            const auto initial_width = specs.precision - prefix_width;
 6180|      0|            auto max_width_view =
 6181|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6182|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6183|      0|            it = w_it.base();
 6184|      0|            value_width = initial_width - w_it.count();
 6185|      0|        }
 6186|   147k|        else {
 6187|   147k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   147k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   147k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 44.7k, False: 103k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  44.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  44.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  44.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  44.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  44.7k|    }                                                  \
  |  | 3939|   147k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6188|   103k|                                             specs, value, loc));
 6189|       |
 6190|   103k|            if (need_skipped_width) {
  ------------------
  |  Branch (6190:17): [True: 0, False: 103k]
  ------------------
 6191|      0|                value_width = calculate_text_width(
 6192|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6193|      0|                        .view());
 6194|      0|            }
 6195|   103k|        }
 6196|       |
 6197|       |        // Read postfix
 6198|   103k|        std::ptrdiff_t postfix_width = 0;
 6199|   103k|        if (it != rng.end()) {
  ------------------
  |  Branch (6199:13): [True: 102k, False: 420]
  ------------------
 6200|   102k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6201|   102k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6202|   102k|                                 rd.skip_ws_before_read(), prefix_width,
 6203|   102k|                                 value_width));
 6204|   102k|            std::tie(it, postfix_width) = postfix_result;
 6205|   102k|        }
 6206|       |
 6207|   103k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   103k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 103k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6208|   103k|            specs, prefix_width, value_width, postfix_width));
 6209|   103k|        return it;
 6210|   103k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5823|   155k|{
 5824|   155k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 435, False: 155k]
  |  |  ------------------
  ------------------
 5825|    435|        return unexpected(e);
 5826|    435|    }
 5827|       |
 5828|   155k|    if (!is_required) {
  ------------------
  |  Branch (5828:9): [True: 0, False: 155k]
  ------------------
 5829|      0|        return range.begin();
 5830|      0|    }
 5831|       |
 5832|   155k|    return skip_classic_whitespace(range);
 5833|   155k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5899|  45.1k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  45.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  45.1k|            auto rd = make_reader<T, char_type>();
 5909|  45.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 45.1k, False: 0]
  ------------------
 5910|  45.1k|                return impl(rd, range, value);
 5911|  45.1k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  45.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  45.1k|    {
 5892|  45.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  45.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  45.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  45.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  45.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 288, False: 44.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    288|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    288|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    288|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    288|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    288|    }                                                  \
  |  |  |  | 3939|  45.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  44.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  44.8k|                        .transform_error(make_eof_scan_error));
 5894|  44.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  45.1k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4173|  44.8k|    {
 4174|  44.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  44.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4175|       |
 4176|  44.8k|        float_reader<CharT> rd{};
 4177|  44.8k|        return read_impl<Range>(
 4178|  44.8k|            range, rd,
 4179|  44.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|  44.8k|                return r.read_source(SCN_FWD(args)...);
 4181|  44.8k|            },
 4182|  44.8k|            value);
 4183|  44.8k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  44.8k|        : m_fptr([](storage fn,
  743|  44.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  44.8k|              cvref<T> obj = *get<T>(fn);
  745|  44.8k|              if constexpr (std::is_void_v<R>) {
  746|  44.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  44.8k|              }
  748|  44.8k|              else {
  749|  44.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  44.8k|              }
  751|  44.8k|          }),
  752|  44.8k|          m_storage(std::addressof(f))
  753|  44.8k|    {
  754|  44.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  44.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  44.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  44.8k|              else {
  749|  44.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  44.8k|              }
  751|  44.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  44.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  44.8k|        else if constexpr (std::is_object_v<T>) {
  688|  44.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  44.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4179|  44.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|  44.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  44.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4181|  44.8k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  44.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  44.8k|        {
  662|  44.8k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5899|  54.6k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  54.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  54.6k|            auto rd = make_reader<T, char_type>();
 5909|  54.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 54.6k, False: 0]
  ------------------
 5910|  54.6k|                return impl(rd, range, value);
 5911|  54.6k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  54.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  54.6k|    {
 5892|  54.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  54.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  54.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  54.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 324, False: 54.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    324|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    324|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    324|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    324|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    324|    }                                                  \
  |  |  |  | 3939|  54.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  54.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  54.2k|                        .transform_error(make_eof_scan_error));
 5894|  54.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  54.6k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4173|  54.2k|    {
 4174|  54.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  54.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4175|       |
 4176|  54.2k|        float_reader<CharT> rd{};
 4177|  54.2k|        return read_impl<Range>(
 4178|  54.2k|            range, rd,
 4179|  54.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|  54.2k|                return r.read_source(SCN_FWD(args)...);
 4181|  54.2k|            },
 4182|  54.2k|            value);
 4183|  54.2k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  54.2k|        : m_fptr([](storage fn,
  743|  54.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.2k|              cvref<T> obj = *get<T>(fn);
  745|  54.2k|              if constexpr (std::is_void_v<R>) {
  746|  54.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  54.2k|              }
  748|  54.2k|              else {
  749|  54.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  54.2k|              }
  751|  54.2k|          }),
  752|  54.2k|          m_storage(std::addressof(f))
  753|  54.2k|    {
  754|  54.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  54.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  54.2k|              else {
  749|  54.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  54.2k|              }
  751|  54.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  54.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  54.2k|        else if constexpr (std::is_object_v<T>) {
  688|  54.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  54.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4179|  54.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|  54.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  54.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4181|  54.2k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  54.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  54.2k|        {
  662|  54.2k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5899|  55.9k|    {
 5900|       |        if constexpr (!detail::is_type_disabled<T> &&
 5901|       |                      std::is_same_v<
 5902|       |                          context_type,
 5903|       |                          basic_contiguous_scan_context<char_type>>) {
 5904|       |            auto rd = make_reader<T, char_type>();
 5905|       |            return impl(rd, range, value);
 5906|       |        }
 5907|  55.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5908|  55.9k|            auto rd = make_reader<T, char_type>();
 5909|  55.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5909:17): [True: 55.9k, False: 0]
  ------------------
 5910|  55.9k|                return impl(rd, range, value);
 5911|  55.9k|            }
 5912|      0|            auto crange = get_as_contiguous(range);
 5913|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5914|      0|            return ranges::next(range.begin(),
 5915|      0|                                ranges::distance(crange.begin(), it));
 5916|       |        }
 5917|       |        else {
 5918|       |            SCN_EXPECT(false);
 5919|       |            SCN_UNREACHABLE;
 5920|       |        }
 5921|  55.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5891|  55.9k|    {
 5892|  55.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  55.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  55.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  55.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  55.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 351, False: 55.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    351|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    351|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    351|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    351|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    351|    }                                                  \
  |  |  |  | 3939|  55.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  55.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5893|  55.5k|                        .transform_error(make_eof_scan_error));
 5894|  55.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5895|  55.9k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4173|  55.5k|    {
 4174|  55.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  55.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4175|       |
 4176|  55.5k|        float_reader<CharT> rd{};
 4177|  55.5k|        return read_impl<Range>(
 4178|  55.5k|            range, rd,
 4179|  55.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|  55.5k|                return r.read_source(SCN_FWD(args)...);
 4181|  55.5k|            },
 4182|  55.5k|            value);
 4183|  55.5k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  55.5k|        : m_fptr([](storage fn,
  743|  55.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  55.5k|              cvref<T> obj = *get<T>(fn);
  745|  55.5k|              if constexpr (std::is_void_v<R>) {
  746|  55.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  55.5k|              }
  748|  55.5k|              else {
  749|  55.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  55.5k|              }
  751|  55.5k|          }),
  752|  55.5k|          m_storage(std::addressof(f))
  753|  55.5k|    {
  754|  55.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  55.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  55.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  55.5k|              else {
  749|  55.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  55.5k|              }
  751|  55.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  55.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  55.5k|        else if constexpr (std::is_object_v<T>) {
  688|  55.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  55.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4179|  55.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4180|  55.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  936|  55.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4181|  55.5k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  55.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  55.5k|        {
  662|  55.5k|        }

LLVMFuzzerTestOneInput:
   54|  2.28k|{
   55|  2.28k|    scn::fuzz::run(data, size);
   56|  2.28k|    return 0;
   57|  2.28k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  2.28k|{
   33|  2.28k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.28k]
  |  Branch (33:35): [True: 0, False: 2.28k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.28k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  2.28k|    const auto& f =
   40|  2.28k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.28k|    do_basic_run(sv, f);
   42|       |
   43|  2.28k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  2.28k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  2.28k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.28k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.28k, False: 0]
  ------------------
   47|  2.28k|        do_basic_run(wsv_transcode, wf);
   48|  2.28k|    }
   49|  2.28k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.28k|{
   25|  2.28k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.28k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.28k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.28k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.28k|{
   25|  2.28k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.28k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.28k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.28k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.57k|{
   25|  4.57k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.57k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.57k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.57k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.57k|{
   25|  4.57k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.57k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.57k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.57k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  2.28k|{
   52|  2.28k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|  2.28k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.28k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.28k|    string_buffer.resize(size);
   56|  2.28k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  2.28k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  2.28k|    const auto wsv_reinterpret_size =
   61|  2.28k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 69, False: 2.21k]
  ------------------
   62|  2.28k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  2.28k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  2.28k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  2.28k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  2.28k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  2.28k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  2.28k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.28k|{
  122|  2.28k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.28k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.28k|    buf.resize(sizeof...(Args));
  125|  2.28k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.28k|    return buf;
  127|  2.28k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  2.28k|{
  108|  2.28k|    if constexpr (std::is_same_v<CharT, char>) {
  109|  2.28k|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|  2.28k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.28k|{
  185|  2.28k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.28k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.28k|                                   format_strings);
  188|  2.28k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.28k|{
  133|       |    // Regular scan
  134|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.7k, False: 2.28k]
  ------------------
  135|  13.7k|        auto it = scn::ranges::begin(source);
  136|   156k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   156k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   156k|            auto result = scn::scan<T>(
  139|   156k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   156k|                scn::runtime_format(f));
  141|   156k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.7k, False: 142k]
  ------------------
  142|  13.7k|                break;
  143|  13.7k|            }
  144|   142k|            it = result->begin();
  145|   142k|        }
  146|  13.7k|    }
  147|       |
  148|       |    // scan localized
  149|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.7k, False: 2.28k]
  ------------------
  150|  13.7k|        auto it = scn::ranges::begin(source);
  151|   156k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   156k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   156k|            auto result = scn::scan<T>(
  154|   156k|                global_locale,
  155|   156k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   156k|                scn::runtime_format(f));
  157|   156k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.7k, False: 142k]
  ------------------
  158|  13.7k|                break;
  159|  13.7k|            }
  160|   142k|            it = result->begin();
  161|   142k|        }
  162|  13.7k|    }
  163|       |
  164|       |    // scan_value
  165|  2.28k|    {
  166|  2.28k|        auto it = scn::ranges::begin(source);
  167|  34.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  34.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  34.0k|            auto result = scn::scan_value<T>(
  170|  34.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  34.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.28k, False: 31.7k]
  ------------------
  172|  2.28k|                break;
  173|  2.28k|            }
  174|  31.7k|            it = result->begin();
  175|  31.7k|        }
  176|  2.28k|    }
  177|  2.28k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.28k|{
  133|       |    // Regular scan
  134|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.7k, False: 2.28k]
  ------------------
  135|  13.7k|        auto it = scn::ranges::begin(source);
  136|   160k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   160k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   160k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   160k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   160k|            auto result = scn::scan<T>(
  139|   160k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   160k|                scn::runtime_format(f));
  141|   160k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.7k, False: 147k]
  ------------------
  142|  13.7k|                break;
  143|  13.7k|            }
  144|   147k|            it = result->begin();
  145|   147k|        }
  146|  13.7k|    }
  147|       |
  148|       |    // scan localized
  149|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.7k, False: 2.28k]
  ------------------
  150|  13.7k|        auto it = scn::ranges::begin(source);
  151|   160k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   160k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   160k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   160k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   160k|            auto result = scn::scan<T>(
  154|   160k|                global_locale,
  155|   160k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   160k|                scn::runtime_format(f));
  157|   160k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.7k, False: 147k]
  ------------------
  158|  13.7k|                break;
  159|  13.7k|            }
  160|   147k|            it = result->begin();
  161|   147k|        }
  162|  13.7k|    }
  163|       |
  164|       |    // scan_value
  165|  2.28k|    {
  166|  2.28k|        auto it = scn::ranges::begin(source);
  167|  35.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  35.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  35.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  35.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  35.3k|            auto result = scn::scan_value<T>(
  170|  35.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  35.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.28k, False: 33.0k]
  ------------------
  172|  2.28k|                break;
  173|  2.28k|            }
  174|  33.0k|            it = result->begin();
  175|  33.0k|        }
  176|  2.28k|    }
  177|  2.28k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.28k|{
  133|       |    // Regular scan
  134|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.7k, False: 2.28k]
  ------------------
  135|  13.7k|        auto it = scn::ranges::begin(source);
  136|   163k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   163k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   163k|            auto result = scn::scan<T>(
  139|   163k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   163k|                scn::runtime_format(f));
  141|   163k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.7k, False: 150k]
  ------------------
  142|  13.7k|                break;
  143|  13.7k|            }
  144|   150k|            it = result->begin();
  145|   150k|        }
  146|  13.7k|    }
  147|       |
  148|       |    // scan localized
  149|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.7k, False: 2.28k]
  ------------------
  150|  13.7k|        auto it = scn::ranges::begin(source);
  151|   163k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   163k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   163k|            auto result = scn::scan<T>(
  154|   163k|                global_locale,
  155|   163k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   163k|                scn::runtime_format(f));
  157|   163k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.7k, False: 150k]
  ------------------
  158|  13.7k|                break;
  159|  13.7k|            }
  160|   150k|            it = result->begin();
  161|   150k|        }
  162|  13.7k|    }
  163|       |
  164|       |    // scan_value
  165|  2.28k|    {
  166|  2.28k|        auto it = scn::ranges::begin(source);
  167|  36.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  36.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  36.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  36.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  36.2k|            auto result = scn::scan_value<T>(
  170|  36.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  36.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.28k, False: 33.9k]
  ------------------
  172|  2.28k|                break;
  173|  2.28k|            }
  174|  33.9k|            it = result->begin();
  175|  33.9k|        }
  176|  2.28k|    }
  177|  2.28k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.28k|{
  133|       |    // Regular scan
  134|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.7k, False: 2.28k]
  ------------------
  135|  13.7k|        auto it = scn::ranges::begin(source);
  136|   179k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   179k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   179k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   179k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   179k|            auto result = scn::scan<T>(
  139|   179k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   179k|                scn::runtime_format(f));
  141|   179k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.7k, False: 165k]
  ------------------
  142|  13.7k|                break;
  143|  13.7k|            }
  144|   165k|            it = result->begin();
  145|   165k|        }
  146|  13.7k|    }
  147|       |
  148|       |    // scan localized
  149|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.7k, False: 2.28k]
  ------------------
  150|  13.7k|        auto it = scn::ranges::begin(source);
  151|   179k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   179k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   179k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   179k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   179k|            auto result = scn::scan<T>(
  154|   179k|                global_locale,
  155|   179k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   179k|                scn::runtime_format(f));
  157|   179k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.7k, False: 165k]
  ------------------
  158|  13.7k|                break;
  159|  13.7k|            }
  160|   165k|            it = result->begin();
  161|   165k|        }
  162|  13.7k|    }
  163|       |
  164|       |    // scan_value
  165|  2.28k|    {
  166|  2.28k|        auto it = scn::ranges::begin(source);
  167|  37.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  37.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  37.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  37.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  37.0k|            auto result = scn::scan_value<T>(
  170|  37.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  37.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.28k, False: 34.7k]
  ------------------
  172|  2.28k|                break;
  173|  2.28k|            }
  174|  34.7k|            it = result->begin();
  175|  34.7k|        }
  176|  2.28k|    }
  177|  2.28k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.28k|{
  133|       |    // Regular scan
  134|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.7k, False: 2.28k]
  ------------------
  135|  13.7k|        auto it = scn::ranges::begin(source);
  136|   186k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   186k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   186k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   186k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   186k|            auto result = scn::scan<T>(
  139|   186k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   186k|                scn::runtime_format(f));
  141|   186k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.7k, False: 172k]
  ------------------
  142|  13.7k|                break;
  143|  13.7k|            }
  144|   172k|            it = result->begin();
  145|   172k|        }
  146|  13.7k|    }
  147|       |
  148|       |    // scan localized
  149|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.7k, False: 2.28k]
  ------------------
  150|  13.7k|        auto it = scn::ranges::begin(source);
  151|   186k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   186k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   186k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   186k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   186k|            auto result = scn::scan<T>(
  154|   186k|                global_locale,
  155|   186k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   186k|                scn::runtime_format(f));
  157|   186k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.7k, False: 172k]
  ------------------
  158|  13.7k|                break;
  159|  13.7k|            }
  160|   172k|            it = result->begin();
  161|   172k|        }
  162|  13.7k|    }
  163|       |
  164|       |    // scan_value
  165|  2.28k|    {
  166|  2.28k|        auto it = scn::ranges::begin(source);
  167|  38.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  38.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  38.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  38.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  38.9k|            auto result = scn::scan_value<T>(
  170|  38.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  38.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.28k, False: 36.6k]
  ------------------
  172|  2.28k|                break;
  173|  2.28k|            }
  174|  36.6k|            it = result->begin();
  175|  36.6k|        }
  176|  2.28k|    }
  177|  2.28k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.28k|{
  133|       |    // Regular scan
  134|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.7k, False: 2.28k]
  ------------------
  135|  13.7k|        auto it = scn::ranges::begin(source);
  136|   189k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   189k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   189k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   189k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   189k|            auto result = scn::scan<T>(
  139|   189k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   189k|                scn::runtime_format(f));
  141|   189k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.7k, False: 175k]
  ------------------
  142|  13.7k|                break;
  143|  13.7k|            }
  144|   175k|            it = result->begin();
  145|   175k|        }
  146|  13.7k|    }
  147|       |
  148|       |    // scan localized
  149|  13.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.7k, False: 2.28k]
  ------------------
  150|  13.7k|        auto it = scn::ranges::begin(source);
  151|   189k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   189k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   189k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   189k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   189k|            auto result = scn::scan<T>(
  154|   189k|                global_locale,
  155|   189k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   189k|                scn::runtime_format(f));
  157|   189k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.7k, False: 175k]
  ------------------
  158|  13.7k|                break;
  159|  13.7k|            }
  160|   175k|            it = result->begin();
  161|   175k|        }
  162|  13.7k|    }
  163|       |
  164|       |    // scan_value
  165|  2.28k|    {
  166|  2.28k|        auto it = scn::ranges::begin(source);
  167|  39.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  39.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  39.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  39.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  39.6k|            auto result = scn::scan_value<T>(
  170|  39.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  39.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.28k, False: 37.3k]
  ------------------
  172|  2.28k|                break;
  173|  2.28k|            }
  174|  37.3k|            it = result->begin();
  175|  37.3k|        }
  176|  2.28k|    }
  177|  2.28k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  2.28k|{
   90|  2.28k|    using char_type = ranges::range_value_t<Source>;
   91|  2.28k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.28k|    deque.clear();
   93|  2.28k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.28k|              std::back_inserter(deque));
   95|  2.28k|    return deque;
   96|  2.28k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  2.28k|{
   79|  2.28k|    if constexpr (std::is_same_v<CharT, char>) {
   80|  2.28k|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|  2.28k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.28k|{
  122|  2.28k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.28k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.28k|    buf.resize(sizeof...(Args));
  125|  2.28k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.28k|    return buf;
  127|  2.28k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  2.28k|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|  2.28k|    else {
  112|  2.28k|        return wformat_string_view_buffer;
  113|  2.28k|    }
  114|  2.28k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  4.57k|{
  185|  4.57k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  4.57k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  4.57k|                                   format_strings);
  188|  4.57k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.57k|{
  133|       |    // Regular scan
  134|  27.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 27.4k, False: 4.57k]
  ------------------
  135|  27.4k|        auto it = scn::ranges::begin(source);
  136|  82.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  82.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  82.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  82.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  82.2k|            auto result = scn::scan<T>(
  139|  82.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  82.2k|                scn::runtime_format(f));
  141|  82.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 27.4k, False: 54.8k]
  ------------------
  142|  27.4k|                break;
  143|  27.4k|            }
  144|  54.8k|            it = result->begin();
  145|  54.8k|        }
  146|  27.4k|    }
  147|       |
  148|       |    // scan localized
  149|  27.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 27.4k, False: 4.57k]
  ------------------
  150|  27.4k|        auto it = scn::ranges::begin(source);
  151|  82.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  82.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  82.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  82.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  82.2k|            auto result = scn::scan<T>(
  154|  82.2k|                global_locale,
  155|  82.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  82.2k|                scn::runtime_format(f));
  157|  82.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 27.4k, False: 54.8k]
  ------------------
  158|  27.4k|                break;
  159|  27.4k|            }
  160|  54.8k|            it = result->begin();
  161|  54.8k|        }
  162|  27.4k|    }
  163|       |
  164|       |    // scan_value
  165|  4.57k|    {
  166|  4.57k|        auto it = scn::ranges::begin(source);
  167|  15.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  15.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  15.0k|            auto result = scn::scan_value<T>(
  170|  15.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  15.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.57k, False: 10.5k]
  ------------------
  172|  4.57k|                break;
  173|  4.57k|            }
  174|  10.5k|            it = result->begin();
  175|  10.5k|        }
  176|  4.57k|    }
  177|  4.57k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.57k|{
  133|       |    // Regular scan
  134|  27.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 27.4k, False: 4.57k]
  ------------------
  135|  27.4k|        auto it = scn::ranges::begin(source);
  136|  91.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  91.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  91.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  91.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  91.7k|            auto result = scn::scan<T>(
  139|  91.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  91.7k|                scn::runtime_format(f));
  141|  91.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 27.4k, False: 64.3k]
  ------------------
  142|  27.4k|                break;
  143|  27.4k|            }
  144|  64.3k|            it = result->begin();
  145|  64.3k|        }
  146|  27.4k|    }
  147|       |
  148|       |    // scan localized
  149|  27.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 27.4k, False: 4.57k]
  ------------------
  150|  27.4k|        auto it = scn::ranges::begin(source);
  151|  91.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  91.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  91.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  91.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  91.7k|            auto result = scn::scan<T>(
  154|  91.7k|                global_locale,
  155|  91.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  91.7k|                scn::runtime_format(f));
  157|  91.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 27.4k, False: 64.3k]
  ------------------
  158|  27.4k|                break;
  159|  27.4k|            }
  160|  64.3k|            it = result->begin();
  161|  64.3k|        }
  162|  27.4k|    }
  163|       |
  164|       |    // scan_value
  165|  4.57k|    {
  166|  4.57k|        auto it = scn::ranges::begin(source);
  167|  18.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  18.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  18.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  18.2k|            auto result = scn::scan_value<T>(
  170|  18.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  18.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.57k, False: 13.6k]
  ------------------
  172|  4.57k|                break;
  173|  4.57k|            }
  174|  13.6k|            it = result->begin();
  175|  13.6k|        }
  176|  4.57k|    }
  177|  4.57k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.57k|{
  133|       |    // Regular scan
  134|  27.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 27.4k, False: 4.57k]
  ------------------
  135|  27.4k|        auto it = scn::ranges::begin(source);
  136|  93.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  93.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  93.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  93.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  93.0k|            auto result = scn::scan<T>(
  139|  93.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  93.0k|                scn::runtime_format(f));
  141|  93.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 27.4k, False: 65.6k]
  ------------------
  142|  27.4k|                break;
  143|  27.4k|            }
  144|  65.6k|            it = result->begin();
  145|  65.6k|        }
  146|  27.4k|    }
  147|       |
  148|       |    // scan localized
  149|  27.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 27.4k, False: 4.57k]
  ------------------
  150|  27.4k|        auto it = scn::ranges::begin(source);
  151|  93.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  93.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  93.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  93.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  93.0k|            auto result = scn::scan<T>(
  154|  93.0k|                global_locale,
  155|  93.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  93.0k|                scn::runtime_format(f));
  157|  93.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 27.4k, False: 65.6k]
  ------------------
  158|  27.4k|                break;
  159|  27.4k|            }
  160|  65.6k|            it = result->begin();
  161|  65.6k|        }
  162|  27.4k|    }
  163|       |
  164|       |    // scan_value
  165|  4.57k|    {
  166|  4.57k|        auto it = scn::ranges::begin(source);
  167|  18.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  18.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  18.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  18.6k|            auto result = scn::scan_value<T>(
  170|  18.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  18.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.57k, False: 14.0k]
  ------------------
  172|  4.57k|                break;
  173|  4.57k|            }
  174|  14.0k|            it = result->begin();
  175|  14.0k|        }
  176|  4.57k|    }
  177|  4.57k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.57k|{
  133|       |    // Regular scan
  134|  27.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 27.4k, False: 4.57k]
  ------------------
  135|  27.4k|        auto it = scn::ranges::begin(source);
  136|  82.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  82.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  82.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  82.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  82.2k|            auto result = scn::scan<T>(
  139|  82.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  82.2k|                scn::runtime_format(f));
  141|  82.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 27.4k, False: 54.8k]
  ------------------
  142|  27.4k|                break;
  143|  27.4k|            }
  144|  54.8k|            it = result->begin();
  145|  54.8k|        }
  146|  27.4k|    }
  147|       |
  148|       |    // scan localized
  149|  27.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 27.4k, False: 4.57k]
  ------------------
  150|  27.4k|        auto it = scn::ranges::begin(source);
  151|  82.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  82.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  82.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  82.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  82.2k|            auto result = scn::scan<T>(
  154|  82.2k|                global_locale,
  155|  82.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  82.2k|                scn::runtime_format(f));
  157|  82.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 27.4k, False: 54.8k]
  ------------------
  158|  27.4k|                break;
  159|  27.4k|            }
  160|  54.8k|            it = result->begin();
  161|  54.8k|        }
  162|  27.4k|    }
  163|       |
  164|       |    // scan_value
  165|  4.57k|    {
  166|  4.57k|        auto it = scn::ranges::begin(source);
  167|  15.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  15.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  15.0k|            auto result = scn::scan_value<T>(
  170|  15.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  15.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.57k, False: 10.4k]
  ------------------
  172|  4.57k|                break;
  173|  4.57k|            }
  174|  10.4k|            it = result->begin();
  175|  10.4k|        }
  176|  4.57k|    }
  177|  4.57k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.57k|{
  133|       |    // Regular scan
  134|  27.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 27.4k, False: 4.57k]
  ------------------
  135|  27.4k|        auto it = scn::ranges::begin(source);
  136|  91.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  91.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  91.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  91.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  91.6k|            auto result = scn::scan<T>(
  139|  91.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  91.6k|                scn::runtime_format(f));
  141|  91.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 27.4k, False: 64.2k]
  ------------------
  142|  27.4k|                break;
  143|  27.4k|            }
  144|  64.2k|            it = result->begin();
  145|  64.2k|        }
  146|  27.4k|    }
  147|       |
  148|       |    // scan localized
  149|  27.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 27.4k, False: 4.57k]
  ------------------
  150|  27.4k|        auto it = scn::ranges::begin(source);
  151|  91.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  91.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  91.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  91.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  91.6k|            auto result = scn::scan<T>(
  154|  91.6k|                global_locale,
  155|  91.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  91.6k|                scn::runtime_format(f));
  157|  91.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 27.4k, False: 64.2k]
  ------------------
  158|  27.4k|                break;
  159|  27.4k|            }
  160|  64.2k|            it = result->begin();
  161|  64.2k|        }
  162|  27.4k|    }
  163|       |
  164|       |    // scan_value
  165|  4.57k|    {
  166|  4.57k|        auto it = scn::ranges::begin(source);
  167|  18.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  18.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  18.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  18.2k|            auto result = scn::scan_value<T>(
  170|  18.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  18.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.57k, False: 13.6k]
  ------------------
  172|  4.57k|                break;
  173|  4.57k|            }
  174|  13.6k|            it = result->begin();
  175|  13.6k|        }
  176|  4.57k|    }
  177|  4.57k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.57k|{
  133|       |    // Regular scan
  134|  27.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 27.4k, False: 4.57k]
  ------------------
  135|  27.4k|        auto it = scn::ranges::begin(source);
  136|  93.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  93.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  93.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  93.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  93.0k|            auto result = scn::scan<T>(
  139|  93.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  93.0k|                scn::runtime_format(f));
  141|  93.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 27.4k, False: 65.6k]
  ------------------
  142|  27.4k|                break;
  143|  27.4k|            }
  144|  65.6k|            it = result->begin();
  145|  65.6k|        }
  146|  27.4k|    }
  147|       |
  148|       |    // scan localized
  149|  27.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 27.4k, False: 4.57k]
  ------------------
  150|  27.4k|        auto it = scn::ranges::begin(source);
  151|  93.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  93.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  93.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  93.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  93.0k|            auto result = scn::scan<T>(
  154|  93.0k|                global_locale,
  155|  93.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  93.0k|                scn::runtime_format(f));
  157|  93.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 27.4k, False: 65.6k]
  ------------------
  158|  27.4k|                break;
  159|  27.4k|            }
  160|  65.6k|            it = result->begin();
  161|  65.6k|        }
  162|  27.4k|    }
  163|       |
  164|       |    // scan_value
  165|  4.57k|    {
  166|  4.57k|        auto it = scn::ranges::begin(source);
  167|  18.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  18.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  18.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  18.6k|            auto result = scn::scan_value<T>(
  170|  18.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  18.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.57k, False: 14.0k]
  ------------------
  172|  4.57k|                break;
  173|  4.57k|            }
  174|  14.0k|            it = result->begin();
  175|  14.0k|        }
  176|  4.57k|    }
  177|  4.57k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  4.57k|{
   90|  4.57k|    using char_type = ranges::range_value_t<Source>;
   91|  4.57k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  4.57k|    deque.clear();
   93|  4.57k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  4.57k|              std::back_inserter(deque));
   95|  4.57k|    return deque;
   96|  4.57k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  4.57k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  4.57k|    else {
   83|  4.57k|        return wnoncontiguous_buffer;
   84|  4.57k|    }
   85|  4.57k|}

