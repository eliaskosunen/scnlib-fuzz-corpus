_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  2.08M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  2.08M|  chars_format const fmt = options.format;
  277|  2.08M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  2.08M|  parsed_number_string_t<UC> answer;
  280|  2.08M|  answer.valid = false;
  281|  2.08M|  answer.too_many_digits = false;
  282|  2.08M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  2.08M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 2.08M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  2.08M|  UC const * const start_digits = p;
  303|       |
  304|  2.08M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  12.3M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 11.3M, False: 1.00M]
  |  Branch (306:25): [True: 10.2M, False: 1.08M]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  10.2M|    i = 10 * i +
  310|  10.2M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  10.2M|    ++p;
  312|  10.2M|  }
  313|  2.08M|  UC const * const end_of_integer_part = p;
  314|  2.08M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  2.08M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  2.08M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.08M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 2.08M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  2.08M|  int64_t exponent = 0;
  324|  2.08M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 1.08M, False: 1.00M]
  |  Branch (324:49): [True: 350k, False: 731k]
  ------------------
  325|  2.08M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 350k, False: 1.73M]
  ------------------
  326|   350k|    ++p;
  327|   350k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   350k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  1.40M|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 1.19M, False: 205k]
  |  Branch (332:27): [True: 1.05M, False: 145k]
  ------------------
  333|  1.05M|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  1.05M|      ++p;
  335|  1.05M|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  1.05M|    }
  337|   350k|    exponent = before - p;
  338|   350k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   350k|    digit_count -= exponent;
  340|   350k|  }
  341|  2.08M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  2.08M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 2.08M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  2.08M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 2.08M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  2.08M|  int64_t exp_number = 0;            // explicit exponential part
  351|  2.08M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 1.83M, False: 252k]
  ------------------
  352|  2.08M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 876k, False: 955k]
  ------------------
  353|  2.08M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 231k, False: 644k]
  |  Branch (353:29): [True: 80.0k, False: 564k]
  ------------------
  354|  2.08M|       ||
  355|  2.08M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  1.77M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 1.77M]
  ------------------
  356|  1.77M|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  1.77M|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   311k|    UC const * location_of_e = p;
  359|   311k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 231k, False: 80.0k]
  |  Branch (359:28): [True: 80.0k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   311k|      ++p;
  361|   311k|    }
  362|   311k|    bool neg_exp = false;
  363|   311k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 311k, False: 205]
  |  Branch (363:24): [True: 20.6k, False: 290k]
  ------------------
  364|  20.6k|      neg_exp = true;
  365|  20.6k|      ++p;
  366|   291k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 290k, False: 205]
  |  Branch (366:31): [True: 58.1k, False: 232k]
  ------------------
  367|  58.1k|      ++p;
  368|  58.1k|    }
  369|   311k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 245, False: 311k]
  |  Branch (369:24): [True: 865, False: 310k]
  ------------------
  370|  1.11k|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 1.11k]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|  1.11k|      p = location_of_e;
  376|   310k|    } else {
  377|   993k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 785k, False: 208k]
  |  Branch (377:29): [True: 683k, False: 102k]
  ------------------
  378|   683k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   683k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 643k, False: 39.2k]
  ------------------
  380|   643k|          exp_number = 10 * exp_number + digit;
  381|   643k|        }
  382|   683k|        ++p;
  383|   683k|      }
  384|   310k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 20.5k, False: 289k]
  ------------------
  385|   310k|      exponent += exp_number;
  386|   310k|    }
  387|  1.77M|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  1.77M|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 1.52M, False: 252k]
  |  Branch (389:44): [True: 0, False: 1.52M]
  ------------------
  390|  1.77M|  }
  391|  2.08M|  answer.lastmatch = p;
  392|  2.08M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  2.08M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 325k, False: 1.75M]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   325k|    UC const * start = start_digits;
  405|  3.11M|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 3.10M, False: 14.5k]
  |  Branch (405:32): [True: 2.72M, False: 375k]
  |  Branch (405:53): [True: 63.7k, False: 311k]
  ------------------
  406|  2.78M|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 2.72M, False: 63.7k]
  ------------------
  407|  2.78M|      start++;
  408|  2.78M|    }
  409|       |
  410|   325k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 275k, False: 50.7k]
  ------------------
  411|   275k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   275k|      i = 0;
  416|   275k|      p = answer.integer.ptr;
  417|   275k|      UC const* int_end = p + answer.integer.len();
  418|   275k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  3.79M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 3.70M, False: 91.6k]
  |  Branch (419:54): [True: 3.51M, False: 183k]
  ------------------
  420|  3.51M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  3.51M|        ++p;
  422|  3.51M|      }
  423|   275k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 91.6k, False: 183k]
  ------------------
  424|  91.6k|        exponent = end_of_integer_part - p + exp_number;
  425|  91.6k|      }
  426|   183k|      else { // We have a value with a fractional component.
  427|   183k|        p = answer.fraction.ptr;
  428|   183k|        UC const* frac_end = p + answer.fraction.len();
  429|  3.55M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 3.37M, False: 183k]
  |  Branch (429:56): [True: 3.37M, False: 0]
  ------------------
  430|  3.37M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  3.37M|          ++p;
  432|  3.37M|        }
  433|   183k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   183k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   275k|    }
  437|   325k|  }
  438|  2.08M|  answer.exponent = exponent;
  439|  2.08M|  answer.mantissa = i;
  440|  2.08M|  return answer;
  441|  2.08M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  13.6M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  13.6M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 354k, False: 13.2M]
  |  Branch (36:27): [True: 975k, False: 12.3M]
  ------------------
   37|  13.6M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   350k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|  1.44M|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 1.21M, False: 224k]
  |  Branch (249:43): [True: 1.09M, False: 125k]
  ------------------
  250|  1.09M|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|  1.09M|    p += 8;
  252|  1.09M|  }
  253|   350k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|  1.21M|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|  1.21M|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|  1.21M|     0x8080808080808080));
  172|  1.21M|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  2.73M|uint64_t read8_to_u64(const UC *chars) {
   54|  2.73M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  2.73M|  uint64_t val;
   63|  2.73M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  2.73M|  return val;
   69|  2.73M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|  1.51M|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|  1.51M|  const uint64_t mask = 0x000000FF000000FF;
  148|  1.51M|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|  1.51M|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|  1.51M|  val -= 0x3030303030303030;
  151|  1.51M|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|  1.51M|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|  1.51M|  return uint32_t(val);
  154|  1.51M|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   423k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   423k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   423k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   423k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   423k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  58.1k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  58.1k|  chars_format const fmt = options.format;
  277|  58.1k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  58.1k|  parsed_number_string_t<UC> answer;
  280|  58.1k|  answer.valid = false;
  281|  58.1k|  answer.too_many_digits = false;
  282|  58.1k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  58.1k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 58.1k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  58.1k|  UC const * const start_digits = p;
  303|       |
  304|  58.1k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   118k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 78.2k, False: 40.7k]
  |  Branch (306:25): [True: 60.8k, False: 17.3k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  60.8k|    i = 10 * i +
  310|  60.8k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  60.8k|    ++p;
  312|  60.8k|  }
  313|  58.1k|  UC const * const end_of_integer_part = p;
  314|  58.1k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  58.1k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  58.1k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  58.1k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 58.1k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  58.1k|  int64_t exponent = 0;
  324|  58.1k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 17.3k, False: 40.7k]
  |  Branch (324:49): [True: 0, False: 17.3k]
  ------------------
  325|  58.1k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 0, False: 58.1k]
  ------------------
  326|      0|    ++p;
  327|      0|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|      0|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|      0|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 0, False: 0]
  |  Branch (332:27): [True: 0, False: 0]
  ------------------
  333|      0|      uint8_t digit = uint8_t(*p - UC('0'));
  334|      0|      ++p;
  335|      0|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|      0|    }
  337|      0|    exponent = before - p;
  338|      0|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|      0|    digit_count -= exponent;
  340|      0|  }
  341|  58.1k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  58.1k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 58.1k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  58.1k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 58.1k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  58.1k|  int64_t exp_number = 0;            // explicit exponential part
  351|  58.1k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 45.3k, False: 12.8k]
  ------------------
  352|  58.1k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 17.3k, False: 27.9k]
  ------------------
  353|  58.1k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 56, False: 17.3k]
  |  Branch (353:29): [True: 2.38k, False: 14.9k]
  ------------------
  354|  58.1k|       ||
  355|  58.1k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  55.7k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 55.7k]
  ------------------
  356|  55.7k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  55.7k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  2.44k|    UC const * location_of_e = p;
  359|  2.44k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 56, False: 2.38k]
  |  Branch (359:28): [True: 2.38k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  2.44k|      ++p;
  361|  2.44k|    }
  362|  2.44k|    bool neg_exp = false;
  363|  2.44k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 2.43k, False: 10]
  |  Branch (363:24): [True: 236, False: 2.19k]
  ------------------
  364|    236|      neg_exp = true;
  365|    236|      ++p;
  366|  2.20k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 2.19k, False: 10]
  |  Branch (366:31): [True: 0, False: 2.19k]
  ------------------
  367|      0|      ++p;
  368|      0|    }
  369|  2.44k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 10, False: 2.43k]
  |  Branch (369:24): [True: 390, False: 2.04k]
  ------------------
  370|    400|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 400]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    400|      p = location_of_e;
  376|  2.04k|    } else {
  377|  6.27k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 4.77k, False: 1.50k]
  |  Branch (377:29): [True: 4.23k, False: 540]
  ------------------
  378|  4.23k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  4.23k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 4.23k, False: 0]
  ------------------
  380|  4.23k|          exp_number = 10 * exp_number + digit;
  381|  4.23k|        }
  382|  4.23k|        ++p;
  383|  4.23k|      }
  384|  2.04k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 216, False: 1.82k]
  ------------------
  385|  2.04k|      exponent += exp_number;
  386|  2.04k|    }
  387|  55.7k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  55.7k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 42.8k, False: 12.8k]
  |  Branch (389:44): [True: 0, False: 42.8k]
  ------------------
  390|  55.7k|  }
  391|  58.1k|  answer.lastmatch = p;
  392|  58.1k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  58.1k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 0, False: 58.1k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|      0|    UC const * start = start_digits;
  405|      0|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 0, False: 0]
  |  Branch (405:32): [True: 0, False: 0]
  |  Branch (405:53): [True: 0, False: 0]
  ------------------
  406|      0|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 0, False: 0]
  ------------------
  407|      0|      start++;
  408|      0|    }
  409|       |
  410|      0|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 0, False: 0]
  ------------------
  411|      0|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|      0|      i = 0;
  416|      0|      p = answer.integer.ptr;
  417|      0|      UC const* int_end = p + answer.integer.len();
  418|      0|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|      0|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 0, False: 0]
  |  Branch (419:54): [True: 0, False: 0]
  ------------------
  420|      0|        i = i * 10 + uint64_t(*p - UC('0'));
  421|      0|        ++p;
  422|      0|      }
  423|      0|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 0, False: 0]
  ------------------
  424|      0|        exponent = end_of_integer_part - p + exp_number;
  425|      0|      }
  426|      0|      else { // We have a value with a fractional component.
  427|      0|        p = answer.fraction.ptr;
  428|      0|        UC const* frac_end = p + answer.fraction.len();
  429|      0|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 0, False: 0]
  |  Branch (429:56): [True: 0, False: 0]
  ------------------
  430|      0|          i = i * 10 + uint64_t(*p - UC('0'));
  431|      0|          ++p;
  432|      0|        }
  433|      0|        exponent = answer.fraction.ptr - p + exp_number;
  434|      0|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|      0|    }
  437|      0|  }
  438|  58.1k|  answer.exponent = exponent;
  439|  58.1k|  answer.mantissa = i;
  440|  58.1k|  return answer;
  441|  58.1k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|  85.4k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  85.4k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 18.1k, False: 67.3k]
  |  Branch (36:27): [True: 210, False: 67.1k]
  ------------------
   37|  85.4k|}

_ZN10fast_float6bigintC2Ev:
  412|  91.1k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   201k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   326k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   326k|    return small_mul(vec, y);
  565|   326k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   502k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   502k|  limb carry = 0;
  284|  2.48M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 1.98M, False: 502k]
  ------------------
  285|  1.98M|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  1.98M|  }
  287|   502k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 327k, False: 174k]
  ------------------
  288|   327k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   327k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 327k]
  |  |  ------------------
  ------------------
  289|   327k|  }
  290|   502k|  return true;
  291|   502k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  4.36M|  constexpr size_t len() const noexcept {
   77|  4.36M|    return length;
   78|  4.36M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  1.98M|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  1.98M|#ifdef FASTFLOAT_64BIT_LIMB
  231|  1.98M|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  1.98M|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  1.98M|  carry = limb(z >> limb_bits);
  235|  1.98M|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  1.98M|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  5.24M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  5.24M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  5.24M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  5.24M|    return data[index];
   60|  5.24M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   439k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   439k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 439k, False: 0]
  ------------------
   93|   439k|      push_unchecked(value);
   94|   439k|      return true;
   95|   439k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   439k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   539k|  constexpr size_t capacity() const noexcept {
   83|   539k|    return size;
   84|   539k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   516k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   516k|    data[length] = value;
   88|   516k|    length++;
   89|   516k|  }
_ZN10fast_float6bigint3addEm:
  567|   326k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   326k|    return small_add(vec, y);
  569|   326k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   326k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   326k|  return small_add_from(vec, y, 0);
  277|   326k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   326k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   326k|  size_t index = start;
  259|   326k|  limb carry = y;
  260|   326k|  bool overflow;
  261|   481k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 245k, False: 235k]
  |  Branch (261:24): [True: 154k, False: 91.1k]
  ------------------
  262|   154k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   154k|    carry = limb(overflow);
  264|   154k|    index += 1;
  265|   154k|  }
  266|   326k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 91.1k, False: 235k]
  ------------------
  267|  91.1k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  91.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 91.1k]
  |  |  ------------------
  ------------------
  268|  91.1k|  }
  269|   326k|  return true;
  270|   326k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   546k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   546k|  limb z;
  211|       |// gcc and clang
  212|   546k|#if defined(__has_builtin)
  213|   546k|  #if __has_builtin(__builtin_add_overflow)
  214|   546k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   546k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   546k|      return z;
  217|   546k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   546k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  14.9k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  14.9k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  14.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 14.9k]
  |  |  ------------------
  ------------------
  611|  14.9k|    return pow2(exp);
  612|  14.9k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  91.1k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  91.1k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  91.1k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  99.7k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 8.62k, False: 91.1k]
  ------------------
  582|  8.62k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  8.62k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.62k]
  |  |  ------------------
  ------------------
  583|  8.62k|      exp -= large_step;
  584|  8.62k|    }
  585|  91.1k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  91.1k|    uint32_t small_step = 27;
  587|  91.1k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|   151k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 60.4k, False: 91.1k]
  ------------------
  593|  60.4k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  60.4k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 60.4k]
  |  |  ------------------
  ------------------
  594|  60.4k|      exp -= small_step;
  595|  60.4k|    }
  596|  91.1k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 71.7k, False: 19.3k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  71.7k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  71.7k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 71.7k]
  |  |  ------------------
  ------------------
  601|  71.7k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  71.7k|      );
  603|  71.7k|    }
  604|       |
  605|  91.1k|    return true;
  606|  91.1k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  8.62k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  8.62k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 8.62k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  8.62k|  } else {
  368|  8.62k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  8.62k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.62k]
  |  |  ------------------
  ------------------
  369|  8.62k|  }
  370|  8.62k|  return true;
  371|  8.62k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  8.62k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  8.62k|  limb_span xs = limb_span(x.data, x.len());
  337|  8.62k|  stackvec<size> z(xs);
  338|  8.62k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  8.62k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 8.62k, False: 0]
  ------------------
  341|  8.62k|    limb y0 = y[0];
  342|  8.62k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  8.62k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.62k]
  |  |  ------------------
  ------------------
  343|  43.1k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 34.5k, False: 8.62k]
  ------------------
  344|  34.5k|      limb yi = y[index];
  345|  34.5k|      stackvec<size> zi;
  346|  34.5k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 34.5k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  34.5k|        zi.set_len(0);
  349|  34.5k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  34.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 34.5k]
  |  |  ------------------
  ------------------
  350|  34.5k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  34.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 34.5k]
  |  |  ------------------
  ------------------
  351|  34.5k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  34.5k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  34.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 34.5k]
  |  |  ------------------
  ------------------
  353|  34.5k|      }
  354|  34.5k|    }
  355|  8.62k|  }
  356|       |
  357|  8.62k|  x.normalize();
  358|  8.62k|  return true;
  359|  8.62k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  8.62k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  8.62k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  8.62k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  8.62k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|   133k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|   133k|    length = uint16_t(len);
   75|   133k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  43.1k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  43.1k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 43.1k, False: 0]
  ------------------
  108|  43.1k|      extend_unchecked(s);
  109|  43.1k|      return true;
  110|  43.1k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  43.1k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  43.1k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  43.1k|    limb* ptr = data + length;
  102|  43.1k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  43.1k|    set_len(len() + s.len());
  104|  43.1k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  34.5k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  34.5k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 34.5k]
  |  Branch (300:26): [True: 34.1k, False: 384]
  ------------------
  301|  34.1k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  34.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 34.1k]
  |  |  ------------------
  ------------------
  302|  34.1k|  }
  303|       |
  304|  34.5k|  bool carry = false;
  305|   319k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 284k, False: 34.5k]
  ------------------
  306|   284k|    limb xi = x[index + start];
  307|   284k|    limb yi = y[index];
  308|   284k|    bool c1 = false;
  309|   284k|    bool c2 = false;
  310|   284k|    xi = scalar_add(xi, yi, c1);
  311|   284k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 107k, False: 177k]
  ------------------
  312|   107k|      xi = scalar_add(xi, 1, c2);
  313|   107k|    }
  314|   284k|    x[index + start] = xi;
  315|   284k|    carry = c1 | c2;
  316|   284k|  }
  317|       |
  318|       |  // handle overflow
  319|  34.5k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 34.5k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  34.5k|  return true;
  323|  34.5k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  34.1k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  34.1k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 34.1k]
  ------------------
  132|      0|      return false;
  133|  34.1k|    } else {
  134|  34.1k|      resize_unchecked(new_len, value);
  135|  34.1k|      return true;
  136|  34.1k|    }
  137|  34.1k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  34.1k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  34.1k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 34.1k, False: 0]
  ------------------
  120|  34.1k|      size_t count = new_len - len();
  121|  34.1k|      limb* first = data + len();
  122|  34.1k|      limb* last = first + count;
  123|  34.1k|      ::std::fill(first, last, value);
  124|  34.1k|      set_len(new_len);
  125|  34.1k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  34.1k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  84.7k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  84.7k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 84.7k, False: 0]
  |  Branch (152:25): [True: 0, False: 84.7k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  84.7k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|   128k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|   128k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   128k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|   128k|    size_t rindex = length - index - 1;
   69|   128k|    return data[rindex];
   70|   128k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  90.9k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  90.9k|    return shl(exp);
  574|  90.9k|  }
_ZN10fast_float6bigint3shlEm:
  530|  90.9k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  90.9k|    size_t rem = n % limb_bits;
  532|  90.9k|    size_t div = n / limb_bits;
  533|  90.9k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 75.8k, False: 15.1k]
  ------------------
  534|  75.8k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  75.8k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 75.8k]
  |  |  ------------------
  ------------------
  535|  75.8k|    }
  536|  90.9k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 22.0k, False: 68.9k]
  ------------------
  537|  22.0k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  22.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 22.0k]
  |  |  ------------------
  ------------------
  538|  22.0k|    }
  539|  90.9k|    return true;
  540|  90.9k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  75.8k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  75.8k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  75.8k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  75.8k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  75.8k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  75.8k|    size_t shl = n;
  493|  75.8k|    size_t shr = limb_bits - shl;
  494|  75.8k|    limb prev = 0;
  495|   278k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 202k, False: 75.8k]
  ------------------
  496|   202k|      limb xi = vec[index];
  497|   202k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   202k|      prev = xi;
  499|   202k|    }
  500|       |
  501|  75.8k|    limb carry = prev >> shr;
  502|  75.8k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 21.0k, False: 54.7k]
  ------------------
  503|  21.0k|      return vec.try_push(carry);
  504|  21.0k|    }
  505|  54.7k|    return true;
  506|  75.8k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  22.0k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  22.0k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  22.0k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  22.0k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 22.0k]
  ------------------
  512|      0|      return false;
  513|  22.0k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 22.0k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  22.0k|      limb* dst = vec.data + n;
  516|  22.0k|      const limb* src = vec.data;
  517|  22.0k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  22.0k|      limb* first = vec.data;
  520|  22.0k|      limb* last = first + n;
  521|  22.0k|      ::std::fill(first, last, 0);
  522|  22.0k|      vec.set_len(n + vec.len());
  523|  22.0k|      return true;
  524|  22.0k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  22.0k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  36.9k|  constexpr bool is_empty() const noexcept {
   80|  36.9k|    return length == 0;
   81|  36.9k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  14.9k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  14.9k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  14.9k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 14.9k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  14.9k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 1.90k, False: 13.0k]
  ------------------
  435|  1.90k|      return uint64_hi64(vec.rindex(0), truncated);
  436|  13.0k|    } else {
  437|  13.0k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  13.0k|      truncated |= vec.nonzero(2);
  439|  13.0k|      return result;
  440|  13.0k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  14.9k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|  1.90k|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|  1.90k|  truncated = false;
  167|  1.90k|  int shl = leading_zeroes(r0);
  168|  1.90k|  return r0 << shl;
  169|  1.90k|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  13.0k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  13.0k|  int shl = leading_zeroes(r0);
  174|  13.0k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 54, False: 13.0k]
  ------------------
  175|     54|    truncated = r1 != 0;
  176|     54|    return r0;
  177|  13.0k|  } else {
  178|  13.0k|    int shr = 64 - shl;
  179|  13.0k|    truncated = (r1 << shl) != 0;
  180|  13.0k|    return (r0 << shl) | (r1 >> shr);
  181|  13.0k|  }
  182|  13.0k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  13.0k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  13.1k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 818, False: 12.3k]
  ------------------
  143|    818|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 764, False: 54]
  ------------------
  144|    764|        return true;
  145|    764|      }
  146|     54|      index++;
  147|     54|    }
  148|  12.3k|    return false;
  149|  13.0k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  14.9k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  14.9k|    int lz = ctlz();
  560|  14.9k|    return int(limb_bits * vec.len()) - lz;
  561|  14.9k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  14.9k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  14.9k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 14.9k]
  ------------------
  545|      0|      return 0;
  546|  14.9k|    } else {
  547|  14.9k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  14.9k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  14.9k|    }
  555|  14.9k|  }
_ZN10fast_float6bigintC2Em:
  418|  76.1k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  76.1k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  76.1k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  76.1k|    vec.normalize();
  426|  76.1k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  76.1k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  76.1k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 76.1k]
  ------------------
  464|      0|      return 1;
  465|  76.1k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 76.1k]
  ------------------
  466|      0|      return -1;
  467|  76.1k|    } else {
  468|   150k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 141k, False: 8.88k]
  ------------------
  469|   141k|        limb xi = vec[index - 1];
  470|   141k|        limb yi = other.vec[index - 1];
  471|   141k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 11.2k, False: 130k]
  ------------------
  472|  11.2k|          return 1;
  473|   130k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 55.9k, False: 74.6k]
  ------------------
  474|  55.9k|          return -1;
  475|  55.9k|        }
  476|   141k|      }
  477|  8.88k|      return 0;
  478|  76.1k|    }
  479|  76.1k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   283k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   283k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   283k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   283k|    return data[index];
   64|   283k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   416k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   416k|  adjusted_mantissa answer;
   96|   416k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 12.0k, False: 404k]
  |  Branch (96:19): [True: 1.80k, False: 402k]
  ------------------
   97|  13.8k|    answer.power2 = 0;
   98|  13.8k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  13.8k|    return answer;
  101|  13.8k|  }
  102|   402k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 8.77k, False: 393k]
  ------------------
  103|       |    // we want to get infinity:
  104|  8.77k|    answer.power2 = binary::infinite_power();
  105|  8.77k|    answer.mantissa = 0;
  106|  8.77k|    return answer;
  107|  8.77k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   393k|  int lz = leading_zeroes(w);
  112|   393k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   393k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   393k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   393k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   393k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   393k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 858, False: 392k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|    858|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 36, False: 822]
  ------------------
  137|     36|      answer.power2 = 0;
  138|     36|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     36|      return answer;
  141|     36|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    822|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    822|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    822|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    822|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 822, False: 0]
  ------------------
  156|    822|    return answer;
  157|    858|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   392k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 145k, False: 247k]
  |  Branch (162:30): [True: 144k, False: 956]
  |  Branch (162:77): [True: 128k, False: 16.5k]
  ------------------
  163|   392k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 24.4k, False: 103k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  24.4k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 11.2k, False: 13.1k]
  ------------------
  168|  11.2k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  11.2k|    }
  170|  24.4k|  }
  171|       |
  172|   392k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   392k|  answer.mantissa >>= 1;
  174|   392k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 14.7k, False: 378k]
  ------------------
  175|  14.7k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  14.7k|    answer.power2++; // undo previous addition
  177|  14.7k|  }
  178|       |
  179|   392k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   392k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 2.76k, False: 390k]
  ------------------
  181|  2.76k|    answer.power2 = binary::infinite_power();
  182|  2.76k|    answer.mantissa = 0;
  183|  2.76k|  }
  184|   392k|  return answer;
  185|   393k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   432k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   432k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   432k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   432k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   432k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   432k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   432k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 67.4k, False: 365k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  67.4k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  67.4k|    firstproduct.low += secondproduct.high;
   35|  67.4k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 54.8k, False: 12.6k]
  ------------------
   36|  54.8k|      firstproduct.high++;
   37|  54.8k|    }
   38|  67.4k|  }
   39|   432k|  return firstproduct;
   40|   432k|}
_ZN10fast_float6detail5powerEi:
   58|   862k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   862k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   862k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  39.0k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  39.0k|  int lz = leading_zeroes(w);
   82|  39.0k|  w <<= lz;
   83|  39.0k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  39.0k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  39.0k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  39.0k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  39.0k|  int hilz = int(w >> 63) ^ 1;
   69|  39.0k|  adjusted_mantissa answer;
   70|  39.0k|  answer.mantissa = w << hilz;
   71|  39.0k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  39.0k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  39.0k|  return answer;
   74|  39.0k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   389k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   389k|  adjusted_mantissa answer;
   96|   389k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 6.77k, False: 382k]
  |  Branch (96:19): [True: 360, False: 381k]
  ------------------
   97|  7.13k|    answer.power2 = 0;
   98|  7.13k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  7.13k|    return answer;
  101|  7.13k|  }
  102|   381k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 4.38k, False: 377k]
  ------------------
  103|       |    // we want to get infinity:
  104|  4.38k|    answer.power2 = binary::infinite_power();
  105|  4.38k|    answer.mantissa = 0;
  106|  4.38k|    return answer;
  107|  4.38k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   377k|  int lz = leading_zeroes(w);
  112|   377k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   377k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   377k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   377k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   377k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   377k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 13.1k, False: 364k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  13.1k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 96, False: 13.0k]
  ------------------
  137|     96|      answer.power2 = 0;
  138|     96|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     96|      return answer;
  141|     96|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  13.0k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  13.0k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  13.0k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  13.0k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 13.0k, False: 0]
  ------------------
  156|  13.0k|    return answer;
  157|  13.1k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   364k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 111k, False: 252k]
  |  Branch (162:30): [True: 66.6k, False: 44.9k]
  |  Branch (162:77): [True: 58.7k, False: 7.90k]
  ------------------
  163|   364k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 21.8k, False: 36.8k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  21.8k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 14.6k, False: 7.26k]
  ------------------
  168|  14.6k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  14.6k|    }
  170|  21.8k|  }
  171|       |
  172|   364k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   364k|  answer.mantissa >>= 1;
  174|   364k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 11.5k, False: 352k]
  ------------------
  175|  11.5k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  11.5k|    answer.power2++; // undo previous addition
  177|  11.5k|  }
  178|       |
  179|   364k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   364k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 264, False: 364k]
  ------------------
  181|    264|    answer.power2 = binary::infinite_power();
  182|    264|    answer.mantissa = 0;
  183|    264|  }
  184|   364k|  return answer;
  185|   377k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   429k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   429k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   429k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   429k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   429k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   429k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   429k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 108k, False: 321k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|   108k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|   108k|    firstproduct.low += secondproduct.high;
   35|   108k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 51.5k, False: 56.8k]
  ------------------
   36|  51.5k|      firstproduct.high++;
   37|  51.5k|    }
   38|   108k|  }
   39|   429k|  return firstproduct;
   40|   429k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  52.0k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  52.0k|  int lz = leading_zeroes(w);
   82|  52.0k|  w <<= lz;
   83|  52.0k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  52.0k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  52.0k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  52.0k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  52.0k|  int hilz = int(w >> 63) ^ 1;
   69|  52.0k|  adjusted_mantissa answer;
   70|  52.0k|  answer.mantissa = w << hilz;
   71|  52.0k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  52.0k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  52.0k|  return answer;
   74|  52.0k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  39.0k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  39.0k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  39.0k|  int32_t sci_exp = scientific_exponent(num);
  411|  39.0k|  size_t max_digits = binary_format<T>::max_digits();
  412|  39.0k|  size_t digits = 0;
  413|  39.0k|  bigint bigmant;
  414|  39.0k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  39.0k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  39.0k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 878, False: 38.1k]
  ------------------
  418|    878|    return positive_digit_comp<T>(bigmant, exponent);
  419|  38.1k|  } else {
  420|  38.1k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  38.1k|  }
  422|  39.0k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  91.1k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  91.1k|  uint64_t mantissa = num.mantissa;
   30|  91.1k|  int32_t exponent = int32_t(num.exponent);
   31|   455k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 364k, False: 91.1k]
  ------------------
   32|   364k|    mantissa /= 10000;
   33|   364k|    exponent += 4;
   34|   364k|  }
   35|   182k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 91.1k, False: 91.1k]
  ------------------
   36|  91.1k|    mantissa /= 100;
   37|  91.1k|    exponent += 2;
   38|  91.1k|  }
   39|  91.1k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 91.1k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  91.1k|  return exponent;
   44|  91.1k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  91.1k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  91.1k|  size_t counter = 0;
  245|  91.1k|  digits = 0;
  246|  91.1k|  limb value = 0;
  247|  91.1k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  91.1k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  91.1k|  UC const * p = num.integer.ptr;
  255|  91.1k|  UC const * pend = p + num.integer.len();
  256|  91.1k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   199k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 108k, False: 90.6k]
  ------------------
  259|   204k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 122k, False: 81.6k]
  |  Branch (259:45): [True: 96.1k, False: 26.5k]
  |  Branch (259:70): [True: 95.7k, False: 408]
  ------------------
  260|  95.7k|      parse_eight_digits(p, value, counter, digits);
  261|  95.7k|    }
  262|   401k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 368k, False: 32.9k]
  |  Branch (262:30): [True: 293k, False: 75.2k]
  |  Branch (262:43): [True: 292k, False: 408]
  ------------------
  263|   292k|      parse_one_digit(p, value, counter, digits);
  264|   292k|    }
  265|   108k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 408, False: 108k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    408|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    408|      bool truncated = is_truncated(p, pend);
  269|    408|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 376, False: 32]
  ------------------
  270|    376|        truncated |= is_truncated(num.fraction);
  271|    376|      }
  272|    408|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 220, False: 188]
  ------------------
  273|    220|        round_up_bigint(result, digits);
  274|    220|      }
  275|    408|      return;
  276|   108k|    } else {
  277|   108k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|   108k|      counter = 0;
  279|   108k|      value = 0;
  280|   108k|    }
  281|   108k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  90.6k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 76.6k, False: 14.0k]
  ------------------
  285|  76.6k|    p = num.fraction.ptr;
  286|  76.6k|    pend = p + num.fraction.len();
  287|  76.6k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 15.4k, False: 61.2k]
  ------------------
  288|  15.4k|      skip_zeros(p, pend);
  289|  15.4k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   284k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 214k, False: 70.1k]
  ------------------
  292|   542k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 451k, False: 91.0k]
  |  Branch (292:47): [True: 329k, False: 121k]
  |  Branch (292:72): [True: 327k, False: 2.01k]
  ------------------
  293|   327k|        parse_eight_digits(p, value, counter, digits);
  294|   327k|      }
  295|   891k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 750k, False: 141k]
  |  Branch (295:32): [True: 681k, False: 69.2k]
  |  Branch (295:45): [True: 676k, False: 4.39k]
  ------------------
  296|   676k|        parse_one_digit(p, value, counter, digits);
  297|   676k|      }
  298|   214k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 6.57k, False: 208k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  6.57k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  6.57k|        bool truncated = is_truncated(p, pend);
  302|  6.57k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 3.49k, False: 3.08k]
  ------------------
  303|  3.49k|          round_up_bigint(result, digits);
  304|  3.49k|        }
  305|  6.57k|        return;
  306|   208k|      } else {
  307|   208k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   208k|        counter = 0;
  309|   208k|        value = 0;
  310|   208k|      }
  311|   214k|    }
  312|  76.6k|  }
  313|       |
  314|  84.1k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 84.1k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  84.1k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|   106k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|   106k|  uint64_t val;
  161|   177k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 128k, False: 48.6k]
  ------------------
  162|   128k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|   128k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 57.8k, False: 70.7k]
  ------------------
  164|  57.8k|      break;
  165|  57.8k|    }
  166|  70.7k|    first += int_cmp_len<UC>();
  167|  70.7k|  }
  168|   262k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 246k, False: 15.4k]
  ------------------
  169|   246k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 91.1k, False: 155k]
  ------------------
  170|  91.1k|      break;
  171|  91.1k|    }
  172|   155k|    first++;
  173|   155k|  }
  174|   106k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   423k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   423k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   423k|  p += 8;
  210|   423k|  counter += 8;
  211|   423k|  count += 8;
  212|   423k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   969k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   969k|  value = value * 10 + limb(*p - UC('0'));
  218|   969k|  p++;
  219|   969k|  counter++;
  220|   969k|  count++;
  221|   969k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   326k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   326k|  big.mul(power);
  226|   326k|  big.add(value);
  227|   326k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  7.36k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  7.36k|  uint64_t val;
  183|  18.1k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 12.4k, False: 5.77k]
  ------------------
  184|  12.4k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  12.4k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.59k, False: 10.8k]
  ------------------
  186|  1.59k|      return true;
  187|  1.59k|    }
  188|  10.8k|    first += int_cmp_len<UC>();
  189|  10.8k|  }
  190|  9.57k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 5.99k, False: 3.57k]
  ------------------
  191|  5.99k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 2.19k, False: 3.80k]
  ------------------
  192|  2.19k|      return true;
  193|  2.19k|    }
  194|  3.80k|    ++first;
  195|  3.80k|  }
  196|  3.57k|  return false;
  197|  5.77k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    376|bool is_truncated(span<const UC> s) noexcept {
  201|    376|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    376|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  3.71k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  3.71k|  add_native(big, 10, 1);
  234|  3.71k|  count++;
  235|  3.71k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    878|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    878|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    878|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    878|  adjusted_mantissa answer;
  324|    878|  bool truncated;
  325|    878|  answer.mantissa = bigmant.hi64(truncated);
  326|    878|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    878|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    878|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    878|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    878|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    878|    });
  333|    878|  });
  334|       |
  335|    878|  return answer;
  336|    878|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    878|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    878|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    878|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 878]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    878|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    878|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 878]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    878|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    878|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 878]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    878|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    878|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    878|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    878|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    878|    });
  333|    878|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    878|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    878|  const uint64_t mask
  125|    878|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 878]
  ------------------
  126|    878|    ? UINT64_MAX
  127|    878|    : (uint64_t(1) << shift) - 1;
  128|    878|  const uint64_t halfway
  129|    878|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 878]
  ------------------
  130|    878|    ? 0
  131|    878|    : uint64_t(1) << (shift - 1);
  132|    878|  uint64_t truncated_bits = am.mantissa & mask;
  133|    878|  bool is_above = truncated_bits > halfway;
  134|    878|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    878|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 878]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    878|  } else {
  140|    878|    am.mantissa >>= shift;
  141|    878|  }
  142|    878|  am.power2 += shift;
  143|       |
  144|    878|  bool is_odd = (am.mantissa & 1) == 1;
  145|    878|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    878|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    878|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    878|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 86, False: 792]
  |  Branch (331:27): [True: 644, False: 148]
  |  Branch (331:41): [True: 68, False: 576]
  |  Branch (331:56): [True: 94, False: 630]
  |  Branch (331:66): [True: 32, False: 62]
  ------------------
  332|    878|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  38.1k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  38.1k|  bigint& real_digits = bigmant;
  347|  38.1k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  38.1k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  38.1k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  38.1k|  T b;
  354|  38.1k|  to_float(false, am_b, b);
  355|  38.1k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  38.1k|  bigint theor_digits(theor.mantissa);
  357|  38.1k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  38.1k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  38.1k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  38.1k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 38.1k, False: 0]
  ------------------
  363|  38.1k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  38.1k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  38.1k|  }
  365|  38.1k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 38.1k, False: 0]
  ------------------
  366|  38.1k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  38.1k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  38.1k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  38.1k|  int ord = real_digits.compare(theor_digits);
  373|  38.1k|  adjusted_mantissa answer = am;
  374|  38.1k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  38.1k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  38.1k|      (void)_;  // not needed, since we've done our comparison
  377|  38.1k|      (void)__; // not needed, since we've done our comparison
  378|  38.1k|      if (ord > 0) {
  379|  38.1k|        return true;
  380|  38.1k|      } else if (ord < 0) {
  381|  38.1k|        return false;
  382|  38.1k|      } else {
  383|  38.1k|        return is_odd;
  384|  38.1k|      }
  385|  38.1k|    });
  386|  38.1k|  });
  387|       |
  388|  38.1k|  return answer;
  389|  38.1k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  38.1k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  38.1k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  38.1k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 38.1k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  38.1k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  38.1k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 38.1k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  38.1k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  38.1k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 38.1k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  38.1k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  38.1k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  76.1k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  76.1k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 76.1k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  76.1k|  } else {
  153|  76.1k|    am.mantissa >>= shift;
  154|  76.1k|  }
  155|  76.1k|  am.power2 += shift;
  156|  76.1k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  38.1k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  38.1k|  adjusted_mantissa am = to_extended(value);
   84|  38.1k|  am.mantissa <<= 1;
   85|  38.1k|  am.mantissa += 1;
   86|  38.1k|  am.power2 -= 1;
   87|  38.1k|  return am;
   88|  38.1k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  38.1k|adjusted_mantissa to_extended(T value) noexcept {
   50|  38.1k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  38.1k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  38.1k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  38.1k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  38.1k|  adjusted_mantissa am;
   56|  38.1k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  38.1k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  38.1k|  ::memcpy(&bits, &value, sizeof(T));
   62|  38.1k|#endif
   63|  38.1k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 38.1k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  38.1k|  } else {
   68|       |    // normal
   69|  38.1k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  38.1k|    am.power2 -= bias;
   71|  38.1k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  38.1k|  }
   73|       |
   74|  38.1k|  return am;
   75|  38.1k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  38.1k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  38.1k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  38.1k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 38.1k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  38.1k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  38.1k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 38.1k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  38.1k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  38.1k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 38.1k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  38.1k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  38.1k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  38.1k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  38.1k|      (void)_;  // not needed, since we've done our comparison
  377|  38.1k|      (void)__; // not needed, since we've done our comparison
  378|  38.1k|      if (ord > 0) {
  379|  38.1k|        return true;
  380|  38.1k|      } else if (ord < 0) {
  381|  38.1k|        return false;
  382|  38.1k|      } else {
  383|  38.1k|        return is_odd;
  384|  38.1k|      }
  385|  38.1k|    });
  386|  38.1k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  38.1k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  38.1k|  const uint64_t mask
  125|  38.1k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 38.1k]
  ------------------
  126|  38.1k|    ? UINT64_MAX
  127|  38.1k|    : (uint64_t(1) << shift) - 1;
  128|  38.1k|  const uint64_t halfway
  129|  38.1k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 38.1k]
  ------------------
  130|  38.1k|    ? 0
  131|  38.1k|    : uint64_t(1) << (shift - 1);
  132|  38.1k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  38.1k|  bool is_above = truncated_bits > halfway;
  134|  38.1k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  38.1k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 38.1k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  38.1k|  } else {
  140|  38.1k|    am.mantissa >>= shift;
  141|  38.1k|  }
  142|  38.1k|  am.power2 += shift;
  143|       |
  144|  38.1k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  38.1k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  38.1k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  38.1k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  38.1k|      (void)_;  // not needed, since we've done our comparison
  377|  38.1k|      (void)__; // not needed, since we've done our comparison
  378|  38.1k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 536, False: 37.6k]
  ------------------
  379|    536|        return true;
  380|  37.6k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 29.7k, False: 7.89k]
  ------------------
  381|  29.7k|        return false;
  382|  29.7k|      } else {
  383|  7.89k|        return is_odd;
  384|  7.89k|      }
  385|  38.1k|    });
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  52.0k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  52.0k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  52.0k|  int32_t sci_exp = scientific_exponent(num);
  411|  52.0k|  size_t max_digits = binary_format<T>::max_digits();
  412|  52.0k|  size_t digits = 0;
  413|  52.0k|  bigint bigmant;
  414|  52.0k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  52.0k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  52.0k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 14.0k, False: 37.9k]
  ------------------
  418|  14.0k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  37.9k|  } else {
  420|  37.9k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  37.9k|  }
  422|  52.0k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  14.0k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  14.0k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  14.0k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  14.0k|  adjusted_mantissa answer;
  324|  14.0k|  bool truncated;
  325|  14.0k|  answer.mantissa = bigmant.hi64(truncated);
  326|  14.0k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  14.0k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  14.0k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  14.0k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.0k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  14.0k|    });
  333|  14.0k|  });
  334|       |
  335|  14.0k|  return answer;
  336|  14.0k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  14.0k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  14.0k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  14.0k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 14.0k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  14.0k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  14.0k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 1.01k, False: 13.0k]
  ------------------
  109|  1.01k|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|  1.01k|    am.power2++;
  111|  1.01k|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  14.0k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  14.0k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 14.0k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  14.0k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  14.0k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  14.0k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.0k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  14.0k|    });
  333|  14.0k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  14.0k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  14.0k|  const uint64_t mask
  125|  14.0k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 14.0k]
  ------------------
  126|  14.0k|    ? UINT64_MAX
  127|  14.0k|    : (uint64_t(1) << shift) - 1;
  128|  14.0k|  const uint64_t halfway
  129|  14.0k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 14.0k]
  ------------------
  130|  14.0k|    ? 0
  131|  14.0k|    : uint64_t(1) << (shift - 1);
  132|  14.0k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  14.0k|  bool is_above = truncated_bits > halfway;
  134|  14.0k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  14.0k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 14.0k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  14.0k|  } else {
  140|  14.0k|    am.mantissa >>= shift;
  141|  14.0k|  }
  142|  14.0k|  am.power2 += shift;
  143|       |
  144|  14.0k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  14.0k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  14.0k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  14.0k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  14.0k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 1.16k, False: 12.9k]
  |  Branch (331:27): [True: 11.9k, False: 948]
  |  Branch (331:41): [True: 3.84k, False: 8.14k]
  |  Branch (331:56): [True: 356, False: 8.73k]
  |  Branch (331:66): [True: 82, False: 274]
  ------------------
  332|  14.0k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  37.9k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  37.9k|  bigint& real_digits = bigmant;
  347|  37.9k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  37.9k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  37.9k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  37.9k|  T b;
  354|  37.9k|  to_float(false, am_b, b);
  355|  37.9k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  37.9k|  bigint theor_digits(theor.mantissa);
  357|  37.9k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  37.9k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  37.9k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  37.9k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 37.9k, False: 0]
  ------------------
  363|  37.9k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  37.9k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  37.9k|  }
  365|  37.9k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 5.06k, False: 32.8k]
  ------------------
  366|  5.06k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  5.06k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  32.8k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 32.7k, False: 130]
  ------------------
  368|  32.7k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  32.7k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  32.7k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  37.9k|  int ord = real_digits.compare(theor_digits);
  373|  37.9k|  adjusted_mantissa answer = am;
  374|  37.9k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  37.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  37.9k|      (void)_;  // not needed, since we've done our comparison
  377|  37.9k|      (void)__; // not needed, since we've done our comparison
  378|  37.9k|      if (ord > 0) {
  379|  37.9k|        return true;
  380|  37.9k|      } else if (ord < 0) {
  381|  37.9k|        return false;
  382|  37.9k|      } else {
  383|  37.9k|        return is_odd;
  384|  37.9k|      }
  385|  37.9k|    });
  386|  37.9k|  });
  387|       |
  388|  37.9k|  return answer;
  389|  37.9k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  37.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  37.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  37.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 168, False: 37.7k]
  ------------------
   96|       |    // have a denormal float
   97|    168|    int32_t shift = -am.power2 + 1;
   98|    168|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    168|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 168, False: 0]
  ------------------
  101|    168|    return;
  102|    168|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  37.7k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  37.7k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 37.7k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  37.7k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  37.7k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 37.7k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  37.7k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  37.9k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  37.9k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  37.9k|  adjusted_mantissa am = to_extended(value);
   84|  37.9k|  am.mantissa <<= 1;
   85|  37.9k|  am.mantissa += 1;
   86|  37.9k|  am.power2 -= 1;
   87|  37.9k|  return am;
   88|  37.9k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  37.9k|adjusted_mantissa to_extended(T value) noexcept {
   50|  37.9k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  37.9k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  37.9k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  37.9k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  37.9k|  adjusted_mantissa am;
   56|  37.9k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  37.9k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  37.9k|  ::memcpy(&bits, &value, sizeof(T));
   62|  37.9k|#endif
   63|  37.9k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 168, False: 37.7k]
  ------------------
   64|       |    // denormal
   65|    168|    am.power2 = 1 - bias;
   66|    168|    am.mantissa = bits & mantissa_mask;
   67|  37.7k|  } else {
   68|       |    // normal
   69|  37.7k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  37.7k|    am.power2 -= bias;
   71|  37.7k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  37.7k|  }
   73|       |
   74|  37.9k|  return am;
   75|  37.9k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  37.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  37.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  37.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 168, False: 37.7k]
  ------------------
   96|       |    // have a denormal float
   97|    168|    int32_t shift = -am.power2 + 1;
   98|    168|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    168|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 168, False: 0]
  ------------------
  101|    168|    return;
  102|    168|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  37.7k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  37.7k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 118, False: 37.6k]
  ------------------
  109|    118|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    118|    am.power2++;
  111|    118|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  37.7k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  37.7k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 37.7k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  37.7k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  37.9k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  37.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  37.9k|      (void)_;  // not needed, since we've done our comparison
  377|  37.9k|      (void)__; // not needed, since we've done our comparison
  378|  37.9k|      if (ord > 0) {
  379|  37.9k|        return true;
  380|  37.9k|      } else if (ord < 0) {
  381|  37.9k|        return false;
  382|  37.9k|      } else {
  383|  37.9k|        return is_odd;
  384|  37.9k|      }
  385|  37.9k|    });
  386|  37.9k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  37.9k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  37.9k|  const uint64_t mask
  125|  37.9k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 37.9k]
  ------------------
  126|  37.9k|    ? UINT64_MAX
  127|  37.9k|    : (uint64_t(1) << shift) - 1;
  128|  37.9k|  const uint64_t halfway
  129|  37.9k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 37.9k]
  ------------------
  130|  37.9k|    ? 0
  131|  37.9k|    : uint64_t(1) << (shift - 1);
  132|  37.9k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  37.9k|  bool is_above = truncated_bits > halfway;
  134|  37.9k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  37.9k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 37.9k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  37.9k|  } else {
  140|  37.9k|    am.mantissa >>= shift;
  141|  37.9k|  }
  142|  37.9k|  am.power2 += shift;
  143|       |
  144|  37.9k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  37.9k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  37.9k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  37.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  37.9k|      (void)_;  // not needed, since we've done our comparison
  377|  37.9k|      (void)__; // not needed, since we've done our comparison
  378|  37.9k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 10.7k, False: 27.2k]
  ------------------
  379|  10.7k|        return true;
  380|  27.2k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 26.2k, False: 990]
  ------------------
  381|  26.2k|        return false;
  382|  26.2k|      } else {
  383|    990|        return is_odd;
  384|    990|      }
  385|  37.9k|    });

_ZN10fast_float4spanIKcEC2Ev:
  235|  4.16M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  2.43M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   626k|  constexpr size_t len() const noexcept {
  238|   626k|    return length;
  239|   626k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|  1.02M|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|  1.02M|  return -10;
  469|  1.02M|#endif
  470|  1.02M|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|   963k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|   963k|  return 10;
  517|   963k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   807k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   807k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   807k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  2.69M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  2.69M|  return 23;
  477|  2.69M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   740k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   740k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   740k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   987k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   404k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   404k|  return -65;
  568|   404k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   402k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   402k|  return 38;
  559|   402k|}
_ZN10fast_float14leading_zeroesEm:
  268|   892k|int leading_zeroes(uint64_t input_num) {
  269|   892k|  assert(input_num > 0);
  270|   892k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   892k|  return __builtin_clzll(input_num);
  285|   892k|#endif
  286|   892k|}
_ZN10fast_float19full_multiplicationEmm:
  320|  1.03M|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|  1.03M|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|  1.03M|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|  1.03M|  answer.low = uint64_t(r);
  337|  1.03M|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|  1.03M|  return answer;
  342|  1.03M|}
_ZN10fast_float8value128C2Ev:
  251|  1.03M|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   471k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   471k|  return -127;
  500|   471k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|   145k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|   145k|  return -17;
  493|   145k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|   144k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|   144k|  return 10;
  485|   144k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   275k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   275k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 91.1k, False: 183k]
  |  Branch (352:38): [True: 0, False: 183k]
  ------------------
  353|   275k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  39.0k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  39.0k|  return 114;
  575|  39.0k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|   276k|{
  650|   276k|    return sizeof(uint64_t) / sizeof(UC);
  651|   276k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|   140k|{
  644|   140k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|   140k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|   140k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|   142k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   577k|  constexpr size_t len() const noexcept {
  238|   577k|    return length;
  239|   577k|  }
_ZNK10fast_float4spanImEixEm:
  241|   327k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   327k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   327k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   327k|    return ptr[index];
  244|   327k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   322k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   322k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   322k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   322k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   322k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   322k|  ::memcpy(&value, &word, sizeof(T));
  615|   322k|#endif
  616|   322k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   322k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   764k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   764k|  return 0xFF;
  507|   764k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  2.08M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|   116k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|  58.1k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|  58.1k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|  1.11M|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|  1.11M|  return -22;
  461|  1.11M|#endif
  462|  1.11M|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|  1.08M|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|  1.08M|  return 22;
  514|  1.08M|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   890k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   890k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   890k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  2.73M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  2.73M|  return 52;
  474|  2.73M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   871k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   871k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   871k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   382k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   382k|  return -342;
  564|   382k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   381k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   381k|  return 308;
  555|   381k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   481k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   481k|  return -1023;
  497|   481k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|   111k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|   111k|  return -4;
  489|   111k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  66.6k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  66.6k|  return 23;
  481|  66.6k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  52.0k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  52.0k|  return 769;
  572|  52.0k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   283k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   283k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   283k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   283k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   283k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   283k|  ::memcpy(&value, &word, sizeof(T));
  615|   283k|#endif
  616|   283k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   283k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   703k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   703k|  return 0x7FF;
  504|   703k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   996k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   996k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   996k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   996k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   996k|    return from_chars_advanced(first, last, value, options);
  143|   996k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   996k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   996k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   996k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   996k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   996k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 996k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   996k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   996k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 996k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   996k|  answer.ec = std::errc(); // be optimistic
  221|   996k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   996k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 934k, False: 62.2k]
  |  Branch (227:69): [True: 864k, False: 69.2k]
  |  Branch (227:131): [True: 778k, False: 86.0k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   778k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 778k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   778k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 712k, False: 66.3k]
  ------------------
  239|   712k|        value = T(pns.mantissa);
  240|   712k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 11.1k, False: 701k]
  ------------------
  241|   701k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   712k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 712k]
  ------------------
  243|   712k|        return answer;
  244|   712k|      }
  245|   778k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   778k|  }
  262|   283k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   283k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 131k, False: 152k]
  |  Branch (263:29): [True: 131k, False: 0]
  ------------------
  264|   131k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 39.0k, False: 92.5k]
  ------------------
  265|  39.0k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  39.0k|    }
  267|   131k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   283k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 39.0k, False: 244k]
  ------------------
  271|   283k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   283k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 271k, False: 12.0k]
  |  Branch (273:29): [True: 19.6k, False: 252k]
  |  Branch (273:49): [True: 1.49k, False: 18.2k]
  |  Branch (273:68): [True: 8.06k, False: 274k]
  ------------------
  274|  9.55k|    answer.ec = std::errc::result_out_of_range;
  275|  9.55k|  }
  276|   283k|  return answer;
  277|   996k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.69M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.69M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.69M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.69M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.69M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.69M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  29.0k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  29.0k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  29.0k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|  29.0k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  29.0k|    return from_chars_advanced(first, last, value, options);
  143|  29.0k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  29.0k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  29.0k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  29.0k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  29.0k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  29.0k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 29.0k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  29.0k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  29.0k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 29.0k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  29.0k|  answer.ec = std::errc(); // be optimistic
  221|  29.0k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  29.0k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 28.9k, False: 72]
  |  Branch (227:69): [True: 28.4k, False: 592]
  |  Branch (227:131): [True: 28.4k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  28.4k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 28.4k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  28.4k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 28.4k, False: 0]
  ------------------
  239|  28.4k|        value = T(pns.mantissa);
  240|  28.4k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 36, False: 28.3k]
  ------------------
  241|  28.3k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  28.4k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 28.4k]
  ------------------
  243|  28.4k|        return answer;
  244|  28.4k|      }
  245|  28.4k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  28.4k|  }
  262|    664|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|    664|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 664]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|    664|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 664]
  ------------------
  271|    664|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|    664|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 646, False: 18]
  |  Branch (273:29): [True: 582, False: 64]
  |  Branch (273:49): [True: 54, False: 528]
  |  Branch (273:68): [True: 528, False: 82]
  ------------------
  274|    582|    answer.ec = std::errc::result_out_of_range;
  275|    582|  }
  276|    664|  return answer;
  277|  29.0k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  1.08M|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  1.08M|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  1.08M|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  1.08M|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  1.08M|    return from_chars_advanced(first, last, value, options);
  143|  1.08M|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  1.08M|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  1.08M|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  1.08M|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  1.08M|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  1.08M|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 1.08M]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  1.08M|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  1.08M|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 1.08M]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  1.08M|  answer.ec = std::errc(); // be optimistic
  221|  1.08M|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  1.08M|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 1.05M, False: 34.9k]
  |  Branch (227:69): [True: 980k, False: 72.1k]
  |  Branch (227:131): [True: 861k, False: 119k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   861k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 861k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   861k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 843k, False: 18.6k]
  ------------------
  239|   843k|        value = T(pns.mantissa);
  240|   843k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 43.4k, False: 799k]
  ------------------
  241|   799k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   843k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 843k]
  ------------------
  243|   843k|        return answer;
  244|   843k|      }
  245|   861k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   861k|  }
  262|   244k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   244k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 143k, False: 101k]
  |  Branch (263:29): [True: 143k, False: 0]
  ------------------
  264|   143k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 52.0k, False: 91.3k]
  ------------------
  265|  52.0k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  52.0k|    }
  267|   143k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   244k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 52.0k, False: 192k]
  ------------------
  271|   244k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   244k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 238k, False: 6.75k]
  |  Branch (273:29): [True: 10.7k, False: 227k]
  |  Branch (273:49): [True: 416, False: 10.2k]
  |  Branch (273:68): [True: 3.81k, False: 240k]
  ------------------
  274|  4.23k|    answer.ec = std::errc::result_out_of_range;
  275|  4.23k|  }
  276|   244k|  return answer;
  277|  1.08M|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  29.0k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  29.0k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  29.0k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  29.0k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  29.0k|    return from_chars_advanced(first, last, value, options);
  143|  29.0k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  29.0k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  29.0k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  29.0k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  29.0k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  29.0k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 29.0k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  29.0k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  29.0k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 29.0k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  29.0k|  answer.ec = std::errc(); // be optimistic
  221|  29.0k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  29.0k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 29.0k, False: 72]
  |  Branch (227:69): [True: 28.4k, False: 564]
  |  Branch (227:131): [True: 28.4k, False: 0]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  28.4k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 28.4k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  28.4k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 28.4k, False: 0]
  ------------------
  239|  28.4k|        value = T(pns.mantissa);
  240|  28.4k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 36, False: 28.4k]
  ------------------
  241|  28.4k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  28.4k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 28.4k]
  ------------------
  243|  28.4k|        return answer;
  244|  28.4k|      }
  245|  28.4k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  28.4k|  }
  262|    636|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|    636|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 0, False: 636]
  |  Branch (263:29): [True: 0, False: 0]
  ------------------
  264|      0|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 0]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|      0|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|    636|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 636]
  ------------------
  271|    636|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|    636|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 618, False: 18]
  |  Branch (273:29): [True: 336, False: 282]
  |  Branch (273:49): [True: 0, False: 336]
  |  Branch (273:68): [True: 336, False: 300]
  ------------------
  274|    336|    answer.ec = std::errc::result_out_of_range;
  275|    336|  }
  276|    636|  return answer;
  277|  29.0k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  7.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|   721k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|   722k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  6.15M|{
 3803|  6.15M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3803:19): [Folded - Ignored]
  ------------------
 3804|  6.15M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|  6.15M|    }
 3806|  6.15M|    else if constexpr (sizeof(U) == 2) {
 3807|  6.15M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|  6.15M|    }
 3809|  6.15M|    else {
 3810|       |        // utf-32
 3811|  6.15M|        static_assert(sizeof(U) == 4);
 3812|  6.15M|        SCN_UNUSED(ch);
 3813|  6.15M|        return 1;
 3814|  6.15M|    }
 3815|  6.15M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  6.15M|{
 3767|  6.15M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  6.15M|    SCN_GCC_COMPAT_PUSH
 3770|  6.15M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  6.15M|    constexpr char lengths[] =
 3772|  6.15M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  6.15M|        "\1\1\1\1\1\1\1\1"
 3774|  6.15M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  6.15M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  6.15M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  6.15M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  6.15M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  6.15M|    SCN_GCC_COMPAT_POP
 3781|  6.15M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  5.82M|{
 4009|  5.82M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4009:19): [Folded - Ignored]
  ------------------
 4010|  5.82M|        return decode_utf8_code_point_exhaustive(input);
 4011|  5.82M|    }
 4012|  5.82M|    else if constexpr (sizeof(CharT) == 2) {
 4013|  5.82M|        return decode_utf16_code_point_exhaustive(input);
 4014|  5.82M|    }
 4015|  5.82M|    else {
 4016|  5.82M|        SCN_EXPECT(input.size() == 1);
 4017|  5.82M|        auto cp = static_cast<char32_t>(input.front());
 4018|  5.82M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|  5.82M|            return invalid_code_point;
 4020|  5.82M|        }
 4021|  5.82M|        return cp;
 4022|  5.82M|    }
 4023|  5.82M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  5.82M|{
 3822|  5.82M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  5.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  5.82M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  5.82M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  5.82M|    };
 3827|       |
 3828|  5.82M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 5.56M, False: 258k]
  ------------------
 3829|  5.56M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 831, False: 5.56M]
  ------------------
 3830|    831|            SCN_UNLIKELY_ATTR
 3831|    831|            return invalid_code_point;
 3832|    831|        }
 3833|  5.56M|        return static_cast<char32_t>(input[0]);
 3834|  5.56M|    }
 3835|       |
 3836|   258k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 226k, False: 31.6k]
  ------------------
 3837|   226k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 145, False: 226k]
  ------------------
 3838|    145|            SCN_UNLIKELY_ATTR
 3839|    145|            return invalid_code_point;
 3840|    145|        }
 3841|   226k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 51.8k, False: 174k]
  ------------------
 3842|  51.8k|            SCN_UNLIKELY_ATTR
 3843|  51.8k|            return invalid_code_point;
 3844|  51.8k|        }
 3845|       |
 3846|   174k|        char32_t cp{};
 3847|   174k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|   174k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|   174k|        return cp;
 3850|   226k|    }
 3851|       |
 3852|  31.6k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 13.9k, False: 17.6k]
  ------------------
 3853|  13.9k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 134, False: 13.8k]
  ------------------
 3854|    134|            SCN_UNLIKELY_ATTR
 3855|    134|            return invalid_code_point;
 3856|    134|        }
 3857|  13.8k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 6.65k, False: 7.20k]
  ------------------
 3858|  13.8k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 1.10k, False: 6.10k]
  ------------------
 3859|  7.75k|            SCN_UNLIKELY_ATTR
 3860|  7.75k|            return invalid_code_point;
 3861|  7.75k|        }
 3862|       |
 3863|  6.10k|        char32_t cp{};
 3864|  6.10k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|  6.10k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|  6.10k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|  6.10k|        return cp;
 3868|  13.8k|    }
 3869|       |
 3870|  17.6k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 17.6k, False: 0]
  ------------------
 3871|  17.6k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 17.6k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  17.6k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 2.43k, False: 15.2k]
  ------------------
 3876|  2.43k|            SCN_UNLIKELY_ATTR
 3877|  2.43k|            return invalid_code_point;
 3878|  2.43k|        }
 3879|  15.2k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 3.58k, False: 11.6k]
  ------------------
 3880|  15.2k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 1.11k, False: 10.5k]
  ------------------
 3881|  15.2k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 1.74k, False: 8.76k]
  ------------------
 3882|  6.44k|            SCN_UNLIKELY_ATTR
 3883|  6.44k|            return invalid_code_point;
 3884|  6.44k|        }
 3885|       |
 3886|  8.76k|        char32_t cp{};
 3887|  8.76k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|  8.76k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|  8.76k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|  8.76k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|  8.76k|        return cp;
 3892|  15.2k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|   284k|    const auto is_trailing_code_unit = [](char ch) {
 3825|   284k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|   284k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  12.4M|{
 3695|  12.4M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3695:19): [Folded - Ignored]
  |  Branch (3695:19): [Folded - Ignored]
  ------------------
 3696|  12.4M|                                          decltype(first), decltype(last)> &&
 3697|  12.4M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3697:19): [Folded - Ignored]
  ------------------
 3698|  12.4M|        return {first, last};
 3699|  12.4M|    }
 3700|  12.4M|    else {
 3701|  12.4M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  12.4M|                                       to_address(first), to_address(last)))};
 3703|  12.4M|    }
 3704|  12.4M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  38.0M|{
  322|  38.0M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  38.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  38.0M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  42.3M|{
  302|  42.3M|    return p;
  303|  42.3M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  18.5M|{
 3726|  18.5M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3726:19): [Folded - Ignored]
  |  Branch (3726:19): [Folded - Ignored]
  ------------------
 3727|  18.5M|                      typename std::basic_string_view<CharT>::iterator,
 3728|  18.5M|                      decltype(it)> &&
 3729|  18.5M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3729:19): [Folded - Ignored]
  ------------------
 3730|  18.5M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  18.5M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  18.5M|        return it;
 3732|  18.5M|    }
 3733|  18.5M|    else {
 3734|  18.5M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|  18.5M|    }
 3736|  18.5M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   122k|    {
 2720|   122k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   122k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   122k|    {
 2701|   122k|        return decay_copy(t.begin());
 2702|   122k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1944|  25.6M|{
 1945|  25.6M|    return SCN_FWD(t);
  ------------------
  |  |  930|  25.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  25.6M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  4.80M|    {
 2777|  4.80M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  4.80M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  4.80M|    {
 2759|  4.80M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  4.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  4.80M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8862|   340k|{
 8863|   340k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   340k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   340k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   340k|    static_cast<    \
  |  |  929|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   340k|    static_cast<    \
  |  |  929|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   340k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5391|  1.36M|{
 5392|  1.36M|    detail::check_scan_arg_types<Args...>();
 5393|  1.36M|    return detail::scan_arg_store<Context, Args...>{};
 5394|  1.36M|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5130|  1.70M|{
 5131|  1.70M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  1.70M|                  "Scan argument types must be default constructible");
 5133|  1.70M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  1.70M|                  "Scan argument types must be Destructible");
 5135|  1.70M|    static_assert(
 5136|  1.70M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  1.70M|        "Scan argument types must not be references");
 5138|  1.70M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5344|  1.36M|    {
 5345|  1.36M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  1.36M|    {
 5356|  1.36M|        return {detail::make_arg<
 5357|  1.36M|            kind, Context,
 5358|  1.36M|            mapped_type_constant<remove_cvref_t<A>,
 5359|  1.36M|                                 typename Context::char_type>::value>(args)...};
 5360|  1.36M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5165|  1.36M|{
 5166|  1.36M|    return make_value<Context>(value).ref_value;
 5167|  1.36M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5115|  1.51M|{
 5116|  1.51M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  1.51M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  1.51M|                                  needs_context_tag>) {
 5120|  1.51M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  1.51M|    }
 5122|  1.51M|    else {
 5123|  1.51M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  1.51M|            value, context_tag<Context>{}));
 5125|  1.51M|    }
 5126|  1.51M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4954|  1.51M|    {                                                                        \
 4955|  1.51M|        return val;                                                          \
 4956|  1.51M|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5084|  1.70M|{
 5085|  1.70M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  1.70M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  1.70M|    constexpr bool scannable_char =
 5089|  1.70M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  1.70M|    static_assert(scannable_char,
 5091|  1.70M|                  "Cannot scan an argument of an unsupported character "
 5092|  1.70M|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  1.70M|    constexpr bool scannable_const =
 5095|  1.70M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  1.70M|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  1.70M|    constexpr bool scannable_disabled =
 5099|  1.70M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  1.70M|    static_assert(scannable_disabled,
 5101|  1.70M|                  "Cannot scan an argument that has been disabled by "
 5102|  1.70M|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  1.70M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  1.70M|    static_assert(
 5106|  1.70M|        scannable,
 5107|  1.70M|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  1.70M|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  1.70M|    return arg_value{arg};
 5111|  1.70M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4897|  1.70M|    {
 4898|  1.70M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8649|  1.08M|{
 8650|  1.08M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8651|  1.08M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8586|  1.08M|{
 8587|  1.08M|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|  1.08M|    auto result = vscan_impl(buffer, format, args);
 8590|  1.08M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.1k, False: 1.02M]
  |  |  ------------------
  ------------------
 8591|  55.1k|        return unexpected(result.error());
 8592|  55.1k|    }
 8593|  1.02M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|  1.08M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4715|  2.40M|{
 4716|  2.40M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|  2.40M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|  2.40M|                  "\n"
 4720|  2.40M|                  "Unsupported range type given as input to a scanning "
 4721|  2.40M|                  "function.\n"
 4722|  2.40M|                  "A range needs to have a character type (value type) "
 4723|  2.40M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|  2.40M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|  2.40M|                  "to be included.\n"
 4726|  2.40M|                  "See the scnlib documentation for more details.");
 4727|  2.40M|    static_assert(
 4728|  2.40M|        !std::is_same_v<T, custom_char_traits>,
 4729|  2.40M|        "\n"
 4730|  2.40M|        "Unsupported range type given as input to a scanning "
 4731|  2.40M|        "function.\n"
 4732|  2.40M|        "String types (std::basic_string, and std::basic_string_view) "
 4733|  2.40M|        "need to use std::char_traits. Strings with custom Traits are "
 4734|  2.40M|        "not supported.");
 4735|  2.40M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|  2.40M|                  "\n"
 4737|  2.40M|                  "Unsupported range type given as input to a scanning "
 4738|  2.40M|                  "function.\n"
 4739|  2.40M|                  "file_marker_found cannot be used as an "
 4740|  2.40M|                  "source range type to scn::scan.\n"
 4741|  2.40M|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|  2.40M|                  "and do not provide an explicit source range, "
 4743|  2.40M|                  "or use scn::scan with a FILE* directly.");
 4744|  2.40M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|  2.40M|                  "\n"
 4746|  2.40M|                  "Unsupported range type given as input to a scanning "
 4747|  2.40M|                  "function.\n"
 4748|  2.40M|                  "In order to be scannable, a range needs to satisfy "
 4749|  2.40M|                  "`forward_range`. `input_range` is not sufficient.");
 4750|  2.40M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|  2.40M|                  "\n"
 4752|  2.40M|                  "Unsupported range type given as input to a scanning "
 4753|  2.40M|                  "function.\n"
 4754|  2.40M|                  "A range needs to model forward_range and have a valid "
 4755|  2.40M|                  "character type (char or wchar_t) to be scannable.\n"
 4756|  2.40M|                  "Examples of scannable ranges are std::string, "
 4757|  2.40M|                  "std::string_view, "
 4758|  2.40M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|  2.40M|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|  2.40M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|  2.40M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4654|  2.40M|{
 4655|  2.40M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4655:19): [Folded - Ignored]
  ------------------
 4656|  2.40M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4657|  2.40M|    }
 4658|  2.40M|    else {
 4659|  2.40M|        return invalid_char_type{};
 4660|  2.40M|    }
 4661|  2.40M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|  2.40M|    {
 2851|  2.40M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|  2.40M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|  2.40M|    {
 2832|  2.40M|        return t.data();
 2833|  2.40M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3226|  2.40M|    {
 3227|  2.40M|        return ranges::empty(derived())
  ------------------
  |  Branch (3227:16): [True: 21.4k, False: 2.38M]
  ------------------
 3228|  2.40M|                   ? nullptr
 3229|  2.40M|                   : std::addressof(*ranges::begin(derived()));
 3230|  2.40M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|  2.40M|    {
 3001|  2.40M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  2.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|  2.40M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|  2.40M|    {
 2974|  2.40M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  2.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|  2.40M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3334|  13.3M|    {
 3335|  13.3M|        return m_iterator == m_sentinel;
 3336|  13.3M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3180|  4.78M|    {
 3181|  4.78M|        return static_cast<const D&>(*this);
 3182|  4.78M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  4.66M|    {
 2720|  4.66M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  4.66M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  4.66M|    {
 2701|  4.66M|        return decay_copy(t.begin());
 2702|  4.66M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  56.5M|    {
 3326|  56.5M|        return m_iterator;
 3327|  56.5M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2925|  2.40M|    {
 2926|  2.40M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2927|  2.40M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2891|  2.40M|    {
 2892|  2.40M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2893|  2.40M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1944|  7.36M|{
 1945|  7.36M|    return SCN_FWD(t);
  ------------------
  |  |  930|  7.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  7.36M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3341|  13.3M|    {
 3342|  13.3M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  13.3M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1593|  17.7M|    {
 1594|  17.7M|        return has_value();
 1595|  17.7M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  480|  35.2M|    {
  481|  35.2M|        return m_has_value;
  482|  35.2M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1599|  1.08M|    {
 1600|  1.08M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.08M|        return this->get_unexpected().error();
 1602|  1.08M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.08M|    {
  464|  1.08M|        return m_unexpected;
  465|  1.08M|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  356|  8.37M|    {
  357|  8.37M|        return m_unexpected;
  358|  8.37M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  342|  4.09M|    {
  343|  4.09M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.09M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  4.09M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|   119k|    {
 1472|   119k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   119k|    {
  443|   119k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  351|  9.85M|    {
  352|  9.85M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  9.85M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  9.85M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.40M|    {
 1173|  2.40M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5918|  2.28M|{
 5919|  2.28M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  2.28M|                      ranges::iterator_t<SourceRange>>) {
 5921|  2.28M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  2.28M|    }
 5923|  2.28M|    else {
 5924|  2.28M|        auto it = ranges::begin(source);
 5925|  2.28M|        while (n > 0) {
 5926|  2.28M|            --n;
 5927|  2.28M|            ++it;
 5928|  2.28M|        }
 5929|  2.28M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  2.28M|    }
 5931|  2.28M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  13.8M|    {
 2720|  13.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  13.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  13.8M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  13.8M|    {
 2701|  13.8M|        return decay_copy(t.begin());
 2702|  13.8M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5905|  2.28M|{
 5906|  2.28M|    return ranges::end(source);
 5907|  2.28M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  2.28M|    {
 2777|  2.28M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  2.28M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  2.28M|    {
 2759|  2.28M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  2.28M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  28.4M|    {
 3330|  28.4M|        return m_sentinel;
 3331|  28.4M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1648|  7.00M|    {
 1649|  7.00M|        return value();
 1650|  7.00M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1622|  16.3M|    {
 1623|  16.3M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  16.3M|        return this->get_value();
 1625|  16.3M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  446|  16.3M|    {
  447|  16.3M|        return m_value;
  448|  16.3M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  2.28M|    {
 1426|  2.28M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  2.28M|    {
  433|  2.28M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7970|   681k|    {
 7971|   681k|        return m_str;
 7972|   681k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  1.36M|    {
 5422|  1.36M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5374|  1.36M|    {
 5375|  1.36M|        return m_argptrs;
 5376|  1.36M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5473|  4.33M|    {
 5474|  4.33M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|   681k|{
 8816|   681k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   681k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.7k, False: 644k]
  |  |  ------------------
  ------------------
 8817|  36.7k|        return unexpected(result.error());
 8818|  36.7k|    }
 8819|   644k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   644k|    static_cast<    \
  |  |  929|   644k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   644k|    static_cast<    \
  |  |  929|   644k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   681k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1593|  2.40M|    {
 1594|  2.40M|        return has_value();
 1595|  2.40M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.80M|    {
  481|  4.80M|        return m_has_value;
  482|  4.80M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1599|   119k|    {
 1600|   119k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   119k|        return this->get_unexpected().error();
 1602|   119k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   119k|    {
  464|   119k|        return m_unexpected;
  465|   119k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  39.8k|    {
 1472|  39.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  39.8k|    {
  443|  39.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   756k|    {
 1173|   756k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1648|  2.05M|    {
 1649|  2.05M|        return value();
 1650|  2.05M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  2.28M|    {
 1623|  2.28M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.28M|        return this->get_value();
 1625|  2.28M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.28M|    {
  447|  2.28M|        return m_value;
  448|  2.28M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5825|   716k|    {
 5826|   716k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5676|  2.28M|    {
 5677|  2.28M|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5611|  1.46M|    {
 5612|  1.46M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   716k|    {
 1426|   716k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   716k|    {
  433|   716k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5369|  1.36M|    {
 5370|  1.36M|        return m_args;
 5371|  1.36M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3311|  22.7M|    {
 3312|  22.7M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7686|  4.33M|{
 7687|  4.33M|    return s;
 7688|  4.33M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7663|  4.33M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   681k|    {
 7967|   681k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1593|   756k|    {
 1594|   756k|        return has_value();
 1595|   756k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.47M|    {
  481|  1.47M|        return m_has_value;
  482|  1.47M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1668|   716k|    {
 1669|   716k|        return &value();
 1670|   716k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   716k|    {
 1623|   716k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   716k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   716k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   716k|        return this->get_value();
 1625|   716k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   716k|    {
  447|   716k|        return m_value;
  448|   716k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5693|  2.28M|    {
 5694|  2.28M|        return ranges::begin(m_range);
 5695|  2.28M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8929|   340k|{
 8930|   340k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   340k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   340k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   340k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   340k|    static_cast<    \
  |  |  929|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   340k|    static_cast<    \
  |  |  929|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   340k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8667|  1.08M|{
 8668|  1.08M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8669|  1.08M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8602|  1.08M|{
 8603|  1.08M|#if !SCN_DISABLE_LOCALE
 8604|  1.08M|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|  1.08M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|  1.08M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|  1.08M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|  1.08M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.1k, False: 1.02M]
  |  |  ------------------
  ------------------
 8611|  55.1k|        return unexpected(result.error());
 8612|  55.1k|    }
 8613|  1.02M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|  1.08M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8968|  74.7k|{
 8969|  74.7k|    T value;
 8970|  74.7k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  74.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  74.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  74.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  74.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.06k, False: 71.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.06k|    }                                                  \
  |  |  |  | 3667|  74.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  71.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  71.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  71.6k|    static_cast<    \
  |  |  929|  71.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  71.6k|    static_cast<    \
  |  |  929|  71.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  74.7k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5150|   144k|{
 5151|   144k|    check_scan_arg_types<T>();
 5152|       |
 5153|   144k|    basic_scan_arg<Context> arg;
 5154|   144k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|   144k|    arg.m_value = make_value<Context>(value);
 5156|   144k|    return arg;
 5157|   144k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5236|  4.80M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4893|  5.38M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8680|   241k|{
 8681|   241k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8682|   241k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|   241k|{
 8627|   241k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|   241k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|   241k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.18k, False: 232k]
  |  |  ------------------
  ------------------
 8631|  9.18k|        return unexpected(result.error());
 8632|  9.18k|    }
 8633|   232k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|   241k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|   232k|    {
 1659|   232k|        return std::move(value());
 1660|   232k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8862|   367k|{
 8863|   367k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   367k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   367k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   367k|    static_cast<    \
  |  |  929|   367k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   367k|    static_cast<    \
  |  |  929|   367k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   367k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5391|  1.47M|{
 5392|  1.47M|    detail::check_scan_arg_types<Args...>();
 5393|  1.47M|    return detail::scan_arg_store<Context, Args...>{};
 5394|  1.47M|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5130|  1.82M|{
 5131|  1.82M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  1.82M|                  "Scan argument types must be default constructible");
 5133|  1.82M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  1.82M|                  "Scan argument types must be Destructible");
 5135|  1.82M|    static_assert(
 5136|  1.82M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  1.82M|        "Scan argument types must not be references");
 5138|  1.82M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5344|  1.47M|    {
 5345|  1.47M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  1.47M|    {
 5356|  1.47M|        return {detail::make_arg<
 5357|  1.47M|            kind, Context,
 5358|  1.47M|            mapped_type_constant<remove_cvref_t<A>,
 5359|  1.47M|                                 typename Context::char_type>::value>(args)...};
 5360|  1.47M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5165|  1.47M|{
 5166|  1.47M|    return make_value<Context>(value).ref_value;
 5167|  1.47M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5115|  1.63M|{
 5116|  1.63M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  1.63M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  1.63M|                                  needs_context_tag>) {
 5120|  1.63M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  1.63M|    }
 5122|  1.63M|    else {
 5123|  1.63M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  1.63M|            value, context_tag<Context>{}));
 5125|  1.63M|    }
 5126|  1.63M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4954|  1.63M|    {                                                                        \
 4955|  1.63M|        return val;                                                          \
 4956|  1.63M|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5084|  1.82M|{
 5085|  1.82M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  1.82M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  1.82M|    constexpr bool scannable_char =
 5089|  1.82M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  1.82M|    static_assert(scannable_char,
 5091|  1.82M|                  "Cannot scan an argument of an unsupported character "
 5092|  1.82M|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  1.82M|    constexpr bool scannable_const =
 5095|  1.82M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  1.82M|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  1.82M|    constexpr bool scannable_disabled =
 5099|  1.82M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  1.82M|    static_assert(scannable_disabled,
 5101|  1.82M|                  "Cannot scan an argument that has been disabled by "
 5102|  1.82M|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  1.82M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  1.82M|    static_assert(
 5106|  1.82M|        scannable,
 5107|  1.82M|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  1.82M|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  1.82M|    return arg_value{arg};
 5111|  1.82M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4897|  1.82M|    {
 4898|  1.82M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7970|   735k|    {
 7971|   735k|        return m_str;
 7972|   735k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  1.47M|    {
 5422|  1.47M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5374|  1.47M|    {
 5375|  1.47M|        return m_argptrs;
 5376|  1.47M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|   735k|{
 8816|   735k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   735k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.7k, False: 698k]
  |  |  ------------------
  ------------------
 8817|  36.7k|        return unexpected(result.error());
 8818|  36.7k|    }
 8819|   698k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   698k|    static_cast<    \
  |  |  929|   698k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   698k|    static_cast<    \
  |  |  929|   698k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   735k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  39.8k|    {
 1472|  39.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  39.8k|    {
  443|  39.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   817k|    {
 1173|   817k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5825|   777k|    {
 5826|   777k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5611|  1.59M|    {
 5612|  1.59M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   777k|    {
 1426|   777k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   777k|    {
  433|   777k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5369|  1.47M|    {
 5370|  1.47M|        return m_args;
 5371|  1.47M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   735k|    {
 7967|   735k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1593|   817k|    {
 1594|   817k|        return has_value();
 1595|   817k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.59M|    {
  481|  1.59M|        return m_has_value;
  482|  1.59M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1668|   777k|    {
 1669|   777k|        return &value();
 1670|   777k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   777k|    {
 1623|   777k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   777k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   777k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   777k|        return this->get_value();
 1625|   777k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   777k|    {
  447|   777k|        return m_value;
  448|   777k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8929|   367k|{
 8930|   367k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   367k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   367k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   367k|    static_cast<    \
  |  |  929|   367k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   367k|    static_cast<    \
  |  |  929|   367k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   367k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8968|  82.6k|{
 8969|  82.6k|    T value;
 8970|  82.6k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  82.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  82.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  82.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  82.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  82.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.06k, False: 79.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.06k|    }                                                  \
  |  |  |  | 3667|  82.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  79.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  79.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  79.5k|    static_cast<    \
  |  |  929|  79.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  79.5k|    static_cast<    \
  |  |  929|  79.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  82.6k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5150|   160k|{
 5151|   160k|    check_scan_arg_types<T>();
 5152|       |
 5153|   160k|    basic_scan_arg<Context> arg;
 5154|   160k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|   160k|    arg.m_value = make_value<Context>(value);
 5156|   160k|    return arg;
 5157|   160k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8862|   372k|{
 8863|   372k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   372k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   372k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   372k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   372k|    static_cast<    \
  |  |  929|   372k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   372k|    static_cast<    \
  |  |  929|   372k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   372k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5391|  1.49M|{
 5392|  1.49M|    detail::check_scan_arg_types<Args...>();
 5393|  1.49M|    return detail::scan_arg_store<Context, Args...>{};
 5394|  1.49M|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5130|  1.85M|{
 5131|  1.85M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5132|  1.85M|                  "Scan argument types must be default constructible");
 5133|  1.85M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5134|  1.85M|                  "Scan argument types must be Destructible");
 5135|  1.85M|    static_assert(
 5136|  1.85M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5137|  1.85M|        "Scan argument types must not be references");
 5138|  1.85M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5344|  1.49M|    {
 5345|  1.49M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|  1.49M|    {
 5356|  1.49M|        return {detail::make_arg<
 5357|  1.49M|            kind, Context,
 5358|  1.49M|            mapped_type_constant<remove_cvref_t<A>,
 5359|  1.49M|                                 typename Context::char_type>::value>(args)...};
 5360|  1.49M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5165|  1.49M|{
 5166|  1.49M|    return make_value<Context>(value).ref_value;
 5167|  1.49M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5115|  1.65M|{
 5116|  1.65M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|  1.65M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|  1.65M|                                  needs_context_tag>) {
 5120|  1.65M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|  1.65M|    }
 5122|  1.65M|    else {
 5123|  1.65M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|  1.65M|            value, context_tag<Context>{}));
 5125|  1.65M|    }
 5126|  1.65M|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4954|  1.65M|    {                                                                        \
 4955|  1.65M|        return val;                                                          \
 4956|  1.65M|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5084|  1.85M|{
 5085|  1.85M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5086|  1.85M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5087|       |
 5088|  1.85M|    constexpr bool scannable_char =
 5089|  1.85M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5090|  1.85M|    static_assert(scannable_char,
 5091|  1.85M|                  "Cannot scan an argument of an unsupported character "
 5092|  1.85M|                  "type (i.e. char from a wchar_t source)");
 5093|       |
 5094|  1.85M|    constexpr bool scannable_const =
 5095|  1.85M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5096|  1.85M|    static_assert(scannable_const, "Cannot scan a const argument");
 5097|       |
 5098|  1.85M|    constexpr bool scannable_disabled =
 5099|  1.85M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5100|  1.85M|    static_assert(scannable_disabled,
 5101|  1.85M|                  "Cannot scan an argument that has been disabled by "
 5102|  1.85M|                  "flag (SCN_DISABLE_TYPE_*)");
 5103|       |
 5104|  1.85M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5105|  1.85M|    static_assert(
 5106|  1.85M|        scannable,
 5107|  1.85M|        "Cannot scan an argument. To make a type T scannable, provide "
 5108|  1.85M|        "a scn::scanner<T, CharT> specialization.");
 5109|       |
 5110|  1.85M|    return arg_value{arg};
 5111|  1.85M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4897|  1.85M|    {
 4898|  1.85M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7970|   744k|    {
 7971|   744k|        return m_str;
 7972|   744k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|  1.49M|    {
 5422|  1.49M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5374|  1.49M|    {
 5375|  1.49M|        return m_argptrs;
 5376|  1.49M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|   744k|{
 8816|   744k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   744k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.7k, False: 707k]
  |  |  ------------------
  ------------------
 8817|  36.7k|        return unexpected(result.error());
 8818|  36.7k|    }
 8819|   707k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   707k|    static_cast<    \
  |  |  929|   707k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   707k|    static_cast<    \
  |  |  929|   707k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   744k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  39.8k|    {
 1472|  39.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  39.8k|    {
  443|  39.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   828k|    {
 1173|   828k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5825|   788k|    {
 5826|   788k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5611|  1.61M|    {
 5612|  1.61M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   788k|    {
 1426|   788k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|   788k|    {
  433|   788k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5369|  1.49M|    {
 5370|  1.49M|        return m_args;
 5371|  1.49M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   744k|    {
 7967|   744k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1593|   828k|    {
 1594|   828k|        return has_value();
 1595|   828k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.61M|    {
  481|  1.61M|        return m_has_value;
  482|  1.61M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1668|   788k|    {
 1669|   788k|        return &value();
 1670|   788k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   788k|    {
 1623|   788k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   788k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   788k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   788k|        return this->get_value();
 1625|   788k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   788k|    {
  447|   788k|        return m_value;
  448|   788k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8929|   372k|{
 8930|   372k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   372k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   372k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   372k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   372k|    static_cast<    \
  |  |  929|   372k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   372k|    static_cast<    \
  |  |  929|   372k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   372k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8968|  84.1k|{
 8969|  84.1k|    T value;
 8970|  84.1k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  84.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  84.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  84.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  84.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  84.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.06k, False: 81.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.06k|    }                                                  \
  |  |  |  | 3667|  84.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  81.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  81.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  81.1k|    static_cast<    \
  |  |  929|  81.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  81.1k|    static_cast<    \
  |  |  929|  81.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  84.1k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5150|   162k|{
 5151|   162k|    check_scan_arg_types<T>();
 5152|       |
 5153|   162k|    basic_scan_arg<Context> arg;
 5154|   162k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|   162k|    arg.m_value = make_value<Context>(value);
 5156|   162k|    return arg;
 5157|   162k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   119k|    {
 2720|   119k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   119k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   119k|    {
 2701|   119k|        return decay_copy(t.begin());
 2702|   119k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1944|   105M|{
 1945|   105M|    return SCN_FWD(t);
  ------------------
  |  |  930|   105M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|   105M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  4.80M|    {
 2777|  4.80M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  4.80M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  4.80M|    {
 2759|  4.80M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  4.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  4.80M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8862|   343k|{
 8863|   343k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   343k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   343k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   343k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   343k|    static_cast<    \
  |  |  929|   343k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   343k|    static_cast<    \
  |  |  929|   343k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   343k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8649|  1.08M|{
 8650|  1.08M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8651|  1.08M|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8586|  1.08M|{
 8587|  1.08M|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|  1.08M|    auto result = vscan_impl(buffer, format, args);
 8590|  1.08M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.1k, False: 1.03M]
  |  |  ------------------
  ------------------
 8591|  55.1k|        return unexpected(result.error());
 8592|  55.1k|    }
 8593|  1.03M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|  1.08M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4715|  2.40M|{
 4716|  2.40M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|  2.40M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|  2.40M|                  "\n"
 4720|  2.40M|                  "Unsupported range type given as input to a scanning "
 4721|  2.40M|                  "function.\n"
 4722|  2.40M|                  "A range needs to have a character type (value type) "
 4723|  2.40M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|  2.40M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|  2.40M|                  "to be included.\n"
 4726|  2.40M|                  "See the scnlib documentation for more details.");
 4727|  2.40M|    static_assert(
 4728|  2.40M|        !std::is_same_v<T, custom_char_traits>,
 4729|  2.40M|        "\n"
 4730|  2.40M|        "Unsupported range type given as input to a scanning "
 4731|  2.40M|        "function.\n"
 4732|  2.40M|        "String types (std::basic_string, and std::basic_string_view) "
 4733|  2.40M|        "need to use std::char_traits. Strings with custom Traits are "
 4734|  2.40M|        "not supported.");
 4735|  2.40M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|  2.40M|                  "\n"
 4737|  2.40M|                  "Unsupported range type given as input to a scanning "
 4738|  2.40M|                  "function.\n"
 4739|  2.40M|                  "file_marker_found cannot be used as an "
 4740|  2.40M|                  "source range type to scn::scan.\n"
 4741|  2.40M|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|  2.40M|                  "and do not provide an explicit source range, "
 4743|  2.40M|                  "or use scn::scan with a FILE* directly.");
 4744|  2.40M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|  2.40M|                  "\n"
 4746|  2.40M|                  "Unsupported range type given as input to a scanning "
 4747|  2.40M|                  "function.\n"
 4748|  2.40M|                  "In order to be scannable, a range needs to satisfy "
 4749|  2.40M|                  "`forward_range`. `input_range` is not sufficient.");
 4750|  2.40M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|  2.40M|                  "\n"
 4752|  2.40M|                  "Unsupported range type given as input to a scanning "
 4753|  2.40M|                  "function.\n"
 4754|  2.40M|                  "A range needs to model forward_range and have a valid "
 4755|  2.40M|                  "character type (char or wchar_t) to be scannable.\n"
 4756|  2.40M|                  "Examples of scannable ranges are std::string, "
 4757|  2.40M|                  "std::string_view, "
 4758|  2.40M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|  2.40M|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|  2.40M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|  2.40M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4685|  2.40M|{
 4686|  2.40M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4686:19): [Folded - Ignored]
  ------------------
 4687|  2.40M|        return file_marker_found{};
 4688|  2.40M|    }
 4689|  2.40M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4689:24): [Folded - Ignored]
  ------------------
 4690|  2.40M|        if constexpr (ranges::range<Range>) {
 4691|  2.40M|            return insufficient_range{};
 4692|  2.40M|        }
 4693|  2.40M|        else {
 4694|  2.40M|            return invalid_input_range{};
 4695|  2.40M|        }
 4696|  2.40M|    }
 4697|  2.40M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4697:24): [Folded - Ignored]
  ------------------
 4698|  2.40M|        return invalid_char_type{};
 4699|  2.40M|    }
 4700|  2.40M|    else {
 4701|  2.40M|        return make_forward_scan_buffer(r);
 4702|  2.40M|    }
 4703|  2.40M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4519|  2.40M|{
 4520|  2.40M|    return basic_scan_forward_buffer_impl(range);
 4521|  2.40M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4406|  2.40M|    {
 4407|  2.40M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4377|  2.40M|    {
 4378|  2.40M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4146|  2.40M|    {
 4147|  2.40M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4061|  2.40M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  4.68M|    {
 2720|  4.68M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  4.68M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  4.68M|    {
 2701|  4.68M|        return decay_copy(t.begin());
 2702|  4.68M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3325|  6.96M|    {
 3326|  6.96M|        return m_iterator;
 3327|  6.96M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4410|  30.7M|    {
 4411|  30.7M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4411:13): [True: 414k, False: 30.3M]
  ------------------
 4412|   414k|            return false;
 4413|   414k|        }
 4414|  30.3M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4414:23): [Folded - Ignored]
  ------------------
 4415|  30.3M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  30.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4416|  30.3M|        }
 4417|  30.3M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4417:13): [True: 27.9M, False: 2.37M]
  ------------------
 4418|  27.9M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4419|  27.9M|                                          this->m_current_view.begin(),
 4420|  27.9M|                                          this->m_current_view.end());
 4421|  27.9M|        }
 4422|  30.3M|        m_latest = *m_cursor;
 4423|  30.3M|        ++m_cursor;
 4424|  30.3M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4425|  30.3M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4425:23): [Folded - Ignored]
  ------------------
 4426|  30.3M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  30.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4427|  30.3M|        }
 4428|  30.3M|        return true;
 4429|  30.3M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  91.4M|    {
 2777|  91.4M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  91.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  91.4M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  91.4M|    {
 2759|  91.4M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  91.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  91.4M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3329|  93.7M|    {
 3330|  93.7M|        return m_sentinel;
 3331|  93.7M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4066|  2.40M|    {
 4067|  2.40M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  2.40M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4068|  2.40M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1471|   119k|    {
 1472|   119k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|   119k|    {
  443|   119k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.40M|    {
 1173|  2.40M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5918|  2.28M|{
 5919|  2.28M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  2.28M|                      ranges::iterator_t<SourceRange>>) {
 5921|  2.28M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  2.28M|    }
 5923|  2.28M|    else {
 5924|  2.28M|        auto it = ranges::begin(source);
 5925|  2.28M|        while (n > 0) {
 5926|  2.28M|            --n;
 5927|  2.28M|            ++it;
 5928|  2.28M|        }
 5929|  2.28M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  2.28M|    }
 5931|  2.28M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  2.28M|    {
 2720|  2.28M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  2.28M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  2.28M|    {
 2701|  2.28M|        return decay_copy(t.begin());
 2702|  2.28M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5905|  2.28M|{
 5906|  2.28M|    return ranges::end(source);
 5907|  2.28M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  2.28M|    {
 2777|  2.28M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  2.28M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  2.28M|    {
 2759|  2.28M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.28M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  2.28M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1425|  2.28M|    {
 1426|  2.28M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|  2.28M|    {
  433|  2.28M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7970|   686k|    {
 7971|   686k|        return m_str;
 7972|   686k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|   686k|{
 8816|   686k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   686k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.7k, False: 649k]
  |  |  ------------------
  ------------------
 8817|  36.7k|        return unexpected(result.error());
 8818|  36.7k|    }
 8819|   649k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   649k|    static_cast<    \
  |  |  929|   649k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   649k|    static_cast<    \
  |  |  929|   649k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   686k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1593|  2.40M|    {
 1594|  2.40M|        return has_value();
 1595|  2.40M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.80M|    {
  481|  4.80M|        return m_has_value;
  482|  4.80M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1599|   119k|    {
 1600|   119k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   119k|        return this->get_unexpected().error();
 1602|   119k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   119k|    {
  464|   119k|        return m_unexpected;
  465|   119k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  39.8k|    {
 1472|  39.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  39.8k|    {
  443|  39.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   755k|    {
 1173|   755k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1648|  2.06M|    {
 1649|  2.06M|        return value();
 1650|  2.06M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1622|  2.28M|    {
 1623|  2.28M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.28M|        return this->get_value();
 1625|  2.28M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.28M|    {
  447|  2.28M|        return m_value;
  448|  2.28M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5825|   716k|    {
 5826|   716k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5676|  2.28M|    {
 5677|  2.28M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|   716k|    {
 1426|   716k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   716k|    {
  433|   716k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3311|  4.68M|    {
 3312|  4.68M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   686k|    {
 7967|   686k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1593|   755k|    {
 1594|   755k|        return has_value();
 1595|   755k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.47M|    {
  481|  1.47M|        return m_has_value;
  482|  1.47M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1668|   716k|    {
 1669|   716k|        return &value();
 1670|   716k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|   716k|    {
 1623|   716k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   716k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   716k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   716k|        return this->get_value();
 1625|   716k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   716k|    {
  447|   716k|        return m_value;
  448|   716k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5693|  2.28M|    {
 5694|  2.28M|        return ranges::begin(m_range);
 5695|  2.28M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8929|   343k|{
 8930|   343k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   343k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   343k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   343k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   343k|    static_cast<    \
  |  |  929|   343k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   343k|    static_cast<    \
  |  |  929|   343k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   343k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8667|  1.08M|{
 8668|  1.08M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8669|  1.08M|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8602|  1.08M|{
 8603|  1.08M|#if !SCN_DISABLE_LOCALE
 8604|  1.08M|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|  1.08M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|  1.08M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|  1.08M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|  1.08M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.1k, False: 1.03M]
  |  |  ------------------
  ------------------
 8611|  55.1k|        return unexpected(result.error());
 8612|  55.1k|    }
 8613|  1.03M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|  1.08M|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8968|  69.9k|{
 8969|  69.9k|    T value;
 8970|  69.9k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  69.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  69.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  69.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  69.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.06k, False: 66.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.06k|    }                                                  \
  |  |  |  | 3667|  69.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  66.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  66.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  66.8k|    static_cast<    \
  |  |  929|  66.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  66.8k|    static_cast<    \
  |  |  929|  66.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  69.9k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8680|   225k|{
 8681|   225k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   225k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8682|   225k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|   225k|{
 8627|   225k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|   225k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|   225k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.18k, False: 216k]
  |  |  ------------------
  ------------------
 8631|  9.18k|        return unexpected(result.error());
 8632|  9.18k|    }
 8633|   216k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   216k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|   225k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1658|   216k|    {
 1659|   216k|        return std::move(value());
 1660|   216k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8862|   369k|{
 8863|   369k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   369k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   369k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   369k|    static_cast<    \
  |  |  929|   369k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   369k|    static_cast<    \
  |  |  929|   369k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   369k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7970|   739k|    {
 7971|   739k|        return m_str;
 7972|   739k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|   739k|{
 8816|   739k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   739k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.7k, False: 703k]
  |  |  ------------------
  ------------------
 8817|  36.7k|        return unexpected(result.error());
 8818|  36.7k|    }
 8819|   703k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   703k|    static_cast<    \
  |  |  929|   703k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   703k|    static_cast<    \
  |  |  929|   703k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   739k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  39.8k|    {
 1472|  39.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  39.8k|    {
  443|  39.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   817k|    {
 1173|   817k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5825|   777k|    {
 5826|   777k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|   777k|    {
 1426|   777k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   777k|    {
  433|   777k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   739k|    {
 7967|   739k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1593|   817k|    {
 1594|   817k|        return has_value();
 1595|   817k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.59M|    {
  481|  1.59M|        return m_has_value;
  482|  1.59M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1668|   777k|    {
 1669|   777k|        return &value();
 1670|   777k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|   777k|    {
 1623|   777k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   777k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   777k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   777k|        return this->get_value();
 1625|   777k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   777k|    {
  447|   777k|        return m_value;
  448|   777k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8929|   369k|{
 8930|   369k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   369k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   369k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   369k|    static_cast<    \
  |  |  929|   369k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   369k|    static_cast<    \
  |  |  929|   369k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   369k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8968|  77.4k|{
 8969|  77.4k|    T value;
 8970|  77.4k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  77.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  77.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  77.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  77.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  77.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.06k, False: 74.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.06k|    }                                                  \
  |  |  |  | 3667|  77.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  74.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  74.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  74.4k|    static_cast<    \
  |  |  929|  74.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  74.4k|    static_cast<    \
  |  |  929|  74.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  77.4k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8862|   374k|{
 8863|   374k|    auto args = make_scan_args<scan_context, Args...>();
 8864|   374k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   374k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8865|   374k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   374k|    static_cast<    \
  |  |  929|   374k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   374k|    static_cast<    \
  |  |  929|   374k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8866|   374k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7970|   748k|    {
 7971|   748k|        return m_str;
 7972|   748k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|   748k|{
 8816|   748k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   748k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.7k, False: 711k]
  |  |  ------------------
  ------------------
 8817|  36.7k|        return unexpected(result.error());
 8818|  36.7k|    }
 8819|   711k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   711k|    static_cast<    \
  |  |  929|   711k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   711k|    static_cast<    \
  |  |  929|   711k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|   748k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  39.8k|    {
 1472|  39.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  39.8k|    {
  443|  39.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   827k|    {
 1173|   827k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5825|   787k|    {
 5826|   787k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|   787k|    {
 1426|   787k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|   787k|    {
  433|   787k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7966|   748k|    {
 7967|   748k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1593|   827k|    {
 1594|   827k|        return has_value();
 1595|   827k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.61M|    {
  481|  1.61M|        return m_has_value;
  482|  1.61M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1668|   787k|    {
 1669|   787k|        return &value();
 1670|   787k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|   787k|    {
 1623|   787k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   787k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   787k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   787k|        return this->get_value();
 1625|   787k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   787k|    {
  447|   787k|        return m_value;
  448|   787k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8929|   374k|{
 8930|   374k|    auto args = make_scan_args<scan_context, Args...>();
 8931|   374k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   374k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8932|   374k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   374k|    static_cast<    \
  |  |  929|   374k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   374k|    static_cast<    \
  |  |  929|   374k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8933|   374k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8968|  78.5k|{
 8969|  78.5k|    T value;
 8970|  78.5k|    auto arg = detail::make_arg<scan_context>(value);
 8971|  78.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  78.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  78.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  78.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.06k, False: 75.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.06k|    }                                                  \
  |  |  |  | 3667|  78.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  75.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8972|  75.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  75.4k|    static_cast<    \
  |  |  929|  75.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  75.4k|    static_cast<    \
  |  |  929|  75.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8973|  78.5k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   245k|    {
 2720|   245k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   245k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   245k|    {
 2701|   245k|        return decay_copy(t.begin());
 2702|   245k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1944|  1.59M|{
 1945|  1.59M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  1.59M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|   590k|    {
 2777|   590k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   590k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|   590k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|   590k|    {
 2759|   590k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   590k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|   590k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5391|   178k|{
 5392|   178k|    detail::check_scan_arg_types<Args...>();
 5393|   178k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   178k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5344|   178k|    {
 5345|   178k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   178k|    {
 5356|   178k|        return {detail::make_arg<
 5357|   178k|            kind, Context,
 5358|   178k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   178k|                                 typename Context::char_type>::value>(args)...};
 5360|   178k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5165|   178k|{
 5166|   178k|    return make_value<Context>(value).ref_value;
 5167|   178k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5115|   194k|{
 5116|   194k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   194k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   194k|                                  needs_context_tag>) {
 5120|   194k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   194k|    }
 5122|   194k|    else {
 5123|   194k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   194k|            value, context_tag<Context>{}));
 5125|   194k|    }
 5126|   194k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4954|   194k|    {                                                                        \
 4955|   194k|        return val;                                                          \
 4956|   194k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8586|   134k|{
 8587|   134k|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|   134k|    auto result = vscan_impl(buffer, format, args);
 8590|   134k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110k, False: 24.2k]
  |  |  ------------------
  ------------------
 8591|   110k|        return unexpected(result.error());
 8592|   110k|    }
 8593|  24.2k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|   134k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4715|   292k|{
 4716|   292k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|   292k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|   292k|                  "\n"
 4720|   292k|                  "Unsupported range type given as input to a scanning "
 4721|   292k|                  "function.\n"
 4722|   292k|                  "A range needs to have a character type (value type) "
 4723|   292k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|   292k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|   292k|                  "to be included.\n"
 4726|   292k|                  "See the scnlib documentation for more details.");
 4727|   292k|    static_assert(
 4728|   292k|        !std::is_same_v<T, custom_char_traits>,
 4729|   292k|        "\n"
 4730|   292k|        "Unsupported range type given as input to a scanning "
 4731|   292k|        "function.\n"
 4732|   292k|        "String types (std::basic_string, and std::basic_string_view) "
 4733|   292k|        "need to use std::char_traits. Strings with custom Traits are "
 4734|   292k|        "not supported.");
 4735|   292k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|   292k|                  "\n"
 4737|   292k|                  "Unsupported range type given as input to a scanning "
 4738|   292k|                  "function.\n"
 4739|   292k|                  "file_marker_found cannot be used as an "
 4740|   292k|                  "source range type to scn::scan.\n"
 4741|   292k|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|   292k|                  "and do not provide an explicit source range, "
 4743|   292k|                  "or use scn::scan with a FILE* directly.");
 4744|   292k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|   292k|                  "\n"
 4746|   292k|                  "Unsupported range type given as input to a scanning "
 4747|   292k|                  "function.\n"
 4748|   292k|                  "In order to be scannable, a range needs to satisfy "
 4749|   292k|                  "`forward_range`. `input_range` is not sufficient.");
 4750|   292k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|   292k|                  "\n"
 4752|   292k|                  "Unsupported range type given as input to a scanning "
 4753|   292k|                  "function.\n"
 4754|   292k|                  "A range needs to model forward_range and have a valid "
 4755|   292k|                  "character type (char or wchar_t) to be scannable.\n"
 4756|   292k|                  "Examples of scannable ranges are std::string, "
 4757|   292k|                  "std::string_view, "
 4758|   292k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|   292k|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|   292k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|   292k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4654|   292k|{
 4655|   292k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4655:19): [Folded - Ignored]
  ------------------
 4656|   292k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4657|   292k|    }
 4658|   292k|    else {
 4659|   292k|        return invalid_char_type{};
 4660|   292k|    }
 4661|   292k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|   292k|    {
 2851|   292k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|   292k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|   292k|    {
 2832|   292k|        return t.data();
 2833|   292k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3226|   292k|    {
 3227|   292k|        return ranges::empty(derived())
  ------------------
  |  Branch (3227:16): [True: 465, False: 291k]
  ------------------
 3228|   292k|                   ? nullptr
 3229|   292k|                   : std::addressof(*ranges::begin(derived()));
 3230|   292k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|   292k|    {
 3001|   292k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|   292k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|   292k|    {
 2974|   292k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|   292k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3334|   472k|    {
 3335|   472k|        return m_iterator == m_sentinel;
 3336|   472k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3180|   583k|    {
 3181|   583k|        return static_cast<const D&>(*this);
 3182|   583k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   344k|    {
 2720|   344k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   344k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   344k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   344k|    {
 2701|   344k|        return decay_copy(t.begin());
 2702|   344k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|  7.54M|    {
 3326|  7.54M|        return m_iterator;
 3327|  7.54M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2925|   292k|    {
 2926|   292k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2927|   292k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2891|   292k|    {
 2892|   292k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   292k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2893|   292k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3341|  1.21M|    {
 3342|  1.21M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  1.21M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|   238k|    {
 1472|   238k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   238k|    {
  443|   238k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   292k|    {
 1173|   292k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5918|  53.1k|{
 5919|  53.1k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  53.1k|                      ranges::iterator_t<SourceRange>>) {
 5921|  53.1k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  53.1k|    }
 5923|  53.1k|    else {
 5924|  53.1k|        auto it = ranges::begin(source);
 5925|  53.1k|        while (n > 0) {
 5926|  53.1k|            --n;
 5927|  53.1k|            ++it;
 5928|  53.1k|        }
 5929|  53.1k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  53.1k|    }
 5931|  53.1k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   362k|    {
 2720|   362k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   362k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   362k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   362k|    {
 2701|   362k|        return decay_copy(t.begin());
 2702|   362k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5905|  53.1k|{
 5906|  53.1k|    return ranges::end(source);
 5907|  53.1k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  53.1k|    {
 2777|  53.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  53.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  53.1k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  53.1k|    {
 2759|  53.1k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  53.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  53.1k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|  3.84M|    {
 3330|  3.84M|        return m_sentinel;
 3331|  3.84M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  53.1k|    {
 1426|  53.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  53.1k|    {
  433|  53.1k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7970|  89.5k|    {
 7971|  89.5k|        return m_str;
 7972|  89.5k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   178k|    {
 5422|   178k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5374|   178k|    {
 5375|   178k|        return m_argptrs;
 5376|   178k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5473|   537k|    {
 5474|   537k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  89.5k|{
 8816|  89.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  89.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 73.5k, False: 16.0k]
  |  |  ------------------
  ------------------
 8817|  73.5k|        return unexpected(result.error());
 8818|  73.5k|    }
 8819|  16.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  89.5k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1593|   292k|    {
 1594|   292k|        return has_value();
 1595|   292k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   584k|    {
  481|   584k|        return m_has_value;
  482|   584k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1599|   238k|    {
 1600|   238k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   238k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   238k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   238k|        return this->get_unexpected().error();
 1602|   238k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   238k|    {
  464|   238k|        return m_unexpected;
  465|   238k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  79.6k|    {
 1472|  79.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  79.6k|    {
  443|  79.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  97.2k|    {
 1173|  97.2k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1648|  48.4k|    {
 1649|  48.4k|        return value();
 1650|  48.4k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  53.1k|    {
 1623|  53.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  53.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  53.1k|        return this->get_value();
 1625|  53.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  53.1k|    {
  447|  53.1k|        return m_value;
  448|  53.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5825|  17.5k|    {
 5826|  17.5k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5676|  53.1k|    {
 5677|  53.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|  17.5k|    {
 1426|  17.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  17.5k|    {
  433|  17.5k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5369|   178k|    {
 5370|   178k|        return m_args;
 5371|   178k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3311|  2.67M|    {
 3312|  2.67M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7691|   537k|{
 7692|   537k|    return s;
 7693|   537k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7663|   537k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  89.5k|    {
 7967|  89.5k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1593|  97.2k|    {
 1594|  97.2k|        return has_value();
 1595|  97.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   114k|    {
  481|   114k|        return m_has_value;
  482|   114k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1668|  17.5k|    {
 1669|  17.5k|        return &value();
 1670|  17.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|  17.5k|    {
 1623|  17.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  17.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  17.5k|        return this->get_value();
 1625|  17.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  17.5k|    {
  447|  17.5k|        return m_value;
  448|  17.5k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5693|  53.1k|    {
 5694|  53.1k|        return ranges::begin(m_range);
 5695|  53.1k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8602|   134k|{
 8603|   134k|#if !SCN_DISABLE_LOCALE
 8604|   134k|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|   134k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|   134k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|   134k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|   134k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110k, False: 24.2k]
  |  |  ------------------
  ------------------
 8611|   110k|        return unexpected(result.error());
 8612|   110k|    }
 8613|  24.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|   134k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5150|  15.4k|{
 5151|  15.4k|    check_scan_arg_types<T>();
 5152|       |
 5153|  15.4k|    basic_scan_arg<Context> arg;
 5154|  15.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  15.4k|    arg.m_value = make_value<Context>(value);
 5156|  15.4k|    return arg;
 5157|  15.4k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5236|   584k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|  23.1k|{
 8627|  23.1k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|  23.1k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|  23.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.3k, False: 4.78k]
  |  |  ------------------
  ------------------
 8631|  18.3k|        return unexpected(result.error());
 8632|  18.3k|    }
 8633|  4.78k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  4.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  23.1k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|  4.78k|    {
 1659|  4.78k|        return std::move(value());
 1660|  4.78k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5391|   179k|{
 5392|   179k|    detail::check_scan_arg_types<Args...>();
 5393|   179k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   179k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5344|   179k|    {
 5345|   179k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   179k|    {
 5356|   179k|        return {detail::make_arg<
 5357|   179k|            kind, Context,
 5358|   179k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   179k|                                 typename Context::char_type>::value>(args)...};
 5360|   179k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5165|   179k|{
 5166|   179k|    return make_value<Context>(value).ref_value;
 5167|   179k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5115|   194k|{
 5116|   194k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   194k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   194k|                                  needs_context_tag>) {
 5120|   194k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   194k|    }
 5122|   194k|    else {
 5123|   194k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   194k|            value, context_tag<Context>{}));
 5125|   194k|    }
 5126|   194k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4954|   194k|    {                                                                        \
 4955|   194k|        return val;                                                          \
 4956|   194k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7970|  89.6k|    {
 7971|  89.6k|        return m_str;
 7972|  89.6k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   179k|    {
 5422|   179k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5374|   179k|    {
 5375|   179k|        return m_argptrs;
 5376|   179k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  89.6k|{
 8816|  89.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  89.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 73.5k, False: 16.1k]
  |  |  ------------------
  ------------------
 8817|  73.5k|        return unexpected(result.error());
 8818|  73.5k|    }
 8819|  16.1k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  16.1k|    static_cast<    \
  |  |  929|  16.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  16.1k|    static_cast<    \
  |  |  929|  16.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  89.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  79.6k|    {
 1472|  79.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  79.6k|    {
  443|  79.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  97.3k|    {
 1173|  97.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5825|  17.7k|    {
 5826|  17.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|  17.7k|    {
 1426|  17.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  17.7k|    {
  433|  17.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5369|   179k|    {
 5370|   179k|        return m_args;
 5371|   179k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  89.6k|    {
 7967|  89.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1593|  97.3k|    {
 1594|  97.3k|        return has_value();
 1595|  97.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   115k|    {
  481|   115k|        return m_has_value;
  482|   115k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1668|  17.7k|    {
 1669|  17.7k|        return &value();
 1670|  17.7k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|  17.7k|    {
 1623|  17.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  17.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  17.7k|        return this->get_value();
 1625|  17.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  17.7k|    {
  447|  17.7k|        return m_value;
  448|  17.7k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5150|  15.4k|{
 5151|  15.4k|    check_scan_arg_types<T>();
 5152|       |
 5153|  15.4k|    basic_scan_arg<Context> arg;
 5154|  15.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  15.4k|    arg.m_value = make_value<Context>(value);
 5156|  15.4k|    return arg;
 5157|  15.4k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5391|   179k|{
 5392|   179k|    detail::check_scan_arg_types<Args...>();
 5393|   179k|    return detail::scan_arg_store<Context, Args...>{};
 5394|   179k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5344|   179k|    {
 5345|   179k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5355|   179k|    {
 5356|   179k|        return {detail::make_arg<
 5357|   179k|            kind, Context,
 5358|   179k|            mapped_type_constant<remove_cvref_t<A>,
 5359|   179k|                                 typename Context::char_type>::value>(args)...};
 5360|   179k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5165|   179k|{
 5166|   179k|    return make_value<Context>(value).ref_value;
 5167|   179k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5115|   195k|{
 5116|   195k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5117|       |
 5118|   195k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5118:19): [Folded - Ignored]
  ------------------
 5119|   195k|                                  needs_context_tag>) {
 5120|   195k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5121|   195k|    }
 5122|   195k|    else {
 5123|   195k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5124|   195k|            value, context_tag<Context>{}));
 5125|   195k|    }
 5126|   195k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4954|   195k|    {                                                                        \
 4955|   195k|        return val;                                                          \
 4956|   195k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7970|  89.7k|    {
 7971|  89.7k|        return m_str;
 7972|  89.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5421|   179k|    {
 5422|   179k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5374|   179k|    {
 5375|   179k|        return m_argptrs;
 5376|   179k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8815|  89.7k|{
 8816|  89.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  89.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 73.5k, False: 16.2k]
  |  |  ------------------
  ------------------
 8817|  73.5k|        return unexpected(result.error());
 8818|  73.5k|    }
 8819|  16.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  16.2k|    static_cast<    \
  |  |  929|  16.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  16.2k|    static_cast<    \
  |  |  929|  16.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  89.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|  79.6k|    {
 1472|  79.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  79.6k|    {
  443|  79.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  97.5k|    {
 1173|  97.5k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5825|  17.8k|    {
 5826|  17.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|  17.8k|    {
 1426|  17.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  17.8k|    {
  433|  17.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5369|   179k|    {
 5370|   179k|        return m_args;
 5371|   179k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  89.7k|    {
 7967|  89.7k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1593|  97.5k|    {
 1594|  97.5k|        return has_value();
 1595|  97.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   115k|    {
  481|   115k|        return m_has_value;
  482|   115k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1668|  17.8k|    {
 1669|  17.8k|        return &value();
 1670|  17.8k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|  17.8k|    {
 1623|  17.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  17.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  17.8k|        return this->get_value();
 1625|  17.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  17.8k|    {
  447|  17.8k|        return m_value;
  448|  17.8k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5150|  15.4k|{
 5151|  15.4k|    check_scan_arg_types<T>();
 5152|       |
 5153|  15.4k|    basic_scan_arg<Context> arg;
 5154|  15.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5155|  15.4k|    arg.m_value = make_value<Context>(value);
 5156|  15.4k|    return arg;
 5157|  15.4k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   238k|    {
 2720|   238k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   238k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   238k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   238k|    {
 2701|   238k|        return decay_copy(t.begin());
 2702|   238k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1944|  4.88M|{
 1945|  4.88M|    return SCN_FWD(t);
  ------------------
  |  |  930|  4.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  4.88M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|   583k|    {
 2777|   583k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   583k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|   583k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|   583k|    {
 2759|   583k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   583k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|   583k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8586|   134k|{
 8587|   134k|    auto buffer = make_scan_buffer(range);
 8588|       |
 8589|   134k|    auto result = vscan_impl(buffer, format, args);
 8590|   134k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110k, False: 24.1k]
  |  |  ------------------
  ------------------
 8591|   110k|        return unexpected(result.error());
 8592|   110k|    }
 8593|  24.1k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8594|   134k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4715|   291k|{
 4716|   291k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4717|       |
 4718|   291k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4719|   291k|                  "\n"
 4720|   291k|                  "Unsupported range type given as input to a scanning "
 4721|   291k|                  "function.\n"
 4722|   291k|                  "A range needs to have a character type (value type) "
 4723|   291k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4724|   291k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4725|   291k|                  "to be included.\n"
 4726|   291k|                  "See the scnlib documentation for more details.");
 4727|   291k|    static_assert(
 4728|   291k|        !std::is_same_v<T, custom_char_traits>,
 4729|   291k|        "\n"
 4730|   291k|        "Unsupported range type given as input to a scanning "
 4731|   291k|        "function.\n"
 4732|   291k|        "String types (std::basic_string, and std::basic_string_view) "
 4733|   291k|        "need to use std::char_traits. Strings with custom Traits are "
 4734|   291k|        "not supported.");
 4735|   291k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4736|   291k|                  "\n"
 4737|   291k|                  "Unsupported range type given as input to a scanning "
 4738|   291k|                  "function.\n"
 4739|   291k|                  "file_marker_found cannot be used as an "
 4740|   291k|                  "source range type to scn::scan.\n"
 4741|   291k|                  "To read from stdin, use scn::input or scn::prompt, "
 4742|   291k|                  "and do not provide an explicit source range, "
 4743|   291k|                  "or use scn::scan with a FILE* directly.");
 4744|   291k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4745|   291k|                  "\n"
 4746|   291k|                  "Unsupported range type given as input to a scanning "
 4747|   291k|                  "function.\n"
 4748|   291k|                  "In order to be scannable, a range needs to satisfy "
 4749|   291k|                  "`forward_range`. `input_range` is not sufficient.");
 4750|   291k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4751|   291k|                  "\n"
 4752|   291k|                  "Unsupported range type given as input to a scanning "
 4753|   291k|                  "function.\n"
 4754|   291k|                  "A range needs to model forward_range and have a valid "
 4755|   291k|                  "character type (char or wchar_t) to be scannable.\n"
 4756|   291k|                  "Examples of scannable ranges are std::string, "
 4757|   291k|                  "std::string_view, "
 4758|   291k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4759|   291k|                  "See the scnlib documentation for more details.");
 4760|       |
 4761|   291k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4762|   291k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4685|   291k|{
 4686|   291k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4686:19): [Folded - Ignored]
  ------------------
 4687|   291k|        return file_marker_found{};
 4688|   291k|    }
 4689|   291k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4689:24): [Folded - Ignored]
  ------------------
 4690|   291k|        if constexpr (ranges::range<Range>) {
 4691|   291k|            return insufficient_range{};
 4692|   291k|        }
 4693|   291k|        else {
 4694|   291k|            return invalid_input_range{};
 4695|   291k|        }
 4696|   291k|    }
 4697|   291k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4697:24): [Folded - Ignored]
  ------------------
 4698|   291k|        return invalid_char_type{};
 4699|   291k|    }
 4700|   291k|    else {
 4701|   291k|        return make_forward_scan_buffer(r);
 4702|   291k|    }
 4703|   291k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4519|   291k|{
 4520|   291k|    return basic_scan_forward_buffer_impl(range);
 4521|   291k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4406|   291k|    {
 4407|   291k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4377|   291k|    {
 4378|   291k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4146|   291k|    {
 4147|   291k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4061|   291k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|   345k|    {
 2720|   345k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   345k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   345k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|   345k|    {
 2701|   345k|        return decay_copy(t.begin());
 2702|   345k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3325|   398k|    {
 3326|   398k|        return m_iterator;
 3327|   398k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4410|  1.30M|    {
 4411|  1.30M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4411:13): [True: 148k, False: 1.15M]
  ------------------
 4412|   148k|            return false;
 4413|   148k|        }
 4414|  1.15M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4414:23): [Folded - Ignored]
  ------------------
 4415|  1.15M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4416|  1.15M|        }
 4417|  1.15M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4417:13): [True: 861k, False: 291k]
  ------------------
 4418|   861k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4419|   861k|                                          this->m_current_view.begin(),
 4420|   861k|                                          this->m_current_view.end());
 4421|   861k|        }
 4422|  1.15M|        m_latest = *m_cursor;
 4423|  1.15M|        ++m_cursor;
 4424|  1.15M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4425|  1.15M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4425:23): [Folded - Ignored]
  ------------------
 4426|  1.15M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4427|  1.15M|        }
 4428|  1.15M|        return true;
 4429|  1.15M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  3.60M|    {
 2777|  3.60M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  3.60M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  3.60M|    {
 2759|  3.60M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  3.60M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3329|  3.65M|    {
 3330|  3.65M|        return m_sentinel;
 3331|  3.65M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4066|   291k|    {
 4067|   291k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   291k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4068|   291k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1471|   238k|    {
 1472|   238k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|   238k|    {
  443|   238k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   291k|    {
 1173|   291k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5918|  53.0k|{
 5919|  53.0k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5919:19): [Folded - Ignored]
  ------------------
 5920|  53.0k|                      ranges::iterator_t<SourceRange>>) {
 5921|  53.0k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5922|  53.0k|    }
 5923|  53.0k|    else {
 5924|  53.0k|        auto it = ranges::begin(source);
 5925|  53.0k|        while (n > 0) {
 5926|  53.0k|            --n;
 5927|  53.0k|            ++it;
 5928|  53.0k|        }
 5929|  53.0k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5930|  53.0k|    }
 5931|  53.0k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2719|  53.0k|    {
 2720|  53.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  53.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  53.0k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2700|  53.0k|    {
 2701|  53.0k|        return decay_copy(t.begin());
 2702|  53.0k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5905|  53.0k|{
 5906|  53.0k|    return ranges::end(source);
 5907|  53.0k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2776|  53.0k|    {
 2777|  53.0k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  53.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2778|  53.0k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2758|  53.0k|    {
 2759|  53.0k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  53.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2760|  53.0k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1425|  53.0k|    {
 1426|  53.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|  53.0k|    {
  433|  53.0k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7970|  89.4k|    {
 7971|  89.4k|        return m_str;
 7972|  89.4k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|  89.4k|{
 8816|  89.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  89.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 73.5k, False: 15.9k]
  |  |  ------------------
  ------------------
 8817|  73.5k|        return unexpected(result.error());
 8818|  73.5k|    }
 8819|  15.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  15.9k|    static_cast<    \
  |  |  929|  15.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  15.9k|    static_cast<    \
  |  |  929|  15.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  89.4k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1593|   291k|    {
 1594|   291k|        return has_value();
 1595|   291k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   583k|    {
  481|   583k|        return m_has_value;
  482|   583k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1599|   238k|    {
 1600|   238k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   238k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   238k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   238k|        return this->get_unexpected().error();
 1602|   238k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   238k|    {
  464|   238k|        return m_unexpected;
  465|   238k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  79.6k|    {
 1472|  79.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  79.6k|    {
  443|  79.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  97.1k|    {
 1173|  97.1k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1648|  48.2k|    {
 1649|  48.2k|        return value();
 1650|  48.2k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1622|  53.0k|    {
 1623|  53.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  53.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  53.0k|        return this->get_value();
 1625|  53.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  53.0k|    {
  447|  53.0k|        return m_value;
  448|  53.0k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5825|  17.5k|    {
 5826|  17.5k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5676|  53.0k|    {
 5677|  53.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|  17.5k|    {
 1426|  17.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  17.5k|    {
  433|  17.5k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3311|   345k|    {
 3312|   345k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  89.4k|    {
 7967|  89.4k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1593|  97.1k|    {
 1594|  97.1k|        return has_value();
 1595|  97.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   114k|    {
  481|   114k|        return m_has_value;
  482|   114k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1668|  17.5k|    {
 1669|  17.5k|        return &value();
 1670|  17.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|  17.5k|    {
 1623|  17.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  17.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  17.5k|        return this->get_value();
 1625|  17.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  17.5k|    {
  447|  17.5k|        return m_value;
  448|  17.5k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5693|  53.0k|    {
 5694|  53.0k|        return ranges::begin(m_range);
 5695|  53.0k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8602|   134k|{
 8603|   134k|#if !SCN_DISABLE_LOCALE
 8604|   134k|    auto buffer = detail::make_scan_buffer(range);
 8605|       |
 8606|   134k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8607|   134k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8608|   134k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8609|       |
 8610|   134k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110k, False: 24.1k]
  |  |  ------------------
  ------------------
 8611|   110k|        return unexpected(result.error());
 8612|   110k|    }
 8613|  24.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8614|       |#else
 8615|       |    static_assert(dependent_false<Locale>::value,
 8616|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8617|       |
 8618|       |    return {};
 8619|       |#endif
 8620|   134k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8626|  23.1k|{
 8627|  23.1k|    auto buffer = detail::make_scan_buffer(range);
 8628|       |
 8629|  23.1k|    auto result = detail::vscan_value_impl(buffer, arg);
 8630|  23.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.3k, False: 4.76k]
  |  |  ------------------
  ------------------
 8631|  18.3k|        return unexpected(result.error());
 8632|  18.3k|    }
 8633|  4.76k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  4.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  23.1k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1658|  4.76k|    {
 1659|  4.76k|        return std::move(value());
 1660|  4.76k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7970|  89.5k|    {
 7971|  89.5k|        return m_str;
 7972|  89.5k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|  89.5k|{
 8816|  89.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  89.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 73.5k, False: 16.0k]
  |  |  ------------------
  ------------------
 8817|  73.5k|        return unexpected(result.error());
 8818|  73.5k|    }
 8819|  16.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  89.5k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  79.6k|    {
 1472|  79.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  79.6k|    {
  443|  79.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  97.3k|    {
 1173|  97.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5825|  17.6k|    {
 5826|  17.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|  17.6k|    {
 1426|  17.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  17.6k|    {
  433|  17.6k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  89.5k|    {
 7967|  89.5k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1593|  97.3k|    {
 1594|  97.3k|        return has_value();
 1595|  97.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   114k|    {
  481|   114k|        return m_has_value;
  482|   114k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1668|  17.6k|    {
 1669|  17.6k|        return &value();
 1670|  17.6k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|  17.6k|    {
 1623|  17.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  17.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  17.6k|        return this->get_value();
 1625|  17.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  17.6k|    {
  447|  17.6k|        return m_value;
  448|  17.6k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7970|  89.7k|    {
 7971|  89.7k|        return m_str;
 7972|  89.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8815|  89.7k|{
 8816|  89.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  89.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 73.5k, False: 16.2k]
  |  |  ------------------
  ------------------
 8817|  73.5k|        return unexpected(result.error());
 8818|  73.5k|    }
 8819|  16.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  16.2k|    static_cast<    \
  |  |  929|  16.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  16.2k|    static_cast<    \
  |  |  929|  16.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8820|  89.7k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1471|  79.6k|    {
 1472|  79.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|  79.6k|    {
  443|  79.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  97.4k|    {
 1173|  97.4k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5825|  17.8k|    {
 5826|  17.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1425|  17.8k|    {
 1426|  17.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  17.8k|    {
  433|  17.8k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7966|  89.7k|    {
 7967|  89.7k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1593|  97.4k|    {
 1594|  97.4k|        return has_value();
 1595|  97.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   115k|    {
  481|   115k|        return m_has_value;
  482|   115k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1668|  17.8k|    {
 1669|  17.8k|        return &value();
 1670|  17.8k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1622|  17.8k|    {
 1623|  17.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  17.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  17.8k|        return this->get_value();
 1625|  17.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  17.8k|    {
  447|  17.8k|        return m_value;
  448|  17.8k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3563|  5.77M|    {
 3564|  5.77M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  5.77M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|  5.77M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  24.8M|    {
 3570|  24.8M|        return m_code == good;
 3571|  24.8M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|   551k|    {
 3581|   551k|        return m_code;
 3582|   551k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|   107M|    {
 3326|   107M|        return m_iterator;
 3327|   107M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  9.68M|    {
 3326|  9.68M|        return m_iterator;
 3327|  9.68M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6255|  3.84M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6267|  1.07M|    {
 6268|  1.07M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|  1.07M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6268:23): [Folded - Ignored]
  ------------------
 6269|  1.07M|            m_specs.localized = true;
 6270|  1.07M|        }
 6271|      0|        else {
 6272|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6273|      0|        }
 6274|  1.07M|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6298|  2.77M|    {
 6299|  2.77M|        m_specs.type = type;
 6300|  2.77M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6371|  3.84M|    {
 6372|  3.84M|        return static_cast<bool>(m_error);
 6373|  3.84M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|   551k|{
 3605|   551k|    return a.code() == b;
 3606|   551k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|   551k|{
 3609|   551k|    return !(a == b);
 3610|   551k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7058|  1.07M|{
 7059|  1.07M|    switch (type) {
 7060|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7060:9): [True: 0, False: 1.07M]
  ------------------
 7061|      0|            return arg_type_category::none;
 7062|       |
 7063|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7063:9): [True: 0, False: 1.07M]
  ------------------
 7064|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 1.07M]
  ------------------
 7065|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7065:9): [True: 0, False: 1.07M]
  ------------------
 7066|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7066:9): [True: 0, False: 1.07M]
  ------------------
 7067|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 1.07M]
  ------------------
 7068|      0|            return arg_type_category::integer;
 7069|       |
 7070|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 1.07M]
  ------------------
 7071|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 1.07M]
  ------------------
 7072|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7072:9): [True: 0, False: 1.07M]
  ------------------
 7073|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7073:9): [True: 0, False: 1.07M]
  ------------------
 7074|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 1.07M]
  ------------------
 7075|      0|            return arg_type_category::unsigned_integer;
 7076|       |
 7077|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 1.07M]
  ------------------
 7078|      0|            return arg_type_category::pointer;
 7079|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 1.07M]
  ------------------
 7080|      0|            return arg_type_category::boolean;
 7081|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 1.07M]
  ------------------
 7082|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7082:9): [True: 0, False: 1.07M]
  ------------------
 7083|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 1.07M]
  ------------------
 7084|      0|            return arg_type_category::character;
 7085|       |
 7086|   333k|        case arg_type::float_type:
  ------------------
  |  Branch (7086:9): [True: 333k, False: 738k]
  ------------------
 7087|   699k|        case arg_type::double_type:
  ------------------
  |  Branch (7087:9): [True: 366k, False: 706k]
  ------------------
 7088|  1.07M|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7088:9): [True: 372k, False: 699k]
  ------------------
 7089|  1.07M|            return arg_type_category::floating;
 7090|       |
 7091|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7091:9): [True: 0, False: 1.07M]
  ------------------
 7092|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 1.07M]
  ------------------
 7093|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7093:9): [True: 0, False: 1.07M]
  ------------------
 7094|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7094:9): [True: 0, False: 1.07M]
  ------------------
 7095|      0|            return arg_type_category::string;
 7096|       |
 7097|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 1.07M]
  ------------------
 7098|      0|            return arg_type_category::custom;
 7099|       |
 7100|      0|            SCN_CLANG_PUSH
 7101|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7102|      0|        default:
  ------------------
  |  Branch (7102:9): [True: 0, False: 1.07M]
  ------------------
 7103|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7104|  1.07M|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7105|  1.07M|            SCN_CLANG_POP
 7106|  1.07M|    }
 7107|       |
 7108|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  1.07M|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2891|  4.67M|    {
 2892|  4.67M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  4.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2893|  4.67M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2925|  4.67M|    {
 2926|  4.67M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2927|  4.67M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2948|  4.67M|    {
 2949|  4.67M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2950|  4.67M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2957|  4.67M|    {
 2958|  4.67M|        return fn::impl(std::forward<T>(t));
 2959|  4.67M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3649|  1.30k|{
 3650|  1.30k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.30k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  2.28k|{
 3650|  2.28k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  2.28k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3649|  34.2k|{
 3650|  34.2k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  34.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  34.2k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7188|  3.84M|{
 7189|  3.84M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7189:9): [True: 2.77M, False: 1.07M]
  ------------------
 7190|  3.84M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7190:10): [True: 0, False: 2.77M]
  ------------------
 7191|  2.77M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7191:10): [True: 0, False: 2.77M]
  ------------------
 7192|      0|        SCN_UNLIKELY_ATTR
 7193|      0|        return handler.on_error("Invalid type specifier for float type");
 7194|      0|    }
 7195|  3.84M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4190|   694M|    {
 4191|   694M|        return m_end == nullptr;
 4192|   694M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|  1.86M|{
 3711|  1.86M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3711:19): [Folded - Ignored]
  ------------------
 3712|  1.86M|                                          const CharT*, const CharT*>) {
 3713|  1.86M|        return {first, last};
 3714|  1.86M|    }
 3715|  1.86M|    else {
 3716|  1.86M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|  1.86M|    }
 3718|  1.86M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4206|  9.11M|    {
 4207|  9.11M|        if (!stores_parent()) {
  ------------------
  |  Branch (4207:13): [True: 0, False: 9.11M]
  ------------------
 4208|      0|            return make_string_view_from_pointers(
 4209|      0|                static_cast<const CharT*>(m_begin) + position(),
 4210|      0|                static_cast<const CharT*>(m_end));
 4211|      0|        }
 4212|  9.11M|        return parent()->get_segment_starting_at(position());
 4213|  9.11M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4200|   386M|    {
 4201|   386M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   386M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   386M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4202|   386M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4203|   386M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4096|  9.11M|    {
 4097|  9.11M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  9.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.01M, False: 5.10M]
  |  |  ------------------
  ------------------
 4098|  9.11M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4099|  4.01M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4100|  4.01M|        }
 4101|  5.10M|        const auto start = pos - m_putback_buffer.size();
 4102|  5.10M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  5.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4103|  5.10M|        return m_current_view.substr(start);
 4104|  5.10M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4195|  6.35M|    {
 4196|  6.35M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  6.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4197|  6.35M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4198|  6.35M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4185|  16.7M|    {
 4186|  16.7M|        return m_position;
 4187|  16.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4118|  7.20M|    {
 4119|  7.20M|        return m_is_contiguous;
 4120|  7.20M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4190|  27.8M|    {
 4191|  27.8M|        return m_end == nullptr;
 4192|  27.8M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|  50.5k|{
 3711|  50.5k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3711:19): [Folded - Ignored]
  ------------------
 3712|  50.5k|                                          const CharT*, const CharT*>) {
 3713|  50.5k|        return {first, last};
 3714|  50.5k|    }
 3715|  50.5k|    else {
 3716|  50.5k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|  50.5k|    }
 3718|  50.5k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4206|   399k|    {
 4207|   399k|        if (!stores_parent()) {
  ------------------
  |  Branch (4207:13): [True: 0, False: 399k]
  ------------------
 4208|      0|            return make_string_view_from_pointers(
 4209|      0|                static_cast<const CharT*>(m_begin) + position(),
 4210|      0|                static_cast<const CharT*>(m_end));
 4211|      0|        }
 4212|   399k|        return parent()->get_segment_starting_at(position());
 4213|   399k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4200|  15.0M|    {
 4201|  15.0M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  15.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4202|  15.0M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4203|  15.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4096|   399k|    {
 4097|   399k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 103k, False: 295k]
  |  |  ------------------
  ------------------
 4098|   399k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4099|   103k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4100|   103k|        }
 4101|   295k|        const auto start = pos - m_putback_buffer.size();
 4102|   295k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   295k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   295k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4103|   295k|        return m_current_view.substr(start);
 4104|   295k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4195|   740k|    {
 4196|   740k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   740k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   740k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4197|   740k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4198|   740k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4185|  1.15M|    {
 4186|  1.15M|        return m_position;
 4187|  1.15M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4118|   875k|    {
 4119|   875k|        return m_is_contiguous;
 4120|   875k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3175|  21.8M|    {
 3176|  21.8M|        return static_cast<D&>(*this);
 3177|  21.8M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|  10.9M|    {
 2974|  10.9M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  10.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|  10.9M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|  10.9M|    {
 3001|  10.9M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  10.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|  10.9M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3216|  10.9M|    {
 3217|  10.9M|        return ranges::empty(derived())
  ------------------
  |  Branch (3217:16): [True: 18.3k, False: 10.9M]
  ------------------
 3218|  10.9M|                   ? nullptr
 3219|  10.9M|                   : std::addressof(*ranges::begin(derived()));
 3220|  10.9M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3175|   361k|    {
 3176|   361k|        return static_cast<D&>(*this);
 3177|   361k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2973|   180k|    {
 2974|   180k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2975|   180k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3000|   180k|    {
 3001|   180k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3002|   180k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3216|   180k|    {
 3217|   180k|        return ranges::empty(derived())
  ------------------
  |  Branch (3217:16): [True: 0, False: 180k]
  ------------------
 3218|   180k|                   ? nullptr
 3219|   180k|                   : std::addressof(*ranges::begin(derived()));
 3220|   180k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8164|  1.72M|    {
 8165|  1.72M|        return ranges::subrange{begin(), end()};
 8166|  1.72M|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8148|  5.07M|    {
 8149|  5.07M|        return m_current;
 8150|  5.07M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8156|  1.72M|    {
 8157|  1.72M|        return ranges::default_sentinel;
 8158|  1.72M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3311|  26.6M|    {
 3312|  26.6M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7986|  8.24M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|  2.40M|    {
 1833|  2.40M|        return detail::transform_error_impl(std::move(*this),
 1834|  2.40M|                                            std::forward<F>(f));
 1835|  2.40M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|  2.40M|{
 1319|  2.40M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.40M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.40M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.40M|            return result(*std::forward<Exp>(exp));
 1323|  2.40M|        }
 1324|       |
 1325|  2.40M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.40M|        return result(unexpect, monostate{});
 1327|  2.40M|    }
 1328|  2.40M|    else {
 1329|  2.40M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.40M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.40M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.37M, False: 28.3k]
  |  |  ------------------
  ------------------
 1331|  2.40M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.40M|                   : result(unexpect,
 1333|  28.3k|                            trivial_invoke(std::forward<F>(f),
 1334|  28.3k|                                           std::forward<Exp>(exp).error()));
 1335|  2.40M|    }
 1336|  2.40M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  25.7M|    {
  481|  25.7M|        return m_has_value;
  482|  25.7M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1658|  8.67M|    {
 1659|  8.67M|        return std::move(value());
 1660|  8.67M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1622|  10.0M|    {
 1623|  10.0M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  10.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  10.0M|        return this->get_value();
 1625|  10.0M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  10.0M|    {
  447|  10.0M|        return m_value;
  448|  10.0M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1425|  9.19M|    {
 1426|  9.19M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  9.19M|    {
  433|  9.19M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  13.5M|    {
 1173|  13.5M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1206|  58.2k|{
 1207|  58.2k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|  58.2k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1609|  79.7k|    {
 1610|  79.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  79.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  79.7k|        return std::move(this->get_unexpected().error());
 1612|  79.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|   108k|    {
  464|   108k|        return m_unexpected;
  465|   108k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  356|   489k|    {
  357|   489k|        return m_unexpected;
  358|   489k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1481|  2.33M|    {
 1482|  2.33M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  2.62M|    {
  443|  2.62M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8164|   222k|    {
 8165|   222k|        return ranges::subrange{begin(), end()};
 8166|   222k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8148|   483k|    {
 8149|   483k|        return m_current;
 8150|   483k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8156|   222k|    {
 8157|   222k|        return ranges::default_sentinel;
 8158|   222k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3311|  2.26M|    {
 3312|  2.26M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|   291k|    {
 1833|   291k|        return detail::transform_error_impl(std::move(*this),
 1834|   291k|                                            std::forward<F>(f));
 1835|   291k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|   291k|{
 1319|   291k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   291k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   291k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   291k|            return result(*std::forward<Exp>(exp));
 1323|   291k|        }
 1324|       |
 1325|   291k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   291k|        return result(unexpect, monostate{});
 1327|   291k|    }
 1328|   291k|    else {
 1329|   291k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   291k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   291k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 289k, False: 2.16k]
  |  |  ------------------
  ------------------
 1331|   291k|                   ? result(*std::forward<Exp>(exp))
 1332|   291k|                   : result(unexpect,
 1333|  2.16k|                            trivial_invoke(std::forward<F>(f),
 1334|  2.16k|                                           std::forward<Exp>(exp).error()));
 1335|   291k|    }
 1336|   291k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  2.46M|    {
  481|  2.46M|        return m_has_value;
  482|  2.46M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1658|   981k|    {
 1659|   981k|        return std::move(value());
 1660|   981k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1622|   984k|    {
 1623|   984k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   984k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   984k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   984k|        return this->get_value();
 1625|   984k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|   984k|    {
  447|   984k|        return m_value;
  448|   984k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1425|   450k|    {
 1426|   450k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   450k|    {
  433|   450k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.67M|    {
 1173|  1.67M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1609|  50.9k|    {
 1610|  50.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  50.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  50.9k|        return std::move(this->get_unexpected().error());
 1612|  50.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  51.7k|    {
  464|  51.7k|        return m_unexpected;
  465|  51.7k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1481|   526k|    {
 1482|   526k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  1.18M|    {
  443|  1.18M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  342|   203k|    {
  343|   203k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   203k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   203k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1471|   259k|    {
 1472|   259k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  2.55M|    {
  443|  2.55M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  13.5M|    {
 1173|  13.5M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1425|  9.27M|    {
 1426|  9.27M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  9.27M|    {
  433|  9.27M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1593|  15.8M|    {
 1594|  15.8M|        return has_value();
 1595|  15.8M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  480|  24.8M|    {
  481|  24.8M|        return m_has_value;
  482|  24.8M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1599|   314k|    {
 1600|   314k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   314k|        return this->get_unexpected().error();
 1602|   314k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   314k|    {
  464|   314k|        return m_unexpected;
  465|   314k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1658|  6.98M|    {
 1659|  6.98M|        return std::move(value());
 1660|  6.98M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1622|  8.67M|    {
 1623|  8.67M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  8.67M|        return this->get_value();
 1625|  8.67M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  446|  8.67M|    {
  447|  8.67M|        return m_value;
  448|  8.67M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1471|   531k|    {
 1472|   531k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|   931k|    {
  443|   931k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.67M|    {
 1173|  1.67M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1425|   704k|    {
 1426|   704k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   704k|    {
  433|   704k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1593|  1.96M|    {
 1594|  1.96M|        return has_value();
 1595|  1.96M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  480|  3.16M|    {
  481|  3.16M|        return m_has_value;
  482|  3.16M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1599|   641k|    {
 1600|   641k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   641k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   641k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   641k|        return this->get_unexpected().error();
 1602|   641k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   641k|    {
  464|   641k|        return m_unexpected;
  465|   641k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1658|   523k|    {
 1659|   523k|        return std::move(value());
 1660|   523k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1622|   562k|    {
 1623|   562k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   562k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   562k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   562k|        return this->get_value();
 1625|   562k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  446|   562k|    {
  447|   562k|        return m_value;
  448|   562k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|  2.40M|    {
 1833|  2.40M|        return detail::transform_error_impl(std::move(*this),
 1834|  2.40M|                                            std::forward<F>(f));
 1835|  2.40M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|  2.40M|{
 1319|  2.40M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.40M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.40M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.40M|            return result(*std::forward<Exp>(exp));
 1323|  2.40M|        }
 1324|       |
 1325|  2.40M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.40M|        return result(unexpect, monostate{});
 1327|  2.40M|    }
 1328|  2.40M|    else {
 1329|  2.40M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.40M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.40M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.37M, False: 25.5k]
  |  |  ------------------
  ------------------
 1331|  2.40M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.40M|                   : result(unexpect,
 1333|  25.5k|                            trivial_invoke(std::forward<F>(f),
 1334|  25.5k|                                           std::forward<Exp>(exp).error()));
 1335|  2.40M|    }
 1336|  2.40M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  9.24M|    {
  481|  9.24M|        return m_has_value;
  482|  9.24M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1658|  2.37M|    {
 1659|  2.37M|        return std::move(value());
 1660|  2.37M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1622|  3.28M|    {
 1623|  3.28M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.28M|        return this->get_value();
 1625|  3.28M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  3.28M|    {
  447|  3.28M|        return m_value;
  448|  3.28M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1609|  25.5k|    {
 1610|  25.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  25.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  25.5k|        return std::move(this->get_unexpected().error());
 1612|  25.5k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  32.4k|    {
  464|  32.4k|        return m_unexpected;
  465|  32.4k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1481|  2.29M|    {
 1482|  2.29M|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|  17.1M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|   290k|    {
 1472|   290k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4234|  58.3M|    {
 4235|  58.3M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  58.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4236|       |
 4237|  58.3M|        if (!stores_parent()) {
  ------------------
  |  Branch (4237:13): [True: 0, False: 58.3M]
  ------------------
 4238|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4239|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|      0|            return *ptr;
 4241|      0|        }
 4242|       |
 4243|  58.3M|        auto res = read_at_position();
 4244|  58.3M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  58.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4245|  58.3M|        return parent()->get_character_at(m_position);
 4246|  58.3M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4299|   227M|    {
 4300|   227M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   227M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   227M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4301|       |
 4302|   227M|        if (!stores_parent()) {
  ------------------
  |  Branch (4302:13): [True: 0, False: 227M]
  ------------------
 4303|      0|            return true;
 4304|      0|        }
 4305|       |
 4306|   227M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   227M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 196M, False: 30.7M]
  |  |  ------------------
  ------------------
 4307|   196M|            return true;
 4308|   196M|        }
 4309|       |
 4310|  61.1M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4310:16): [True: 30.7M, False: 30.3M]
  ------------------
 4311|  30.7M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4311:17): [True: 414k, False: 30.3M]
  ------------------
 4312|   414k|                return false;
 4313|   414k|            }
 4314|  30.7M|        }
 4315|  30.3M|        return true;
 4316|  30.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4076|   295M|    {
 4077|   295M|        return m_putback_buffer.size() + m_current_view.size();
 4078|   295M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4107|  58.3M|    {
 4108|  58.3M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  58.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.5M, False: 21.8M]
  |  |  ------------------
  ------------------
 4109|  58.3M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4110|  36.5M|            return m_putback_buffer[pos];
 4111|  36.5M|        }
 4112|  21.8M|        const auto start = pos - m_putback_buffer.size();
 4113|  21.8M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  21.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4114|  21.8M|        return m_current_view[start];
 4115|  21.8M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4220|   116M|    {
 4221|   116M|        ++m_position;
 4222|   116M|        (void)read_at_position();
 4223|   116M|        return *this;
 4224|   116M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4269|  55.5M|    {
 4270|  55.5M|        return !(lhs == rhs);
 4271|  55.5M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4264|  61.8M|    {
 4265|  61.8M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4265:16): [True: 61.8M, False: 0]
  |  Branch (4265:46): [True: 8.05M, False: 53.7M]
  ------------------
 4266|  61.8M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4275|  21.2M|    {
 4276|  21.2M|        return x.is_at_end();
 4277|  21.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4319|  52.6M|    {
 4320|  52.6M|        if (m_end) {
  ------------------
  |  Branch (4320:13): [True: 0, False: 52.6M]
  ------------------
 4321|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4322|      0|        }
 4323|  52.6M|        if (!m_begin) {
  ------------------
  |  Branch (4323:13): [True: 0, False: 52.6M]
  ------------------
 4324|      0|            return true;
 4325|      0|        }
 4326|  52.6M|        return !read_at_position();
 4327|  52.6M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1425|  15.5M|    {
 1426|  15.5M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  15.5M|    {
  433|  15.5M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  15.6M|    {
 1173|  15.6M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  342|   149k|    {
  343|   149k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   149k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   149k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|   108k|    {
 1472|   108k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|   108k|    {
  443|   108k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|   244k|    {
  352|   244k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   244k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|   244k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1593|  6.87M|    {
 1594|  6.87M|        return has_value();
 1595|  6.87M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1648|  1.34M|    {
 1649|  1.34M|        return value();
 1650|  1.34M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  342|  95.1k|    {
  343|  95.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  95.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  95.1k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  21.1k|    {
 1472|  21.1k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  21.1k|    {
  443|  21.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  3.33M|    {
 1173|  3.33M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  3.31M|    {
 1426|  3.31M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|  3.31M|    {
  433|  3.31M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1593|  3.33M|    {
 1594|  3.33M|        return has_value();
 1595|  3.33M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|  6.67M|    {
  481|  6.67M|        return m_has_value;
  482|  6.67M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1599|  21.1k|    {
 1600|  21.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  21.1k|        return this->get_unexpected().error();
 1602|  21.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  21.1k|    {
  464|  21.1k|        return m_unexpected;
  465|  21.1k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|  3.31M|    {
 1659|  3.31M|        return std::move(value());
 1660|  3.31M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  3.31M|    {
 1623|  3.31M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.31M|        return this->get_value();
 1625|  3.31M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|  3.31M|    {
  447|  3.31M|        return m_value;
  448|  3.31M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  75.1M|    {
 3330|  75.1M|        return m_sentinel;
 3331|  75.1M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  342|  92.6k|    {
  343|  92.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  92.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  92.6k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  356|  20.5M|    {
  357|  20.5M|        return m_unexpected;
  358|  20.5M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|  5.64M|    {
  352|  5.64M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.64M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  5.64M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  342|  25.2M|    {
  343|  25.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  25.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  25.2M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  356|  25.2M|    {
  357|  25.2M|        return m_unexpected;
  358|  25.2M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  351|  25.2M|    {
  352|  25.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  25.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  25.2M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1206|   148k|{
 1207|   148k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|   148k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  342|  5.40M|    {
  343|  5.40M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  5.40M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  5.40M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1599|  28.9k|    {
 1600|  28.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  28.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  28.9k|        return this->get_unexpected().error();
 1602|  28.9k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  2.41M|    {
 1472|  2.41M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  2.46M|    {
  443|  2.46M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  26.6M|    {
 1173|  26.6M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1425|  1.36M|    {
 1426|  1.36M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.36M|    {
  433|  1.36M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|  13.5M|    {
 1472|  13.5M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  13.5M|    {
  443|  13.5M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1593|  28.9M|    {
 1594|  28.9M|        return has_value();
 1595|  28.9M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  50.9M|    {
  481|  50.9M|        return m_has_value;
  482|  50.9M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1599|  6.55M|    {
 1600|  6.55M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  6.55M|        return this->get_unexpected().error();
 1602|  6.55M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  6.55M|    {
  464|  6.55M|        return m_unexpected;
  465|  6.55M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1425|  2.61M|    {
 1426|  2.61M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|  2.61M|    {
  433|  2.61M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.61M|    {
 1173|  2.61M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|    491|    {
 1472|    491|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  442|    491|    {
  443|    491|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1648|  6.78M|    {
 1649|  6.78M|        return value();
 1650|  6.78M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1622|  13.0M|    {
 1623|  13.0M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  13.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  13.0M|        return this->get_value();
 1625|  13.0M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  13.0M|    {
  447|  13.0M|        return m_value;
  448|  13.0M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1593|   244k|    {
 1594|   244k|        return has_value();
 1595|   244k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  480|  5.23M|    {
  481|  5.23M|        return m_has_value;
  482|  5.23M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1658|  2.37M|    {
 1659|  2.37M|        return std::move(value());
 1660|  2.37M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1622|  2.61M|    {
 1623|  2.61M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.61M|        return this->get_value();
 1625|  2.61M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  446|  2.61M|    {
  447|  2.61M|        return m_value;
  448|  2.61M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|  6.35M|    {
 1833|  6.35M|        return detail::transform_error_impl(std::move(*this),
 1834|  6.35M|                                            std::forward<F>(f));
 1835|  6.35M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|  6.35M|{
 1319|  6.35M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  6.35M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  6.35M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  6.35M|            return result(*std::forward<Exp>(exp));
 1323|  6.35M|        }
 1324|       |
 1325|  6.35M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  6.35M|        return result(unexpect, monostate{});
 1327|  6.35M|    }
 1328|  6.35M|    else {
 1329|  6.35M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  6.35M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  6.35M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.30M, False: 51.3k]
  |  |  ------------------
  ------------------
 1331|  6.35M|                   ? result(*std::forward<Exp>(exp))
 1332|  6.35M|                   : result(unexpect,
 1333|  51.3k|                            trivial_invoke(std::forward<F>(f),
 1334|  51.3k|                                           std::forward<Exp>(exp).error()));
 1335|  6.35M|    }
 1336|  6.35M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1425|  9.27M|    {
 1426|  9.27M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  9.27M|    {
  433|  9.27M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1481|  51.3k|    {
 1482|  51.3k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1658|  6.30M|    {
 1659|  6.30M|        return std::move(value());
 1660|  6.30M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3325|  2.76M|    {
 3326|  2.76M|        return m_iterator;
 3327|  2.76M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3329|  2.76M|    {
 3330|  2.76M|        return m_sentinel;
 3331|  2.76M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1593|  15.9M|    {
 1594|  15.9M|        return has_value();
 1595|  15.9M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|  24.9M|    {
  481|  24.9M|        return m_has_value;
  482|  24.9M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1599|   383k|    {
 1600|   383k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   383k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   383k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   383k|        return this->get_unexpected().error();
 1602|   383k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   383k|    {
  464|   383k|        return m_unexpected;
  465|   383k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1658|  6.94M|    {
 1659|  6.94M|        return std::move(value());
 1660|  6.94M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1622|  8.66M|    {
 1623|  8.66M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  8.66M|        return this->get_value();
 1625|  8.66M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|  8.66M|    {
  447|  8.66M|        return m_value;
  448|  8.66M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  4.32M|{
  322|  4.32M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  4.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  4.32M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3311|  2.16M|    {
 3312|  2.16M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4286|  31.4M|    {
 4287|  31.4M|        return !x.is_at_end();
 4288|  31.4M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1425|  1.76M|    {
 1426|  1.76M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.76M|    {
  433|  1.76M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  32.4k|    {
 1472|  32.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  32.4k|    {
  443|  32.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  5.93M|    {
 1173|  5.93M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1425|  5.90M|    {
 1426|  5.90M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  5.90M|    {
  433|  5.90M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1593|  3.53M|    {
 1594|  3.53M|        return has_value();
 1595|  3.53M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1648|   903k|    {
 1649|   903k|        return value();
 1650|   903k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  18.3k|    {
 1472|  18.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  18.3k|    {
  443|  18.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  3.24M|    {
 1173|  3.24M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|  3.23M|    {
 1426|  3.23M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  3.23M|    {
  433|  3.23M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1593|  3.24M|    {
 1594|  3.24M|        return has_value();
 1595|  3.24M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  480|  6.49M|    {
  481|  6.49M|        return m_has_value;
  482|  6.49M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1599|  18.3k|    {
 1600|  18.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  18.3k|        return this->get_unexpected().error();
 1602|  18.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  18.3k|    {
  464|  18.3k|        return m_unexpected;
  465|  18.3k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|  3.23M|    {
 1659|  3.23M|        return std::move(value());
 1660|  3.23M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|  3.23M|    {
 1623|  3.23M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  3.23M|        return this->get_value();
 1625|  3.23M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  446|  3.23M|    {
  447|  3.23M|        return m_value;
  448|  3.23M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1599|  6.90k|    {
 1600|  6.90k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.90k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.90k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  6.90k|        return this->get_unexpected().error();
 1602|  6.90k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  2.40M|    {
 1472|  2.40M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  2.40M|    {
  443|  2.40M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  13.5M|    {
 1173|  13.5M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1425|   918k|    {
 1426|   918k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|   918k|    {
  433|   918k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|  9.23M|    {
 1472|  9.23M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  9.23M|    {
  443|  9.23M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1593|  15.9M|    {
 1594|  15.9M|        return has_value();
 1595|  15.9M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  27.1M|    {
  481|  27.1M|        return m_has_value;
  482|  27.1M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1599|  6.35M|    {
 1600|  6.35M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  6.35M|        return this->get_unexpected().error();
 1602|  6.35M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  6.35M|    {
  464|  6.35M|        return m_unexpected;
  465|  6.35M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1425|  2.45M|    {
 1426|  2.45M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  2.45M|    {
  433|  2.45M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.45M|    {
 1173|  2.45M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|    156|    {
 1472|    156|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|    156|    {
  443|    156|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1648|  2.60M|    {
 1649|  2.60M|        return value();
 1650|  2.60M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1622|  2.60M|    {
 1623|  2.60M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.60M|        return this->get_value();
 1625|  2.60M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  2.60M|    {
  447|  2.60M|        return m_value;
  448|  2.60M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1593|  78.8k|    {
 1594|  78.8k|        return has_value();
 1595|  78.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  4.91M|    {
  481|  4.91M|        return m_has_value;
  482|  4.91M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1658|  2.37M|    {
 1659|  2.37M|        return std::move(value());
 1660|  2.37M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1622|  2.45M|    {
 1623|  2.45M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.45M|        return this->get_value();
 1625|  2.45M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  2.45M|    {
  447|  2.45M|        return m_value;
  448|  2.45M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1425|  1.01M|    {
 1426|  1.01M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.01M|    {
  433|  1.01M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|  4.59M|    {
 2851|  4.59M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  4.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|  4.59M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|  4.59M|    {
 2832|  4.59M|        return t.data();
 2833|  4.59M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1425|  1.72M|    {
 1426|  1.72M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.72M|    {
  433|  1.72M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1471|  1.08M|    {
 1472|  1.08M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  442|  1.08M|    {
  443|  1.08M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  15.0M|    {
 1173|  15.0M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1425|  13.7M|    {
 1426|  13.7M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  432|  13.7M|    {
  433|  13.7M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1658|  9.34M|    {
 1659|  9.34M|        return std::move(value());
 1660|  9.34M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1206|  5.49M|{
 1207|  5.49M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1208|  5.49M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1832|  2.37M|    {
 1833|  2.37M|        return detail::transform_error_impl(std::move(*this),
 1834|  2.37M|                                            std::forward<F>(f));
 1835|  2.37M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1318|  2.37M|{
 1319|  2.37M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.37M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.37M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.37M|            return result(*std::forward<Exp>(exp));
 1323|  2.37M|        }
 1324|       |
 1325|  2.37M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.37M|        return result(unexpect, monostate{});
 1327|  2.37M|    }
 1328|  2.37M|    else {
 1329|  2.37M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.37M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.37M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.37M, False: 0]
  |  |  ------------------
  ------------------
 1331|  2.37M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.37M|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  2.37M|    }
 1336|  2.37M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|  2.37M|    {
 1426|  2.37M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|  2.37M|    {
  433|  2.37M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.37M|    {
 1173|  2.37M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|  2.37M|    {
 1594|  2.37M|        return has_value();
 1595|  2.37M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.74M|    {
  481|  4.74M|        return m_has_value;
  482|  4.74M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1658|  2.37M|    {
 1659|  2.37M|        return std::move(value());
 1660|  2.37M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|  2.37M|    {
 1623|  2.37M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.37M|        return this->get_value();
 1625|  2.37M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.37M|    {
  447|  2.37M|        return m_value;
  448|  2.37M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1818|  2.30M|    {
 1819|  2.30M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|  2.30M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1318|  2.30M|{
 1319|  2.30M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.30M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.30M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.30M|            return result(*std::forward<Exp>(exp));
 1323|  2.30M|        }
 1324|       |
 1325|  2.30M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.30M|        return result(unexpect, monostate{});
 1327|  2.30M|    }
 1328|  2.30M|    else {
 1329|  2.30M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.30M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.30M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.30M]
  |  |  ------------------
  ------------------
 1331|  2.30M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.30M|                   : result(unexpect,
 1333|  2.30M|                            trivial_invoke(std::forward<F>(f),
 1334|  2.30M|                                           std::forward<Exp>(exp).error()));
 1335|  2.30M|    }
 1336|  2.30M|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1648|  1.72M|    {
 1649|  1.72M|        return value();
 1650|  1.72M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3663|   581k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1668|   244k|    {
 1669|   244k|        return &value();
 1670|   244k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2719|  1.65M|    {
 2720|  1.65M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|  1.65M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2700|  1.65M|    {
 2701|  1.65M|        return decay_copy(t.begin());
 2702|  1.65M|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1944|  1.65M|{
 1945|  1.65M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|  1.65M|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3663|  1.03M|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1832|  2.37M|    {
 1833|  2.37M|        return detail::transform_error_impl(std::move(*this),
 1834|  2.37M|                                            std::forward<F>(f));
 1835|  2.37M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1318|  2.37M|{
 1319|  2.37M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.37M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.37M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.37M|            return result(*std::forward<Exp>(exp));
 1323|  2.37M|        }
 1324|       |
 1325|  2.37M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.37M|        return result(unexpect, monostate{});
 1327|  2.37M|    }
 1328|  2.37M|    else {
 1329|  2.37M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.37M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.37M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.37M, False: 0]
  |  |  ------------------
  ------------------
 1331|  2.37M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.37M|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|  2.37M|    }
 1336|  2.37M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|  2.37M|    {
 1426|  2.37M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  2.37M|    {
  433|  2.37M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.37M|    {
 1173|  2.37M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|  2.37M|    {
 1594|  2.37M|        return has_value();
 1595|  2.37M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.75M|    {
  481|  4.75M|        return m_has_value;
  482|  4.75M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|  2.37M|    {
 1659|  2.37M|        return std::move(value());
 1660|  2.37M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|  2.37M|    {
 1623|  2.37M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|  2.37M|        return this->get_value();
 1625|  2.37M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.37M|    {
  447|  2.37M|        return m_value;
  448|  2.37M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1818|  2.27M|    {
 1819|  2.27M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|  2.27M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1318|  2.27M|{
 1319|  2.27M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|  2.27M|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|  2.27M|        if (SCN_LIKELY(exp.has_value())) {
 1322|  2.27M|            return result(*std::forward<Exp>(exp));
 1323|  2.27M|        }
 1324|       |
 1325|  2.27M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|  2.27M|        return result(unexpect, monostate{});
 1327|  2.27M|    }
 1328|  2.27M|    else {
 1329|  2.27M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|  2.27M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.27M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 2.27M]
  |  |  ------------------
  ------------------
 1331|  2.27M|                   ? result(*std::forward<Exp>(exp))
 1332|  2.27M|                   : result(unexpect,
 1333|  2.27M|                            trivial_invoke(std::forward<F>(f),
 1334|  2.27M|                                           std::forward<Exp>(exp).error()));
 1335|  2.27M|    }
 1336|  2.27M|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3643|  2.27M|    {
 3644|  2.27M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1648|  1.68M|    {
 1649|  1.68M|        return value();
 1650|  1.68M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1668|  78.6k|    {
 1669|  78.6k|        return &value();
 1670|  78.6k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3643|  2.30M|    {
 3644|  2.30M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|   658k|    {
 1472|   658k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4234|  2.54M|    {
 4235|  2.54M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  2.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4236|       |
 4237|  2.54M|        if (!stores_parent()) {
  ------------------
  |  Branch (4237:13): [True: 0, False: 2.54M]
  ------------------
 4238|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4239|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|      0|            return *ptr;
 4241|      0|        }
 4242|       |
 4243|  2.54M|        auto res = read_at_position();
 4244|  2.54M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  2.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4245|  2.54M|        return parent()->get_character_at(m_position);
 4246|  2.54M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4299|  8.36M|    {
 4300|  8.36M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  8.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4301|       |
 4302|  8.36M|        if (!stores_parent()) {
  ------------------
  |  Branch (4302:13): [True: 0, False: 8.36M]
  ------------------
 4303|      0|            return true;
 4304|      0|        }
 4305|       |
 4306|  8.36M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  8.36M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.06M, False: 1.30M]
  |  |  ------------------
  ------------------
 4307|  7.06M|            return true;
 4308|  7.06M|        }
 4309|       |
 4310|  2.45M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4310:16): [True: 1.30M, False: 1.15M]
  ------------------
 4311|  1.30M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4311:17): [True: 148k, False: 1.15M]
  ------------------
 4312|   148k|                return false;
 4313|   148k|            }
 4314|  1.30M|        }
 4315|  1.15M|        return true;
 4316|  1.30M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4076|  11.5M|    {
 4077|  11.5M|        return m_putback_buffer.size() + m_current_view.size();
 4078|  11.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4107|  2.54M|    {
 4108|  2.54M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  2.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.14M, False: 402k]
  |  |  ------------------
  ------------------
 4109|  2.54M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4110|  2.14M|            return m_putback_buffer[pos];
 4111|  2.14M|        }
 4112|   402k|        const auto start = pos - m_putback_buffer.size();
 4113|   402k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   402k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   402k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4114|   402k|        return m_current_view[start];
 4115|   402k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4220|  3.01M|    {
 4221|  3.01M|        ++m_position;
 4222|  3.01M|        (void)read_at_position();
 4223|  3.01M|        return *this;
 4224|  3.01M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4269|   963k|    {
 4270|   963k|        return !(lhs == rhs);
 4271|   963k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4264|  1.35M|    {
 4265|  1.35M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4265:16): [True: 1.35M, False: 0]
  |  Branch (4265:46): [True: 431k, False: 924k]
  ------------------
 4266|  1.35M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4275|  2.01M|    {
 4276|  2.01M|        return x.is_at_end();
 4277|  2.01M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4319|  2.80M|    {
 4320|  2.80M|        if (m_end) {
  ------------------
  |  Branch (4320:13): [True: 0, False: 2.80M]
  ------------------
 4321|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4322|      0|        }
 4323|  2.80M|        if (!m_begin) {
  ------------------
  |  Branch (4323:13): [True: 0, False: 2.80M]
  ------------------
 4324|      0|            return true;
 4325|      0|        }
 4326|  2.80M|        return !read_at_position();
 4327|  2.80M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   780k|{
 3803|   780k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3803:19): [Folded - Ignored]
  ------------------
 3804|   780k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|   780k|    }
 3806|   780k|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3806:24): [Folded - Ignored]
  ------------------
 3807|   780k|        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|   780k|    }
 3809|   780k|    else {
 3810|       |        // utf-32
 3811|   780k|        static_assert(sizeof(U) == 4);
 3812|   780k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   780k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   780k|        return 1;
 3814|   780k|    }
 3815|   780k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1425|  1.37M|    {
 1426|  1.37M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  1.37M|    {
  433|  1.37M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.42M|    {
 1173|  1.42M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  51.7k|    {
 1472|  51.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  51.7k|    {
  443|  51.7k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1593|   392k|    {
 1594|   392k|        return has_value();
 1595|   392k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1648|  3.09k|    {
 1649|  3.09k|        return value();
 1650|  3.09k|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   780k|{
 4009|   780k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4009:19): [Folded - Ignored]
  ------------------
 4010|   780k|        return decode_utf8_code_point_exhaustive(input);
 4011|   780k|    }
 4012|   780k|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4012:24): [Folded - Ignored]
  ------------------
 4013|   780k|        return decode_utf16_code_point_exhaustive(input);
 4014|   780k|    }
 4015|   780k|    else {
 4016|   780k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   780k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   780k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   780k|        auto cp = static_cast<char32_t>(input.front());
 4018|   780k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   780k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 239k, False: 540k]
  |  |  ------------------
  ------------------
 4019|   239k|            return invalid_code_point;
 4020|   239k|        }
 4021|   540k|        return cp;
 4022|   780k|    }
 4023|   780k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|  1.62k|    {
 1472|  1.62k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  1.62k|    {
  443|  1.62k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   260k|    {
 1173|   260k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|   259k|    {
 1426|   259k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|   259k|    {
  433|   259k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1593|   260k|    {
 1594|   260k|        return has_value();
 1595|   260k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|   521k|    {
  481|   521k|        return m_has_value;
  482|   521k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1599|  1.62k|    {
 1600|  1.62k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.62k|        return this->get_unexpected().error();
 1602|  1.62k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.62k|    {
  464|  1.62k|        return m_unexpected;
  465|  1.62k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|   259k|    {
 1659|   259k|        return std::move(value());
 1660|   259k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|   259k|    {
 1623|   259k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   259k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   259k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   259k|        return this->get_value();
 1625|   259k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|   259k|    {
  447|   259k|        return m_value;
  448|   259k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  4.54M|    {
 3330|  4.54M|        return m_sentinel;
 3331|  4.54M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1599|    789|    {
 1600|    789|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    789|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    789|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|    789|        return this->get_unexpected().error();
 1602|    789|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|   339k|    {
 1472|   339k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|   388k|    {
  443|   388k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.51M|    {
 1173|  2.51M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1425|  3.09k|    {
 1426|  3.09k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  3.09k|    {
  433|  3.09k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1471|  1.37M|    {
 1472|  1.37M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  1.37M|    {
  443|  1.37M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1593|  2.80M|    {
 1594|  2.80M|        return has_value();
 1595|  2.80M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  5.28M|    {
  481|  5.28M|        return m_has_value;
  482|  5.28M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1599|  1.15M|    {
 1600|  1.15M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.15M|        return this->get_unexpected().error();
 1602|  1.15M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  1.15M|    {
  464|  1.15M|        return m_unexpected;
  465|  1.15M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1425|   292k|    {
 1426|   292k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|   292k|    {
  433|   292k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   292k|    {
 1173|   292k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1471|     27|    {
 1472|     27|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  442|     27|    {
  443|     27|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1648|   114k|    {
 1649|   114k|        return value();
 1650|   114k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1622|   806k|    {
 1623|   806k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   806k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   806k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   806k|        return this->get_value();
 1625|   806k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  446|   806k|    {
  447|   806k|        return m_value;
  448|   806k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1593|  2.66k|    {
 1594|  2.66k|        return has_value();
 1595|  2.66k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  480|   584k|    {
  481|   584k|        return m_has_value;
  482|   584k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1658|   289k|    {
 1659|   289k|        return std::move(value());
 1660|   289k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1622|   292k|    {
 1623|   292k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   292k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   292k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   292k|        return this->get_value();
 1625|   292k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  446|   292k|    {
  447|   292k|        return m_value;
  448|   292k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1832|   740k|    {
 1833|   740k|        return detail::transform_error_impl(std::move(*this),
 1834|   740k|                                            std::forward<F>(f));
 1835|   740k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1318|   740k|{
 1319|   740k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   740k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   740k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   740k|            return result(*std::forward<Exp>(exp));
 1323|   740k|        }
 1324|       |
 1325|   740k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   740k|        return result(unexpect, monostate{});
 1327|   740k|    }
 1328|   740k|    else {
 1329|   740k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   740k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   740k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 691k, False: 48.7k]
  |  |  ------------------
  ------------------
 1331|   740k|                   ? result(*std::forward<Exp>(exp))
 1332|   740k|                   : result(unexpect,
 1333|  48.7k|                            trivial_invoke(std::forward<F>(f),
 1334|  48.7k|                                           std::forward<Exp>(exp).error()));
 1335|   740k|    }
 1336|   740k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1425|   748k|    {
 1426|   748k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   748k|    {
  433|   748k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1481|  48.7k|    {
 1482|  48.7k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1658|   691k|    {
 1659|   691k|        return std::move(value());
 1660|   691k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3325|  59.5k|    {
 3326|  59.5k|        return m_iterator;
 3327|  59.5k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3329|  59.5k|    {
 3330|  59.5k|        return m_sentinel;
 3331|  59.5k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1593|  1.96M|    {
 1594|  1.96M|        return has_value();
 1595|  1.96M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|  3.29M|    {
  481|  3.29M|        return m_has_value;
  482|  3.29M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1599|   895k|    {
 1600|   895k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   895k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   895k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|   895k|        return this->get_unexpected().error();
 1602|   895k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   895k|    {
  464|   895k|        return m_unexpected;
  465|   895k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1658|   396k|    {
 1659|   396k|        return std::move(value());
 1660|   396k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1622|   435k|    {
 1623|   435k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   435k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   435k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   435k|        return this->get_value();
 1625|   435k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|   435k|    {
  447|   435k|        return m_value;
  448|   435k|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  301|   107k|{
  302|   107k|    return p;
  303|   107k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|   107k|{
  322|   107k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   107k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3311|  53.5k|    {
 3312|  53.5k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4286|   789k|    {
 4287|   789k|        return !x.is_at_end();
 4288|   789k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1425|  38.7k|    {
 1426|  38.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  38.7k|    {
  433|  38.7k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|  51.2k|    {
 1472|  51.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  51.2k|    {
  443|  51.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  1.35M|    {
 1173|  1.35M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1425|  1.30M|    {
 1426|  1.30M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.30M|    {
  433|  1.30M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1593|   323k|    {
 1594|   323k|        return has_value();
 1595|   323k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  2.39M|    {
  481|  2.39M|        return m_has_value;
  482|  2.39M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1648|  1.40k|    {
 1649|  1.40k|        return value();
 1650|  1.40k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1622|   983k|    {
 1623|   983k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   983k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   983k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   983k|        return this->get_value();
 1625|   983k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|   983k|    {
  447|   983k|        return m_value;
  448|   983k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1471|  1.62k|    {
 1472|  1.62k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|  1.62k|    {
  443|  1.62k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   261k|    {
 1173|   261k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1425|   259k|    {
 1426|   259k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|   259k|    {
  433|   259k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|   292k|    {
 1833|   292k|        return detail::transform_error_impl(std::move(*this),
 1834|   292k|                                            std::forward<F>(f));
 1835|   292k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|   292k|{
 1319|   292k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   292k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   292k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   292k|            return result(*std::forward<Exp>(exp));
 1323|   292k|        }
 1324|       |
 1325|   292k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   292k|        return result(unexpect, monostate{});
 1327|   292k|    }
 1328|   292k|    else {
 1329|   292k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   292k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   292k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 289k, False: 2.16k]
  |  |  ------------------
  ------------------
 1331|   292k|                   ? result(*std::forward<Exp>(exp))
 1332|   292k|                   : result(unexpect,
 1333|  2.16k|                            trivial_invoke(std::forward<F>(f),
 1334|  2.16k|                                           std::forward<Exp>(exp).error()));
 1335|   292k|    }
 1336|   292k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1658|   982k|    {
 1659|   982k|        return std::move(value());
 1660|   982k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1609|  51.0k|    {
 1610|  51.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  51.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1611|  51.0k|        return std::move(this->get_unexpected().error());
 1612|  51.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|  51.2k|    {
  464|  51.2k|        return m_unexpected;
  465|  51.2k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1481|   400k|    {
 1482|   400k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1593|   261k|    {
 1594|   261k|        return has_value();
 1595|   261k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  480|   522k|    {
  481|   522k|        return m_has_value;
  482|   522k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1599|  1.62k|    {
 1600|  1.62k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.62k|        return this->get_unexpected().error();
 1602|  1.62k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.62k|    {
  464|  1.62k|        return m_unexpected;
  465|  1.62k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1658|   259k|    {
 1659|   259k|        return std::move(value());
 1660|   259k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1622|   259k|    {
 1623|   259k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   259k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   259k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   259k|        return this->get_value();
 1625|   259k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  446|   259k|    {
  447|   259k|        return m_value;
  448|   259k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1599|    248|    {
 1600|    248|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    248|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    248|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|    248|        return this->get_unexpected().error();
 1602|    248|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1471|   339k|    {
 1472|   339k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|   387k|    {
  443|   387k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|  2.24M|    {
 1173|  2.24M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1425|  1.40k|    {
 1426|  1.40k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.40k|    {
  433|  1.40k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1471|  1.14M|    {
 1472|  1.14M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  1.14M|    {
  443|  1.14M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1593|  2.53M|    {
 1594|  2.53M|        return has_value();
 1595|  2.53M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  4.69M|    {
  481|  4.69M|        return m_has_value;
  482|  4.69M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1599|  1.02M|    {
 1600|  1.02M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1601|  1.02M|        return this->get_unexpected().error();
 1602|  1.02M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  1.02M|    {
  464|  1.02M|        return m_unexpected;
  465|  1.02M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1425|   291k|    {
 1426|   291k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|   291k|    {
  433|   291k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   291k|    {
 1173|   291k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1471|     12|    {
 1472|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|     12|    {
  443|     12|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1648|  44.0k|    {
 1649|  44.0k|        return value();
 1650|  44.0k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1622|   736k|    {
 1623|   736k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   736k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   736k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   736k|        return this->get_value();
 1625|   736k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|   736k|    {
  447|   736k|        return m_value;
  448|   736k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1593|  1.10k|    {
 1594|  1.10k|        return has_value();
 1595|  1.10k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|   582k|    {
  481|   582k|        return m_has_value;
  482|   582k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1658|   289k|    {
 1659|   289k|        return std::move(value());
 1660|   289k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1622|   291k|    {
 1623|   291k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   291k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   291k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   291k|        return this->get_value();
 1625|   291k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|   291k|    {
  447|   291k|        return m_value;
  448|   291k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1832|   740k|    {
 1833|   740k|        return detail::transform_error_impl(std::move(*this),
 1834|   740k|                                            std::forward<F>(f));
 1835|   740k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1318|   740k|{
 1319|   740k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   740k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   740k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   740k|            return result(*std::forward<Exp>(exp));
 1323|   740k|        }
 1324|       |
 1325|   740k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   740k|        return result(unexpect, monostate{});
 1327|   740k|    }
 1328|   740k|    else {
 1329|   740k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   740k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   740k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 692k, False: 48.8k]
  |  |  ------------------
  ------------------
 1331|   740k|                   ? result(*std::forward<Exp>(exp))
 1332|   740k|                   : result(unexpect,
 1333|  48.8k|                            trivial_invoke(std::forward<F>(f),
 1334|  48.8k|                                           std::forward<Exp>(exp).error()));
 1335|   740k|    }
 1336|   740k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1425|   713k|    {
 1426|   713k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   713k|    {
  433|   713k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1481|  48.8k|    {
 1482|  48.8k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1658|   692k|    {
 1659|   692k|        return std::move(value());
 1660|   692k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|   180k|    {
 2851|   180k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|   180k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|   180k|    {
 2832|   180k|        return t.data();
 2833|   180k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1425|  38.8k|    {
 1426|  38.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  38.8k|    {
  433|  38.8k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1832|   289k|    {
 1833|   289k|        return detail::transform_error_impl(std::move(*this),
 1834|   289k|                                            std::forward<F>(f));
 1835|   289k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1318|   289k|{
 1319|   289k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   289k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   289k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   289k|            return result(*std::forward<Exp>(exp));
 1323|   289k|        }
 1324|       |
 1325|   289k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   289k|        return result(unexpect, monostate{});
 1327|   289k|    }
 1328|   289k|    else {
 1329|   289k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   289k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   289k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 289k, False: 0]
  |  |  ------------------
  ------------------
 1331|   289k|                   ? result(*std::forward<Exp>(exp))
 1332|   289k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|   289k|    }
 1336|   289k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1425|   289k|    {
 1426|   289k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|   289k|    {
  433|   289k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   289k|    {
 1173|   289k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|   289k|    {
 1594|   289k|        return has_value();
 1595|   289k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   579k|    {
  481|   579k|        return m_has_value;
  482|   579k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1658|   289k|    {
 1659|   289k|        return std::move(value());
 1660|   289k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1622|   289k|    {
 1623|   289k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   289k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   289k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   289k|        return this->get_value();
 1625|   289k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   289k|    {
  447|   289k|        return m_value;
  448|   289k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1818|   524k|    {
 1819|   524k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|   524k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1318|   524k|{
 1319|   524k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   524k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   524k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   524k|            return result(*std::forward<Exp>(exp));
 1323|   524k|        }
 1324|       |
 1325|   524k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   524k|        return result(unexpect, monostate{});
 1327|   524k|    }
 1328|   524k|    else {
 1329|   524k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   524k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   524k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 524k]
  |  |  ------------------
  ------------------
 1331|   524k|                   ? result(*std::forward<Exp>(exp))
 1332|   524k|                   : result(unexpect,
 1333|   524k|                            trivial_invoke(std::forward<F>(f),
 1334|   524k|                                           std::forward<Exp>(exp).error()));
 1335|   524k|    }
 1336|   524k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1648|  38.7k|    {
 1649|  38.7k|        return value();
 1650|  38.7k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3663|  46.2k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1668|  2.63k|    {
 1669|  2.63k|        return &value();
 1670|  2.63k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2719|   243k|    {
 2720|   243k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2721|   243k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2700|   243k|    {
 2701|   243k|        return decay_copy(t.begin());
 2702|   243k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1944|   243k|{
 1945|   243k|    return SCN_FWD(t);
  ------------------
  |  |  930|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1946|   243k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3663|   114k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1832|   289k|    {
 1833|   289k|        return detail::transform_error_impl(std::move(*this),
 1834|   289k|                                            std::forward<F>(f));
 1835|   289k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1318|   289k|{
 1319|   289k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   289k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   289k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   289k|            return result(*std::forward<Exp>(exp));
 1323|   289k|        }
 1324|       |
 1325|   289k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   289k|        return result(unexpect, monostate{});
 1327|   289k|    }
 1328|   289k|    else {
 1329|   289k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   289k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   289k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 289k, False: 0]
  |  |  ------------------
  ------------------
 1331|   289k|                   ? result(*std::forward<Exp>(exp))
 1332|   289k|                   : result(unexpect,
 1333|      0|                            trivial_invoke(std::forward<F>(f),
 1334|      0|                                           std::forward<Exp>(exp).error()));
 1335|   289k|    }
 1336|   289k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1425|   289k|    {
 1426|   289k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|   289k|    {
  433|   289k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1172|   289k|    {
 1173|   289k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1593|   289k|    {
 1594|   289k|        return has_value();
 1595|   289k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   579k|    {
  481|   579k|        return m_has_value;
  482|   579k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1658|   289k|    {
 1659|   289k|        return std::move(value());
 1660|   289k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1622|   289k|    {
 1623|   289k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   289k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   289k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1624|   289k|        return this->get_value();
 1625|   289k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   289k|    {
  447|   289k|        return m_value;
  448|   289k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1818|   397k|    {
 1819|   397k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1820|   397k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1318|   397k|{
 1319|   397k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1319:19): [Folded - Ignored]
  ------------------
 1320|   397k|        using result = expected<expected_value_type<Exp>, monostate>;
 1321|   397k|        if (SCN_LIKELY(exp.has_value())) {
 1322|   397k|            return result(*std::forward<Exp>(exp));
 1323|   397k|        }
 1324|       |
 1325|   397k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1326|   397k|        return result(unexpect, monostate{});
 1327|   397k|    }
 1328|   397k|    else {
 1329|   397k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1330|   397k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   397k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 397k]
  |  |  ------------------
  ------------------
 1331|   397k|                   ? result(*std::forward<Exp>(exp))
 1332|   397k|                   : result(unexpect,
 1333|   397k|                            trivial_invoke(std::forward<F>(f),
 1334|   397k|                                           std::forward<Exp>(exp).error()));
 1335|   397k|    }
 1336|   397k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3643|   397k|    {
 3644|   397k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1648|  38.8k|    {
 1649|  38.8k|        return value();
 1650|  38.8k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1668|  1.08k|    {
 1669|  1.08k|        return &value();
 1670|  1.08k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3643|   524k|    {
 3644|   524k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1425|   258k|    {
 1426|   258k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  432|   258k|    {
  433|   258k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3649|   165k|{
 3650|   165k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|   165k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2850|  2.13M|    {
 2851|  2.13M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2852|  2.13M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2831|  2.13M|    {
 2832|  2.13M|        return t.data();
 2833|  2.13M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5461|  4.33M|    {
 5462|  4.33M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.33M]
  |  |  ------------------
  ------------------
 5463|      0|            return max_size();
 5464|      0|        }
 5465|       |
 5466|  4.33M|        return static_cast<std::size_t>(m_desc &
 5467|  4.33M|                                        ((1 << detail::packed_arg_bits) - 1));
 5468|  4.33M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5486|  8.67M|    {
 5487|  8.67M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5488|  8.67M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5429|  4.33M|    {
 5430|  4.33M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.33M]
  |  |  ------------------
  ------------------
 5431|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5432|      0|                return m_args[id];
 5433|      0|            }
 5434|      0|            return {};
 5435|      0|        }
 5436|       |
 5437|  4.33M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  4.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.33M]
  |  |  ------------------
  ------------------
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  4.33M|        const auto t = type(id);
 5442|  4.33M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  4.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.33M]
  |  |  ------------------
  ------------------
 5443|      0|            return {};
 5444|      0|        }
 5445|       |
 5446|  4.33M|        basic_scan_arg<Context> arg;
 5447|  4.33M|        arg.m_type = t;
 5448|  4.33M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5448:13): [True: 4.33M, False: 0]
  ------------------
 5449|  4.33M|            arg.m_value.ref_value = m_builtin_values[id];
 5450|  4.33M|        }
 5451|      0|        else {
 5452|      0|            arg.m_value = m_values[id];
 5453|      0|        }
 5454|  4.33M|        return arg;
 5455|  4.33M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5495|  4.33M|    {
 5496|       |        // First (0th) index is size, types start after that
 5497|  4.33M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5498|  4.33M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5499|  4.33M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5500|  4.33M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5490|  4.33M|    {
 5491|  4.33M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5492|  4.33M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5242|  8.20M|    {
 5243|  8.20M|        return m_type != detail::arg_type::none_type;
 5244|  8.20M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   724k|{
 8413|   724k|#define SCN_VISIT(Type)                                         \
 8414|   724k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   724k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   724k|    }                                                           \
 8417|   724k|    else {                                                      \
 8418|   724k|        return vis(monostate_val);                              \
 8419|   724k|    }
 8420|       |
 8421|   724k|    monostate monostate_val{};
 8422|       |
 8423|   724k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 724k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 724k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 724k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 724k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 724k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 724k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 724k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 724k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 724k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 724k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 724k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 724k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 724k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 724k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 724k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|   224k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 224k, False: 500k]
  ------------------
 8455|   224k|            SCN_VISIT(float);
  ------------------
  |  | 8414|   224k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   224k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   224k|    }                                                           \
  |  | 8417|   224k|    else {                                                      \
  |  | 8418|   224k|        return vis(monostate_val);                              \
  |  | 8419|   224k|    }
  ------------------
 8456|   247k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 247k, False: 476k]
  ------------------
 8457|   247k|            SCN_VISIT(double);
  ------------------
  |  | 8414|   247k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   247k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   247k|    }                                                           \
  |  | 8417|   247k|    else {                                                      \
  |  | 8418|   247k|        return vis(monostate_val);                              \
  |  | 8419|   247k|    }
  ------------------
 8458|   252k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 252k, False: 472k]
  ------------------
 8459|   252k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|   252k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   252k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   252k|    }                                                           \
  |  | 8417|   252k|    else {                                                      \
  |  | 8418|   252k|        return vis(monostate_val);                              \
  |  | 8419|   252k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 724k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 724k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 724k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 724k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 724k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 724k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 724k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 724k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 724k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   724k|            SCN_CLANG_POP
 8491|   724k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5540|  3.40M|    {
 5541|  3.40M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8133|  1.72M|    {
 8134|  1.72M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8051|  3.40M|    {
 8052|  3.40M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4339|  2.40M|{
 4340|  2.40M|    if (is_contiguous()) {
  ------------------
  |  Branch (4340:9): [True: 0, False: 2.40M]
  ------------------
 4341|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4342|      0|                                ranges::default_sentinel};
 4343|      0|    }
 4344|  2.40M|    return ranges::subrange{forward_iterator{this, 0},
 4345|  2.40M|                            ranges::default_sentinel};
 4346|  2.40M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4172|  2.40M|    {
 4173|  2.40M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  2.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4174|  2.40M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  2.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4175|  2.40M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   677k|{
 8413|   677k|#define SCN_VISIT(Type)                                         \
 8414|   677k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   677k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   677k|    }                                                           \
 8417|   677k|    else {                                                      \
 8418|   677k|        return vis(monostate_val);                              \
 8419|   677k|    }
 8420|       |
 8421|   677k|    monostate monostate_val{};
 8422|       |
 8423|   677k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 677k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 677k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 677k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 677k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 677k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 677k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 677k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 677k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 677k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 677k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 677k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 677k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 677k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 677k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 677k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|   209k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 209k, False: 467k]
  ------------------
 8455|   209k|            SCN_VISIT(float);
  ------------------
  |  | 8414|   209k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   209k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   209k|    }                                                           \
  |  | 8417|   209k|    else {                                                      \
  |  | 8418|   209k|        return vis(monostate_val);                              \
  |  | 8419|   209k|    }
  ------------------
 8456|   232k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 232k, False: 445k]
  ------------------
 8457|   232k|            SCN_VISIT(double);
  ------------------
  |  | 8414|   232k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   232k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   232k|    }                                                           \
  |  | 8417|   232k|    else {                                                      \
  |  | 8418|   232k|        return vis(monostate_val);                              \
  |  | 8419|   232k|    }
  ------------------
 8458|   235k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 235k, False: 442k]
  ------------------
 8459|   235k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|   235k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   235k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   235k|    }                                                           \
  |  | 8417|   235k|    else {                                                      \
  |  | 8418|   235k|        return vis(monostate_val);                              \
  |  | 8419|   235k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 677k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 677k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 677k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 677k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 677k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 677k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 677k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 677k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 677k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   677k|            SCN_CLANG_POP
 8491|   677k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|  1.67M|{
 7040|  1.67M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|  1.67M|    handler.check_args_exhausted();
 7042|  1.67M|    return handler.get_error();
 7043|  1.67M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|  1.67M|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|  1.67M|    auto begin = format.data();
 7009|  1.67M|    auto it = begin;
 7010|  1.67M|    const auto end = format.data() + format.size();
 7011|       |
 7012|  3.26M|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 1.67M, False: 1.58M]
  ------------------
 7013|  1.67M|        const auto ch = *it++;
 7014|  1.67M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 1.67M, False: 0]
  ------------------
 7015|  1.67M|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|  1.67M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|  1.67M|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 91.8k, False: 1.58M]
  ------------------
 7019|  91.8k|                return;
 7020|  91.8k|            }
 7021|  1.67M|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|  1.67M|    }
 7032|       |
 7033|  1.58M|    handler.on_literal_text(begin, end);
 7034|  1.58M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6937|  1.67M|{
 6938|  1.67M|    struct id_adapter {
 6939|  1.67M|        constexpr void operator()()
 6940|  1.67M|        {
 6941|  1.67M|            arg_id = handler.on_arg_id();
 6942|  1.67M|        }
 6943|  1.67M|        constexpr void operator()(std::size_t id)
 6944|  1.67M|        {
 6945|  1.67M|            arg_id = handler.on_arg_id(id);
 6946|  1.67M|        }
 6947|       |
 6948|  1.67M|        constexpr void on_error(const char* msg)
 6949|  1.67M|        {
 6950|  1.67M|            SCN_UNLIKELY_ATTR
 6951|  1.67M|            handler.on_error(msg);
 6952|  1.67M|        }
 6953|       |
 6954|  1.67M|        Handler& handler;
 6955|  1.67M|        std::size_t arg_id;
 6956|  1.67M|    };
 6957|       |
 6958|  1.67M|    ++begin;
 6959|  1.67M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.67M]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|  1.67M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 1.67M]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|  1.67M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 1.67M]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|  1.67M|    else {
 6971|  1.67M|        auto adapter = id_adapter{handler, 0};
 6972|  1.67M|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|  1.67M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.67M]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|  1.67M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 1.67M]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|  1.67M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 1.67M, False: 0]
  ------------------
 6983|  1.67M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.67M]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|  1.67M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|  1.67M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.67M]
  |  |  |  Branch (859:45): [True: 0, False: 1.67M]
  |  |  |  Branch (859:45): [True: 0, False: 1.67M]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unknown format specifier");
 6990|      0|                return begin;
 6991|      0|            }
 6992|  1.67M|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|  1.67M|    }
 6999|  1.67M|    return begin + 1;
 7000|  1.67M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8034|  3.40M|    {
 8035|  3.40M|        return m_args.get(id);
 8036|  3.40M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8044|  3.40M|    {
 8045|  3.40M|        return m_locale;
 8046|  3.40M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5561|  3.40M|    {
 5562|  3.40M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  3.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.40M]
  |  |  ------------------
  ------------------
 5563|      0|            on_error(
 5564|      0|                "Cannot switch from manual to automatic argument indexing");
 5565|      0|            return 0;
 5566|      0|        }
 5567|       |
 5568|  3.40M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5569|  3.40M|        do_check_arg_id(id);
 5570|  3.40M|        return id;
 5571|  3.40M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6049|  3.40M|{
 6050|  3.40M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6050:9): [Folded - Ignored]
  ------------------
 6051|  3.40M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6051:10): [Folded - Ignored]
  |  Branch (6051:22): [Folded - Ignored]
  ------------------
 6052|       |        // The cast below will cause an error on gcc pre-12
 6053|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6054|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6054:13): [True: 0, False: 0]
  ------------------
 6055|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6056|      0|            SCN_UNLIKELY_ATTR
 6057|      0|            on_error("Argument not found");
 6058|      0|        }
 6059|      0|    }
 6060|  3.40M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|  1.67M|{
 6439|  1.67M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|  1.67M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 1.67M, False: 0]
  |  Branch (6440:26): [True: 0, False: 1.67M]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|  1.67M|    handler();
 6445|  1.67M|    return begin;
 6446|  1.67M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|  1.67M|        {
 6941|  1.67M|            arg_id = handler.on_arg_id();
 6942|  1.67M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5247|  6.80M|    {
 5248|  6.80M|        return m_type;
 5249|  6.80M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5556|  3.40M|    {
 5557|  3.40M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5558|  3.40M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5545|  6.80M|    {
 5546|  6.80M|        return m_format.data();
 5547|  6.80M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7117|  1.67M|    {
 7118|  1.67M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  1.67M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6853|  1.67M|{
 6854|  1.67M|    auto do_presentation = [&]() -> const CharT* {
 6855|  1.67M|        if (*begin == CharT{'['}) {
 6856|  1.67M|            auto set = parse_presentation_set(begin, end, handler);
 6857|  1.67M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|  1.67M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|  1.67M|                return begin;
 6862|  1.67M|            }
 6863|  1.67M|            handler.on_character_set_string(set);
 6864|  1.67M|            return begin;
 6865|  1.67M|        }
 6866|  1.67M|        if (*begin == CharT{'/'}) {
 6867|  1.67M|            return parse_presentation_regex(begin, end, handler);
 6868|  1.67M|        }
 6869|  1.67M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  1.67M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|  1.67M|            handler.on_error("Invalid type specifier in format string");
 6872|  1.67M|            return begin;
 6873|  1.67M|        }
 6874|  1.67M|        handler.on_type(type);
 6875|  1.67M|        return begin;
 6876|  1.67M|    };
 6877|       |
 6878|  1.67M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 1.67M, False: 0]
  |  Branch (6878:28): [True: 1.67M, False: 0]
  ------------------
 6879|  1.67M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 1.67M, False: 0]
  |  Branch (6879:36): [True: 1.19M, False: 483k]
  ------------------
 6880|  1.19M|        return do_presentation();
 6881|  1.19M|    }
 6882|       |
 6883|   483k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   483k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 483k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|   483k|    begin = parse_align(begin, end, handler);
 6889|   483k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   483k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 483k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|   483k|    begin = parse_width(begin, end, handler);
 6895|   483k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   483k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 483k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|   483k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 483k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|   483k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 483k, False: 0]
  ------------------
 6914|   483k|        handler.on_localized();
 6915|   483k|        ++begin;
 6916|   483k|    }
 6917|   483k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   483k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 483k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|   483k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 483k, False: 0]
  |  Branch (6922:25): [True: 0, False: 483k]
  ------------------
 6923|      0|        do_presentation();
 6924|      0|    }
 6925|   483k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   483k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 483k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|   483k|    return begin;
 6931|   483k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6502|  3.40M|{
 6503|  3.40M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6503:13): [True: 2.42M, False: 979k]
  |  Branch (6503:33): [True: 2.42M, False: 0]
  ------------------
 6504|  3.40M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6504:13): [True: 979k, False: 0]
  |  Branch (6504:33): [True: 979k, False: 0]
  ------------------
 6505|  3.40M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6854|  1.19M|    auto do_presentation = [&]() -> const CharT* {
 6855|  1.19M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 0, False: 1.19M]
  ------------------
 6856|      0|            auto set = parse_presentation_set(begin, end, handler);
 6857|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|      0|            handler.on_character_set_string(set);
 6864|      0|            return begin;
 6865|      0|        }
 6866|  1.19M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 1.19M]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|  1.19M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  1.19M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.19M]
  |  |  ------------------
  ------------------
 6871|      0|            handler.on_error("Invalid type specifier in format string");
 6872|      0|            return begin;
 6873|      0|        }
 6874|  1.19M|        handler.on_type(type);
 6875|  1.19M|        return begin;
 6876|  1.19M|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6450|  2.42M|{
 6451|  2.42M|    switch (type) {
 6452|      0|        case 'b':
  ------------------
  |  Branch (6452:9): [True: 0, False: 2.42M]
  ------------------
 6453|      0|        case 'B':
  ------------------
  |  Branch (6453:9): [True: 0, False: 2.42M]
  ------------------
 6454|      0|            return presentation_type::int_binary;
 6455|      0|        case 'd':
  ------------------
  |  Branch (6455:9): [True: 0, False: 2.42M]
  ------------------
 6456|      0|            return presentation_type::int_decimal;
 6457|      0|        case 'i':
  ------------------
  |  Branch (6457:9): [True: 0, False: 2.42M]
  ------------------
 6458|      0|            return presentation_type::int_generic;
 6459|      0|        case 'u':
  ------------------
  |  Branch (6459:9): [True: 0, False: 2.42M]
  ------------------
 6460|      0|            return presentation_type::int_unsigned_decimal;
 6461|      0|        case 'o':
  ------------------
  |  Branch (6461:9): [True: 0, False: 2.42M]
  ------------------
 6462|      0|            return presentation_type::int_octal;
 6463|      0|        case 'x':
  ------------------
  |  Branch (6463:9): [True: 0, False: 2.42M]
  ------------------
 6464|      0|        case 'X':
  ------------------
  |  Branch (6464:9): [True: 0, False: 2.42M]
  ------------------
 6465|      0|            return presentation_type::int_hex;
 6466|      0|        case 'r':
  ------------------
  |  Branch (6466:9): [True: 0, False: 2.42M]
  ------------------
 6467|      0|        case 'R':
  ------------------
  |  Branch (6467:9): [True: 0, False: 2.42M]
  ------------------
 6468|      0|            return presentation_type::int_arbitrary_base;
 6469|  1.09M|        case 'a':
  ------------------
  |  Branch (6469:9): [True: 1.09M, False: 1.32M]
  ------------------
 6470|  1.09M|        case 'A':
  ------------------
  |  Branch (6470:9): [True: 0, False: 2.42M]
  ------------------
 6471|  1.09M|            return presentation_type::float_hex;
 6472|  67.0k|        case 'e':
  ------------------
  |  Branch (6472:9): [True: 67.0k, False: 2.35M]
  ------------------
 6473|  67.0k|        case 'E':
  ------------------
  |  Branch (6473:9): [True: 0, False: 2.42M]
  ------------------
 6474|  67.0k|            return presentation_type::float_scientific;
 6475|   430k|        case 'f':
  ------------------
  |  Branch (6475:9): [True: 430k, False: 1.99M]
  ------------------
 6476|   430k|        case 'F':
  ------------------
  |  Branch (6476:9): [True: 0, False: 2.42M]
  ------------------
 6477|   430k|            return presentation_type::float_fixed;
 6478|   824k|        case 'g':
  ------------------
  |  Branch (6478:9): [True: 824k, False: 1.59M]
  ------------------
 6479|   824k|        case 'G':
  ------------------
  |  Branch (6479:9): [True: 0, False: 2.42M]
  ------------------
 6480|   824k|            return presentation_type::float_general;
 6481|      0|        case 's':
  ------------------
  |  Branch (6481:9): [True: 0, False: 2.42M]
  ------------------
 6482|      0|            return presentation_type::string;
 6483|      0|        case 'c':
  ------------------
  |  Branch (6483:9): [True: 0, False: 2.42M]
  ------------------
 6484|      0|            return presentation_type::character;
 6485|      0|        case '?':
  ------------------
  |  Branch (6485:9): [True: 0, False: 2.42M]
  ------------------
 6486|      0|            return presentation_type::escaped_character;
 6487|      0|        case 'p':
  ------------------
  |  Branch (6487:9): [True: 0, False: 2.42M]
  ------------------
 6488|      0|            return presentation_type::pointer;
 6489|      0|        case '[':
  ------------------
  |  Branch (6489:9): [True: 0, False: 2.42M]
  ------------------
 6490|      0|        case '/':
  ------------------
  |  Branch (6490:9): [True: 0, False: 2.42M]
  ------------------
 6491|       |            // Should be handled by parse_presentation_set and
 6492|       |            // parse_presentation_regex
 6493|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6495|      0|        default:
  ------------------
  |  Branch (6495:9): [True: 0, False: 2.42M]
  ------------------
 6496|      0|            return presentation_type::none;
 6497|  2.42M|    }
 6498|  2.42M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6527|   483k|{
 6528|   483k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   483k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   483k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|   483k|    auto check_align = [](wchar_t ch) {
 6531|   483k|        switch (ch) {
 6532|   483k|            case L'<':
 6533|   483k|                return align_type::left;
 6534|   483k|            case L'>':
 6535|   483k|                return align_type::right;
 6536|   483k|            case L'^':
 6537|   483k|                return align_type::center;
 6538|   483k|            default:
 6539|   483k|                return align_type::none;
 6540|   483k|        }
 6541|   483k|    };
 6542|       |
 6543|   483k|    auto potential_fill_len = code_point_length(begin, end);
 6544|   483k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   966k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 483k]
  |  |  |  Branch (859:45): [True: 0, False: 483k]
  |  |  |  Branch (859:45): [True: 0, False: 483k]
  |  |  ------------------
  ------------------
 6545|   483k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|   483k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|   483k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|   483k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|   483k|    const auto begin_before_fill = begin;
 6555|   483k|    begin += potential_fill_len;
 6556|       |
 6557|   483k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 483k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|   483k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|   483k|    const auto begin_after_fill = begin;
 6563|   483k|    ++begin;
 6564|       |
 6565|   483k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 483k, False: 0]
  ------------------
 6566|   483k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   483k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 483k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|   483k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 0, False: 483k]
  ------------------
 6571|      0|            return begin_before_fill;
 6572|      0|        }
 6573|   483k|    }
 6574|       |
 6575|   483k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 483k, False: 0]
  ------------------
 6576|   483k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 483k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|   483k|        return begin_before_fill;
 6581|   483k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|   483k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6509|   979k|{
 6510|   979k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   979k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   979k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6511|   979k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6511:19): [Folded - Ignored]
  ------------------
 6512|   979k|        return 1;
 6513|   979k|    }
 6514|   979k|    else {
 6515|   979k|        const auto lengths =
 6516|   979k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6517|   979k|            "\3\4";
 6518|   979k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6519|   979k|        return len;
 6520|   979k|    }
 6521|   979k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6530|   966k|    auto check_align = [](wchar_t ch) {
 6531|   966k|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 966k]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 966k]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 966k]
  ------------------
 6537|      0|                return align_type::center;
 6538|   966k|            default:
  ------------------
  |  Branch (6538:13): [True: 966k, False: 0]
  ------------------
 6539|   966k|                return align_type::none;
 6540|   966k|        }
 6541|   966k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6592|   483k|{
 6593|   483k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   483k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   483k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|   483k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 483k, False: 0]
  |  Branch (6595:33): [True: 0, False: 483k]
  ------------------
 6596|      0|        int width = parse_simple_int(begin, end);
 6597|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6598|      0|            handler.on_width(width);
 6599|      0|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|      0|    }
 6605|   483k|    return begin;
 6606|   483k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7122|   483k|    {
 7123|   483k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|   483k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 483k, False: 0]
  ------------------
 7125|   483k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 483k, False: 0]
  ------------------
 7126|   483k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 0, False: 483k]
  ------------------
 7127|   483k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 0, False: 0]
  ------------------
 7128|      0|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|      0|        }
 7133|       |
 7134|   483k|        Handler::on_localized();
 7135|   483k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  1.67M|{
 8413|  1.67M|#define SCN_VISIT(Type)                                         \
 8414|  1.67M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  1.67M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  1.67M|    }                                                           \
 8417|  1.67M|    else {                                                      \
 8418|  1.67M|        return vis(monostate_val);                              \
 8419|  1.67M|    }
 8420|       |
 8421|  1.67M|    monostate monostate_val{};
 8422|       |
 8423|  1.67M|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 1.67M]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 1.67M]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 1.67M]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.67M]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 1.67M]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.67M]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.67M]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.67M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.67M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.67M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.67M]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.67M]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.67M]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.67M]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.67M]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|   531k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 531k, False: 1.14M]
  ------------------
 8455|   531k|            SCN_VISIT(float);
  ------------------
  |  | 8414|   531k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   531k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   531k|    }                                                           \
  |  | 8417|   531k|    else {                                                      \
  |  | 8418|   531k|        return vis(monostate_val);                              \
  |  | 8419|   531k|    }
  ------------------
 8456|   569k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 569k, False: 1.10M]
  ------------------
 8457|   569k|            SCN_VISIT(double);
  ------------------
  |  | 8414|   569k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   569k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   569k|    }                                                           \
  |  | 8417|   569k|    else {                                                      \
  |  | 8418|   569k|        return vis(monostate_val);                              \
  |  | 8419|   569k|    }
  ------------------
 8458|   576k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 576k, False: 1.10M]
  ------------------
 8459|   576k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|   576k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   576k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   576k|    }                                                           \
  |  | 8417|   576k|    else {                                                      \
  |  | 8418|   576k|        return vis(monostate_val);                              \
  |  | 8419|   576k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.67M]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.67M]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.67M]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.67M]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.67M]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.67M]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 1.67M]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 1.67M]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 1.67M]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  1.67M|            SCN_CLANG_POP
 8491|  1.67M|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|  1.72M|{
 7040|  1.72M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|  1.72M|    handler.check_args_exhausted();
 7042|  1.72M|    return handler.get_error();
 7043|  1.72M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|  1.72M|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|  1.72M|    auto begin = format.data();
 7009|  1.72M|    auto it = begin;
 7010|  1.72M|    const auto end = format.data() + format.size();
 7011|       |
 7012|  3.35M|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 1.72M, False: 1.63M]
  ------------------
 7013|  1.72M|        const auto ch = *it++;
 7014|  1.72M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 1.72M, False: 0]
  ------------------
 7015|  1.72M|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|  1.72M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|  1.72M|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 91.8k, False: 1.63M]
  ------------------
 7019|  91.8k|                return;
 7020|  91.8k|            }
 7021|  1.72M|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|  1.72M|    }
 7032|       |
 7033|  1.63M|    handler.on_literal_text(begin, end);
 7034|  1.63M|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8170|  1.63M|    {
 8171|  1.63M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.63M|    static_cast<    \
  |  |  929|  1.63M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8172|  1.63M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6937|  1.72M|{
 6938|  1.72M|    struct id_adapter {
 6939|  1.72M|        constexpr void operator()()
 6940|  1.72M|        {
 6941|  1.72M|            arg_id = handler.on_arg_id();
 6942|  1.72M|        }
 6943|  1.72M|        constexpr void operator()(std::size_t id)
 6944|  1.72M|        {
 6945|  1.72M|            arg_id = handler.on_arg_id(id);
 6946|  1.72M|        }
 6947|       |
 6948|  1.72M|        constexpr void on_error(const char* msg)
 6949|  1.72M|        {
 6950|  1.72M|            SCN_UNLIKELY_ATTR
 6951|  1.72M|            handler.on_error(msg);
 6952|  1.72M|        }
 6953|       |
 6954|  1.72M|        Handler& handler;
 6955|  1.72M|        std::size_t arg_id;
 6956|  1.72M|    };
 6957|       |
 6958|  1.72M|    ++begin;
 6959|  1.72M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.72M]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|  1.72M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 1.72M]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|  1.72M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 1.72M]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|  1.72M|    else {
 6971|  1.72M|        auto adapter = id_adapter{handler, 0};
 6972|  1.72M|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|  1.72M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.72M]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|  1.72M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 1.72M]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|  1.72M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 1.72M, False: 0]
  ------------------
 6983|  1.72M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.72M]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|  1.72M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|  1.72M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.72M]
  |  |  |  Branch (859:45): [True: 0, False: 1.72M]
  |  |  |  Branch (859:45): [True: 0, False: 1.72M]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unknown format specifier");
 6990|      0|                return begin;
 6991|      0|            }
 6992|  1.72M|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|  1.72M|    }
 6999|  1.72M|    return begin + 1;
 7000|  1.72M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|  1.72M|{
 6439|  1.72M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|  1.72M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 1.72M, False: 0]
  |  Branch (6440:26): [True: 0, False: 1.72M]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|  1.72M|    handler();
 6445|  1.72M|    return begin;
 6446|  1.72M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|  1.72M|        {
 6941|  1.72M|            arg_id = handler.on_arg_id();
 6942|  1.72M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7117|  1.72M|    {
 7118|  1.72M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  1.72M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6853|  1.72M|{
 6854|  1.72M|    auto do_presentation = [&]() -> const CharT* {
 6855|  1.72M|        if (*begin == CharT{'['}) {
 6856|  1.72M|            auto set = parse_presentation_set(begin, end, handler);
 6857|  1.72M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|  1.72M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|  1.72M|                return begin;
 6862|  1.72M|            }
 6863|  1.72M|            handler.on_character_set_string(set);
 6864|  1.72M|            return begin;
 6865|  1.72M|        }
 6866|  1.72M|        if (*begin == CharT{'/'}) {
 6867|  1.72M|            return parse_presentation_regex(begin, end, handler);
 6868|  1.72M|        }
 6869|  1.72M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  1.72M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|  1.72M|            handler.on_error("Invalid type specifier in format string");
 6872|  1.72M|            return begin;
 6873|  1.72M|        }
 6874|  1.72M|        handler.on_type(type);
 6875|  1.72M|        return begin;
 6876|  1.72M|    };
 6877|       |
 6878|  1.72M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 1.72M, False: 0]
  |  Branch (6878:28): [True: 1.72M, False: 0]
  ------------------
 6879|  1.72M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 1.72M, False: 0]
  |  Branch (6879:36): [True: 1.22M, False: 496k]
  ------------------
 6880|  1.22M|        return do_presentation();
 6881|  1.22M|    }
 6882|       |
 6883|   496k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   496k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 496k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|   496k|    begin = parse_align(begin, end, handler);
 6889|   496k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   496k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 496k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|   496k|    begin = parse_width(begin, end, handler);
 6895|   496k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   496k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 496k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|   496k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 496k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|   496k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 496k, False: 0]
  ------------------
 6914|   496k|        handler.on_localized();
 6915|   496k|        ++begin;
 6916|   496k|    }
 6917|   496k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   496k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 496k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|   496k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 496k, False: 0]
  |  Branch (6922:25): [True: 0, False: 496k]
  ------------------
 6923|      0|        do_presentation();
 6924|      0|    }
 6925|   496k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   496k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 496k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|   496k|    return begin;
 6931|   496k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6854|  1.22M|    auto do_presentation = [&]() -> const CharT* {
 6855|  1.22M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 0, False: 1.22M]
  ------------------
 6856|      0|            auto set = parse_presentation_set(begin, end, handler);
 6857|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|      0|            handler.on_character_set_string(set);
 6864|      0|            return begin;
 6865|      0|        }
 6866|  1.22M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 1.22M]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|  1.22M|        presentation_type type = parse_presentation_type(*begin++);
 6870|  1.22M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.22M]
  |  |  ------------------
  ------------------
 6871|      0|            handler.on_error("Invalid type specifier in format string");
 6872|      0|            return begin;
 6873|      0|        }
 6874|  1.22M|        handler.on_type(type);
 6875|  1.22M|        return begin;
 6876|  1.22M|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6527|   496k|{
 6528|   496k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   496k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   496k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|   496k|    auto check_align = [](wchar_t ch) {
 6531|   496k|        switch (ch) {
 6532|   496k|            case L'<':
 6533|   496k|                return align_type::left;
 6534|   496k|            case L'>':
 6535|   496k|                return align_type::right;
 6536|   496k|            case L'^':
 6537|   496k|                return align_type::center;
 6538|   496k|            default:
 6539|   496k|                return align_type::none;
 6540|   496k|        }
 6541|   496k|    };
 6542|       |
 6543|   496k|    auto potential_fill_len = code_point_length(begin, end);
 6544|   496k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   993k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 496k]
  |  |  |  Branch (859:45): [True: 0, False: 496k]
  |  |  |  Branch (859:45): [True: 0, False: 496k]
  |  |  ------------------
  ------------------
 6545|   496k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|   496k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|   496k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|   496k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|   496k|    const auto begin_before_fill = begin;
 6555|   496k|    begin += potential_fill_len;
 6556|       |
 6557|   496k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 496k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|   496k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|   496k|    const auto begin_after_fill = begin;
 6563|   496k|    ++begin;
 6564|       |
 6565|   496k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 496k, False: 0]
  ------------------
 6566|   496k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   496k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 496k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|   496k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 0, False: 496k]
  ------------------
 6571|      0|            return begin_before_fill;
 6572|      0|        }
 6573|   496k|    }
 6574|       |
 6575|   496k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 496k, False: 0]
  ------------------
 6576|   496k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 496k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|   496k|        return begin_before_fill;
 6581|   496k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|   496k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6530|   993k|    auto check_align = [](wchar_t ch) {
 6531|   993k|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 993k]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 993k]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 993k]
  ------------------
 6537|      0|                return align_type::center;
 6538|   993k|            default:
  ------------------
  |  Branch (6538:13): [True: 993k, False: 0]
  ------------------
 6539|   993k|                return align_type::none;
 6540|   993k|        }
 6541|   993k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6592|   496k|{
 6593|   496k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   496k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   496k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|   496k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 496k, False: 0]
  |  Branch (6595:33): [True: 0, False: 496k]
  ------------------
 6596|      0|        int width = parse_simple_int(begin, end);
 6597|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6598|      0|            handler.on_width(width);
 6599|      0|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|      0|    }
 6605|   496k|    return begin;
 6606|   496k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7122|   496k|    {
 7123|   496k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|   496k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 496k, False: 0]
  ------------------
 7125|   496k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 496k, False: 0]
  ------------------
 7126|   496k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 0, False: 496k]
  ------------------
 7127|   496k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 0, False: 0]
  ------------------
 7128|      0|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|      0|        }
 7133|       |
 7134|   496k|        Handler::on_localized();
 7135|   496k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  1.72M|{
 8413|  1.72M|#define SCN_VISIT(Type)                                         \
 8414|  1.72M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  1.72M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  1.72M|    }                                                           \
 8417|  1.72M|    else {                                                      \
 8418|  1.72M|        return vis(monostate_val);                              \
 8419|  1.72M|    }
 8420|       |
 8421|  1.72M|    monostate monostate_val{};
 8422|       |
 8423|  1.72M|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 1.72M]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 1.72M]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 1.72M]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.72M]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 1.72M]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.72M]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.72M]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.72M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.72M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.72M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.72M]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.72M]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.72M]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.72M]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.72M]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|   546k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 546k, False: 1.17M]
  ------------------
 8455|   546k|            SCN_VISIT(float);
  ------------------
  |  | 8414|   546k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   546k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   546k|    }                                                           \
  |  | 8417|   546k|    else {                                                      \
  |  | 8418|   546k|        return vis(monostate_val);                              \
  |  | 8419|   546k|    }
  ------------------
 8456|   585k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 585k, False: 1.13M]
  ------------------
 8457|   585k|            SCN_VISIT(double);
  ------------------
  |  | 8414|   585k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   585k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   585k|    }                                                           \
  |  | 8417|   585k|    else {                                                      \
  |  | 8418|   585k|        return vis(monostate_val);                              \
  |  | 8419|   585k|    }
  ------------------
 8458|   591k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 591k, False: 1.13M]
  ------------------
 8459|   591k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|   591k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|   591k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|   591k|    }                                                           \
  |  | 8417|   591k|    else {                                                      \
  |  | 8418|   591k|        return vis(monostate_val);                              \
  |  | 8419|   591k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.72M]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.72M]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.72M]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.72M]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.72M]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.72M]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 1.72M]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 1.72M]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 1.72M]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  1.72M|            SCN_CLANG_POP
 8491|  1.72M|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4071|   119k|    {
 4072|   119k|        sync(0);
 4073|   119k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5461|   537k|    {
 5462|   537k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   537k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 537k]
  |  |  ------------------
  ------------------
 5463|      0|            return max_size();
 5464|      0|        }
 5465|       |
 5466|   537k|        return static_cast<std::size_t>(m_desc &
 5467|   537k|                                        ((1 << detail::packed_arg_bits) - 1));
 5468|   537k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5486|  1.07M|    {
 5487|  1.07M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5488|  1.07M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5429|   537k|    {
 5430|   537k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   537k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 537k]
  |  |  ------------------
  ------------------
 5431|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5432|      0|                return m_args[id];
 5433|      0|            }
 5434|      0|            return {};
 5435|      0|        }
 5436|       |
 5437|   537k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   537k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 537k]
  |  |  ------------------
  ------------------
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   537k|        const auto t = type(id);
 5442|   537k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   537k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 537k]
  |  |  ------------------
  ------------------
 5443|      0|            return {};
 5444|      0|        }
 5445|       |
 5446|   537k|        basic_scan_arg<Context> arg;
 5447|   537k|        arg.m_type = t;
 5448|   537k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5448:13): [True: 537k, False: 0]
  ------------------
 5449|   537k|            arg.m_value.ref_value = m_builtin_values[id];
 5450|   537k|        }
 5451|      0|        else {
 5452|      0|            arg.m_value = m_values[id];
 5453|      0|        }
 5454|   537k|        return arg;
 5455|   537k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5495|   537k|    {
 5496|       |        // First (0th) index is size, types start after that
 5497|   537k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5498|   537k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5499|   537k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5500|   537k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5490|   537k|    {
 5491|   537k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5492|   537k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5242|  1.02M|    {
 5243|  1.02M|        return m_type != detail::arg_type::none_type;
 5244|  1.02M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  69.4k|{
 8413|  69.4k|#define SCN_VISIT(Type)                                         \
 8414|  69.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  69.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  69.4k|    }                                                           \
 8417|  69.4k|    else {                                                      \
 8418|  69.4k|        return vis(monostate_val);                              \
 8419|  69.4k|    }
 8420|       |
 8421|  69.4k|    monostate monostate_val{};
 8422|       |
 8423|  69.4k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 69.4k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 69.4k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 69.4k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 69.4k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 69.4k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 69.4k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 69.4k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 69.4k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 69.4k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 69.4k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 69.4k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 69.4k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 69.4k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 69.4k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 69.4k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|  23.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 23.1k, False: 46.3k]
  ------------------
 8455|  23.1k|            SCN_VISIT(float);
  ------------------
  |  | 8414|  23.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  23.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  23.1k|    }                                                           \
  |  | 8417|  23.1k|    else {                                                      \
  |  | 8418|  23.1k|        return vis(monostate_val);                              \
  |  | 8419|  23.1k|    }
  ------------------
 8456|  23.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 23.1k, False: 46.3k]
  ------------------
 8457|  23.1k|            SCN_VISIT(double);
  ------------------
  |  | 8414|  23.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  23.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  23.1k|    }                                                           \
  |  | 8417|  23.1k|    else {                                                      \
  |  | 8418|  23.1k|        return vis(monostate_val);                              \
  |  | 8419|  23.1k|    }
  ------------------
 8458|  23.2k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 23.2k, False: 46.2k]
  ------------------
 8459|  23.2k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|  23.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  23.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  23.2k|    }                                                           \
  |  | 8417|  23.2k|    else {                                                      \
  |  | 8418|  23.2k|        return vis(monostate_val);                              \
  |  | 8419|  23.2k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 69.4k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 69.4k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 69.4k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 69.4k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 69.4k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 69.4k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 69.4k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 69.4k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 69.4k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  69.4k|            SCN_CLANG_POP
 8491|  69.4k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5540|   445k|    {
 5541|   445k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8133|   222k|    {
 8134|   222k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8051|   445k|    {
 8052|   445k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|   222k|{
 7040|   222k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|   222k|    handler.check_args_exhausted();
 7042|   222k|    return handler.get_error();
 7043|   222k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|   222k|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|   222k|    auto begin = format.data();
 7009|   222k|    auto it = begin;
 7010|   222k|    const auto end = format.data() + format.size();
 7011|       |
 7012|   261k|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 222k, False: 38.8k]
  ------------------
 7013|   222k|        const auto ch = *it++;
 7014|   222k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 222k, False: 0]
  ------------------
 7015|   222k|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|   222k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|   222k|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 183k, False: 38.8k]
  ------------------
 7019|   183k|                return;
 7020|   183k|            }
 7021|   222k|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|   222k|    }
 7032|       |
 7033|  38.8k|    handler.on_literal_text(begin, end);
 7034|  38.8k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6937|   222k|{
 6938|   222k|    struct id_adapter {
 6939|   222k|        constexpr void operator()()
 6940|   222k|        {
 6941|   222k|            arg_id = handler.on_arg_id();
 6942|   222k|        }
 6943|   222k|        constexpr void operator()(std::size_t id)
 6944|   222k|        {
 6945|   222k|            arg_id = handler.on_arg_id(id);
 6946|   222k|        }
 6947|       |
 6948|   222k|        constexpr void on_error(const char* msg)
 6949|   222k|        {
 6950|   222k|            SCN_UNLIKELY_ATTR
 6951|   222k|            handler.on_error(msg);
 6952|   222k|        }
 6953|       |
 6954|   222k|        Handler& handler;
 6955|   222k|        std::size_t arg_id;
 6956|   222k|    };
 6957|       |
 6958|   222k|    ++begin;
 6959|   222k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 222k]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|   222k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 222k]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|   222k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 222k]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|   222k|    else {
 6971|   222k|        auto adapter = id_adapter{handler, 0};
 6972|   222k|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|   222k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 222k]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|   222k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 222k]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|   222k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 222k, False: 0]
  ------------------
 6983|   222k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 222k]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|   222k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|   222k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 222k]
  |  |  |  Branch (859:45): [True: 0, False: 222k]
  |  |  |  Branch (859:45): [True: 0, False: 222k]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unknown format specifier");
 6990|      0|                return begin;
 6991|      0|            }
 6992|   222k|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|   222k|    }
 6999|   222k|    return begin + 1;
 7000|   222k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8034|   445k|    {
 8035|   445k|        return m_args.get(id);
 8036|   445k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8044|   445k|    {
 8045|   445k|        return m_locale;
 8046|   445k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5561|   445k|    {
 5562|   445k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 445k]
  |  |  ------------------
  ------------------
 5563|      0|            on_error(
 5564|      0|                "Cannot switch from manual to automatic argument indexing");
 5565|      0|            return 0;
 5566|      0|        }
 5567|       |
 5568|   445k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5569|   445k|        do_check_arg_id(id);
 5570|   445k|        return id;
 5571|   445k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6049|   445k|{
 6050|   445k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6050:9): [Folded - Ignored]
  ------------------
 6051|   445k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6051:10): [Folded - Ignored]
  |  Branch (6051:22): [Folded - Ignored]
  ------------------
 6052|       |        // The cast below will cause an error on gcc pre-12
 6053|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6054|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6054:13): [True: 0, False: 0]
  ------------------
 6055|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6056|      0|            SCN_UNLIKELY_ATTR
 6057|      0|            on_error("Argument not found");
 6058|      0|        }
 6059|      0|    }
 6060|   445k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|   222k|{
 6439|   222k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   222k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   222k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|   222k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 222k, False: 0]
  |  Branch (6440:26): [True: 0, False: 222k]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|   222k|    handler();
 6445|   222k|    return begin;
 6446|   222k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|   222k|        {
 6941|   222k|            arg_id = handler.on_arg_id();
 6942|   222k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5247|   890k|    {
 5248|   890k|        return m_type;
 5249|   890k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5556|   445k|    {
 5557|   445k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5558|   445k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4339|   291k|{
 4340|   291k|    if (is_contiguous()) {
  ------------------
  |  Branch (4340:9): [True: 0, False: 291k]
  ------------------
 4341|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4342|      0|                                ranges::default_sentinel};
 4343|      0|    }
 4344|   291k|    return ranges::subrange{forward_iterator{this, 0},
 4345|   291k|                            ranges::default_sentinel};
 4346|   291k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4172|   291k|    {
 4173|   291k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   291k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   291k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4174|   291k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   291k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   291k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4175|   291k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5545|   890k|    {
 5546|   890k|        return m_format.data();
 5547|   890k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7117|   222k|    {
 7118|   222k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   222k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   222k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|   222k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6853|   222k|{
 6854|   222k|    auto do_presentation = [&]() -> const CharT* {
 6855|   222k|        if (*begin == CharT{'['}) {
 6856|   222k|            auto set = parse_presentation_set(begin, end, handler);
 6857|   222k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|   222k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|   222k|                return begin;
 6862|   222k|            }
 6863|   222k|            handler.on_character_set_string(set);
 6864|   222k|            return begin;
 6865|   222k|        }
 6866|   222k|        if (*begin == CharT{'/'}) {
 6867|   222k|            return parse_presentation_regex(begin, end, handler);
 6868|   222k|        }
 6869|   222k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   222k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|   222k|            handler.on_error("Invalid type specifier in format string");
 6872|   222k|            return begin;
 6873|   222k|        }
 6874|   222k|        handler.on_type(type);
 6875|   222k|        return begin;
 6876|   222k|    };
 6877|       |
 6878|   222k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 222k, False: 0]
  |  Branch (6878:28): [True: 222k, False: 0]
  ------------------
 6879|   222k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 222k, False: 0]
  |  Branch (6879:36): [True: 176k, False: 46.3k]
  ------------------
 6880|   176k|        return do_presentation();
 6881|   176k|    }
 6882|       |
 6883|  46.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  46.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 46.3k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|  46.3k|    begin = parse_align(begin, end, handler);
 6889|  46.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  46.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 46.3k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|  46.3k|    begin = parse_width(begin, end, handler);
 6895|  46.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  46.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 46.3k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|  46.3k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 46.3k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|  46.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 46.3k, False: 0]
  ------------------
 6914|  46.3k|        handler.on_localized();
 6915|  46.3k|        ++begin;
 6916|  46.3k|    }
 6917|  46.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  46.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 46.3k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|  46.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 46.3k, False: 0]
  |  Branch (6922:25): [True: 0, False: 46.3k]
  ------------------
 6923|      0|        do_presentation();
 6924|      0|    }
 6925|  46.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  46.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 46.3k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|  46.3k|    return begin;
 6931|  46.3k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6502|   445k|{
 6503|   445k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6503:13): [True: 352k, False: 92.6k]
  |  Branch (6503:33): [True: 352k, False: 0]
  ------------------
 6504|   445k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6504:13): [True: 92.6k, False: 0]
  |  Branch (6504:33): [True: 92.6k, False: 0]
  ------------------
 6505|   445k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6854|   176k|    auto do_presentation = [&]() -> const CharT* {
 6855|   176k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 0, False: 176k]
  ------------------
 6856|      0|            auto set = parse_presentation_set(begin, end, handler);
 6857|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|      0|            handler.on_character_set_string(set);
 6864|      0|            return begin;
 6865|      0|        }
 6866|   176k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 176k]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|   176k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   176k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 176k]
  |  |  ------------------
  ------------------
 6871|      0|            handler.on_error("Invalid type specifier in format string");
 6872|      0|            return begin;
 6873|      0|        }
 6874|   176k|        handler.on_type(type);
 6875|   176k|        return begin;
 6876|   176k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6450|   352k|{
 6451|   352k|    switch (type) {
 6452|      0|        case 'b':
  ------------------
  |  Branch (6452:9): [True: 0, False: 352k]
  ------------------
 6453|      0|        case 'B':
  ------------------
  |  Branch (6453:9): [True: 0, False: 352k]
  ------------------
 6454|      0|            return presentation_type::int_binary;
 6455|      0|        case 'd':
  ------------------
  |  Branch (6455:9): [True: 0, False: 352k]
  ------------------
 6456|      0|            return presentation_type::int_decimal;
 6457|      0|        case 'i':
  ------------------
  |  Branch (6457:9): [True: 0, False: 352k]
  ------------------
 6458|      0|            return presentation_type::int_generic;
 6459|      0|        case 'u':
  ------------------
  |  Branch (6459:9): [True: 0, False: 352k]
  ------------------
 6460|      0|            return presentation_type::int_unsigned_decimal;
 6461|      0|        case 'o':
  ------------------
  |  Branch (6461:9): [True: 0, False: 352k]
  ------------------
 6462|      0|            return presentation_type::int_octal;
 6463|      0|        case 'x':
  ------------------
  |  Branch (6463:9): [True: 0, False: 352k]
  ------------------
 6464|      0|        case 'X':
  ------------------
  |  Branch (6464:9): [True: 0, False: 352k]
  ------------------
 6465|      0|            return presentation_type::int_hex;
 6466|      0|        case 'r':
  ------------------
  |  Branch (6466:9): [True: 0, False: 352k]
  ------------------
 6467|      0|        case 'R':
  ------------------
  |  Branch (6467:9): [True: 0, False: 352k]
  ------------------
 6468|      0|            return presentation_type::int_arbitrary_base;
 6469|  93.2k|        case 'a':
  ------------------
  |  Branch (6469:9): [True: 93.2k, False: 259k]
  ------------------
 6470|  93.2k|        case 'A':
  ------------------
  |  Branch (6470:9): [True: 0, False: 352k]
  ------------------
 6471|  93.2k|            return presentation_type::float_hex;
 6472|  73.8k|        case 'e':
  ------------------
  |  Branch (6472:9): [True: 73.8k, False: 278k]
  ------------------
 6473|  73.8k|        case 'E':
  ------------------
  |  Branch (6473:9): [True: 0, False: 352k]
  ------------------
 6474|  73.8k|            return presentation_type::float_scientific;
 6475|  92.7k|        case 'f':
  ------------------
  |  Branch (6475:9): [True: 92.7k, False: 259k]
  ------------------
 6476|  92.7k|        case 'F':
  ------------------
  |  Branch (6476:9): [True: 0, False: 352k]
  ------------------
 6477|  92.7k|            return presentation_type::float_fixed;
 6478|  92.6k|        case 'g':
  ------------------
  |  Branch (6478:9): [True: 92.6k, False: 259k]
  ------------------
 6479|  92.6k|        case 'G':
  ------------------
  |  Branch (6479:9): [True: 0, False: 352k]
  ------------------
 6480|  92.6k|            return presentation_type::float_general;
 6481|      0|        case 's':
  ------------------
  |  Branch (6481:9): [True: 0, False: 352k]
  ------------------
 6482|      0|            return presentation_type::string;
 6483|      0|        case 'c':
  ------------------
  |  Branch (6483:9): [True: 0, False: 352k]
  ------------------
 6484|      0|            return presentation_type::character;
 6485|      0|        case '?':
  ------------------
  |  Branch (6485:9): [True: 0, False: 352k]
  ------------------
 6486|      0|            return presentation_type::escaped_character;
 6487|      0|        case 'p':
  ------------------
  |  Branch (6487:9): [True: 0, False: 352k]
  ------------------
 6488|      0|            return presentation_type::pointer;
 6489|      0|        case '[':
  ------------------
  |  Branch (6489:9): [True: 0, False: 352k]
  ------------------
 6490|      0|        case '/':
  ------------------
  |  Branch (6490:9): [True: 0, False: 352k]
  ------------------
 6491|       |            // Should be handled by parse_presentation_set and
 6492|       |            // parse_presentation_regex
 6493|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6495|      0|        default:
  ------------------
  |  Branch (6495:9): [True: 0, False: 352k]
  ------------------
 6496|      0|            return presentation_type::none;
 6497|   352k|    }
 6498|   352k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6527|  46.3k|{
 6528|  46.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  46.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|  46.3k|    auto check_align = [](wchar_t ch) {
 6531|  46.3k|        switch (ch) {
 6532|  46.3k|            case L'<':
 6533|  46.3k|                return align_type::left;
 6534|  46.3k|            case L'>':
 6535|  46.3k|                return align_type::right;
 6536|  46.3k|            case L'^':
 6537|  46.3k|                return align_type::center;
 6538|  46.3k|            default:
 6539|  46.3k|                return align_type::none;
 6540|  46.3k|        }
 6541|  46.3k|    };
 6542|       |
 6543|  46.3k|    auto potential_fill_len = code_point_length(begin, end);
 6544|  46.3k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  92.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 46.3k]
  |  |  |  Branch (859:45): [True: 0, False: 46.3k]
  |  |  |  Branch (859:45): [True: 0, False: 46.3k]
  |  |  ------------------
  ------------------
 6545|  46.3k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|  46.3k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|  46.3k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|  46.3k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|  46.3k|    const auto begin_before_fill = begin;
 6555|  46.3k|    begin += potential_fill_len;
 6556|       |
 6557|  46.3k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 46.3k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|  46.3k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|  46.3k|    const auto begin_after_fill = begin;
 6563|  46.3k|    ++begin;
 6564|       |
 6565|  46.3k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 46.3k, False: 0]
  ------------------
 6566|  46.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  46.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 46.3k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|  46.3k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 0, False: 46.3k]
  ------------------
 6571|      0|            return begin_before_fill;
 6572|      0|        }
 6573|  46.3k|    }
 6574|       |
 6575|  46.3k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 46.3k, False: 0]
  ------------------
 6576|  46.3k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 46.3k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|  46.3k|        return begin_before_fill;
 6581|  46.3k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|  46.3k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6509|  92.6k|{
 6510|  92.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  92.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  92.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6511|  92.6k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6511:19): [Folded - Ignored]
  ------------------
 6512|  92.6k|        return 1;
 6513|  92.6k|    }
 6514|  92.6k|    else {
 6515|  92.6k|        const auto lengths =
 6516|  92.6k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6517|  92.6k|            "\3\4";
 6518|  92.6k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6519|  92.6k|        return len;
 6520|  92.6k|    }
 6521|  92.6k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6530|  92.6k|    auto check_align = [](wchar_t ch) {
 6531|  92.6k|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 92.6k]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 92.6k]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 92.6k]
  ------------------
 6537|      0|                return align_type::center;
 6538|  92.6k|            default:
  ------------------
  |  Branch (6538:13): [True: 92.6k, False: 0]
  ------------------
 6539|  92.6k|                return align_type::none;
 6540|  92.6k|        }
 6541|  92.6k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6592|  46.3k|{
 6593|  46.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  46.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|  46.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 46.3k, False: 0]
  |  Branch (6595:33): [True: 0, False: 46.3k]
  ------------------
 6596|      0|        int width = parse_simple_int(begin, end);
 6597|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6598|      0|            handler.on_width(width);
 6599|      0|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|      0|    }
 6605|  46.3k|    return begin;
 6606|  46.3k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7122|  46.3k|    {
 7123|  46.3k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|  46.3k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 46.3k, False: 0]
  ------------------
 7125|  46.3k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 46.3k, False: 0]
  ------------------
 7126|  46.3k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 0, False: 46.3k]
  ------------------
 7127|  46.3k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 0, False: 0]
  ------------------
 7128|      0|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|      0|        }
 7133|       |
 7134|  46.3k|        Handler::on_localized();
 7135|  46.3k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   222k|{
 8413|   222k|#define SCN_VISIT(Type)                                         \
 8414|   222k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   222k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   222k|    }                                                           \
 8417|   222k|    else {                                                      \
 8418|   222k|        return vis(monostate_val);                              \
 8419|   222k|    }
 8420|       |
 8421|   222k|    monostate monostate_val{};
 8422|       |
 8423|   222k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 222k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 222k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 222k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 222k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 222k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 222k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 222k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 222k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 222k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 222k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 222k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 222k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 222k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 222k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 222k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|  74.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 74.1k, False: 148k]
  ------------------
 8455|  74.1k|            SCN_VISIT(float);
  ------------------
  |  | 8414|  74.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  74.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  74.1k|    }                                                           \
  |  | 8417|  74.1k|    else {                                                      \
  |  | 8418|  74.1k|        return vis(monostate_val);                              \
  |  | 8419|  74.1k|    }
  ------------------
 8456|  74.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 74.1k, False: 148k]
  ------------------
 8457|  74.1k|            SCN_VISIT(double);
  ------------------
  |  | 8414|  74.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  74.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  74.1k|    }                                                           \
  |  | 8417|  74.1k|    else {                                                      \
  |  | 8418|  74.1k|        return vis(monostate_val);                              \
  |  | 8419|  74.1k|    }
  ------------------
 8458|  74.3k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 74.3k, False: 148k]
  ------------------
 8459|  74.3k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|  74.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  74.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  74.3k|    }                                                           \
  |  | 8417|  74.3k|    else {                                                      \
  |  | 8418|  74.3k|        return vis(monostate_val);                              \
  |  | 8419|  74.3k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 222k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 222k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 222k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 222k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 222k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 222k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 222k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 222k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 222k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   222k|            SCN_CLANG_POP
 8491|   222k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|  69.4k|{
 8413|  69.4k|#define SCN_VISIT(Type)                                         \
 8414|  69.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|  69.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|  69.4k|    }                                                           \
 8417|  69.4k|    else {                                                      \
 8418|  69.4k|        return vis(monostate_val);                              \
 8419|  69.4k|    }
 8420|       |
 8421|  69.4k|    monostate monostate_val{};
 8422|       |
 8423|  69.4k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 69.4k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 69.4k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 69.4k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 69.4k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 69.4k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 69.4k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 69.4k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 69.4k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 69.4k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 69.4k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 69.4k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 69.4k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 69.4k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 69.4k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 69.4k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|  23.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 23.0k, False: 46.3k]
  ------------------
 8455|  23.0k|            SCN_VISIT(float);
  ------------------
  |  | 8414|  23.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  23.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  23.0k|    }                                                           \
  |  | 8417|  23.0k|    else {                                                      \
  |  | 8418|  23.0k|        return vis(monostate_val);                              \
  |  | 8419|  23.0k|    }
  ------------------
 8456|  23.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 23.1k, False: 46.2k]
  ------------------
 8457|  23.1k|            SCN_VISIT(double);
  ------------------
  |  | 8414|  23.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  23.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  23.1k|    }                                                           \
  |  | 8417|  23.1k|    else {                                                      \
  |  | 8418|  23.1k|        return vis(monostate_val);                              \
  |  | 8419|  23.1k|    }
  ------------------
 8458|  23.2k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 23.2k, False: 46.2k]
  ------------------
 8459|  23.2k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|  23.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  23.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  23.2k|    }                                                           \
  |  | 8417|  23.2k|    else {                                                      \
  |  | 8418|  23.2k|        return vis(monostate_val);                              \
  |  | 8419|  23.2k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 69.4k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 69.4k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 69.4k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 69.4k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 69.4k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 69.4k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 69.4k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 69.4k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 69.4k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|  69.4k|            SCN_CLANG_POP
 8491|  69.4k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7039|   222k|{
 7040|   222k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7041|   222k|    handler.check_args_exhausted();
 7042|   222k|    return handler.get_error();
 7043|   222k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7005|   222k|{
 7006|       |    // TODO: memchr fast path with a larger (> 32) format string
 7007|       |
 7008|   222k|    auto begin = format.data();
 7009|   222k|    auto it = begin;
 7010|   222k|    const auto end = format.data() + format.size();
 7011|       |
 7012|   261k|    while (it != end) {
  ------------------
  |  Branch (7012:12): [True: 222k, False: 38.7k]
  ------------------
 7013|   222k|        const auto ch = *it++;
 7014|   222k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7014:13): [True: 222k, False: 0]
  ------------------
 7015|   222k|            handler.on_literal_text(begin, it - 1);
 7016|       |
 7017|   222k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7018|   222k|            if (!handler) {
  ------------------
  |  Branch (7018:17): [True: 183k, False: 38.7k]
  ------------------
 7019|   183k|                return;
 7020|   183k|            }
 7021|   222k|        }
 7022|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7022:18): [True: 0, False: 0]
  ------------------
 7023|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7024|      0|                handler.on_error("Unmatched '}' in format string");
 7025|      0|                return;
 7026|      0|            }
 7027|       |
 7028|      0|            handler.on_literal_text(begin, it);
 7029|      0|            begin = ++it;
 7030|      0|        }
 7031|   222k|    }
 7032|       |
 7033|  38.7k|    handler.on_literal_text(begin, end);
 7034|  38.7k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8170|  38.7k|    {
 8171|  38.7k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  38.7k|    static_cast<    \
  |  |  929|  38.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8172|  38.7k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6937|   222k|{
 6938|   222k|    struct id_adapter {
 6939|   222k|        constexpr void operator()()
 6940|   222k|        {
 6941|   222k|            arg_id = handler.on_arg_id();
 6942|   222k|        }
 6943|   222k|        constexpr void operator()(std::size_t id)
 6944|   222k|        {
 6945|   222k|            arg_id = handler.on_arg_id(id);
 6946|   222k|        }
 6947|       |
 6948|   222k|        constexpr void on_error(const char* msg)
 6949|   222k|        {
 6950|   222k|            SCN_UNLIKELY_ATTR
 6951|   222k|            handler.on_error(msg);
 6952|   222k|        }
 6953|       |
 6954|   222k|        Handler& handler;
 6955|   222k|        std::size_t arg_id;
 6956|   222k|    };
 6957|       |
 6958|   222k|    ++begin;
 6959|   222k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 222k]
  |  |  ------------------
  ------------------
 6960|      0|        handler.on_error("Unexpected end of replacement field");
 6961|      0|        return begin;
 6962|      0|    }
 6963|       |
 6964|   222k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6964:9): [True: 0, False: 222k]
  ------------------
 6965|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6966|      0|    }
 6967|   222k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6967:14): [True: 0, False: 222k]
  ------------------
 6968|      0|        handler.on_literal_text(begin, begin + 1);
 6969|      0|    }
 6970|   222k|    else {
 6971|   222k|        auto adapter = id_adapter{handler, 0};
 6972|   222k|        begin = parse_arg_id(begin, end, adapter);
 6973|       |
 6974|   222k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 222k]
  |  |  ------------------
  ------------------
 6975|      0|            handler.on_error("Missing '}' in format string");
 6976|      0|            return begin;
 6977|      0|        }
 6978|       |
 6979|   222k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:13): [True: 0, False: 222k]
  ------------------
 6980|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6981|      0|        }
 6982|   222k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6982:18): [True: 222k, False: 0]
  ------------------
 6983|   222k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 222k]
  |  |  ------------------
  ------------------
 6984|      0|                handler.on_error("Unexpected end of replacement field");
 6985|      0|                return begin;
 6986|      0|            }
 6987|   222k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6988|   222k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 222k]
  |  |  |  Branch (859:45): [True: 0, False: 222k]
  |  |  |  Branch (859:45): [True: 0, False: 222k]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unknown format specifier");
 6990|      0|                return begin;
 6991|      0|            }
 6992|   222k|        }
 6993|      0|        else {
 6994|      0|            SCN_UNLIKELY_ATTR
 6995|      0|            handler.on_error("Missing '}' in format string");
 6996|      0|            return begin;
 6997|      0|        }
 6998|   222k|    }
 6999|   222k|    return begin + 1;
 7000|   222k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6438|   222k|{
 6439|   222k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   222k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   222k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6440|   222k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6440:9): [True: 222k, False: 0]
  |  Branch (6440:26): [True: 0, False: 222k]
  ------------------
 6441|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6442|      0|    }
 6443|       |
 6444|   222k|    handler();
 6445|   222k|    return begin;
 6446|   222k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6940|   222k|        {
 6941|   222k|            arg_id = handler.on_arg_id();
 6942|   222k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7117|   222k|    {
 7118|   222k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   222k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   222k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|   222k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6853|   222k|{
 6854|   222k|    auto do_presentation = [&]() -> const CharT* {
 6855|   222k|        if (*begin == CharT{'['}) {
 6856|   222k|            auto set = parse_presentation_set(begin, end, handler);
 6857|   222k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6858|       |                // clang-format off
 6859|   222k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|   222k|                return begin;
 6862|   222k|            }
 6863|   222k|            handler.on_character_set_string(set);
 6864|   222k|            return begin;
 6865|   222k|        }
 6866|   222k|        if (*begin == CharT{'/'}) {
 6867|   222k|            return parse_presentation_regex(begin, end, handler);
 6868|   222k|        }
 6869|   222k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   222k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6871|   222k|            handler.on_error("Invalid type specifier in format string");
 6872|   222k|            return begin;
 6873|   222k|        }
 6874|   222k|        handler.on_type(type);
 6875|   222k|        return begin;
 6876|   222k|    };
 6877|       |
 6878|   222k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6878:9): [True: 222k, False: 0]
  |  Branch (6878:28): [True: 222k, False: 0]
  ------------------
 6879|   222k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6879:9): [True: 222k, False: 0]
  |  Branch (6879:36): [True: 176k, False: 46.2k]
  ------------------
 6880|   176k|        return do_presentation();
 6881|   176k|    }
 6882|       |
 6883|  46.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  46.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 46.2k]
  |  |  ------------------
  ------------------
 6884|      0|        handler.on_error("Unexpected end of format string");
 6885|      0|        return begin;
 6886|      0|    }
 6887|       |
 6888|  46.2k|    begin = parse_align(begin, end, handler);
 6889|  46.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  46.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 46.2k]
  |  |  ------------------
  ------------------
 6890|      0|        handler.on_error("Unexpected end of format string");
 6891|      0|        return begin;
 6892|      0|    }
 6893|       |
 6894|  46.2k|    begin = parse_width(begin, end, handler);
 6895|  46.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  46.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 46.2k]
  |  |  ------------------
  ------------------
 6896|      0|        handler.on_error("Unexpected end of format string");
 6897|      0|        return begin;
 6898|      0|    }
 6899|       |
 6900|  46.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6900:9): [True: 0, False: 46.2k]
  ------------------
 6901|      0|        ++begin;
 6902|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6903|      0|            handler.on_error("Unexpected end of format string");
 6904|      0|            return begin;
 6905|      0|        }
 6906|      0|        begin = parse_precision(begin, end, handler);
 6907|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6908|      0|            handler.on_error("Unexpected end of format string");
 6909|      0|            return begin;
 6910|      0|        }
 6911|      0|    }
 6912|       |
 6913|  46.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6913:9): [True: 46.2k, False: 0]
  ------------------
 6914|  46.2k|        handler.on_localized();
 6915|  46.2k|        ++begin;
 6916|  46.2k|    }
 6917|  46.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  46.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 46.2k]
  |  |  ------------------
  ------------------
 6918|      0|        handler.on_error("Unexpected end of format string");
 6919|      0|        return begin;
 6920|      0|    }
 6921|       |
 6922|  46.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6922:9): [True: 46.2k, False: 0]
  |  Branch (6922:25): [True: 0, False: 46.2k]
  ------------------
 6923|      0|        do_presentation();
 6924|      0|    }
 6925|  46.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  46.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 46.2k]
  |  |  ------------------
  ------------------
 6926|      0|        handler.on_error("Unexpected end of format string");
 6927|      0|        return begin;
 6928|      0|    }
 6929|       |
 6930|  46.2k|    return begin;
 6931|  46.2k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6854|   176k|    auto do_presentation = [&]() -> const CharT* {
 6855|   176k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6855:13): [True: 0, False: 176k]
  ------------------
 6856|      0|            auto set = parse_presentation_set(begin, end, handler);
 6857|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6858|       |                // clang-format off
 6859|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6860|       |                // clang-format on
 6861|      0|                return begin;
 6862|      0|            }
 6863|      0|            handler.on_character_set_string(set);
 6864|      0|            return begin;
 6865|      0|        }
 6866|   176k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6866:13): [True: 0, False: 176k]
  ------------------
 6867|      0|            return parse_presentation_regex(begin, end, handler);
 6868|      0|        }
 6869|   176k|        presentation_type type = parse_presentation_type(*begin++);
 6870|   176k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 176k]
  |  |  ------------------
  ------------------
 6871|      0|            handler.on_error("Invalid type specifier in format string");
 6872|      0|            return begin;
 6873|      0|        }
 6874|   176k|        handler.on_type(type);
 6875|   176k|        return begin;
 6876|   176k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6527|  46.2k|{
 6528|  46.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  46.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6529|       |
 6530|  46.2k|    auto check_align = [](wchar_t ch) {
 6531|  46.2k|        switch (ch) {
 6532|  46.2k|            case L'<':
 6533|  46.2k|                return align_type::left;
 6534|  46.2k|            case L'>':
 6535|  46.2k|                return align_type::right;
 6536|  46.2k|            case L'^':
 6537|  46.2k|                return align_type::center;
 6538|  46.2k|            default:
 6539|  46.2k|                return align_type::none;
 6540|  46.2k|        }
 6541|  46.2k|    };
 6542|       |
 6543|  46.2k|    auto potential_fill_len = code_point_length(begin, end);
 6544|  46.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  92.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 46.2k]
  |  |  |  Branch (859:45): [True: 0, False: 46.2k]
  |  |  |  Branch (859:45): [True: 0, False: 46.2k]
  |  |  ------------------
  ------------------
 6545|  46.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6546|      0|        handler.on_error("Invalid encoding in fill character");
 6547|      0|        return begin;
 6548|      0|    }
 6549|       |
 6550|  46.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6551|       |
 6552|  46.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6553|  46.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6554|  46.2k|    const auto begin_before_fill = begin;
 6555|  46.2k|    begin += potential_fill_len;
 6556|       |
 6557|  46.2k|    if (begin == end) {
  ------------------
  |  Branch (6557:9): [True: 0, False: 46.2k]
  ------------------
 6558|      0|        return begin_before_fill;
 6559|      0|    }
 6560|       |
 6561|  46.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6562|  46.2k|    const auto begin_after_fill = begin;
 6563|  46.2k|    ++begin;
 6564|       |
 6565|  46.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6565:9): [True: 46.2k, False: 0]
  ------------------
 6566|  46.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  46.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 46.2k]
  |  |  ------------------
  ------------------
 6567|      0|            handler.on_error("Invalid fill character '{' in format string");
 6568|      0|            return begin;
 6569|      0|        }
 6570|  46.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6570:13): [True: 0, False: 46.2k]
  ------------------
 6571|      0|            return begin_before_fill;
 6572|      0|        }
 6573|  46.2k|    }
 6574|       |
 6575|  46.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6575:9): [True: 46.2k, False: 0]
  ------------------
 6576|  46.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6576:13): [True: 0, False: 46.2k]
  ------------------
 6577|      0|            handler.on_align(potential_align_on_fill);
 6578|      0|            return begin_after_fill;
 6579|      0|        }
 6580|  46.2k|        return begin_before_fill;
 6581|  46.2k|    }
 6582|       |
 6583|      0|    handler.on_fill(potential_fill);
 6584|      0|    handler.on_align(potential_align_after_fill);
 6585|      0|    return begin;
 6586|  46.2k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6530|  92.5k|    auto check_align = [](wchar_t ch) {
 6531|  92.5k|        switch (ch) {
 6532|      0|            case L'<':
  ------------------
  |  Branch (6532:13): [True: 0, False: 92.5k]
  ------------------
 6533|      0|                return align_type::left;
 6534|      0|            case L'>':
  ------------------
  |  Branch (6534:13): [True: 0, False: 92.5k]
  ------------------
 6535|      0|                return align_type::right;
 6536|      0|            case L'^':
  ------------------
  |  Branch (6536:13): [True: 0, False: 92.5k]
  ------------------
 6537|      0|                return align_type::center;
 6538|  92.5k|            default:
  ------------------
  |  Branch (6538:13): [True: 92.5k, False: 0]
  ------------------
 6539|  92.5k|                return align_type::none;
 6540|  92.5k|        }
 6541|  92.5k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6592|  46.2k|{
 6593|  46.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  46.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6594|       |
 6595|  46.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6595:9): [True: 46.2k, False: 0]
  |  Branch (6595:33): [True: 0, False: 46.2k]
  ------------------
 6596|      0|        int width = parse_simple_int(begin, end);
 6597|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6598|      0|            handler.on_width(width);
 6599|      0|        }
 6600|      0|        else {
 6601|      0|            handler.on_error("Invalid field width");
 6602|      0|            return begin;
 6603|      0|        }
 6604|      0|    }
 6605|  46.2k|    return begin;
 6606|  46.2k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7122|  46.2k|    {
 7123|  46.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7124|  46.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7124:13): [True: 46.2k, False: 0]
  ------------------
 7125|  46.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7125:13): [True: 46.2k, False: 0]
  ------------------
 7126|  46.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7126:13): [True: 0, False: 46.2k]
  ------------------
 7127|  46.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7127:13): [True: 0, False: 0]
  ------------------
 7128|      0|            SCN_UNLIKELY_ATTR
 7129|       |            // clang-format off
 7130|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7131|       |            // clang-format on
 7132|      0|        }
 7133|       |
 7134|  46.2k|        Handler::on_localized();
 7135|  46.2k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8412|   222k|{
 8413|   222k|#define SCN_VISIT(Type)                                         \
 8414|   222k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8415|   222k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8416|   222k|    }                                                           \
 8417|   222k|    else {                                                      \
 8418|   222k|        return vis(monostate_val);                              \
 8419|   222k|    }
 8420|       |
 8421|   222k|    monostate monostate_val{};
 8422|       |
 8423|   222k|    switch (arg.m_type) {
 8424|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8424:9): [True: 0, False: 222k]
  ------------------
 8425|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8426|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8426:9): [True: 0, False: 222k]
  ------------------
 8427|      0|            SCN_VISIT(short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8428|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 222k]
  ------------------
 8429|      0|            SCN_VISIT(int);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 222k]
  ------------------
 8431|      0|            SCN_VISIT(long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 222k]
  ------------------
 8433|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 222k]
  ------------------
 8435|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 222k]
  ------------------
 8437|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 222k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 222k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 222k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 222k]
  ------------------
 8445|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 222k]
  ------------------
 8447|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 222k]
  ------------------
 8449|      0|            SCN_VISIT(char);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 222k]
  ------------------
 8451|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 222k]
  ------------------
 8453|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8454|  74.0k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8454:9): [True: 74.0k, False: 148k]
  ------------------
 8455|  74.0k|            SCN_VISIT(float);
  ------------------
  |  | 8414|  74.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  74.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  74.0k|    }                                                           \
  |  | 8417|  74.0k|    else {                                                      \
  |  | 8418|  74.0k|        return vis(monostate_val);                              \
  |  | 8419|  74.0k|    }
  ------------------
 8456|  74.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8456:9): [True: 74.1k, False: 148k]
  ------------------
 8457|  74.1k|            SCN_VISIT(double);
  ------------------
  |  | 8414|  74.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  74.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  74.1k|    }                                                           \
  |  | 8417|  74.1k|    else {                                                      \
  |  | 8418|  74.1k|        return vis(monostate_val);                              \
  |  | 8419|  74.1k|    }
  ------------------
 8458|  74.2k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8458:9): [True: 74.2k, False: 148k]
  ------------------
 8459|  74.2k|            SCN_VISIT(long double);
  ------------------
  |  | 8414|  74.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|  74.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|  74.2k|    }                                                           \
  |  | 8417|  74.2k|    else {                                                      \
  |  | 8418|  74.2k|        return vis(monostate_val);                              \
  |  | 8419|  74.2k|    }
  ------------------
 8460|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 222k]
  ------------------
 8461|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 222k]
  ------------------
 8463|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 222k]
  ------------------
 8465|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 222k]
  ------------------
 8467|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 222k]
  ------------------
 8469|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 222k]
  ------------------
 8471|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8414|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8414:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8415|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8416|      0|    }                                                           \
  |  | 8417|      0|    else {                                                      \
  |  | 8418|      0|        return vis(monostate_val);                              \
  |  | 8419|      0|    }
  ------------------
 8472|       |
 8473|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 222k]
  ------------------
 8474|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8475|      0|            return vis(
 8476|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8477|       |#else
 8478|       |            return vis(monostate_val);
 8479|       |#endif
 8480|       |
 8481|      0|            SCN_CLANG_PUSH
 8482|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8483|       |
 8484|      0|            SCN_UNLIKELY_ATTR
 8485|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 222k]
  ------------------
 8486|      0|        default: {
  ------------------
  |  Branch (8486:9): [True: 0, False: 222k]
  ------------------
 8487|      0|            return vis(monostate_val);
 8488|      0|        }
 8489|       |
 8490|   222k|            SCN_CLANG_POP
 8491|   222k|    }
 8492|       |
 8493|      0|#undef SCN_VISIT
 8494|       |
 8495|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8497|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4071|   238k|    {
 4072|   238k|        sync(0);
 4073|   238k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5415|   467k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5415|  46.3k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  44.7k|{
   89|  44.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  44.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  44.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  44.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.7k|    static_cast<    \
  |  |  929|  44.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.7k|    static_cast<    \
  |  |  929|  44.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  44.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   134k|{
   44|   134k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   134k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  44.7k|{
  127|  44.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  44.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  44.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  44.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.7k|    static_cast<    \
  |  |  929|  44.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.7k|    static_cast<    \
  |  |  929|  44.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  44.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   134k|{
   60|   134k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   134k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  7.70k|{
  163|  7.70k|    T value;
  164|  7.70k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  7.70k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  7.70k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.70k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.70k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.12k, False: 1.57k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.12k|    }                                                  \
  |  |  |  | 3667|  7.70k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.57k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.57k|    static_cast<    \
  |  |  929|  1.57k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.57k|    static_cast<    \
  |  |  929|  1.57k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.70k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  23.1k|{
   72|  23.1k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  23.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  23.1k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  44.8k|{
   89|  44.8k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  44.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  44.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  44.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.8k|    static_cast<    \
  |  |  929|  44.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.8k|    static_cast<    \
  |  |  929|  44.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  44.8k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  44.8k|{
  127|  44.8k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  44.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  44.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  44.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.8k|    static_cast<    \
  |  |  929|  44.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.8k|    static_cast<    \
  |  |  929|  44.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  44.8k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  7.72k|{
  163|  7.72k|    T value;
  164|  7.72k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  7.72k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  7.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.12k, False: 1.59k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.12k|    }                                                  \
  |  |  |  | 3667|  7.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.59k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.59k|    static_cast<    \
  |  |  929|  1.59k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.59k|    static_cast<    \
  |  |  929|  1.59k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.72k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|  44.8k|{
   89|  44.8k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  44.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  44.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  44.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.8k|    static_cast<    \
  |  |  929|  44.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.8k|    static_cast<    \
  |  |  929|  44.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  44.8k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|  44.8k|{
  127|  44.8k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  44.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  44.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  44.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.8k|    static_cast<    \
  |  |  929|  44.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.8k|    static_cast<    \
  |  |  929|  44.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  44.8k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|  7.74k|{
  163|  7.74k|    T value;
  164|  7.74k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  7.74k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  7.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.12k, False: 1.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.12k|    }                                                  \
  |  |  |  | 3667|  7.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.61k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.61k|    static_cast<    \
  |  |  929|  1.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.61k|    static_cast<    \
  |  |  929|  1.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.74k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  44.7k|{
   89|  44.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  44.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  44.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  44.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.7k|    static_cast<    \
  |  |  929|  44.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.7k|    static_cast<    \
  |  |  929|  44.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  44.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   134k|{
   44|   134k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   134k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  44.7k|{
  127|  44.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  44.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  44.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  44.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.7k|    static_cast<    \
  |  |  929|  44.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.7k|    static_cast<    \
  |  |  929|  44.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  44.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   134k|{
   60|   134k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   134k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  7.69k|{
  163|  7.69k|    T value;
  164|  7.69k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  7.69k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  7.69k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.69k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.69k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.12k, False: 1.57k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.12k|    }                                                  \
  |  |  |  | 3667|  7.69k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.57k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.57k|    static_cast<    \
  |  |  929|  1.57k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.57k|    static_cast<    \
  |  |  929|  1.57k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.69k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  23.1k|{
   72|  23.1k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  23.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  23.1k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  44.7k|{
   89|  44.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  44.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  44.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  44.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.7k|    static_cast<    \
  |  |  929|  44.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.7k|    static_cast<    \
  |  |  929|  44.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  44.7k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  44.7k|{
  127|  44.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  44.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  44.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  44.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.7k|    static_cast<    \
  |  |  929|  44.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.7k|    static_cast<    \
  |  |  929|  44.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  44.7k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  7.71k|{
  163|  7.71k|    T value;
  164|  7.71k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  7.71k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  7.71k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.71k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.71k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.12k, False: 1.58k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.12k|    }                                                  \
  |  |  |  | 3667|  7.71k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.58k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.58k|    static_cast<    \
  |  |  929|  1.58k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.58k|    static_cast<    \
  |  |  929|  1.58k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.71k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  44.8k|{
   89|  44.8k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  44.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  44.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  44.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.8k|    static_cast<    \
  |  |  929|  44.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.8k|    static_cast<    \
  |  |  929|  44.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  44.8k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  44.8k|{
  127|  44.8k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  44.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  44.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  44.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.8k|    static_cast<    \
  |  |  929|  44.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.8k|    static_cast<    \
  |  |  929|  44.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  44.8k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|  7.73k|{
  163|  7.73k|    T value;
  164|  7.73k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  7.73k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  7.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  7.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  7.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.12k, False: 1.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.12k|    }                                                  \
  |  |  |  | 3667|  7.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  1.60k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.60k|    static_cast<    \
  |  |  929|  1.60k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  1.60k|    static_cast<    \
  |  |  929|  1.60k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  7.73k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  2.43M|{
  653|  2.43M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  2.43M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|  1.06M|{
  659|  1.06M|    static_assert(std::is_same_v<Locale, std::locale>);
  660|  1.06M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 530k, False: 530k]
  ------------------
  661|  1.06M|                    : std::locale{};
  662|  1.06M|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  1.45M|{
 1221|  1.45M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.45M|                                  m_nan_payload_buffer, value);
 1223|  1.45M|    value = this->setsign(value);
 1224|  1.45M|    return n;
 1225|  1.45M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  77.9k|{
 1221|  77.9k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  77.9k|                                  m_nan_payload_buffer, value);
 1223|  77.9k|    value = this->setsign(value);
 1224|  77.9k|    return n;
 1225|  77.9k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.57M|{
 1221|  1.57M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.57M|                                  m_nan_payload_buffer, value);
 1223|  1.57M|    value = this->setsign(value);
 1224|  1.57M|    return n;
 1225|  1.57M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  78.0k|{
 1221|  78.0k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  78.0k|                                  m_nan_payload_buffer, value);
 1223|  78.0k|    value = this->setsign(value);
 1224|  78.0k|    return n;
 1225|  78.0k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  1.59M|{
 1221|  1.59M|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.59M|                                  m_nan_payload_buffer, value);
 1223|  1.59M|    value = this->setsign(value);
 1224|  1.59M|    return n;
 1225|  1.59M|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  78.1k|{
 1221|  78.1k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  78.1k|                                  m_nan_payload_buffer, value);
 1223|  78.1k|    value = this->setsign(value);
 1224|  78.1k|    return n;
 1225|  78.1k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2175|  1.08M|{
 2176|  1.08M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2177|  1.08M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  1.08M|{
 2184|  1.08M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  1.08M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.08M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.03M, False: 55.1k]
  |  |  ------------------
  ------------------
 2186|  1.03M|        source.sync(*n);
 2187|  1.03M|    }
 2188|  55.1k|    else {
 2189|  55.1k|        source.sync_all();
 2190|  55.1k|    }
 2191|  1.08M|    return n;
 2192|  1.08M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2199|   134k|{
 2200|   134k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2201|   134k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   134k|{
 2208|   134k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   134k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   134k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 24.1k, False: 110k]
  |  |  ------------------
  ------------------
 2210|  24.1k|        source.sync(*n);
 2211|  24.1k|    }
 2212|   110k|    else {
 2213|   110k|        source.sync_all();
 2214|   110k|    }
 2215|   134k|    return n;
 2216|   134k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  2.13M|{
  194|  2.13M|    return find_classic_impl(
  195|  2.13M|        source, [](char ch) { return is_ascii_space(ch); },
  196|  2.13M|        [](char32_t cp) { return is_cp_space(cp); });
  197|  2.13M|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  4.79M|{
  202|  4.79M|    return find_classic_impl(
  203|  4.79M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  4.79M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  4.79M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2132|  1.08M|{
 2133|  1.08M|    return vscan_internal(source, format, args);
 2134|  1.08M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2138|  1.08M|{
 2139|  1.08M|    auto n = vscan_internal(source, format, args);
 2140|  1.08M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.08M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.03M, False: 55.1k]
  |  |  ------------------
  ------------------
 2141|  1.03M|        source.sync(*n);
 2142|  1.03M|    }
 2143|  55.1k|    else {
 2144|  55.1k|        source.sync_all();
 2145|  55.1k|    }
 2146|  1.08M|    return n;
 2147|  1.08M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2152|   134k|{
 2153|   134k|    return vscan_internal(source, format, args);
 2154|   134k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2158|   134k|{
 2159|   134k|    auto n = vscan_internal(source, format, args);
 2160|   134k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   134k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 24.1k, False: 110k]
  |  |  ------------------
  ------------------
 2161|  24.1k|        source.sync(*n);
 2162|  24.1k|    }
 2163|   110k|    else {
 2164|   110k|        source.sync_all();
 2165|   110k|    }
 2166|   134k|    return n;
 2167|   134k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2242|   241k|{
 2243|   241k|    return vscan_value_internal(source, arg);
 2244|   241k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2247|   225k|{
 2248|   225k|    auto n = vscan_value_internal(source, arg);
 2249|   225k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   225k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 216k, False: 9.18k]
  |  |  ------------------
  ------------------
 2250|   216k|        source.sync(*n);
 2251|   216k|    }
 2252|  9.18k|    else {
 2253|  9.18k|        source.sync_all();
 2254|  9.18k|    }
 2255|   225k|    return n;
 2256|   225k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2261|  23.1k|{
 2262|  23.1k|    return vscan_value_internal(source, arg);
 2263|  23.1k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2267|  23.1k|{
 2268|  23.1k|    auto n = vscan_value_internal(source, arg);
 2269|  23.1k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  23.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.76k, False: 18.3k]
  |  |  ------------------
  ------------------
 2270|  4.76k|        source.sync(*n);
 2271|  4.76k|    }
 2272|  18.3k|    else {
 2273|  18.3k|        source.sync_all();
 2274|  18.3k|    }
 2275|  23.1k|    return n;
 2276|  23.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  2.13M|{
  118|  2.13M|    auto it = source.begin();
  119|       |
  120|  8.78M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 7.49M, False: 1.28M]
  ------------------
  121|  7.49M|        auto sv =
  122|  7.49M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  7.49M|                .substr(0, 8);
  124|       |
  125|  7.49M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 7.32M, False: 172k]
  ------------------
  126|  7.32M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  7.32M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  7.32M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 774k, False: 6.55M]
  ------------------
  129|   774k|                break;
  130|   774k|            }
  131|  6.55M|            continue;
  132|  7.32M|        }
  133|       |
  134|   596k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 494k, False: 101k]
  ------------------
  135|   494k|            auto tmp =
  136|   494k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   494k|            auto res = get_next_code_point(tmp);
  138|   494k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 70.6k, False: 424k]
  ------------------
  139|  70.6k|                return it;
  140|  70.6k|            }
  141|   424k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   424k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   424k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   424k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   424k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   424k|        }
  145|   172k|    }
  146|       |
  147|  2.06M|    return detail::make_string_view_iterator(source, it);
  148|  2.13M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  10.5M|{
  105|  10.5M|    static_assert(sizeof(*source.data()) == 1);
  106|  10.5M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  10.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  10.5M|    uint64_t word{};
  108|  10.5M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  10.5M|    return has_byte_greater(word, 127) != 0;
  111|  10.5M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  48.4M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   494k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  4.79M|{
  118|  4.79M|    auto it = source.begin();
  119|       |
  120|  5.20M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 3.08M, False: 2.11M]
  ------------------
  121|  3.08M|        auto sv =
  122|  3.08M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  3.08M|                .substr(0, 8);
  124|       |
  125|  3.08M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 2.89M, False: 183k]
  ------------------
  126|  2.89M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  2.89M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  2.89M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 2.50M, False: 395k]
  ------------------
  129|  2.50M|                break;
  130|  2.50M|            }
  131|   395k|            continue;
  132|  2.89M|        }
  133|       |
  134|   348k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 334k, False: 13.8k]
  ------------------
  135|   334k|            auto tmp =
  136|   334k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   334k|            auto res = get_next_code_point(tmp);
  138|   334k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 169k, False: 164k]
  ------------------
  139|   169k|                return it;
  140|   169k|            }
  141|   164k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   164k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   164k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   164k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   164k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   164k|        }
  145|   183k|    }
  146|       |
  147|  4.62M|    return detail::make_string_view_iterator(source, it);
  148|  4.79M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  4.59M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   334k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.45M|{
 1138|  1.45M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 13.8k, False: 1.44M]
  ------------------
 1139|  13.8k|        value = std::numeric_limits<T>::infinity();
 1140|  13.8k|        return 3;
 1141|  13.8k|    }
 1142|  1.44M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 10.0k, False: 1.43M]
  ------------------
 1143|  10.0k|        value = std::numeric_limits<T>::infinity();
 1144|  10.0k|        return 8;
 1145|  10.0k|    }
 1146|  1.43M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 59.4k, False: 1.37M]
  ------------------
 1147|  59.4k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  59.4k|        return 3;
 1149|  59.4k|    }
 1150|  1.37M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.70k, False: 1.37M]
  ------------------
 1151|  1.70k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.70k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.70k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.70k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.70k|    }
 1182|       |
 1183|  1.37M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.37M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 312k, False: 1.05M]
  ------------------
 1185|   312k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.12k, False: 309k]
  |  |  ------------------
  ------------------
 1186|  3.12k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.12k|                                         "Invalid floating-point digit");
 1188|  3.12k|        }
 1189|   312k|    }
 1190|  1.36M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.32k, False: 1.35M]
  |  |  ------------------
  ------------------
 1191|  8.32k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  8.32k|                                     "Invalid floating-point digit");
 1193|  8.32k|    }
 1194|       |
 1195|  1.35M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.35M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.35M|            double tmp{};
 1200|  1.35M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.35M|            value = tmp;
 1202|  1.35M|            return ret;
 1203|  1.35M|        }
 1204|  1.35M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.35M|            return fast_float_fallback(data, value);
 1208|  1.35M|        }
 1209|  1.35M|    }
 1210|  1.35M|    else {
 1211|       |        // Default to fast_float
 1212|  1.35M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.35M|    }
 1214|  1.35M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1077|  1.35M|    {
 1078|  1.35M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  5.07M|    {
  712|  5.07M|        return {kind, options};
  713|  5.07M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|  1.35M|    {
 1082|  1.35M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 309k, False: 1.04M]
  ------------------
 1083|  1.35M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 52.9k, False: 996k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   362k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   362k|                                              value);
 1087|   362k|        }
 1088|       |
 1089|   996k|        const auto flags = get_flags();
 1090|   996k|        const auto view = get_view();
 1091|   996k|        const auto result = fast_float::from_chars(
 1092|   996k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   996k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   996k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 996k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   996k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   996k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.55k, False: 986k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  9.55k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  9.55k|                                              value);
 1102|  9.55k|        }
 1103|       |
 1104|   986k|        return result.ptr - view.data();
 1105|   996k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   371k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   371k|    {
 1048|   371k|#if !SCN_DISABLE_STRTOD
 1049|   371k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   371k|    }
 1056|   371k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  893|   371k|    {
  894|   371k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   379k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   371k|    {
  898|   371k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   371k|                           generic_strtod);
  900|   371k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   371k|    {
  732|   371k|        CharT* end{};
  733|   371k|        errno = 0;
  734|   371k|        value = strtod_cb(src, &end);
  735|   371k|        const auto saved_errno = errno;
  736|   371k|        auto chars_read = end - src;
  737|       |
  738|   371k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   371k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.3k, False: 360k]
  |  |  ------------------
  ------------------
  740|  11.3k|            return unexpected(e);
  741|  11.3k|        }
  742|       |
  743|   360k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 308k, False: 52.5k]
  ------------------
  744|   360k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 308k, False: 0]
  ------------------
  745|   308k|            chars_read -= 2;
  746|   308k|        }
  747|       |
  748|   360k|        return chars_read;
  749|   371k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   379k|    {
  778|   379k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 97.9k, False: 281k]
  |  Branch (778:37): [True: 0, False: 97.9k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   379k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 53.0k, False: 326k]
  ------------------
  785|   379k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 53.0k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   379k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 12.5k, False: 366k]
  |  Branch (791:34): [True: 1.70k, False: 10.8k]
  ------------------
  792|  1.70k|            SCN_UNLIKELY_ATTR
  793|  1.70k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  1.70k|        }
  795|       |
  796|   377k|        SCN_GCC_COMPAT_PUSH
  797|   377k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   377k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 377k, False: 0]
  ------------------
  800|   377k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 377k, False: 0]
  ------------------
  801|   377k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 10.2k, False: 367k]
  ------------------
  802|  10.2k|            SCN_UNLIKELY_ATTR
  803|  10.2k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  10.2k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   367k|            return {};
  809|   377k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   391k|{
  687|   391k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 99.6k, False: 292k]
  |  Branch (687:25): [True: 0, False: 292k]
  ------------------
  688|   391k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   371k|    {
  755|   371k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 365k, False: 6.69k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   365k|            auto first_space = read_until_classic_space(input.view());
  758|   365k|            input.assign(
  759|   365k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   365k|        }
  761|       |
  762|   371k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 309k, False: 62.5k]
  ------------------
  763|   309k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   309k|                input.get_allocated_string().insert(0, "0x");
  765|   309k|            }
  766|   309k|            else {
  767|   309k|                input.get_allocated_string().insert(0, L"0x");
  768|   309k|            }
  769|   309k|        }
  770|       |
  771|   371k|        return input.get_allocated_string().c_str();
  772|   371k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   371k|    {
  905|   371k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   371k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   371k|        }
  908|   371k|        else {
  909|   371k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   371k|        }
  911|   371k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   371k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   371k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   371k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   371k|            return std::strtof(str, str_end);
  839|   371k|        }
  840|   371k|        else if constexpr (std::is_same_v<T, double>) {
  841|   371k|            return std::strtod(str, str_end);
  842|   371k|        }
  843|   371k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   371k|            return std::strtold(str, str_end);
  845|   371k|        }
  846|   371k|#endif
  847|   371k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  2.14M|    {
 1061|  2.14M|        unsigned format_flags{};
 1062|  2.14M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 2.12M, False: 19.0k]
  ------------------
 1063|  2.12M|            format_flags |= fast_float::fixed;
 1064|  2.12M|        }
 1065|  2.14M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 1.87M, False: 265k]
  ------------------
 1066|  1.87M|            format_flags |= fast_float::scientific;
 1067|  1.87M|        }
 1068|       |
 1069|  2.14M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  2.14M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|   996k|    {
 1110|   996k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|   996k|            return m_input.view();
 1112|   996k|        }
 1113|   996k|        else if constexpr (sizeof(CharT) == 2) {
 1114|   996k|            return std::u16string_view{
 1115|   996k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|   996k|                m_input.view().size()};
 1117|   996k|        }
 1118|   996k|        else {
 1119|   996k|            return std::u32string_view{
 1120|   996k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   996k|                m_input.view().size()};
 1122|   996k|        }
 1123|   996k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  77.9k|{
 1138|  77.9k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 77.9k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  77.9k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 77.9k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  77.9k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 77.9k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  77.9k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 77.9k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  77.9k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  77.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  77.9k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 18.6k, False: 59.3k]
  ------------------
 1185|  18.6k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.0k, False: 6.58k]
  |  |  ------------------
  ------------------
 1186|  12.0k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  12.0k|                                         "Invalid floating-point digit");
 1188|  12.0k|        }
 1189|  18.6k|    }
 1190|  65.9k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  65.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.1k, False: 35.7k]
  |  |  ------------------
  ------------------
 1191|  30.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  30.1k|                                     "Invalid floating-point digit");
 1193|  30.1k|    }
 1194|       |
 1195|  35.7k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  35.7k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  35.7k|            double tmp{};
 1200|  35.7k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  35.7k|            value = tmp;
 1202|  35.7k|            return ret;
 1203|  35.7k|        }
 1204|  35.7k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  35.7k|            return fast_float_fallback(data, value);
 1208|  35.7k|        }
 1209|  35.7k|    }
 1210|  35.7k|    else {
 1211|       |        // Default to fast_float
 1212|  35.7k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  35.7k|    }
 1214|  35.7k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1077|  35.7k|    {
 1078|  35.7k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|   121k|    {
  712|   121k|        return {kind, options};
  713|   121k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|  35.7k|    {
 1082|  35.7k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 6.54k, False: 29.1k]
  ------------------
 1083|  35.7k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 105, False: 29.0k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  6.64k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  6.64k|                                              value);
 1087|  6.64k|        }
 1088|       |
 1089|  29.0k|        const auto flags = get_flags();
 1090|  29.0k|        const auto view = get_view();
 1091|  29.0k|        const auto result = fast_float::from_chars(
 1092|  29.0k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  29.0k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 29.0k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  29.0k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 582, False: 28.4k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    582|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    582|                                              value);
 1102|    582|        }
 1103|       |
 1104|  28.4k|        return result.ptr - view.data();
 1105|  29.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  7.23k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  7.23k|    {
 1048|  7.23k|#if !SCN_DISABLE_STRTOD
 1049|  7.23k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  7.23k|    }
 1056|  7.23k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  893|  7.23k|    {
  894|  7.23k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  7.23k|    {
  898|  7.23k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  7.23k|                           generic_strtod);
  900|  7.23k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  7.23k|    {
  732|  7.23k|        CharT* end{};
  733|  7.23k|        errno = 0;
  734|  7.23k|        value = strtod_cb(src, &end);
  735|  7.23k|        const auto saved_errno = errno;
  736|  7.23k|        auto chars_read = end - src;
  737|       |
  738|  7.23k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  7.23k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 594, False: 6.63k]
  |  |  ------------------
  ------------------
  740|    594|            return unexpected(e);
  741|    594|        }
  742|       |
  743|  6.63k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 6.53k, False: 105]
  ------------------
  744|  6.63k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 6.53k, False: 0]
  ------------------
  745|  6.53k|            chars_read -= 2;
  746|  6.53k|        }
  747|       |
  748|  6.63k|        return chars_read;
  749|  7.23k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  7.23k|    {
  755|  7.23k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 6.77k, False: 457]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  6.77k|            auto first_space = read_until_classic_space(input.view());
  758|  6.77k|            input.assign(
  759|  6.77k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  6.77k|        }
  761|       |
  762|  7.23k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 6.54k, False: 687]
  ------------------
  763|  6.54k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  6.54k|                input.get_allocated_string().insert(0, "0x");
  765|  6.54k|            }
  766|  6.54k|            else {
  767|  6.54k|                input.get_allocated_string().insert(0, L"0x");
  768|  6.54k|            }
  769|  6.54k|        }
  770|       |
  771|  7.23k|        return input.get_allocated_string().c_str();
  772|  7.23k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  7.23k|    {
  905|  7.23k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  7.23k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  7.23k|        }
  908|  7.23k|        else {
  909|  7.23k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  7.23k|        }
  911|  7.23k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  7.23k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  7.23k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  7.23k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  7.23k|            return std::wcstof(str, str_end);
  877|  7.23k|        }
  878|  7.23k|        else if constexpr (std::is_same_v<T, double>) {
  879|  7.23k|            return std::wcstod(str, str_end);
  880|  7.23k|        }
  881|  7.23k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  7.23k|            return std::wcstold(str, str_end);
  883|  7.23k|        }
  884|  7.23k|#endif
  885|  7.23k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|  29.0k|    {
 1110|  29.0k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  29.0k|            return m_input.view();
 1112|  29.0k|        }
 1113|  29.0k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  29.0k|            return std::u16string_view{
 1115|  29.0k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  29.0k|                m_input.view().size()};
 1117|  29.0k|        }
 1118|  29.0k|        else {
 1119|  29.0k|            return std::u32string_view{
 1120|  29.0k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  29.0k|                m_input.view().size()};
 1122|  29.0k|        }
 1123|  29.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.57M|{
 1138|  1.57M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 15.0k, False: 1.55M]
  ------------------
 1139|  15.0k|        value = std::numeric_limits<T>::infinity();
 1140|  15.0k|        return 3;
 1141|  15.0k|    }
 1142|  1.55M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 10.6k, False: 1.54M]
  ------------------
 1143|  10.6k|        value = std::numeric_limits<T>::infinity();
 1144|  10.6k|        return 8;
 1145|  10.6k|    }
 1146|  1.54M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 61.4k, False: 1.48M]
  ------------------
 1147|  61.4k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  61.4k|        return 3;
 1149|  61.4k|    }
 1150|  1.48M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.79k, False: 1.48M]
  ------------------
 1151|  1.79k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.79k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.79k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.79k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.79k|    }
 1182|       |
 1183|  1.48M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.48M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 325k, False: 1.15M]
  ------------------
 1185|   325k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.38k, False: 322k]
  |  |  ------------------
  ------------------
 1186|  3.38k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.38k|                                         "Invalid floating-point digit");
 1188|  3.38k|        }
 1189|   325k|    }
 1190|  1.48M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.60k, False: 1.47M]
  |  |  ------------------
  ------------------
 1191|  9.60k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  9.60k|                                     "Invalid floating-point digit");
 1193|  9.60k|    }
 1194|       |
 1195|  1.47M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.47M|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.47M|            double tmp{};
 1200|  1.47M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.47M|            value = tmp;
 1202|  1.47M|            return ret;
 1203|  1.47M|        }
 1204|  1.47M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.47M|            return fast_float_fallback(data, value);
 1208|  1.47M|        }
 1209|  1.47M|    }
 1210|  1.47M|    else {
 1211|       |        // Default to fast_float
 1212|  1.47M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.47M|    }
 1214|  1.47M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1077|  1.47M|    {
 1078|  1.47M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|  1.47M|    {
 1082|  1.47M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 321k, False: 1.14M]
  ------------------
 1083|  1.47M|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 61.4k, False: 1.08M]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   383k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   383k|                                              value);
 1087|   383k|        }
 1088|       |
 1089|  1.08M|        const auto flags = get_flags();
 1090|  1.08M|        const auto view = get_view();
 1091|  1.08M|        const auto result = fast_float::from_chars(
 1092|  1.08M|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  1.08M|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.08M]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  1.08M|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.23k, False: 1.08M]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  4.23k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  4.23k|                                              value);
 1102|  4.23k|        }
 1103|       |
 1104|  1.08M|        return result.ptr - view.data();
 1105|  1.08M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   387k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   387k|    {
 1048|   387k|#if !SCN_DISABLE_STRTOD
 1049|   387k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   387k|    }
 1056|   387k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  893|   387k|    {
  894|   387k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   394k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   387k|    {
  898|   387k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   387k|                           generic_strtod);
  900|   387k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   387k|    {
  732|   387k|        CharT* end{};
  733|   387k|        errno = 0;
  734|   387k|        value = strtod_cb(src, &end);
  735|   387k|        const auto saved_errno = errno;
  736|   387k|        auto chars_read = end - src;
  737|       |
  738|   387k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   387k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.83k, False: 382k]
  |  |  ------------------
  ------------------
  740|  4.83k|            return unexpected(e);
  741|  4.83k|        }
  742|       |
  743|   382k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 321k, False: 61.4k]
  ------------------
  744|   382k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 321k, False: 0]
  ------------------
  745|   321k|            chars_read -= 2;
  746|   321k|        }
  747|       |
  748|   382k|        return chars_read;
  749|   387k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   394k|    {
  778|   394k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 99.8k, False: 294k]
  |  Branch (778:37): [True: 0, False: 99.8k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   394k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 61.5k, False: 333k]
  ------------------
  785|   394k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 61.5k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   394k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 5.17k, False: 389k]
  |  Branch (791:34): [True: 514, False: 4.66k]
  ------------------
  792|    514|            SCN_UNLIKELY_ATTR
  793|    514|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    514|        }
  795|       |
  796|   394k|        SCN_GCC_COMPAT_PUSH
  797|   394k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   394k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 394k, False: 0]
  ------------------
  800|   394k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 394k, False: 0]
  ------------------
  801|   394k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 4.66k, False: 389k]
  ------------------
  802|  4.66k|            SCN_UNLIKELY_ATTR
  803|  4.66k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  4.66k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   389k|            return {};
  809|   394k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   399k|{
  691|   399k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 100k, False: 299k]
  |  Branch (691:24): [True: 0, False: 299k]
  ------------------
  692|   399k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   387k|    {
  755|   387k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 382k, False: 4.77k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   382k|            auto first_space = read_until_classic_space(input.view());
  758|   382k|            input.assign(
  759|   382k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   382k|        }
  761|       |
  762|   387k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 321k, False: 65.7k]
  ------------------
  763|   321k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   321k|                input.get_allocated_string().insert(0, "0x");
  765|   321k|            }
  766|   321k|            else {
  767|   321k|                input.get_allocated_string().insert(0, L"0x");
  768|   321k|            }
  769|   321k|        }
  770|       |
  771|   387k|        return input.get_allocated_string().c_str();
  772|   387k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   387k|    {
  905|   387k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|   387k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|   387k|        }
  908|   387k|        else {
  909|   387k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   387k|        }
  911|   387k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   387k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   387k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   387k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|   387k|            return std::strtof(str, str_end);
  839|   387k|        }
  840|   387k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|   387k|            return std::strtod(str, str_end);
  842|   387k|        }
  843|   387k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   387k|            return std::strtold(str, str_end);
  845|   387k|        }
  846|   387k|#endif
  847|   387k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|  1.08M|    {
 1110|  1.08M|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  1.08M|            return m_input.view();
 1112|  1.08M|        }
 1113|  1.08M|        else if constexpr (sizeof(CharT) == 2) {
 1114|  1.08M|            return std::u16string_view{
 1115|  1.08M|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  1.08M|                m_input.view().size()};
 1117|  1.08M|        }
 1118|  1.08M|        else {
 1119|  1.08M|            return std::u32string_view{
 1120|  1.08M|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  1.08M|                m_input.view().size()};
 1122|  1.08M|        }
 1123|  1.08M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  78.0k|{
 1138|  78.0k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 78.0k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  78.0k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 78.0k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  78.0k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 78.0k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  78.0k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 78.0k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  78.0k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  78.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  78.0k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 18.6k, False: 59.3k]
  ------------------
 1185|  18.6k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.0k, False: 6.58k]
  |  |  ------------------
  ------------------
 1186|  12.0k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  12.0k|                                         "Invalid floating-point digit");
 1188|  12.0k|        }
 1189|  18.6k|    }
 1190|  65.9k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  65.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.2k, False: 35.7k]
  |  |  ------------------
  ------------------
 1191|  30.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  30.2k|                                     "Invalid floating-point digit");
 1193|  30.2k|    }
 1194|       |
 1195|  35.7k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  35.7k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  35.7k|            double tmp{};
 1200|  35.7k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  35.7k|            value = tmp;
 1202|  35.7k|            return ret;
 1203|  35.7k|        }
 1204|  35.7k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  35.7k|            return fast_float_fallback(data, value);
 1208|  35.7k|        }
 1209|  35.7k|    }
 1210|  35.7k|    else {
 1211|       |        // Default to fast_float
 1212|  35.7k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  35.7k|    }
 1214|  35.7k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1077|  35.7k|    {
 1078|  35.7k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|  35.7k|    {
 1082|  35.7k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 6.54k, False: 29.1k]
  ------------------
 1083|  35.7k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 105, False: 29.0k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  6.64k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  6.64k|                                              value);
 1087|  6.64k|        }
 1088|       |
 1089|  29.0k|        const auto flags = get_flags();
 1090|  29.0k|        const auto view = get_view();
 1091|  29.0k|        const auto result = fast_float::from_chars(
 1092|  29.0k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  29.0k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 29.0k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  29.0k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 336, False: 28.7k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    336|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    336|                                              value);
 1102|    336|        }
 1103|       |
 1104|  28.7k|        return result.ptr - view.data();
 1105|  29.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  6.98k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  6.98k|    {
 1048|  6.98k|#if !SCN_DISABLE_STRTOD
 1049|  6.98k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  6.98k|    }
 1056|  6.98k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  893|  6.98k|    {
  894|  6.98k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  6.98k|    {
  898|  6.98k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  6.98k|                           generic_strtod);
  900|  6.98k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  6.98k|    {
  732|  6.98k|        CharT* end{};
  733|  6.98k|        errno = 0;
  734|  6.98k|        value = strtod_cb(src, &end);
  735|  6.98k|        const auto saved_errno = errno;
  736|  6.98k|        auto chars_read = end - src;
  737|       |
  738|  6.98k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  6.98k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 344, False: 6.64k]
  |  |  ------------------
  ------------------
  740|    344|            return unexpected(e);
  741|    344|        }
  742|       |
  743|  6.64k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 6.53k, False: 105]
  ------------------
  744|  6.64k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 6.53k, False: 0]
  ------------------
  745|  6.53k|            chars_read -= 2;
  746|  6.53k|        }
  747|       |
  748|  6.64k|        return chars_read;
  749|  6.98k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  6.98k|    {
  755|  6.98k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 6.65k, False: 334]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  6.65k|            auto first_space = read_until_classic_space(input.view());
  758|  6.65k|            input.assign(
  759|  6.65k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  6.65k|        }
  761|       |
  762|  6.98k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 6.54k, False: 441]
  ------------------
  763|  6.54k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  6.54k|                input.get_allocated_string().insert(0, "0x");
  765|  6.54k|            }
  766|  6.54k|            else {
  767|  6.54k|                input.get_allocated_string().insert(0, L"0x");
  768|  6.54k|            }
  769|  6.54k|        }
  770|       |
  771|  6.98k|        return input.get_allocated_string().c_str();
  772|  6.98k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  6.98k|    {
  905|  6.98k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  6.98k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  6.98k|        }
  908|  6.98k|        else {
  909|  6.98k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  6.98k|        }
  911|  6.98k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  6.98k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  6.98k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  6.98k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  6.98k|            return std::wcstof(str, str_end);
  877|  6.98k|        }
  878|  6.98k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  6.98k|            return std::wcstod(str, str_end);
  880|  6.98k|        }
  881|  6.98k|        else if constexpr (std::is_same_v<T, long double>) {
  882|  6.98k|            return std::wcstold(str, str_end);
  883|  6.98k|        }
  884|  6.98k|#endif
  885|  6.98k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|  29.0k|    {
 1110|  29.0k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  29.0k|            return m_input.view();
 1112|  29.0k|        }
 1113|  29.0k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (1113:28): [Folded - Ignored]
  ------------------
 1114|  29.0k|            return std::u16string_view{
 1115|  29.0k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  29.0k|                m_input.view().size()};
 1117|  29.0k|        }
 1118|  29.0k|        else {
 1119|  29.0k|            return std::u32string_view{
 1120|  29.0k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  29.0k|                m_input.view().size()};
 1122|  29.0k|        }
 1123|  29.0k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.59M|{
 1138|  1.59M|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 15.5k, False: 1.57M]
  ------------------
 1139|  15.5k|        value = std::numeric_limits<T>::infinity();
 1140|  15.5k|        return 3;
 1141|  15.5k|    }
 1142|  1.57M|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 10.8k, False: 1.56M]
  ------------------
 1143|  10.8k|        value = std::numeric_limits<T>::infinity();
 1144|  10.8k|        return 8;
 1145|  10.8k|    }
 1146|  1.56M|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 61.8k, False: 1.50M]
  ------------------
 1147|  61.8k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  61.8k|        return 3;
 1149|  61.8k|    }
 1150|  1.50M|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.82k, False: 1.50M]
  ------------------
 1151|  1.82k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.82k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.82k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.82k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.82k|    }
 1182|       |
 1183|  1.50M|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.50M|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 326k, False: 1.17M]
  ------------------
 1185|   326k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.51k, False: 322k]
  |  |  ------------------
  ------------------
 1186|  3.51k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.51k|                                         "Invalid floating-point digit");
 1188|  3.51k|        }
 1189|   326k|    }
 1190|  1.49M|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.2k, False: 1.48M]
  |  |  ------------------
  ------------------
 1191|  10.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  10.2k|                                     "Invalid floating-point digit");
 1193|  10.2k|    }
 1194|       |
 1195|  1.48M|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  1.48M|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  1.48M|            double tmp{};
 1200|  1.48M|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  1.48M|            value = tmp;
 1202|  1.48M|            return ret;
 1203|  1.48M|        }
 1204|  1.48M|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  1.48M|            return fast_float_fallback(data, value);
 1208|  1.48M|        }
 1209|  1.48M|    }
 1210|  1.48M|    else {
 1211|       |        // Default to fast_float
 1212|  1.48M|        return fast_float_impl<CharT, T>{data}(value);
 1213|  1.48M|    }
 1214|  1.48M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  1.48M|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  1.48M|    {
 1048|  1.48M|#if !SCN_DISABLE_STRTOD
 1049|  1.48M|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  1.48M|    }
 1056|  1.48M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  893|  1.48M|    {
  894|  1.48M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|  1.52M|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|  1.48M|    {
  898|  1.48M|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  1.48M|                           generic_strtod);
  900|  1.48M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  1.48M|    {
  732|  1.48M|        CharT* end{};
  733|  1.48M|        errno = 0;
  734|  1.48M|        value = strtod_cb(src, &end);
  735|  1.48M|        const auto saved_errno = errno;
  736|  1.48M|        auto chars_read = end - src;
  737|       |
  738|  1.48M|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  1.48M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.33k, False: 1.48M]
  |  |  ------------------
  ------------------
  740|  1.33k|            return unexpected(e);
  741|  1.33k|        }
  742|       |
  743|  1.48M|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 322k, False: 1.16M]
  ------------------
  744|  1.48M|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 322k, False: 0]
  ------------------
  745|   322k|            chars_read -= 2;
  746|   322k|        }
  747|       |
  748|  1.48M|        return chars_read;
  749|  1.48M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|  1.52M|    {
  778|  1.52M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 424k, False: 1.09M]
  |  Branch (778:37): [True: 0, False: 424k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|  1.52M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 61.6k, False: 1.46M]
  ------------------
  785|  1.52M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 61.6k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|  1.52M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 1.36k, False: 1.52M]
  |  Branch (791:34): [True: 138, False: 1.23k]
  ------------------
  792|    138|            SCN_UNLIKELY_ATTR
  793|    138|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    138|        }
  795|       |
  796|  1.52M|        SCN_GCC_COMPAT_PUSH
  797|  1.52M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|  1.52M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 1.52M, False: 0]
  ------------------
  800|  1.52M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 1.52M, False: 0]
  ------------------
  801|  1.52M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 1.23k, False: 1.52M]
  ------------------
  802|  1.23k|            SCN_UNLIKELY_ATTR
  803|  1.23k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  1.23k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|  1.52M|            return {};
  809|  1.52M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|  1.52M|{
  695|  1.52M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 425k, False: 1.09M]
  |  Branch (695:26): [True: 0, False: 1.09M]
  ------------------
  696|  1.52M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  1.48M|    {
  755|  1.48M|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 1.38M, False: 104k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  1.38M|            auto first_space = read_until_classic_space(input.view());
  758|  1.38M|            input.assign(
  759|  1.38M|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  1.38M|        }
  761|       |
  762|  1.48M|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 322k, False: 1.16M]
  ------------------
  763|   322k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|   322k|                input.get_allocated_string().insert(0, "0x");
  765|   322k|            }
  766|   322k|            else {
  767|   322k|                input.get_allocated_string().insert(0, L"0x");
  768|   322k|            }
  769|   322k|        }
  770|       |
  771|  1.48M|        return input.get_allocated_string().c_str();
  772|  1.48M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|  1.48M|    {
  905|  1.48M|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  1.48M|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  1.48M|        }
  908|  1.48M|        else {
  909|  1.48M|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  1.48M|        }
  911|  1.48M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|  1.48M|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|  1.48M|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|  1.48M|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|  1.48M|            return std::strtof(str, str_end);
  839|  1.48M|        }
  840|  1.48M|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|  1.48M|            return std::strtod(str, str_end);
  842|  1.48M|        }
  843|  1.48M|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (843:28): [Folded - Ignored]
  ------------------
  844|  1.48M|            return std::strtold(str, str_end);
  845|  1.48M|        }
  846|  1.48M|#endif
  847|  1.48M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  78.1k|{
 1138|  78.1k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 78.1k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  78.1k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 78.1k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  78.1k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 78.1k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  78.1k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 78.1k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  78.1k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  78.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  78.1k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 18.6k, False: 59.5k]
  ------------------
 1185|  18.6k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.0k, False: 6.58k]
  |  |  ------------------
  ------------------
 1186|  12.0k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  12.0k|                                         "Invalid floating-point digit");
 1188|  12.0k|        }
 1189|  18.6k|    }
 1190|  66.0k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  66.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.3k, False: 35.7k]
  |  |  ------------------
  ------------------
 1191|  30.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  30.3k|                                     "Invalid floating-point digit");
 1193|  30.3k|    }
 1194|       |
 1195|  35.7k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  35.7k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  35.7k|            double tmp{};
 1200|  35.7k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  35.7k|            value = tmp;
 1202|  35.7k|            return ret;
 1203|  35.7k|        }
 1204|  35.7k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  35.7k|            return fast_float_fallback(data, value);
 1208|  35.7k|        }
 1209|  35.7k|    }
 1210|  35.7k|    else {
 1211|       |        // Default to fast_float
 1212|  35.7k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  35.7k|    }
 1214|  35.7k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  35.7k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  35.7k|    {
 1048|  35.7k|#if !SCN_DISABLE_STRTOD
 1049|  35.7k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  35.7k|    }
 1056|  35.7k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  893|  35.7k|    {
  894|  35.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|  35.7k|    {
  898|  35.7k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  35.7k|                           generic_strtod);
  900|  35.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  35.7k|    {
  732|  35.7k|        CharT* end{};
  733|  35.7k|        errno = 0;
  734|  35.7k|        value = strtod_cb(src, &end);
  735|  35.7k|        const auto saved_errno = errno;
  736|  35.7k|        auto chars_read = end - src;
  737|       |
  738|  35.7k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  35.7k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  35.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 35.7k]
  |  |  ------------------
  ------------------
  740|     36|            return unexpected(e);
  741|     36|        }
  742|       |
  743|  35.7k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 6.54k, False: 29.1k]
  ------------------
  744|  35.7k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 6.54k, False: 0]
  ------------------
  745|  6.54k|            chars_read -= 2;
  746|  6.54k|        }
  747|       |
  748|  35.7k|        return chars_read;
  749|  35.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  35.7k|    {
  755|  35.7k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 34.7k, False: 1.00k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  34.7k|            auto first_space = read_until_classic_space(input.view());
  758|  34.7k|            input.assign(
  759|  34.7k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  34.7k|        }
  761|       |
  762|  35.7k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 6.54k, False: 29.2k]
  ------------------
  763|  6.54k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  6.54k|                input.get_allocated_string().insert(0, "0x");
  765|  6.54k|            }
  766|  6.54k|            else {
  767|  6.54k|                input.get_allocated_string().insert(0, L"0x");
  768|  6.54k|            }
  769|  6.54k|        }
  770|       |
  771|  35.7k|        return input.get_allocated_string().c_str();
  772|  35.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|  35.7k|    {
  905|  35.7k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  35.7k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  35.7k|        }
  908|  35.7k|        else {
  909|  35.7k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  35.7k|        }
  911|  35.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|  35.7k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  35.7k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  35.7k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (875:23): [Folded - Ignored]
  ------------------
  876|  35.7k|            return std::wcstof(str, str_end);
  877|  35.7k|        }
  878|  35.7k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (878:28): [Folded - Ignored]
  ------------------
  879|  35.7k|            return std::wcstod(str, str_end);
  880|  35.7k|        }
  881|  35.7k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (881:28): [Folded - Ignored]
  ------------------
  882|  35.7k|            return std::wcstold(str, str_end);
  883|  35.7k|        }
  884|  35.7k|#endif
  885|  35.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|  2.17M|{
 2065|  2.17M|    const auto argcount = args.size();
 2066|  2.17M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 451k, False: 1.72M]
  |  Branch (2066:60): [True: 451k, False: 0]
  ------------------
 2067|   451k|        auto arg = args.get(0);
 2068|   451k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   451k|    static_cast<    \
  |  |  929|   451k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|   451k|    }
 2070|       |
 2071|  1.72M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 1.72M]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|  1.72M|    SCN_UNLIKELY_ATTR
 2079|  1.72M|    {
 2080|  1.72M|        auto handler = format_handler<false, CharT>{
 2081|  1.72M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.72M|    static_cast<    \
  |  |  929|  1.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.72M|    static_cast<    \
  |  |  929|  1.72M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|  1.72M|        return vscan_parse_format_string(format, handler);
 2083|  1.72M|    }
 2084|  1.72M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  4.33M|{
 1625|  4.33M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 3.40M, False: 934k]
  ------------------
 1626|  3.40M|        return false;
 1627|  3.40M|    }
 1628|   934k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 934k, False: 0]
  |  Branch (1628:39): [True: 934k, False: 0]
  ------------------
 1629|  4.33M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   677k|{
 1658|   677k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   677k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 677k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   677k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   677k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 677k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   677k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   677k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   677k|    static_cast<    \
  |  |  929|   677k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   677k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   677k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   677k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   677k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   677k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 27.5k, False: 650k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  27.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  27.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  27.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  27.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  27.5k|    }                                                  \
  |  |  |  | 3667|   677k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   650k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   650k|    return it.position();
 1675|   677k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  1.67M|    {
 1903|  1.67M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  3.84M|    {
 1722|  3.84M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  3.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.84M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  3.84M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  1.67M|    {
 1853|  1.67M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  1.67M|{
 2030|  1.67M|    const auto beg = handler.get_ctx().begin();
 2031|  1.67M|    detail::parse_format_string<false>(format, handler);
 2032|  1.67M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 91.8k, False: 1.58M]
  |  |  ------------------
  ------------------
 2033|  91.8k|        return unexpected(handler.error);
 2034|  91.8k|    }
 2035|  1.58M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  1.67M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2013|  11.5M|    {
 2014|  11.5M|        return ctx.get();
 2015|  11.5M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  11.5M|    {
 1857|  11.5M|        return contiguous_ctx;
 1858|  11.5M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  3.26M|    {
 1907|  3.26M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.26M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  3.26M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  1.67M|{
 1681|  1.67M|    auto arg = ctx.arg(id);
 1682|  1.67M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.67M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.67M|    return arg;
 1686|  1.67M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  3.84M|    {
 1797|  3.84M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.84M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  3.84M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  3.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.84M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  3.84M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.84M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.84M, False: 0]
  |  |  ------------------
  ------------------
 1807|  3.84M|            visited_args_lower64 |= (1ull << id);
 1808|  3.84M|            return;
 1809|  3.84M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  3.84M|    {
 1782|  3.84M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.84M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  3.84M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.84M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.84M, False: 0]
  |  |  ------------------
  ------------------
 1788|  3.84M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  3.84M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  3.84M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   551k|    {
 1766|   551k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   551k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 551k, False: 0]
  |  |  ------------------
  ------------------
 1767|   551k|            error = err;
 1768|   551k|        }
 1769|   551k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1935|  1.67M|    {
 1936|  1.67M|        return parse_ctx.next_arg_id();
 1937|  1.67M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1976|  1.67M|    {
 1977|  1.67M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  1.67M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  1.67M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 1.67M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  1.67M|        auto specs = detail::format_specs{};
 1990|  1.67M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  1.67M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  1.67M|            arg.type()};
 1993|       |
 1994|  1.67M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  1.67M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 1.67M]
  |  Branch (1995:29): [True: 0, False: 1.67M]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  1.67M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.67M]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|  1.67M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  1.67M|        on_visit_scan_arg(
 2006|  1.67M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  1.67M|                                           get_ctx().locale()},
 2008|  1.67M|            arg);
 2009|  1.67M|        return parse_ctx.begin();
 2010|  1.67M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  1.67M|    {
 1701|  1.67M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  1.67M|    {
 1948|  1.67M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 1.67M]
  |  Branch (1948:23): [True: 0, False: 1.67M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  1.67M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  1.67M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 91.8k, False: 1.58M]
  |  |  ------------------
  ------------------
 1955|  91.8k|            on_error(r.error());
 1956|  91.8k|        }
 1957|  1.58M|        else {
 1958|  1.58M|            get_ctx().advance_to(*r);
 1959|  1.58M|        }
 1960|  1.67M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  3.84M|    {
 1729|  3.84M|        {
 1730|  3.84M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 3.84M]
  ------------------
 1731|  3.84M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 3.84M]
  ------------------
 1732|  3.84M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  3.84M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  3.84M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 3.84M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  3.84M|        }
 1739|       |
 1740|  3.84M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 3.84M, False: 0]
  ------------------
 1741|  3.84M|            return;
 1742|  3.84M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  3.84M|    {
 1777|  3.84M|        return error;
 1778|  3.84M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  11.5M|    {
 1773|  11.5M|        return static_cast<bool>(error);
 1774|  11.5M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  1.72M|    {
 1903|  1.72M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  1.72M|    {
 1830|  1.72M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  1.72M|{
 2030|  1.72M|    const auto beg = handler.get_ctx().begin();
 2031|  1.72M|    detail::parse_format_string<false>(format, handler);
 2032|  1.72M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 91.8k, False: 1.63M]
  |  |  ------------------
  ------------------
 2033|  91.8k|        return unexpected(handler.error);
 2034|  91.8k|    }
 2035|  1.63M|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  1.72M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2013|  11.8M|    {
 2014|  11.8M|        return ctx.get();
 2015|  11.8M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  11.8M|    {
 1834|  11.8M|        return ctx;
 1835|  11.8M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  3.35M|    {
 1907|  3.35M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 3.35M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  3.35M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  1.72M|{
 1681|  1.72M|    auto arg = ctx.arg(id);
 1682|  1.72M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.72M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.72M|    return arg;
 1686|  1.72M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1935|  1.72M|    {
 1936|  1.72M|        return parse_ctx.next_arg_id();
 1937|  1.72M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1976|  1.72M|    {
 1977|  1.72M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  1.72M|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  1.72M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 1.72M]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  1.72M|        auto specs = detail::format_specs{};
 1990|  1.72M|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  1.72M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  1.72M|            arg.type()};
 1993|       |
 1994|  1.72M|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  1.72M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 1.72M]
  |  Branch (1995:29): [True: 0, False: 1.72M]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  1.72M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.72M]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|  1.72M|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  1.72M|        on_visit_scan_arg(
 2006|  1.72M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  1.72M|                                           get_ctx().locale()},
 2008|  1.72M|            arg);
 2009|  1.72M|        return parse_ctx.begin();
 2010|  1.72M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  1.72M|    {
 1701|  1.72M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|  1.72M|    {
 1948|  1.72M|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 1.72M]
  |  Branch (1948:23): [True: 0, False: 1.72M]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  1.72M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  1.72M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 91.8k, False: 1.63M]
  |  |  ------------------
  ------------------
 1955|  91.8k|            on_error(r.error());
 1956|  91.8k|        }
 1957|  1.63M|        else {
 1958|  1.63M|            get_ctx().advance_to(*r);
 1959|  1.63M|        }
 1960|  1.72M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|  2.16M|{
 2045|  2.16M|    const auto argcount = args.size();
 2046|  2.16M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 483k, False: 1.67M]
  |  Branch (2046:60): [True: 483k, False: 0]
  ------------------
 2047|   483k|        auto arg = args.get(0);
 2048|   483k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   483k|    static_cast<    \
  |  |  929|   483k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|   483k|    }
 2050|       |
 2051|  1.67M|    auto handler = format_handler<true, CharT>{
 2052|  1.67M|        ranges::subrange<const CharT*>{source.data(),
 2053|  1.67M|                                       source.data() + source.size()},
 2054|  1.67M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.67M|    static_cast<    \
  |  |  929|  1.67M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.67M|    static_cast<    \
  |  |  929|  1.67M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|  1.67M|    return vscan_parse_format_string(format, handler);
 2056|  2.16M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   724k|{
 1638|   724k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   724k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 724k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   724k|    auto reader =
 1644|   724k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   724k|            ranges::subrange<const CharT*>{source.data(),
 1646|   724k|                                           source.data() + source.size()},
 1647|   724k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   724k|    static_cast<    \
  |  |  929|   724k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   724k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   724k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   724k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   724k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   724k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 27.5k, False: 697k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  27.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  27.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  27.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  27.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  27.5k|    }                                                  \
  |  |  |  | 3667|   724k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   697k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   697k|    return ranges::distance(source.data(), it);
 1650|   724k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|   268k|{
 2045|   268k|    const auto argcount = args.size();
 2046|   268k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 46.3k, False: 222k]
  |  Branch (2046:60): [True: 46.3k, False: 0]
  ------------------
 2047|  46.3k|        auto arg = args.get(0);
 2048|  46.3k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  46.3k|    static_cast<    \
  |  |  929|  46.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|  46.3k|    }
 2050|       |
 2051|   222k|    auto handler = format_handler<true, CharT>{
 2052|   222k|        ranges::subrange<const CharT*>{source.data(),
 2053|   222k|                                       source.data() + source.size()},
 2054|   222k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   222k|    static_cast<    \
  |  |  929|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   222k|    static_cast<    \
  |  |  929|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|   222k|    return vscan_parse_format_string(format, handler);
 2056|   268k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   537k|{
 1625|   537k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 445k, False: 92.6k]
  ------------------
 1626|   445k|        return false;
 1627|   445k|    }
 1628|  92.6k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 92.6k, False: 0]
  |  Branch (1628:39): [True: 92.6k, False: 0]
  ------------------
 1629|   537k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  69.4k|{
 1638|  69.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  69.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 69.4k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  69.4k|    auto reader =
 1644|  69.4k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  69.4k|            ranges::subrange<const CharT*>{source.data(),
 1646|  69.4k|                                           source.data() + source.size()},
 1647|  69.4k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  69.4k|    static_cast<    \
  |  |  929|  69.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  69.4k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  69.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  69.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  69.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 55.1k, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  55.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  55.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  55.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  55.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  55.1k|    }                                                  \
  |  |  |  | 3667|  69.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  14.3k|    return ranges::distance(source.data(), it);
 1650|  69.4k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   222k|    {
 1903|   222k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   222k|    {
 1853|   222k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   222k|{
 2030|   222k|    const auto beg = handler.get_ctx().begin();
 2031|   222k|    detail::parse_format_string<false>(format, handler);
 2032|   222k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 183k, False: 38.8k]
  |  |  ------------------
  ------------------
 2033|   183k|        return unexpected(handler.error);
 2034|   183k|    }
 2035|  38.8k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   222k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2013|  1.19M|    {
 2014|  1.19M|        return ctx.get();
 2015|  1.19M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.19M|    {
 1857|  1.19M|        return contiguous_ctx;
 1858|  1.19M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   261k|    {
 1907|   261k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 261k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   261k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   222k|{
 1681|   222k|    auto arg = ctx.arg(id);
 1682|   222k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 222k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   222k|    return arg;
 1686|   222k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1935|   222k|    {
 1936|   222k|        return parse_ctx.next_arg_id();
 1937|   222k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1976|   222k|    {
 1977|   222k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|   222k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|   222k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 222k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|   222k|        auto specs = detail::format_specs{};
 1990|   222k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|   222k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|   222k|            arg.type()};
 1993|       |
 1994|   222k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|   222k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 222k]
  |  Branch (1995:29): [True: 0, False: 222k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|   222k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 222k]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|   222k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|   222k|        on_visit_scan_arg(
 2006|   222k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|   222k|                                           get_ctx().locale()},
 2008|   222k|            arg);
 2009|   222k|        return parse_ctx.begin();
 2010|   222k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   222k|    {
 1701|   222k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|   222k|    {
 1948|   222k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 222k]
  |  Branch (1948:23): [True: 0, False: 222k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|   222k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|   222k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 183k, False: 38.8k]
  |  |  ------------------
  ------------------
 1955|   183k|            on_error(r.error());
 1956|   183k|        }
 1957|  38.8k|        else {
 1958|  38.8k|            get_ctx().advance_to(*r);
 1959|  38.8k|        }
 1960|   222k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|   268k|{
 2065|   268k|    const auto argcount = args.size();
 2066|   268k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 46.2k, False: 222k]
  |  Branch (2066:60): [True: 46.2k, False: 0]
  ------------------
 2067|  46.2k|        auto arg = args.get(0);
 2068|  46.2k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  46.2k|    static_cast<    \
  |  |  929|  46.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|  46.2k|    }
 2070|       |
 2071|   222k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 222k]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|   222k|    SCN_UNLIKELY_ATTR
 2079|   222k|    {
 2080|   222k|        auto handler = format_handler<false, CharT>{
 2081|   222k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   222k|    static_cast<    \
  |  |  929|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   222k|    static_cast<    \
  |  |  929|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|   222k|        return vscan_parse_format_string(format, handler);
 2083|   222k|    }
 2084|   222k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  69.4k|{
 1658|  69.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  69.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 69.4k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  69.4k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  69.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 69.4k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  69.4k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  69.4k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  69.4k|    static_cast<    \
  |  |  929|  69.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  69.4k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  69.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  69.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  69.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 55.1k, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  55.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  55.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  55.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  55.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  55.1k|    }                                                  \
  |  |  |  | 3667|  69.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  14.2k|    return it.position();
 1675|  69.4k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|   222k|    {
 1903|   222k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   222k|    {
 1830|   222k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   222k|{
 2030|   222k|    const auto beg = handler.get_ctx().begin();
 2031|   222k|    detail::parse_format_string<false>(format, handler);
 2032|   222k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 183k, False: 38.7k]
  |  |  ------------------
  ------------------
 2033|   183k|        return unexpected(handler.error);
 2034|   183k|    }
 2035|  38.7k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   222k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2013|  1.19M|    {
 2014|  1.19M|        return ctx.get();
 2015|  1.19M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  1.19M|    {
 1834|  1.19M|        return ctx;
 1835|  1.19M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   261k|    {
 1907|   261k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 261k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   261k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   222k|{
 1681|   222k|    auto arg = ctx.arg(id);
 1682|   222k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 222k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   222k|    return arg;
 1686|   222k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1935|   222k|    {
 1936|   222k|        return parse_ctx.next_arg_id();
 1937|   222k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1976|   222k|    {
 1977|   222k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|   222k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|   222k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 222k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|   222k|        auto specs = detail::format_specs{};
 1990|   222k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|   222k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|   222k|            arg.type()};
 1993|       |
 1994|   222k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|   222k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 222k]
  |  Branch (1995:29): [True: 0, False: 222k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|   222k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 222k]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|   222k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|   222k|        on_visit_scan_arg(
 2006|   222k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|   222k|                                           get_ctx().locale()},
 2008|   222k|            arg);
 2009|   222k|        return parse_ctx.begin();
 2010|   222k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   222k|    {
 1701|   222k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|   222k|    {
 1948|   222k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 222k]
  |  Branch (1948:23): [True: 0, False: 222k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|   222k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|   222k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 183k, False: 38.7k]
  |  |  ------------------
  ------------------
 1955|   183k|            on_error(r.error());
 1956|   183k|        }
 1957|  38.7k|        else {
 1958|  38.7k|            get_ctx().advance_to(*r);
 1959|  38.7k|        }
 1960|   222k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|   241k|{
 2091|   241k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|   241k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|   225k|{
 2091|   225k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   225k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|   225k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  23.1k|{
 2091|  23.1k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  23.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  23.1k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  23.1k|{
 2091|  23.1k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  23.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  23.1k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  3.06k|{
 1363|  3.06k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  3.06k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  3.06k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  3.06k|            std::u32string tmp;
 1368|  3.06k|            transcode_to_string_impl_to32(src, tmp);
 1369|  3.06k|            return transcode_to_string_impl_32to16<false>(
 1370|  3.06k|                std::u32string_view{tmp}, dest);
 1371|  3.06k|        }
 1372|  3.06k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  3.06k|            return transcode_to_string_impl_to32(src, dest);
 1374|  3.06k|        }
 1375|  3.06k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  3.06k|{
 1256|  3.06k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  3.06k|    auto it = src.begin();
 1259|  1.08M|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 1.07M, False: 3.06k]
  ------------------
 1260|  1.07M|        auto res = get_next_code_point(
 1261|  1.07M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  1.07M|                                                                 src.end()));
 1263|  1.07M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.48k, False: 1.07M]
  |  |  ------------------
  ------------------
 1264|  2.48k|            dest.push_back(DestCharT{0xfffd});
 1265|  2.48k|        }
 1266|  1.07M|        else {
 1267|  1.07M|            dest.push_back(res.value);
 1268|  1.07M|        }
 1269|  1.07M|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  1.07M|    }
 1271|  3.06k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  1.90M|{
 1169|  1.90M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  1.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  1.90M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  1.90M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.1k, False: 1.87M]
  |  |  ------------------
  ------------------
 1173|  30.1k|        return {get_start_for_next_code_point(input),
 1174|  30.1k|                detail::invalid_code_point};
 1175|  30.1k|    }
 1176|  1.87M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  1.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.80k, False: 1.87M]
  |  |  ------------------
  ------------------
 1177|  5.80k|        return {input.end(), detail::invalid_code_point};
 1178|  5.80k|    }
 1179|       |
 1180|  1.87M|    return {input.begin() + len,
 1181|  1.87M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  1.87M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  30.1k|{
 1155|  30.1k|    auto it = input.begin();
 1156|   235k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 226k, False: 8.76k]
  ------------------
 1157|   226k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 21.3k, False: 205k]
  ------------------
 1158|  21.3k|            break;
 1159|  21.3k|        }
 1160|   226k|    }
 1161|  30.1k|    return it;
 1162|  30.1k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  40.7M|    {
  809|  40.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  40.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  40.7M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  15.1M|    {
  823|  15.1M|        return a.m_code == b.m_code;
  824|  15.1M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1727|  2.29M|    {
 1728|  2.29M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  2.29M|        std::strcpy(m_locbuf, loc);
 1730|  2.29M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  2.29M|    {
 1733|       |        // Restore locale to what it was before
 1734|  2.29M|        std::setlocale(m_category, m_locbuf);
 1735|  2.29M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1756|  2.29M|    {
 1757|  2.29M|        std::setlocale(cat, "C");
 1758|  2.29M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  3.84M|    {
 2936|  3.84M|        return m_msg == nullptr;
 2937|  3.84M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  3.80M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  53.0M|{
  458|  53.0M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  53.0M|        static_cast<unsigned char>(ch))];
  460|  53.0M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  46.9k|{
  469|  46.9k|    return static_cast<unsigned char>(ch) <= 127;
  470|  46.9k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  10.5M|{
  539|  10.5M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  10.5M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  18.0M|{
  784|  18.0M|    return e != eof_error::good;
  785|  18.0M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  58.2k|{
  798|  58.2k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  58.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  58.2k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  58.2k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   241k|{
  845|   241k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   241k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   241k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   241k|    return parse_error::eof;
  847|   241k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  5.49M|{
  854|  5.49M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 5.49M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  5.49M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 86.3k, False: 5.41M]
  ------------------
  859|  86.3k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  86.3k|    }
  861|       |
  862|  5.41M|    return scan_error{code, msg};
  863|  5.49M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  5.49M|{
  868|  5.49M|    return [code, msg](parse_error err) {
  869|  5.49M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.49M|    };
  871|  5.49M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  5.56M|{
 1200|       |    // Pattern_White_Space property
 1201|  5.56M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 5.29M, False: 261k]
  |  Branch (1201:27): [True: 1.81M, False: 3.48M]
  ------------------
 1202|  5.56M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 127k, False: 3.61M]
  ------------------
 1203|  5.56M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 165k, False: 3.44M]
  ------------------
 1204|  5.56M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 4.79k, False: 3.44M]
  ------------------
 1205|  5.56M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 18.7k, False: 3.42M]
  ------------------
 1206|  5.56M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 91.4k, False: 3.33M]
  ------------------
 1207|  5.56M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 3.33M]
  ------------------
 1208|  5.56M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  6.33M|{
 2220|  6.33M|    unsigned char running_diff{0};
 2221|  23.7M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 17.4M, False: 6.33M]
  ------------------
 2222|  17.4M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  17.4M|    }
 2224|  6.33M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 205k, False: 6.12M]
  |  Branch (2224:33): [True: 32.8k, False: 6.09M]
  ------------------
 2225|  6.33M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  38.9M|{
 3123|  38.9M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  38.9M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|   835k|{
 3127|   835k|#if WCHAR_MIN < 0
 3128|   835k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 823k, False: 12.7k]
  |  Branch (3128:20): [True: 472k, False: 350k]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|   472k|        return char_to_int(static_cast<char>(ch));
 3133|   472k|    }
 3134|   362k|    return 255;
 3135|   835k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  3.29M|{
 6008|  3.29M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 3.29M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  3.29M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 3.29M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  3.29M|    return {};
 6023|  3.29M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  7.04M|    {
  304|  7.04M|        ranges::advance(x, n);
  305|  7.04M|        return x;
  306|  7.04M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  7.04M|    {
  268|  7.04M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  7.04M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  7.04M|    {
  151|  7.04M|        i += n;
  152|  7.04M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  8.36M|    {
  108|  8.36M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  8.36M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  8.36M|    {
   87|  8.36M|        return s - i;
   88|  8.36M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   745k|    {
  304|   745k|        ranges::advance(x, n);
  305|   745k|        return x;
  306|   745k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   745k|    {
  268|   745k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   745k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   745k|    {
  151|   745k|        i += n;
  152|   745k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  74.1k|    {
  108|  74.1k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  74.1k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  74.1k|    {
   87|  74.1k|        return s - i;
   88|  74.1k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  2.40M|{
  981|  2.40M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  2.40M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  2.40M|        return true;
  984|  2.40M|    }
  985|  2.40M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  2.40M|                           ranges::const_iterator_t<Range>,
  987|  2.40M|                           typename detail::basic_scan_buffer<
  988|  2.40M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  2.40M|        auto beg = r.begin();
  990|  2.40M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 2.40M, False: 0]
  ------------------
  991|  2.40M|            return false;
  992|  2.40M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  2.40M|    else {
 1006|  2.40M|        return false;
 1007|  2.40M|    }
 1008|  2.40M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  1.72M|    {
 6037|  1.72M|        const bool need_skipped_width =
 6038|  1.72M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.72M]
  |  Branch (6038:33): [True: 0, False: 1.72M]
  ------------------
 6039|  1.72M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.72M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.72M]
  ------------------
 6043|  1.72M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.72M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.72M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.72M, False: 0]
  |  Branch (6047:56): [True: 1.72M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.72M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.72M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.42M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.72M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.72M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.72M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 21.1k, False: 1.70M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  21.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  21.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  21.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  21.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  21.1k|    }                                                  \
  |  |  |  | 3667|  1.72M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.42M|                            make_eof_scan_error));
 6058|       |
 6059|  3.42M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.70M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.70M|            return result_type{it, 0};
 6067|  3.42M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  1.72M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  4.66M|{
 1976|  4.66M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  4.66M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  4.66M|{
 1957|  4.66M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  4.66M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  4.66M|    }
 1960|  4.66M|    else {
 1961|  4.66M|        auto first = range.begin();
 1962|  25.6M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 25.6M, False: 38.2k]
  ------------------
 1963|  25.6M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 4.62M, False: 20.9M]
  ------------------
 1964|  4.62M|                return first;
 1965|  4.62M|            }
 1966|  25.6M|        }
 1967|  38.2k|        return first;
 1968|  4.66M|    }
 1969|  4.66M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  66.3M|    {
  763|  66.3M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  66.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  66.3M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  5.93M|    {
  754|  5.93M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  33.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  33.1M|              cvref<T> obj = *get<T>(fn);
  745|  33.1M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  33.1M|                  obj(static_cast<decltype(args)>(args)...);
  747|  33.1M|              }
  748|  33.1M|              else {
  749|  33.1M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  33.1M|              }
  751|  33.1M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  33.1M|    {
  684|  33.1M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  33.1M|            return static_cast<T*>(s.m_cp);
  686|  33.1M|        }
  687|  33.1M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  33.1M|            return static_cast<T*>(s.m_p);
  689|  33.1M|        }
  690|  33.1M|        else {
  691|  33.1M|            return reinterpret_cast<T*>(s.m_fp);
  692|  33.1M|        }
  693|  33.1M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  5.93M|        {
  662|  5.93M|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  4.09M|    {
  108|  4.09M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  4.09M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  4.09M|    {
   94|  4.09M|        iter_difference_t<I> counter{0};
   95|  41.4M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 37.4M, False: 4.09M]
  ------------------
   96|  37.4M|            ++i;
   97|  37.4M|            ++counter;
   98|  37.4M|        }
   99|  4.09M|        return counter;
  100|  4.09M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  6.35M|{
 1857|  6.35M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  6.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  6.35M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  6.35M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  6.35M|        if (sz < count) {
 1862|  6.35M|            return unexpected(eof_error::eof);
 1863|  6.35M|        }
 1864|       |
 1865|  6.35M|        return ranges::next(range.begin(), count);
 1866|  6.35M|    }
 1867|  6.35M|    else {
 1868|  6.35M|        auto it = range.begin();
 1869|  6.35M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 3.92M, False: 2.43M]
  ------------------
 1870|  3.92M|            return ranges::next(it, count);
 1871|  3.92M|        }
 1872|       |
 1873|  9.73M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 7.34M, False: 2.38M]
  ------------------
 1874|  7.34M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 51.3k, False: 7.29M]
  ------------------
 1875|  51.3k|                return unexpected(eof_error::eof);
 1876|  51.3k|            }
 1877|  7.34M|        }
 1878|       |
 1879|  2.38M|        return it;
 1880|  2.43M|    }
 1881|  6.35M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  6.35M|{
 1095|  6.35M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  6.35M|        return r.size();
 1097|  6.35M|    }
 1098|  6.35M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  6.35M|                           ranges::const_iterator_t<Range>,
 1100|  6.35M|                           typename detail::basic_scan_buffer<
 1101|  6.35M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  6.35M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  6.35M|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  6.35M|        }
 1105|  6.35M|        else {
 1106|  6.35M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 6.35M, False: 0]
  ------------------
 1107|  6.35M|                return static_cast<size_t>(
 1108|  6.35M|                    r.begin().parent()->chars_available() -
 1109|  6.35M|                    r.begin().position());
 1110|  6.35M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  6.35M|        }
 1113|  6.35M|    }
 1114|  6.35M|    else {
 1115|  6.35M|        return 0;
 1116|  6.35M|    }
 1117|  6.35M|}
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  9.36M|    {
  763|  9.36M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  9.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  9.36M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  2.68M|    {
  754|  2.68M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  4.63M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.63M|              cvref<T> obj = *get<T>(fn);
  745|  4.63M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.63M|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.63M|              }
  748|  4.63M|              else {
  749|  4.63M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.63M|              }
  751|  4.63M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  4.63M|    {
  684|  4.63M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.63M|            return static_cast<T*>(s.m_cp);
  686|  4.63M|        }
  687|  4.63M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  4.63M|            return static_cast<T*>(s.m_p);
  689|  4.63M|        }
  690|  4.63M|        else {
  691|  4.63M|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.63M|        }
  693|  4.63M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  2.68M|        {
  662|  2.68M|        }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  5.49M|    return [code, msg](parse_error err) {
  869|  5.49M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.49M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|   969k|    {
 1780|   969k|        auto stdloc = loc.get<std::locale>();
 1781|   969k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   969k|        grouping = numpunct.grouping();
 1783|   969k|        thousands_sep =
 1784|   969k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 969k]
  ------------------
 1785|   969k|        decimal_point = numpunct.decimal_point();
 1786|   969k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|   969k|{
 1717|   969k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 969k, False: 0]
  ------------------
 1718|   969k|        return std::use_facet<Facet>(stdloc);
 1719|   969k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   969k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  6.87M|{
 1846|  6.87M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.9k, False: 6.84M]
  |  |  ------------------
  ------------------
 1847|  28.9k|        return unexpected(e);
 1848|  28.9k|    }
 1849|       |
 1850|  6.84M|    return ranges::next(range.begin());
 1851|  6.87M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  9.94M|{
  950|  9.94M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  9.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 57.3k, False: 9.88M]
  |  |  ------------------
  ------------------
  951|  57.3k|        return eof_error::eof;
  952|  57.3k|    }
  953|  9.88M|    return eof_error::good;
  954|  9.94M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  13.9M|{
  944|  13.9M|    return is_range_eof(r.begin(), r.end());
  945|  13.9M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  13.9M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  13.9M|    {
  937|  13.9M|        return begin == end;
  938|  13.9M|    }
  939|  13.9M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  6.84M|    {
  296|  6.84M|        ++x;
  297|  6.84M|        return x;
  298|  6.84M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  2.61M|{
 3141|  2.61M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.61M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.86M, False: 748k]
  ------------------
 3143|  1.86M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.86M, False: 491]
  ------------------
 3144|  1.86M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.86M|        }
 3146|    491|        return unexpected(eof_error::eof);
 3147|  1.86M|    }
 3148|       |
 3149|   748k|    auto& it = *r;
 3150|   748k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 300k, False: 447k]
  ------------------
 3151|   300k|        return std::pair{it, sign_type::minus_sign};
 3152|   300k|    }
 3153|   447k|    return std::pair{it, sign_type::plus_sign};
 3154|   748k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  4.59M|{
 2272|  4.59M|    auto it = read_code_unit(range);
 2273|  4.59M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.9k, False: 4.58M]
  |  |  ------------------
  ------------------
 2274|  16.9k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  16.9k|    }
 2276|       |
 2277|  8.53M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 8.53M, False: 3.58M]
  ------------------
 2278|  8.53M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 993k, False: 7.54M]
  ------------------
 2279|   993k|            return *it;
 2280|   993k|        }
 2281|  8.53M|    }
 2282|       |
 2283|  3.58M|    return unexpected(parse_error::error);
 2284|  4.58M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  6.35M|{
 2231|  6.35M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  6.35M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  6.35M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  6.35M|        if (range.size() < str.size()) {
 2236|  6.35M|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  6.35M|        }
 2238|  6.35M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  6.35M|            return unexpected(parse_error::error);
 2240|  6.35M|        }
 2241|  6.35M|        return ranges::next(range.begin(), str.size());
 2242|  6.35M|    }
 2243|  6.35M|    else {
 2244|  6.35M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  6.35M|            if (ch < 'A' || ch > 'Z') {
 2246|  6.35M|                return ch;
 2247|  6.35M|            }
 2248|  6.35M|            return static_cast<char_type>(ch +
 2249|  6.35M|                                          static_cast<char_type>('a' - 'A'));
 2250|  6.35M|        };
 2251|       |
 2252|  6.35M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  6.35M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  6.35M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  6.35M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 51.3k, False: 6.30M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  51.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  51.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  51.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  51.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  51.3k|    }                                                  \
  |  |  |  | 3667|  6.35M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  6.30M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  6.30M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  6.30M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  6.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.07M, False: 236k]
  |  |  ------------------
  ------------------
 2257|  6.30M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  6.30M|                    return ascii_tolower(a) ==
 2259|  6.30M|                           static_cast<detail::char_t<Range>>(b);
 2260|  6.30M|                }))) {
 2261|  6.07M|            return unexpected(parse_error::error);
 2262|  6.07M|        }
 2263|       |
 2264|   236k|        return it;
 2265|  6.30M|    }
 2266|  6.35M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  7.37M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  7.37M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 6.61M, False: 757k]
  |  Branch (2245:29): [True: 643k, False: 113k]
  ------------------
 2246|  7.26M|                return ch;
 2247|  7.26M|            }
 2248|   113k|            return static_cast<char_type>(ch +
 2249|   113k|                                          static_cast<char_type>('a' - 'A'));
 2250|  7.37M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  2.27M|{
 2146|  2.27M|    auto it = read_code_unit(range);
 2147|  2.27M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.0k, False: 2.26M]
  |  |  ------------------
  ------------------
 2148|  12.0k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  12.0k|    }
 2150|       |
 2151|  2.26M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.90M, False: 352k]
  |  |  ------------------
  ------------------
 2152|  2.26M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.90M|        return unexpected(parse_error::error);
 2154|  1.90M|    }
 2155|       |
 2156|   352k|    return *it;
 2157|  2.26M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  4.65M|{
 1996|  4.65M|    auto it = read_while_code_unit(range, pred);
 1997|  4.65M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.95M, False: 2.70M]
  ------------------
 1998|  1.95M|        return unexpected(parse_error::error);
 1999|  1.95M|    }
 2000|  2.70M|    return it;
 2001|  4.65M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  2.16M|    {
 1621|  2.16M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.16M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.16M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.16M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.16M|            m_storage.reset();
 1627|  2.16M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.16M|        }
 1629|  2.16M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.16M|                                          std::basic_string<CharT>>) {
 1631|  2.16M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.16M|            m_view = string_view_type{*m_storage};
 1633|  2.16M|        }
 1634|  2.16M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  2.16M|                                          typename detail::basic_scan_buffer<
 1636|  2.16M|                                              value_t>::forward_iterator> &&
 1637|  2.16M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  2.16M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.16M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.16M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  2.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 299k, False: 1.86M]
  |  |  ------------------
  ------------------
 1641|  2.16M|                             detail::to_address(end_seg.end()))) {
 1642|   299k|                auto& str = m_storage.emplace();
 1643|   299k|                str.reserve(range.end().position() - range.begin().position());
 1644|   299k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   299k|                m_view = string_view_type{str};
 1646|   299k|                return;
 1647|   299k|            }
 1648|       |
 1649|  1.86M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.86M|                                                            end_seg.data());
 1651|  1.86M|            m_storage.reset();
 1652|  1.86M|        }
 1653|  2.16M|        else {
 1654|  2.16M|            auto& str = m_storage.emplace();
 1655|  2.16M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.16M|                str.reserve(range.size());
 1657|  2.16M|            }
 1658|  2.16M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.16M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.16M|                          std::back_inserter(str));
 1661|  2.16M|            }
 1662|  2.16M|            else {
 1663|  2.16M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.16M|                     ++it) {
 1665|  2.16M|                    str.push_back(*it);
 1666|  2.16M|                }
 1667|  2.16M|            }
 1668|  2.16M|            m_view = string_view_type{str};
 1669|  2.16M|        }
 1670|  2.16M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  16.0M|    {
 1582|  16.0M|        return m_view;
 1583|  16.0M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  9.49M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  1.61M|    {
 6079|  1.61M|        const bool need_skipped_width =
 6080|  1.61M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.61M]
  |  Branch (6080:33): [True: 0, False: 1.61M]
  ------------------
 6081|  1.61M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.61M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.61M]
  ------------------
 6084|  1.61M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.61M]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  1.61M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 1.61M, False: 0]
  ------------------
 6089|  1.61M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 0, False: 1.61M]
  ------------------
 6090|  1.61M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 0]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  ------------------
 6092|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  1.61M|        return result_type{rng.begin(), 0};
 6114|  1.61M|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  3.53M|{
 1846|  3.53M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.90k, False: 3.52M]
  |  |  ------------------
  ------------------
 1847|  6.90k|        return unexpected(e);
 1848|  6.90k|    }
 1849|       |
 1850|  3.52M|    return ranges::next(range.begin());
 1851|  3.53M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  6.65M|{
  950|  6.65M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  6.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.4k, False: 6.61M]
  |  |  ------------------
  ------------------
  951|  32.4k|        return eof_error::eof;
  952|  32.4k|    }
  953|  6.61M|    return eof_error::good;
  954|  6.65M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  6.65M|{
  944|  6.65M|    return is_range_eof(r.begin(), r.end());
  945|  6.65M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  6.65M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  6.65M|    {
  937|  6.65M|        return begin == end;
  938|  6.65M|    }
  939|  6.65M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  3.52M|    {
  296|  3.52M|        ++x;
  297|  3.52M|        return x;
  298|  3.52M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  2.45M|{
 3141|  2.45M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.45M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.74M, False: 711k]
  ------------------
 3143|  1.74M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.74M, False: 156]
  ------------------
 3144|  1.74M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.74M|        }
 3146|    156|        return unexpected(eof_error::eof);
 3147|  1.74M|    }
 3148|       |
 3149|   711k|    auto& it = *r;
 3150|   711k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 288k, False: 423k]
  ------------------
 3151|   288k|        return std::pair{it, sign_type::minus_sign};
 3152|   288k|    }
 3153|   423k|    return std::pair{it, sign_type::plus_sign};
 3154|   711k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  2.84M|{
 2272|  2.84M|    auto it = read_code_unit(range);
 2273|  2.84M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.21k, False: 2.84M]
  |  |  ------------------
  ------------------
 2274|  3.21k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  3.21k|    }
 2276|       |
 2277|  5.21M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 5.21M, False: 2.05M]
  ------------------
 2278|  5.21M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 790k, False: 4.42M]
  ------------------
 2279|   790k|            return *it;
 2280|   790k|        }
 2281|  5.21M|    }
 2282|       |
 2283|  2.05M|    return unexpected(parse_error::error);
 2284|  2.84M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  6.38M|{
 2231|  6.38M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  6.38M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  6.38M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  6.38M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 55.7k, False: 6.33M]
  ------------------
 2236|  55.7k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  55.7k|        }
 2238|  6.33M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 6.09M, False: 238k]
  ------------------
 2239|  6.09M|            return unexpected(parse_error::error);
 2240|  6.09M|        }
 2241|   238k|        return ranges::next(range.begin(), str.size());
 2242|  6.33M|    }
 2243|  6.38M|    else {
 2244|  6.38M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  6.38M|            if (ch < 'A' || ch > 'Z') {
 2246|  6.38M|                return ch;
 2247|  6.38M|            }
 2248|  6.38M|            return static_cast<char_type>(ch +
 2249|  6.38M|                                          static_cast<char_type>('a' - 'A'));
 2250|  6.38M|        };
 2251|       |
 2252|  6.38M|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  6.38M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  6.38M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  6.38M|        if (SCN_UNLIKELY(!std::equal(
 2257|  6.38M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  6.38M|                    return ascii_tolower(a) ==
 2259|  6.38M|                           static_cast<detail::char_t<Range>>(b);
 2260|  6.38M|                }))) {
 2261|  6.38M|            return unexpected(parse_error::error);
 2262|  6.38M|        }
 2263|       |
 2264|  6.38M|        return it;
 2265|  6.38M|    }
 2266|  6.38M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   680k|{
 2146|   680k|    auto it = read_code_unit(range);
 2147|   680k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   680k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.69k, False: 676k]
  |  |  ------------------
  ------------------
 2148|  3.69k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  3.69k|    }
 2150|       |
 2151|   676k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   676k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 564k, False: 112k]
  |  |  ------------------
  ------------------
 2152|   676k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   564k|        return unexpected(parse_error::error);
 2154|   564k|    }
 2155|       |
 2156|   112k|    return *it;
 2157|   676k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  9.05M|    {
 1503|  9.05M|        return sv;
 1504|  9.05M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  1.27M|{
 1976|  1.27M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.27M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  1.27M|{
 1957|  1.27M|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.27M|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.27M|    }
 1960|  1.27M|    else {
 1961|  1.27M|        auto first = range.begin();
 1962|  1.27M|        for (; first != range.end(); ++first) {
 1963|  1.27M|            if (pred(*first)) {
 1964|  1.27M|                return first;
 1965|  1.27M|            }
 1966|  1.27M|        }
 1967|  1.27M|        return first;
 1968|  1.27M|    }
 1969|  1.27M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  2.39M|{
 2951|  2.39M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.39M, False: 0]
  ------------------
 2952|  2.39M|        auto it = read_while_classic_space(range);
 2953|  2.39M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.39M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.5k, False: 2.37M]
  |  |  ------------------
  ------------------
 2955|  19.5k|            return unexpected(e);
 2956|  19.5k|        }
 2957|       |
 2958|  2.37M|        return it;
 2959|  2.39M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.39M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  2.39M|{
 2117|  2.39M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.39M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.39M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.39M|        auto buf = make_contiguous_buffer(range);
 2121|  2.39M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.39M|        return ranges::next(range.begin(),
 2123|  2.39M|                            ranges::distance(buf.view().begin(), it));
 2124|  2.39M|    }
 2125|  2.39M|    else {
 2126|  2.39M|        auto it = range.begin();
 2127|       |
 2128|  2.39M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  2.39M|            auto seg = get_contiguous_beginning(range);
 2130|  2.39M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.39M|                seg_it != seg.end()) {
 2132|  2.39M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  2.39M|            }
 2134|  2.39M|            ranges::advance(it, seg.size());
 2135|  2.39M|        }
 2136|       |
 2137|  2.39M|        return read_while_code_point(
 2138|  2.39M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.39M|    }
 2140|  2.39M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  2.39M|{
 1683|  2.39M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.39M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.39M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.39M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.39M|    }
 1688|  2.39M|    else {
 1689|  2.39M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.39M|    }
 1691|  2.39M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  2.39M|    {
 1490|  2.39M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  6.49M|    {
  304|  6.49M|        ranges::advance(x, n);
  305|  6.49M|        return x;
  306|  6.49M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  8.59M|    {
  268|  8.59M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  8.59M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  8.59M|    {
  181|  41.1M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 32.5M, False: 8.59M]
  ------------------
  182|  32.5M|            ++i;
  183|  32.5M|        }
  184|  8.59M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6177|   546k|    {
 6178|   546k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   546k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|   546k|            auto rd = make_reader<T, char_type>();
 6183|   546k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|   546k|                return unexpected(e);
 6185|   546k|            }
 6186|       |
 6187|   546k|            return impl(rd, range, value);
 6188|   546k|        }
 6189|   546k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|   546k|            auto rd = make_reader<T, char_type>();
 6191|   546k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   546k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 546k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|   546k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 546k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|   546k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|   546k|                return impl(rd, range, value);
 6198|   546k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|   546k|        else {
 6206|   546k|            SCN_EXPECT(false);
 6207|   546k|            SCN_UNREACHABLE;
 6208|   546k|        }
 6209|   546k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  3.40M|    {
 3040|  3.40M|        reader_error_handler eh{};
 3041|  3.40M|        get_derived().check_specs_impl(specs, eh);
 3042|  3.40M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.40M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  3.40M|        return {};
 3046|  3.40M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  3.40M|    {
 3051|  3.40M|        return static_cast<Derived&>(*this);
 3052|  3.40M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  3.40M|    {
 4145|  3.40M|        detail::check_float_type_specs(specs, eh);
 4146|  3.40M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|   546k|    {
 6120|   546k|        const bool need_skipped_width =
 6121|   546k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 546k]
  |  Branch (6121:33): [True: 0, False: 546k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   546k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   546k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   546k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   546k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   546k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.37k, False: 539k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.37k|    }                                                  \
  |  |  |  | 3667|   546k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   539k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   539k|        auto [it, prefix_width] = prefix_result;
 6126|   539k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   539k|        std::ptrdiff_t value_width = 0;
 6130|   539k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 539k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   539k|        else {
 6146|   539k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   539k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   539k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   539k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 24.2k, False: 515k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  24.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  24.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  24.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  24.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  24.2k|    }                                                  \
  |  | 3667|   539k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   539k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   515k|                                             specs, value, loc));
 6148|       |
 6149|   515k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 515k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   515k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   515k|        std::ptrdiff_t postfix_width = 0;
 6158|   515k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 510k, False: 4.91k]
  ------------------
 6159|   510k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   510k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   510k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   510k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   510k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 510k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   510k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   510k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   510k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   510k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   510k|                                 value_width));
 6163|   510k|            std::tie(it, postfix_width) = postfix_result;
 6164|   510k|        }
 6165|       |
 6166|   515k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   515k|                                                 value_width, postfix_width);
 6168|   515k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 515k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   515k|        return it;
 6173|   515k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  7.98M|    {
 3035|  7.98M|        return true;
 3036|  7.98M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|  3.36M|    {
 4217|  3.36M|        unsigned options{};
 4218|  3.36M|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 969k, False: 2.39M]
  ------------------
 4219|   969k|            options |= float_reader_base::allow_thsep;
 4220|   969k|        }
 4221|       |
 4222|  3.36M|        SCN_GCC_COMPAT_PUSH
 4223|  3.36M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|  3.36M|        switch (specs.type) {
 4226|   426k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 426k, False: 2.93M]
  ------------------
 4227|   426k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  64.9k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 64.9k, False: 3.29M]
  ------------------
 4230|  64.9k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|  1.08M|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 1.08M, False: 2.27M]
  ------------------
 4233|  1.08M|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   815k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 815k, False: 2.54M]
  ------------------
 4236|   815k|                return options | float_reader_base::allow_scientific |
 4237|   815k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   969k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 969k, False: 2.39M]
  ------------------
 4240|   969k|                return options | float_reader_base::allow_scientific |
 4241|   969k|                       float_reader_base::allow_fixed |
 4242|   969k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 3.36M]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|  3.36M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|  3.36M|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|  3.36M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|  3.36M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  4.74M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  9.49M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|  1.45M|    {
 3691|  1.45M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.45M|        const std::ptrdiff_t sign_len =
 3694|  1.45M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 431k, False: 1.02M]
  ------------------
 3695|       |
 3696|  1.45M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  1.45M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.45M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.45M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22.7k, False: 1.43M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  22.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  22.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  22.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  22.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  22.7k|    }                                                  \
  |  |  |  | 3667|  1.45M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.43M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.45M|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  4.62M|    {
 4057|  4.62M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 4.62M, False: 0]
  ------------------
 4058|  4.62M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 4.62M, False: 0]
  ------------------
 4059|  4.62M|            return;
 4060|  4.62M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  5.44M|    {
 1587|  5.44M|        return m_storage.has_value();
 1588|  5.44M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  3.20M|    {
 1592|  3.20M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  3.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  3.20M|        return *m_storage;
 1594|  3.20M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   539k|    {
 4170|   539k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   539k|#if !SCN_DISABLE_LOCALE
 4173|   539k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 152k, False: 387k]
  ------------------
 4174|   152k|            return read_impl<Range>(
 4175|   152k|                range, rd,
 4176|   152k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   152k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   152k|                },
 4179|   152k|                value, loc);
 4180|   152k|        }
 4181|   387k|#endif
 4182|       |
 4183|   387k|        return read_impl<Range>(
 4184|   387k|            range, rd,
 4185|   387k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   387k|                return r.read_source(SCN_FWD(args)...);
 4187|   387k|            },
 4188|   387k|            value);
 4189|   539k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   747k|    {
 4206|   747k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   747k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   747k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.4k, False: 722k]
  |  |  ------------------
  ------------------
 4208|  25.4k|            return unexpected(r.error());
 4209|  25.4k|        }
 4210|       |
 4211|   722k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   722k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   722k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   722k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   722k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.86k, False: 716k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.86k|    }                                                  \
  |  |  |  | 3667|   722k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   716k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   716k|        return ranges::next(range.begin(), n);
 4213|   722k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  2.37M|    {
  763|  2.37M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.37M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   152k|    {
  754|   152k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   152k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   152k|              cvref<T> obj = *get<T>(fn);
  745|   152k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   152k|                  obj(static_cast<decltype(args)>(args)...);
  747|   152k|              }
  748|   152k|              else {
  749|   152k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   152k|              }
  751|   152k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   152k|    {
  684|   152k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   152k|            return static_cast<T*>(s.m_cp);
  686|   152k|        }
  687|   152k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   152k|            return static_cast<T*>(s.m_p);
  689|   152k|        }
  690|   152k|        else {
  691|   152k|            return reinterpret_cast<T*>(s.m_fp);
  692|   152k|        }
  693|   152k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   152k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   152k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   152k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   490k|    {
 3679|   490k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   490k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   490k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 490k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   490k|        return read_source_impl(range);
 3685|   490k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|  2.37M|    {
 3705|  2.37M|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|  2.37M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.37M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.37M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.37M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.37M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  2.37M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  2.37M|        auto it = sign_result.first;
 3708|  2.37M|        m_sign = sign_result.second;
 3709|       |
 3710|  2.37M|        auto digits_begin = it;
 3711|  2.37M|        auto r = ranges::subrange{it, range.end()};
 3712|  2.37M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  2.37M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.37M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|  2.37M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|  2.37M|                SCN_TRY_ASSIGN(
 3717|  2.37M|                    it,
 3718|  2.37M|                    do_read_source_impl(
 3719|  2.37M|                        r,
 3720|  2.37M|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|  2.37M|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|  2.37M|            }
 3723|  2.37M|            else {
 3724|  2.37M|                auto cb = [&](const auto& rr)
 3725|  2.37M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  2.37M|                    auto res = read_all(rr);
 3727|  2.37M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  2.37M|                        return unexpected_scan_error(
 3729|  2.37M|                            scan_error::invalid_scanned_value,
 3730|  2.37M|                            "Invalid float value");
 3731|  2.37M|                    }
 3732|  2.37M|                    return res;
 3733|  2.37M|                };
 3734|  2.37M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|  2.37M|            }
 3736|  2.37M|        }
 3737|  2.37M|        else {
 3738|  2.37M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|  2.37M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  2.37M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 81.8k, False: 2.29M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  81.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  81.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  81.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  81.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  81.8k|    }                                                  \
  |  | 3667|  2.37M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  2.29M|                it,
 3740|  2.29M|                do_read_source_impl(
 3741|  2.29M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  2.29M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  2.29M|        }
 3744|       |
 3745|  2.29M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  2.29M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 2.26M, False: 22.4k]
  |  Branch (3747:48): [True: 2.25M, False: 15.8k]
  ------------------
 3748|  2.29M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 2.16M, False: 91.4k]
  ------------------
 3749|  2.29M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 2.15M, False: 2.66k]
  ------------------
 3750|  2.15M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  2.15M|        }
 3752|       |
 3753|  2.29M|        handle_separators();
 3754|       |
 3755|  2.29M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 2.29M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  2.29M|        return it;
 3768|  2.29M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|  2.37M|    {
 4000|  2.37M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  2.37M|        const bool allowed_nonhex =
 4002|  2.37M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  2.37M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  2.37M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 2.33M, False: 38.2k]
  |  Branch (4005:45): [True: 0, False: 2.33M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  2.37M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 38.2k, False: 2.33M]
  ------------------
 4011|  38.2k|            return *r;
 4012|  38.2k|        }
 4013|       |
 4014|  2.33M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 2.23M, False: 94.1k]
  |  Branch (4014:45): [True: 1.15k, False: 2.23M]
  ------------------
 4015|  1.15k|            return unexpected(r.error());
 4016|  1.15k|        }
 4017|  2.33M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 94.1k, False: 2.23M]
  ------------------
 4018|  94.1k|            return *r;
 4019|  94.1k|        }
 4020|       |
 4021|  2.23M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.61M, False: 624k]
  |  Branch (4021:28): [True: 520k, False: 1.09M]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   520k|            auto it = range.begin();
 4025|       |
 4026|   520k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 26.7k, False: 493k]
  ------------------
 4027|  26.7k|                m_kind = float_kind::hex_with_prefix;
 4028|  26.7k|                it = *r;
 4029|  26.7k|            }
 4030|   493k|            else {
 4031|   493k|                m_kind = float_kind::hex_without_prefix;
 4032|   493k|            }
 4033|       |
 4034|   520k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   520k|        }
 4036|  1.71M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 624k, False: 1.09M]
  |  Branch (4036:29): [True: 624k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   624k|            m_kind = float_kind::generic;
 4040|   624k|            return read_regular_float(range);
 4041|   624k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.09M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60.4k, False: 1.03M]
  |  |  ------------------
  ------------------
 4047|  60.4k|            m_kind = float_kind::hex_with_prefix;
 4048|  60.4k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  60.4k|        }
 4050|       |
 4051|  1.03M|        m_kind = float_kind::generic;
 4052|  1.03M|        return read_regular(range);
 4053|  1.09M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|  2.37M|    {
 3811|  2.37M|        auto it = range.begin();
 3812|  2.37M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 2.33M, False: 38.2k]
  ------------------
 3813|  2.33M|            return unexpected(r.error());
 3814|  2.33M|        }
 3815|  38.2k|        else {
 3816|  38.2k|            it = *r;
 3817|  38.2k|        }
 3818|       |
 3819|  38.2k|        if (auto r = read_matching_string_classic_nocase(
 3820|  38.2k|                ranges::subrange{it, range.end()}, "inity");
 3821|  38.2k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 22.4k, False: 15.8k]
  ------------------
 3822|  22.4k|            m_kind = float_kind::inf_short;
 3823|  22.4k|            return it;
 3824|  22.4k|        }
 3825|  15.8k|        else {
 3826|  15.8k|            m_kind = float_kind::inf_long;
 3827|  15.8k|            return *r;
 3828|  15.8k|        }
 3829|  38.2k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|  2.33M|    {
 3834|  2.33M|        auto it = range.begin();
 3835|  2.33M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 2.23M, False: 95.2k]
  ------------------
 3836|  2.23M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  2.23M|                scan_error::invalid_scanned_value,
 3838|  2.23M|                "Invalid floating-point NaN value"));
 3839|  2.23M|        }
 3840|  95.2k|        else {
 3841|  95.2k|            it = *r;
 3842|  95.2k|        }
 3843|       |
 3844|  95.2k|        if (auto r =
 3845|  95.2k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  95.2k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 91.4k, False: 3.81k]
  ------------------
 3847|  91.4k|            m_kind = float_kind::nan_simple;
 3848|  91.4k|            return it;
 3849|  91.4k|        }
 3850|  3.81k|        else {
 3851|  3.81k|            it = *r;
 3852|  3.81k|        }
 3853|       |
 3854|  3.81k|        auto payload_beg_it = it;
 3855|  3.81k|        it = read_while_code_unit(
 3856|  3.81k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  3.81k|                return is_ascii_char(ch) &&
 3858|  3.81k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  3.81k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  3.81k|            });
 3861|  3.81k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  3.81k|        m_kind = float_kind::nan_with_payload;
 3864|  3.81k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.66k, False: 1.15k]
  ------------------
 3865|  3.81k|                                             ')')) {
 3866|  2.66k|            return *r;
 3867|  2.66k|        }
 3868|  1.15k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.15k|                                     "Invalid floating-point NaN payload");
 3870|  3.81k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_:
  753|  3.81k|    {
  754|  3.81k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  23.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.5k|              cvref<T> obj = *get<T>(fn);
  745|  23.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.5k|              }
  748|  23.5k|              else {
  749|  23.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.5k|              }
  751|  23.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  23.5k|    {
  684|  23.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.5k|            return static_cast<T*>(s.m_cp);
  686|  23.5k|        }
  687|  23.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.5k|            return static_cast<T*>(s.m_p);
  689|  23.5k|        }
  690|  23.5k|        else {
  691|  23.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.5k|        }
  693|  23.5k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3856|  23.5k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  23.5k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 23.3k, False: 201]
  ------------------
 3858|  23.5k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 20.5k, False: 2.76k]
  |  Branch (3858:39): [True: 12.7k, False: 7.77k]
  |  Branch (3858:54): [True: 2.53k, False: 8.00k]
  |  Branch (3858:67): [True: 2.45k, False: 83]
  ------------------
 3859|  23.3k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 2.76k]
  |  Branch (3859:39): [True: 2.51k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 2.85k]
  ------------------
 3860|  23.5k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_LPv0EEEPSM_:
  661|  3.81k|        {
  662|  3.81k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|  1.61M|    {
 3804|  1.61M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.61M|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   581k|    {
 3904|   581k|        auto it = range.begin();
 3905|       |
 3906|   581k|        std::ptrdiff_t digits_count = 0;
 3907|   581k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   581k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   581k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.1k, False: 570k]
  |  |  ------------------
  ------------------
 3909|  10.1k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  10.1k|                scan_error::invalid_scanned_value,
 3911|  10.1k|                "Invalid hexadecimal floating-point value"));
 3912|  10.1k|        }
 3913|   570k|        else {
 3914|   570k|            digits_count += ranges::distance(it, *r);
 3915|   570k|            it = *r;
 3916|   570k|        }
 3917|       |
 3918|   570k|        m_integral_part_length = digits_count;
 3919|   570k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 74.6k, False: 496k]
  ------------------
 3920|   570k|                                             m_locale_options.decimal_point)) {
 3921|  74.6k|            it = *r;
 3922|  74.6k|        }
 3923|       |
 3924|   570k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 59.2k, False: 511k]
  ------------------
 3925|   570k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|  59.2k|            digits_count += ranges::distance(it, *r);
 3927|  59.2k|            it = *r;
 3928|  59.2k|        }
 3929|       |
 3930|   570k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   570k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 570k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|   570k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|   570k|        return it;
 3938|   570k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|  1.15M|    {
 3789|  1.15M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.15M]
  |  |  |  Branch (859:45): [True: 0, False: 1.15M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|  1.15M|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|  1.15M|        return read_while1_code_unit(
 3798|  1.15M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|  1.15M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  1.15M|    {
  754|  1.15M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  5.96M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.96M|              cvref<T> obj = *get<T>(fn);
  745|  5.96M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.96M|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.96M|              }
  748|  5.96M|              else {
  749|  5.96M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.96M|              }
  751|  5.96M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  5.96M|    {
  684|  5.96M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.96M|            return static_cast<T*>(s.m_cp);
  686|  5.96M|        }
  687|  5.96M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.96M|            return static_cast<T*>(s.m_p);
  689|  5.96M|        }
  690|  5.96M|        else {
  691|  5.96M|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.96M|        }
  693|  5.96M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3798|  5.96M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  1.15M|        {
  662|  1.15M|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|  1.98M|    {
 3876|  1.98M|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 244k, False: 1.73M]
  ------------------
 3877|   244k|            auto beg_exp_it = range.begin();
 3878|   244k|            auto it = *r;
 3879|       |
 3880|   244k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 244k, False: 491]
  ------------------
 3881|   244k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|   244k|                it = r_sign->first;
 3883|   244k|            }
 3884|       |
 3885|   244k|            if (auto r_exp = read_while1_code_unit(
 3886|   244k|                    ranges::subrange{it, range.end()},
 3887|   244k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   244k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.81k, False: 241k]
  |  |  ------------------
  ------------------
 3889|  2.81k|                it = beg_exp_it;
 3890|  2.81k|            }
 3891|   241k|            else {
 3892|   241k|                it = *r_exp;
 3893|   241k|            }
 3894|       |
 3895|   244k|            return it;
 3896|   244k|        }
 3897|  1.73M|        return range.begin();
 3898|  1.98M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_:
  753|   244k|    {
  754|   244k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|   779k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   779k|              cvref<T> obj = *get<T>(fn);
  745|   779k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   779k|                  obj(static_cast<decltype(args)>(args)...);
  747|   779k|              }
  748|   779k|              else {
  749|   779k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   779k|              }
  751|   779k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   779k|    {
  684|   779k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   779k|            return static_cast<T*>(s.m_cp);
  686|   779k|        }
  687|   779k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   779k|            return static_cast<T*>(s.m_p);
  689|   779k|        }
  690|   779k|        else {
  691|   779k|            return reinterpret_cast<T*>(s.m_fp);
  692|   779k|        }
  693|   779k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   779k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_LPv0EEEPSL_:
  661|   244k|        {
  662|   244k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|  1.65M|    {
 3944|  1.65M|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|  1.65M|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 1.44M, False: 207k]
  |  Branch (3945:50): [True: 30.8k, False: 1.41M]
  ------------------
 3946|       |
 3947|  1.65M|        auto it = ranges::begin(range);
 3948|  1.65M|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|  1.65M|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|  1.65M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54.8k, False: 1.60M]
  |  |  ------------------
  ------------------
 3952|  54.8k|            return r.transform_error(
 3953|  54.8k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  54.8k|                                              "Invalid floating-point value"));
 3955|  54.8k|        }
 3956|  1.60M|        else {
 3957|  1.60M|            digits_count += ranges::distance(it, *r);
 3958|  1.60M|            it = *r;
 3959|  1.60M|        }
 3960|       |
 3961|  1.60M|        m_integral_part_length = digits_count;
 3962|  1.60M|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 271k, False: 1.33M]
  ------------------
 3963|  1.60M|                                             m_locale_options.decimal_point)) {
 3964|   271k|            it = *r;
 3965|   271k|        }
 3966|       |
 3967|  1.60M|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 229k, False: 1.37M]
  ------------------
 3968|  1.60M|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   229k|            digits_count += ranges::distance(it, *r);
 3970|   229k|            it = *r;
 3971|   229k|        }
 3972|       |
 3973|  1.60M|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  1.60M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.60M]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  1.60M|        auto beg_exp_it = it;
 3979|  1.60M|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 1.41M, False: 192k]
  ------------------
 3980|  1.41M|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  1.41M|        }
 3982|  1.60M|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 29.9k, False: 1.57M]
  |  Branch (3982:29): [True: 15.8k, False: 14.1k]
  ------------------
 3983|  15.8k|            return unexpected_scan_error(
 3984|  15.8k|                scan_error::invalid_scanned_value,
 3985|  15.8k|                "No exponent given to scientific float");
 3986|  15.8k|        }
 3987|       |
 3988|  1.58M|        m_kind =
 3989|  1.58M|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 1.34M, False: 241k]
  ------------------
 3990|       |
 3991|  1.58M|        return it;
 3992|  1.60M|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|  3.26M|    {
 3774|  3.26M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  3.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.26M]
  |  |  |  Branch (859:45): [True: 0, False: 3.26M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  3.26M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  3.26M|        return read_while1_code_unit(
 3783|  3.26M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  3.26M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  3.26M|    {
  754|  3.26M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  18.8M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  18.8M|              cvref<T> obj = *get<T>(fn);
  745|  18.8M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  18.8M|                  obj(static_cast<decltype(args)>(args)...);
  747|  18.8M|              }
  748|  18.8M|              else {
  749|  18.8M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  18.8M|              }
  751|  18.8M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  18.8M|    {
  684|  18.8M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  18.8M|            return static_cast<T*>(s.m_cp);
  686|  18.8M|        }
  687|  18.8M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  18.8M|            return static_cast<T*>(s.m_p);
  689|  18.8M|        }
  690|  18.8M|        else {
  691|  18.8M|            return reinterpret_cast<T*>(s.m_fp);
  692|  18.8M|        }
  693|  18.8M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3783|  18.8M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  3.26M|        {
  662|  3.26M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  2.16M|    {
 1577|  2.16M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.16M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   152k|        {
  662|   152k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   387k|    {
  754|   387k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   387k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   387k|              cvref<T> obj = *get<T>(fn);
  745|   387k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   387k|                  obj(static_cast<decltype(args)>(args)...);
  747|   387k|              }
  748|   387k|              else {
  749|   387k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   387k|              }
  751|   387k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   387k|    {
  684|   387k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   387k|            return static_cast<T*>(s.m_cp);
  686|   387k|        }
  687|   387k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   387k|            return static_cast<T*>(s.m_p);
  689|   387k|        }
  690|   387k|        else {
  691|   387k|            return reinterpret_cast<T*>(s.m_fp);
  692|   387k|        }
  693|   387k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   387k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   387k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   387k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   387k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|  1.88M|    {
 3665|  1.88M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.88M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  1.88M|        return read_source_impl(range);
 3671|  1.88M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   387k|        {
  662|   387k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   526k|    {
 4170|   526k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   526k|#if !SCN_DISABLE_LOCALE
 4173|   526k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 148k, False: 378k]
  ------------------
 4174|   148k|            return read_impl<Range>(
 4175|   148k|                range, rd,
 4176|   148k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   148k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   148k|                },
 4179|   148k|                value, loc);
 4180|   148k|        }
 4181|   378k|#endif
 4182|       |
 4183|   378k|        return read_impl<Range>(
 4184|   378k|            range, rd,
 4185|   378k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   378k|                return r.read_source(SCN_FWD(args)...);
 4187|   378k|            },
 4188|   378k|            value);
 4189|   526k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   748k|    {
 4206|   748k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   748k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   748k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.1k, False: 733k]
  |  |  ------------------
  ------------------
 4208|  15.1k|            return unexpected(r.error());
 4209|  15.1k|        }
 4210|       |
 4211|   733k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   733k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   733k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   733k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   733k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16.9k, False: 716k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  16.9k|    }                                                  \
  |  |  |  | 3667|   733k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   716k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   716k|        return ranges::next(range.begin(), n);
 4213|   733k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  2.37M|    {
  763|  2.37M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.37M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   148k|    {
  754|   148k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   148k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   148k|              cvref<T> obj = *get<T>(fn);
  745|   148k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   148k|                  obj(static_cast<decltype(args)>(args)...);
  747|   148k|              }
  748|   148k|              else {
  749|   148k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   148k|              }
  751|   148k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   148k|    {
  684|   148k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   148k|            return static_cast<T*>(s.m_cp);
  686|   148k|        }
  687|   148k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   148k|            return static_cast<T*>(s.m_p);
  689|   148k|        }
  690|   148k|        else {
  691|   148k|            return reinterpret_cast<T*>(s.m_fp);
  692|   148k|        }
  693|   148k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   148k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   148k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   148k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   478k|    {
 3679|   478k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   478k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   478k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 478k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   478k|        return read_source_impl(range);
 3685|   478k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  2.37M|    {
 3705|  2.37M|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|  2.37M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.37M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.37M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.37M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.37M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  2.37M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  2.37M|        auto it = sign_result.first;
 3708|  2.37M|        m_sign = sign_result.second;
 3709|       |
 3710|  2.37M|        auto digits_begin = it;
 3711|  2.37M|        auto r = ranges::subrange{it, range.end()};
 3712|  2.37M|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  2.37M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.37M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  4.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.37M]
  |  |  |  Branch (859:45): [True: 0, False: 2.37M]
  |  |  |  Branch (859:45): [True: 0, False: 2.37M]
  |  |  ------------------
  ------------------
 3715|  2.37M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  2.37M|            else {
 3724|  2.37M|                auto cb = [&](const auto& rr)
 3725|  2.37M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  2.37M|                    auto res = read_all(rr);
 3727|  2.37M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  2.37M|                        return unexpected_scan_error(
 3729|  2.37M|                            scan_error::invalid_scanned_value,
 3730|  2.37M|                            "Invalid float value");
 3731|  2.37M|                    }
 3732|  2.37M|                    return res;
 3733|  2.37M|                };
 3734|  2.37M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|  2.37M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  2.37M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 47.3k, False: 2.32M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  47.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  47.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  47.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  47.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  47.3k|    }                                                  \
  |  | 3667|  2.37M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  2.32M|            }
 3736|  2.37M|        }
 3737|  2.32M|        else {
 3738|  2.32M|            SCN_TRY_ASSIGN(
 3739|  2.32M|                it,
 3740|  2.32M|                do_read_source_impl(
 3741|  2.32M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  2.32M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  2.32M|        }
 3744|       |
 3745|  2.32M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  2.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  2.32M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 2.30M, False: 22.0k]
  |  Branch (3747:48): [True: 2.29M, False: 15.7k]
  ------------------
 3748|  2.32M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 2.20M, False: 91.3k]
  ------------------
 3749|  2.32M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 2.19M, False: 2.65k]
  ------------------
 3750|  2.19M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  2.19M|        }
 3752|       |
 3753|  2.32M|        handle_separators();
 3754|       |
 3755|  2.32M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 2.32M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  2.32M|        return it;
 3768|  2.32M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  2.37M|    {
 3811|  2.37M|        auto it = range.begin();
 3812|  2.37M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 2.33M, False: 37.7k]
  ------------------
 3813|  2.33M|            return unexpected(r.error());
 3814|  2.33M|        }
 3815|  37.7k|        else {
 3816|  37.7k|            it = *r;
 3817|  37.7k|        }
 3818|       |
 3819|  37.7k|        if (auto r = read_matching_string_classic_nocase(
 3820|  37.7k|                ranges::subrange{it, range.end()}, "inity");
 3821|  37.7k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 22.0k, False: 15.7k]
  ------------------
 3822|  22.0k|            m_kind = float_kind::inf_short;
 3823|  22.0k|            return it;
 3824|  22.0k|        }
 3825|  15.7k|        else {
 3826|  15.7k|            m_kind = float_kind::inf_long;
 3827|  15.7k|            return *r;
 3828|  15.7k|        }
 3829|  37.7k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  2.33M|    {
 3834|  2.33M|        auto it = range.begin();
 3835|  2.33M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 2.24M, False: 95.1k]
  ------------------
 3836|  2.24M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  2.24M|                scan_error::invalid_scanned_value,
 3838|  2.24M|                "Invalid floating-point NaN value"));
 3839|  2.24M|        }
 3840|  95.1k|        else {
 3841|  95.1k|            it = *r;
 3842|  95.1k|        }
 3843|       |
 3844|  95.1k|        if (auto r =
 3845|  95.1k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  95.1k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 91.3k, False: 3.78k]
  ------------------
 3847|  91.3k|            m_kind = float_kind::nan_simple;
 3848|  91.3k|            return it;
 3849|  91.3k|        }
 3850|  3.78k|        else {
 3851|  3.78k|            it = *r;
 3852|  3.78k|        }
 3853|       |
 3854|  3.78k|        auto payload_beg_it = it;
 3855|  3.78k|        it = read_while_code_unit(
 3856|  3.78k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  3.78k|                return is_ascii_char(ch) &&
 3858|  3.78k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  3.78k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  3.78k|            });
 3861|  3.78k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  3.78k|        m_kind = float_kind::nan_with_payload;
 3864|  3.78k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.65k, False: 1.12k]
  ------------------
 3865|  3.78k|                                             ')')) {
 3866|  2.65k|            return *r;
 3867|  2.65k|        }
 3868|  1.12k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.12k|                                     "Invalid floating-point NaN payload");
 3870|  3.78k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_:
  753|  3.78k|    {
  754|  3.78k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  23.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.4k|              cvref<T> obj = *get<T>(fn);
  745|  23.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.4k|              }
  748|  23.4k|              else {
  749|  23.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.4k|              }
  751|  23.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  23.4k|    {
  684|  23.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.4k|            return static_cast<T*>(s.m_cp);
  686|  23.4k|        }
  687|  23.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.4k|            return static_cast<T*>(s.m_p);
  689|  23.4k|        }
  690|  23.4k|        else {
  691|  23.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.4k|        }
  693|  23.4k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3856|  23.4k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  23.4k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 23.2k, False: 173]
  ------------------
 3858|  23.4k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 20.5k, False: 2.76k]
  |  Branch (3858:39): [True: 12.7k, False: 7.76k]
  |  Branch (3858:54): [True: 2.52k, False: 8.00k]
  |  Branch (3858:67): [True: 2.44k, False: 83]
  ------------------
 3859|  23.2k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.32k, False: 2.76k]
  |  Branch (3859:39): [True: 2.51k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 2.84k]
  ------------------
 3860|  23.4k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_LPv0EEEPSJ_:
  661|  3.78k|        {
  662|  3.78k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|  1.63M|    {
 3804|  1.63M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.63M|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|  1.27M|{
 1996|  1.27M|    auto it = read_while_code_unit(range, pred);
 1997|  1.27M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 520k, False: 750k]
  ------------------
 1998|   520k|        return unexpected(parse_error::error);
 1999|   520k|    }
 2000|   750k|    return it;
 2001|  1.27M|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|   394k|    {
 3876|   394k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 78.8k, False: 315k]
  ------------------
 3877|  78.8k|            auto beg_exp_it = range.begin();
 3878|  78.8k|            auto it = *r;
 3879|       |
 3880|  78.8k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 78.6k, False: 156]
  ------------------
 3881|  78.8k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  78.6k|                it = r_sign->first;
 3883|  78.6k|            }
 3884|       |
 3885|  78.8k|            if (auto r_exp = read_while1_code_unit(
 3886|  78.8k|                    ranges::subrange{it, range.end()},
 3887|  78.8k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  78.8k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  78.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.02k, False: 77.8k]
  |  |  ------------------
  ------------------
 3889|  1.02k|                it = beg_exp_it;
 3890|  1.02k|            }
 3891|  77.8k|            else {
 3892|  77.8k|                it = *r_exp;
 3893|  77.8k|            }
 3894|       |
 3895|  78.8k|            return it;
 3896|  78.8k|        }
 3897|   315k|        return range.begin();
 3898|   394k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_:
  753|  78.8k|    {
  754|  78.8k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  743|   244k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   244k|              cvref<T> obj = *get<T>(fn);
  745|   244k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   244k|                  obj(static_cast<decltype(args)>(args)...);
  747|   244k|              }
  748|   244k|              else {
  749|   244k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   244k|              }
  751|   244k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   244k|    {
  684|   244k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   244k|            return static_cast<T*>(s.m_cp);
  686|   244k|        }
  687|   244k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   244k|            return static_cast<T*>(s.m_p);
  689|   244k|        }
  690|   244k|        else {
  691|   244k|            return reinterpret_cast<T*>(s.m_fp);
  692|   244k|        }
  693|   244k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   244k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  661|  78.8k|        {
  662|  78.8k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   610k|    {
 3944|   610k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   610k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 407k, False: 203k]
  |  Branch (3945:50): [True: 31.0k, False: 376k]
  ------------------
 3946|       |
 3947|   610k|        auto it = ranges::begin(range);
 3948|   610k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   610k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   610k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   610k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.1k, False: 581k]
  |  |  ------------------
  ------------------
 3952|  29.1k|            return r.transform_error(
 3953|  29.1k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  29.1k|                                              "Invalid floating-point value"));
 3955|  29.1k|        }
 3956|   581k|        else {
 3957|   581k|            digits_count += ranges::distance(it, *r);
 3958|   581k|            it = *r;
 3959|   581k|        }
 3960|       |
 3961|   581k|        m_integral_part_length = digits_count;
 3962|   581k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 105k, False: 475k]
  ------------------
 3963|   581k|                                             m_locale_options.decimal_point)) {
 3964|   105k|            it = *r;
 3965|   105k|        }
 3966|       |
 3967|   581k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 91.0k, False: 490k]
  ------------------
 3968|   581k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|  91.0k|            digits_count += ranges::distance(it, *r);
 3970|  91.0k|            it = *r;
 3971|  91.0k|        }
 3972|       |
 3973|   581k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   581k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 581k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   581k|        auto beg_exp_it = it;
 3979|   581k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 394k, False: 187k]
  ------------------
 3980|   394k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   394k|        }
 3982|   581k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 29.9k, False: 551k]
  |  Branch (3982:29): [True: 15.8k, False: 14.1k]
  ------------------
 3983|  15.8k|            return unexpected_scan_error(
 3984|  15.8k|                scan_error::invalid_scanned_value,
 3985|  15.8k|                "No exponent given to scientific float");
 3986|  15.8k|        }
 3987|       |
 3988|   565k|        m_kind =
 3989|   565k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 487k, False: 77.8k]
  ------------------
 3990|       |
 3991|   565k|        return it;
 3992|   581k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|  1.19M|    {
 3774|  1.19M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.19M]
  |  |  |  Branch (859:45): [True: 0, False: 1.19M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  1.19M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  1.19M|        return read_while1_code_unit(
 3783|  1.19M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  1.19M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|  1.19M|    {
  754|  1.19M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|  7.30M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.30M|              cvref<T> obj = *get<T>(fn);
  745|  7.30M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.30M|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.30M|              }
  748|  7.30M|              else {
  749|  7.30M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.30M|              }
  751|  7.30M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  7.30M|    {
  684|  7.30M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.30M|            return static_cast<T*>(s.m_cp);
  686|  7.30M|        }
  687|  7.30M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.30M|            return static_cast<T*>(s.m_p);
  689|  7.30M|        }
  690|  7.30M|        else {
  691|  7.30M|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.30M|        }
  693|  7.30M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|  7.30M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|  1.19M|        {
  662|  1.19M|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  2.37M|    {
 4000|  2.37M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  2.37M|        const bool allowed_nonhex =
 4002|  2.37M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  2.37M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  2.37M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 2.33M, False: 37.7k]
  |  Branch (4005:45): [True: 0, False: 2.33M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  2.37M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 37.7k, False: 2.33M]
  ------------------
 4011|  37.7k|            return *r;
 4012|  37.7k|        }
 4013|       |
 4014|  2.33M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 2.24M, False: 93.9k]
  |  Branch (4014:45): [True: 1.12k, False: 2.24M]
  ------------------
 4015|  1.12k|            return unexpected(r.error());
 4016|  1.12k|        }
 4017|  2.33M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 93.9k, False: 2.24M]
  ------------------
 4018|  93.9k|            return *r;
 4019|  93.9k|        }
 4020|       |
 4021|  2.24M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.63M, False: 610k]
  |  Branch (4021:28): [True: 506k, False: 1.12M]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   506k|            auto it = range.begin();
 4025|       |
 4026|   506k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 26.0k, False: 479k]
  ------------------
 4027|  26.0k|                m_kind = float_kind::hex_with_prefix;
 4028|  26.0k|                it = *r;
 4029|  26.0k|            }
 4030|   479k|            else {
 4031|   479k|                m_kind = float_kind::hex_without_prefix;
 4032|   479k|            }
 4033|       |
 4034|   506k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   506k|        }
 4036|  1.73M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 610k, False: 1.12M]
  |  Branch (4036:29): [True: 610k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   610k|            m_kind = float_kind::generic;
 4040|   610k|            return read_regular_float(range);
 4041|   610k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.12M|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64.0k, False: 1.06M]
  |  |  ------------------
  ------------------
 4047|  64.0k|            m_kind = float_kind::hex_with_prefix;
 4048|  64.0k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  64.0k|        }
 4050|       |
 4051|  1.06M|        m_kind = float_kind::generic;
 4052|  1.06M|        return read_regular(range);
 4053|  1.12M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|  1.63M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.63M|                    auto res = read_all(rr);
 3727|  1.63M|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.24k, False: 1.63M]
  |  |  ------------------
  ------------------
 3728|  1.24k|                        return unexpected_scan_error(
 3729|  1.24k|                            scan_error::invalid_scanned_value,
 3730|  1.24k|                            "Invalid float value");
 3731|  1.24k|                    }
 3732|  1.63M|                    return res;
 3733|  1.63M|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  1.63M|{
 1839|  1.63M|    return ranges::next(range.begin(), range.end());
 1840|  1.63M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.63M|    {
  313|  1.63M|        ranges::advance(x, bound);
  314|  1.63M|        return x;
  315|  1.63M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.63M|    {
  275|  1.63M|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.63M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.63M|    {
  190|  1.63M|        i = std::move(bound);
  191|  1.63M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|  2.20M|    {
 1577|  2.20M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.20M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|  2.20M|    {
 1621|  2.20M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.20M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.20M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.20M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.20M|            m_storage.reset();
 1627|  2.20M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.20M|        }
 1629|  2.20M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  2.20M|                                          std::basic_string<CharT>>) {
 1631|  2.20M|            m_storage.emplace(SCN_FWD(range));
 1632|  2.20M|            m_view = string_view_type{*m_storage};
 1633|  2.20M|        }
 1634|  2.20M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.20M|                                          typename detail::basic_scan_buffer<
 1636|  2.20M|                                              value_t>::forward_iterator> &&
 1637|  2.20M|                           ranges::common_range<Range>) {
 1638|  2.20M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.20M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.20M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.20M|                             detail::to_address(end_seg.end()))) {
 1642|  2.20M|                auto& str = m_storage.emplace();
 1643|  2.20M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.20M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.20M|                m_view = string_view_type{str};
 1646|  2.20M|                return;
 1647|  2.20M|            }
 1648|       |
 1649|  2.20M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.20M|                                                            end_seg.data());
 1651|  2.20M|            m_storage.reset();
 1652|  2.20M|        }
 1653|  2.20M|        else {
 1654|  2.20M|            auto& str = m_storage.emplace();
 1655|  2.20M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.20M|                str.reserve(range.size());
 1657|  2.20M|            }
 1658|  2.20M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.20M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.20M|                          std::back_inserter(str));
 1661|  2.20M|            }
 1662|  2.20M|            else {
 1663|  2.20M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.20M|                     ++it) {
 1665|  2.20M|                    str.push_back(*it);
 1666|  2.20M|                }
 1667|  2.20M|            }
 1668|  2.20M|            m_view = string_view_type{str};
 1669|  2.20M|        }
 1670|  2.20M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   148k|        {
  662|   148k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   378k|    {
  754|   378k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   378k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   378k|              cvref<T> obj = *get<T>(fn);
  745|   378k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   378k|                  obj(static_cast<decltype(args)>(args)...);
  747|   378k|              }
  748|   378k|              else {
  749|   378k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   378k|              }
  751|   378k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   378k|    {
  684|   378k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   378k|            return static_cast<T*>(s.m_cp);
  686|   378k|        }
  687|   378k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   378k|            return static_cast<T*>(s.m_p);
  689|   378k|        }
  690|   378k|        else {
  691|   378k|            return reinterpret_cast<T*>(s.m_fp);
  692|   378k|        }
  693|   378k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   378k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   378k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   378k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   378k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  1.89M|    {
 3665|  1.89M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.89M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  1.89M|        return read_source_impl(range);
 3671|  1.89M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   378k|        {
  662|   378k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6177|   585k|    {
 6178|   585k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   585k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|   585k|            auto rd = make_reader<T, char_type>();
 6183|   585k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|   585k|                return unexpected(e);
 6185|   585k|            }
 6186|       |
 6187|   585k|            return impl(rd, range, value);
 6188|   585k|        }
 6189|   585k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|   585k|            auto rd = make_reader<T, char_type>();
 6191|   585k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   585k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 585k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|   585k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 585k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|   585k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|   585k|                return impl(rd, range, value);
 6198|   585k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|   585k|        else {
 6206|   585k|            SCN_EXPECT(false);
 6207|   585k|            SCN_UNREACHABLE;
 6208|   585k|        }
 6209|   585k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|   585k|    {
 6120|   585k|        const bool need_skipped_width =
 6121|   585k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 585k]
  |  Branch (6121:33): [True: 0, False: 585k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   585k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   585k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   585k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   585k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   585k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.20k, False: 577k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.20k|    }                                                  \
  |  |  |  | 3667|   585k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   577k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   577k|        auto [it, prefix_width] = prefix_result;
 6126|   577k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   577k|        std::ptrdiff_t value_width = 0;
 6130|   577k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 577k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   577k|        else {
 6146|   577k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   577k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   577k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   577k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 23.4k, False: 554k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  23.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  23.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  23.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  23.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  23.4k|    }                                                  \
  |  | 3667|   577k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   577k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   554k|                                             specs, value, loc));
 6148|       |
 6149|   554k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 554k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   554k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   554k|        std::ptrdiff_t postfix_width = 0;
 6158|   554k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 548k, False: 5.57k]
  ------------------
 6159|   548k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   548k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   548k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   548k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   548k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 548k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   548k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   548k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   548k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   548k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   548k|                                 value_width));
 6163|   548k|            std::tie(it, postfix_width) = postfix_result;
 6164|   548k|        }
 6165|       |
 6166|   554k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   554k|                                                 value_width, postfix_width);
 6168|   554k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 554k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   554k|        return it;
 6173|   554k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  1.57M|    {
 3691|  1.57M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.57M|        const std::ptrdiff_t sign_len =
 3694|  1.57M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 463k, False: 1.11M]
  ------------------
 3695|       |
 3696|  1.57M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  1.57M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.57M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.57M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 17.8k, False: 1.55M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  17.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  17.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  17.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  17.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  17.8k|    }                                                  \
  |  |  |  | 3667|  1.57M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.55M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.57M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   577k|    {
 4170|   577k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   577k|#if !SCN_DISABLE_LOCALE
 4173|   577k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 167k, False: 409k]
  ------------------
 4174|   167k|            return read_impl<Range>(
 4175|   167k|                range, rd,
 4176|   167k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   167k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   167k|                },
 4179|   167k|                value, loc);
 4180|   167k|        }
 4181|   409k|#endif
 4182|       |
 4183|   409k|        return read_impl<Range>(
 4184|   409k|            range, rd,
 4185|   409k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   409k|                return r.read_source(SCN_FWD(args)...);
 4187|   409k|            },
 4188|   409k|            value);
 4189|   577k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   807k|    {
 4206|   807k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   807k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   807k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.6k, False: 780k]
  |  |  ------------------
  ------------------
 4208|  27.6k|            return unexpected(r.error());
 4209|  27.6k|        }
 4210|       |
 4211|   780k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   780k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   780k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   780k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   780k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.56k, False: 777k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.56k|    }                                                  \
  |  |  |  | 3667|   780k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   777k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   777k|        return ranges::next(range.begin(), n);
 4213|   780k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   167k|    {
  754|   167k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   167k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   167k|              cvref<T> obj = *get<T>(fn);
  745|   167k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   167k|                  obj(static_cast<decltype(args)>(args)...);
  747|   167k|              }
  748|   167k|              else {
  749|   167k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   167k|              }
  751|   167k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   167k|    {
  684|   167k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   167k|            return static_cast<T*>(s.m_cp);
  686|   167k|        }
  687|   167k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   167k|            return static_cast<T*>(s.m_p);
  689|   167k|        }
  690|   167k|        else {
  691|   167k|            return reinterpret_cast<T*>(s.m_fp);
  692|   167k|        }
  693|   167k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   167k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   167k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   167k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   167k|        {
  662|   167k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   409k|    {
  754|   409k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   409k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   409k|              cvref<T> obj = *get<T>(fn);
  745|   409k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   409k|                  obj(static_cast<decltype(args)>(args)...);
  747|   409k|              }
  748|   409k|              else {
  749|   409k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   409k|              }
  751|   409k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   409k|    {
  684|   409k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   409k|            return static_cast<T*>(s.m_cp);
  686|   409k|        }
  687|   409k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   409k|            return static_cast<T*>(s.m_p);
  689|   409k|        }
  690|   409k|        else {
  691|   409k|            return reinterpret_cast<T*>(s.m_fp);
  692|   409k|        }
  693|   409k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   409k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   409k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   409k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   409k|        {
  662|   409k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   563k|    {
 4170|   563k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   563k|#if !SCN_DISABLE_LOCALE
 4173|   563k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 163k, False: 399k]
  ------------------
 4174|   163k|            return read_impl<Range>(
 4175|   163k|                range, rd,
 4176|   163k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   163k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   163k|                },
 4179|   163k|                value, loc);
 4180|   163k|        }
 4181|   399k|#endif
 4182|       |
 4183|   399k|        return read_impl<Range>(
 4184|   399k|            range, rd,
 4185|   399k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   399k|                return r.read_source(SCN_FWD(args)...);
 4187|   399k|            },
 4188|   399k|            value);
 4189|   563k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   809k|    {
 4206|   809k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   809k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   809k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.8k, False: 793k]
  |  |  ------------------
  ------------------
 4208|  15.8k|            return unexpected(r.error());
 4209|  15.8k|        }
 4210|       |
 4211|   793k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   793k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   793k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   793k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   793k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.2k, False: 777k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  15.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  15.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  15.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  15.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  15.2k|    }                                                  \
  |  |  |  | 3667|   793k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   777k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   777k|        return ranges::next(range.begin(), n);
 4213|   793k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   163k|    {
  754|   163k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   163k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   163k|              cvref<T> obj = *get<T>(fn);
  745|   163k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   163k|                  obj(static_cast<decltype(args)>(args)...);
  747|   163k|              }
  748|   163k|              else {
  749|   163k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   163k|              }
  751|   163k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   163k|    {
  684|   163k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   163k|            return static_cast<T*>(s.m_cp);
  686|   163k|        }
  687|   163k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   163k|            return static_cast<T*>(s.m_p);
  689|   163k|        }
  690|   163k|        else {
  691|   163k|            return reinterpret_cast<T*>(s.m_fp);
  692|   163k|        }
  693|   163k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   163k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   163k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   163k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   163k|        {
  662|   163k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   399k|    {
  754|   399k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   399k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   399k|              cvref<T> obj = *get<T>(fn);
  745|   399k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   399k|                  obj(static_cast<decltype(args)>(args)...);
  747|   399k|              }
  748|   399k|              else {
  749|   399k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   399k|              }
  751|   399k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   399k|    {
  684|   399k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   399k|            return static_cast<T*>(s.m_cp);
  686|   399k|        }
  687|   399k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   399k|            return static_cast<T*>(s.m_p);
  689|   399k|        }
  690|   399k|        else {
  691|   399k|            return reinterpret_cast<T*>(s.m_fp);
  692|   399k|        }
  693|   399k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   399k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   399k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   399k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   399k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   399k|        {
  662|   399k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6177|   591k|    {
 6178|   591k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   591k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|   591k|            auto rd = make_reader<T, char_type>();
 6183|   591k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|   591k|                return unexpected(e);
 6185|   591k|            }
 6186|       |
 6187|   591k|            return impl(rd, range, value);
 6188|   591k|        }
 6189|   591k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|   591k|            auto rd = make_reader<T, char_type>();
 6191|   591k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   591k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 591k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|   591k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 591k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|   591k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|   591k|                return impl(rd, range, value);
 6198|   591k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|   591k|        else {
 6206|   591k|            SCN_EXPECT(false);
 6207|   591k|            SCN_UNREACHABLE;
 6208|   591k|        }
 6209|   591k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|   591k|    {
 6120|   591k|        const bool need_skipped_width =
 6121|   591k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 591k]
  |  Branch (6121:33): [True: 0, False: 591k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   591k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   591k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   591k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   591k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   591k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.60k, False: 584k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.60k|    }                                                  \
  |  |  |  | 3667|   591k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   584k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   584k|        auto [it, prefix_width] = prefix_result;
 6126|   584k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   584k|        std::ptrdiff_t value_width = 0;
 6130|   584k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 584k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   584k|        else {
 6146|   584k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   584k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   584k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   584k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 23.0k, False: 561k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  23.0k|    }                                                  \
  |  | 3667|   584k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   584k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   561k|                                             specs, value, loc));
 6148|       |
 6149|   561k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 561k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   561k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   561k|        std::ptrdiff_t postfix_width = 0;
 6158|   561k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 555k, False: 5.92k]
  ------------------
 6159|   555k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   555k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   555k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   555k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   555k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 555k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   555k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   555k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   555k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   555k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   555k|                                 value_width));
 6163|   555k|            std::tie(it, postfix_width) = postfix_result;
 6164|   555k|        }
 6165|       |
 6166|   561k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   561k|                                                 value_width, postfix_width);
 6168|   561k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 561k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   561k|        return it;
 6173|   561k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|  1.59M|    {
 3691|  1.59M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.59M|        const std::ptrdiff_t sign_len =
 3694|  1.59M|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 474k, False: 1.11M]
  ------------------
 3695|       |
 3696|  1.59M|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  1.59M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.59M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.59M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.1k, False: 1.57M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  15.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  15.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  15.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  15.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  15.1k|    }                                                  \
  |  |  |  | 3667|  1.59M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  1.57M|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.59M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   584k|    {
 4170|   584k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   584k|#if !SCN_DISABLE_LOCALE
 4173|   584k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 170k, False: 413k]
  ------------------
 4174|   170k|            return read_impl<Range>(
 4175|   170k|                range, rd,
 4176|   170k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   170k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   170k|                },
 4179|   170k|                value, loc);
 4180|   170k|        }
 4181|   413k|#endif
 4182|       |
 4183|   413k|        return read_impl<Range>(
 4184|   413k|            range, rd,
 4185|   413k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   413k|                return r.read_source(SCN_FWD(args)...);
 4187|   413k|            },
 4188|   413k|            value);
 4189|   584k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   817k|    {
 4206|   817k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   817k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   817k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.8k, False: 788k]
  |  |  ------------------
  ------------------
 4208|  28.8k|            return unexpected(r.error());
 4209|  28.8k|        }
 4210|       |
 4211|   788k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   788k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   788k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   788k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   788k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 806, False: 787k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    806|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    806|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    806|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    806|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    806|    }                                                  \
  |  |  |  | 3667|   788k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   787k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   787k|        return ranges::next(range.begin(), n);
 4213|   788k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|   170k|    {
  754|   170k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   170k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   170k|              cvref<T> obj = *get<T>(fn);
  745|   170k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   170k|                  obj(static_cast<decltype(args)>(args)...);
  747|   170k|              }
  748|   170k|              else {
  749|   170k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   170k|              }
  751|   170k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   170k|    {
  684|   170k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   170k|            return static_cast<T*>(s.m_cp);
  686|   170k|        }
  687|   170k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   170k|            return static_cast<T*>(s.m_p);
  689|   170k|        }
  690|   170k|        else {
  691|   170k|            return reinterpret_cast<T*>(s.m_fp);
  692|   170k|        }
  693|   170k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   170k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   170k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   170k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   170k|        {
  662|   170k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|   413k|    {
  754|   413k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|   413k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   413k|              cvref<T> obj = *get<T>(fn);
  745|   413k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   413k|                  obj(static_cast<decltype(args)>(args)...);
  747|   413k|              }
  748|   413k|              else {
  749|   413k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   413k|              }
  751|   413k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   413k|    {
  684|   413k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   413k|            return static_cast<T*>(s.m_cp);
  686|   413k|        }
  687|   413k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   413k|            return static_cast<T*>(s.m_p);
  689|   413k|        }
  690|   413k|        else {
  691|   413k|            return reinterpret_cast<T*>(s.m_fp);
  692|   413k|        }
  693|   413k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   413k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   413k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   413k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   413k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|   413k|        {
  662|   413k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   569k|    {
 4170|   569k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   569k|#if !SCN_DISABLE_LOCALE
 4173|   569k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 166k, False: 403k]
  ------------------
 4174|   166k|            return read_impl<Range>(
 4175|   166k|                range, rd,
 4176|   166k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   166k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   166k|                },
 4179|   166k|                value, loc);
 4180|   166k|        }
 4181|   403k|#endif
 4182|       |
 4183|   403k|        return read_impl<Range>(
 4184|   403k|            range, rd,
 4185|   403k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   403k|                return r.read_source(SCN_FWD(args)...);
 4187|   403k|            },
 4188|   403k|            value);
 4189|   569k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   819k|    {
 4206|   819k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   819k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   819k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.3k, False: 803k]
  |  |  ------------------
  ------------------
 4208|  16.3k|            return unexpected(r.error());
 4209|  16.3k|        }
 4210|       |
 4211|   803k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   803k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   803k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   803k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   803k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.3k, False: 788k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.3k|    }                                                  \
  |  |  |  | 3667|   803k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   788k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   788k|        return ranges::next(range.begin(), n);
 4213|   803k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|   166k|    {
  754|   166k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   166k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   166k|              cvref<T> obj = *get<T>(fn);
  745|   166k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   166k|                  obj(static_cast<decltype(args)>(args)...);
  747|   166k|              }
  748|   166k|              else {
  749|   166k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   166k|              }
  751|   166k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   166k|    {
  684|   166k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   166k|            return static_cast<T*>(s.m_cp);
  686|   166k|        }
  687|   166k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   166k|            return static_cast<T*>(s.m_p);
  689|   166k|        }
  690|   166k|        else {
  691|   166k|            return reinterpret_cast<T*>(s.m_fp);
  692|   166k|        }
  693|   166k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|   166k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   166k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   166k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   166k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   166k|        {
  662|   166k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|   403k|    {
  754|   403k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|   403k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   403k|              cvref<T> obj = *get<T>(fn);
  745|   403k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   403k|                  obj(static_cast<decltype(args)>(args)...);
  747|   403k|              }
  748|   403k|              else {
  749|   403k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   403k|              }
  751|   403k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   403k|    {
  684|   403k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   403k|            return static_cast<T*>(s.m_cp);
  686|   403k|        }
  687|   403k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   403k|            return static_cast<T*>(s.m_p);
  689|   403k|        }
  690|   403k|        else {
  691|   403k|            return reinterpret_cast<T*>(s.m_fp);
  692|   403k|        }
  693|   403k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   403k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   403k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   403k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   403k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|   403k|        {
  662|   403k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  2.39M|{
 1039|  2.39M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  2.39M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  2.39M|        return r;
 1042|  2.39M|    }
 1043|  2.39M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  2.39M|                           ranges::const_iterator_t<Range>,
 1045|  2.39M|                           typename detail::basic_scan_buffer<
 1046|  2.39M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  2.39M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|  2.39M|            auto seg = r.begin().contiguous_segment();
 1049|  2.39M|            auto dist =
 1050|  2.39M|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  2.39M|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  2.39M|        }
 1053|  2.39M|        else {
 1054|  2.39M|            return r.begin().contiguous_segment();
 1055|  2.39M|        }
 1056|  2.39M|    }
 1057|  2.39M|    else {
 1058|  2.39M|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.39M|    }
 1060|  2.39M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  2.09M|{
 2061|  2.09M|    auto it = range.begin();
 2062|  3.98M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 3.95M, False: 22.2k]
  ------------------
 2063|  3.95M|        const auto val =
 2064|  3.95M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  3.95M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  3.95M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.95M, False: 6.77k]
  |  |  ------------------
  ------------------
 2066|  3.95M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  3.95M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  3.95M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.07M, False: 1.87M]
  ------------------
 2069|  2.07M|                return it;
 2070|  2.07M|            }
 2071|  3.95M|        }
 2072|  1.88M|        it = val.iterator;
 2073|  1.88M|    }
 2074|       |
 2075|  22.2k|    return it;
 2076|  2.09M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  3.95M|{
 1899|  3.95M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  3.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  3.95M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  3.95M|    auto it = range.begin();
 1903|  3.95M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  3.95M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.77k, False: 3.95M]
  |  |  ------------------
  ------------------
 1906|  6.77k|        ++it;
 1907|  6.77k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  6.77k|        return {it, {}};
 1909|  6.77k|    }
 1910|       |
 1911|  3.95M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 3.89M, False: 54.8k]
  ------------------
 1912|  3.89M|        ++it;
 1913|  3.89M|        return {it, string_type(1, *range.begin())};
 1914|  3.89M|    }
 1915|       |
 1916|  54.8k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  54.8k|    return {it, string_type{range.begin(), it}};
 1918|  3.95M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  6.77k|{
 1155|  6.77k|    auto it = input.begin();
 1156|  60.3k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 58.7k, False: 1.54k]
  ------------------
 1157|  58.7k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 5.22k, False: 53.5k]
  ------------------
 1158|  5.22k|            break;
 1159|  5.22k|        }
 1160|  58.7k|    }
 1161|  6.77k|    return it;
 1162|  6.77k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  54.8k|    {
  283|  54.8k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  54.8k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  54.8k|    {
  252|  54.8k|        constexpr iter_difference_t<I> zero{0};
  253|  54.8k|        iter_difference_t<I> counter{0};
  254|       |
  255|   167k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 113k, False: 53.7k]
  |  Branch (255:30): [True: 112k, False: 1.11k]
  ------------------
  256|   112k|            ++i;
  257|   112k|            ++counter;
  258|   112k|        }
  259|       |
  260|  54.8k|        return counter;
  261|  54.8k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  3.95M|    {
 1890|  3.95M|        return !codepoint.empty();
 1891|  3.95M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  2.09M|{
 2082|  2.09M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.09M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  2.39M|{
 2951|  2.39M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.39M, False: 0]
  ------------------
 2952|  2.39M|        auto it = read_while_classic_space(range);
 2953|  2.39M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.39M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.2k, False: 2.37M]
  |  |  ------------------
  ------------------
 2955|  22.2k|            return unexpected(e);
 2956|  22.2k|        }
 2957|       |
 2958|  2.37M|        return it;
 2959|  2.39M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.39M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  2.39M|{
 2117|  2.39M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.39M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.39M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.39M|        auto buf = make_contiguous_buffer(range);
 2121|  2.39M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.39M|        return ranges::next(range.begin(),
 2123|  2.39M|                            ranges::distance(buf.view().begin(), it));
 2124|  2.39M|    }
 2125|  2.39M|    else {
 2126|  2.39M|        auto it = range.begin();
 2127|       |
 2128|  2.39M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  2.39M|            auto seg = get_contiguous_beginning(range);
 2130|  2.39M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.39M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 295k, False: 2.09M]
  ------------------
 2132|   295k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   295k|            }
 2134|  2.09M|            ranges::advance(it, seg.size());
 2135|  2.09M|        }
 2136|       |
 2137|  2.09M|        return read_while_code_point(
 2138|  2.09M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.39M|    }
 2140|  2.39M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  2.09M|    {
  754|  2.09M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  3.95M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.95M|              cvref<T> obj = *get<T>(fn);
  745|  3.95M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.95M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.95M|              }
  748|  3.95M|              else {
  749|  3.95M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.95M|              }
  751|  3.95M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.95M|    {
  684|  3.95M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.95M|            return static_cast<T*>(s.m_cp);
  686|  3.95M|        }
  687|  3.95M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.95M|            return static_cast<T*>(s.m_p);
  689|  3.95M|        }
  690|  3.95M|        else {
  691|  3.95M|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.95M|        }
  693|  3.95M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  3.95M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  2.09M|        {
  662|  2.09M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   291k|{
  981|   291k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   291k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   291k|        return true;
  984|   291k|    }
  985|   291k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   291k|                           ranges::const_iterator_t<Range>,
  987|   291k|                           typename detail::basic_scan_buffer<
  988|   291k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   291k|        auto beg = r.begin();
  990|   291k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 291k, False: 0]
  ------------------
  991|   291k|            return false;
  992|   291k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   291k|    else {
 1006|   291k|        return false;
 1007|   291k|    }
 1008|   291k|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   222k|    {
 6037|   222k|        const bool need_skipped_width =
 6038|   222k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 222k]
  |  Branch (6038:33): [True: 0, False: 222k]
  ------------------
 6039|   222k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   222k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 222k]
  ------------------
 6043|   222k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 222k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   222k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 222k, False: 0]
  |  Branch (6047:56): [True: 222k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   222k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 222k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   443k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   222k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   222k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   222k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.62k, False: 220k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.62k|    }                                                  \
  |  |  |  | 3667|   222k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   220k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   443k|                            make_eof_scan_error));
 6058|       |
 6059|   443k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 220k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   220k|            return result_type{it, 0};
 6067|   443k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   222k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|   347k|{
 1976|   347k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   347k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|   347k|{
 1957|   347k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   347k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   347k|    }
 1960|   347k|    else {
 1961|   347k|        auto first = range.begin();
 1962|   409k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 408k, False: 1.13k]
  ------------------
 1963|   408k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 346k, False: 62.1k]
  ------------------
 1964|   346k|                return first;
 1965|   346k|            }
 1966|   408k|        }
 1967|  1.13k|        return first;
 1968|   347k|    }
 1969|   347k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  1.16M|    {
  763|  1.16M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.16M|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|   498k|    {
  754|   498k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|   582k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   582k|              cvref<T> obj = *get<T>(fn);
  745|   582k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   582k|                  obj(static_cast<decltype(args)>(args)...);
  747|   582k|              }
  748|   582k|              else {
  749|   582k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   582k|              }
  751|   582k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   582k|    {
  684|   582k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   582k|            return static_cast<T*>(s.m_cp);
  686|   582k|        }
  687|   582k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   582k|            return static_cast<T*>(s.m_p);
  689|   582k|        }
  690|   582k|        else {
  691|   582k|            return reinterpret_cast<T*>(s.m_fp);
  692|   582k|        }
  693|   582k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|   498k|        {
  662|   498k|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  93.6k|    {
  108|  93.6k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  93.6k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  93.6k|    {
   94|  93.6k|        iter_difference_t<I> counter{0};
   95|   229k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 136k, False: 93.6k]
  ------------------
   96|   136k|            ++i;
   97|   136k|            ++counter;
   98|   136k|        }
   99|  93.6k|        return counter;
  100|  93.6k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|   740k|{
 1857|   740k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   740k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   740k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   740k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   740k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   740k|        if (sz < count) {
 1862|   740k|            return unexpected(eof_error::eof);
 1863|   740k|        }
 1864|       |
 1865|   740k|        return ranges::next(range.begin(), count);
 1866|   740k|    }
 1867|   740k|    else {
 1868|   740k|        auto it = range.begin();
 1869|   740k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 422k, False: 317k]
  ------------------
 1870|   422k|            return ranges::next(it, count);
 1871|   422k|        }
 1872|       |
 1873|  1.18M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 921k, False: 268k]
  ------------------
 1874|   921k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 48.7k, False: 872k]
  ------------------
 1875|  48.7k|                return unexpected(eof_error::eof);
 1876|  48.7k|            }
 1877|   921k|        }
 1878|       |
 1879|   268k|        return it;
 1880|   317k|    }
 1881|   740k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|   740k|{
 1095|   740k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|   740k|        return r.size();
 1097|   740k|    }
 1098|   740k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|   740k|                           ranges::const_iterator_t<Range>,
 1100|   740k|                           typename detail::basic_scan_buffer<
 1101|   740k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|   740k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|   740k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|   740k|        }
 1105|   740k|        else {
 1106|   740k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 740k, False: 0]
  ------------------
 1107|   740k|                return static_cast<size_t>(
 1108|   740k|                    r.begin().parent()->chars_available() -
 1109|   740k|                    r.begin().position());
 1110|   740k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|   740k|        }
 1113|   740k|    }
 1114|   740k|    else {
 1115|   740k|        return 0;
 1116|   740k|    }
 1117|   740k|}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|  91.8k|    {
 1780|  91.8k|        auto stdloc = loc.get<std::locale>();
 1781|  91.8k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|  91.8k|        grouping = numpunct.grouping();
 1783|  91.8k|        thousands_sep =
 1784|  91.8k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 91.8k]
  ------------------
 1785|  91.8k|        decimal_point = numpunct.decimal_point();
 1786|  91.8k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|  91.8k|{
 1717|  91.8k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 91.8k, False: 0]
  ------------------
 1718|  91.8k|        return std::use_facet<Facet>(stdloc);
 1719|  91.8k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|  91.8k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|   392k|{
 1846|   392k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 789, False: 391k]
  |  |  ------------------
  ------------------
 1847|    789|        return unexpected(e);
 1848|    789|    }
 1849|       |
 1850|   391k|    return ranges::next(range.begin());
 1851|   392k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   753k|{
  950|   753k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   753k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.95k, False: 750k]
  |  |  ------------------
  ------------------
  951|  2.95k|        return eof_error::eof;
  952|  2.95k|    }
  953|   750k|    return eof_error::good;
  954|   753k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.09M|{
  944|  1.09M|    return is_range_eof(r.begin(), r.end());
  945|  1.09M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.09M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.09M|    {
  937|  1.09M|        return begin == end;
  938|  1.09M|    }
  939|  1.09M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   391k|    {
  296|   391k|        ++x;
  297|   391k|        return x;
  298|   391k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   292k|{
 3141|   292k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   292k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 292k, False: 426]
  ------------------
 3143|   292k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 292k, False: 27]
  ------------------
 3144|   292k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   292k|        }
 3146|     27|        return unexpected(eof_error::eof);
 3147|   292k|    }
 3148|       |
 3149|    426|    auto& it = *r;
 3150|    426|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 381, False: 45]
  ------------------
 3151|    381|        return std::pair{it, sign_type::minus_sign};
 3152|    381|    }
 3153|     45|    return std::pair{it, sign_type::plus_sign};
 3154|    426|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|   337k|{
 2272|   337k|    auto it = read_code_unit(range);
 2273|   337k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   337k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 384, False: 337k]
  |  |  ------------------
  ------------------
 2274|    384|        return unexpected(make_eof_parse_error(it.error()));
 2275|    384|    }
 2276|       |
 2277|   674k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 674k, False: 334k]
  ------------------
 2278|   674k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 3.09k, False: 671k]
  ------------------
 2279|  3.09k|            return *it;
 2280|  3.09k|        }
 2281|   674k|    }
 2282|       |
 2283|   334k|    return unexpected(parse_error::error);
 2284|   337k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|   740k|{
 2231|   740k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   740k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   740k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   740k|        if (range.size() < str.size()) {
 2236|   740k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   740k|        }
 2238|   740k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   740k|            return unexpected(parse_error::error);
 2240|   740k|        }
 2241|   740k|        return ranges::next(range.begin(), str.size());
 2242|   740k|    }
 2243|   740k|    else {
 2244|   740k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   740k|            if (ch < 'A' || ch > 'Z') {
 2246|   740k|                return ch;
 2247|   740k|            }
 2248|   740k|            return static_cast<char_type>(ch +
 2249|   740k|                                          static_cast<char_type>('a' - 'A'));
 2250|   740k|        };
 2251|       |
 2252|   740k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   740k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   740k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   740k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   740k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48.7k, False: 691k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  48.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  48.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  48.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  48.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  48.7k|    }                                                  \
  |  |  |  | 3667|   740k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   691k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   691k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   691k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   691k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   691k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 691k, False: 231]
  |  |  ------------------
  ------------------
 2257|   691k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   691k|                    return ascii_tolower(a) ==
 2259|   691k|                           static_cast<detail::char_t<Range>>(b);
 2260|   691k|                }))) {
 2261|   691k|            return unexpected(parse_error::error);
 2262|   691k|        }
 2263|       |
 2264|    231|        return it;
 2265|   691k|    }
 2266|   740k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   721k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   721k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 453k, False: 268k]
  |  Branch (2245:29): [True: 262k, False: 5.46k]
  ------------------
 2246|   716k|                return ch;
 2247|   716k|            }
 2248|  5.46k|            return static_cast<char_type>(ch +
 2249|  5.46k|                                          static_cast<char_type>('a' - 'A'));
 2250|   721k|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  54.9k|{
 2146|  54.9k|    auto it = read_code_unit(range);
 2147|  54.9k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  54.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 405, False: 54.5k]
  |  |  ------------------
  ------------------
 2148|    405|        return unexpected(make_eof_parse_error(it.error()));
 2149|    405|    }
 2150|       |
 2151|  54.5k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  54.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54.5k, False: 6]
  |  |  ------------------
  ------------------
 2152|  54.5k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  54.5k|        return unexpected(parse_error::error);
 2154|  54.5k|    }
 2155|       |
 2156|      6|    return *it;
 2157|  54.5k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|   347k|{
 1996|   347k|    auto it = read_while_code_unit(range, pred);
 1997|   347k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 290k, False: 56.4k]
  ------------------
 1998|   290k|        return unexpected(parse_error::error);
 1999|   290k|    }
 2000|  56.4k|    return it;
 2001|   347k|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|  53.5k|    {
 1621|  53.5k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  53.5k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  53.5k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  53.5k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  53.5k|            m_storage.reset();
 1627|  53.5k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  53.5k|        }
 1629|  53.5k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  53.5k|                                          std::basic_string<CharT>>) {
 1631|  53.5k|            m_storage.emplace(SCN_FWD(range));
 1632|  53.5k|            m_view = string_view_type{*m_storage};
 1633|  53.5k|        }
 1634|  53.5k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  53.5k|                                          typename detail::basic_scan_buffer<
 1636|  53.5k|                                              value_t>::forward_iterator> &&
 1637|  53.5k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  53.5k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  53.5k|            auto end_seg = range.end().contiguous_segment();
 1640|  53.5k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  53.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.00k, False: 50.5k]
  |  |  ------------------
  ------------------
 1641|  53.5k|                             detail::to_address(end_seg.end()))) {
 1642|  3.00k|                auto& str = m_storage.emplace();
 1643|  3.00k|                str.reserve(range.end().position() - range.begin().position());
 1644|  3.00k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  3.00k|                m_view = string_view_type{str};
 1646|  3.00k|                return;
 1647|  3.00k|            }
 1648|       |
 1649|  50.5k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  50.5k|                                                            end_seg.data());
 1651|  50.5k|            m_storage.reset();
 1652|  50.5k|        }
 1653|  53.5k|        else {
 1654|  53.5k|            auto& str = m_storage.emplace();
 1655|  53.5k|            if constexpr (ranges::sized_range<Range>) {
 1656|  53.5k|                str.reserve(range.size());
 1657|  53.5k|            }
 1658|  53.5k|            if constexpr (ranges::common_range<Range>) {
 1659|  53.5k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  53.5k|                          std::back_inserter(str));
 1661|  53.5k|            }
 1662|  53.5k|            else {
 1663|  53.5k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  53.5k|                     ++it) {
 1665|  53.5k|                    str.push_back(*it);
 1666|  53.5k|                }
 1667|  53.5k|            }
 1668|  53.5k|            m_view = string_view_type{str};
 1669|  53.5k|        }
 1670|  53.5k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|   700k|    {
 1582|   700k|        return m_view;
 1583|   700k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  1.15M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  38.4k|    {
 6079|  38.4k|        const bool need_skipped_width =
 6080|  38.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 38.4k]
  |  Branch (6080:33): [True: 0, False: 38.4k]
  ------------------
 6081|  38.4k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  38.4k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 38.4k]
  ------------------
 6084|  38.4k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 38.4k]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  38.4k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 38.4k, False: 0]
  ------------------
 6089|  38.4k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 0, False: 38.4k]
  ------------------
 6090|  38.4k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 0]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  ------------------
 6092|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  38.4k|        return result_type{rng.begin(), 0};
 6114|  38.4k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|   740k|{
 1857|   740k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   740k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   740k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   740k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   740k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   740k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 48.8k, False: 692k]
  ------------------
 1862|  48.8k|            return unexpected(eof_error::eof);
 1863|  48.8k|        }
 1864|       |
 1865|   692k|        return ranges::next(range.begin(), count);
 1866|   740k|    }
 1867|   740k|    else {
 1868|   740k|        auto it = range.begin();
 1869|   740k|        if (guaranteed_minimum_size(range) >= count) {
 1870|   740k|            return ranges::next(it, count);
 1871|   740k|        }
 1872|       |
 1873|   740k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|   740k|            if (it == range.end()) {
 1875|   740k|                return unexpected(eof_error::eof);
 1876|   740k|            }
 1877|   740k|        }
 1878|       |
 1879|   740k|        return it;
 1880|   740k|    }
 1881|   740k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   440k|{
 1899|   440k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   440k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   440k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   440k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   440k|    auto it = range.begin();
 1903|   440k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   440k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   440k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 440k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   440k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 440k, False: 0]
  ------------------
 1912|   440k|        ++it;
 1913|   440k|        return {it, string_type(1, *range.begin())};
 1914|   440k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   440k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  1.12M|{
  944|  1.12M|    return is_range_eof(r.begin(), r.end());
  945|  1.12M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  1.12M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.12M|    {
  937|  1.12M|        return begin == end;
  938|  1.12M|    }
  939|  1.12M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   161k|    {
  190|   161k|        i = std::move(bound);
  191|   161k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   440k|    {
 1890|   440k|        return !codepoint.empty();
 1891|   440k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|   684k|{
  950|   684k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   684k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.41k, False: 682k]
  |  |  ------------------
  ------------------
  951|  2.41k|        return eof_error::eof;
  952|  2.41k|    }
  953|   682k|    return eof_error::good;
  954|   684k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   323k|{
 1846|   323k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 248, False: 322k]
  |  |  ------------------
  ------------------
 1847|    248|        return unexpected(e);
 1848|    248|    }
 1849|       |
 1850|   322k|    return ranges::next(range.begin());
 1851|   323k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   322k|    {
  296|   322k|        ++x;
  297|   322k|        return x;
  298|   322k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   291k|{
 3141|   291k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   291k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 290k, False: 306]
  ------------------
 3143|   290k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 290k, False: 12]
  ------------------
 3144|   290k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   290k|        }
 3146|     12|        return unexpected(eof_error::eof);
 3147|   290k|    }
 3148|       |
 3149|    306|    auto& it = *r;
 3150|    306|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 261, False: 45]
  ------------------
 3151|    261|        return std::pair{it, sign_type::minus_sign};
 3152|    261|    }
 3153|     45|    return std::pair{it, sign_type::plus_sign};
 3154|    306|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   302k|{
 2272|   302k|    auto it = read_code_unit(range);
 2273|   302k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106, False: 302k]
  |  |  ------------------
  ------------------
 2274|    106|        return unexpected(make_eof_parse_error(it.error()));
 2275|    106|    }
 2276|       |
 2277|   604k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 604k, False: 300k]
  ------------------
 2278|   604k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 1.40k, False: 602k]
  ------------------
 2279|  1.40k|            return *it;
 2280|  1.40k|        }
 2281|   604k|    }
 2282|       |
 2283|   300k|    return unexpected(parse_error::error);
 2284|   302k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|   740k|{
 2231|   740k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   740k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   740k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   740k|        if (range.size() < str.size()) {
 2236|   740k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   740k|        }
 2238|   740k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   740k|            return unexpected(parse_error::error);
 2240|   740k|        }
 2241|   740k|        return ranges::next(range.begin(), str.size());
 2242|   740k|    }
 2243|   740k|    else {
 2244|   740k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   740k|            if (ch < 'A' || ch > 'Z') {
 2246|   740k|                return ch;
 2247|   740k|            }
 2248|   740k|            return static_cast<char_type>(ch +
 2249|   740k|                                          static_cast<char_type>('a' - 'A'));
 2250|   740k|        };
 2251|       |
 2252|   740k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   740k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   740k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   740k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   740k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48.8k, False: 692k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  48.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  48.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  48.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  48.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  48.8k|    }                                                  \
  |  |  |  | 3667|   740k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   692k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   692k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   692k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   692k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   692k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 691k, False: 231]
  |  |  ------------------
  ------------------
 2257|   692k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   692k|                    return ascii_tolower(a) ==
 2259|   692k|                           static_cast<detail::char_t<Range>>(b);
 2260|   692k|                }))) {
 2261|   691k|            return unexpected(parse_error::error);
 2262|   691k|        }
 2263|       |
 2264|    231|        return it;
 2265|   692k|    }
 2266|   740k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|   722k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   722k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 453k, False: 268k]
  |  Branch (2245:29): [True: 263k, False: 5.46k]
  ------------------
 2246|   716k|                return ch;
 2247|   716k|            }
 2248|  5.46k|            return static_cast<char_type>(ch +
 2249|  5.46k|                                          static_cast<char_type>('a' - 'A'));
 2250|   722k|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  20.9k|{
 2146|  20.9k|    auto it = read_code_unit(range);
 2147|  20.9k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  20.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 142, False: 20.7k]
  |  |  ------------------
  ------------------
 2148|    142|        return unexpected(make_eof_parse_error(it.error()));
 2149|    142|    }
 2150|       |
 2151|  20.7k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.7k, False: 0]
  |  |  ------------------
  ------------------
 2152|  20.7k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  20.7k|        return unexpected(parse_error::error);
 2154|  20.7k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  20.7k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   150k|{
 1976|   150k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   150k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   150k|{
 1957|   150k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   150k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   150k|    }
 1960|   150k|    else {
 1961|   150k|        auto first = range.begin();
 1962|   150k|        for (; first != range.end(); ++first) {
 1963|   150k|            if (pred(*first)) {
 1964|   150k|                return first;
 1965|   150k|            }
 1966|   150k|        }
 1967|   150k|        return first;
 1968|   150k|    }
 1969|   150k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   291k|{
 2951|   291k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 291k, False: 0]
  ------------------
 2952|   291k|        auto it = read_while_classic_space(range);
 2953|   291k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   291k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.04k, False: 289k]
  |  |  ------------------
  ------------------
 2955|  2.04k|            return unexpected(e);
 2956|  2.04k|        }
 2957|       |
 2958|   289k|        return it;
 2959|   291k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   291k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   291k|{
 2117|   291k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   291k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   291k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   291k|        auto buf = make_contiguous_buffer(range);
 2121|   291k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   291k|        return ranges::next(range.begin(),
 2123|   291k|                            ranges::distance(buf.view().begin(), it));
 2124|   291k|    }
 2125|   291k|    else {
 2126|   291k|        auto it = range.begin();
 2127|       |
 2128|   291k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   291k|            auto seg = get_contiguous_beginning(range);
 2130|   291k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   291k|                seg_it != seg.end()) {
 2132|   291k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   291k|            }
 2134|   291k|            ranges::advance(it, seg.size());
 2135|   291k|        }
 2136|       |
 2137|   291k|        return read_while_code_point(
 2138|   291k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   291k|    }
 2140|   291k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   291k|{
 2082|   291k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   291k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|   340k|{
 2061|   340k|    auto it = range.begin();
 2062|   474k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 440k, False: 33.2k]
  ------------------
 2063|   440k|        const auto val =
 2064|   440k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   440k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   440k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 440k, False: 0]
  |  |  ------------------
  ------------------
 2066|   440k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   440k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   440k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 306k, False: 133k]
  ------------------
 2069|   306k|                return it;
 2070|   306k|            }
 2071|   440k|        }
 2072|   133k|        it = val.iterator;
 2073|   133k|    }
 2074|       |
 2075|  33.2k|    return it;
 2076|   340k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|   291k|    {
  754|   291k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   339k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   339k|              cvref<T> obj = *get<T>(fn);
  745|   339k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   339k|                  obj(static_cast<decltype(args)>(args)...);
  747|   339k|              }
  748|   339k|              else {
  749|   339k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   339k|              }
  751|   339k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   339k|    {
  684|   339k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   339k|            return static_cast<T*>(s.m_cp);
  686|   339k|        }
  687|   339k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   339k|            return static_cast<T*>(s.m_p);
  689|   339k|        }
  690|   339k|        else {
  691|   339k|            return reinterpret_cast<T*>(s.m_fp);
  692|   339k|        }
  693|   339k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   339k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|   291k|        {
  662|   291k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   476k|    {
  304|   476k|        ranges::advance(x, n);
  305|   476k|        return x;
  306|   476k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   476k|    {
  268|   476k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   476k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   476k|    {
  181|  1.65M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.17M, False: 476k]
  ------------------
  182|  1.17M|            ++i;
  183|  1.17M|        }
  184|   476k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6177|  74.0k|    {
 6178|  74.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  74.0k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|  74.0k|            auto rd = make_reader<T, char_type>();
 6183|  74.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|  74.0k|                return unexpected(e);
 6185|  74.0k|            }
 6186|       |
 6187|  74.0k|            return impl(rd, range, value);
 6188|  74.0k|        }
 6189|  74.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|  74.0k|            auto rd = make_reader<T, char_type>();
 6191|  74.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  74.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 74.0k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|  74.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 74.0k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|  74.0k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|  74.0k|                return impl(rd, range, value);
 6198|  74.0k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|  74.0k|        else {
 6206|  74.0k|            SCN_EXPECT(false);
 6207|  74.0k|            SCN_UNREACHABLE;
 6208|  74.0k|        }
 6209|  74.0k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   445k|    {
 3040|   445k|        reader_error_handler eh{};
 3041|   445k|        get_derived().check_specs_impl(specs, eh);
 3042|   445k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 445k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   445k|        return {};
 3046|   445k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|   445k|    {
 3051|   445k|        return static_cast<Derived&>(*this);
 3052|   445k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|   445k|    {
 4145|   445k|        detail::check_float_type_specs(specs, eh);
 4146|   445k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|  74.0k|    {
 6120|  74.0k|        const bool need_skipped_width =
 6121|  74.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 74.0k]
  |  Branch (6121:33): [True: 0, False: 74.0k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  74.0k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  74.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  74.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  74.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  74.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 522, False: 73.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    522|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    522|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    522|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    522|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    522|    }                                                  \
  |  |  |  | 3667|  74.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  73.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  73.5k|        auto [it, prefix_width] = prefix_result;
 6126|  73.5k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  73.5k|        std::ptrdiff_t value_width = 0;
 6130|  73.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 73.5k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  73.5k|        else {
 6146|  73.5k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  73.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  73.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  73.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 60.7k, False: 12.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  60.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  60.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  60.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  60.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  60.7k|    }                                                  \
  |  | 3667|  73.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  73.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  12.8k|                                             specs, value, loc));
 6148|       |
 6149|  12.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 12.8k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  12.8k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  12.8k|        std::ptrdiff_t postfix_width = 0;
 6158|  12.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 12.7k, False: 106]
  ------------------
 6159|  12.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  12.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  12.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  12.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  12.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  12.7k|                                 value_width));
 6163|  12.7k|            std::tie(it, postfix_width) = postfix_result;
 6164|  12.7k|        }
 6165|       |
 6166|  12.8k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  12.8k|                                                 value_width, postfix_width);
 6168|  12.8k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 12.8k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  12.8k|        return it;
 6173|  12.8k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|   660k|    {
 3035|   660k|        return true;
 3036|   660k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|   441k|    {
 4217|   441k|        unsigned options{};
 4218|   441k|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 91.8k, False: 349k]
  ------------------
 4219|  91.8k|            options |= float_reader_base::allow_thsep;
 4220|  91.8k|        }
 4221|       |
 4222|   441k|        SCN_GCC_COMPAT_PUSH
 4223|   441k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|   441k|        switch (specs.type) {
 4226|  92.1k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 92.1k, False: 349k]
  ------------------
 4227|  92.1k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  73.6k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 73.6k, False: 368k]
  ------------------
 4230|  73.6k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|  92.2k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 92.2k, False: 349k]
  ------------------
 4233|  92.2k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|  91.9k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 91.9k, False: 349k]
  ------------------
 4236|  91.9k|                return options | float_reader_base::allow_scientific |
 4237|  91.9k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|  91.8k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 91.8k, False: 349k]
  ------------------
 4240|  91.8k|                return options | float_reader_base::allow_scientific |
 4241|  91.8k|                       float_reader_base::allow_fixed |
 4242|  91.8k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 441k]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|   441k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|   441k|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|   441k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|   441k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|   579k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  1.15M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|  77.9k|    {
 3691|  77.9k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  77.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  77.9k|        const std::ptrdiff_t sign_len =
 3694|  77.9k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 39, False: 77.9k]
  ------------------
 3695|       |
 3696|  77.9k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  77.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  77.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  77.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  77.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42.8k, False: 35.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  42.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  42.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  42.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  42.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  42.8k|    }                                                  \
  |  |  |  | 3667|  77.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  35.1k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  77.9k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|   234k|    {
 4057|   234k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 234k, False: 0]
  ------------------
 4058|   234k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 234k, False: 0]
  ------------------
 4059|   234k|            return;
 4060|   234k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|   119k|    {
 1587|   119k|        return m_storage.has_value();
 1588|   119k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|  69.6k|    {
 1592|  69.6k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  69.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  69.6k|        return *m_storage;
 1594|  69.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  73.5k|    {
 4170|  73.5k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  73.5k|#if !SCN_DISABLE_LOCALE
 4173|  73.5k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 15.2k, False: 58.2k]
  ------------------
 4174|  15.2k|            return read_impl<Range>(
 4175|  15.2k|                range, rd,
 4176|  15.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  15.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  15.2k|                },
 4179|  15.2k|                value, loc);
 4180|  15.2k|        }
 4181|  58.2k|#endif
 4182|       |
 4183|  58.2k|        return read_impl<Range>(
 4184|  58.2k|            range, rd,
 4185|  58.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  58.2k|                return r.read_source(SCN_FWD(args)...);
 4187|  58.2k|            },
 4188|  58.2k|            value);
 4189|  73.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|  96.4k|    {
 4206|  96.4k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  96.4k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  96.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78.6k, False: 17.8k]
  |  |  ------------------
  ------------------
 4208|  78.6k|            return unexpected(r.error());
 4209|  78.6k|        }
 4210|       |
 4211|  17.8k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 315, False: 17.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    315|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    315|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    315|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    315|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    315|    }                                                  \
  |  |  |  | 3667|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  17.5k|        return ranges::next(range.begin(), n);
 4213|  17.8k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   289k|    {
  763|   289k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   289k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  15.2k|    {
  754|  15.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  15.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.2k|              cvref<T> obj = *get<T>(fn);
  745|  15.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  15.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.2k|              }
  748|  15.2k|              else {
  749|  15.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.2k|              }
  751|  15.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  15.2k|    {
  684|  15.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  15.2k|            return static_cast<T*>(s.m_cp);
  686|  15.2k|        }
  687|  15.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  15.2k|            return static_cast<T*>(s.m_p);
  689|  15.2k|        }
  690|  15.2k|        else {
  691|  15.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  15.2k|        }
  693|  15.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  15.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  15.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  15.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  15.2k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|  45.9k|    {
 3679|  45.9k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  45.9k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  45.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 45.9k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  45.9k|        return read_source_impl(range);
 3685|  45.9k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|   289k|    {
 3705|   289k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|   289k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   289k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   289k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   289k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 289k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   289k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   289k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   289k|        auto it = sign_result.first;
 3708|   289k|        m_sign = sign_result.second;
 3709|       |
 3710|   289k|        auto digits_begin = it;
 3711|   289k|        auto r = ranges::subrange{it, range.end()};
 3712|   289k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   289k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   289k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|   289k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|   289k|                SCN_TRY_ASSIGN(
 3717|   289k|                    it,
 3718|   289k|                    do_read_source_impl(
 3719|   289k|                        r,
 3720|   289k|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|   289k|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|   289k|            }
 3723|   289k|            else {
 3724|   289k|                auto cb = [&](const auto& rr)
 3725|   289k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   289k|                    auto res = read_all(rr);
 3727|   289k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   289k|                        return unexpected_scan_error(
 3729|   289k|                            scan_error::invalid_scanned_value,
 3730|   289k|                            "Invalid float value");
 3731|   289k|                    }
 3732|   289k|                    return res;
 3733|   289k|                };
 3734|   289k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|   289k|            }
 3736|   289k|        }
 3737|   289k|        else {
 3738|   289k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|   289k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   289k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   289k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 236k, False: 53.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|   236k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|   236k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|   236k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|   236k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|   236k|    }                                                  \
  |  | 3667|   289k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  53.5k|                it,
 3740|  53.5k|                do_read_source_impl(
 3741|  53.5k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  53.5k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  53.5k|        }
 3744|       |
 3745|  53.5k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  53.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  53.5k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 53.5k, False: 0]
  |  Branch (3747:48): [True: 53.5k, False: 0]
  ------------------
 3748|  53.5k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 53.5k, False: 0]
  ------------------
 3749|  53.5k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 53.5k, False: 0]
  ------------------
 3750|  53.5k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  53.5k|        }
 3752|       |
 3753|  53.5k|        handle_separators();
 3754|       |
 3755|  53.5k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 53.5k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  53.5k|        return it;
 3768|  53.5k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|   289k|    {
 4000|   289k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   289k|        const bool allowed_nonhex =
 4002|   289k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   289k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   289k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 289k, False: 0]
  |  Branch (4005:45): [True: 0, False: 289k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   289k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 289k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   289k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 289k, False: 0]
  |  Branch (4014:45): [True: 0, False: 289k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   289k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 289k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   289k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 160k, False: 128k]
  |  Branch (4021:28): [True: 46.0k, False: 114k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  46.0k|            auto it = range.begin();
 4025|       |
 4026|  46.0k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 66, False: 46.0k]
  ------------------
 4027|     66|                m_kind = float_kind::hex_with_prefix;
 4028|     66|                it = *r;
 4029|     66|            }
 4030|  46.0k|            else {
 4031|  46.0k|                m_kind = float_kind::hex_without_prefix;
 4032|  46.0k|            }
 4033|       |
 4034|  46.0k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  46.0k|        }
 4036|   243k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 128k, False: 114k]
  |  Branch (4036:29): [True: 128k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   128k|            m_kind = float_kind::generic;
 4040|   128k|            return read_regular_float(range);
 4041|   128k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   114k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 165, False: 114k]
  |  |  ------------------
  ------------------
 4047|    165|            m_kind = float_kind::hex_with_prefix;
 4048|    165|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    165|        }
 4050|       |
 4051|   114k|        m_kind = float_kind::generic;
 4052|   114k|        return read_regular(range);
 4053|   114k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|   289k|    {
 3811|   289k|        auto it = range.begin();
 3812|   289k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 289k, False: 0]
  ------------------
 3813|   289k|            return unexpected(r.error());
 3814|   289k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   289k|    {
 3834|   289k|        auto it = range.begin();
 3835|   289k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 289k, False: 0]
  ------------------
 3836|   289k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   289k|                scan_error::invalid_scanned_value,
 3838|   289k|                "Invalid floating-point NaN value"));
 3839|   289k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   160k|    {
 3804|   160k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   160k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|  46.2k|    {
 3904|  46.2k|        auto it = range.begin();
 3905|       |
 3906|  46.2k|        std::ptrdiff_t digits_count = 0;
 3907|  46.2k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|  46.2k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  46.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.2k, False: 9.95k]
  |  |  ------------------
  ------------------
 3909|  36.2k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  36.2k|                scan_error::invalid_scanned_value,
 3911|  36.2k|                "Invalid hexadecimal floating-point value"));
 3912|  36.2k|        }
 3913|  9.95k|        else {
 3914|  9.95k|            digits_count += ranges::distance(it, *r);
 3915|  9.95k|            it = *r;
 3916|  9.95k|        }
 3917|       |
 3918|  9.95k|        m_integral_part_length = digits_count;
 3919|  9.95k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 6, False: 9.94k]
  ------------------
 3920|  9.95k|                                             m_locale_options.decimal_point)) {
 3921|      6|            it = *r;
 3922|      6|        }
 3923|       |
 3924|  9.95k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 9.95k]
  ------------------
 3925|  9.95k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|  9.95k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  9.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.95k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|  9.95k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|  9.95k|        return it;
 3938|  9.95k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|  56.2k|    {
 3789|  56.2k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  56.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 56.2k]
  |  |  |  Branch (859:45): [True: 0, False: 56.2k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|  56.2k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|  56.2k|        return read_while1_code_unit(
 3798|  56.2k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|  56.2k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|  56.2k|    {
  754|  56.2k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  67.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  67.7k|              cvref<T> obj = *get<T>(fn);
  745|  67.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  67.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  67.7k|              }
  748|  67.7k|              else {
  749|  67.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  67.7k|              }
  751|  67.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  67.7k|    {
  684|  67.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  67.7k|            return static_cast<T*>(s.m_cp);
  686|  67.7k|        }
  687|  67.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  67.7k|            return static_cast<T*>(s.m_p);
  689|  67.7k|        }
  690|  67.7k|        else {
  691|  67.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  67.7k|        }
  693|  67.7k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3798|  67.7k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|  56.2k|        {
  662|  56.2k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|  45.3k|    {
 3876|  45.3k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 2.66k, False: 42.6k]
  ------------------
 3877|  2.66k|            auto beg_exp_it = range.begin();
 3878|  2.66k|            auto it = *r;
 3879|       |
 3880|  2.66k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 2.63k, False: 27]
  ------------------
 3881|  2.66k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  2.63k|                it = r_sign->first;
 3883|  2.63k|            }
 3884|       |
 3885|  2.66k|            if (auto r_exp = read_while1_code_unit(
 3886|  2.66k|                    ranges::subrange{it, range.end()},
 3887|  2.66k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  2.66k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  2.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.09k, False: 1.57k]
  |  |  ------------------
  ------------------
 3889|  1.09k|                it = beg_exp_it;
 3890|  1.09k|            }
 3891|  1.57k|            else {
 3892|  1.57k|                it = *r_exp;
 3893|  1.57k|            }
 3894|       |
 3895|  2.66k|            return it;
 3896|  2.66k|        }
 3897|  42.6k|        return range.begin();
 3898|  45.3k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_:
  753|  2.66k|    {
  754|  2.66k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|  5.77k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.77k|              cvref<T> obj = *get<T>(fn);
  745|  5.77k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.77k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.77k|              }
  748|  5.77k|              else {
  749|  5.77k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.77k|              }
  751|  5.77k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  5.77k|    {
  684|  5.77k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.77k|            return static_cast<T*>(s.m_cp);
  686|  5.77k|        }
  687|  5.77k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  5.77k|            return static_cast<T*>(s.m_p);
  689|  5.77k|        }
  690|  5.77k|        else {
  691|  5.77k|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.77k|        }
  693|  5.77k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  5.77k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_LPv0EEEPSL_:
  661|  2.66k|        {
  662|  2.66k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   243k|    {
 3944|   243k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   243k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 197k, False: 46.0k]
  |  Branch (3945:50): [True: 36.8k, False: 160k]
  ------------------
 3946|       |
 3947|   243k|        auto it = ranges::begin(range);
 3948|   243k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   243k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   243k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 198k, False: 44.9k]
  |  |  ------------------
  ------------------
 3952|   198k|            return r.transform_error(
 3953|   198k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   198k|                                              "Invalid floating-point value"));
 3955|   198k|        }
 3956|  44.9k|        else {
 3957|  44.9k|            digits_count += ranges::distance(it, *r);
 3958|  44.9k|            it = *r;
 3959|  44.9k|        }
 3960|       |
 3961|  44.9k|        m_integral_part_length = digits_count;
 3962|  44.9k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 44.9k]
  ------------------
 3963|  44.9k|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|  44.9k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 44.9k]
  ------------------
 3968|  44.9k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|  44.9k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 44.9k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  44.9k|        auto beg_exp_it = it;
 3979|  44.9k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 35.3k, False: 9.61k]
  ------------------
 3980|  35.3k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  35.3k|        }
 3982|  44.9k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 1.60k, False: 43.3k]
  |  Branch (3982:29): [True: 1.33k, False: 270]
  ------------------
 3983|  1.33k|            return unexpected_scan_error(
 3984|  1.33k|                scan_error::invalid_scanned_value,
 3985|  1.33k|                "No exponent given to scientific float");
 3986|  1.33k|        }
 3987|       |
 3988|  43.6k|        m_kind =
 3989|  43.6k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 42.1k, False: 1.53k]
  ------------------
 3990|       |
 3991|  43.6k|        return it;
 3992|  44.9k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|   288k|    {
 3774|   288k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 288k]
  |  |  |  Branch (859:45): [True: 0, False: 288k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   288k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   288k|        return read_while1_code_unit(
 3783|   288k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   288k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|   288k|    {
  754|   288k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|   334k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   334k|              cvref<T> obj = *get<T>(fn);
  745|   334k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   334k|                  obj(static_cast<decltype(args)>(args)...);
  747|   334k|              }
  748|   334k|              else {
  749|   334k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   334k|              }
  751|   334k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   334k|    {
  684|   334k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   334k|            return static_cast<T*>(s.m_cp);
  686|   334k|        }
  687|   334k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   334k|            return static_cast<T*>(s.m_p);
  689|   334k|        }
  690|   334k|        else {
  691|   334k|            return reinterpret_cast<T*>(s.m_fp);
  692|   334k|        }
  693|   334k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3783|   334k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|   288k|        {
  662|   288k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|  53.5k|    {
 1577|  53.5k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  53.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  53.5k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  15.2k|        {
  662|  15.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  58.2k|    {
  754|  58.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  58.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.2k|              cvref<T> obj = *get<T>(fn);
  745|  58.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  58.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  58.2k|              }
  748|  58.2k|              else {
  749|  58.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.2k|              }
  751|  58.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  58.2k|    {
  684|  58.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  58.2k|            return static_cast<T*>(s.m_cp);
  686|  58.2k|        }
  687|  58.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  58.2k|            return static_cast<T*>(s.m_p);
  689|  58.2k|        }
  690|  58.2k|        else {
  691|  58.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  58.2k|        }
  693|  58.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  58.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  58.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  58.2k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   243k|    {
 3665|   243k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 243k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   243k|        return read_source_impl(range);
 3671|   243k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  58.2k|        {
  662|  58.2k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  73.5k|    {
 4170|  73.5k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  73.5k|#if !SCN_DISABLE_LOCALE
 4173|  73.5k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 15.2k, False: 58.2k]
  ------------------
 4174|  15.2k|            return read_impl<Range>(
 4175|  15.2k|                range, rd,
 4176|  15.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  15.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  15.2k|                },
 4179|  15.2k|                value, loc);
 4180|  15.2k|        }
 4181|  58.2k|#endif
 4182|       |
 4183|  58.2k|        return read_impl<Range>(
 4184|  58.2k|            range, rd,
 4185|  58.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  58.2k|                return r.read_source(SCN_FWD(args)...);
 4187|  58.2k|            },
 4188|  58.2k|            value);
 4189|  73.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|  96.5k|    {
 4206|  96.5k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  96.5k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  96.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.4k, False: 60.1k]
  |  |  ------------------
  ------------------
 4208|  36.4k|            return unexpected(r.error());
 4209|  36.4k|        }
 4210|       |
 4211|  60.1k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  60.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  60.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  60.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  60.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42.5k, False: 17.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  42.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  42.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  42.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  42.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  42.5k|    }                                                  \
  |  |  |  | 3667|  60.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  17.5k|        return ranges::next(range.begin(), n);
 4213|  60.1k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   289k|    {
  763|   289k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   289k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  15.2k|    {
  754|  15.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  15.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.2k|              cvref<T> obj = *get<T>(fn);
  745|  15.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  15.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.2k|              }
  748|  15.2k|              else {
  749|  15.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.2k|              }
  751|  15.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  15.2k|    {
  684|  15.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  15.2k|            return static_cast<T*>(s.m_cp);
  686|  15.2k|        }
  687|  15.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  15.2k|            return static_cast<T*>(s.m_p);
  689|  15.2k|        }
  690|  15.2k|        else {
  691|  15.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  15.2k|        }
  693|  15.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  15.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  15.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  15.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  15.2k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|  45.9k|    {
 3679|  45.9k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|  45.9k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  45.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 45.9k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|  45.9k|        return read_source_impl(range);
 3685|  45.9k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|   289k|    {
 3705|   289k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|   289k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   289k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   289k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   289k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 289k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   289k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   289k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   289k|        auto it = sign_result.first;
 3708|   289k|        m_sign = sign_result.second;
 3709|       |
 3710|   289k|        auto digits_begin = it;
 3711|   289k|        auto r = ranges::subrange{it, range.end()};
 3712|   289k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|   289k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   289k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|   579k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 289k]
  |  |  |  Branch (859:45): [True: 0, False: 289k]
  |  |  |  Branch (859:45): [True: 0, False: 289k]
  |  |  ------------------
  ------------------
 3715|   289k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|   289k|            else {
 3724|   289k|                auto cb = [&](const auto& rr)
 3725|   289k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   289k|                    auto res = read_all(rr);
 3727|   289k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   289k|                        return unexpected_scan_error(
 3729|   289k|                            scan_error::invalid_scanned_value,
 3730|   289k|                            "Invalid float value");
 3731|   289k|                    }
 3732|   289k|                    return res;
 3733|   289k|                };
 3734|   289k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|   289k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   289k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   289k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 109k, False: 180k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|   109k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|   109k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|   109k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|   109k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|   109k|    }                                                  \
  |  | 3667|   289k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|   180k|            }
 3736|   289k|        }
 3737|   180k|        else {
 3738|   180k|            SCN_TRY_ASSIGN(
 3739|   180k|                it,
 3740|   180k|                do_read_source_impl(
 3741|   180k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   180k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   180k|        }
 3744|       |
 3745|   180k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   180k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 180k, False: 0]
  |  Branch (3747:48): [True: 180k, False: 0]
  ------------------
 3748|   180k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 180k, False: 0]
  ------------------
 3749|   180k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 180k, False: 0]
  ------------------
 3750|   180k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   180k|        }
 3752|       |
 3753|   180k|        handle_separators();
 3754|       |
 3755|   180k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 180k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   180k|        return it;
 3768|   180k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|   289k|    {
 3811|   289k|        auto it = range.begin();
 3812|   289k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 289k, False: 0]
  ------------------
 3813|   289k|            return unexpected(r.error());
 3814|   289k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   289k|    {
 3834|   289k|        auto it = range.begin();
 3835|   289k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 289k, False: 0]
  ------------------
 3836|   289k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   289k|                scan_error::invalid_scanned_value,
 3838|   289k|                "Invalid floating-point NaN value"));
 3839|   289k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   161k|    {
 3804|   161k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   161k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   150k|{
 1996|   150k|    auto it = read_while_code_unit(range, pred);
 1997|   150k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 129k, False: 21.5k]
  ------------------
 1998|   129k|        return unexpected(parse_error::error);
 1999|   129k|    }
 2000|  21.5k|    return it;
 2001|   150k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|  11.2k|    {
 3876|  11.2k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 1.10k, False: 10.1k]
  ------------------
 3877|  1.10k|            auto beg_exp_it = range.begin();
 3878|  1.10k|            auto it = *r;
 3879|       |
 3880|  1.10k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 1.08k, False: 12]
  ------------------
 3881|  1.10k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  1.08k|                it = r_sign->first;
 3883|  1.08k|            }
 3884|       |
 3885|  1.10k|            if (auto r_exp = read_while1_code_unit(
 3886|  1.10k|                    ranges::subrange{it, range.end()},
 3887|  1.10k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  1.10k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  1.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 470, False: 630]
  |  |  ------------------
  ------------------
 3889|    470|                it = beg_exp_it;
 3890|    470|            }
 3891|    630|            else {
 3892|    630|                it = *r_exp;
 3893|    630|            }
 3894|       |
 3895|  1.10k|            return it;
 3896|  1.10k|        }
 3897|  10.1k|        return range.begin();
 3898|  11.2k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_:
  753|  1.10k|    {
  754|  1.10k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clESW_w:
  743|  2.30k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.30k|              cvref<T> obj = *get<T>(fn);
  745|  2.30k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.30k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.30k|              }
  748|  2.30k|              else {
  749|  2.30k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.30k|              }
  751|  2.30k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  2.30k|    {
  684|  2.30k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.30k|            return static_cast<T*>(s.m_cp);
  686|  2.30k|        }
  687|  2.30k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.30k|            return static_cast<T*>(s.m_p);
  689|  2.30k|        }
  690|  2.30k|        else {
  691|  2.30k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.30k|        }
  693|  2.30k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  2.30k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_LPv0EEEPSI_:
  661|  1.10k|        {
  662|  1.10k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   128k|    {
 3944|   128k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   128k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 82.8k, False: 46.0k]
  |  Branch (3945:50): [True: 36.8k, False: 45.9k]
  ------------------
 3946|       |
 3947|   128k|        auto it = ranges::begin(range);
 3948|   128k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   128k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   128k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 107k, False: 20.9k]
  |  |  ------------------
  ------------------
 3952|   107k|            return r.transform_error(
 3953|   107k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   107k|                                              "Invalid floating-point value"));
 3955|   107k|        }
 3956|  20.9k|        else {
 3957|  20.9k|            digits_count += ranges::distance(it, *r);
 3958|  20.9k|            it = *r;
 3959|  20.9k|        }
 3960|       |
 3961|  20.9k|        m_integral_part_length = digits_count;
 3962|  20.9k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 20.9k]
  ------------------
 3963|  20.9k|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|  20.9k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 20.9k]
  ------------------
 3968|  20.9k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|  20.9k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  20.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 20.9k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  20.9k|        auto beg_exp_it = it;
 3979|  20.9k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 11.2k, False: 9.61k]
  ------------------
 3980|  11.2k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  11.2k|        }
 3982|  20.9k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 1.60k, False: 19.3k]
  |  Branch (3982:29): [True: 1.33k, False: 270]
  ------------------
 3983|  1.33k|            return unexpected_scan_error(
 3984|  1.33k|                scan_error::invalid_scanned_value,
 3985|  1.33k|                "No exponent given to scientific float");
 3986|  1.33k|        }
 3987|       |
 3988|  19.5k|        m_kind =
 3989|  19.5k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 18.9k, False: 630]
  ------------------
 3990|       |
 3991|  19.5k|        return it;
 3992|  20.9k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   149k|    {
 3774|   149k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 149k]
  |  |  |  Branch (859:45): [True: 0, False: 149k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   149k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   149k|        return read_while1_code_unit(
 3783|   149k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   149k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|   149k|    {
  754|   149k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|   171k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   171k|              cvref<T> obj = *get<T>(fn);
  745|   171k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   171k|                  obj(static_cast<decltype(args)>(args)...);
  747|   171k|              }
  748|   171k|              else {
  749|   171k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   171k|              }
  751|   171k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   171k|    {
  684|   171k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   171k|            return static_cast<T*>(s.m_cp);
  686|   171k|        }
  687|   171k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   171k|            return static_cast<T*>(s.m_p);
  689|   171k|        }
  690|   171k|        else {
  691|   171k|            return reinterpret_cast<T*>(s.m_fp);
  692|   171k|        }
  693|   171k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|   171k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|   149k|        {
  662|   149k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|   289k|    {
 4000|   289k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   289k|        const bool allowed_nonhex =
 4002|   289k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   289k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   289k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 289k, False: 0]
  |  Branch (4005:45): [True: 0, False: 289k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   289k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 289k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   289k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 289k, False: 0]
  |  Branch (4014:45): [True: 0, False: 289k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   289k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 289k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   289k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 161k, False: 128k]
  |  Branch (4021:28): [True: 46.1k, False: 114k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|  46.1k|            auto it = range.begin();
 4025|       |
 4026|  46.1k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 66, False: 46.0k]
  ------------------
 4027|     66|                m_kind = float_kind::hex_with_prefix;
 4028|     66|                it = *r;
 4029|     66|            }
 4030|  46.0k|            else {
 4031|  46.0k|                m_kind = float_kind::hex_without_prefix;
 4032|  46.0k|            }
 4033|       |
 4034|  46.1k|            return read_hex(ranges::subrange{it, range.end()});
 4035|  46.1k|        }
 4036|   243k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 128k, False: 114k]
  |  Branch (4036:29): [True: 128k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   128k|            m_kind = float_kind::generic;
 4040|   128k|            return read_regular_float(range);
 4041|   128k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   114k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 165, False: 114k]
  |  |  ------------------
  ------------------
 4047|    165|            m_kind = float_kind::hex_with_prefix;
 4048|    165|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    165|        }
 4050|       |
 4051|   114k|        m_kind = float_kind::generic;
 4052|   114k|        return read_regular(range);
 4053|   114k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   161k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   161k|                    auto res = read_all(rr);
 3727|   161k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 63, False: 160k]
  |  |  ------------------
  ------------------
 3728|     63|                        return unexpected_scan_error(
 3729|     63|                            scan_error::invalid_scanned_value,
 3730|     63|                            "Invalid float value");
 3731|     63|                    }
 3732|   160k|                    return res;
 3733|   161k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   161k|{
 1839|   161k|    return ranges::next(range.begin(), range.end());
 1840|   161k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   161k|    {
  313|   161k|        ranges::advance(x, bound);
  314|   161k|        return x;
  315|   161k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   161k|    {
  275|   161k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   161k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|   180k|    {
 1577|   180k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   180k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   180k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   180k|    {
 1621|   180k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   180k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   180k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   180k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   180k|            m_storage.reset();
 1627|   180k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   180k|        }
 1629|   180k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   180k|                                          std::basic_string<CharT>>) {
 1631|   180k|            m_storage.emplace(SCN_FWD(range));
 1632|   180k|            m_view = string_view_type{*m_storage};
 1633|   180k|        }
 1634|   180k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   180k|                                          typename detail::basic_scan_buffer<
 1636|   180k|                                              value_t>::forward_iterator> &&
 1637|   180k|                           ranges::common_range<Range>) {
 1638|   180k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   180k|            auto end_seg = range.end().contiguous_segment();
 1640|   180k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   180k|                             detail::to_address(end_seg.end()))) {
 1642|   180k|                auto& str = m_storage.emplace();
 1643|   180k|                str.reserve(range.end().position() - range.begin().position());
 1644|   180k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   180k|                m_view = string_view_type{str};
 1646|   180k|                return;
 1647|   180k|            }
 1648|       |
 1649|   180k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   180k|                                                            end_seg.data());
 1651|   180k|            m_storage.reset();
 1652|   180k|        }
 1653|   180k|        else {
 1654|   180k|            auto& str = m_storage.emplace();
 1655|   180k|            if constexpr (ranges::sized_range<Range>) {
 1656|   180k|                str.reserve(range.size());
 1657|   180k|            }
 1658|   180k|            if constexpr (ranges::common_range<Range>) {
 1659|   180k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   180k|                          std::back_inserter(str));
 1661|   180k|            }
 1662|   180k|            else {
 1663|   180k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   180k|                     ++it) {
 1665|   180k|                    str.push_back(*it);
 1666|   180k|                }
 1667|   180k|            }
 1668|   180k|            m_view = string_view_type{str};
 1669|   180k|        }
 1670|   180k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  15.2k|        {
  662|  15.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  58.2k|    {
  754|  58.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  58.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.2k|              cvref<T> obj = *get<T>(fn);
  745|  58.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  58.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  58.2k|              }
  748|  58.2k|              else {
  749|  58.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.2k|              }
  751|  58.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  58.2k|    {
  684|  58.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  58.2k|            return static_cast<T*>(s.m_cp);
  686|  58.2k|        }
  687|  58.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  58.2k|            return static_cast<T*>(s.m_p);
  689|  58.2k|        }
  690|  58.2k|        else {
  691|  58.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  58.2k|        }
  693|  58.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  58.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  58.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  58.2k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   243k|    {
 3665|   243k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   243k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 243k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   243k|        return read_source_impl(range);
 3671|   243k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  58.2k|        {
  662|  58.2k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6177|  74.1k|    {
 6178|  74.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  74.1k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|  74.1k|            auto rd = make_reader<T, char_type>();
 6183|  74.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|  74.1k|                return unexpected(e);
 6185|  74.1k|            }
 6186|       |
 6187|  74.1k|            return impl(rd, range, value);
 6188|  74.1k|        }
 6189|  74.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|  74.1k|            auto rd = make_reader<T, char_type>();
 6191|  74.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  74.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 74.1k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|  74.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 74.1k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|  74.1k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|  74.1k|                return impl(rd, range, value);
 6198|  74.1k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|  74.1k|        else {
 6206|  74.1k|            SCN_EXPECT(false);
 6207|  74.1k|            SCN_UNREACHABLE;
 6208|  74.1k|        }
 6209|  74.1k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|  74.1k|    {
 6120|  74.1k|        const bool need_skipped_width =
 6121|  74.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 74.1k]
  |  Branch (6121:33): [True: 0, False: 74.1k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  74.1k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  74.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  74.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  74.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  74.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 548, False: 73.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    548|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    548|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    548|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    548|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    548|    }                                                  \
  |  |  |  | 3667|  74.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  73.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  73.6k|        auto [it, prefix_width] = prefix_result;
 6126|  73.6k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  73.6k|        std::ptrdiff_t value_width = 0;
 6130|  73.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 73.6k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  73.6k|        else {
 6146|  73.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  73.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  73.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  73.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 60.7k, False: 12.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  60.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  60.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  60.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  60.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  60.7k|    }                                                  \
  |  | 3667|  73.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  73.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  12.9k|                                             specs, value, loc));
 6148|       |
 6149|  12.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 12.9k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  12.9k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  12.9k|        std::ptrdiff_t postfix_width = 0;
 6158|  12.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 12.7k, False: 116]
  ------------------
 6159|  12.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  12.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  12.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  12.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  12.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  12.7k|                                 value_width));
 6163|  12.7k|            std::tie(it, postfix_width) = postfix_result;
 6164|  12.7k|        }
 6165|       |
 6166|  12.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  12.9k|                                                 value_width, postfix_width);
 6168|  12.9k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 12.9k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  12.9k|        return it;
 6173|  12.9k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  78.0k|    {
 3691|  78.0k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  78.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  78.0k|        const std::ptrdiff_t sign_len =
 3694|  78.0k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 39, False: 77.9k]
  ------------------
 3695|       |
 3696|  78.0k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  78.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  78.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  78.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42.6k, False: 35.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  42.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  42.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  42.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  42.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  42.6k|    }                                                  \
  |  |  |  | 3667|  78.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  35.3k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  78.0k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  73.6k|    {
 4170|  73.6k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  73.6k|#if !SCN_DISABLE_LOCALE
 4173|  73.6k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 15.3k, False: 58.3k]
  ------------------
 4174|  15.3k|            return read_impl<Range>(
 4175|  15.3k|                range, rd,
 4176|  15.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  15.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  15.3k|                },
 4179|  15.3k|                value, loc);
 4180|  15.3k|        }
 4181|  58.3k|#endif
 4182|       |
 4183|  58.3k|        return read_impl<Range>(
 4184|  58.3k|            range, rd,
 4185|  58.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  58.3k|                return r.read_source(SCN_FWD(args)...);
 4187|  58.3k|            },
 4188|  58.3k|            value);
 4189|  73.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|  96.5k|    {
 4206|  96.5k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  96.5k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  96.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78.7k, False: 17.8k]
  |  |  ------------------
  ------------------
 4208|  78.7k|            return unexpected(r.error());
 4209|  78.7k|        }
 4210|       |
 4211|  17.8k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 190, False: 17.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    190|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    190|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    190|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    190|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    190|    }                                                  \
  |  |  |  | 3667|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  17.6k|        return ranges::next(range.begin(), n);
 4213|  17.8k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  15.3k|    {
  754|  15.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  15.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.3k|              cvref<T> obj = *get<T>(fn);
  745|  15.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  15.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.3k|              }
  748|  15.3k|              else {
  749|  15.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.3k|              }
  751|  15.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  15.3k|    {
  684|  15.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  15.3k|            return static_cast<T*>(s.m_cp);
  686|  15.3k|        }
  687|  15.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  15.3k|            return static_cast<T*>(s.m_p);
  689|  15.3k|        }
  690|  15.3k|        else {
  691|  15.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  15.3k|        }
  693|  15.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  15.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  15.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  15.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  15.3k|        {
  662|  15.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  58.3k|    {
  754|  58.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  58.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.3k|              cvref<T> obj = *get<T>(fn);
  745|  58.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  58.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  58.3k|              }
  748|  58.3k|              else {
  749|  58.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.3k|              }
  751|  58.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  58.3k|    {
  684|  58.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  58.3k|            return static_cast<T*>(s.m_cp);
  686|  58.3k|        }
  687|  58.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  58.3k|            return static_cast<T*>(s.m_p);
  689|  58.3k|        }
  690|  58.3k|        else {
  691|  58.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  58.3k|        }
  693|  58.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  58.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  58.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  58.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  58.3k|        {
  662|  58.3k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  73.6k|    {
 4170|  73.6k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  73.6k|#if !SCN_DISABLE_LOCALE
 4173|  73.6k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 15.3k, False: 58.3k]
  ------------------
 4174|  15.3k|            return read_impl<Range>(
 4175|  15.3k|                range, rd,
 4176|  15.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  15.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  15.3k|                },
 4179|  15.3k|                value, loc);
 4180|  15.3k|        }
 4181|  58.3k|#endif
 4182|       |
 4183|  58.3k|        return read_impl<Range>(
 4184|  58.3k|            range, rd,
 4185|  58.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  58.3k|                return r.read_source(SCN_FWD(args)...);
 4187|  58.3k|            },
 4188|  58.3k|            value);
 4189|  73.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|  96.6k|    {
 4206|  96.6k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  96.6k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  96.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.4k, False: 60.1k]
  |  |  ------------------
  ------------------
 4208|  36.4k|            return unexpected(r.error());
 4209|  36.4k|        }
 4210|       |
 4211|  60.1k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  60.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  60.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  60.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  60.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42.4k, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  42.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  42.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  42.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  42.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  42.4k|    }                                                  \
  |  |  |  | 3667|  60.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  17.7k|        return ranges::next(range.begin(), n);
 4213|  60.1k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  15.3k|    {
  754|  15.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  15.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.3k|              cvref<T> obj = *get<T>(fn);
  745|  15.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  15.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.3k|              }
  748|  15.3k|              else {
  749|  15.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.3k|              }
  751|  15.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  15.3k|    {
  684|  15.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  15.3k|            return static_cast<T*>(s.m_cp);
  686|  15.3k|        }
  687|  15.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  15.3k|            return static_cast<T*>(s.m_p);
  689|  15.3k|        }
  690|  15.3k|        else {
  691|  15.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  15.3k|        }
  693|  15.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  15.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  15.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  15.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  15.3k|        {
  662|  15.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  58.3k|    {
  754|  58.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  58.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.3k|              cvref<T> obj = *get<T>(fn);
  745|  58.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  58.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  58.3k|              }
  748|  58.3k|              else {
  749|  58.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.3k|              }
  751|  58.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  58.3k|    {
  684|  58.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  58.3k|            return static_cast<T*>(s.m_cp);
  686|  58.3k|        }
  687|  58.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  58.3k|            return static_cast<T*>(s.m_p);
  689|  58.3k|        }
  690|  58.3k|        else {
  691|  58.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  58.3k|        }
  693|  58.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  58.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  58.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  58.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  58.3k|        {
  662|  58.3k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6177|  74.2k|    {
 6178|  74.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  74.2k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|      0|                          basic_contiguous_scan_context<char_type>>) {
 6182|  74.2k|            auto rd = make_reader<T, char_type>();
 6183|  74.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6184|  74.2k|                return unexpected(e);
 6185|  74.2k|            }
 6186|       |
 6187|  74.2k|            return impl(rd, range, value);
 6188|  74.2k|        }
 6189|  74.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6189:28): [Folded - Ignored]
  ------------------
 6190|  74.2k|            auto rd = make_reader<T, char_type>();
 6191|  74.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  74.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 74.2k]
  |  |  ------------------
  ------------------
 6192|      0|                return unexpected(e);
 6193|      0|            }
 6194|       |
 6195|  74.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6195:17): [True: 74.2k, False: 0]
  |  Branch (6195:50): [True: 0, False: 0]
  ------------------
 6196|  74.2k|                specs.width != 0) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 0]
  ------------------
 6197|  74.2k|                return impl(rd, range, value);
 6198|  74.2k|            }
 6199|       |
 6200|      0|            auto crange = get_as_contiguous(range);
 6201|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6202|      0|            return ranges::next(range.begin(),
 6203|      0|                                ranges::distance(crange.begin(), it));
 6204|      0|        }
 6205|  74.2k|        else {
 6206|  74.2k|            SCN_EXPECT(false);
 6207|  74.2k|            SCN_UNREACHABLE;
 6208|  74.2k|        }
 6209|  74.2k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6119|  74.2k|    {
 6120|  74.2k|        const bool need_skipped_width =
 6121|  74.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 74.2k]
  |  Branch (6121:33): [True: 0, False: 74.2k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  74.2k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  74.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  74.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  74.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  74.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 558, False: 73.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    558|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    558|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    558|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    558|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    558|    }                                                  \
  |  |  |  | 3667|  74.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  73.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  73.7k|        auto [it, prefix_width] = prefix_result;
 6126|  73.7k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  73.7k|        std::ptrdiff_t value_width = 0;
 6130|  73.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 73.7k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  73.7k|        else {
 6146|  73.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  73.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  73.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  73.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 60.7k, False: 13.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  60.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  60.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  60.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  60.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  60.7k|    }                                                  \
  |  | 3667|  73.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  73.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  13.0k|                                             specs, value, loc));
 6148|       |
 6149|  13.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 13.0k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  13.0k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  13.0k|        std::ptrdiff_t postfix_width = 0;
 6158|  13.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 12.8k, False: 120]
  ------------------
 6159|  12.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  12.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  12.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  12.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  12.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  12.8k|                                 value_width));
 6163|  12.8k|            std::tie(it, postfix_width) = postfix_result;
 6164|  12.8k|        }
 6165|       |
 6166|  13.0k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  13.0k|                                                 value_width, postfix_width);
 6168|  13.0k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 13.0k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  13.0k|        return it;
 6173|  13.0k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|  78.1k|    {
 3691|  78.1k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  78.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  78.1k|        const std::ptrdiff_t sign_len =
 3694|  78.1k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 39, False: 78.1k]
  ------------------
 3695|       |
 3696|  78.1k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|  78.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  78.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  78.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42.4k, False: 35.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  42.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  42.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  42.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  42.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  42.4k|    }                                                  \
  |  |  |  | 3667|  78.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|  35.7k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  78.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|  73.7k|    {
 4170|  73.7k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  73.7k|#if !SCN_DISABLE_LOCALE
 4173|  73.7k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 15.3k, False: 58.3k]
  ------------------
 4174|  15.3k|            return read_impl<Range>(
 4175|  15.3k|                range, rd,
 4176|  15.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  15.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  15.3k|                },
 4179|  15.3k|                value, loc);
 4180|  15.3k|        }
 4181|  58.3k|#endif
 4182|       |
 4183|  58.3k|        return read_impl<Range>(
 4184|  58.3k|            range, rd,
 4185|  58.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  58.3k|                return r.read_source(SCN_FWD(args)...);
 4187|  58.3k|            },
 4188|  58.3k|            value);
 4189|  73.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|  96.7k|    {
 4206|  96.7k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  96.7k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  96.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78.8k, False: 17.8k]
  |  |  ------------------
  ------------------
 4208|  78.8k|            return unexpected(r.error());
 4209|  78.8k|        }
 4210|       |
 4211|  17.8k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 36, False: 17.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     36|    }                                                  \
  |  |  |  | 3667|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  17.8k|        return ranges::next(range.begin(), n);
 4213|  17.8k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  15.3k|    {
  754|  15.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  15.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.3k|              cvref<T> obj = *get<T>(fn);
  745|  15.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  15.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.3k|              }
  748|  15.3k|              else {
  749|  15.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.3k|              }
  751|  15.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  15.3k|    {
  684|  15.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  15.3k|            return static_cast<T*>(s.m_cp);
  686|  15.3k|        }
  687|  15.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  15.3k|            return static_cast<T*>(s.m_p);
  689|  15.3k|        }
  690|  15.3k|        else {
  691|  15.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  15.3k|        }
  693|  15.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  15.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  15.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  15.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  15.3k|        {
  662|  15.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  58.3k|    {
  754|  58.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  58.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.3k|              cvref<T> obj = *get<T>(fn);
  745|  58.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  58.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  58.3k|              }
  748|  58.3k|              else {
  749|  58.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.3k|              }
  751|  58.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  58.3k|    {
  684|  58.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  58.3k|            return static_cast<T*>(s.m_cp);
  686|  58.3k|        }
  687|  58.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  58.3k|            return static_cast<T*>(s.m_p);
  689|  58.3k|        }
  690|  58.3k|        else {
  691|  58.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  58.3k|        }
  693|  58.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|  58.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  58.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  58.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|  58.3k|        {
  662|  58.3k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|  73.7k|    {
 4170|  73.7k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|  73.7k|#if !SCN_DISABLE_LOCALE
 4173|  73.7k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 15.3k, False: 58.3k]
  ------------------
 4174|  15.3k|            return read_impl<Range>(
 4175|  15.3k|                range, rd,
 4176|  15.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  15.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  15.3k|                },
 4179|  15.3k|                value, loc);
 4180|  15.3k|        }
 4181|  58.3k|#endif
 4182|       |
 4183|  58.3k|        return read_impl<Range>(
 4184|  58.3k|            range, rd,
 4185|  58.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  58.3k|                return r.read_source(SCN_FWD(args)...);
 4187|  58.3k|            },
 4188|  58.3k|            value);
 4189|  73.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|  96.7k|    {
 4206|  96.7k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  96.7k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  96.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.5k, False: 60.2k]
  |  |  ------------------
  ------------------
 4208|  36.5k|            return unexpected(r.error());
 4209|  36.5k|        }
 4210|       |
 4211|  60.2k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|  60.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  60.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  60.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  60.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42.3k, False: 17.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  42.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  42.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  42.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  42.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  42.3k|    }                                                  \
  |  |  |  | 3667|  60.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|  17.8k|        return ranges::next(range.begin(), n);
 4213|  60.2k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  15.3k|    {
  754|  15.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  15.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.3k|              cvref<T> obj = *get<T>(fn);
  745|  15.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  15.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.3k|              }
  748|  15.3k|              else {
  749|  15.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.3k|              }
  751|  15.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  15.3k|    {
  684|  15.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  15.3k|            return static_cast<T*>(s.m_cp);
  686|  15.3k|        }
  687|  15.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  15.3k|            return static_cast<T*>(s.m_p);
  689|  15.3k|        }
  690|  15.3k|        else {
  691|  15.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  15.3k|        }
  693|  15.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  15.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  15.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  15.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  15.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  15.3k|        {
  662|  15.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  58.3k|    {
  754|  58.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  58.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.3k|              cvref<T> obj = *get<T>(fn);
  745|  58.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  58.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  58.3k|              }
  748|  58.3k|              else {
  749|  58.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.3k|              }
  751|  58.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  58.3k|    {
  684|  58.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  58.3k|            return static_cast<T*>(s.m_cp);
  686|  58.3k|        }
  687|  58.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  58.3k|            return static_cast<T*>(s.m_p);
  689|  58.3k|        }
  690|  58.3k|        else {
  691|  58.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  58.3k|        }
  693|  58.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|  58.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|  58.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|  58.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|  58.3k|        {
  662|  58.3k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   291k|{
 2061|   291k|    auto it = range.begin();
 2062|   341k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 339k, False: 2.04k]
  ------------------
 2063|   339k|        const auto val =
 2064|   339k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   339k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   339k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 339k, False: 0]
  |  |  ------------------
  ------------------
 2066|   339k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   339k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   339k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 289k, False: 49.4k]
  ------------------
 2069|   289k|                return it;
 2070|   289k|            }
 2071|   339k|        }
 2072|  49.4k|        it = val.iterator;
 2073|  49.4k|    }
 2074|       |
 2075|  2.04k|    return it;
 2076|   291k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   339k|{
 1899|   339k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   339k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   339k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   339k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   339k|    auto it = range.begin();
 1903|   339k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   339k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 339k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   339k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 339k, False: 0]
  ------------------
 1912|   339k|        ++it;
 1913|   339k|        return {it, string_type(1, *range.begin())};
 1914|   339k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   339k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   339k|    {
 1890|   339k|        return !codepoint.empty();
 1891|   339k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   291k|{
 2082|   291k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   291k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   291k|{
 2951|   291k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 291k, False: 0]
  ------------------
 2952|   291k|        auto it = read_while_classic_space(range);
 2953|   291k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   291k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.04k, False: 289k]
  |  |  ------------------
  ------------------
 2955|  2.04k|            return unexpected(e);
 2956|  2.04k|        }
 2957|       |
 2958|   289k|        return it;
 2959|   291k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   291k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   291k|{
 2117|   291k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   291k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   291k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   291k|        auto buf = make_contiguous_buffer(range);
 2121|   291k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   291k|        return ranges::next(range.begin(),
 2123|   291k|                            ranges::distance(buf.view().begin(), it));
 2124|   291k|    }
 2125|   291k|    else {
 2126|   291k|        auto it = range.begin();
 2127|       |
 2128|   291k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   291k|            auto seg = get_contiguous_beginning(range);
 2130|   291k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   291k|                seg_it != seg.end()) {
 2132|   291k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   291k|            }
 2134|   291k|            ranges::advance(it, seg.size());
 2135|   291k|        }
 2136|       |
 2137|   291k|        return read_while_code_point(
 2138|   291k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   291k|    }
 2140|   291k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   291k|    {
  754|   291k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   339k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   339k|              cvref<T> obj = *get<T>(fn);
  745|   339k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   339k|                  obj(static_cast<decltype(args)>(args)...);
  747|   339k|              }
  748|   339k|              else {
  749|   339k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   339k|              }
  751|   339k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   339k|    {
  684|   339k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   339k|            return static_cast<T*>(s.m_cp);
  686|   339k|        }
  687|   339k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   339k|            return static_cast<T*>(s.m_p);
  689|   339k|        }
  690|   339k|        else {
  691|   339k|            return reinterpret_cast<T*>(s.m_fp);
  692|   339k|        }
  693|   339k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   339k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   291k|        {
  662|   291k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  2.13M|{
 2088|  2.13M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.13M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.13M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.13M|        auto buf = make_contiguous_buffer(range);
 2092|  2.13M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.13M|        return ranges::next(range.begin(),
 2094|  2.13M|                            ranges::distance(buf.view().begin(), it));
 2095|  2.13M|    }
 2096|  2.13M|    else {
 2097|  2.13M|        auto it = range.begin();
 2098|       |
 2099|  2.13M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.13M|            auto seg = get_contiguous_beginning(range);
 2101|  2.13M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.13M|                seg_it != seg.end()) {
 2103|  2.13M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.13M|            }
 2105|  2.13M|            ranges::advance(it, seg.size());
 2106|  2.13M|        }
 2107|       |
 2108|  2.13M|        return read_until_code_point(
 2109|  2.13M|            ranges::subrange{it, range.end()},
 2110|  2.13M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.13M|    }
 2112|  2.13M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  2.13M|{
 1683|  2.13M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.13M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.13M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.13M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  2.13M|    }
 1688|  2.13M|    else {
 1689|  2.13M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  2.13M|    }
 1691|  2.13M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  2.13M|    {
 1490|  2.13M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
 1576|  2.13M|    {
 1577|  2.13M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  2.13M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|  2.13M|    {
 1621|  2.13M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.13M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.13M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.13M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.13M|            m_storage.reset();
 1627|  2.13M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.13M|        }
 1629|  2.13M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.13M|                                          std::basic_string<CharT>>) {
 1631|  2.13M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  2.13M|            m_view = string_view_type{*m_storage};
 1633|  2.13M|        }
 1634|  2.13M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  2.13M|                                          typename detail::basic_scan_buffer<
 1636|  2.13M|                                              value_t>::forward_iterator> &&
 1637|  2.13M|                           ranges::common_range<Range>) {
 1638|  2.13M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.13M|            auto end_seg = range.end().contiguous_segment();
 1640|  2.13M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.13M|                             detail::to_address(end_seg.end()))) {
 1642|  2.13M|                auto& str = m_storage.emplace();
 1643|  2.13M|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.13M|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.13M|                m_view = string_view_type{str};
 1646|  2.13M|                return;
 1647|  2.13M|            }
 1648|       |
 1649|  2.13M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.13M|                                                            end_seg.data());
 1651|  2.13M|            m_storage.reset();
 1652|  2.13M|        }
 1653|  2.13M|        else {
 1654|  2.13M|            auto& str = m_storage.emplace();
 1655|  2.13M|            if constexpr (ranges::sized_range<Range>) {
 1656|  2.13M|                str.reserve(range.size());
 1657|  2.13M|            }
 1658|  2.13M|            if constexpr (ranges::common_range<Range>) {
 1659|  2.13M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.13M|                          std::back_inserter(str));
 1661|  2.13M|            }
 1662|  2.13M|            else {
 1663|  2.13M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.13M|                     ++it) {
 1665|  2.13M|                    str.push_back(*it);
 1666|  2.13M|                }
 1667|  2.13M|            }
 1668|  2.13M|            m_view = string_view_type{str};
 1669|  2.13M|        }
 1670|  2.13M|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4099|  1.45M|    {
 4100|  1.45M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 176k, False: 1.27M]
  ------------------
 4101|   176k|            return std::copysign(value, T{-1.0});
 4102|   176k|        }
 4103|  1.27M|        return std::copysign(value, T{1.0});
 4104|  1.45M|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  48.1k|{
 2088|  48.1k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  48.1k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  48.1k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  48.1k|        auto buf = make_contiguous_buffer(range);
 2092|  48.1k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  48.1k|        return ranges::next(range.begin(),
 2094|  48.1k|                            ranges::distance(buf.view().begin(), it));
 2095|  48.1k|    }
 2096|  48.1k|    else {
 2097|  48.1k|        auto it = range.begin();
 2098|       |
 2099|  48.1k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  48.1k|            auto seg = get_contiguous_beginning(range);
 2101|  48.1k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  48.1k|                seg_it != seg.end()) {
 2103|  48.1k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  48.1k|            }
 2105|  48.1k|            ranges::advance(it, seg.size());
 2106|  48.1k|        }
 2107|       |
 2108|  48.1k|        return read_until_code_point(
 2109|  48.1k|            ranges::subrange{it, range.end()},
 2110|  48.1k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  48.1k|    }
 2112|  48.1k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|  48.1k|    {
  754|  48.1k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|   101k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   101k|              cvref<T> obj = *get<T>(fn);
  745|   101k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   101k|                  obj(static_cast<decltype(args)>(args)...);
  747|   101k|              }
  748|   101k|              else {
  749|   101k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   101k|              }
  751|   101k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   101k|    {
  684|   101k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   101k|            return static_cast<T*>(s.m_cp);
  686|   101k|        }
  687|   101k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   101k|            return static_cast<T*>(s.m_p);
  689|   101k|        }
  690|   101k|        else {
  691|   101k|            return reinterpret_cast<T*>(s.m_fp);
  692|   101k|        }
  693|   101k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|   101k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|  48.1k|        {
  662|  48.1k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEELPv0EEEvOT_:
 1576|  48.1k|    {
 1577|  48.1k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  48.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  48.1k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|  48.1k|    {
 1621|  48.1k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  48.1k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  48.1k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  48.1k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  48.1k|            m_storage.reset();
 1627|  48.1k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  48.1k|        }
 1629|  48.1k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  48.1k|                                          std::basic_string<CharT>>) {
 1631|  48.1k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  48.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  48.1k|            m_view = string_view_type{*m_storage};
 1633|  48.1k|        }
 1634|  48.1k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  48.1k|                                          typename detail::basic_scan_buffer<
 1636|  48.1k|                                              value_t>::forward_iterator> &&
 1637|  48.1k|                           ranges::common_range<Range>) {
 1638|  48.1k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  48.1k|            auto end_seg = range.end().contiguous_segment();
 1640|  48.1k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  48.1k|                             detail::to_address(end_seg.end()))) {
 1642|  48.1k|                auto& str = m_storage.emplace();
 1643|  48.1k|                str.reserve(range.end().position() - range.begin().position());
 1644|  48.1k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  48.1k|                m_view = string_view_type{str};
 1646|  48.1k|                return;
 1647|  48.1k|            }
 1648|       |
 1649|  48.1k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  48.1k|                                                            end_seg.data());
 1651|  48.1k|            m_storage.reset();
 1652|  48.1k|        }
 1653|  48.1k|        else {
 1654|  48.1k|            auto& str = m_storage.emplace();
 1655|  48.1k|            if constexpr (ranges::sized_range<Range>) {
 1656|  48.1k|                str.reserve(range.size());
 1657|  48.1k|            }
 1658|  48.1k|            if constexpr (ranges::common_range<Range>) {
 1659|  48.1k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  48.1k|                          std::back_inserter(str));
 1661|  48.1k|            }
 1662|  48.1k|            else {
 1663|  48.1k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  48.1k|                     ++it) {
 1665|  48.1k|                    str.push_back(*it);
 1666|  48.1k|                }
 1667|  48.1k|            }
 1668|  48.1k|            m_view = string_view_type{str};
 1669|  48.1k|        }
 1670|  48.1k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4099|  77.9k|    {
 4100|  77.9k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 37, False: 77.9k]
  ------------------
 4101|     37|            return std::copysign(value, T{-1.0});
 4102|     37|        }
 4103|  77.9k|        return std::copysign(value, T{1.0});
 4104|  77.9k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|  1.57M|    {
 4100|  1.57M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 188k, False: 1.38M]
  ------------------
 4101|   188k|            return std::copysign(value, T{-1.0});
 4102|   188k|        }
 4103|  1.38M|        return std::copysign(value, T{1.0});
 4104|  1.57M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|  78.0k|    {
 4100|  78.0k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 37, False: 77.9k]
  ------------------
 4101|     37|            return std::copysign(value, T{-1.0});
 4102|     37|        }
 4103|  77.9k|        return std::copysign(value, T{1.0});
 4104|  78.0k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4099|  1.59M|    {
 4100|  1.59M|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 194k, False: 1.39M]
  ------------------
 4101|   194k|            return std::copysign(value, T{-1.0});
 4102|   194k|        }
 4103|  1.39M|        return std::copysign(value, T{1.0});
 4104|  1.59M|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4099|  78.1k|    {
 4100|  78.1k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 37, False: 78.1k]
  ------------------
 4101|     37|            return std::copysign(value, T{-1.0});
 4102|     37|        }
 4103|  78.1k|        return std::copysign(value, T{1.0});
 4104|  78.1k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   724k|{
 5795|   724k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   724k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.06k, False: 718k]
  |  |  ------------------
  ------------------
 5796|  6.06k|        return unexpected(e);
 5797|  6.06k|    }
 5798|       |
 5799|   718k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 718k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   718k|    return skip_classic_whitespace(range);
 5804|   718k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5870|   224k|    {
 5871|   224k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   224k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   224k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   224k|            auto rd = make_reader<T, char_type>();
 5876|   224k|            return impl(rd, range, value);
 5877|   224k|        }
 5878|   224k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   224k|            auto rd = make_reader<T, char_type>();
 5880|   224k|            if (!is_segment_contiguous(range)) {
 5881|   224k|                return impl(rd, range, value);
 5882|   224k|            }
 5883|   224k|            auto crange = get_as_contiguous(range);
 5884|   224k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   224k|            return ranges::next(range.begin(),
 5886|   224k|                                ranges::distance(crange.begin(), it));
 5887|   224k|        }
 5888|   224k|        else {
 5889|   224k|            SCN_EXPECT(false);
 5890|   224k|            SCN_UNREACHABLE;
 5891|   224k|        }
 5892|   224k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   224k|    {
 5863|   224k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   224k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   224k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   224k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.13k, False: 222k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.13k|    }                                                  \
  |  |  |  | 3667|   224k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   222k|                        .transform_error(make_eof_scan_error));
 5865|   222k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   224k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   222k|    {
 4152|   222k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   222k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   222k|        float_reader<CharT> rd{};
 4155|   222k|        return read_impl<Range>(
 4156|   222k|            range, rd,
 4157|   222k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   222k|                return r.read_source(SCN_FWD(args)...);
 4159|   222k|            },
 4160|   222k|            value);
 4161|   222k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|  1.38M|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.52M|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   222k|    {
  754|   222k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   222k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   222k|              cvref<T> obj = *get<T>(fn);
  745|   222k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   222k|                  obj(static_cast<decltype(args)>(args)...);
  747|   222k|              }
  748|   222k|              else {
  749|   222k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   222k|              }
  751|   222k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   222k|    {
  684|   222k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   222k|            return static_cast<T*>(s.m_cp);
  686|   222k|        }
  687|   222k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   222k|            return static_cast<T*>(s.m_p);
  689|   222k|        }
  690|   222k|        else {
  691|   222k|            return reinterpret_cast<T*>(s.m_fp);
  692|   222k|        }
  693|   222k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   222k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   222k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   222k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   222k|        {
  662|   222k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|   247k|    {
 5871|   247k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   247k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   247k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   247k|            auto rd = make_reader<T, char_type>();
 5876|   247k|            return impl(rd, range, value);
 5877|   247k|        }
 5878|   247k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   247k|            auto rd = make_reader<T, char_type>();
 5880|   247k|            if (!is_segment_contiguous(range)) {
 5881|   247k|                return impl(rd, range, value);
 5882|   247k|            }
 5883|   247k|            auto crange = get_as_contiguous(range);
 5884|   247k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   247k|            return ranges::next(range.begin(),
 5886|   247k|                                ranges::distance(crange.begin(), it));
 5887|   247k|        }
 5888|   247k|        else {
 5889|   247k|            SCN_EXPECT(false);
 5890|   247k|            SCN_UNREACHABLE;
 5891|   247k|        }
 5892|   247k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   247k|    {
 5863|   247k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.46k, False: 245k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.46k|    }                                                  \
  |  |  |  | 3667|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   245k|                        .transform_error(make_eof_scan_error));
 5865|   245k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   247k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   245k|    {
 4152|   245k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   245k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   245k|        float_reader<CharT> rd{};
 4155|   245k|        return read_impl<Range>(
 4156|   245k|            range, rd,
 4157|   245k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   245k|                return r.read_source(SCN_FWD(args)...);
 4159|   245k|            },
 4160|   245k|            value);
 4161|   245k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   245k|    {
  754|   245k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   245k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   245k|              cvref<T> obj = *get<T>(fn);
  745|   245k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   245k|                  obj(static_cast<decltype(args)>(args)...);
  747|   245k|              }
  748|   245k|              else {
  749|   245k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   245k|              }
  751|   245k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   245k|    {
  684|   245k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   245k|            return static_cast<T*>(s.m_cp);
  686|   245k|        }
  687|   245k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   245k|            return static_cast<T*>(s.m_p);
  689|   245k|        }
  690|   245k|        else {
  691|   245k|            return reinterpret_cast<T*>(s.m_fp);
  692|   245k|        }
  693|   245k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   245k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   245k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   245k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   245k|        {
  662|   245k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5870|   252k|    {
 5871|   252k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   252k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   252k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   252k|            auto rd = make_reader<T, char_type>();
 5876|   252k|            return impl(rd, range, value);
 5877|   252k|        }
 5878|   252k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   252k|            auto rd = make_reader<T, char_type>();
 5880|   252k|            if (!is_segment_contiguous(range)) {
 5881|   252k|                return impl(rd, range, value);
 5882|   252k|            }
 5883|   252k|            auto crange = get_as_contiguous(range);
 5884|   252k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   252k|            return ranges::next(range.begin(),
 5886|   252k|                                ranges::distance(crange.begin(), it));
 5887|   252k|        }
 5888|   252k|        else {
 5889|   252k|            SCN_EXPECT(false);
 5890|   252k|            SCN_UNREACHABLE;
 5891|   252k|        }
 5892|   252k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   252k|    {
 5863|   252k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   252k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   252k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   252k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.62k, False: 249k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.62k|    }                                                  \
  |  |  |  | 3667|   252k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   249k|                        .transform_error(make_eof_scan_error));
 5865|   249k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   252k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   249k|    {
 4152|   249k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   249k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   249k|        float_reader<CharT> rd{};
 4155|   249k|        return read_impl<Range>(
 4156|   249k|            range, rd,
 4157|   249k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   249k|                return r.read_source(SCN_FWD(args)...);
 4159|   249k|            },
 4160|   249k|            value);
 4161|   249k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|   249k|    {
  754|   249k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|   249k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   249k|              cvref<T> obj = *get<T>(fn);
  745|   249k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   249k|                  obj(static_cast<decltype(args)>(args)...);
  747|   249k|              }
  748|   249k|              else {
  749|   249k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   249k|              }
  751|   249k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   249k|    {
  684|   249k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   249k|            return static_cast<T*>(s.m_cp);
  686|   249k|        }
  687|   249k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   249k|            return static_cast<T*>(s.m_p);
  689|   249k|        }
  690|   249k|        else {
  691|   249k|            return reinterpret_cast<T*>(s.m_fp);
  692|   249k|        }
  693|   249k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   249k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   249k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   249k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|   249k|        {
  662|   249k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   677k|{
 5795|   677k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   677k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.08k, False: 671k]
  |  |  ------------------
  ------------------
 5796|  6.08k|        return unexpected(e);
 5797|  6.08k|    }
 5798|       |
 5799|   671k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 671k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   671k|    return skip_classic_whitespace(range);
 5804|   671k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   209k|    {
 5871|   209k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   209k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   209k|            auto rd = make_reader<T, char_type>();
 5876|   209k|            return impl(rd, range, value);
 5877|   209k|        }
 5878|   209k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   209k|            auto rd = make_reader<T, char_type>();
 5880|   209k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 209k, False: 0]
  ------------------
 5881|   209k|                return impl(rd, range, value);
 5882|   209k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   209k|        else {
 5889|   209k|            SCN_EXPECT(false);
 5890|   209k|            SCN_UNREACHABLE;
 5891|   209k|        }
 5892|   209k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   209k|    {
 5863|   209k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   209k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   209k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   209k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.12k, False: 207k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.12k|    }                                                  \
  |  |  |  | 3667|   209k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   207k|                        .transform_error(make_eof_scan_error));
 5865|   207k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   209k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   207k|    {
 4152|   207k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   207k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   207k|        float_reader<CharT> rd{};
 4155|   207k|        return read_impl<Range>(
 4156|   207k|            range, rd,
 4157|   207k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   207k|                return r.read_source(SCN_FWD(args)...);
 4159|   207k|            },
 4160|   207k|            value);
 4161|   207k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   207k|    {
  754|   207k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   207k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   207k|              cvref<T> obj = *get<T>(fn);
  745|   207k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   207k|                  obj(static_cast<decltype(args)>(args)...);
  747|   207k|              }
  748|   207k|              else {
  749|   207k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   207k|              }
  751|   207k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   207k|    {
  684|   207k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   207k|            return static_cast<T*>(s.m_cp);
  686|   207k|        }
  687|   207k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   207k|            return static_cast<T*>(s.m_p);
  689|   207k|        }
  690|   207k|        else {
  691|   207k|            return reinterpret_cast<T*>(s.m_fp);
  692|   207k|        }
  693|   207k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   207k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   207k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   207k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   207k|        {
  662|   207k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   232k|    {
 5871|   232k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   232k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   232k|            auto rd = make_reader<T, char_type>();
 5876|   232k|            return impl(rd, range, value);
 5877|   232k|        }
 5878|   232k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   232k|            auto rd = make_reader<T, char_type>();
 5880|   232k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 232k, False: 0]
  ------------------
 5881|   232k|                return impl(rd, range, value);
 5882|   232k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   232k|        else {
 5889|   232k|            SCN_EXPECT(false);
 5890|   232k|            SCN_UNREACHABLE;
 5891|   232k|        }
 5892|   232k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   232k|    {
 5863|   232k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   232k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   232k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   232k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.43k, False: 229k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.43k|    }                                                  \
  |  |  |  | 3667|   232k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   229k|                        .transform_error(make_eof_scan_error));
 5865|   229k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   232k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   229k|    {
 4152|   229k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   229k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   229k|        float_reader<CharT> rd{};
 4155|   229k|        return read_impl<Range>(
 4156|   229k|            range, rd,
 4157|   229k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   229k|                return r.read_source(SCN_FWD(args)...);
 4159|   229k|            },
 4160|   229k|            value);
 4161|   229k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   229k|    {
  754|   229k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   229k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   229k|              cvref<T> obj = *get<T>(fn);
  745|   229k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   229k|                  obj(static_cast<decltype(args)>(args)...);
  747|   229k|              }
  748|   229k|              else {
  749|   229k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   229k|              }
  751|   229k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   229k|    {
  684|   229k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   229k|            return static_cast<T*>(s.m_cp);
  686|   229k|        }
  687|   229k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   229k|            return static_cast<T*>(s.m_p);
  689|   229k|        }
  690|   229k|        else {
  691|   229k|            return reinterpret_cast<T*>(s.m_fp);
  692|   229k|        }
  693|   229k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   229k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   229k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   229k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   229k|        {
  662|   229k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   235k|    {
 5871|   235k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   235k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   235k|            auto rd = make_reader<T, char_type>();
 5876|   235k|            return impl(rd, range, value);
 5877|   235k|        }
 5878|   235k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   235k|            auto rd = make_reader<T, char_type>();
 5880|   235k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 235k, False: 0]
  ------------------
 5881|   235k|                return impl(rd, range, value);
 5882|   235k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   235k|        else {
 5889|   235k|            SCN_EXPECT(false);
 5890|   235k|            SCN_UNREACHABLE;
 5891|   235k|        }
 5892|   235k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   235k|    {
 5863|   235k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   235k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   235k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   235k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.58k, False: 232k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.58k|    }                                                  \
  |  |  |  | 3667|   235k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   232k|                        .transform_error(make_eof_scan_error));
 5865|   232k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   235k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   232k|    {
 4152|   232k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   232k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   232k|        float_reader<CharT> rd{};
 4155|   232k|        return read_impl<Range>(
 4156|   232k|            range, rd,
 4157|   232k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   232k|                return r.read_source(SCN_FWD(args)...);
 4159|   232k|            },
 4160|   232k|            value);
 4161|   232k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|   232k|    {
  754|   232k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|   232k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   232k|              cvref<T> obj = *get<T>(fn);
  745|   232k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   232k|                  obj(static_cast<decltype(args)>(args)...);
  747|   232k|              }
  748|   232k|              else {
  749|   232k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   232k|              }
  751|   232k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   232k|    {
  684|   232k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   232k|            return static_cast<T*>(s.m_cp);
  686|   232k|        }
  687|   232k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   232k|            return static_cast<T*>(s.m_p);
  689|   232k|        }
  690|   232k|        else {
  691|   232k|            return reinterpret_cast<T*>(s.m_fp);
  692|   232k|        }
  693|   232k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   232k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   232k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   232k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|   232k|        {
  662|   232k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  1.67M|    {
 2879|  1.67M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  4.94M|    {
 2883|  4.94M|        return m_current;
 2884|  4.94M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  3.26M|    {
 2888|  3.26M|        return m_range.end();
 2889|  3.26M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  1.58M|    {
 2903|  1.58M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  1.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  1.58M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  1.58M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 1.58M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  1.58M|        }
 2909|  1.58M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.58M|    static_cast<    \
  |  |  929|  1.58M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  1.58M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  1.67M|    {
 2893|  1.67M|        return ranges::subrange{begin(), end()};
 2894|  1.67M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  1.67M|    {
 6037|  1.67M|        const bool need_skipped_width =
 6038|  1.67M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.67M]
  |  Branch (6038:33): [True: 0, False: 1.67M]
  ------------------
 6039|  1.67M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.67M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.67M]
  ------------------
 6043|  1.67M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.67M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.67M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.67M, False: 0]
  |  Branch (6047:56): [True: 1.67M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.67M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.67M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.33M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.67M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.67M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.67M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18.3k, False: 1.65M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  18.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  18.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  18.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  18.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  18.3k|    }                                                  \
  |  |  |  | 3667|  1.67M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.33M|                            make_eof_scan_error));
 6058|       |
 6059|  3.33M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.65M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.65M|            return result_type{it, 0};
 6067|  3.33M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  1.67M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  1.57M|    {
 6079|  1.57M|        const bool need_skipped_width =
 6080|  1.57M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.57M]
  |  Branch (6080:33): [True: 0, False: 1.57M]
  ------------------
 6081|  1.57M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.57M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.57M]
  ------------------
 6084|  1.57M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.57M]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  1.57M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 1.57M, False: 0]
  ------------------
 6089|  1.57M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 0, False: 1.57M]
  ------------------
 6090|  1.57M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 0]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  ------------------
 6092|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  1.57M|        return result_type{rng.begin(), 0};
 6114|  1.57M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6177|   531k|    {
 6178|   531k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   531k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|   531k|                          basic_contiguous_scan_context<char_type>>) {
 6182|   531k|            auto rd = make_reader<T, char_type>();
 6183|   531k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   531k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 531k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|   531k|            return impl(rd, range, value);
 6188|   531k|        }
 6189|   531k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|   531k|            auto rd = make_reader<T, char_type>();
 6191|   531k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|   531k|                return unexpected(e);
 6193|   531k|            }
 6194|       |
 6195|   531k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|   531k|                specs.width != 0) {
 6197|   531k|                return impl(rd, range, value);
 6198|   531k|            }
 6199|       |
 6200|   531k|            auto crange = get_as_contiguous(range);
 6201|   531k|            SCN_TRY(it, impl(rd, crange, value));
 6202|   531k|            return ranges::next(range.begin(),
 6203|   531k|                                ranges::distance(crange.begin(), it));
 6204|   531k|        }
 6205|   531k|        else {
 6206|   531k|            SCN_EXPECT(false);
 6207|   531k|            SCN_UNREACHABLE;
 6208|   531k|        }
 6209|   531k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|   531k|    {
 6120|   531k|        const bool need_skipped_width =
 6121|   531k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 531k]
  |  Branch (6121:33): [True: 0, False: 531k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   531k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   531k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   531k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   531k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   531k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.57k, False: 526k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.57k|    }                                                  \
  |  |  |  | 3667|   531k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   526k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   526k|        auto [it, prefix_width] = prefix_result;
 6126|   526k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   526k|        std::ptrdiff_t value_width = 0;
 6130|   526k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 526k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   526k|        else {
 6146|   526k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   526k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   526k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   526k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 25.0k, False: 501k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  25.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  25.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  25.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  25.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  25.0k|    }                                                  \
  |  | 3667|   526k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   526k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   501k|                                             specs, value, loc));
 6148|       |
 6149|   501k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 501k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   501k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   501k|        std::ptrdiff_t postfix_width = 0;
 6158|   501k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 496k, False: 4.65k]
  ------------------
 6159|   496k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   496k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   496k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   496k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   496k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 496k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   496k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   496k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   496k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   496k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   496k|                                 value_width));
 6163|   496k|            std::tie(it, postfix_width) = postfix_result;
 6164|   496k|        }
 6165|       |
 6166|   501k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   501k|                                                 value_width, postfix_width);
 6168|   501k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 501k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   501k|        return it;
 6173|   501k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6177|   569k|    {
 6178|   569k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   569k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|   569k|                          basic_contiguous_scan_context<char_type>>) {
 6182|   569k|            auto rd = make_reader<T, char_type>();
 6183|   569k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   569k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 569k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|   569k|            return impl(rd, range, value);
 6188|   569k|        }
 6189|   569k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|   569k|            auto rd = make_reader<T, char_type>();
 6191|   569k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|   569k|                return unexpected(e);
 6193|   569k|            }
 6194|       |
 6195|   569k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|   569k|                specs.width != 0) {
 6197|   569k|                return impl(rd, range, value);
 6198|   569k|            }
 6199|       |
 6200|   569k|            auto crange = get_as_contiguous(range);
 6201|   569k|            SCN_TRY(it, impl(rd, crange, value));
 6202|   569k|            return ranges::next(range.begin(),
 6203|   569k|                                ranges::distance(crange.begin(), it));
 6204|   569k|        }
 6205|   569k|        else {
 6206|   569k|            SCN_EXPECT(false);
 6207|   569k|            SCN_UNREACHABLE;
 6208|   569k|        }
 6209|   569k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|   569k|    {
 6120|   569k|        const bool need_skipped_width =
 6121|   569k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 569k]
  |  Branch (6121:33): [True: 0, False: 569k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   569k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   569k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   569k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   569k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   569k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.22k, False: 563k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.22k|    }                                                  \
  |  |  |  | 3667|   569k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   563k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   563k|        auto [it, prefix_width] = prefix_result;
 6126|   563k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   563k|        std::ptrdiff_t value_width = 0;
 6130|   563k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 563k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   563k|        else {
 6146|   563k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   563k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   563k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   563k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 24.4k, False: 539k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  24.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  24.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  24.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  24.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  24.4k|    }                                                  \
  |  | 3667|   563k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   563k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   539k|                                             specs, value, loc));
 6148|       |
 6149|   539k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 539k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   539k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   539k|        std::ptrdiff_t postfix_width = 0;
 6158|   539k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 534k, False: 5.19k]
  ------------------
 6159|   534k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   534k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   534k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   534k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   534k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 534k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   534k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   534k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   534k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   534k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   534k|                                 value_width));
 6163|   534k|            std::tie(it, postfix_width) = postfix_result;
 6164|   534k|        }
 6165|       |
 6166|   539k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   539k|                                                 value_width, postfix_width);
 6168|   539k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 539k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   539k|        return it;
 6173|   539k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6177|   576k|    {
 6178|   576k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|   576k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|   576k|                          basic_contiguous_scan_context<char_type>>) {
 6182|   576k|            auto rd = make_reader<T, char_type>();
 6183|   576k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   576k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 576k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|   576k|            return impl(rd, range, value);
 6188|   576k|        }
 6189|   576k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|   576k|            auto rd = make_reader<T, char_type>();
 6191|   576k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|   576k|                return unexpected(e);
 6193|   576k|            }
 6194|       |
 6195|   576k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|   576k|                specs.width != 0) {
 6197|   576k|                return impl(rd, range, value);
 6198|   576k|            }
 6199|       |
 6200|   576k|            auto crange = get_as_contiguous(range);
 6201|   576k|            SCN_TRY(it, impl(rd, crange, value));
 6202|   576k|            return ranges::next(range.begin(),
 6203|   576k|                                ranges::distance(crange.begin(), it));
 6204|   576k|        }
 6205|   576k|        else {
 6206|   576k|            SCN_EXPECT(false);
 6207|   576k|            SCN_UNREACHABLE;
 6208|   576k|        }
 6209|   576k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|   576k|    {
 6120|   576k|        const bool need_skipped_width =
 6121|   576k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 576k]
  |  Branch (6121:33): [True: 0, False: 576k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|   576k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   576k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   576k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   576k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   576k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.56k, False: 569k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.56k|    }                                                  \
  |  |  |  | 3667|   576k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   569k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|   569k|        auto [it, prefix_width] = prefix_result;
 6126|   569k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|   569k|        std::ptrdiff_t value_width = 0;
 6130|   569k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 569k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|   569k|        else {
 6146|   569k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   569k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   569k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   569k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 24.0k, False: 545k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  24.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  24.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  24.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  24.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  24.0k|    }                                                  \
  |  | 3667|   569k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   569k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|   545k|                                             specs, value, loc));
 6148|       |
 6149|   545k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 545k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|   545k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|   545k|        std::ptrdiff_t postfix_width = 0;
 6158|   545k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 540k, False: 5.50k]
  ------------------
 6159|   540k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   540k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   540k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   540k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   540k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 540k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   540k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   540k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|   540k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|   540k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|   540k|                                 value_width));
 6163|   540k|            std::tie(it, postfix_width) = postfix_result;
 6164|   540k|        }
 6165|       |
 6166|   545k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|   545k|                                                 value_width, postfix_width);
 6168|   545k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 545k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|   545k|        return it;
 6173|   545k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  69.4k|{
 5795|  69.4k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  69.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 123, False: 69.3k]
  |  |  ------------------
  ------------------
 5796|    123|        return unexpected(e);
 5797|    123|    }
 5798|       |
 5799|  69.3k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 69.3k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  69.3k|    return skip_classic_whitespace(range);
 5804|  69.3k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5870|  23.1k|    {
 5871|  23.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  23.1k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  23.1k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  23.1k|            auto rd = make_reader<T, char_type>();
 5876|  23.1k|            return impl(rd, range, value);
 5877|  23.1k|        }
 5878|  23.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  23.1k|            auto rd = make_reader<T, char_type>();
 5880|  23.1k|            if (!is_segment_contiguous(range)) {
 5881|  23.1k|                return impl(rd, range, value);
 5882|  23.1k|            }
 5883|  23.1k|            auto crange = get_as_contiguous(range);
 5884|  23.1k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  23.1k|            return ranges::next(range.begin(),
 5886|  23.1k|                                ranges::distance(crange.begin(), it));
 5887|  23.1k|        }
 5888|  23.1k|        else {
 5889|  23.1k|            SCN_EXPECT(false);
 5890|  23.1k|            SCN_UNREACHABLE;
 5891|  23.1k|        }
 5892|  23.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  23.1k|    {
 5863|  23.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  23.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  23.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  23.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 168, False: 22.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    168|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    168|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    168|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    168|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    168|    }                                                  \
  |  |  |  | 3667|  23.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  22.9k|                        .transform_error(make_eof_scan_error));
 5865|  22.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  23.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  22.9k|    {
 4152|  22.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  22.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  22.9k|        float_reader<CharT> rd{};
 4155|  22.9k|        return read_impl<Range>(
 4156|  22.9k|            range, rd,
 4157|  22.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  22.9k|                return r.read_source(SCN_FWD(args)...);
 4159|  22.9k|            },
 4160|  22.9k|            value);
 4161|  22.9k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|   137k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  22.9k|    {
  754|  22.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  22.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.9k|              cvref<T> obj = *get<T>(fn);
  745|  22.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.9k|              }
  748|  22.9k|              else {
  749|  22.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.9k|              }
  751|  22.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  22.9k|    {
  684|  22.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.9k|            return static_cast<T*>(s.m_cp);
  686|  22.9k|        }
  687|  22.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.9k|            return static_cast<T*>(s.m_p);
  689|  22.9k|        }
  690|  22.9k|        else {
  691|  22.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.9k|        }
  693|  22.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  22.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  22.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  22.9k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  22.9k|        {
  662|  22.9k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|  23.1k|    {
 5871|  23.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  23.1k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  23.1k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  23.1k|            auto rd = make_reader<T, char_type>();
 5876|  23.1k|            return impl(rd, range, value);
 5877|  23.1k|        }
 5878|  23.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  23.1k|            auto rd = make_reader<T, char_type>();
 5880|  23.1k|            if (!is_segment_contiguous(range)) {
 5881|  23.1k|                return impl(rd, range, value);
 5882|  23.1k|            }
 5883|  23.1k|            auto crange = get_as_contiguous(range);
 5884|  23.1k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  23.1k|            return ranges::next(range.begin(),
 5886|  23.1k|                                ranges::distance(crange.begin(), it));
 5887|  23.1k|        }
 5888|  23.1k|        else {
 5889|  23.1k|            SCN_EXPECT(false);
 5890|  23.1k|            SCN_UNREACHABLE;
 5891|  23.1k|        }
 5892|  23.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  23.1k|    {
 5863|  23.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  23.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  23.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  23.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 183, False: 22.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    183|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    183|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    183|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    183|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    183|    }                                                  \
  |  |  |  | 3667|  23.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  22.9k|                        .transform_error(make_eof_scan_error));
 5865|  22.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  23.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  22.9k|    {
 4152|  22.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  22.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  22.9k|        float_reader<CharT> rd{};
 4155|  22.9k|        return read_impl<Range>(
 4156|  22.9k|            range, rd,
 4157|  22.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  22.9k|                return r.read_source(SCN_FWD(args)...);
 4159|  22.9k|            },
 4160|  22.9k|            value);
 4161|  22.9k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  22.9k|    {
  754|  22.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  22.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.9k|              cvref<T> obj = *get<T>(fn);
  745|  22.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.9k|              }
  748|  22.9k|              else {
  749|  22.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.9k|              }
  751|  22.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  22.9k|    {
  684|  22.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.9k|            return static_cast<T*>(s.m_cp);
  686|  22.9k|        }
  687|  22.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.9k|            return static_cast<T*>(s.m_p);
  689|  22.9k|        }
  690|  22.9k|        else {
  691|  22.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.9k|        }
  693|  22.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  22.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  22.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  22.9k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  22.9k|        {
  662|  22.9k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5870|  23.2k|    {
 5871|  23.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  23.2k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  23.2k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  23.2k|            auto rd = make_reader<T, char_type>();
 5876|  23.2k|            return impl(rd, range, value);
 5877|  23.2k|        }
 5878|  23.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  23.2k|            auto rd = make_reader<T, char_type>();
 5880|  23.2k|            if (!is_segment_contiguous(range)) {
 5881|  23.2k|                return impl(rd, range, value);
 5882|  23.2k|            }
 5883|  23.2k|            auto crange = get_as_contiguous(range);
 5884|  23.2k|            SCN_TRY(it, impl(rd, crange, value));
 5885|  23.2k|            return ranges::next(range.begin(),
 5886|  23.2k|                                ranges::distance(crange.begin(), it));
 5887|  23.2k|        }
 5888|  23.2k|        else {
 5889|  23.2k|            SCN_EXPECT(false);
 5890|  23.2k|            SCN_UNREACHABLE;
 5891|  23.2k|        }
 5892|  23.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  23.2k|    {
 5863|  23.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  23.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  23.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  23.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 189, False: 23.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    189|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    189|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    189|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    189|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    189|    }                                                  \
  |  |  |  | 3667|  23.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  23.0k|                        .transform_error(make_eof_scan_error));
 5865|  23.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  23.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  23.0k|    {
 4152|  23.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  23.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  23.0k|        float_reader<CharT> rd{};
 4155|  23.0k|        return read_impl<Range>(
 4156|  23.0k|            range, rd,
 4157|  23.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  23.0k|                return r.read_source(SCN_FWD(args)...);
 4159|  23.0k|            },
 4160|  23.0k|            value);
 4161|  23.0k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  23.0k|    {
  754|  23.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  23.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.0k|              cvref<T> obj = *get<T>(fn);
  745|  23.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.0k|              }
  748|  23.0k|              else {
  749|  23.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.0k|              }
  751|  23.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  23.0k|    {
  684|  23.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.0k|            return static_cast<T*>(s.m_cp);
  686|  23.0k|        }
  687|  23.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.0k|            return static_cast<T*>(s.m_p);
  689|  23.0k|        }
  690|  23.0k|        else {
  691|  23.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.0k|        }
  693|  23.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  23.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  23.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  23.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|  23.0k|        {
  662|  23.0k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   222k|    {
 2879|   222k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   484k|    {
 2883|   484k|        return m_current;
 2884|   484k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   261k|    {
 2888|   261k|        return m_range.end();
 2889|   261k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  38.8k|    {
 2903|  38.8k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  38.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  38.8k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  38.8k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 38.8k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  38.8k|        }
 2909|  38.8k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  38.8k|    static_cast<    \
  |  |  929|  38.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  38.8k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   222k|    {
 2893|   222k|        return ranges::subrange{begin(), end()};
 2894|   222k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   222k|    {
 6037|   222k|        const bool need_skipped_width =
 6038|   222k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 222k]
  |  Branch (6038:33): [True: 0, False: 222k]
  ------------------
 6039|   222k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   222k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 222k]
  ------------------
 6043|   222k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 222k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   222k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 222k, False: 0]
  |  Branch (6047:56): [True: 222k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   222k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 222k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   443k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   222k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   222k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   222k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.62k, False: 220k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.62k|    }                                                  \
  |  |  |  | 3667|   222k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   220k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   443k|                            make_eof_scan_error));
 6058|       |
 6059|   443k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 220k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   220k|            return result_type{it, 0};
 6067|   443k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   222k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  38.4k|    {
 6079|  38.4k|        const bool need_skipped_width =
 6080|  38.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 38.4k]
  |  Branch (6080:33): [True: 0, False: 38.4k]
  ------------------
 6081|  38.4k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  38.4k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 38.4k]
  ------------------
 6084|  38.4k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 38.4k]
  ------------------
 6085|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6086|      0|                             specs.fill, need_skipped_width);
 6087|      0|        }
 6088|  38.4k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6088:13): [True: 38.4k, False: 0]
  ------------------
 6089|  38.4k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6089:13): [True: 0, False: 38.4k]
  ------------------
 6090|  38.4k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6090:15): [True: 0, False: 0]
  |  Branch (6090:35): [True: 0, False: 0]
  ------------------
 6091|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6091:15): [True: 0, False: 0]
  ------------------
 6092|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  ------------------
 6093|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6093:17): [True: 0, False: 0]
  ------------------
 6094|      0|                const auto initial_width =
 6095|      0|                    specs.precision - prefix_width - value_width;
 6096|      0|                auto max_width_view = take_width(rng, initial_width);
 6097|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6098|      0|                                  .transform_error(make_eof_scan_error));
 6099|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6100|      0|            }
 6101|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                            make_eof_scan_error));
 6103|       |
 6104|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6104:17): [True: 0, False: 0]
  ------------------
 6105|      0|                return result_type{
 6106|      0|                    it,
 6107|      0|                    calculate_text_width(make_contiguous_buffer(
 6108|      0|                                             ranges::subrange{rng.begin(), it})
 6109|      0|                                             .view())};
 6110|      0|            }
 6111|      0|            return result_type{it, 0};
 6112|      0|        }
 6113|  38.4k|        return result_type{rng.begin(), 0};
 6114|  38.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6177|  74.1k|    {
 6178|  74.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  74.1k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  74.1k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  74.1k|            auto rd = make_reader<T, char_type>();
 6183|  74.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  74.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 74.1k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|  74.1k|            return impl(rd, range, value);
 6188|  74.1k|        }
 6189|  74.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  74.1k|            auto rd = make_reader<T, char_type>();
 6191|  74.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  74.1k|                return unexpected(e);
 6193|  74.1k|            }
 6194|       |
 6195|  74.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  74.1k|                specs.width != 0) {
 6197|  74.1k|                return impl(rd, range, value);
 6198|  74.1k|            }
 6199|       |
 6200|  74.1k|            auto crange = get_as_contiguous(range);
 6201|  74.1k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  74.1k|            return ranges::next(range.begin(),
 6203|  74.1k|                                ranges::distance(crange.begin(), it));
 6204|  74.1k|        }
 6205|  74.1k|        else {
 6206|  74.1k|            SCN_EXPECT(false);
 6207|  74.1k|            SCN_UNREACHABLE;
 6208|  74.1k|        }
 6209|  74.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|  74.1k|    {
 6120|  74.1k|        const bool need_skipped_width =
 6121|  74.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 74.1k]
  |  Branch (6121:33): [True: 0, False: 74.1k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  74.1k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  74.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  74.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  74.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  74.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 522, False: 73.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    522|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    522|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    522|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    522|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    522|    }                                                  \
  |  |  |  | 3667|  74.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  73.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  73.5k|        auto [it, prefix_width] = prefix_result;
 6126|  73.5k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  73.5k|        std::ptrdiff_t value_width = 0;
 6130|  73.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 73.5k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  73.5k|        else {
 6146|  73.5k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  73.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  73.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  73.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 60.7k, False: 12.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  60.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  60.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  60.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  60.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  60.7k|    }                                                  \
  |  | 3667|  73.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  73.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  12.8k|                                             specs, value, loc));
 6148|       |
 6149|  12.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 12.8k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  12.8k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  12.8k|        std::ptrdiff_t postfix_width = 0;
 6158|  12.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 12.7k, False: 106]
  ------------------
 6159|  12.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  12.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  12.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  12.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  12.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  12.7k|                                 value_width));
 6163|  12.7k|            std::tie(it, postfix_width) = postfix_result;
 6164|  12.7k|        }
 6165|       |
 6166|  12.8k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  12.8k|                                                 value_width, postfix_width);
 6168|  12.8k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 12.8k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  12.8k|        return it;
 6173|  12.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6177|  74.1k|    {
 6178|  74.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  74.1k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  74.1k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  74.1k|            auto rd = make_reader<T, char_type>();
 6183|  74.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  74.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 74.1k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|  74.1k|            return impl(rd, range, value);
 6188|  74.1k|        }
 6189|  74.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  74.1k|            auto rd = make_reader<T, char_type>();
 6191|  74.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  74.1k|                return unexpected(e);
 6193|  74.1k|            }
 6194|       |
 6195|  74.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  74.1k|                specs.width != 0) {
 6197|  74.1k|                return impl(rd, range, value);
 6198|  74.1k|            }
 6199|       |
 6200|  74.1k|            auto crange = get_as_contiguous(range);
 6201|  74.1k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  74.1k|            return ranges::next(range.begin(),
 6203|  74.1k|                                ranges::distance(crange.begin(), it));
 6204|  74.1k|        }
 6205|  74.1k|        else {
 6206|  74.1k|            SCN_EXPECT(false);
 6207|  74.1k|            SCN_UNREACHABLE;
 6208|  74.1k|        }
 6209|  74.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|  74.1k|    {
 6120|  74.1k|        const bool need_skipped_width =
 6121|  74.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 74.1k]
  |  Branch (6121:33): [True: 0, False: 74.1k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  74.1k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  74.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  74.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  74.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  74.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 548, False: 73.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    548|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    548|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    548|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    548|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    548|    }                                                  \
  |  |  |  | 3667|  74.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  73.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  73.6k|        auto [it, prefix_width] = prefix_result;
 6126|  73.6k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  73.6k|        std::ptrdiff_t value_width = 0;
 6130|  73.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 73.6k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  73.6k|        else {
 6146|  73.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  73.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  73.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  73.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 60.7k, False: 12.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  60.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  60.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  60.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  60.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  60.7k|    }                                                  \
  |  | 3667|  73.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  73.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  12.9k|                                             specs, value, loc));
 6148|       |
 6149|  12.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 12.9k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  12.9k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  12.9k|        std::ptrdiff_t postfix_width = 0;
 6158|  12.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 12.8k, False: 116]
  ------------------
 6159|  12.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  12.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  12.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  12.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  12.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  12.8k|                                 value_width));
 6163|  12.8k|            std::tie(it, postfix_width) = postfix_result;
 6164|  12.8k|        }
 6165|       |
 6166|  12.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  12.9k|                                                 value_width, postfix_width);
 6168|  12.9k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 12.9k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  12.9k|        return it;
 6173|  12.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6177|  74.3k|    {
 6178|  74.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6178:23): [Folded - Ignored]
  |  Branch (6178:23): [Folded - Ignored]
  ------------------
 6179|  74.3k|                      std::is_same_v<
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|      0|                          context_type,
 6181|  74.3k|                          basic_contiguous_scan_context<char_type>>) {
 6182|  74.3k|            auto rd = make_reader<T, char_type>();
 6183|  74.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  74.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 74.3k]
  |  |  ------------------
  ------------------
 6184|      0|                return unexpected(e);
 6185|      0|            }
 6186|       |
 6187|  74.3k|            return impl(rd, range, value);
 6188|  74.3k|        }
 6189|  74.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6190|  74.3k|            auto rd = make_reader<T, char_type>();
 6191|  74.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6192|  74.3k|                return unexpected(e);
 6193|  74.3k|            }
 6194|       |
 6195|  74.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6196|  74.3k|                specs.width != 0) {
 6197|  74.3k|                return impl(rd, range, value);
 6198|  74.3k|            }
 6199|       |
 6200|  74.3k|            auto crange = get_as_contiguous(range);
 6201|  74.3k|            SCN_TRY(it, impl(rd, crange, value));
 6202|  74.3k|            return ranges::next(range.begin(),
 6203|  74.3k|                                ranges::distance(crange.begin(), it));
 6204|  74.3k|        }
 6205|  74.3k|        else {
 6206|  74.3k|            SCN_EXPECT(false);
 6207|  74.3k|            SCN_UNREACHABLE;
 6208|  74.3k|        }
 6209|  74.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6119|  74.3k|    {
 6120|  74.3k|        const bool need_skipped_width =
 6121|  74.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6121:13): [True: 0, False: 74.3k]
  |  Branch (6121:33): [True: 0, False: 74.3k]
  ------------------
 6122|       |
 6123|       |        // Read prefix
 6124|  74.3k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  74.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  74.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  74.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  74.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 558, False: 73.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    558|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    558|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    558|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    558|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    558|    }                                                  \
  |  |  |  | 3667|  74.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  73.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6125|  73.7k|        auto [it, prefix_width] = prefix_result;
 6126|  73.7k|        auto prefix_end_it = it;
 6127|       |
 6128|       |        // Read value
 6129|  73.7k|        std::ptrdiff_t value_width = 0;
 6130|  73.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 73.7k]
  ------------------
 6131|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6131:17): [True: 0, False: 0]
  ------------------
 6132|      0|                return unexpected_scan_error(
 6133|      0|                    scan_error::invalid_scanned_value,
 6134|      0|                    "Too many spaces before value, precision exceeded before "
 6135|      0|                    "reading value");
 6136|      0|            }
 6137|       |
 6138|      0|            const auto initial_width = specs.precision - prefix_width;
 6139|      0|            auto max_width_view =
 6140|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6141|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|            it = w_it.base();
 6143|      0|            value_width = initial_width - w_it.count();
 6144|      0|        }
 6145|  73.7k|        else {
 6146|  73.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  73.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  73.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  73.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 60.7k, False: 13.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  60.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  60.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  60.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  60.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  60.7k|    }                                                  \
  |  | 3667|  73.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  73.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6147|  13.0k|                                             specs, value, loc));
 6148|       |
 6149|  13.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6149:17): [True: 0, False: 13.0k]
  ------------------
 6150|      0|                value_width = calculate_text_width(
 6151|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6152|      0|                        .view());
 6153|      0|            }
 6154|  13.0k|        }
 6155|       |
 6156|       |        // Read postfix
 6157|  13.0k|        std::ptrdiff_t postfix_width = 0;
 6158|  13.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6158:13): [True: 12.9k, False: 120]
  ------------------
 6159|  12.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  12.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  12.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|  12.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6161|  12.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6162|  12.9k|                                 value_width));
 6163|  12.9k|            std::tie(it, postfix_width) = postfix_result;
 6164|  12.9k|        }
 6165|       |
 6166|  13.0k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6167|  13.0k|                                                 value_width, postfix_width);
 6168|  13.0k|            !e) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 13.0k]
  ------------------
 6169|      0|            return unexpected(e);
 6170|      0|        }
 6171|       |
 6172|  13.0k|        return it;
 6173|  13.0k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|  69.4k|{
 5795|  69.4k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  69.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 123, False: 69.3k]
  |  |  ------------------
  ------------------
 5796|    123|        return unexpected(e);
 5797|    123|    }
 5798|       |
 5799|  69.3k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 69.3k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  69.3k|    return skip_classic_whitespace(range);
 5804|  69.3k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  23.0k|    {
 5871|  23.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  23.0k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  23.0k|            auto rd = make_reader<T, char_type>();
 5876|  23.0k|            return impl(rd, range, value);
 5877|  23.0k|        }
 5878|  23.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  23.0k|            auto rd = make_reader<T, char_type>();
 5880|  23.0k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 23.0k, False: 0]
  ------------------
 5881|  23.0k|                return impl(rd, range, value);
 5882|  23.0k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  23.0k|        else {
 5889|  23.0k|            SCN_EXPECT(false);
 5890|  23.0k|            SCN_UNREACHABLE;
 5891|  23.0k|        }
 5892|  23.0k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  23.0k|    {
 5863|  23.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  23.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  23.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  23.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 168, False: 22.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    168|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    168|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    168|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    168|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    168|    }                                                  \
  |  |  |  | 3667|  23.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  22.9k|                        .transform_error(make_eof_scan_error));
 5865|  22.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  23.0k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  22.9k|    {
 4152|  22.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  22.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  22.9k|        float_reader<CharT> rd{};
 4155|  22.9k|        return read_impl<Range>(
 4156|  22.9k|            range, rd,
 4157|  22.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  22.9k|                return r.read_source(SCN_FWD(args)...);
 4159|  22.9k|            },
 4160|  22.9k|            value);
 4161|  22.9k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  22.9k|    {
  754|  22.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  22.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.9k|              cvref<T> obj = *get<T>(fn);
  745|  22.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.9k|              }
  748|  22.9k|              else {
  749|  22.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.9k|              }
  751|  22.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  22.9k|    {
  684|  22.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.9k|            return static_cast<T*>(s.m_cp);
  686|  22.9k|        }
  687|  22.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.9k|            return static_cast<T*>(s.m_p);
  689|  22.9k|        }
  690|  22.9k|        else {
  691|  22.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.9k|        }
  693|  22.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  22.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  22.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  22.9k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  22.9k|        {
  662|  22.9k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  23.1k|    {
 5871|  23.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  23.1k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  23.1k|            auto rd = make_reader<T, char_type>();
 5876|  23.1k|            return impl(rd, range, value);
 5877|  23.1k|        }
 5878|  23.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  23.1k|            auto rd = make_reader<T, char_type>();
 5880|  23.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 23.1k, False: 0]
  ------------------
 5881|  23.1k|                return impl(rd, range, value);
 5882|  23.1k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  23.1k|        else {
 5889|  23.1k|            SCN_EXPECT(false);
 5890|  23.1k|            SCN_UNREACHABLE;
 5891|  23.1k|        }
 5892|  23.1k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  23.1k|    {
 5863|  23.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  23.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  23.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  23.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 183, False: 22.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    183|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    183|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    183|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    183|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    183|    }                                                  \
  |  |  |  | 3667|  23.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  22.9k|                        .transform_error(make_eof_scan_error));
 5865|  22.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  23.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  22.9k|    {
 4152|  22.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  22.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  22.9k|        float_reader<CharT> rd{};
 4155|  22.9k|        return read_impl<Range>(
 4156|  22.9k|            range, rd,
 4157|  22.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  22.9k|                return r.read_source(SCN_FWD(args)...);
 4159|  22.9k|            },
 4160|  22.9k|            value);
 4161|  22.9k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  22.9k|    {
  754|  22.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  22.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.9k|              cvref<T> obj = *get<T>(fn);
  745|  22.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.9k|              }
  748|  22.9k|              else {
  749|  22.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.9k|              }
  751|  22.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  22.9k|    {
  684|  22.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.9k|            return static_cast<T*>(s.m_cp);
  686|  22.9k|        }
  687|  22.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.9k|            return static_cast<T*>(s.m_p);
  689|  22.9k|        }
  690|  22.9k|        else {
  691|  22.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.9k|        }
  693|  22.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  22.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  22.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  22.9k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  22.9k|        {
  662|  22.9k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  23.2k|    {
 5871|  23.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  23.2k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  23.2k|            auto rd = make_reader<T, char_type>();
 5876|  23.2k|            return impl(rd, range, value);
 5877|  23.2k|        }
 5878|  23.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  23.2k|            auto rd = make_reader<T, char_type>();
 5880|  23.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 23.2k, False: 0]
  ------------------
 5881|  23.2k|                return impl(rd, range, value);
 5882|  23.2k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  23.2k|        else {
 5889|  23.2k|            SCN_EXPECT(false);
 5890|  23.2k|            SCN_UNREACHABLE;
 5891|  23.2k|        }
 5892|  23.2k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  23.2k|    {
 5863|  23.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  23.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  23.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  23.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 189, False: 23.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    189|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    189|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    189|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    189|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    189|    }                                                  \
  |  |  |  | 3667|  23.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  23.0k|                        .transform_error(make_eof_scan_error));
 5865|  23.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  23.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  23.0k|    {
 4152|  23.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  23.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  23.0k|        float_reader<CharT> rd{};
 4155|  23.0k|        return read_impl<Range>(
 4156|  23.0k|            range, rd,
 4157|  23.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  23.0k|                return r.read_source(SCN_FWD(args)...);
 4159|  23.0k|            },
 4160|  23.0k|            value);
 4161|  23.0k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  23.0k|    {
  754|  23.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  23.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  23.0k|              cvref<T> obj = *get<T>(fn);
  745|  23.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  23.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  23.0k|              }
  748|  23.0k|              else {
  749|  23.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  23.0k|              }
  751|  23.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  23.0k|    {
  684|  23.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  23.0k|            return static_cast<T*>(s.m_cp);
  686|  23.0k|        }
  687|  23.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  23.0k|            return static_cast<T*>(s.m_p);
  689|  23.0k|        }
  690|  23.0k|        else {
  691|  23.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  23.0k|        }
  693|  23.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  23.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  23.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  23.0k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|  23.0k|        {
  662|  23.0k|        }

LLVMFuzzerTestOneInput:
   54|  3.06k|{
   55|  3.06k|    scn::fuzz::run(data, size);
   56|  3.06k|    return 0;
   57|  3.06k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  3.06k|{
   33|  3.06k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 3.06k]
  |  Branch (33:35): [True: 0, False: 3.06k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  3.06k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  3.06k|    const auto& f =
   40|  3.06k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  3.06k|    do_basic_run(sv, f);
   42|       |
   43|  3.06k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  3.06k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  3.06k|    do_basic_run(wsv_reinterpret, wf);
   46|  3.06k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 3.06k, False: 0]
  ------------------
   47|  3.06k|        do_basic_run(wsv_transcode, wf);
   48|  3.06k|    }
   49|  3.06k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  3.06k|{
   25|  3.06k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.06k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.06k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.06k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  3.06k|{
   25|  3.06k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.06k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.06k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.06k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  6.12k|{
   25|  6.12k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.12k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.12k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.12k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  6.12k|{
   25|  6.12k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  6.12k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  6.12k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  6.12k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  3.06k|{
   52|  3.06k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  3.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  3.06k|    string_buffer.resize(size);
   56|  3.06k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  3.06k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  3.06k|    const auto wsv_reinterpret_size =
   61|  3.06k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 67, False: 2.99k]
  ------------------
   62|  3.06k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  3.06k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  3.06k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  3.06k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  3.06k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  3.06k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  3.06k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.06k|{
  122|  3.06k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.06k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.06k|    buf.resize(sizeof...(Args));
  125|  3.06k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.06k|    return buf;
  127|  3.06k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  3.06k|{
  108|  3.06k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  3.06k|        return format_string_view_buffer;
  110|  3.06k|    }
  111|  3.06k|    else {
  112|  3.06k|        return wformat_string_view_buffer;
  113|  3.06k|    }
  114|  3.06k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  3.06k|{
  185|  3.06k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  3.06k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  3.06k|                                   format_strings);
  188|  3.06k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.06k|{
  133|       |    // Regular scan
  134|  18.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 18.3k, False: 3.06k]
  ------------------
  135|  18.3k|        auto it = scn::ranges::begin(source);
  136|   340k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   340k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   340k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   340k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   340k|            auto result = scn::scan<T>(
  139|   340k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   340k|                scn::runtime_format(f));
  141|   340k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 18.3k, False: 322k]
  ------------------
  142|  18.3k|                break;
  143|  18.3k|            }
  144|   322k|            it = result->begin();
  145|   322k|        }
  146|  18.3k|    }
  147|       |
  148|       |    // scan localized
  149|  18.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 18.3k, False: 3.06k]
  ------------------
  150|  18.3k|        auto it = scn::ranges::begin(source);
  151|   340k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   340k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   340k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   340k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   340k|            auto result = scn::scan<T>(
  154|   340k|                global_locale,
  155|   340k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   340k|                scn::runtime_format(f));
  157|   340k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 18.3k, False: 322k]
  ------------------
  158|  18.3k|                break;
  159|  18.3k|            }
  160|   322k|            it = result->begin();
  161|   322k|        }
  162|  18.3k|    }
  163|       |
  164|       |    // scan_value
  165|  3.06k|    {
  166|  3.06k|        auto it = scn::ranges::begin(source);
  167|  74.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  74.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  74.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  74.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  74.7k|            auto result = scn::scan_value<T>(
  170|  74.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  74.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.06k, False: 71.6k]
  ------------------
  172|  3.06k|                break;
  173|  3.06k|            }
  174|  71.6k|            it = result->begin();
  175|  71.6k|        }
  176|  3.06k|    }
  177|  3.06k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.06k|{
  133|       |    // Regular scan
  134|  18.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 18.3k, False: 3.06k]
  ------------------
  135|  18.3k|        auto it = scn::ranges::begin(source);
  136|   367k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   367k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   367k|            auto result = scn::scan<T>(
  139|   367k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   367k|                scn::runtime_format(f));
  141|   367k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 18.3k, False: 349k]
  ------------------
  142|  18.3k|                break;
  143|  18.3k|            }
  144|   349k|            it = result->begin();
  145|   349k|        }
  146|  18.3k|    }
  147|       |
  148|       |    // scan localized
  149|  18.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 18.3k, False: 3.06k]
  ------------------
  150|  18.3k|        auto it = scn::ranges::begin(source);
  151|   367k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   367k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   367k|            auto result = scn::scan<T>(
  154|   367k|                global_locale,
  155|   367k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   367k|                scn::runtime_format(f));
  157|   367k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 18.3k, False: 349k]
  ------------------
  158|  18.3k|                break;
  159|  18.3k|            }
  160|   349k|            it = result->begin();
  161|   349k|        }
  162|  18.3k|    }
  163|       |
  164|       |    // scan_value
  165|  3.06k|    {
  166|  3.06k|        auto it = scn::ranges::begin(source);
  167|  82.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  82.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  82.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  82.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  82.6k|            auto result = scn::scan_value<T>(
  170|  82.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  82.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.06k, False: 79.5k]
  ------------------
  172|  3.06k|                break;
  173|  3.06k|            }
  174|  79.5k|            it = result->begin();
  175|  79.5k|        }
  176|  3.06k|    }
  177|  3.06k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  3.06k|{
  133|       |    // Regular scan
  134|  18.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 18.3k, False: 3.06k]
  ------------------
  135|  18.3k|        auto it = scn::ranges::begin(source);
  136|   372k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   372k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   372k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   372k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   372k|            auto result = scn::scan<T>(
  139|   372k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   372k|                scn::runtime_format(f));
  141|   372k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 18.3k, False: 353k]
  ------------------
  142|  18.3k|                break;
  143|  18.3k|            }
  144|   353k|            it = result->begin();
  145|   353k|        }
  146|  18.3k|    }
  147|       |
  148|       |    // scan localized
  149|  18.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 18.3k, False: 3.06k]
  ------------------
  150|  18.3k|        auto it = scn::ranges::begin(source);
  151|   372k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   372k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   372k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   372k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   372k|            auto result = scn::scan<T>(
  154|   372k|                global_locale,
  155|   372k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   372k|                scn::runtime_format(f));
  157|   372k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 18.3k, False: 353k]
  ------------------
  158|  18.3k|                break;
  159|  18.3k|            }
  160|   353k|            it = result->begin();
  161|   353k|        }
  162|  18.3k|    }
  163|       |
  164|       |    // scan_value
  165|  3.06k|    {
  166|  3.06k|        auto it = scn::ranges::begin(source);
  167|  84.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  84.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  84.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  84.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  84.1k|            auto result = scn::scan_value<T>(
  170|  84.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  84.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.06k, False: 81.1k]
  ------------------
  172|  3.06k|                break;
  173|  3.06k|            }
  174|  81.1k|            it = result->begin();
  175|  81.1k|        }
  176|  3.06k|    }
  177|  3.06k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.06k|{
  133|       |    // Regular scan
  134|  18.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 18.3k, False: 3.06k]
  ------------------
  135|  18.3k|        auto it = scn::ranges::begin(source);
  136|   343k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   343k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   343k|            auto result = scn::scan<T>(
  139|   343k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   343k|                scn::runtime_format(f));
  141|   343k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 18.3k, False: 324k]
  ------------------
  142|  18.3k|                break;
  143|  18.3k|            }
  144|   324k|            it = result->begin();
  145|   324k|        }
  146|  18.3k|    }
  147|       |
  148|       |    // scan localized
  149|  18.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 18.3k, False: 3.06k]
  ------------------
  150|  18.3k|        auto it = scn::ranges::begin(source);
  151|   343k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   343k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   343k|            auto result = scn::scan<T>(
  154|   343k|                global_locale,
  155|   343k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   343k|                scn::runtime_format(f));
  157|   343k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 18.3k, False: 324k]
  ------------------
  158|  18.3k|                break;
  159|  18.3k|            }
  160|   324k|            it = result->begin();
  161|   324k|        }
  162|  18.3k|    }
  163|       |
  164|       |    // scan_value
  165|  3.06k|    {
  166|  3.06k|        auto it = scn::ranges::begin(source);
  167|  69.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  69.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  69.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  69.9k|            auto result = scn::scan_value<T>(
  170|  69.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  69.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.06k, False: 66.8k]
  ------------------
  172|  3.06k|                break;
  173|  3.06k|            }
  174|  66.8k|            it = result->begin();
  175|  66.8k|        }
  176|  3.06k|    }
  177|  3.06k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.06k|{
  133|       |    // Regular scan
  134|  18.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 18.3k, False: 3.06k]
  ------------------
  135|  18.3k|        auto it = scn::ranges::begin(source);
  136|   369k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   369k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   369k|            auto result = scn::scan<T>(
  139|   369k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   369k|                scn::runtime_format(f));
  141|   369k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 18.3k, False: 351k]
  ------------------
  142|  18.3k|                break;
  143|  18.3k|            }
  144|   351k|            it = result->begin();
  145|   351k|        }
  146|  18.3k|    }
  147|       |
  148|       |    // scan localized
  149|  18.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 18.3k, False: 3.06k]
  ------------------
  150|  18.3k|        auto it = scn::ranges::begin(source);
  151|   369k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   369k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   369k|            auto result = scn::scan<T>(
  154|   369k|                global_locale,
  155|   369k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   369k|                scn::runtime_format(f));
  157|   369k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 18.3k, False: 351k]
  ------------------
  158|  18.3k|                break;
  159|  18.3k|            }
  160|   351k|            it = result->begin();
  161|   351k|        }
  162|  18.3k|    }
  163|       |
  164|       |    // scan_value
  165|  3.06k|    {
  166|  3.06k|        auto it = scn::ranges::begin(source);
  167|  77.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  77.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  77.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  77.4k|            auto result = scn::scan_value<T>(
  170|  77.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  77.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.06k, False: 74.4k]
  ------------------
  172|  3.06k|                break;
  173|  3.06k|            }
  174|  74.4k|            it = result->begin();
  175|  74.4k|        }
  176|  3.06k|    }
  177|  3.06k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  3.06k|{
  133|       |    // Regular scan
  134|  18.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 18.3k, False: 3.06k]
  ------------------
  135|  18.3k|        auto it = scn::ranges::begin(source);
  136|   374k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   374k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   374k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   374k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   374k|            auto result = scn::scan<T>(
  139|   374k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   374k|                scn::runtime_format(f));
  141|   374k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 18.3k, False: 355k]
  ------------------
  142|  18.3k|                break;
  143|  18.3k|            }
  144|   355k|            it = result->begin();
  145|   355k|        }
  146|  18.3k|    }
  147|       |
  148|       |    // scan localized
  149|  18.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 18.3k, False: 3.06k]
  ------------------
  150|  18.3k|        auto it = scn::ranges::begin(source);
  151|   374k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   374k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   374k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   374k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   374k|            auto result = scn::scan<T>(
  154|   374k|                global_locale,
  155|   374k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   374k|                scn::runtime_format(f));
  157|   374k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 18.3k, False: 355k]
  ------------------
  158|  18.3k|                break;
  159|  18.3k|            }
  160|   355k|            it = result->begin();
  161|   355k|        }
  162|  18.3k|    }
  163|       |
  164|       |    // scan_value
  165|  3.06k|    {
  166|  3.06k|        auto it = scn::ranges::begin(source);
  167|  78.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  78.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  78.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  78.5k|            auto result = scn::scan_value<T>(
  170|  78.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  78.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 3.06k, False: 75.4k]
  ------------------
  172|  3.06k|                break;
  173|  3.06k|            }
  174|  75.4k|            it = result->begin();
  175|  75.4k|        }
  176|  3.06k|    }
  177|  3.06k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  3.06k|{
   90|  3.06k|    using char_type = ranges::range_value_t<Source>;
   91|  3.06k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  3.06k|    deque.clear();
   93|  3.06k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  3.06k|              std::back_inserter(deque));
   95|  3.06k|    return deque;
   96|  3.06k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  3.06k|{
   79|  3.06k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  3.06k|        return noncontiguous_buffer;
   81|  3.06k|    }
   82|  3.06k|    else {
   83|  3.06k|        return wnoncontiguous_buffer;
   84|  3.06k|    }
   85|  3.06k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  3.06k|{
  122|  3.06k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  3.06k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  3.06k|    buf.resize(sizeof...(Args));
  125|  3.06k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  3.06k|    return buf;
  127|  3.06k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  3.06k|{
  108|  3.06k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  3.06k|        return format_string_view_buffer;
  110|  3.06k|    }
  111|  3.06k|    else {
  112|  3.06k|        return wformat_string_view_buffer;
  113|  3.06k|    }
  114|  3.06k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  6.12k|{
  185|  6.12k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  6.12k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  6.12k|                                   format_strings);
  188|  6.12k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.12k|{
  133|       |    // Regular scan
  134|  36.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 36.7k, False: 6.12k]
  ------------------
  135|  36.7k|        auto it = scn::ranges::begin(source);
  136|  44.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  44.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  44.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  44.7k|            auto result = scn::scan<T>(
  139|  44.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  44.7k|                scn::runtime_format(f));
  141|  44.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 36.7k, False: 8.00k]
  ------------------
  142|  36.7k|                break;
  143|  36.7k|            }
  144|  8.00k|            it = result->begin();
  145|  8.00k|        }
  146|  36.7k|    }
  147|       |
  148|       |    // scan localized
  149|  36.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 36.7k, False: 6.12k]
  ------------------
  150|  36.7k|        auto it = scn::ranges::begin(source);
  151|  44.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  44.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  44.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  44.7k|            auto result = scn::scan<T>(
  154|  44.7k|                global_locale,
  155|  44.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  44.7k|                scn::runtime_format(f));
  157|  44.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 36.7k, False: 8.00k]
  ------------------
  158|  36.7k|                break;
  159|  36.7k|            }
  160|  8.00k|            it = result->begin();
  161|  8.00k|        }
  162|  36.7k|    }
  163|       |
  164|       |    // scan_value
  165|  6.12k|    {
  166|  6.12k|        auto it = scn::ranges::begin(source);
  167|  7.70k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  7.70k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  7.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  7.70k|            auto result = scn::scan_value<T>(
  170|  7.70k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  7.70k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.12k, False: 1.57k]
  ------------------
  172|  6.12k|                break;
  173|  6.12k|            }
  174|  1.57k|            it = result->begin();
  175|  1.57k|        }
  176|  6.12k|    }
  177|  6.12k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.12k|{
  133|       |    // Regular scan
  134|  36.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 36.7k, False: 6.12k]
  ------------------
  135|  36.7k|        auto it = scn::ranges::begin(source);
  136|  44.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  44.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  44.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  44.8k|            auto result = scn::scan<T>(
  139|  44.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  44.8k|                scn::runtime_format(f));
  141|  44.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 36.7k, False: 8.06k]
  ------------------
  142|  36.7k|                break;
  143|  36.7k|            }
  144|  8.06k|            it = result->begin();
  145|  8.06k|        }
  146|  36.7k|    }
  147|       |
  148|       |    // scan localized
  149|  36.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 36.7k, False: 6.12k]
  ------------------
  150|  36.7k|        auto it = scn::ranges::begin(source);
  151|  44.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  44.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  44.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  44.8k|            auto result = scn::scan<T>(
  154|  44.8k|                global_locale,
  155|  44.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  44.8k|                scn::runtime_format(f));
  157|  44.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 36.7k, False: 8.06k]
  ------------------
  158|  36.7k|                break;
  159|  36.7k|            }
  160|  8.06k|            it = result->begin();
  161|  8.06k|        }
  162|  36.7k|    }
  163|       |
  164|       |    // scan_value
  165|  6.12k|    {
  166|  6.12k|        auto it = scn::ranges::begin(source);
  167|  7.72k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  7.72k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  7.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  7.72k|            auto result = scn::scan_value<T>(
  170|  7.72k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  7.72k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.12k, False: 1.59k]
  ------------------
  172|  6.12k|                break;
  173|  6.12k|            }
  174|  1.59k|            it = result->begin();
  175|  1.59k|        }
  176|  6.12k|    }
  177|  6.12k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  6.12k|{
  133|       |    // Regular scan
  134|  36.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 36.7k, False: 6.12k]
  ------------------
  135|  36.7k|        auto it = scn::ranges::begin(source);
  136|  44.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  44.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  44.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  44.8k|            auto result = scn::scan<T>(
  139|  44.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  44.8k|                scn::runtime_format(f));
  141|  44.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 36.7k, False: 8.13k]
  ------------------
  142|  36.7k|                break;
  143|  36.7k|            }
  144|  8.13k|            it = result->begin();
  145|  8.13k|        }
  146|  36.7k|    }
  147|       |
  148|       |    // scan localized
  149|  36.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 36.7k, False: 6.12k]
  ------------------
  150|  36.7k|        auto it = scn::ranges::begin(source);
  151|  44.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  44.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  44.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  44.8k|            auto result = scn::scan<T>(
  154|  44.8k|                global_locale,
  155|  44.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  44.8k|                scn::runtime_format(f));
  157|  44.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 36.7k, False: 8.13k]
  ------------------
  158|  36.7k|                break;
  159|  36.7k|            }
  160|  8.13k|            it = result->begin();
  161|  8.13k|        }
  162|  36.7k|    }
  163|       |
  164|       |    // scan_value
  165|  6.12k|    {
  166|  6.12k|        auto it = scn::ranges::begin(source);
  167|  7.74k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  7.74k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  7.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  7.74k|            auto result = scn::scan_value<T>(
  170|  7.74k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  7.74k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.12k, False: 1.61k]
  ------------------
  172|  6.12k|                break;
  173|  6.12k|            }
  174|  1.61k|            it = result->begin();
  175|  1.61k|        }
  176|  6.12k|    }
  177|  6.12k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.12k|{
  133|       |    // Regular scan
  134|  36.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 36.7k, False: 6.12k]
  ------------------
  135|  36.7k|        auto it = scn::ranges::begin(source);
  136|  44.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  44.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  44.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  44.7k|            auto result = scn::scan<T>(
  139|  44.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  44.7k|                scn::runtime_format(f));
  141|  44.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 36.7k, False: 7.98k]
  ------------------
  142|  36.7k|                break;
  143|  36.7k|            }
  144|  7.98k|            it = result->begin();
  145|  7.98k|        }
  146|  36.7k|    }
  147|       |
  148|       |    // scan localized
  149|  36.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 36.7k, False: 6.12k]
  ------------------
  150|  36.7k|        auto it = scn::ranges::begin(source);
  151|  44.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  44.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  44.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  44.7k|            auto result = scn::scan<T>(
  154|  44.7k|                global_locale,
  155|  44.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  44.7k|                scn::runtime_format(f));
  157|  44.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 36.7k, False: 7.98k]
  ------------------
  158|  36.7k|                break;
  159|  36.7k|            }
  160|  7.98k|            it = result->begin();
  161|  7.98k|        }
  162|  36.7k|    }
  163|       |
  164|       |    // scan_value
  165|  6.12k|    {
  166|  6.12k|        auto it = scn::ranges::begin(source);
  167|  7.69k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  7.69k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  7.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  7.69k|            auto result = scn::scan_value<T>(
  170|  7.69k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  7.69k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.12k, False: 1.57k]
  ------------------
  172|  6.12k|                break;
  173|  6.12k|            }
  174|  1.57k|            it = result->begin();
  175|  1.57k|        }
  176|  6.12k|    }
  177|  6.12k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.12k|{
  133|       |    // Regular scan
  134|  36.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 36.7k, False: 6.12k]
  ------------------
  135|  36.7k|        auto it = scn::ranges::begin(source);
  136|  44.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  44.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  44.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  44.7k|            auto result = scn::scan<T>(
  139|  44.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  44.7k|                scn::runtime_format(f));
  141|  44.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 36.7k, False: 8.04k]
  ------------------
  142|  36.7k|                break;
  143|  36.7k|            }
  144|  8.04k|            it = result->begin();
  145|  8.04k|        }
  146|  36.7k|    }
  147|       |
  148|       |    // scan localized
  149|  36.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 36.7k, False: 6.12k]
  ------------------
  150|  36.7k|        auto it = scn::ranges::begin(source);
  151|  44.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  44.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  44.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  44.7k|            auto result = scn::scan<T>(
  154|  44.7k|                global_locale,
  155|  44.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  44.7k|                scn::runtime_format(f));
  157|  44.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 36.7k, False: 8.04k]
  ------------------
  158|  36.7k|                break;
  159|  36.7k|            }
  160|  8.04k|            it = result->begin();
  161|  8.04k|        }
  162|  36.7k|    }
  163|       |
  164|       |    // scan_value
  165|  6.12k|    {
  166|  6.12k|        auto it = scn::ranges::begin(source);
  167|  7.71k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  7.71k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  7.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  7.71k|            auto result = scn::scan_value<T>(
  170|  7.71k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  7.71k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.12k, False: 1.58k]
  ------------------
  172|  6.12k|                break;
  173|  6.12k|            }
  174|  1.58k|            it = result->begin();
  175|  1.58k|        }
  176|  6.12k|    }
  177|  6.12k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  6.12k|{
  133|       |    // Regular scan
  134|  36.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 36.7k, False: 6.12k]
  ------------------
  135|  36.7k|        auto it = scn::ranges::begin(source);
  136|  44.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  44.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  44.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  44.8k|            auto result = scn::scan<T>(
  139|  44.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  44.8k|                scn::runtime_format(f));
  141|  44.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 36.7k, False: 8.11k]
  ------------------
  142|  36.7k|                break;
  143|  36.7k|            }
  144|  8.11k|            it = result->begin();
  145|  8.11k|        }
  146|  36.7k|    }
  147|       |
  148|       |    // scan localized
  149|  36.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 36.7k, False: 6.12k]
  ------------------
  150|  36.7k|        auto it = scn::ranges::begin(source);
  151|  44.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  44.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  44.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  44.8k|            auto result = scn::scan<T>(
  154|  44.8k|                global_locale,
  155|  44.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  44.8k|                scn::runtime_format(f));
  157|  44.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 36.7k, False: 8.11k]
  ------------------
  158|  36.7k|                break;
  159|  36.7k|            }
  160|  8.11k|            it = result->begin();
  161|  8.11k|        }
  162|  36.7k|    }
  163|       |
  164|       |    // scan_value
  165|  6.12k|    {
  166|  6.12k|        auto it = scn::ranges::begin(source);
  167|  7.73k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  7.73k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  7.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  7.73k|            auto result = scn::scan_value<T>(
  170|  7.73k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  7.73k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 6.12k, False: 1.60k]
  ------------------
  172|  6.12k|                break;
  173|  6.12k|            }
  174|  1.60k|            it = result->begin();
  175|  1.60k|        }
  176|  6.12k|    }
  177|  6.12k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  6.12k|{
   90|  6.12k|    using char_type = ranges::range_value_t<Source>;
   91|  6.12k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  6.12k|    deque.clear();
   93|  6.12k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  6.12k|              std::back_inserter(deque));
   95|  6.12k|    return deque;
   96|  6.12k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  6.12k|{
   79|  6.12k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  6.12k|        return noncontiguous_buffer;
   81|  6.12k|    }
   82|  6.12k|    else {
   83|  6.12k|        return wnoncontiguous_buffer;
   84|  6.12k|    }
   85|  6.12k|}

